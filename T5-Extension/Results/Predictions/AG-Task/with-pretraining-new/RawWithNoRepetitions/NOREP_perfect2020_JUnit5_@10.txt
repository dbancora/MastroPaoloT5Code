[+] input: URISyntaxException { SerDesParser serDesAnalyzer = new SerDesParser(analyzer); Snapshot first = serDesAnalyzer.parse(pathOfResource("jstack_8.log"), NoOpProgressListener); Snapshot second = serDesAnalyzer.parse(pathOfResource("jstack_8.log"), NoOpProgressListener); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(first, second)
[-] pred: org. junit. Assert. assertEquals ( first, second )
************************************
[+] input: GestaltException { InputStreamConfigSource source = new InputStreamConfigSource( new ByteArrayInputStream("test".getBytes(StandardCharsets.UTF_8)), "properties");  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, source::loadList); }
[*] target: assertFalse(source.hasList())
[-] pred: org. junit. Assert. assertFalse ( source. hasList() )
************************************
[+] input: testF3() { for (int i = 1; i < MAX_VAl; i++) { int expected = Solution.f1(i); int actual = Solution.f3(i); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = RequestedResourceController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = requestedResourceViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: putMoneyAndGetObject() { final RealNumberParser realNumberParser = new RealNumberParser(locales);  final Money money = MoneyParser.parse(twelveDotThreeFour, MoneyParser.GBP); assertNotNull(money); dataManager.putMoney(DBKey.PRICE_LISTED, money);  final Object out = dataManager.get(DBKey.PRICE_LISTED, realNumberParser); assertNotNull(out); assertTrue(out instanceof Money); final Money mOut = (Money) out; assertEquals(twelveDotThreeFour, mOut.getValue()); final Currency currency = mOut.getCurrency(); "<AssertPlaceHolder>"; assertEquals("GBP", currency.getCurrencyCode());  MoneyVerifier.checkRawData(dataManager, twelveDotThreeFour, "GBP"); }
[*] target: assertNotNull(currency)
[-] pred: org. junit. Assert. assertNotNull ( currency )
************************************
[+] input: IOException { // given File fileToUpload = new File("src/test/resources/testFileToUpload.txt"); String googleDriveRootFolderId = "parentFolderId"; GoogleDriveClient googleService = new GoogleDriveClient(googleDriveService, googleDriveRootFolderId);  com.google.api.services.drive.model.File fileMetadata = new com.google.api.services.drive.model.File(); fileMetadata.setName("testFileToUpload.txt"); fileMetadata.setParents(Collections.singletonList("parentFolderId"));  FileContent notionExportFileContent = new FileContent("application/zip", fileToUpload);  when(googleDriveService.files().create(any(), any()).setFields(anyString()).execute()).thenReturn(null); clearInvocations(googleDriveService);  // when boolean result = googleService.upload(fileToUpload);  // then "<AssertPlaceHolder>"; verify(googleDriveService).files(); // eq(notionExportFileContent) does not work I assume because FileContent doesn't override the equals method? // com.google.api.client.http.FileContent@66908383 is not the same as com.google.api.client.http.FileContent@736ac09a // but eq() works for com.google.api.services.drive.model.File -> the toString {"name" = "testFileToUpload.txt", "parents" = [parentFolderId]} verify(googleDriveService.files()).create(eq(fileMetadata), any(FileContent.class)); verify(googleDriveService.files().create(eq(fileMetadata), any(FileContent.class))).setFields("id, parents"); verify(googleDriveService.files().create(eq(fileMetadata), any(FileContent.class)).setFields("id, parents")).execute(); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testTasks_argTask() {  var TASKS = List.of(StandardArgs.task("do_something", "ARG_NAME", "desc"));  var command = "--config app.conf --task do_something ARG_VALUE"; var commandArgs = command.split("\\s");  var standardArgs = StandardArgsProcessor.processArgs(APP_NAME, commandArgs, TASKS, null); var tasks = standardArgs.getTasks();  "<AssertPlaceHolder>"; assertEquals("do_something", tasks.get(0).getTaskName()); assertEquals("ARG_VALUE", tasks.get(0).getTaskArg()); }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
[+] input: testCreateNewInternalThread() { InternalThread t = new InternalThreadImpl(); assertThreadInfo(t, null, null);  final AtomicBoolean b = new AtomicBoolean(); t = new InternalThreadImpl(() -> b.set(true)); assertThreadInfo(t, null, null); t.thread().run(); assertTrue(b.get()); b.set(false);  final ThreadGroup group = new ThreadGroup("foo"); t = new InternalThreadImpl(group, () -> b.set(true)); assertThreadInfo(t, group, null); t.thread().run(); assertTrue(b.get()); b.set(false);  assertThreadInfo(new InternalThreadImpl("foo"), null, "foo"); assertThreadInfo(new InternalThreadImpl(group, "foo"), group, "foo");  t = new InternalThreadImpl(() -> b.set(true), "foo"); assertThreadInfo(t, null, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = new InternalThreadImpl(group, () -> b.set(true), "foo"); assertThreadInfo(t, group, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = new InternalThreadImpl(group, () -> b.set(true), "foo", 8); assertThreadInfo(t, group, "foo"); t.thread().run(); "<AssertPlaceHolder>"; b.set(false); }
[*] target: assertTrue(b.get())
[-] pred: org. junit. Assert. assertTrue ( b. get ( ) )
************************************
[+] input: testInvalid() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = "12345"; final Class<String> propertyClass = String.class; final boolean present = true; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("12345", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
[+] input: testDoVolatilityAssert_belowLowerLimit() { FallAssertion fallAssertion = MockFallAssertionFactory.create("10", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "80"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = fallAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
[+] input: Exception { Properties file = Resources.getResourceAsProperties(CLASS_LOADER, JPETSTORE_PROPERTIES); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(file)
[-] pred: org. junit. Assert. assertNotNull ( file )
************************************
[+] input: getResourceMaps() { List<AWSTargetGroup> awsTargetGroups = getAwsTargetGroups();  Maps<Resource> resourceMaps = exportLoadBalancerTargetGroups.getResourceMaps(awsTargetGroups); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/LoadBalancerTargetGroup.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: listAllHousesDefault() { // given Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);  given(communityHouseRepository.findAll()) .willReturn(housesInDatabase);  // when Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses();  // then "<AssertPlaceHolder>"; verify(communityHouseRepository).findAll(); }
[*] target: assertEquals(housesInDatabase, resultHouses)
[-] pred: org. junit. Assert. assertEquals ( housesInDatabase, resultHouses )
************************************
[+] input: shouldCreateBooking() { long hotelRoomId = 11L; long customerId = 19L;  HotelRoom hotelRoom = new HotelRoom(); hotelRoom.setCost(15.0); when(hotelRoomRepository.find(hotelRoomId)).thenReturn(hotelRoom); when(customerRepository.find(customerId)).thenReturn(new Customer()); when(bookingValidator.isValid(any())).thenReturn(true); when(bookingRepository.createBooking(any())).thenReturn(true);  boolean actual = bookingService.book(hotelRoomId, customerId, LocalDate.now().minusDays(3), LocalDate.now());  "<AssertPlaceHolder>"; verify(hotelRoomRepository).find(hotelRoomId); verify(customerRepository).find(customerId); verify(customerRepository).updateCost(customerId, 15.0); verify(bookingValidator).isValid(any()); verify(bookingRepository).createBooking(any()); verifyNoMoreInteractions(hotelRoomRepository, customerRepository, bookingValidator, bookingRepository); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: isRedisClusterEnabledReturnsDefaultStatus() { final Map<String, Object> originalConfig = new HashMap<>(); originalConfig.put("topic", "mytopic"); originalConfig.put("redis.uri", "redis://localhost:6379"); originalConfig.put("redis.channels", "channel1,channel2"); originalConfig.put("redis.channels.pattern.enabled", true);  final RedisSourceConfig sinkConfig = new RedisSourceConfig(originalConfig);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(sinkConfig.isRedisClusterEnabled())
[-] pred: org. junit. Assert. assertFalse ( sinkConfig. isRedisClusterEnabled ( ) )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Vpc.cmd")); String actual = exportvpcs.getTFImport(getAwsVpcs()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: toModel_validInput_returnCatalogView() { /* ARRANGE */ final var catalog = getCatalog();  /* ACT */ final var result = catalogViewAssembler.toModel(catalog);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(catalog.getTitle(), result.getTitle()); Assertions.assertEquals(catalog.getDescription(), result.getDescription()); Assertions.assertEquals(catalog.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(catalog.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(catalog.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getCatalogLink(catalog.getId()), selfLink.get().getHref());  final var offeredResourcesLink = result.getLink("offers"); assertTrue(offeredResourcesLink.isPresent()); assertNotNull(offeredResourcesLink.get()); assertEquals(getCatalogOfferedResourcesLink(catalog.getId()), offeredResourcesLink.get().getHref()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testCloseQuietly() { ESAIOUtils.closeQuietly(() -> { throw new IOException(); });  final AtomicBoolean closed = new AtomicBoolean(false); ESAIOUtils.closeQuietly(() -> closed.set(true)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(closed.get())
[-] pred: org. junit. Assert. assertTrue ( closed. get ( ) )
************************************
[+] input: getBookByKeyword() { BookDO bookDO = new BookDO(); bookDO.setTitle(title); bookDO.setAuthor(author); bookDO.setImage(image); bookDO.setSummary(summary); bookMapper.insert(bookDO);  List<BookDO> books = bookService.getBookByKeyword("%千里%"); boolean anyMatch = books.stream().anyMatch(bo -> bo.getTitle().equals(title) && bo.getAuthor().equals(author)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer, Integer>withFunction(num -> num + 1) .build();  AtomicReference<Integer> result = stage.execute(new AtomicReference<Integer>(1));  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, result.get()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: convertSpansToRequest() { SpanData span1 = makeBasicSpan("span-1"); SpanData span2 = makeBasicSpan("span-2"); ImmutableList<SpanData> spans = ImmutableList.of(span1, span2);  ExportTraceServiceRequest actual = testSubject.convertSpansToRequest(spans);  "<AssertPlaceHolder>"; assertEquals("span-1", actual.getResourceSpans(0).getScopeSpans(0).getSpans(0).getName()); assertEquals("span-2", actual.getResourceSpans(0).getScopeSpans(0).getSpans(1).getName()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://10.10.10.10"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final Properties properties = new Properties(); properties.setProperty( PropertyKey.clusterInstanceHostPattern.getKeyName(), "?.my-custom-domain.com:9999"); final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);   assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: IOException { try (InputStream yamlStream = this.getClass().getResourceAsStream("/ConsumerSpecificProviders.yml")) { List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream)); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, urls.size()); URL url = urls.get(0); Assertions.assertEquals("127.0.0.1", url.getAddress()); Assertions.assertEquals("*", url.getServiceInterface()); Assertions.assertEquals(6666, url.getParameter(TIMEOUT_KEY, 0)); Assertions.assertEquals("random", url.getParameter(LOADBALANCE_KEY)); Assertions.assertEquals("127.0.0.1:20880", url.getParameter(OVERRIDE_PROVIDERS_KEY)); Assertions.assertEquals(url.getParameter(APPLICATION_KEY), "demo-consumer"); } }
[*] target: assertNotNull(urls)
[-] pred: org. junit. Assert. assertNotNull ( urls )
************************************
[+] input: mapDepartmentListToOkrDepartmentList_shouldExpectEmptyListWhenDepartmentsAreNull() { ArrayList<OkrDepartment> departmentList = new ArrayList<>(); int expected = 0;  Collection<OkrUnitSchemaDto> actual = okrBranchSchemaMapper.mapOkrChildUnitListToOkrChildUnitSchemaList(departmentList, currentUserId);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.size())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. size ( ) )
************************************
[+] input: getVerticesWithoutSuccessorFromCyclicGraphTest() { Graph<String, DefaultEdge> graph = new DefaultDirectedGraph<>(DefaultEdge.class); graph.addVertex("Vertex_1"); graph.addVertex("Vertex_2"); graph.addVertex("Vertex_3"); graph.addVertex("Vertex_4");  graph.addEdge("Vertex_1", "Vertex_2"); graph.addEdge("Vertex_1", "Vertex_3"); graph.addEdge("Vertex_2", "Vertex_4"); graph.addEdge("Vertex_3", "Vertex_4"); graph.addEdge("Vertex_4", "Vertex_1");  List<String> vertices = GraphUtility.getVerticesWithoutSuccessors(graph);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, vertices.size())
[-] pred: org. junit. Assert. assertEquals ( 0, vertices. size ( ) )
************************************
[+] input: getResourceMaps() { List<AWSBucket> awsBuckets = getAwsBuckets();  Maps<Resource> resourceMaps = exportS3Buckets.getResourceMaps(awsBuckets); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/S3Bucket.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testDoFixValueAssert_equals() { GreaterThanOrEqualsAssertion greaterThanOrEqualsAssertion = MockGreaterThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = greaterThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry( buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()), receiverKeys, 1);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
[+] input: removeHouseFromCommunityByHouseIdCommunityNotExists() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();  given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID)) .willReturn(Optional.empty());  // when boolean houseDeleted = communitySDJpaService.removeHouseFromCommunityByHouseId(null, TEST_HOUSE_ID);  // then "<AssertPlaceHolder>"; verify(communityHouseRepository, never()).findByHouseId(TEST_HOUSE_ID); verifyNoInteractions(houseService); verify(communityRepository, never()).save(testCommunity); }
[*] target: assertFalse(houseDeleted)
[-] pred: org. junit. Assert. assertFalse ( houseDeleted )
************************************
[+] input: getCurrentOrg_success() { Organization org = _service.getCurrentOrganization(); "<AssertPlaceHolder>"; assertEquals("DIS_ORG", org.getExternalId()); }
[*] target: assertNotNull(org)
[-] pred: org. junit. Assert. assertNotNull ( org )
************************************
[+] input: deleteCommunityNotExists() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();  given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID)) .willReturn(Optional.empty());  // when boolean communityDeleted = communitySDJpaService.deleteCommunity(TEST_COMMUNITY_ID);  // then "<AssertPlaceHolder>"; verify(communityRepository).findByCommunityIdWithHouses(TEST_COMMUNITY_ID); verify(communityHouseRepository, never()).deleteByHouseId(any()); verify(communityRepository, never()).delete(testCommunity); }
[*] target: assertFalse(communityDeleted)
[-] pred: org. junit. Assert. assertFalse ( communityDeleted )
************************************
[+] input: Exception { Map<String, String> configuration = new HashMap<>(); configuration.put("jdk.ObjectAllocationInNewTLAB#enabled", "true"); configuration.put("jdk.ObjectAllocationOutsideTLAB#enabled", "true");  TabularData expected = OpenDataUtils.makeOpenData(configuration);  MBeanServerConnection mBeanServerConnection = ManagementFactory.getPlatformMBeanServer(); ObjectName objectName = new ObjectName("jdk.management.jfr:type=FlightRecorder"); ObjectInstance objectInstance = mBeanServerConnection.getObjectInstance(objectName);  Object[] args = new Object[] {}; String[] argTypes = new String[] {}; long id = (long) mBeanServerConnection.invoke( objectInstance.getObjectName(), "newRecording", args, argTypes);  args = new Object[] {id, expected}; argTypes = new String[] {long.class.getName(), TabularData.class.getName()}; mBeanServerConnection.invoke( objectInstance.getObjectName(), "setRecordingSettings", args, argTypes);  args = new Object[] {id}; argTypes = new String[] {long.class.getName()}; Map<?, ?> actual = (Map<?, ?>) mBeanServerConnection.invoke( objectInstance.getObjectName(), "getRecordingSettings", args, argTypes);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: should_result_millis_when_hours() {  var expected = 10 * 60 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("10hours");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/IamPolicy.cmd")); String actual = exportIamPolicies.getTFImport(getAwsPolicies()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: defineCycle_insertActiveCycle_expectedCorrectReturn() { Cycle newCycle = new Cycle(); newCycle.setCycleState(CycleState.ACTIVE); Cycle oldCycle = new Cycle(); Cycle savedCycle = new Cycle();  when(cycleService.findById(anyLong())).thenReturn(oldCycle); when(cycleRepository.save(any(Cycle.class))).thenReturn(savedCycle);  Cycle actualCycle = cycleService.defineCycle(100L, newCycle);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(savedCycle, actualCycle)
[-] pred: org. junit. Assert. assertEquals ( savedCycle, actualCycle )
************************************
[+] input: create_genericEndpoint_returnGenericEndpoint() { /* ARRANGE */ final var desc = new GenericEndpointDesc();  Mockito.doReturn(new GenericEndpoint()).when(generic).create(desc);  /* ACT */ final var result = serviceProxy.create(desc);  /* ASSERT */ "<AssertPlaceHolder>"; assertTrue(result instanceof GenericEndpoint); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: IOException { String data = "\ud83d\udc49"; String result = DOMUtilities.contentToString(data, true); "<AssertPlaceHolder>"; }
[*] target: assertEquals(data, result)
[-] pred: org. junit. Assert. assertEquals ( data, result )
************************************
[+] input: spiralOrder() { Solution solution = new Solution(); int[][] a = new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}; List<Integer> expected = Arrays.asList(1, 2, 3, 6, 9, 8, 7, 4, 5); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, solution.spiralOrder(a))
[-] pred: org. junit. Assert. assertEquals ( expected, solution. spiralOrder ( a ) )
************************************
[+] input: shouldDeleteAuthorUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { AuthorMapper mapper = session.getMapper(AuthorMapper.class); int count = mapper.deleteAuthor(101); "<AssertPlaceHolder>"; assertNull(mapper.selectAuthor(101)); } }
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
[+] input: should_canConvertValue_returnTrue_ifCheckFloatMinValue() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(MIN_VALUE));  //then "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: testGetLocalPort() { final int port = NetworkUtils.selectRandomPort(); final MockAsyncRequest request = MockAsyncRequest.aMockRequest() .withLocalPort(port) .withUri("/") .build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(port, request.localPort())
[-] pred: org. junit. Assert. assertEquals ( port, request. localPort() )
************************************
[+] input: mapDateStringToDate_shouldNotMapWhenStringIsNonsense() { String expected = "dAWDsdd3a22";  LocalDate actual = dateMapper.mapDateStringToDate(expected);  "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: testDecoderCopyFromMiddle() { final char delim = ',';  final SequenceEncoder se = new SequenceEncoder(delim); se.append(1).append("blah blah blah,,,").append((String) null).append(42);  final SequenceEncoder.Decoder sd1 = new SequenceEncoder.Decoder(se.getValue(), delim);  sd1.nextToken(); sd1.nextToken();  final SequenceEncoder.Decoder sd2 = sd1.copy();  assertEquals(sd1.nextToken("x"), sd2.nextToken("y")); assertEquals(sd1.nextInt(-1), sd2.nextInt(-2)); assertFalse(sd1.hasNext()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(sd2.hasNext())
[-] pred: org. junit. Assert. assertFalse ( sd2. hasNext() )
************************************
[+] input: shouldReturnNullIfUserNotFoundByEmail() { final String username = "user"; when(legacyUserService.findByEmail(username)) .thenReturn(Optional.empty());  var result = legacyProvider.getUserByEmail(realmModel, username);  "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: InterruptedException { String interfaceName = "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport4TstService"; String version = "1.0.0.zk.md"; String group = null; String application = "vic.zk.md"; MetadataIdentifier providerMetadataIdentifier = storePrivider(zookeeperMetadataReport, interfaceName, version, group, application);  String fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 3500, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions.assertNotNull(fileContent);  deletePath(providerMetadataIdentifier, zookeeperMetadataReport); fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 1000, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions.assertNull(fileContent);   providerMetadataIdentifier = storePrivider(zookeeperMetadataReport, interfaceName, version, group, application); fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); fileContent = waitSeconds(fileContent, 3500, zookeeperMetadataReport.getNodePath(providerMetadataIdentifier)); Assertions."<AssertPlaceHolder>";  Gson gson = new Gson(); FullServiceDefinition fullServiceDefinition = gson.fromJson(fileContent, FullServiceDefinition.class); Assertions.assertEquals(fullServiceDefinition.getParameters().get("paramTest"), "zkTest"); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
[+] input: NoSuchMethodException { Method method = controller.getDeclaredMethod("combine", CommandEvent.class);  InteractionControllerDefinition controllerDefinition = InteractionControllerDefinition.build(controller, validators, dependencyInjector, LOCALIZATION_FUNCTION).orElse(null); assertNotNull(controllerDefinition); SlashCommandDefinition definition = controllerDefinition.getCommands().stream() .filter(it -> it.getCommandType() == Command.Type.SLASH) .map(it -> (SlashCommandDefinition) it) .filter(c -> c.getMethod().equals(method)) .findFirst().orElse(null); "<AssertPlaceHolder>";  assertEquals("super sub", definition.getName());  assertTrue(definition.hasCooldown()); assertEquals(5, definition.getCooldown().getDelay()); assertEquals(TimeUnit.DAYS, definition.getCooldown().getTimeUnit());  assertEquals(2, definition.getPermissions().size()); assertTrue(definition.getPermissions().contains("superPermission")); assertTrue(definition.getPermissions().contains("subPermission")); }
[*] target: assertNotNull(definition)
[-] pred: org. junit. Assert. assertNotNull ( definition )
************************************
[+] input: testDoFixValueAssert_withExpectation() { NotEqualsAssertion notEqualsAssertion = MockNotEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "1");  boolean assertionResult = notEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
[+] input: test2() { int[] nums = {1, 3, 2, 2, 3, 1}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
[+] input: Exception { final Response response = mock(Response.class); when(response.code()).thenReturn(204);  ObjectMapper mapper = new ObjectMapper(); ObjectNode clientPayload = mapper.createObjectNode(); clientPayload.put("my-custom-true-property","true"); clientPayload.put("my-custom-false-property", "false");  RepositoryDispatch repositoryDispatchRequest = ImmutableRepositoryDispatch.builder() .eventType("my-custom-event") .clientPayload(clientPayload) .build();  when(github.post("/repos/someowner/somerepo/dispatches", json.toJsonUnchecked(repositoryDispatchRequest))).thenReturn(completedFuture(response));  boolean repoDispatchResult = repoClient.createRepositoryDispatchEvent(repositoryDispatchRequest).get(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(repoDispatchResult)
[-] pred: org. junit. Assert. assertTrue ( repoDispatchResult )
************************************
[+] input: test_update() { RefTableVersionInfo info = MockRefDataVersionBasicFactory.mockDefaultUnpublishedRefTableVersionInfo(1L, 1L, "test_table", "test_database"); refTableVersionRepository.create(info); RefTableVersionInfo refTableVersionInfo = refTableVersionRepository.findByVersionId(info.getVersionId()); assertEquals(info, refTableVersionInfo); refTableVersionInfo.setTableName("table_update"); refTableVersionRepository.update(refTableVersionInfo); RefTableVersionInfo refTableVersionInfo_update = refTableVersionRepository.findByVersionId(info.getVersionId()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(refTableVersionInfo, refTableVersionInfo_update)
[-] pred: org. junit. Assert. assertEquals ( refTableVersionInfo, refTableVersionInfo_update )
************************************
[+] input: DbxException { // given DropboxClient testee = new DropboxClient(dropboxService);  Metadata m1 = new Metadata("folder1"); Metadata m2 = new Metadata("folder2"); List<Metadata> metadataList = List.of(m1, m2); ListFolderResult listFolderResult = new ListFolderResult(metadataList, "2", true);  when(dropboxService.files().listFolder(anyString())).thenReturn(listFolderResult); clearInvocations(dropboxService); // TODO wut?  // when boolean result = testee.doesFileExist("testFileToUpload.txt");  // then verify(dropboxService.files()).listFolder(""); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: NoSuchMethodException { final RouteHandler handler = mock(RouteHandler.class); when(handler.intercepted()).thenReturn(true); when(handler.handler()) .thenReturn(HandlerMethod.of(HandlerAdapterTest.class.getDeclaredMethod("normal", String.class), new HandlerAdapterTest())); final MultiValueMap<InterceptorPredicate, Interceptor> interceptors = new LinkedMultiValueMap<>(); final Interceptor interceptor0 = new Interceptor() { @Override public InterceptorPredicate predicate() { return request -> true; }  @Override public int getOrder() { return 0; } }; final Interceptor interceptor1 = new Interceptor() { @Override public InterceptorPredicate predicate() { return request -> true; }  @Override public int getOrder() { return -1; } }; final Interceptor interceptor2 = new Interceptor() { @Override public InterceptorPredicate predicate() { return request -> false; }  @Override public int getOrder() { return 1; } }; interceptors.add(interceptor0.predicate(), interceptor0); interceptors.add(interceptor1.predicate(), interceptor1); interceptors.add(interceptor2.predicate(), interceptor2);  final RouteHandlerAdapter adapter = new RouteHandlerAdapter(handler, mock(HandlerResolverFactory.class), interceptors, null);  final List<InternalInterceptor> matched = adapter.getMatchingInterceptors(MockAsyncRequest.aMockRequest().build()); "<AssertPlaceHolder>"; assertEquals(2, matched.size()); assertSame(interceptor1, matched.get(0)); assertSame(interceptor0, matched.get(1)); }
[*] target: assertNotNull(matched)
[-] pred: org. junit. Assert. assertNotNull ( matched )
************************************
[+] input: serializeWithNullMethod() { StackSerializer serializer = new StackSerializer(STACK_DEPTH); IMCStackTrace stack = mock(IMCStackTrace.class);  when(stack.getFrames()).thenReturn((List) framesWithNullMethod);  String result = serializer.serialize(stack); String expected = "\tat io.test.MyClass.action(unknown:123)\n" + "\tat unknown.unknown(unknown)\n" + "\tat io.test.Framewerk.root(unknown:66)"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: getInternal_Valid_returnArtifacts() { /* ARRANGE */ representation.getArtifacts().add(artifactOne);  /* ACT */ final var artifacts = linker.getInternal(representation);  /* ASSERT */ final var expected = List.of(artifactOne); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, artifacts)
[-] pred: org. junit. Assert. assertEquals ( expected, artifacts )
************************************
[+] input: should_GenerateTheSameDataAsProvided() { DecimalInWords decimal = new DecimalInWords( createLeftNumber(), createRightNumber(), "بالكوادرليون" ); String expected = "ترليون ومئة مليار ومليار ومليونان ومئتا ألف ومئة وخمسة وستون" + " فاصلة " + "ترليون ومئة مليار ومليار ومليونين ومئتي ألف ومئة وخمسة وستين" + " بالكوادرليون"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, decimal.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, decimal. toString ( ) )
************************************
[+] input: test3() { String s = "(0123)"; List<String> expected = List.of("(0, 123)", "(0, 12.3)", "(0, 1.23)", "(0.1, 23)", "(0.1, 2.3)", "(0.12, 3)"); List<String> actual = new Solution().ambiguousCoordinates(s); List<String> l1 = expected.stream().sorted().collect(Collectors.toList()); List<String> l2 = actual.stream().sorted().collect(Collectors.toList()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(l1, l2)
[-] pred: org. junit. Assert. assertEquals ( l1, l2 )
************************************
[+] input: testFlattenWithValues() { JDocument d = (JDocument)getBaseDocument("/jdocs/native_array.json"); List<PathValue> list = d.flattenWithValues(); String s = ""; String expected = "$.valid_states[0].country, USA, string\n" + "$.valid_states[0].states[0], AZ, string\n" + "$.valid_states[0].states[1], NJ, string\n" + "$.valid_states[0].states[2], NY, string\n" + "$.valid_states[0].states[3], GA, string\n" + "$.valid_states[0].states[4], TX, string\n";  for (PathValue pv : list) { s = s + pv.getPath() + ", " + pv.getValue() + ", " + pv.getDataType() + "\n"; }  "<AssertPlaceHolder>"; }
[*] target: assertEquals(s, expected)
[-] pred: org. junit. Assert. assertEquals ( s, expected )
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("\thttps://example.com").context(JsonDocument.of(JsonValue.EMPTY_JSON_OBJECT)).loader(MOCK_LOADER).ordered().get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
[+] input: testDoFixValueAssert_notAsExpected() { GreaterThanAssertion greaterThanAssertion = MockGreaterThanAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = greaterThanAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
[+] input: removeAdminFromCommunity() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(); User testAdmin = getTestAdmin(); testCommunity.getAdmins().add(testAdmin);  given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); given(communityRepository.save(testCommunity)) .willReturn(testCommunity);  // when boolean adminRemoved = communitySDJpaService.removeAdminFromCommunity(TEST_COMMUNITY_ID, TEST_ADMIN_ID);  // then "<AssertPlaceHolder>"; verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID); verify(communityRepository).save(testCommunity); }
[*] target: assertTrue(adminRemoved)
[-] pred: org. junit. Assert. assertTrue ( adminRemoved )
************************************
[+] input: testSingleMinorGcEventSummary() { var event = mock(RecordedEvent.class); var numOfEvents = 1; var eventStartTime = DEFAULT_START_TIME_MS + 1; var eventDurationNanos = 13_700_000; var eventDurationMillis = Duration.ofNanos(eventDurationNanos).toMillis();  var expectedMinorGcSummaryMetric = new Summary( MINOR_GC_DURATION_METRIC_NAME, numOfEvents, // count eventDurationMillis, // sum eventDurationMillis, // min eventDurationMillis, // max DEFAULT_START_TIME_MS, // startTimeMs eventStartTime, // endTimeMs new Attributes());  List<Metric> expected = List.of(expectedMinorGcSummaryMetric, defaultMajorGcSummary); var testClass = new BasicGarbageCollectionSummarizer(DEFAULT_START_TIME_MS);  when(event.getValue(NAME)).thenReturn(G1_NEW); when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>";  for (Summary summary : result) { var summaryName = summary.getName(); if (summaryName.equals(MINOR_GC_DURATION_METRIC_NAME)) { assertEquals(numOfEvents, summary.getCount()); } else if (summaryName.equals(MAJOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testAddExtend() { Proto proto = new Proto();  proto.addExtend(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, proto.getProtoExtends().size())
[-] pred: org. junit. Assert. assertEquals ( 0, proto. getProtoExtends(). size ( ) )
************************************
[+] input: IOException { final String name = "bytes!"; final byte[] data = new byte[]{ 0, 42, 11 };  final Path p = testArchivePath();  // add a file try (ZipArchive z = new ZipArchive(p.toFile())) { // file isn't there assertFalse(z.isModified()); assertNoFile(name, z);  z.add(name, data);  // file is there now assertTrue(z.isModified()); assertFile(name, data, z); }  try (ZipArchive z = new ZipArchive(p.toFile())) { // reopen, check the file was written correctly assertFalse(z.isModified()); assertFile(name, data, z);  // remove the file z.remove(name);  // check that the file is gone assertTrue(z.isModified()); assertNoFile(name, z); }  // reopen, check that the removed file is gone try (ZipArchive z = new ZipArchive(p.toFile())) { "<AssertPlaceHolder>"; assertNoFile(name, z); } }
[*] target: assertFalse(z.isModified())
[-] pred: org. junit. Assert. assertFalse ( z. isModified() )
************************************
[+] input: convertToDatabaseColumn_inputNull_returnNull() { /* ACT */ final var result = urlConverter.convertToDatabaseColumn(null);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: toModel_withRequestedResources_returnContractViewWithRequestsLink() { /* ARRANGE */ final var contract = getContractWithRequestedResources();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isEmpty());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isPresent()); assertNotNull(requestsLink.get()); assertEquals(getContractRequestedResourcesLink(contract.getId()), requestsLink.get().getHref()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testFilterAndSortWithSameIdentifier() { final BusinessRule v1_0_0 = new BusinessRule(); v1_0_0.setVersion("1.0.0"); v1_0_0.setIdentifier("one");  final BusinessRule v1_0_5 = new BusinessRule(); v1_0_5.setVersion("1.0.5"); v1_0_5.setIdentifier("one");  final BusinessRule v1_2_0 = new BusinessRule(); v1_2_0.setVersion("1.2.0"); v1_2_0.setIdentifier("one");  final BusinessRule v2_0_42 = new BusinessRule(); v2_0_42.setVersion("2.0.42"); v2_0_42.setIdentifier("one");  final BusinessRule v2_1_1 = new BusinessRule(); v2_1_1.setVersion("2.1.1"); v2_1_1.setIdentifier("one");  final Map<Integer, Collection<BusinessRule>> map = BusinessRule .filterAndSort(List.of(v1_0_0, v1_0_5, v1_2_0, v2_0_42, v2_1_1)); "<AssertPlaceHolder>"; assertEquals(v1_2_0, map.get(1).iterator().next()); assertEquals(v2_1_1, map.get(2).iterator().next()); }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size ( ) )
************************************
[+] input: shouldCacheUser() { User user = new User(); user.setId("test_user_id"); user.setTeamId("test_team_id"); user.setSlackAccessToken("test_slack_token"); user.setSlackBotToken("test_slack_bot_token"); user.setSpotifyRefreshToken("test_spotify_token"); user.setTimezoneOffsetSeconds(1000); user.setState(UUID.randomUUID()); CachedUser cachedUser = SpotUtil.toCachedUser(user, "test_token"); "<AssertPlaceHolder>"; assertEquals(user.getId(), cachedUser.getId()); assertEquals(user.getSlackAccessToken(), cachedUser.getSlackAccessToken()); assertEquals(user.getSpotifyRefreshToken(), cachedUser.getSpotifyRefreshToken()); assertEquals("test_token", cachedUser.getSpotifyAccessToken()); assertEquals(1000, cachedUser.getTimezoneOffsetSeconds()); }
[*] target: assertNotNull(cachedUser)
[-] pred: org. junit. Assert. assertNotNull ( cachedUser )
************************************
[+] input: should_return_true_if_checkout_time_is_after_checkin_time() { final SubmissionPayload newPayload = SubmissionPayload.newBuilder() .addAllCheckIns(List.of(CheckIn.newBuilder().setStartIntervalNumber(CORRECT_CHECKOUT_TIME) .setEndIntervalNumber(CORRECT_CHECKOUT_TIME + 1).setTransmissionRiskLevel(CORRECT_TRL) .setLocationId(CORRECT_LOCATION_ID).build())) .build();  final boolean result = validator.verify(newPayload, mockValidatorContext); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: updateTest() { ForkingArray<IndexedValue<String>> array = new ForkingArray<>(8);  Set<String> ref = new HashSet<>(); String prefix = "prefix"; final Random random = new Random(); for (int i = 0; i < 501; i++) { if (random.nextBoolean()) { array = array.newBranch(); } String s = "element" + i; array.append(s, MAPPER); ref.add(prefix + s); }  array.update(val -> new IndexedValue<>(val.getIndex(), prefix + val.getValue()));  Set<String> data = Collections.synchronizedSet(new HashSet<>()); array.forEach(stringIndexedValue -> data.add(stringIndexedValue.getValue()));  Assertions."<AssertPlaceHolder>";  }
[*] target: assertEquals(ref, data)
[-] pred: org. junit. Assert. assertEquals ( ref, data )
************************************
[+] input: getAllByArtifactId_validUuid_returnContracts() { /* ARRANGE */ final var contract = new Contract(); final var uuid = UUID.randomUUID(); Mockito.doReturn(List.of(contract)).when(repository).findAllByArtifactId(Mockito.eq(uuid));  /* ACT */ final var result = service.getAllByArtifactId(uuid);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(contract, result.get(0)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { List<PostLite> posts = manager.selectList("org.apache.ibatis.domain.blog.mappers.PostMapper.selectMutablePostLite"); "<AssertPlaceHolder>"; // old gcode issue #392, new #1848 }
[*] target: assertEquals(2, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, posts. size ( ) )
************************************
[+] input: equals_true_when_same_object() { // Arrange Vec3Comparable vec3c = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c.equals(vec3c);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertTrue(areEqual)
[-] pred: org. junit. Assert. assertTrue ( areEqual )
************************************
[+] input: partialUpdateOperator_withExistingOperator_shouldSuccess() { // Prepare // 1. create an operator OperatorPropsVO operatorPropsVO = MockOperatorFactory.createOperatorPropsVO(); Operator operator = operatorService.createOperator(operatorPropsVO);  // 2. prepare an operator value object with only part of its props assigned OperatorPropsVO updateVO = OperatorPropsVO.newBuilder() .withName("ShellOperator") .build();  System.out.println(JSONUtils.toJsonString(updateVO));  // Process // 3. perform partial update operatorService.partialUpdateOperator(operator.getId(), updateVO);  // Validate Optional<Operator> updatedOperatorOptional = operatorService.fetchOperatorById(operator.getId()); "<AssertPlaceHolder>"; Operator updatedOperator = updatedOperatorOptional.get(); // 4. updated operator should have same property values as original one, except updated properties assertThat(updatedOperator, samePropertyValuesAs(operator, "name")); assertThat(updatedOperator.getName(), is("ShellOperator")); }
[*] target: assertTrue(updatedOperatorOptional.isPresent())
[-] pred: org. junit. Assert. assertTrue ( updatedOperatorOptional. isPresent ( ) )
************************************
[+] input: getCopyWithoutRelations_expectedNotNull() { Cycle actualCycle = expectedCycle.getCopyWithoutRelations();  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(actualCycle)
[-] pred: org. junit. Assert. assertNotNull ( actualCycle )
************************************
[+] input: equals_false_when_vec3_equals() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3 vec3c2 = new Vec3(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: IOException { AdventurerClient client = new AdventurerClient(printerAddress); boolean print = client.print("20mm_Box.gx", Files.readAllBytes(Paths.get("20mm_Box.gx"))); client.close(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(print)
[-] pred: org. junit. Assert. assertTrue ( print )
************************************
[+] input: createFromIntArgbPre() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_INT_ARGB_PRE); final int[] data = PngEncoderBufferedImageConverter.getDataBufferInt(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromIntArgbPre(data, width, height); "<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: Exception { // given String siteId = "5da6c0ef-20ff-45d1-8c08-d5fb0cfcf9b4"; String oldDocumentId = "666b7588-fc01-4ed3-8b3d-3e8d13264997"; String documentId = UUID.randomUUID().toString();  Map<String, Object> map = loadRequest("/insert_siteId.json", oldDocumentId, documentId);  // when processor.handleRequest(map, this.context);  // then String text = "9e803220-127e-45d9-98c6-7b8430812cb5"; List<String> documents = service.searchFulltext(siteId, text, MAX); "<AssertPlaceHolder>"; assertEquals(documentId, documents.get(0));  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(1, syncs.getResults().size());  assertEquals(documentId, syncs.getResults().get(0).getDocumentId()); assertEquals(DocumentSyncServiceType.TYPESENSE, syncs.getResults().get(0).getService()); assertEquals(DocumentSyncStatus.COMPLETE, syncs.getResults().get(0).getStatus()); assertEquals(DocumentSyncType.METADATA, syncs.getResults().get(0).getType()); assertEquals("added Document Metadata", syncs.getResults().get(0).getMessage()); assertNotNull(syncs.getResults().get(0).getSyncDate()); }
[*] target: assertEquals(1, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 1, documents. size ( ) )
************************************
[+] input: testGetRecordingOptionsDefaults() { Map<String, String> expected = new HashMap<>(); // Due to a bug, some JVMs default "disk=true". So include "disk=false" (the documented default) // to insure consistent behaviour. expected.put("disk", "false"); RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getRecordingOptions())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getRecordingOptions() )
************************************
[+] input: testSolve() { int n = 4; int m = 3; int k = 2; int[][] bottom = { {1, 4}, {3, 2}, {6, 5} }; int[][] top = { {1, 4}, {3, 2}, {6, 7}, }; int[][] left = { {1, 4}, {1, 4}, {0, 0}, {0, 7} }; int[][] right = { {6, 5}, {6, 5}, {0, 0}, {0, 7} };  int[][] front = { {1, 3, 6}, {1, 3, 6}, {0, 0, 0}, {0, 0, 7} };  int[][] back = { {4, 3, 5}, {4, 2, 5}, {0, 0, 0}, {0, 0, 7} }; ProblemF problemF = new ProblemF(n, m, k, bottom, top, left, right, front, back); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(problemF.solve())
[-] pred: org. junit. Assert. assertNotNull ( problemF. solve() )
************************************
[+] input: testExtractOutboxMessageId_it_should_return_null_when_message_don_t_has_an_id() { //Given  //When final var extractedMessageId = MessageUtils.extractOutboxMessageId(Map.of());  //Then "<AssertPlaceHolder>"; }
[*] target: assertNull(extractedMessageId)
[-] pred: org. junit. Assert. assertNull ( extractedMessageId )
************************************
[+] input: checkGroupExistById() { GroupDO group = mockData1(); boolean exist = groupService.checkGroupExistById(group.getId()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(exist)
[-] pred: org. junit. Assert. assertTrue ( exist )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Rds.cmd")); String actual = exportRdsClusters.getTFImport(getAwsRdsClusters()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testBuilderCreatesInstance() { EncryptedSecretModuleBuilder builder = EncryptedSecretModuleBuilder.builder(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(builder)
[-] pred: org. junit. Assert. assertNotNull ( builder )
************************************
[+] input: testNullRoot() { var testClass = new FlamegraphMarshaller(); var result = testClass.flatten(null); List<FlameLevel> expected = Collections.emptyList(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: getByteBufferState() { ByteBuffer dst = ByteBuffer.allocate(4); dst.position(1); dst.limit(3);  buffer.setByte(0, (byte) 1); buffer.setByte(1, (byte) 2); buffer.setByte(2, (byte) 3); buffer.setByte(3, (byte) 4); buffer.getBytes(1, dst);  assertEquals(3, dst.position()); assertEquals(3, dst.limit());  dst.clear(); "<AssertPlaceHolder>"; assertEquals(2, dst.get(1)); assertEquals(3, dst.get(2)); assertEquals(0, dst.get(3)); }
[*] target: assertEquals(0, dst.get(0))
[-] pred: org. junit. Assert. assertEquals ( 0, dst. get ( 0 ) )
************************************
[+] input: isTransient() { MetadataInjectionPoint metadataInjectionPoint = new MetadataInjectionPoint(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(metadataInjectionPoint.isTransient())
[-] pred: org. junit. Assert. assertFalse ( metadataInjectionPoint. isTransient() )
************************************
[+] input: testHashpw() { // System.out.print("BCrypt.hashpw(): "); for (int i = 0; i < test_vectors.length; i++) { String plain = test_vectors[i][0]; String salt = test_vectors[i][1]; String expected = test_vectors[i][2]; String hashed = BCrypt.hashpw(plain, salt); "<AssertPlaceHolder>"; // System.out.print("."); } // System.out.println(""); }
[*] target: assertEquals(hashed, expected)
[-] pred: org. junit. Assert. assertEquals ( hashed, expected )
************************************
[+] input: Exception { StringMap ins = ConstructionUtil.generateSubClassOf(StringMap.class, options); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
[+] input: testGensaltInt() { // System.out.print("BCrypt.gensalt(log_rounds):"); for (int i = 4; i <= 12; i++) { // System.out.print(" " + Integer.toString(i) + ":"); for (int j = 0; j < test_vectors.length; j += 4) { String plain = test_vectors[j][0]; String salt = BCrypt.gensalt(i); String hashed1 = BCrypt.hashpw(plain, salt); String hashed2 = BCrypt.hashpw(plain, hashed1); "<AssertPlaceHolder>"; // System.out.print("."); } } // System.out.println(""); }
[*] target: assertEquals(hashed1, hashed2)
[-] pred: org. junit. Assert. assertEquals ( hashed1, hashed2 )
************************************
[+] input: roundTripNoVersion() { final String expression = "http://snomed.info/sct|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertNull(literalValue.getVersion()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
[+] input: getResourceMaps() {  List<AWSRestApiResource> awsRestApis = getAwsRestApiResources();  Maps<Resource> resourceMaps = exportApiGatewayResources.getResourceMaps(awsRestApis); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/ApigatewayResource.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testDoFixValueAssert_withExpectation() { LessThanAssertion lessThanAssertion = MockLessThanAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "-1");  boolean assertionResult = lessThanAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
[+] input: createFromByteBinary() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_BYTE_BINARY); final byte[] data = PngEncoderBufferedImageConverter.getDataBufferByte(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromByteBinary(data, width, height); "<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: should_result_millis_when_days() {  var expected = 3 * 24 * 60 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("3days");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getInstance() { final DelayLoadSingleton1 instance1 = DelayLoadSingleton1.getInstance(); final DelayLoadSingleton1 instance2 = DelayLoadSingleton1.getInstance(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertSame(instance1, instance2)
[-] pred: org. junit. Assert. assertSame ( instance1, instance2 )
************************************
[+] input: test_6_getMonitorCalledWithDifferentNodeKeys() { final Set<String> nodeKeys = new HashSet<>(); nodeKeys.add("nodeNEW.domain");  final IMonitor monitorOne = monitorService.getMonitor(nodeKeys, info, propertySet); assertNotNull(monitorOne);  // Ensuring monitor is the same one and not creating a new one final IMonitor monitorOneDupe = monitorService.getMonitor(nodeKeys, info, propertySet); assertEquals(monitorOne, monitorOneDupe);  // Ensuring monitors are not the same as they have different keys // "any.node.domain" compared to "nodeNEW.domain" final IMonitor monitorTwo = monitorService.getMonitor(NODE_KEYS, info, propertySet); "<AssertPlaceHolder>"; assertNotEquals(monitorOne, monitorTwo); }
[*] target: assertNotNull(monitorTwo)
[-] pred: org. junit. Assert. assertNotNull ( monitorTwo )
************************************
[+] input: updateByteSize_hasChanged_willUpdateByteSizeAndChecksum() { /* ARRANGE */ final var artifact = factory.create(new ArtifactDesc()); final byte[] data = {0, 1}; final var checksum = new CRC32C(); checksum.update(data, 0, data.length);  /* ACT */ final var result = factory.updateByteSize(artifact, data);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(2, artifact.getByteSize()); assertEquals(checksum.getValue(), artifact.getCheckSum()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String site = siteId != null ? siteId + "/" : ""; String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("formkiq:://sample/test.txt");  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 3; "<AssertPlaceHolder>";  int i = 0; assertEquals(site + "global#folders#", indexes.get(i).get(PK).s()); assertEquals("ff#formkiq", indexes.get(i).get(SK).s()); assertEquals("formkiq", indexes.get(i).get("path").s()); String documentId0 = indexes.get(i++).get("documentId").s();  assertEquals(site + "global#folders#" + documentId0, indexes.get(i).get(PK).s()); assertEquals("ff#sample", indexes.get(i).get(SK).s()); assertEquals("sample", indexes.get(i).get("path").s()); String documentId1 = indexes.get(i++).get("documentId").s(); assertNotEquals(documentId0, documentId1);  assertEquals(site + "global#folders#" + documentId1, indexes.get(i).get(PK).s()); assertEquals("fi#test.txt", indexes.get(i).get(SK).s()); assertEquals("test.txt", indexes.get(i).get("path").s()); String documentId2 = indexes.get(i).get("documentId").s(); assertEquals(item.getDocumentId(), indexes.get(i++).get("documentId").s()); assertNotEquals(documentId1, documentId2); } }
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
[+] input: executeHappyPath() { CompletionResult expected = new CompletionResult(); Single<CompletionResult> single = Single.just(expected);  CompletionResult actual = OpenAiService.execute(single); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer,Integer>withFunction(num -> num + 1) .build();  AtomicReference<Integer> result = stage.execute(null);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: getGrantedPermissions_restrictedUserAllFacilities_restrictedPermissionsAllFacilities() { Set<UserPermission> permissions = makeHolder(EnumSet.of(OrganizationRole.ENTRY_ONLY, OrganizationRole.ALL_FACILITIES)) .getGrantedPermissions(); Set<UserPermission> expected = EnumSet.of( UserPermission.START_TEST, UserPermission.UPDATE_TEST, UserPermission.SUBMIT_TEST, UserPermission.SEARCH_PATIENTS, UserPermission.ACCESS_ALL_FACILITIES); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, permissions)
[-] pred: org. junit. Assert. assertEquals ( expected, permissions )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/SecurityGroup.cmd")); String actual = exportSecurityGroups.getTFImport(getAwsSecurityGroups()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: sendPasswordRecoverCodeMailException() { // given MimeMessage mimeMessage = new MimeMessage((Session)null); User user = getTestUser(); given(emailTemplateEngine.process(eq(""), any(Context.class))) .willReturn("HTML"); given(mailSender.createMimeMessage()) .willReturn(mimeMessage); doThrow(MailSendException.class).when(mailSender).send(mimeMessage);  // when boolean mailSent = mailSDJpaService.sendPasswordRecoverCode(user, "test-token");  // then "<AssertPlaceHolder>"; }
[*] target: assertFalse(mailSent)
[-] pred: org. junit. Assert. assertFalse ( mailSent )
************************************
[+] input: testParseNoPrefix() { final String xml = "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.02">" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <MktPrctc>" + "       <Regy>FOO</Regy>" + "       <Id>BAR</Id>·+" + "   </MktPrctc>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>"; BusinessAppHdrV02 h = BusinessAppHdrV02.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertEquals("FOO", h.getMktPrctc().getRegy()); assertEquals("BAR", h.getMktPrctc().getId()); assertNotNull(h.getCreDt()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
[+] input: BackendException { GeometryFactory gf = new GeometryFactory(); Geoshape g = HELPER.geoshape(gf.createMultiLineString(new LineString[] { gf.createLineString(new Coordinate[] {new Coordinate(10,10), new Coordinate(20,20)}), gf.createLineString(new Coordinate[] {new Coordinate(30,30), new Coordinate(40,40)})}));  String wkt1 = "MULTILINESTRING ((10 10, 20 20), (30 30, 40 40))"; String actualWkt1 = GeoToWktConverter.convertToWktString(g); "<AssertPlaceHolder>"; }
[*] target: assertEquals(wkt1, actualWkt1)
[-] pred: org. junit. Assert. assertEquals ( wkt1, actualWkt1 )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/VpcEndpoint.cmd")); String actual = exportVpcEndpoints.getTFImport(getVpcEndpoints()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testDoFixValueAssert_notAsExpected() { NotEqualsAssertion notEqualsAssertion = MockNotEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = notEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
[+] input: IOException { String data = "In ancient times cats were worshipped as gods; they have not forgotten this."; ByteBuffer compressed;  try (ByteArrayOutputStream baos = new ByteArrayOutputStream(); BrotliOutputStream output = new BrotliOutputStream(baos)) { output.write(data.getBytes(StandardCharsets.UTF_8)); output.close(); compressed = ByteBuffer.wrap(baos.toByteArray()); }  // Quick verification that it compressed as expected assertEquals(59, compressed.remaining());  BrotliDecoderChannel channel = new BrotliDecoderChannel(new OneByteAtATimeByteChannel(compressed)); ByteBuffer output = ByteBuffer.allocate(2048); channel.read(output); output.flip(); String result = StandardCharsets.UTF_8.decode(output).toString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(data, result)
[-] pred: org. junit. Assert. assertEquals ( data, result )
************************************
[+] input: GestaltException { GCSConfigSourceBuilder builder = GCSConfigSourceBuilder.builder(); //builder.setStorage(storage); builder.setBucketName("testBucket"); builder.setObjectName("testObject");  var config = builder.build();  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
[+] input: shouldSelectAllPostsUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { BlogMapper mapper = session.getMapper(BlogMapper.class); List<Map> posts = mapper.selectAllPosts(); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(5, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 5, posts. size ( ) )
************************************
[+] input: toModel_withOfferedResources_returnRepresentationViewWithOffersLink() { /* ARRANGE */ final var representation = getRepresentationWithOfferedResources();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getRepresentationOfferedResourcesLink(representation.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: deleteUser() { RegisterDTO dto = new RegisterDTO(); dto.setUsername("pedro&佩德罗"); dto.setPassword("123456"); dto.setConfirmPassword("123456"); UserDO user = userService.createUser(dto); assertEquals("pedro&佩德罗", user.getUsername()); boolean b = true; try { b = adminService.deleteUser(user.getId()); } catch (ForbiddenException ignored) { } "<AssertPlaceHolder>";  UserDO selected = userMapper.selectById(user.getId()); assertNull(selected); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: restartTaskRuns_shouldWork() { TaskRun taskRun1 = mockTaskRun(1l); List<TaskRun> taskRuns = Collections.singletonList(taskRun1); mockPost("/taskruns/batchRerun?taskRunIds=" + taskRun1.getId(), "", JSONUtils.toJsonString(true)); Boolean result = (Boolean) wfApi.restartTaskRuns(Collections.singletonList(taskRun1.getId())); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { final String expected = "SELECT * FROM BLOG WHERE ID = ?"; DynamicSqlSource source = createDynamicSqlSource( new TextSqlNode("SELECT * FROM BLOG"), new IfSqlNode(mixedContents(new TextSqlNode("WHERE ID = ?")), "true" )); BoundSql boundSql = source.getBoundSql(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, boundSql.getSql())
[-] pred: org. junit. Assert. assertEquals ( expected, boundSql. getSql ( ) )
************************************
[+] input: shouldGetAndSetGroups() { var user = new LegacyUser(); var expectedValue = singletonList("value1"); user.setGroups(expectedValue); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, user.getGroups())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getGroups() )
************************************
[+] input: createFrom4ByteAbgr() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_4BYTE_ABGR); final byte[] data = PngEncoderBufferedImageConverter.getDataBufferByte(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFrom4ByteAbgr(data, width, height); "<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: removeHouseFromCommunityByHouseIdHouseNotInCommunity() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();  given(communityHouseRepository.findByHouseIdWithHouseMembers(TEST_HOUSE_ID)) .willReturn(Optional.empty());  // when boolean houseDeleted = communitySDJpaService.removeHouseFromCommunityByHouseId(testCommunity, TEST_HOUSE_ID);  // then "<AssertPlaceHolder>"; verify(communityHouseRepository).findByHouseIdWithHouseMembers(TEST_HOUSE_ID); verifyNoInteractions(houseService); verify(communityRepository, never()).save(testCommunity); }
[*] target: assertFalse(houseDeleted)
[-] pred: org. junit. Assert. assertFalse ( houseDeleted )
************************************
[+] input: testApply() { var startTime = Instant.now(); var threadName = "wonder"; var duration = Duration.ofSeconds(14); var expectedAttrs = new Attributes() .put(THREAD_NAME, threadName) .put(DURATION, duration.toMillis()) .put(DESC, MISSING) .put(SUCCEEDED, true); var expectedEvent = new Event(JFR_COMPILATION, expectedAttrs, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class); var eventThread = mock(RecordedThread.class); var eventType = mock(EventType.class);  when(event.getStartTime()).thenReturn(startTime); when(event.getDuration()).thenReturn(duration); when(event.getThread(EVENT_THREAD)).thenReturn(eventThread); when(event.getValue(METHOD)).thenReturn(null); when(event.hasField(SUCCEEDED)).thenReturn(true); when(event.getBoolean(SUCCEEDED)).thenReturn(true); when(event.getEventType()).thenReturn(eventType);  when(eventThread.getJavaName()).thenReturn(threadName); when(eventType.getName()).thenReturn(EVENT_NAME);  var mapper = new JITCompilationMapper(); assertTrue(mapper.test(event));  var result = mapper.apply(event); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testConsumeDelete() { stubFor( delete(urlMatching("/inlong/manager/api/consume/delete/1.*")) .willReturn( okJson(JsonUtils.toJsonString(Response.success(true)))));  InlongConsumeRequest request = new ConsumePulsarRequest(); request.setId(1); request.setMqType(MQType.PULSAR); Boolean delete = consumeClient.delete(1); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(delete)
[-] pred: org. junit. Assert. assertTrue ( delete )
************************************
[+] input: testGivenPersonDTOThenReturnSuccessSavedMessage() { PersonDTO personDTO = createFakeDTO(); Person expectedSavedPerson = createFakeEntity();  when(personMapper.toModel(personDTO)).thenReturn(expectedSavedPerson); when(personRepository.save(any(Person.class))).thenReturn(expectedSavedPerson);  MessageResponseDTO expectedSuccessMessage = createExpectedSuccessMessage(expectedSavedPerson.getId()); MessageResponseDTO successMessage = personService.create(personDTO);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSuccessMessage, successMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedSuccessMessage, successMessage )
************************************
[+] input: mapDateStringToDate_shouldMapStringToLocalDate() { LocalDate expected = LocalDate.of(2020, 3, 1);  LocalDate actual = dateMapper.mapDateStringToDate(expected.toString());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { final ConnectionImpl mockReaderConnection = mockConnection; final ConnectionImpl mockWriterConnection = mockConnection;  final String url = "jdbc:mysql:aws://my-cluster-name.cluster-ro-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerA_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final HostInfo readerB_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-b-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerA_Host); topology.add(readerB_Host);  when(mockTopologyService.getTopology(mockReaderConnection, false)) .thenReturn(topology); when(mockTopologyService.getHostByName(mockReaderConnection)) .thenReturn(readerB_Host); when(mockConnectionProvider.connect(mockHostInfo)) .thenReturn(mockReaderConnection); when(mockConnectionProvider.connect(refEq(writerHost))) .thenReturn(mockWriterConnection);  final Properties properties = new Properties(); properties.setProperty(PropertyKey.failOverReadOnly.getKeyName(), "false");  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties); assertTrue(failoverPlugin.isCurrentConnectionReadOnly()); assertTrue(failoverPlugin.explicitlyReadOnly);  failoverPlugin.execute( JdbcConnection.class, "setReadOnly", () -> { mockConnection.setReadOnly(false); return true; }, new Object[] {false}); assertFalse(failoverPlugin.explicitlyReadOnly);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(failoverPlugin.isCurrentConnectionWriter())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isCurrentConnectionWriter ( ) )
************************************
[+] input: buildProhibitAccess() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.PROHIBIT_ACCESS, null, uri); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: hasList() { MapConfigSource mapConfigSource = new MapConfigSource(configs); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(mapConfigSource.hasList())
[-] pred: org. junit. Assert. assertTrue ( mapConfigSource. hasList() )
************************************
[+] input: testNoneSsl() { final SslHelper sslHelper = new SslHelper(null, true); assertFalse(sslHelper.isSsl()); assertNull(sslHelper.options()); "<AssertPlaceHolder>"; }
[*] target: assertNull(sslHelper.getSslContext())
[-] pred: org. junit. Assert. assertNull ( sslHelper. getSslContext() )
************************************
[+] input: testRoundTrip() { //Write the UUID UUIDSerializer serializer = new UUIDSerializer(); UUID uuid1 = UUID.randomUUID(); WriteByteBuffer buffer = new WriteByteBuffer(); serializer.write(buffer, uuid1);  //And read it in again ReadArrayBuffer readBuffer = new ReadArrayBuffer(buffer.getStaticBuffer().getBytes(0, 16)); UUID uuid2 = serializer.read(readBuffer);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(uuid1, uuid2)
[-] pred: org. junit. Assert. assertEquals ( uuid1, uuid2 )
************************************
[+] input: testGetRowCount() { testMatrixFlavors(new Matrix(2, 3), m -> { "<AssertPlaceHolder>"; }); }
[*] target: assertEquals(2, m.getRowCount())
[-] pred: org. junit. Assert. assertEquals ( 2, m. getRowCount() )
************************************
[+] input: buildUsageNotification() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.USAGE_NOTIFICATION, null, uri); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: roundTripWithQuotedComponentWithComma() { final String expression = "http://snomed.info/sct|'46,2'|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals("46,2", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
[+] input: should_canConvertValue_returnTrue_ifCheckFloatMaxValue() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(MAX_VALUE));  //then "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: handleResourceNotFoundException_returnHttpStatusNotFound() { /* ACT */ final var response = exceptionHandler .handleResourceNotFoundException(new ResourceNotFoundException("Resource not found."));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());  final var headers = response.getHeaders(); assertEquals(MediaType.APPLICATION_JSON, headers.getContentType());  final var body = response.getBody(); assertEquals("Resource not found.", body.get("message")); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: shouldGetAndSetEmailVerified() { var user = new LegacyUser(); user.setEmailVerified(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(user.isEmailVerified())
[-] pred: org. junit. Assert. assertTrue ( user. isEmailVerified() )
************************************
[+] input: testGetNameDefault() { String expected = ""; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getName())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getName() )
************************************
[+] input: shouldCheckGetterAndSetterNames() { ReflectorFactory reflectorFactory = new DefaultReflectorFactory(); MetaClass meta = MetaClass.forClass(RichType.class, reflectorFactory); assertEquals(5, meta.getGetterNames().length); "<AssertPlaceHolder>"; }
[*] target: assertEquals(5, meta.getSetterNames().length)
[-] pred: org. junit. Assert. assertEquals ( 5, meta. getSetterNames(). length )
************************************
[+] input: KidTrackerParseException {  Message message = Message.device("3G", "1234567890", "UD", "060620,125420,A,60.062543,N,30.4606333,E,0.00,95.3,0.0,9,100,100,865649,0,00000008,7,255,250,1,234,15482,170,234,15481,151,234,15485,146,234,20082,144,290,25623,142,234,63301,141,234,63332,138,2,AccessPoint1,2,3,1:23:45:67:a:c,-69,AccessPoint2,f:dc:ba:98:76:54,-51,25.9"); Location location = MessageUtils.toLocation(message).getValue();  "<AssertPlaceHolder>"; assertEquals(LocalDateTime.of(2020, 6, 6, 12, 54, 20), location.getTime()); assertTrue(location.isValid()); assertEquals(60.062543, location.getLatitude(),  DELTA); assertEquals(30.4606333, location.getLongitude(), DELTA); assertEquals(0, location.getSpeed(), DELTA); assertEquals(95.3, location.getCourse(), DELTA); assertEquals(0, location.getAltitude(), DELTA); assertEquals(9, location.getSatellites()); assertEquals(100, location.getRssi()); assertEquals(100, location.getBattery()); assertEquals(865649, location.getPedometer()); assertEquals(0, location.getRolls()); assertTrue(location.getState().isTakeOff()); assertFalse(location.getState().isLowBattery()); assertEquals(7, location.getBaseStations().size()); assertEquals(255, location.getGsmDelay()); assertEquals(250, location.getMcc()); assertEquals(1, location.getMnc()); assertEquals(234, location.getBaseStations().get(0).getArea()); assertEquals(15482, location.getBaseStations().get(0).getSerial()); assertEquals(170, location.getBaseStations().get(0).getRssi()); assertEquals(2, location.getAccessPoints().size()); assertEquals("AccessPoint1,2,3", location.getAccessPoints().get(0).getName()); assertEquals("1:23:45:67:a:c", location.getAccessPoints().get(0).getMac()); assertEquals(-69, location.getAccessPoints().get(0).getSignal()); assertEquals("AccessPoint2", location.getAccessPoints().get(1).getName()); assertEquals("f:dc:ba:98:76:54", location.getAccessPoints().get(1).getMac()); assertEquals(-51, location.getAccessPoints().get(1).getSignal()); assertEquals(25.9, location.getAccuracy(), DELTA); }
[*] target: assertNotNull(location)
[-] pred: org. junit. Assert. assertNotNull ( location )
************************************
[+] input: roundTrip() { final String expression = "http://snomed.info/sct|166056000|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath.fromString( expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
[+] input: convertToDatabaseColumn_inputNull_returnNull() { /* ACT */ final var result = uriConverter.convertToDatabaseColumn(null);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: shouldStoreReviewWhenReviewQualityIsGoodAndBookIsPresent() {  BookReviewRequest bookReviewRequest = new BookReviewRequest("Title", "GOOD CONTENT!", 1);  when(bookRepository.findByIsbn(ISBN)).thenReturn(new Book()); when(mockedReviewVerifier.doesMeetQualityStandards(bookReviewRequest.getReviewContent())) .thenReturn(true); when(userService.getOrCreateUser(USERNAME, EMAIL)).thenReturn(new User()); when(reviewRepository.save(any(Review.class))) .thenAnswer( invocation -> { Review reviewToSave = invocation.getArgument(0); reviewToSave.setId(42L); return reviewToSave; });  Long result = cut.createBookReview(ISBN, bookReviewRequest, USERNAME, EMAIL);  Long expected = 42L; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testSingleEventSummary() { var summaryStartTime = Instant.now().toEpochMilli();  var event = mock(RecordedEvent.class); var numOfEvents = 1; var eventStartTime = summaryStartTime + 1; var eventDurationNanos = 13700000; var eventDurationMillis = Duration.ofNanos(eventDurationNanos).toMillis();  var expectedSummaryMetric = new Summary( JFR_G1_GARBAGE_COLLECTION_DURATION, numOfEvents, // count eventDurationMillis, // sum eventDurationMillis, // min eventDurationMillis, // max summaryStartTime, // startTimeMs eventStartTime, // endTimeMs: the summary metric endTimeMs is the eventStartTime of each // RecordedEvent new Attributes());  List<Metric> expected = List.of(expectedSummaryMetric); var testClass = new G1GarbageCollectionSummarizer(summaryStartTime);  when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: should_GenerateZeroPointRightNumberAndFractionalRatioName_WhenPassingZeroAndRightNumberAndFractionalRatioName() { DecimalInWords decimal = new DecimalInWords( IntegerInWords.createZero(), createRightNumber(), "بالكوادرليون" ); String expected = "صفر" + " فاصلة " + "ترليون ومئة مليار ومليار ومليونين ومئتي ألف ومئة وخمسة وستين" + " بالكوادرليون"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, decimal.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, decimal. toString ( ) )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/LoadBalancerTargetGroup.cmd")); String actual = exportLoadBalancerTargetGroups.getTFImport(getAwsTargetGroups()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { Properties file = Resources.getResourceAsProperties(JPETSTORE_PROPERTIES); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(file)
[-] pred: org. junit. Assert. assertNotNull ( file )
************************************
[+] input: confirmEmail() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(securityTokenService.useToken(testSecurityToken)) .willReturn(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user)); //    given(mailService.sendAccountConfirmed(user)) //        .willReturn(true);  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), testSecurityToken.getToken());  // then "<AssertPlaceHolder>"; assertTrue(user.isEmailConfirmed()); verify(securityTokenService).useToken(testSecurityToken); verify(userRepository).save(user); //    verify(mailService).sendAccountConfirmed(user); }
[*] target: assertTrue(emailConfirmed)
[-] pred: org. junit. Assert. assertTrue ( emailConfirmed )
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = OfferedResourceController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = offeredResourceViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testDeepClone() { VirtualMouse expected = new VirtualMouse(); expected.updateFromEvent(VirtualKey.LC, true, 15, 0, 0); expected.updateFromEvent(VirtualKey.MOUSEMOVED, true, 0, 0, 0);  VirtualMouse actual = expected.clone();  "<AssertPlaceHolder>"; assertIterableEquals(expected.getSubticks(), actual.getSubticks()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getTemplateConfigMetadata() { ConfigMetadata templateConfig = provider.getTemplateConfigMetadata(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("阿里云语音模版", templateConfig.getName()); }
[*] target: assertNotNull(templateConfig)
[-] pred: org. junit. Assert. assertNotNull ( templateConfig )
************************************
[+] input: testDefaultOpts() { final XssOptions options = XssOptionsConfigure.defaultOpts(); final XssOptions def = new XssOptions();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(def.getMode(), options.getMode())
[-] pred: org. junit. Assert. assertEquals ( def. getMode(), options. getMode() )
************************************
[+] input: Exception { KnownApplicationImpl app = new KnownApplicationImpl("quattro-1", "Quattro"); app.setAliases(List.of("q2")); knownApplicationRepository.save(app).get();  GalapagosEventManagerMock eventManagerMock = new GalapagosEventManagerMock();  NamingService namingService = buildNamingService();  ApplicationsServiceImpl applicationServiceImpl = new ApplicationsServiceImpl(kafkaClusters, mock(CurrentUserService.class), mock(TimeService.class), namingService, eventManagerMock);  applicationServiceImpl .registerApplicationOnEnvironment("test", "quattro-1", new JSONObject(), new ByteArrayOutputStream()) .get();  List<InvocationOnMock> invs = eventManagerMock.getSinkInvocations(); "<AssertPlaceHolder>"; assertEquals("handleApplicationRegistered", invs.get(0).getMethod().getName()); }
[*] target: assertEquals(1, invs.size())
[-] pred: org. junit. Assert. assertEquals ( 1, invs. size ( ) )
************************************
[+] input: getResourceMaps() { List<AWSCacheSubnetGroup> awsRdsSubnetGroup = getAwsCacheSubnetGroups();  Maps<Resource> resourceMaps = exportElastiCacheSubnetGroups.getResourceMaps(awsRdsSubnetGroup); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/ElastiCacheSubnetGroup.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: ParseException { InputArguments inputArguments = new InputArguments("--help"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(inputArguments.isHelp())
[-] pred: org. junit. Assert. assertTrue ( inputArguments. isHelp() )
************************************
[+] input: CryptoException { KeyPair ownerKeys = TestUtils.generateKeyPair(); KeyPair notOwnerKeys = TestUtils.generateKeyPair(); ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry(ownerKeys, notOwnerKeys, 1);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
[+] input: getByTarget_validInput_returnSubscriptionList() { /* ARRANGE */ Mockito.doReturn(List.of(subscription)).when(repository).findAllByTarget(Mockito.any());  /* ACT */ final var result = service.getByTarget(URI.create("https://target"));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(1, result.size()); assertEquals(subscription, result.get(0)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { String p1 = "dubbo.registry.address=zookeeper://127.0.0.1:2181\\\\ndubbo.protocol.port=20880"; Map<String, String> result = ConfigurationUtils.parseProperties(p1); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("zookeeper://127.0.0.1:2181\\ndubbo.protocol.port=20880", result.get("dubbo.registry.address")); }
[*] target: assertEquals(1, result.size())
[-] pred: org. junit. Assert. assertEquals ( 1, result. size ( ) )
************************************
[+] input: Exception { URL url = URL.valueOf("xxx://" + NetUtils.getLocalAddress().getHostName() + ":4444/" + TEST_SERVICE + "?paramTest=nacosTest&version=" + VERSION + "&application=" + APPLICATION_NAME + (METADATA_GROUP == null ? "" : "&group=" + METADATA_GROUP)); ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(TEST_SERVICE, VERSION, METADATA_GROUP, "provider", REVISION, PROTOCOL); nacosMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url); Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH); String serviceMetaData = configService.getConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(serviceMetaData, URL.encode(url.toFullString()));  //clear test data configService.removeConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP); }
[*] target: assertNotNull(serviceMetaData)
[-] pred: org. junit. Assert. assertNotNull ( serviceMetaData )
************************************
[+] input: testUpdateStatus_createThenUpdate() { // create abnormal dataset AbnormalDataset abnormalDataset = MockAbnormalDatasetFactory.create(); abnormalDatasetRepository.create(abnormalDataset);  List<AbnormalDataset> abnormalDatasets = abnormalDatasetRepository.fetchAll(); assertThat(abnormalDatasets.size(), is(1)); boolean result = abnormalDatasetRepository.updateStatus(abnormalDatasets.get(0).getId(), "SUCCESS", DateTimeUtils.now()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testConfigure() { final SerializesOptions options = SerializesOptionsConfigure.newOpts() .request(null) .response(null) .configured();  assertNull(options.getRequest()); "<AssertPlaceHolder>"; }
[*] target: assertNull(options.getResponse())
[-] pred: org. junit. Assert. assertNull ( options. getResponse() )
************************************
[+] input: getDuration_inputInvalidWrongConstraintType_returnNull() { /* ARRANGE */ final var constraint = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.LTEQ) ._rightOperand_(new RdfResource("5", URI.create("xsd:decimal"))) .build();  final var permission = new PermissionBuilder() ._action_(Util.asList(Action.USE)) ._constraint_(Util.asList(constraint)) .build();  /* ACT */ final var result = RuleUtils.getDuration(permission);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testReturnObjectAndStatus() { final WebOperation op = webOperation(c -> new WebEndpointResponse<>("foo", 404)); final OperationHandler handler = new OperationHandler(op); final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(request, response, null); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); assertEquals("foo", ret1.join()); assertEquals(404, response.status()); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
[+] input: testConvert_with_null_input() { final URLConverter urlConverter = new URLConverter();  final URL actual = urlConverter.convert(null);  //asserts "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: test1() { Set<String> expected = Set.of( "word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "4", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3" ); HashSet<String> actual = new HashSet<>(new Solution().generateAbbreviations("word")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testUnsupportedGcEventName() { var event = mock(RecordedEvent.class); var eventStartTime = DEFAULT_START_TIME_MS + 1; var eventDurationNanos = 13_700_000;  List<Metric> expected = List.of(defaultMinorGcSummary, defaultMajorGcSummary); var testClass = new BasicGarbageCollectionSummarizer(DEFAULT_START_TIME_MS);  when(event.getValue(NAME)).thenReturn("FOO"); when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>";  for (Summary summary : result) { var summaryName = summary.getName(); if (summaryName.equals(MINOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } else if (summaryName.equals(MAJOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testGetTransformationManager() {  // Act TransformationManager transformationManager = ParamManager.getTransformationManager();  // Assert "<AssertPlaceHolder>"; }
[*] target: assertNotNull(transformationManager)
[-] pred: org. junit. Assert. assertNotNull ( transformationManager )
************************************
[+] input: GestaltException { String config = "db.port = 1234\ndb.password = password\ndb.user = notroot"; String format = "properties";  InputStreamConfigSourceBuilder builder = InputStreamConfigSourceBuilder.builder(); builder.setConfig(new ByteArrayInputStream(config.getBytes(StandardCharsets.UTF_8))) .setFormat(format);  assertNotNull(builder.getConfig()); assertEquals(format, builder.getFormat()); ConfigSourcePackage configSourcePackage = builder.build();  "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  InputStreamConfigSource stringConfigSource = (InputStreamConfigSource) configSourcePackage.getConfigSource(); assertTrue(stringConfigSource.hasStream()); assertEquals(format, stringConfigSource.format()); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
[+] input: test_Notified_withGroupFilter() { URL directoryUrl = noMeaningUrl.addParameterAndEncoded(REFER_KEY, "interface" + service + "&group=group1,group2"); RegistryDirectory directory = this.getRegistryDirectory(directoryUrl); URL provider1 = URL.valueOf("dubbo://10.134.108.1:20880/" + service + "?methods=getXXX&group=group1&mock=false&application=mockApplication"); URL provider2 = URL.valueOf("dubbo://10.134.108.1:20880/" + service + "?methods=getXXX&group=group2&mock=false&application=mockApplication");  List<URL> providers = new ArrayList<>(); providers.add(provider1); providers.add(provider2); directory.notify(providers);  invocation = new RpcInvocation(); invocation.setMethodName("getXXX"); List<Invoker<DemoService>> invokers = directory.list(invocation);  Assertions.assertEquals(2, invokers.size()); Assertions.assertTrue(invokers.get(0) instanceof MockClusterInvoker); Assertions.assertTrue(invokers.get(1) instanceof MockClusterInvoker);  directoryUrl = noMeaningUrl.addParameterAndEncoded(REFER_KEY, "interface" + service + "&group=group1"); directory = this.getRegistryDirectory(directoryUrl); directory.notify(providers);  invokers = directory.list(invocation);  Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(invokers.get(0) instanceof MockClusterInvoker); Assertions.assertFalse(invokers.get(1) instanceof MockClusterInvoker); }
[*] target: assertEquals(2, invokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, invokers. size ( ) )
************************************
[+] input: testGetLayerById() { GeoServerTileLayerInfo info = new GeoServerTileLayerInfoImpl(); info.setId("id1"); info.setName("name1"); catalog.save(info); GeoServerTileLayerInfo actual = catalog.getLayerById("id1"); actual = ModificationProxy.unwrap(actual); "<AssertPlaceHolder>"; }
[*] target: assertEquals(info, actual)
[-] pred: org. junit. Assert. assertEquals ( info, actual )
************************************
[+] input: getBrokers_brokersNotEmpty_returnList() { /* ARRANGE */ final var broker = new Broker(); final var resource = new OfferedResource(); resource.setBrokers(Collections.singletonList(broker));  /* ACT */ final var result = resource.getBrokers();  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(1, result.size()); assertEquals(broker, result.get(0)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { wireMock.register(serviceAccountsEndpoint(HttpMethod.POST) .withRequestBody( new JsonWithPropertiesPattern(Map.of("display_name", "myaccount", "description", "mydesc"))) .willReturn(okForPlainJson(readTestResource("ccloud/service-account.json")) .withStatus(HttpStatus.CREATED.value())));  ConfluentCloudApiClient apiClient = new ConfluentCloudApiClient(baseUrl, "myKey", "mySecret", false);  ServiceAccountSpec spec = apiClient.createServiceAccount("myaccount", "mydesc").block(); "<AssertPlaceHolder>";  assertEquals("Created Service Account.", spec.getDescription()); assertEquals("CREATED_service_account", spec.getDisplayName()); assertEquals("sa-xy123", spec.getResourceId()); assertNull(spec.getNumericId());  wireMock.verifyThat(1, requestedFor(HttpMethod.POST.name(), urlPathEqualTo(SERVICE_ACCOUNTS_ENDPOINT))); }
[*] target: assertNotNull(spec)
[-] pred: org. junit. Assert. assertNotNull ( spec )
************************************
[+] input: testDoFixValueAssert_greater() { GreaterThanOrEqualsAssertion greaterThanOrEqualsAssertion = MockGreaterThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "1");  boolean assertionResult = greaterThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
[+] input: testgetPublicKey() { try { KeyValue kv = fac.newKeyValue(keys[0]); "<AssertPlaceHolder>"; } catch (KeyException ke) { fail("Should pass instead of throwing KeyException"); } }
[*] target: assertNotNull(kv.getPublicKey())
[-] pred: org. junit. Assert. assertNotNull ( kv. getPublicKey() )
************************************
[+] input: idTest() { SystemPropertiesConfigSource configSource = new SystemPropertiesConfigSource(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(configSource.id())
[-] pred: org. junit. Assert. assertNotNull ( configSource. id() )
************************************
[+] input: testSetupCredentialsGraphWithDefaultUserDontCreateUserAgain() { final String defaultUser = "user"; final String defaultPassword = "pass"; final Map<String, Object> configMap = configBuilder().defaultUser(defaultUser).defaultPassword(defaultPassword).create(); final JanusGraph graph = StorageSetup.getInMemoryGraph(); JanusGraphAbstractAuthenticator authenticator = createInitializedAuthenticator(configMap, graph); authenticator.setup(configMap); authenticator = createInitializedAuthenticator(configMap, graph);  // set up again: authenticator.setup(configMap);  CredentialTraversalSource credentialSource = graph.traversal(CredentialTraversalSource.class); List<Vertex> users = credentialSource.users(defaultUser).toList(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, users.size())
[-] pred: org. junit. Assert. assertEquals ( 1, users. size ( ) )
************************************
[+] input: createBook() {  CreateOrUpdateBookDTO validator = new CreateOrUpdateBookDTO(); validator.setAuthor(author); validator.setImage(image); validator.setSummary(summary); validator.setTitle(title); bookService.createBook(validator);  List<BookDO> books = bookMapper.selectByTitle(title); boolean anyMatch = books.stream().anyMatch(bo -> bo.getTitle().equals(title) && bo.getAuthor().equals(author)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
[+] input: getClassFieldsTest() {  List<Field> fields = ReflectionUtility.getClassFields(TestBean.class);  "<AssertPlaceHolder>"; assertEquals("field1", fields.get(0).getName()); assertEquals("field2", fields.get(1).getName()); assertEquals("field3", fields.get(2).getName()); assertEquals("field4", fields.get(3).getName()); assertEquals("field5", fields.get(4).getName()); }
[*] target: assertEquals(5, fields.size())
[-] pred: org. junit. Assert. assertEquals ( 5, fields. size ( ) )
************************************
[+] input: testPublishServiceDefinition() { InMemoryWritableMetadataService inMemoryWritableMetadataService = new InMemoryWritableMetadataService(); inMemoryWritableMetadataService.publishServiceDefinition(url);  String v = inMemoryWritableMetadataService.getServiceDefinition(interfaceName, version, group); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(v)
[-] pred: org. junit. Assert. assertNotNull ( v )
************************************
[+] input: testConstructor() { final String id = "keyId"; // test newKeyInfo(List, String id) KeyInfo ki = fac.newKeyInfo (Collections.singletonList(fac.newKeyName("foo")), id); "<AssertPlaceHolder>"; try { ki = fac.newKeyInfo(null, id); fail("Should raise a NullPointerException"); } catch (NullPointerException npe) {} // test newKeyInfo(List) ki = fac.newKeyInfo(Collections.singletonList(fac.newKeyName("foo"))); }
[*] target: assertEquals(id, ki.getId())
[-] pred: org. junit. Assert. assertEquals ( id, ki. getId ( ) )
************************************
[+] input: testMapper() { var now = System.currentTimeMillis(); Instant startTime = Instant.ofEpochMilli(now);  var attr = new Attributes(); String when = "when"; attr.put(WHEN, when);  double used = 10; double committed = 30; double reserved = 20;  List<Metric> expected = new ArrayList<>(9); expected.addAll( generateMetrics(MetaspaceSummaryMapper.METASPACE, used, committed, reserved, now, attr)); expected.addAll( generateMetrics(MetaspaceSummaryMapper.DATA_SPACE, used, committed, reserved, now, attr)); expected.addAll( generateMetrics(MetaspaceSummaryMapper.CLASS_SPACE, used, committed, reserved, now, attr));  var testClass = new MetaspaceSummaryMapper();  var recordedObject = mock(RecordedObject.class); when(recordedObject.getDouble(USED)).thenReturn(used); when(recordedObject.getDouble(COMMITTED)).thenReturn(committed); when(recordedObject.getDouble(RESERVED)).thenReturn(reserved);  var event = mock(RecordedEvent.class); when(event.getStartTime()).thenReturn(startTime); when(event.getString(WHEN)).thenReturn(when); when(event.getValue(METASPACE)).thenReturn(recordedObject); when(event.getValue(DATA_SPACE)).thenReturn(recordedObject); when(event.getValue(CLASS_SPACE)).thenReturn(recordedObject);  List<? extends Metric> result = testClass.apply(event);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: isCollectionNotEmptyTest_3() { var actual = Utils.isCollectionNotEmpty(List.of(1)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
[+] input: shouldReturnNumberWithOddOccurrences() { int[] arr = { 5, 4, 5, 3, 1, 4, 1 }; int expected = 3;  int actual = oddOccurrences.getNumberWithOddOccurrences(arr);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: should_canConvertValue_returnTrue_ifItInShortRange() { //given DefaultIntegerValueToShortConverter converter = new DefaultIntegerValueToShortConverter();  //when boolean actual = converter.canConvertValue(ValueFactory.newInteger(Short.MAX_VALUE));  //then "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: shouldNotHaveStrayErrorEvents() { com.microsoft.playwright.WebSocket ws = page.waitForWebSocket(() -> { page.evaluate("port => {\n" + "  window.ws = new WebSocket('ws://localhost:' + port + '/ws');\n" + "}", webSocketServer.getPort()); }); boolean[] error = {false}; ws.onSocketError(e -> error[0] = true); ws.waitForFrameReceived(() -> {}); page.evaluate("window.ws.close()"); "<AssertPlaceHolder>"; }
[*] target: assertFalse(error[0])
[-] pred: org. junit. Assert. assertFalse ( error[0] )
************************************
[+] input: createFromIntRgb() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_INT_RGB); final int[] data = PngEncoderBufferedImageConverter.getDataBufferInt(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromIntRgb(data, width, height); "<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: ValidationException { for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) { // given DocumentItem doc0 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc0.setPath("Chicago/test2.pdf"); this.service.saveDocument(siteId, doc0, null);  DocumentItem doc1 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc1.setPath("abc.pdf"); this.service.saveDocument(siteId, doc1, null);  DocumentItem doc2 = new DocumentItemDynamoDb(UUID.randomUUID().toString(), new Date(), "joe"); doc2.setPath("aaaa/test3.pdf"); this.service.saveDocument(siteId, doc2, null);  PaginationMapToken startkey = null; String folder = ""; SearchQuery q = new SearchQuery().meta(new SearchMetaCriteria().folder(folder));  // when PaginationResults<DynamicDocumentItem> results = this.searchService.search(siteId, q, null, startkey, MAX_RESULTS);  // then final int expected = 3; List<DynamicDocumentItem> list = results.getResults(); "<AssertPlaceHolder>"; assertNull(results.getToken());  int i = 0; assertNotNull(list.get(i).getDocumentId()); assertEquals("aaaa", list.get(i++).getPath()); assertEquals("Chicago", list.get(i++).getPath()); assertEquals("abc.pdf", list.get(i++).getPath()); } }
[*] target: assertEquals(expected, list.size())
[-] pred: org. junit. Assert. assertEquals ( expected, list. size ( ) )
************************************
[+] input: existsByInvoiceNumber_ReturnFalse_WhenInvoiceNumberNotMatch() { var res = invoiceRepository.existsByInvoiceNumber(-1L);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(res)
[-] pred: org. junit. Assert. assertFalse ( res )
************************************
[+] input: IOException { final String expected = "Jodd - The Unbearable Lightness of Java - üäößÜÄÖ";  final String actual = NetUtil.downloadString(joddInfoTxt.toExternalForm());  // Asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getVersion() { String version = sdkOptions.getVersion(); "<AssertPlaceHolder>"; String[] versionParts = version.split("\\."); assertEquals(3, versionParts.length); }
[*] target: assertNotNull(version)
[-] pred: org. junit. Assert. assertNotNull ( version )
************************************
[+] input: should_override_the_bootstrap_servers() {  var expected = "configure-me:9092"; String[] args = { "--config-file=./src/test/resources/.kattlo.yaml", "--kafka-config-file=./src/test/resources/kafka.properties", "--bootstrap-servers=" + expected, "topic", "--directory=." };  var command = new CommandLine(entry);  command.execute(args);  //assert EntryCommand actualCommand = command.getCommand(); var actualProperties = actualCommand.getKafkaConfiguration(); var actual = actualProperties.getProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: findById_expectedFoundResult() { long searchId = 100L; Cycle expectedCycle = new Cycle("TestCycle");  when(cycleRepository.findByIdOrThrow(searchId)).thenReturn(expectedCycle);  Cycle actualCycle = cycleService.findById(searchId);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCycle, actualCycle)
[-] pred: org. junit. Assert. assertEquals ( expectedCycle, actualCycle )
************************************
[+] input: update_IdsValue_willNotUpdate() { /* ARRANGE */ final var desc = new SubscriptionDesc(); desc.setLocation(URI.create("https://location")); desc.setSubscriber(URI.create("https://subscriber")); desc.setTarget(URI.create("https://target")); final var updatedDesc = new SubscriptionDesc(); updatedDesc.setLocation(URI.create("https://location")); updatedDesc.setSubscriber(URI.create("https://subscriber")); updatedDesc.setTarget(URI.create("https://target"));  final var subscription = factory.create(desc);  /* ACT */ final var result = factory.update(subscription, updatedDesc);  /* ASSERT */ "<AssertPlaceHolder>"; assertFalse(subscription.isIdsProtocol()); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: saveTextMessageStatus_success() { String messageId = "some-message-id"; String messageStatus = "delivered";  Organization org = _dataFactory.saveValidOrganization(); Facility f = _dataFactory.createValidFacility(org); Person p = _dataFactory.createFullPerson(org); TestOrder to = _dataFactory.createTestOrder(p, f); PatientLink pl = _dataFactory.createPatientLink(to); TextMessageSent message = new TextMessageSent(pl, messageId); _textMessageSentRepo.save(message);  _service.saveTextMessageStatus(messageId, messageStatus);  List<TextMessageStatus> statuses = _textMessageStatusRepo.findAllByTextMessageSent(message);  "<AssertPlaceHolder>"; assertEquals(messageStatus, statuses.get(0).getStatus()); }
[*] target: assertEquals(1, statuses.size())
[-] pred: org. junit. Assert. assertEquals ( 1, statuses. size ( ) )
************************************
[+] input: testDelete() { Document d = getBaseDocument("/jdocs/sample_1.json");  // nothing should happen d.deletePath("$.laksdlkj");  boolean b = d.pathExists("$.members[0].phones[0].number"); assertEquals(true, b);  d.deletePath("$.members[0].phones[0].number"); b = d.pathExists("$.members[0].phones[0].number"); assertEquals(false, b);  d.deletePath("$.members[0].phones[0]"); int size = d.getArraySize("$.members[0].phones[]"); assertEquals(size, 1);  d.deletePath("$.members[sex=female]"); b = d.pathExists("$.members[sex=female]"); assertEquals(false, b);  String expected = getCompressedJson("/jdocs/sample_4_expected.json"); String actual = d.getJson();  "<AssertPlaceHolder>";  // nothing should happen d.deletePath("$.members[2]"); d.deletePath("$.members[0].phones[1]");  // just to show that we can specify [] to denote we are deleting an array block d.deletePath("$.members[]"); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldSelectAuthorsUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { AuthorMapper mapper = session.getMapper(AuthorMapper.class); List<Author> authors = mapper.selectAllAuthors(); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(2, authors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, authors. size ( ) )
************************************
[+] input: testStorageTemplateDataOnStatefulSingleModel() { final List<TemplateData> allTemplatesData = StorageTemplateDataFactory.build("io.vlingo.xoomapp", "xoomapp", contents(), StorageType.STATE_STORE, databaseTypes(), ProjectionType.EVENT_BASED, false, false);  //General Assert  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).count()); Assertions.assertEquals(1, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).count());  //Assert for StateAdapter  final TemplateData stateAdapterTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).findFirst().get();  final TemplateParameters stateAdapterConfigurationParameters = stateAdapterTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, stateAdapterConfigurationParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals("BookState", stateAdapterConfigurationParameters.find(TemplateParameter.SOURCE_NAME)); Assertions.assertEquals(StorageType.STATE_STORE, stateAdapterConfigurationParameters.find(TemplateParameter.STORAGE_TYPE)); Assertions.assertEquals(1, stateAdapterConfigurationParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(stateAdapterConfigurationParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookStateAdapter", stateAdapterTemplateData.filename());  //Assert for StoreProvider  final TemplateData storeProviderTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).findFirst().get();  final TemplateParameters storeProviderParameters = storeProviderTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, storeProviderParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals(Model.DOMAIN, storeProviderParameters.find(TemplateParameter.MODEL)); Assertions.assertEquals("StateStoreProvider", storeProviderParameters.find(TemplateParameter.STORE_PROVIDER_NAME)); Assertions.assertEquals(2, storeProviderParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.author.AuthorState")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getSourceClass()); Assertions.assertEquals("BookStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getAdapterClass()); Assertions.assertEquals("AuthorState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getSourceClass()); Assertions.assertEquals("AuthorStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getAdapterClass()); Assertions.assertEquals("StateStoreProvider", storeProviderTemplateData.filename()); }
[*] target: assertEquals(4, allTemplatesData.size())
[-] pred: org. junit. Assert. assertEquals ( 4, allTemplatesData. size ( ) )
************************************
[+] input: testGetFollowingIds() { List<String> ids = twitterClient.getFollowingIds("786491"); "<AssertPlaceHolder>"; assertTrue(ids.size() > 1000); }
[*] target: assertNotNull(ids)
[-] pred: org. junit. Assert. assertNotNull ( ids )
************************************
[+] input: Exception { final Method method = StringB.class.getMethod("toString");  final boolean actual = ClassUtil.isUserDefinedMethod(method);  // asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
[+] input: hasStream() { MapConfigSource mapConfigSource = new MapConfigSource(configs); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(mapConfigSource.hasStream())
[-] pred: org. junit. Assert. assertFalse ( mapConfigSource. hasStream() )
************************************
[+] input: testRoute_False_HostFilter() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl("true => " + " host = " + LOCAL_HOST)); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
[+] input: InterruptedException { String interfaceName = "org.apache.dubbo.metadata.store.InterfaceNameTestService2", version = "0.9.9", group = null; URL tmpUrl = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":4444/?interface=" + interfaceName + "&version=" + version + "&application=vicpubprovder&side=provider"); metadataReportService.publishServiceDefinition(tmpUrl); Thread.sleep(150); String v = metadataReportService.getServiceDefinition(interfaceName, version, group); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(v)
[-] pred: org. junit. Assert. assertNotNull ( v )
************************************
[+] input: testDoFixValueAssert_equals() { LessThanOrEqualsAssertion lessThanOrEqualsAssertion = MockLessThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = lessThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand(URI.create("https://example.com")).loader(MOCK_LOADER).mode(JsonLdVersion.V1_0).get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
[+] input: changeUserPassword() { ChangePasswordDTO dto = new ChangePasswordDTO(); dto.setNewPassword("147258"); dto.setConfirmPassword("147258"); dto.setOldPassword("123456"); UserDO user = userService.changeUserPassword(dto); boolean b = userIdentityService.verifyUsernamePassword(user.getId(), "pedro", "147258"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: nullThread() { var recordedEvent = mock(RecordedEvent.class); var now = System.currentTimeMillis(); var startTime = Instant.ofEpochMilli(now); var allocated = 1250229920d;  var attr = new Attributes(); var gauge = new Gauge(JFR_THREAD_ALLOCATION_STATISTICS_ALLOCATED, allocated, now, attr); var expected = List.of(gauge);  var testClass = new ThreadAllocationStatisticsMapper();  when(recordedEvent.getStartTime()).thenReturn(startTime); when(recordedEvent.getDouble(ALLOCATED)).thenReturn(allocated); when(recordedEvent.getValue(THREAD)).thenReturn(null);  var result = testClass.apply(recordedEvent); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: test1() { CombinationIterator iterator = new CombinationIterator("abc", 2); assertTrue(iterator.hasNext()); assertEquals("ab", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("ac", iterator.next()); assertTrue(iterator.hasNext()); assertEquals("bc", iterator.next()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext() )
************************************
[+] input: test2() { int[] arrInitial = {1}; int[] arrExpected = {}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: assertEquals ( expected, actual )
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = AgreementController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = agreementViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testDoFixValueAssert_withExpectation() { EqualsAssertion equalsAssertion = MockEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = equalsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("CC"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(ChemEl.C, atomList.get(0).getElement()); assertEquals(ChemEl.C, atomList.get(1).getElement()); }
[*] target: assertEquals(2, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, atomList. size ( ) )
************************************
[+] input: testParseNoNamespace() { final String xml = "<AppHdr>" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>"; BusinessAppHdrV01 h = BusinessAppHdrV01.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertNotNull(h.getCreDt()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
[+] input: getResourceMaps() { Maps<Resource> resourceMaps = exportEfses.getResourceMaps(getAwsEfs()); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Efs.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: GestaltException { SystemPropertiesConfigSource configSource = new SystemPropertiesConfigSource(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(configSource.loadStream())
[-] pred: org. junit. Assert. assertNotNull ( configSource. loadStream() )
************************************
[+] input: serialize() { StackSerializer serializer = new StackSerializer(STACK_DEPTH); IMCStackTrace stack = mock(IMCStackTrace.class);  when(stack.getFrames()).thenReturn((List) frames);  String result = serializer.serialize(stack); String expected = "\tat io.test.MyClass.action(unknown:123)\n" + "\tat io.test.MyClass.silver(unknown:456)\n" + "\tat io.test.Framewerk.root(unknown:66)"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testIsShutdownTrue() { final EDTExecutorService ex = new EDTExecutorService(); ex.shutdown(); assertTrue(ex.isShutdown()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(ex.isShutdown())
[-] pred: org. junit. Assert. assertTrue ( ex. isShutdown() )
************************************
[+] input: testOfSet() { Set<String> set = ofSet(); assertEquals(emptySet(), set);  set = ofSet(((String[]) null)); assertEquals(emptySet(), set);  set = ofSet("A", "B", "C"); Set<String> expectedSet = new LinkedHashSet<>(); expectedSet.add("A"); expectedSet.add("B"); expectedSet.add("C"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSet, set)
[-] pred: org. junit. Assert. assertEquals ( expectedSet, set )
************************************
[+] input: testDoFixValueAssert_notAsExpected() { LessThanAssertion lessThanAssertion = MockLessThanAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0");  boolean assertionResult = lessThanAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
[+] input: GestaltException { // Arrange String config = ""; String format = "properties";  InputStreamConfigSourceBuilder builder = InputStreamConfigSourceBuilder.builder(); builder.setConfig(new ByteArrayInputStream(config.getBytes(StandardCharsets.UTF_8))) .setFormat(format);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  InputStreamConfigSource stringConfigSource = (InputStreamConfigSource) configSourcePackage.getConfigSource(); assertTrue(stringConfigSource.hasStream()); assertEquals(format, stringConfigSource.format()); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
[+] input: should_result_millis_when_day() {  var expected = 1 * 24 * 60 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("1day");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithOneOfEachStatus() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft2 = new OkrTopicDraft(); okrTopicDraft2.setCurrentStatus(OkrTopicDraftStatusEnum.approved); OkrTopicDraft okrTopicDraft3 = new OkrTopicDraft(); okrTopicDraft3.setCurrentStatus(OkrTopicDraftStatusEnum.rejected); OkrTopicDraft okrTopicDraft4 = new OkrTopicDraft(); okrTopicDraft4.setCurrentStatus(OkrTopicDraftStatusEnum.submitted);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1, okrTopicDraft2, okrTopicDraft3, okrTopicDraft4));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(1, result.getSeries()[0]); assertEquals(1, result.getSeries()[1]); assertEquals(1, result.getSeries()[2]); assertEquals(1, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testInvalid() { // given final PropertyValueConvertableConstraint<Integer> constraint = new PropertyValueConvertableConstraint<>(); final String propName = "app.property"; final String value = "no-number"; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("no-number", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
[+] input: getInternal_Valid_returnOfferedResources() { /* ARRANGE */ contract.getRules().add(rule);  /* ACT */ final var resources = linker.getInternal(contract);  /* ASSERT */ final var expected = List.of(rule); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, resources)
[-] pred: org. junit. Assert. assertEquals ( expected, resources )
************************************
[+] input: shouldVerifyCorrectPasswordForUsername() { User user = userDataProvider.full(); String username = user.getUsername();  when(userRepository.findByUsername(username)) .thenReturn(Optional.of(user));  boolean verified = migrationService.passwordIsCorrect(username, user.getPassword());  "<AssertPlaceHolder>"; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
[+] input: testContrainsPropertyValueNull() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = true; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
[+] input: createPerson_SUCCESS() {  // Arrange String personEmail = "trivino@gmail.com"; String personName = "Trivino"; LocalDate personBirthdate = LocalDate.of(1999, 02, 25); String personBirthdateString = "1999-02-25"; String personBirthplace = "Porto";  // Expected CreatePerson DTO Email email = Email.createEmail(personEmail); Name name = Name.createName(personName); Birthdate birthdate = Birthdate.createBirthdate(personBirthdate); Birthplace birthplace = Birthplace.createBirthplace(personBirthplace); PersonID fatherID = null; PersonID motherID = null;  PersonDTO isPersonCreatedExpected = PersonDTOAssembler.createDTOFromDomainObject(email, name, birthdate, birthplace, fatherID, motherID);  // Info DTO NewCreatePersonInfoDTO newCreatePersonInfoDTO = new NewCreatePersonInfoDTO(personEmail, personName, personBirthdateString, personBirthplace);  // DTO CreatePersonDTO createPersonDTO = CreatePersonDTOAssembler.createDTOFromPrimitiveTypes(personEmail, personName, personBirthdateString, personBirthplace);  // Expected Response ResponseEntity<Object> expectedResponse = new ResponseEntity<>(isPersonCreatedExpected, HttpStatus.CREATED);  // Act Mockito.when(service.createPerson(createPersonDTO)).thenReturn(isPersonCreatedExpected); ResponseEntity<Object> isPersonCreated = controller.createPerson(newCreatePersonInfoDTO);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResponse, isPersonCreated)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, isPersonCreated )
************************************
[+] input: testDoVolatilityAssert_reduce() { RiseAssertion riseAssertion = MockRiseAssertionFactory.create("0", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "50"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = riseAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
[+] input: shouldFindPostsInList() { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList("org.apache.ibatis.domain.blog.mappers.PostMapper.selectPostIn", new ArrayList<Integer>() {{ add(1); add(3); add(5); }}); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(3, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 3, posts. size ( ) )
************************************
[+] input: testAuthSuccessfully() { String service = "org.apache.dubbo.DemoService"; String method = "test"; long currentTimeMillis = System.currentTimeMillis(); URL url = URL.valueOf("dubbo://10.10.10.10:2181") .setServiceInterface(service) .addParameter(Constants.ACCESS_KEY_ID_KEY, "ak") .addParameter(Constants.SECRET_ACCESS_KEY_KEY, "sk") .addParameter(CommonConstants.APPLICATION_KEY, "test-provider") .addParameter(Constants.SERVICE_AUTH, true); Invoker invoker = mock(Invoker.class); Invocation invocation = mock(Invocation.class); when(invocation.getAttachment(Constants.AK_KEY)).thenReturn("ak"); when(invocation.getAttachment(CommonConstants.CONSUMER)).thenReturn("test-consumer"); when(invocation.getAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(String.valueOf(currentTimeMillis)); when(invocation.getMethodName()).thenReturn(method); when(invoker.getUrl()).thenReturn(url);   String requestString = String.format(Constants.SIGNATURE_STRING_FORMAT, url.getColonSeparatedKey(), invocation.getMethodName(), "sk", currentTimeMillis); String sign = SignatureUtils.sign(requestString, "sk"); when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(sign);  ProviderAuthFilter providerAuthFilter = new ProviderAuthFilter(); Result result = providerAuthFilter.invoke(invoker, invocation); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: sendEmailCreatedMailException() { // given SecurityToken token = new SecurityToken(); token.setToken("token"); MimeMessage mimeMessage = new MimeMessage((Session)null); User user = getTestUser(); given(emailTemplateEngine.process(eq(""), any(Context.class))) .willReturn("HTML"); given(mailSender.createMimeMessage()) .willReturn(mimeMessage); doThrow(MailSendException.class).when(mailSender).send(mimeMessage);  // when boolean mailSent = mailSDJpaService.sendAccountCreated(user, token);  // then "<AssertPlaceHolder>"; }
[*] target: assertFalse(mailSent)
[-] pred: org. junit. Assert. assertFalse ( mailSent )
************************************
[+] input: should_correctly_parse_flag() { OggPage oggPage = OggPage.empty();  oggPage.setFlag(0x00); assertFalse(oggPage.isContinued()); assertFalse(oggPage.isBOS()); assertFalse(oggPage.isEOS());  oggPage.setFlag(0x01); assertTrue(oggPage.isContinued());  oggPage.setFlag(0x02); assertTrue(oggPage.isBOS());  oggPage.setFlag(0x04); "<AssertPlaceHolder>"; }
[*] target: assertTrue(oggPage.isEOS())
[-] pred: org. junit. Assert. assertTrue ( oggPage. isEOS() )
************************************
[+] input: edgeCase1_simplyHitsEnd() { ThreadDumpRegion region = new ThreadDumpRegion(""something"\n\n", 0, 0); assertTrue(region.findNextStack()); assertEquals(region.getCurrentRegion(), ""something""); "<AssertPlaceHolder>"; }
[*] target: assertFalse(region.findNextStack())
[-] pred: org. junit. Assert. assertFalse ( region. findNextStack() )
************************************
[+] input: Exception { final String content = "{"test":"test"}"; final JsonNode node = mapper.readValue(content, JsonNode.class);  final Map<String, Object> map = conv.toMap(node); final JsonNode fromMap = conv.fromMap(map, JsonNode.class);  String contentResult = mapper.writeValueAsString(fromMap); "<AssertPlaceHolder>"; }
[*] target: assertEquals(content, contentResult)
[-] pred: org. junit. Assert. assertEquals ( content, contentResult )
************************************
[+] input: GestaltException { S3ConfigSourceBuilder builder = S3ConfigSourceBuilder.builder(); builder.setS3(s3Client); builder.setBucketName("testBucket"); builder.setKeyName("testKey");  assertEquals(s3Client, builder.getS3()); assertEquals("testBucket", builder.getBucketName()); assertEquals("testKey", builder.getKeyName());  ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  S3ConfigSource s3ConfigSource = (S3ConfigSource) configSourcePackage.getConfigSource(); assertTrue(s3ConfigSource.hasStream()); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
[+] input: testGetAuthenticationInfo() { assertNotNull(graphqlController);  String environmentId = "test-env"; KnownApplicationImpl app = new KnownApplicationImpl("app-id", "app-name"); ApplicationMetadata applicationMetadata = new ApplicationMetadata(); applicationMetadata.setApplicationId("app-id"); applicationMetadata.setAuthenticationJson("{"auth": "info"}");  when(applicationsService.getApplicationMetadata(environmentId, "app-id")) .thenReturn(Optional.of(applicationMetadata)); String authInfo = graphqlController.getAuthenticationInfo(environmentId, app);  "<AssertPlaceHolder>"; assertEquals("{"auth": "info"}", authInfo); }
[*] target: assertNotNull(authInfo)
[-] pred: org. junit. Assert. assertNotNull ( authInfo )
************************************
[+] input: IOException { final Path p = testArchivePath(); try (ZipArchive z = new ZipArchive(p.toFile())) { z.close(); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(z.isClosed())
[-] pred: org. junit. Assert. assertTrue ( z. isClosed() )
************************************
[+] input: testGetForDiffService() { URL url1 = URL.valueOf("zookeeper://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService1?version=1.0.0&application=vic"); URL url2 = URL.valueOf("zookeeper://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService2?version=1.0.0&application=vic"); MetadataReport metadataReport1 = metadataReportFactory.getMetadataReport(url1); MetadataReport metadataReport2 = metadataReportFactory.getMetadataReport(url2); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(metadataReport1, metadataReport2)
[-] pred: org. junit. Assert. assertEquals ( metadataReport1, metadataReport2 )
************************************
[+] input: testDispatchSync() { AtomicBoolean wasCalled = new AtomicBoolean(false);  ThreadUtils.dispatch_sync(() -> wasCalled.set(true));  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(wasCalled.get())
[-] pred: org. junit. Assert. assertTrue ( wasCalled. get ( ) )
************************************
[+] input: testUnknownNamesDropped() { var names = List.of( "unknown1", G1GarbageCollectionSummarizer.EVENT_NAME, "unknown2", NetworkReadSummarizer.EVENT_NAME, "unknown3");  var expected = List.of(G1GarbageCollectionSummarizer.EVENT_NAME, NetworkReadSummarizer.EVENT_NAME); ToSummaryRegistry registry = ToSummaryRegistry.create(names);  var actual = registry.all().map(EventToSummary::getEventName).collect(toList()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { // due to ISO-8859-1 encoding final String expected = "Jodd - The Unbearable Lightness of Java - Ã¼Ã¤Ã¶Ã\u009FÃ\u009CÃ\u0084Ã\u0096";  final String actual = NetUtil.downloadString(joddInfoTxt.toExternalForm(), StandardCharsets.ISO_8859_1);  // Asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { final File originalPomFile = new File("src/test/resources/revision/original-test-pom.xml"); final String originalPom = readPom(originalPomFile);  final File resultPomFile = new File("src/test/resources/revision/result-test-pom.xml"); final String resultPom = readPom(resultPomFile);  final String modifiedPom = visitor.visit(originalPom, "test-revision", null, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(resultPom, modifiedPom)
[-] pred: org. junit. Assert. assertEquals ( resultPom, modifiedPom )
************************************
[+] input: testHasNoRange() { OfferPayload payload = mock(OfferPayload.class); when(payload.getMinAmount()).thenReturn(1000L); when(payload.getAmount()).thenReturn(1000L);  Offer offer = new Offer(payload); "<AssertPlaceHolder>"; }
[*] target: assertFalse(offer.isRange())
[-] pred: org. junit. Assert. assertFalse ( offer. isRange() )
************************************
[+] input: test_fetchName_notFound() { List<TaskDefinition> fetched = taskDefinitionDao.fetchAliveTaskDefinitionByName("test"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(fetched.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( fetched. isEmpty ( ) )
************************************
[+] input: shouldSelectAllAuthors() { try (SqlSession session = sqlMapper.openSession(TransactionIsolationLevel.SERIALIZABLE)) { List<Author> authors = session.selectList("org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors"); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(2, authors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, authors. size ( ) )
************************************
[+] input: CertificateException {  final SslOptions ssl = new SslOptions(); ssl.setEnabledProtocols(new String[]{"TLSv1.2"}); ssl.setCiphers(new String[]{"AES256-SHA", "AES128-SHA"}); final SelfSignedCertificate cert = new SelfSignedCertificate(); ssl.setCertificate(cert.certificate()); ssl.setPrivateKey(cert.privateKey()); ssl.setClientAuth(ClientAuth.NONE); ssl.setSessionCacheSize(10L);   final SslHelper sslHelper = new SslHelper(ssl, true); assertTrue(sslHelper.isSsl()); assertSame(ssl, sslHelper.options());  final SslContext sslContext = sslHelper.getSslContext(); "<AssertPlaceHolder>"; assertTrue(sslContext.isServer()); assertArrayEquals(ssl.getCiphers(), sslContext.cipherSuites().toArray()); assertEquals(10L, sslContext.sessionCacheSize()); }
[*] target: assertNotNull(sslContext)
[-] pred: org. junit. Assert. assertNotNull ( sslContext )
************************************
[+] input: IOException {  Guid guid1 = Guid.fromRandomUuid();  byte[] data = guid1.toBytes(); Guid guid2 = Guid.fromBytes(data);  assertTrue(guid1.equals(guid2));  Guid guid3  = Guid.fromUuid(UUID.randomUUID()); "<AssertPlaceHolder>";  }
[*] target: assertFalse(guid1.equals(guid3))
[-] pred: org. junit. Assert. assertFalse ( guid1. equals ( guid3 ) )
************************************
[+] input: extractTransferContract_messageWithoutTransferContract_returnNull() { /* ARRANGE */ final var message = getArtifactRequestMessageWithoutTransferContract();  /* ACT */ final var result = MessageUtils.extractTransferContract(message);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testUnknownNamesDropped() { var names = List.of( "unknown1", ProfileSummarizer.EVENT_NAME, "unknown2", ProfileSummarizer.NATIVE_EVENT_NAME, "unknown3");  var expected = List.of(ProfileSummarizer.EVENT_NAME, ProfileSummarizer.NATIVE_EVENT_NAME); ProfilerRegistry registry = ProfilerRegistry.create(names);  var actual = registry.all().map(EventToEventSummary::getEventName).collect(toList()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCreateSign() { SoMap map = SoMap.getSoMap() .set("name", "zhang") .set("age", 18) .set("sex", "女"); SaManager.getSaSignTemplate().setSignConfig(new SaSignConfig().setSecretKey(key)); String sign = SaManager.getSaSignTemplate().createSign(map); Assertions.assertEquals(sign, "6f5e844a53e74363c2f6b24f64c4f0ff");  // 多次签名，结果一致 String sign2 = SaManager.getSaSignTemplate().createSign(map); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(sign, sign2)
[-] pred: org. junit. Assert. assertEquals ( sign, sign2 )
************************************
[+] input: getPipEndpoint_inputInvalidConstraintHasNoPipEndpoint_returnNull() { /* ARRANGE */ final var constraint = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.EQ) ._rightOperand_(new RdfResource("5", URI.create("xsd:decimal"))) .build();  final var permission = new PermissionBuilder() ._action_(Util.asList(Action.USE)) ._constraint_(Util.asList(constraint)) .build();  /* ACT */ final var result = RuleUtils.getPipEndpoint(permission);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: generatorTest() { MainConfig config = new MainConfig(); config.setKeyManagementProfile(new KeyManagementProfile()); config.getKeyManagementProfile().setKeyGeneratorProfile(new KeyGeneratorProfile()); config.getKeyManagementProfile().getKeyGeneratorProfile().setKeySize(2048);  RsaKeyGenerator underTest = new RsaKeyGenerator(config);  KeyGenerator.GeneratedKey key = underTest.generateJWTSigningKey(); "<AssertPlaceHolder>"; assertNotNull(key.keyPair); assertNotNull(key.getKeyUsedToVerify()); }
[*] target: assertNotNull(key)
[-] pred: org. junit. Assert. assertNotNull ( key )
************************************
[+] input: hashCode_same_when_same_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act double vec3c1Hash = vec3c1.hashCode(); double vec3c2Hash = vec3c2.hashCode();  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(vec3c1Hash, vec3c2Hash)
[-] pred: org. junit. Assert. assertEquals ( vec3c1Hash, vec3c2Hash )
************************************
[+] input: BackendException { Geoshape l1 = Geoshape.line(Arrays.asList(new double[][] {{48.9, 35.4}, {49.1, 35.6}}));  String wkt1 = "LINESTRING (48.9 35.4, 49.1 35.6)"; String actualWkt1 = GeoToWktConverter.convertToWktString(l1); "<AssertPlaceHolder>"; }
[*] target: assertEquals(wkt1, actualWkt1)
[-] pred: org. junit. Assert. assertEquals ( wkt1, actualWkt1 )
************************************
[+] input: shouldReturnFalseBookingWasNotCreated() { long hotelRoomId = 11L; long customerId = 19L;  HotelRoom hotelRoom = new HotelRoom(); hotelRoom.setCost(15.0); when(hotelRoomRepository.find(hotelRoomId)).thenReturn(hotelRoom); when(customerRepository.find(customerId)).thenReturn(new Customer()); when(bookingValidator.isValid(any())).thenReturn(true); when(bookingRepository.createBooking(any())).thenReturn(false);  boolean actual = bookingService.book(hotelRoomId, customerId, LocalDate.now().minusDays(3), LocalDate.now());  "<AssertPlaceHolder>"; verify(hotelRoomRepository).find(hotelRoomId); verify(customerRepository).find(customerId); verify(bookingValidator).isValid(any()); verify(bookingRepository).createBooking(any()); verifyNoMoreInteractions(hotelRoomRepository, customerRepository, bookingValidator, bookingRepository); }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: testMarkSupported() { final InputStream in = new RereadableInputStream(new NullInputStream(10)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(in.markSupported())
[-] pred: org. junit. Assert. assertTrue ( in. markSupported() )
************************************
[+] input: should_result_millis_when_minutes() {  var expected = 5 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("5minutes");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testNotCancelledAfterSetException() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.setException(new Exception()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(f.isCancelled())
[-] pred: org. junit. Assert. assertFalse ( f. isCancelled() )
************************************
[+] input: testFormatDecimalFour_ZeroValue() { double value = 0; String expected = "0.0000";  String result = DecimalUtil.formatDecimalFour(value);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/ElasticacheReplicationGroup.cmd")); String actual = exportElastiCacheReplicationGroups.getTFImport(getAwsCacheReplicationGroups()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getResourceMaps() { List<AWSRdsOptionGroup> awsRdsOptionGroups = getAwsRdsOptionGroups();  Maps<Resource> resourceMaps = exportRdsOptionGroups.getResourceMaps(awsRdsOptionGroups); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/RdsOptionGroup.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: calculateCycleTimeOfRealDoneColumns() { List<StatusChangedItem> statusChangedItems = StatusChangedItemsListAndCycleTimeInfosListFixture .STATUS_CHANGED_ITEMS_LIST_OF_REAL_DONE_COLUMN(); List<CycleTimeInfo> statusChangedItemsExpect = StatusChangedItemsListAndCycleTimeInfosListFixture .CYCLE_TIME_INFOS_LIST_OF_REAL_DONE_COLUMN(); List<String> realDoneStatus = List.of("DONE");  when(workDay.calculateWorkDaysBy24Hours(anyLong(), anyLong())) .thenReturn(StatusChangedItemsListAndCycleTimeInfosListFixture.EXPECT_DAYS); List<CycleTimeInfo> result = boardUtil.getCycleTimeInfos(statusChangedItems, realDoneStatus, true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(statusChangedItemsExpect, result)
[-] pred: org. junit. Assert. assertEquals ( statusChangedItemsExpect, result )
************************************
[+] input: mapDtoToEntity_shouldMapDtoToEntity() { //Arrange User expected = user1; expected.setCreatedAt(null);  //Act User actual = userMapper.mapDtoToEntity(userDto1);  //Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { // Given // Prepare test data String csvData = """ id;country;createDate;manufacturer;model;type 2;Japan;1964-04-10;Suzuki;Swift;Small 3;Japan;1960-11-04;Toyota;Camry;Midsize """         ; MockMultipartFile multipartFile = new MockMultipartFile( "file.csv", "file.csv", "text/csv", csvData.getBytes() );  List<Car> expectedCars = new ArrayList<>(); expectedCars.add(new Car(2,"Swift","Suzuki","Japan","Small",LocalDate.of(1964,04,10))); expectedCars.add(new Car(3,"Swift","Camry","Japan","Midsize",LocalDate.of(1960,11,4)));  // When // Set up mock behavior when(carRepository.saveAll(anyList())).thenReturn(expectedCars);  // Then // Call the method List<Car> actualCars = carService.uploadFile(multipartFile);  // Verify the interactions and assertions verify(carRepository, times(1)).saveAll(anyList()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCars, actualCars)
[-] pred: org. junit. Assert. assertEquals ( expectedCars, actualCars )
************************************
[+] input: getMaxAccess_inputCorrectOperatorLessThanEquals_returnAccessInteger() { /* ARRANGE */ final var maxAccess = 2;  final var constraint = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.LTEQ) ._rightOperand_(new RdfResource(String.valueOf(maxAccess), URI.create("xsd:decimal"))) .build();  final var permission = new PermissionBuilder() ._action_(Util.asList(Action.USE)) ._constraint_(Util.asList(constraint)) .build();  /* ACT */ final var result = RuleUtils.getMaxAccess(permission);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(maxAccess, result)
[-] pred: org. junit. Assert. assertEquals ( maxAccess, result )
************************************
[+] input: Exception { final File originalPomFile = new File("src/test/resources/revision.and.changelist/original-test-pom.xml"); final String originalPom = readPom(originalPomFile);  final File resultPomFile = new File("src/test/resources/revision.and.changelist/result-test-pom.xml"); final String resultPom = readPom(resultPomFile);  final String modifiedPom = visitor.visit(originalPom, "test-revision", null, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(resultPom, modifiedPom)
[-] pred: org. junit. Assert. assertEquals ( resultPom, modifiedPom )
************************************
[+] input: testAsync() {  RpcContext rpcContext = RpcContext.getContext(); Assertions.assertFalse(rpcContext.isAsyncStarted());  AsyncContext asyncContext = RpcContext.startAsync(); Assertions.assertTrue(rpcContext.isAsyncStarted());  asyncContext.write(new Object()); Assertions.assertTrue(((AsyncContextImpl) asyncContext).getInternalFuture().isDone());  rpcContext.stopAsync(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(rpcContext.isAsyncStarted())
[-] pred: org. junit. Assert. assertTrue ( rpcContext. isAsyncStarted() )
************************************
[+] input: should_result_double_when_percent_symbol() {  var expected = 0.01d;  var actual = NumberUtil.fromHumanReadable("1%");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testSearchNonExistingFlight() { List<String> foundFlights = flightService.searchFlights("XXX");  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(foundFlights)
[-] pred: org. junit. Assert. assertNotNull ( foundFlights )
************************************
[+] input: testContrainsNoProperty() { // given final MinConstraint<Integer> constraint = new MinConstraint<>(7); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = false; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
[+] input: testDoVolatilityAssert_withExpectation() { RiseAssertion riseAssertion = MockRiseAssertionFactory.create("0", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = riseAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("https://example.com").loader(MOCK_LOADER).base("").get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
[+] input: shouldReturnTrue_whenPassed1() { boolean result = powerOfTwo.isPowerOfTwo(1);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: checkUserExistByUsername() { boolean b = userService.checkUserExistByUsername("pedro"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: testDeserialisingCameraAngle() { List<String> tick = new ArrayList<>(); tick.add("19;-202.74799"); tick.add("11.1241500;-2.799"); tick.add("17.3;-202.79");  VirtualCameraAngle actual = deserialiseCameraAngle(tick);  VirtualCameraAngle expected = new VirtualCameraAngle(); expected.set(0, 0); expected.updateFromEvent(19F, -202.74799F); expected.updateFromEvent(11.1241500F - 19F, -2.799F + 202.74799F); expected.updateFromEvent(17.3F - 11.1241500F, -202.79F + 2.799F);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: NoSuchMethodException { // given Method method = MyIf.class.getMethod("doStuff");  // when Method ifMethod = LogRecordOperationSource.getInterfaceMethodIfPossible(method);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(MyIf.class.getMethod("doStuff"), ifMethod); }
[*] target: assertNotNull(ifMethod)
[-] pred: org. junit. Assert. assertNotNull ( ifMethod )
************************************
[+] input: IOException { final Path p = testArchivePath(); try (ZipArchive z = new ZipArchive(p.toFile())) { z.close(); assertTrue(z.isClosed()); z.close(); assertTrue(z.isClosed()); z.close(); "<AssertPlaceHolder>"; } }
[*] target: assertTrue(z.isClosed())
[-] pred: org. junit. Assert. assertTrue ( z. isClosed() )
************************************
[+] input: reactorSystemHasByDefaultLoopbackDriver() { boolean loopbackDriverPresent = false; for (ReActorSystemDriver reActorSystemDriver : reActorSystem.getReActorSystemDrivers()) { if (reActorSystemDriver.getClass().equals(LoopbackDriver.class)) { loopbackDriverPresent = true; break; } } Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(loopbackDriverPresent)
[-] pred: org. junit. Assert. assertTrue ( loopbackDriverPresent )
************************************
[+] input: testAddZeroCount() {  final Layout layout = new TestLayout(-100, 100); final Histogram histogram = modify(create(layout)).addValue(2.4, 0).done();  "<AssertPlaceHolder>";  testSerialization(layout, histogram); }
[*] target: assertTrue(histogram.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( histogram. isEmpty() )
************************************
[+] input: InterruptedException { String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; String revision = "90980"; String protocol = "xxx"; URL url = generateURL(TEST_SERVICE, version, group, application); ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(TEST_SERVICE, version, group, "provider", revision, protocol); etcdMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url);  CompletableFuture<GetResponse> response = etcdClientForTest.getKVClient().get(ByteSequence.from( etcdMetadataReport.getNodeKey(serviceMetadataIdentifier), StandardCharsets.UTF_8)); String fileContent = response.get().getKvs().get(0).getValue().toString(StandardCharsets.UTF_8); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(fileContent, URL.encode(url.toFullString())); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenNullLinkHeader() { BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder() .jobs(List.of(testJob)) .author(BuildKiteBuildInfo.Author.builder().name("xx").build()) .build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(1); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
[+] input: GestaltException { StringConfigSource source = new StringConfigSource("test=abc", "properties");  Assertions.assertTrue(source.hasStream()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(source.loadStream())
[-] pred: org. junit. Assert. assertNotNull ( source. loadStream() )
************************************
[+] input: tangentLinesForTwoCircles4() { List<double[]> lines = GeometryTools.tangentLinesForTwoCircles(1, 1, 5, 2, 1, 4); "<AssertPlaceHolder>"; assertEquals(-1.0, lines.get(0)[0], 1e-6); assertEquals(0.0, lines.get(0)[1], 1e-6); assertEquals(6.0, lines.get(0)[2], 1e-6); }
[*] target: assertEquals(1, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 1, lines. size ( ) )
************************************
[+] input: shouldBeCorrectCallInvocationsForSuppliers() { var visitor = ReportTypeVisitor.<ReportType>createSupplierVisitor( () -> ReportType.OBSERVER_EVENT, () -> ReportType.CALL_EVENT, () -> ReportType.CALL_META_DATA, () -> ReportType.CLIENT_EXTENSION_DATA, () -> ReportType.PEER_CONNECTION_TRANSPORT, () -> ReportType.ICE_CANDIDATE_PAIR, () -> ReportType.PEER_CONNECTION_DATA_CHANNEL, () -> ReportType.INBOUND_AUDIO_TRACK, () -> ReportType.INBOUND_VIDEO_TRACK, () -> ReportType.OUTBOUND_AUDIO_TRACK, () -> ReportType.OUTBOUND_VIDEO_TRACK, () -> ReportType.SFU_EVENT, () -> ReportType.SFU_META_DATA, () -> ReportType.SFU_EXTENSION_DATA, () -> ReportType.SFU_TRANSPORT, () -> ReportType.SFU_INBOUND_RTP_PAD, () -> ReportType.SFU_OUTBOUND_RTP_PAD, () -> ReportType.SFU_SCTP_STREAM ); for (var expected : ReportType.values()) { var actual = visitor.apply(null, expected); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetDurationDefault() { String expected = "0"; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getDuration())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDuration() )
************************************
[+] input: testTasks_multipleTasks() {  var TASKS = List.of( StandardArgs.task("do_something", "desc"), StandardArgs.task("do_something_else", "ARG_NAME", "desc"));  var command = "--config app.conf --task do_something --task do_something_else ARG1 --task do_something_else ARG2"; var commandArgs = command.split("\\s");  var standardArgs = StandardArgsProcessor.processArgs(APP_NAME, commandArgs, TASKS, null); var tasks = standardArgs.getTasks();  "<AssertPlaceHolder>"; assertEquals("do_something", tasks.get(0).getTaskName()); assertNull(tasks.get(0).getTaskArg()); assertEquals("do_something_else", tasks.get(1).getTaskName()); assertEquals("ARG1", tasks.get(1).getTaskArg()); assertEquals("do_something_else", tasks.get(2).getTaskName()); assertEquals("ARG2", tasks.get(2).getTaskArg()); }
[*] target: assertEquals(3, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 3, tasks. size ( ) )
************************************
[+] input: isExpandedShouldAlwaysReturnFalse() { // prepare final GameModule gameModule = mock(GameModule.class); final GamePiece gamePiece1 = mock(GamePiece.class); final GamePiece gamePiece2 = mock(GamePiece.class);  // run Deck d = new Deck(gameModule); d.add(gamePiece1); d.add(gamePiece2); d.setExpanded(true);  // assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(d.isExpanded())
[-] pred: org. junit. Assert. assertFalse ( d. isExpanded() )
************************************
[+] input: should_create_empty_packet_correctly() { OpusPacket opusPacket = OpusPackets.newPacket(Config.of(12), Channel.STEREO, 2); assertEquals(2, opusPacket.getCode()); assertTrue(opusPacket.isVbr()); assertFalse(opusPacket.hasPadding()); assertEquals(2, opusPacket.getFrameCount()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, opusPacket.getPadLenBytesSum())
[-] pred: org. junit. Assert. assertEquals ( 0, opusPacket. getPadLenBytesSum() )
************************************
[+] input: testSerializationMixture() { serialize.registerClass(1,TClass1.class, new TClass1Serializer());  for (int t = 0; t < 1000; t++) { DataOutput out = serialize.getDataOutput(128); int num = random.nextInt(100)+1; final List<SerialEntry> entries = new ArrayList<>(num); for (int i = 0; i < num; i++) { Map.Entry<Class,Factory> type = Iterables.get(TYPES.entrySet(),random.nextInt(TYPES.size())); Object element = type.getValue().newInstance(); boolean notNull = true; if (random.nextDouble()<0.5) { notNull = false; if (random.nextDouble()<0.2) element=null; } entries.add(new SerialEntry(element,type.getKey(),notNull)); if (notNull) out.writeObjectNotNull(element); else out.writeObject(element,type.getKey()); } StaticBuffer sb = out.getStaticBuffer(); ReadBuffer in = sb.asReadBuffer(); for (SerialEntry entry : entries) { Object read; if (entry.notNull) read = serialize.readObjectNotNull(in,entry.clazz); else read = serialize.readObject(in,entry.clazz); if (entry.object==null) "<AssertPlaceHolder>"; else if (entry.clazz.isArray()) { assertEquals(Array.getLength(entry.object),Array.getLength(read)); for (int i = 0; i < Array.getLength(read); i++) { assertEquals(Array.get(entry.object,i),Array.get(read,i)); } } else assertEquals(entry.object,read); } } }
[*] target: assertNull(read)
[-] pred: org. junit. Assert. assertNull ( read )
************************************
[+] input: isCollectionNotEmptyTest_1() { var actual = Utils.isCollectionNotEmpty(null); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
[+] input: Exception { final Long result = function.call(null, "2020-01-01", "years"); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Subnet.cmd")); String actual = exportSubnets.getTFImport(getAwsSubnets()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGroupByMajor() { final BusinessRule v1_0_0 = new BusinessRule(); v1_0_0.setVersion("1.0.0");  final BusinessRule v1_0_5 = new BusinessRule(); v1_0_5.setVersion("1.0.5"); final BusinessRule v1_2_0 = new BusinessRule(); v1_2_0.setVersion("1.2.0"); final BusinessRule v2_0_42 = new BusinessRule(); v2_0_42.setVersion("2.0.42"); final BusinessRule v2_1_1 = new BusinessRule(); v2_1_1.setVersion("2.1.1");  final Map<Integer, BusinessRule> map = BusinessRule.groupByMajor(List.of(v1_0_0, v1_0_5, v1_2_0, v2_0_42, v2_1_1)); "<AssertPlaceHolder>"; assertEquals(v1_2_0, map.get(1)); assertEquals(v2_1_1, map.get(2)); }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size ( ) )
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = CatalogController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = catalogViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testCancelledAfterCancel() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.cancel(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(f.isCancelled())
[-] pred: org. junit. Assert. assertTrue ( f. isCancelled() )
************************************
[+] input: getKeysWithoutIndex() { var one = "1"; var map = new IndexedMap<Integer, String>();  map.put(1, one);  var keys = map.keySet().stream().collect(Collectors.toList());  Assertions.assertTrue(keys.contains(1)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, keys.size())
[-] pred: org. junit. Assert. assertEquals ( 1, keys. size() )
************************************
[+] input: verifyEquals_personNull() { //Arrange  //Person A String nameAnaA = "Ana"; LocalDate birthdateAnaA = LocalDate.of(1985, 8, 19); String emailAnaA = "ana@gmail.com"; Ledger ledgerAna = Ledger.createLedger(); LedgerID ledgerID_Ana = ledgerAna.getLedgerID(); String birthplaceAnaA = "Cuba";  //Person Mother String nameMother = "Joana"; LocalDate birthdateMother = LocalDate.of(1987, 01, 11); String emailMother = "joana@gmail.com"; Ledger ledgerMother = Ledger.createLedger(); LedgerID ledgerID_Mother = ledgerMother.getLedgerID();  //Person Father String nameFather = "João"; LocalDate birthdateFather = LocalDate.of(1987, 01, 11); String emailFather = "joao@gmail.com"; Ledger ledgerFather = Ledger.createLedger(); LedgerID ledgerID_Father = ledgerFather.getLedgerID();  //Birthplace String birthplace = "Braga";  //Address String street = "Rua do Carmo"; String number = "4"; String zipCode = "2562"; String city = "Porto"; String country = "Portugal"; Address address = Address.createAddress(street, number, zipCode, city, country);   Person personMother = Person.createPersonWithoutParents(emailMother, nameMother, birthdateMother, birthplace, address, ledgerID_Mother); Person personFather = Person.createPersonWithoutParents(emailFather, nameFather, birthdateFather, birthplace, address, ledgerID_Father);  //Act Person personA = Person.createPersonWithParents(emailAnaA, nameAnaA, birthdateAnaA, personMother.getPersonID(), personFather.getPersonID(), birthplaceAnaA, address, ledgerID_Ana); Person personB = null;  boolean result = personA.equals(personB);  //Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: toModel_withOfferedResources_returnContractViewWithOffersLink() { /* ARRANGE */ final var contract = getContractWithOfferedResources();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getContractOfferedResourcesLink(contract.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { final HashMap<String, String> parameterObject = new HashMap<String, String>() {{ put("name", "Steve"); }}; final String expected = "Expression test: 3 / yes."; DynamicSqlSource source = createDynamicSqlSource(new TextSqlNode("Expression test: ${name.indexOf('v')} / ${name in {'Bob', 'Steve'\\} ? 'yes' : 'no'}.")); BoundSql boundSql = source.getBoundSql(parameterObject); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, boundSql.getSql())
[-] pred: org. junit. Assert. assertEquals ( expected, boundSql. getSql ( ) )
************************************
[+] input: Exception { RealInterface ins = ConstructionUtil.generateSubClassOf(RealInterface.class, options); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
[+] input: testHostFailoverStrictReaderEnabled() { final ITopologyService mockTopologyService = Mockito.mock(ITopologyService.class); final IConnectionProvider mockConnProvider = Mockito.mock(IConnectionProvider.class); final List<HostInfo> hosts = getHostsFromTestUrls(2); final HostInfo writer = hosts.get(0); final HostInfo reader = hosts.get(1);  final ClusterAwareReaderFailoverHandler target = new ClusterAwareReaderFailoverHandler( mockTopologyService, mockConnProvider, testConnectionProps, 5000, 30000, true, mockLog);  // We expect only reader nodes to be chosen. List<HostTuple> expectedReaderHost = Collections.singletonList( new ClusterAwareReaderFailoverHandler.HostTuple( reader, 1));  List<HostTuple> hostsByPriority = target.getHostTuplesByPriority(hosts, Collections.emptySet()); assertEquals(expectedReaderHost, hostsByPriority);  // Should pick reader even if unavailable. hostsByPriority = target.getHostTuplesByPriority(hosts, new HashSet<>(Collections.singletonList(reader.getHost()))); assertEquals(expectedReaderHost, hostsByPriority);  // Writer node will only be picked if it is the only node in topology; List<HostTuple> expectedWriterHost = Collections.singletonList( new ClusterAwareReaderFailoverHandler.HostTuple( writer, 0)); hostsByPriority = target.getHostTuplesByPriority(Collections.singletonList(writer), Collections.emptySet()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedWriterHost, hostsByPriority)
[-] pred: org. junit. Assert. assertEquals ( expectedWriterHost, hostsByPriority )
************************************
[+] input: test2019() { var firstMat = new MatOfPoint(); // contour 0 and 1 data from kCargoStraightDark72in_HighRes firstMat.fromList( List.of( new Point(1328, 976), new Point(1272, 985), new Point(1230, 832), new Point(1326, 948), new Point(1328, 971)));  var secondMat = new MatOfPoint(); secondMat.fromList( List.of( new Point(956, 832), new Point(882, 978), new Point(927, 810), new Point(954, 821), new Point(956, 825))); var firstContour = new Contour(firstMat); var secondContour = new Contour(secondMat); boolean result = firstContour.isIntersecting(secondContour, ContourIntersectionDirection.Up); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { CacheKey cacheKey = CacheKey.NULL_CACHE_KEY; CacheKey clonedCacheKey = cacheKey.clone(); assertEquals(cacheKey, clonedCacheKey); "<AssertPlaceHolder>"; }
[*] target: assertEquals(cacheKey.hashCode(), clonedCacheKey.hashCode())
[-] pred: org. junit. Assert. assertEquals ( cacheKey. hashCode(), clonedCacheKey. hashCode() )
************************************
[+] input: testNotCancelledInitially() { final SimpleFuture<Integer> f = new SimpleFuture<>(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(f.isCancelled())
[-] pred: org. junit. Assert. assertFalse ( f. isCancelled ( ) )
************************************
[+] input: testEqualsFalse() { final Property<Boolean> p1 = new Property<Boolean>("foo", Boolean.class); final Property<Integer> p2 = new Property<Integer>("foo", Integer.class); final Property<Boolean> p3 = new Property<Boolean>("bar", Boolean.class);  assertFalse(p1.equals(null)); assertFalse(p1.equals(Boolean.TRUE)); assertFalse(p1.equals(p2)); "<AssertPlaceHolder>"; }
[*] target: assertFalse(p1.equals(p3))
[-] pred: org. junit. Assert. assertFalse ( p1. equals ( p3 ) )
************************************
[+] input: getProductById() { wireMockServer.stubFor(get(urlPathEqualTo("/product/50")) .willReturn(aResponse() .withStatus(200) .withHeader("Content-Type", "application/json") .withBody("{"id":"50","type":"CREDIT_CARD","name":"28 Degrees","version":"v1"}")));  Product expected = new Product("50", "CREDIT_CARD", "28 Degrees", "v1");  Product product = productService.getProduct("50");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, product)
[-] pred: org. junit. Assert. assertEquals ( expected, product )
************************************
[+] input: deleteMemberFromHouse() { // given Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT); CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();  HouseMember memberToDelete = new HouseMember().withMemberId(MEMBER_ID); memberToDelete.setCommunityHouse(communityHouse);  houseMembers.add(memberToDelete); communityHouse.setHouseMembers(houseMembers);  given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID)) .willReturn(Optional.of(communityHouse));  // when boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(memberToDelete.getCommunityHouse()); assertFalse(communityHouse.getHouseMembers().contains(memberToDelete)); verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID); verify(communityHouseRepository).save(communityHouse); verify(houseMemberRepository).save(memberToDelete); }
[*] target: assertTrue(isMemberDeleted)
[-] pred: org. junit. Assert. assertTrue ( isMemberDeleted )
************************************
[+] input: testMapper() { var recordedThread = mock(RecordedThread.class); var eventThread = "Thread-13";  var recordedEvent = mock(RecordedEvent.class); var now = System.currentTimeMillis(); var end = now + 1; var startTime = Instant.ofEpochMilli(now); var endTime = Instant.ofEpochMilli(end); var size = 32784L;  var attr = new Attributes().put(THREAD_NAME, eventThread); var gauge = new Gauge(JFR_ALLOCATION_REQUIRING_GC_ALLOCATION_SIZE, size, now, attr); var expected = List.of(gauge);  var testClass = new AllocationRequiringGCMapper();  when(recordedThread.getJavaName()).thenReturn(eventThread);  when(recordedEvent.getStartTime()).thenReturn(startTime); when(recordedEvent.getEndTime()).thenReturn(endTime); when(recordedEvent.getValue(EVENT_THREAD)).thenReturn(recordedThread); when(recordedEvent.getLong(SIZE)).thenReturn(size);  var result = testClass.apply(recordedEvent); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldAcceptTheConfirmPrompt() { page.onDialog(dialog -> { dialog.accept(); }); Object result = page.evaluate("() => confirm('boolean?')"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(true, result)
[-] pred: org. junit. Assert. assertEquals ( true, result )
************************************
[+] input: testAdler32CanCopyItself() { byte[] buf1 = randombuf(1024); byte[] buf2 = randombuf(1024);  Adler32 adler1 = new Adler32();  adler1.update(buf1, 0, buf1.length);  Adler32 adler2 = adler1.copy();  adler1.update(buf2, 0, buf1.length); adler2.update(buf2, 0, buf1.length);  long expected = adler1.getValue(); long actual = adler2.getValue();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: addCustomConfig() { // Arrange MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder();  // Act builder.addCustomConfig("db.port", "1234") .addCustomConfig("db.password", "password") .addCustomConfig("db.user", "notroot");  // Assert Map<String, String> customConfig = builder.getCustomConfig(); "<AssertPlaceHolder>"; assertEquals(3, customConfig.size()); assertEquals("1234", customConfig.get("db.port")); assertEquals("password", customConfig.get("db.password")); assertEquals("notroot", customConfig.get("db.user")); }
[*] target: assertNotNull(customConfig)
[-] pred: org. junit. Assert. assertNotNull ( customConfig )
************************************
[+] input: ParsingException { ParseTokens pTokens = new ParseTokens(Arrays.asList("fooyl","","fooane",""), Arrays.asList('a', OpsinTools.END_OF_SUBSTITUENT,'a', OpsinTools.END_OF_MAINGROUP)); List<ParseWord> parseWords = WordTools.splitIntoParseWords(Arrays.asList(pTokens), "fooylfooane"); "<AssertPlaceHolder>"; assertEquals("fooylfooane", parseWords.get(0).getWord()); assertEquals(1, parseWords.get(0).getParseTokens().size()); assertEquals(pTokens, parseWords.get(0).getParseTokens().get(0)); }
[*] target: assertEquals(1, parseWords.size())
[-] pred: org. junit. Assert. assertEquals ( 1, parseWords. size ( ) )
************************************
[+] input: testIsStarted() { JFR jfr = mock(JFR.class); JfrRecorder jfrRecorder = buildJfrRecorder(jfr); assertFalse(jfrRecorder.isStarted()); jfrRecorder.start(); when(recording.getState()).thenReturn(RecordingState.RUNNING); "<AssertPlaceHolder>"; }
[*] target: assertTrue(jfrRecorder.isStarted())
[-] pred: org. junit. Assert. assertTrue ( jfrRecorder. isStarted() )
************************************
[+] input: shouldProperlyGetWithOffSetAndLimit() { //given GroupRequestArgs args = GroupRequestArgs.builder() .offset(1) .limit(3) .build();  //when List<GroupInfo> groupList = groupClient.getGroupList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, groupList.size()); }
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
[+] input: IOException { // given File fileToUpload = new File("src/test/resources/testFileToUpload.txt"); String googleDriveRootFolderId = "parentFolderId"; GoogleDriveClient googleService = new GoogleDriveClient(googleDriveService, googleDriveRootFolderId);  com.google.api.services.drive.model.File fileMetadata = new com.google.api.services.drive.model.File(); fileMetadata.setName("testFileToUpload.txt"); fileMetadata.setParents(Collections.singletonList("parentFolderId"));  when(googleDriveService.files().create(any(), any())).thenThrow(IOException.class); clearInvocations(googleDriveService);  // when boolean result = googleService.upload(fileToUpload);  // then "<AssertPlaceHolder>"; verify(googleDriveService).files(); verify(googleDriveService.files()).create(eq(fileMetadata), any(FileContent.class)); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: readResolve() { DCLSingleton instance = DCLSingleton.getInstance();  try (FileOutputStream fileOutputStream = new FileOutputStream(DCLSingleton.class.getResource("").getPath() + "singleton.txt"); final ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) { objectOutputStream.writeObject(instance); final ObjectInputStream objectInputStream = new ObjectInputStream(DCLSingleton.class.getResourceAsStream("singleton.txt")); final DCLSingleton o = (DCLSingleton) objectInputStream.readObject(); Assertions."<AssertPlaceHolder>"; } catch (IOException | SecurityException | ClassNotFoundException e) { e.printStackTrace(); }  }
[*] target: assertEquals(instance, o)
[-] pred: org. junit. Assert. assertEquals ( instance, o )
************************************
[+] input: clientRegistrationRepository_withRegistration_returns() { var properties = new OAuth2ClientRegistrationProperties(); properties.setClientId("client-id"); properties.setClientSecret("client-secret"); properties.setRedirectUri("redirect-uri"); properties.setScope(Set.of("profile")); properties.setClientName("client-name"); properties.setAuthorizationUri("authorization-uri"); properties.setTokenUri("token-uri"); properties.setUserInfoUri("user-info-uri"); properties.setJwkSetUri("jwk-set-uri"); properties.setProvider("provider"); properties.setUserNameAttribute("username-attribute"); properties.setIssuerUri("issuer-uri"); var repository = configuration.reactiveClientRegistrationRepository(properties); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(repository)
[-] pred: org. junit. Assert. assertNotNull ( repository )
************************************
[+] input: testUniqueName() { TestUtils.loadLibraries(); PipelineManager manager = new PipelineManager(new DriverModePipelineSettings(), List.of(), "meme_name", -1); manager.addPipeline(PipelineType.Reflective, "Another");  // We now have ["New Pipeline", "Another"] // After we duplicate 0 and 1, we expect ["New Pipeline", "Another", "New Pipeline (1)", // "Another (1)"] manager.duplicatePipeline(0); manager.duplicatePipeline(1);  // Should add "Another (2)" manager.duplicatePipeline(3); // Should add "Another (3) manager.duplicatePipeline(3); // Should add "Another (4) manager.duplicatePipeline(1);  // Should add "Another (5)" through "Another (15)" for (int i = 5; i < 15; i++) { manager.duplicatePipeline(1); }  var nicks = manager.getPipelineNicknames(); var expected = new ArrayList<>(List.of("New Pipeline", "Another", "New Pipeline (1)", "Another (1)")); for (int i = 2; i < 15; i++) { expected.add("Another (" + i + ")"); } Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, nicks)
[-] pred: org. junit. Assert. assertEquals ( expected, nicks )
************************************
[+] input: shouldReturnFindAll() { List<User> datas = new ArrayList(); datas.add(new User(1L, "ten@mail.com","teten","teten")); datas.add(new User(2L, "ten@mail.com","teten","teten")); datas.add(new User(3L, "ten@mail.com","teten","teten"));  given(userRepository.findAll()).willReturn(datas);  List<User> expected = userService.findAllUsers();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, datas)
[-] pred: org. junit. Assert. assertEquals ( expected, datas )
************************************
[+] input: testNotDoneInitially() { final SimpleFuture<Integer> f = new SimpleFuture<>(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(f.isDone())
[-] pred: org. junit. Assert. assertFalse ( f. isDone ( ) )
************************************
[+] input: shouldReturnEmptyWhenDeploymentEnvironmentsIsEmpty() { List<PipelineCSVInfo> result = pipelineService.generateCSVForPipelineWithCodebase( CodebaseSetting.builder().build(), MOCK_START_TIME, MOCK_END_TIME, FetchedData.BuildKiteData.builder().build(), Lists.list());  "<AssertPlaceHolder>"; verify(buildKiteService, never()).getPipelineStepNames(any()); }
[*] target: assertEquals(0, result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: testNotify_MockProviderOnly() { RegistryDirectory registryDirectory = getRegistryDirectory();  List<URL> serviceUrls = new ArrayList<URL>(); serviceUrls.add(SERVICEURL.addParameter("methods", "getXXX1")); serviceUrls.add(SERVICEURL2.addParameter("methods", "getXXX1,getXXX2")); serviceUrls.add(SERVICEURL.setProtocol(MOCK_PROTOCOL));  registryDirectory.notify(serviceUrls); Assertions."<AssertPlaceHolder>"; invocation = new RpcInvocation();  List invokers = registryDirectory.list(invocation); Assertions.assertEquals(2, invokers.size());  RpcInvocation mockinvocation = new RpcInvocation(); mockinvocation.setAttachment(INVOCATION_NEED_MOCK, "true"); invokers = registryDirectory.list(mockinvocation); Assertions.assertEquals(1, invokers.size()); }
[*] target: assertTrue(registryDirectory.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( registryDirectory. isAvailable() )
************************************
[+] input: testGetDumpOnExit() { String expected = "true"; RecordingOptions opts = new RecordingOptions.Builder().dumpOnExit(expected).build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getDumpOnExit())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDumpOnExit() )
************************************
[+] input: testConflictingOrderOfProcessors3() { AbstractOutputProcessor outputProcessor1 = new AbstractOutputProcessor() { }; outputProcessor1.setAction(null, -1); AbstractOutputProcessor outputProcessor2 = new AbstractOutputProcessor() { }; outputProcessor2.setAction(null, -1); AbstractOutputProcessor outputProcessor3 = new AbstractOutputProcessor() { }; outputProcessor3.setAction(null, -1); outputProcessor1.addBeforeProcessor(outputProcessor2.getClass()); outputProcessor2.addBeforeProcessor(outputProcessor3.getClass()); outputProcessor3.addBeforeProcessor(outputProcessor1.getClass());  OutputProcessorChain outputProcessorChain = new OutputProcessorChainImpl(new OutboundSecurityContextImpl()); outputProcessorChain.addProcessor(outputProcessor1); outputProcessorChain.addProcessor(outputProcessor2); assertThrows(IllegalArgumentException.class, () -> outputProcessorChain.addProcessor(outputProcessor3));  List<OutputProcessor> outputProcessors = outputProcessorChain.getProcessors(); "<AssertPlaceHolder>"; assertEquals(outputProcessor1, outputProcessors.get(0)); assertEquals(outputProcessor2, outputProcessors.get(1)); }
[*] target: assertEquals(2, outputProcessors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, outputProcessors. size ( ) )
************************************
[+] input: JsonLdError {  URL fileUrl = getClass().getResource("document.jsonld");  assertNotNull(fileUrl);  Document document = (new FileLoader()).loadDocument(fileUrl.toURI(), new DocumentLoaderOptions());  "<AssertPlaceHolder>"; assertTrue(MediaType.JSON_LD.match(document.getContentType())); }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
[+] input: IOException { final String name = "pom.xml"; final Path extPath = Path.of(name); final Path p = testArchivePath();  // add a file try (ZipArchive z = new ZipArchive(p.toFile())) { // file isn't there assertFalse(z.isModified()); assertNoFile(name, z);  z.add(name, extPath.toFile());  // file is there now assertTrue(z.isModified()); assertFile(name, extPath, z); }  try (ZipArchive z = new ZipArchive(p.toFile())) { // reopen, check the file was written correctly assertFalse(z.isModified()); assertFile(name, extPath, z);  // remove the file z.remove(name);  // check that the file is gone assertTrue(z.isModified()); assertNoFile(name, z); }  // reopen, check that the removed file is gone try (ZipArchive z = new ZipArchive(p.toFile())) { "<AssertPlaceHolder>"; assertNoFile(name, z); } }
[*] target: assertFalse(z.isModified())
[-] pred: org. junit. Assert. assertFalse ( z. isModified() )
************************************
[+] input: deleteMemberDocumentSuccess() { // given HouseMember testMember = new HouseMember(MEMBER_ID, MEMBER_DOCUMENT, MEMBER_NAME, null); given(houseMemberRepository.findByMemberId(MEMBER_ID)) .willReturn(Optional.of(testMember)); // when boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(testMember.getHouseMemberDocument()); verify(houseMemberRepository).findByMemberId(MEMBER_ID); verify(houseMemberRepository).save(testMember); }
[*] target: assertTrue(isDocumentDeleted)
[-] pred: org. junit. Assert. assertTrue ( isDocumentDeleted )
************************************
[+] input: testCurrentSimplyDelegates() { Context expected = mock(Context.class); ContextStorage delegate = mock(ContextStorage.class);  when(delegate.current()).thenReturn(expected);  JfrContextStorage contextStorage = new JfrContextStorage(delegate); Context result = contextStorage.current(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: withSimpleRestartNoTransferTest() { Boolean returnValue = withSimpleRestart("ABORT", "foo", () -> {}); "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, returnValue)
[-] pred: org. junit. Assert. assertEquals ( false, returnValue )
************************************
[+] input: should_canConvertValue_returnTrue_ifCheckDoubleOne() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(1.0d));  //then "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: testMakeDatabase() { // Prepare test data JDBCSinkConfig config = mock(JDBCSinkConfig.class); when(config.getString(JDBCSinkConfig.CONFIG_NAME_CONNECTION_URL)).thenReturn("jdbc:db2://localhost:3306/test"); when(config.getString(JDBCSinkConfig.CONFIG_NAME_CONNECTION_USER)).thenReturn("username"); when(config.getPassword(JDBCSinkConfig.CONFIG_NAME_CONNECTION_PASSWORD)).thenReturn(new Password("password")); when(config.getInt(JDBCSinkConfig.CONFIG_NAME_CONNECTION_DS_POOL_SIZE)).thenReturn(10);  // Create a mock for the IDataSource IDataSource dataSource = mock(IDataSource.class);  // Create a mock for the DatabaseType DatabaseType databaseType = mock(DatabaseType.class); when(databaseType.getDriver()).thenReturn("com.ibm.db2.jcc.DB2Driver"); when(databaseType.create(dataSource)).thenReturn(mock(IDatabase.class));  // Create a mock for the DatabaseFactory DatabaseFactory databaseFactory = mock(DatabaseFactory.class); doCallRealMethod().when(databaseFactory).makeDatabase(config);  // Test the makeDatabase method IDatabase database = databaseFactory.makeDatabase(config);  // Verify the interactions and assertions verify(config, times(2)).getString(JDBCSinkConfig.CONFIG_NAME_CONNECTION_URL); verify(config).getString(JDBCSinkConfig.CONFIG_NAME_CONNECTION_USER); verify(config).getPassword(JDBCSinkConfig.CONFIG_NAME_CONNECTION_PASSWORD); verify(config).getInt(JDBCSinkConfig.CONFIG_NAME_CONNECTION_DS_POOL_SIZE); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(database)
[-] pred: org. junit. Assert. assertNotNull ( database )
************************************
[+] input: testGetRandomKeyForMaxFrequencyWithTwo() { MapWithRandomKeyForMostFrequentValue<String, String> map = new MapWithRandomKeyForMostFrequentValue<>(); map.put("a", "b"); map.put("c", "b"); map.put("e", "f"); map.put("g", "f"); map.put("i", "h");  Set<String> expected = Set.of("a", "c", "e", "g"); Set<String> actual = new HashSet<>(); for (int i = 0; i < 1000; i++) actual.add(map.getRandomKeyWithMaxFrequency()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: tagbodyNormalReturnTest() { var ref = new Object() { boolean passed = true; }; tagbody((tagbody) -> { ref.passed = true; }); "<AssertPlaceHolder>"; }
[*] target: assertTrue(ref.passed)
[-] pred: org. junit. Assert. assertTrue ( ref.passed )
************************************
[+] input: test1() { int[] arrInitial = {}; int[] arrExpected = {}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testTokenSign() { TokenSign tokenSign = new TokenSign(); tokenSign.setDevice("PC"); tokenSign.setValue("ttt-value");  Assertions.assertEquals(tokenSign.getDevice(), "PC"); Assertions.assertEquals(tokenSign.getValue(), "ttt-value");  Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(tokenSign.toString())
[-] pred: org. junit. Assert. assertNotNull ( tokenSign. toString ( ) )
************************************
[+] input: Exception { Inner$Interface ins = ConstructionUtil.generateSubClassOf(Inner$Interface.class, options); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
[+] input: testDoVolatilityAssert_aboveUpperLimit() { RiseAssertion riseAssertion = MockRiseAssertionFactory.create("10", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "120"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = riseAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
[+] input: StructureBuildingException { BuildState state = new BuildState(mock(NameToStructureConfig.class)); Element word = new GroupingEl(WORD_EL);  Element phospho = new TokenEl(GROUP_EL); phospho.addAttribute(new Attribute(SUBTYPE_ATR, PHOSPHO_SUBTYPE_VAL)); Fragment phosphoFrag = state.fragManager.buildSMILES("-P(=O)O"); phospho.setFrag(phosphoFrag); Element substituent = new GroupingEl(SUBSTITUENT_EL); substituent.addChild(phospho);  Element methanol = new TokenEl(GROUP_EL); methanol.setFrag(state.fragManager.buildSMILES("CO")); Element root = new GroupingEl(ROOT_EL); root.addChild(methanol);  word.addChild(substituent); word.addChild(root); StructureBuildingMethods.resolveRootOrSubstituentUnLocanted(state, substituent);  Set<Bond> interFragmentBonds =  state.fragManager.getInterFragmentBonds(phosphoFrag); "<AssertPlaceHolder>"; assertEquals(ChemEl.O, interFragmentBonds.iterator().next().getOtherAtom(phosphoFrag.getFirstAtom()).getElement()); }
[*] target: assertEquals(1, interFragmentBonds.size())
[-] pred: org. junit. Assert. assertEquals ( 1, interFragmentBonds. size ( ) )
************************************
[+] input: testBoldList() { final String input = """ [LIST] [*][B]bold[/B] not [*][B]bold[/B] not [*][B]bold[/B] not [/LIST] """; final String expected = """  * **bold** not * **bold** not * **bold** not"""; final String result = this.converter.convertToMarkdown(input); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: checkIsRootByUserId() { Integer userId = mockData(); boolean exist = groupService.checkIsRootByUserId(userId); "<AssertPlaceHolder>"; }
[*] target: assertFalse(exist)
[-] pred: org. junit. Assert. assertFalse ( exist )
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer>withSupplier(() -> 10) .build();  AtomicReference<Integer> result = stage.execute(new AtomicReference(null));  Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: shouldVerifyIncorrectPassword() { User user = userDataProvider.full(); String username = user.getUsername();  when(userRepository.findByUsername(username)) .thenReturn(Optional.of(user));  boolean verified = migrationService.passwordIsCorrect(username, "wrong_password");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(verified)
[-] pred: org. junit. Assert. assertFalse ( verified )
************************************
[+] input: testShallowClone() { Set<Integer> testKeycodeSet = new HashSet<>(); testKeycodeSet.add(VirtualKey.W.getKeycode()); testKeycodeSet.add(VirtualKey.S.getKeycode());  List<Character> testCharList = new ArrayList<>(); testCharList.add('w'); testCharList.add('s');  VirtualKeyboard expected = new VirtualKeyboard(testKeycodeSet, testCharList); VirtualKeyboard actual = expected.shallowClone();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getAllCycles_expectedMultipleCycles() { Cycle testCycle1 = new Cycle("TestCycle1"); Cycle testCycle2 = new Cycle("TestCycle2");  Collection<Cycle> expectedCycles = new ArrayList<>(); expectedCycles.add(testCycle1); expectedCycles.add(testCycle2);  Collection<Cycle> outputCycles = new ArrayList<>(); outputCycles.add(testCycle1); outputCycles.add(testCycle2); when(cycleRepository.findAll()).thenReturn(outputCycles);  Collection<Cycle> actualCycles = cycleService.getAllCycles();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCycles, actualCycles)
[-] pred: org. junit. Assert. assertEquals ( expectedCycles, actualCycles )
************************************
[+] input: testToDateStringRandom() { for (int i = 0; i < 1000000; i++) { int j = random.ints(Integer.MIN_VALUE, Integer.MAX_VALUE).findFirst().getAsInt(); long l = Integer.toUnsignedLong(j); String expected = new Date(l * 1000L).toString(); String actual = SftpATTRS.toDateString(l); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: removeHouseFromCommunityByHouseId() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(); CommunityHouse testHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse(TEST_HOUSE_ID); Set<HouseMember> testHouseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT); testHouse.setHouseMembers(testHouseMembers); testCommunity.getHouses().add(testHouse);  given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); given(communityHouseRepository.findByHouseIdWithHouseMembers(TEST_HOUSE_ID)) .willReturn(Optional.of(testHouse));  // when boolean houseDeleted = communitySDJpaService.removeHouseFromCommunityByHouseId(testCommunity, TEST_HOUSE_ID);  // then "<AssertPlaceHolder>"; assertFalse(testCommunity.getHouses().contains(testHouse)); verify(communityRepository).save(testCommunity); testHouse.getHouseMembers() .forEach(houseMember -> verify(houseService).deleteMemberFromHouse(TEST_HOUSE_ID, houseMember.getMemberId())); verify(communityHouseRepository).findByHouseIdWithHouseMembers(TEST_HOUSE_ID); verify(communityHouseRepository).deleteByHouseId(TEST_HOUSE_ID); }
[*] target: assertTrue(houseDeleted)
[-] pred: org. junit. Assert. assertTrue ( houseDeleted )
************************************
[+] input: getGrantedPermissions_restrictedUser_restrictedPermissions() { Set<UserPermission> permissions = makeHolder(EnumSet.of(OrganizationRole.ENTRY_ONLY)).getGrantedPermissions(); Set<UserPermission> expected = EnumSet.of( UserPermission.START_TEST, UserPermission.UPDATE_TEST, UserPermission.SUBMIT_TEST, UserPermission.SEARCH_PATIENTS); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, permissions)
[-] pred: org. junit. Assert. assertEquals ( expected, permissions )
************************************
[+] input: protobufTest() { // Empty Result var result = new PhotonPipelineResult(); var serializedResult = PhotonPipelineResult.proto.createMessage(); PhotonPipelineResult.proto.pack(serializedResult, result); var unpackedResult = PhotonPipelineResult.proto.unpack(serializedResult); assertEquals(result, unpackedResult);  // non multitag result result = new PhotonPipelineResult( 3, 4, 5, List.of( new PhotonTrackedTarget( 3.0, -4.0, 9.0, 4.0, 2, -1, -1f, new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8))), new PhotonTrackedTarget( 3.0, -4.0, 9.1, 6.7, 3, -1, -1f, new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8))))); serializedResult = PhotonPipelineResult.proto.createMessage(); PhotonPipelineResult.proto.pack(serializedResult, result); unpackedResult = PhotonPipelineResult.proto.unpack(serializedResult); assertEquals(result, unpackedResult);  // multitag result result = new PhotonPipelineResult( 3, 4, 5, List.of( new PhotonTrackedTarget( 3.0, -4.0, 9.0, 4.0, 2, -1, -1f, new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8))), new PhotonTrackedTarget( 3.0, -4.0, 9.1, 6.7, 3, -1, -1f, new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), new Transform3d(new Translation3d(4, 2, 3), new Rotation3d(1, 5, 3)), 0.25, List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)), List.of( new TargetCorner(1, 2), new TargetCorner(3, 4), new TargetCorner(5, 6), new TargetCorner(7, 8)))), new MultiTargetPNPResult( new PNPResult( new Transform3d(new Translation3d(1, 2, 3), new Rotation3d(1, 2, 3)), 0.1), List.of(1, 2, 3))); serializedResult = PhotonPipelineResult.proto.createMessage(); PhotonPipelineResult.proto.pack(serializedResult, result); unpackedResult = PhotonPipelineResult.proto.unpack(serializedResult); "<AssertPlaceHolder>"; }
[*] target: assertEquals(result, unpackedResult)
[-] pred: org. junit. Assert. assertEquals ( result, unpackedResult )
************************************
[+] input: testCRC32CanCombineValues() {  byte[] buf1 = randombuf(1024); byte[] buf2 = randombuf(1024);  long crc1 = getValue(Arrays.asList(buf1)); long crc2 = getValue(Arrays.asList(buf2)); long expected = getValue(Arrays.asList(buf1, buf2));  long actual = CRC32.combine(crc1, crc2, buf2.length);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testPostDM() { DmEvent result = twitterClient.postDm("Hello world !", "1120050519182016513"); "<AssertPlaceHolder>"; assertNotNull(result.getEvent().getText()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: mapEntitiesToDto_shouldMapDescriptionsArray() { int expected = 3; List<OkrTopicDescription> topicDescription = new ArrayList<>() { { add(new OkrTopicDescription()); add(new OkrTopicDescription()); add(new OkrTopicDescription()); } };  Collection<OkrTopicDescriptionDto> actual = topicDescriptionMapper.mapEntitiesToDtos(topicDescription);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.size())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. size ( ) )
************************************
[+] input: shouldProperlyGetGroupsDiscWithEmptyArgs() { //given GroupRequestArgs args = GroupRequestArgs.builder().build();  //when List<GroupDiscussionInfo> groupList = groupClient.getGroupDiscussionList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(groupList.isEmpty()); }
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
[+] input: shouldParseFastOnJdk7u6() { Assertions.assertTimeout(Duration.ofMillis(1000), () -> { // issue #760 GenericTokenParser parser = new GenericTokenParser("${", "}", new VariableTokenHandler(new HashMap<String, String>() { { put("first_name", "James"); put("initial", "T"); put("last_name", "Kirk"); put("", ""); } }));  StringBuilder input = new StringBuilder(); for (int i = 0; i < 10000; i++) { input.append("${first_name} ${initial} ${last_name} reporting. "); } StringBuilder expected = new StringBuilder(); for (int i = 0; i < 10000; i++) { expected.append("James T Kirk reporting. "); } "<AssertPlaceHolder>"; }); }
[*] target: assertEquals(expected.toString(), parser.parse(input.toString()))
[-] pred: org. junit. Assert. assertEquals ( expected. toString ( ), parser. parse( input. toString ( ) ) )
************************************
[+] input: testStringPaddingEven() { String actual = SerialiserFlavorBase.createCenteredHeading(null, '#', 52); String expected = "####################################################"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { final Method method = StringB.class.getMethod("hashCode");  final boolean actual = ClassUtil.isUserDefinedMethod(method);  // asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
[+] input: removeAdminFromCommunityAdminNotExists() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();  given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); given(communityRepository.save(testCommunity)) .willReturn(testCommunity);  // when boolean adminRemoved = communitySDJpaService.removeAdminFromCommunity(TEST_COMMUNITY_ID, TEST_ADMIN_ID);  // then "<AssertPlaceHolder>"; verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID); verify(communityRepository, never()).save(testCommunity); }
[*] target: assertFalse(adminRemoved)
[-] pred: org. junit. Assert. assertFalse ( adminRemoved )
************************************
[+] input: testToBytes() { byte[] expectedBytes = new byte[]{81, 6, -4, -102, -68, -126, 55, 85, -127, 54, -46, -119}; Xid id = new Xid(expectedBytes);  assertArrayEquals(expectedBytes, id.toByteArray());  ByteBuffer buffer = ByteBuffer.allocate(12); id.putToByteBuffer(buffer); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedBytes, buffer.array())
[-] pred: org. junit. Assert. assertArrayEquals ( expectedBytes, buffer. array ( ) )
************************************
[+] input: resetPasswordTokenNotMatches() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, null); testSecurityToken.setToken("wrong-token"); User user = getDefaultUser(); user.getUserTokens().add(testSecurityToken); ; given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user));  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); assertNotNull(getUserSecurityToken(user, SecurityTokenType.RESET)); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
[+] input: shouldGetAndSetFirstName() { var user = new LegacyUser(); var expectedValue = "someValue"; user.setFirstName(expectedValue); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, user.getFirstName())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getFirstName() )
************************************
[+] input: deleteBookingAmenityNotExists() { // given AmenityBookingItem testBookingItem = getTestBookingItem();  given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID)) .willReturn(Optional.of(testBookingItem)); testBookingItem.setAmenity(TestUtils.AmenityHelpers .getTestAmenity(TEST_AMENITY_ID_2, TEST_AMENITY_DESCRIPTION)); // when boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);  // then "<AssertPlaceHolder>"; assertNotEquals(TEST_AMENITY_ID, testBookingItem.getAmenity().getAmenityId()); verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID); verify(bookingItemRepository, never()).delete(any()); }
[*] target: assertFalse(bookingDeleted)
[-] pred: org. junit. Assert. assertFalse ( bookingDeleted )
************************************
[+] input: Exception {  // Arrange FileConfigLoader loader = new FileConfigLoader("sample-config.yaml");  // Act MainConfig mainConfig = loader.loadConfiguration();  // Assert "<AssertPlaceHolder>"; assertEquals("http://localhost:8080", mainConfig.getHostUri());  }
[*] target: assertNotNull(mainConfig)
[-] pred: org. junit. Assert. assertNotNull ( mainConfig )
************************************
[+] input: testResolveFixArguments() { final HandlerAdapter mock = mock(HandlerAdapter.class); final AbstractHandlerExecution<HandlerAdapter> execution = new AbstractHandlerExecution<HandlerAdapter>(mock) { @Override protected CompletableFuture<Object> transferToFuture(Object returnValue) { return Futures.completedFuture(returnValue); }  @Override protected Object resolveFixedArg(MethodParam parameter, AsyncRequest request, AsyncResponse response) { return "foo"; } }; final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final MethodParam param = mock(MethodParam.class); //noinspection unchecked when(param.type()).thenReturn((Class) Object.class); final HandlerAdapter.ResolvableParam[] params = new HandlerAdapter.ResolvableParam[1]; params[0] = new HandlerAdapter.ResolvableParam(param, null); when(mock.params()).thenReturn(params);  final Object[] args = execution.resolveArguments(request, response); "<AssertPlaceHolder>"; assertEquals(1, args.length); assertEquals("foo", args[0]); }
[*] target: assertNotNull(args)
[-] pred: org. junit. Assert. assertNotNull ( args )
************************************
[+] input: testInvokeWithPathVariables() { final WebOperation op = webOperation(InvocationContext::getArguments); final OperationHandler handler = new OperationHandler(op); final AsyncRequest get = MockAsyncRequest.aMockRequest() .withMethod("GET") .withUri("/a/b") .build();  PatternsPredicate p = new PatternsPredicate(new String[]{"/{foo}/{bar}"}); p.test(get); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(get, response, null); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); final Map<String, Object> args = (Map<String, Object>) ret1.join(); assertEquals(2, args.size()); assertTrue(args.containsKey("foo")); assertTrue(args.containsKey("bar")); assertEquals("a", args.get("foo")); assertEquals("b", args.get("bar")); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
[+] input: testIsNotRedundantWith() { final DependencyChain chain1 = new DependencyChain() .add(single("c1")) .add(single("c2")) .add(single("c3")) .add(single("c1"));  final CircularDependency circularDependency1 = chain1.getCircularDependency().orElseThrow();  final DependencyChain chain2 = new DependencyChain() .add(single("c4")) .add(single("c5")) .add(single("c6")) .add(single("c4"));  final CircularDependency circularDependency2 = chain2.getCircularDependency().orElseThrow();   "<AssertPlaceHolder>"; }
[*] target: assertFalse(circularDependency1.isRedundantWith(circularDependency2))
[-] pred: org. junit. Assert. assertFalse ( circularDependency1. isRedundantWith ( circularDependency2 ) )
************************************
[+] input: it_recognizes_batch_file_io_statement() { CobolLine line = new CobolLine("           OPEN INPUT INPUT-FILE", tokenExtractor);  boolean isBatchFileIOStatement = Interpreter.checkForBatchFileIOStatement(line);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isBatchFileIOStatement)
[-] pred: org. junit. Assert. assertTrue ( isBatchFileIOStatement )
************************************
[+] input: convertToEntityAttribute_inputNull_returnNull() { /* ACT */ final var result = urlConverter.convertToEntityAttribute(null);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testBusinessAppHdrV02Xml() { BusinessAppHdrV02 bah = new BusinessAppHdrV02(); bah.setFr(new Party44Choice()); bah.getFr().setFIId(new BranchAndFinancialInstitutionIdentification6()); bah.getFr().getFIId().setFinInstnId(new FinancialInstitutionIdentification18()); bah.getFr().getFIId().getFinInstnId().setBICFI("BIC"); bah.getFr().getFIId().setBrnchId(new BranchData3()); bah.getFr().getFIId().getBrnchId().setId("id"); bah.getFr().getFIId().getBrnchId().setNm("name"); bah.getFr().getFIId().getBrnchId().setPstlAdr(new PostalAddress24()); bah.getFr().getFIId().getBrnchId().getPstlAdr().setCtry("AR"); bah.setMktPrctc(new ImplementationSpecification1()); bah.getMktPrctc().setId("FOO"); bah.getMktPrctc().setRegy("BAR");  final String xml = bah.xml();  "<AssertPlaceHolder>"; // System.out.println(xml); testXpath(xml, "/AppHdr/Fr/FIId/FinInstnId/BICFI", "BIC"); testXpath(xml, "/AppHdr/Fr/FIId/BrnchId/Id", "id"); testXpath(xml, "/AppHdr/Fr/FIId/BrnchId/Nm", "name"); }
[*] target: assertNotNull(xml)
[-] pred: org. junit. Assert. assertNotNull ( xml )
************************************
[+] input: testGetAttributes() { Map<String, String> attributes = authorvh.getAttributes(context.request()); "<AssertPlaceHolder>"; assertArrayEquals(new String[]{"data-author-vh-tablet", "data-author-vh-item-mobile", "data-author-vh-item-desktop"}, attributes.keySet().toArray()); assertEquals("51", attributes.get("data-author-vh-tablet")); assertEquals("12,,", attributes.get("data-author-vh-item-mobile")); assertEquals(",15,", attributes.get("data-author-vh-item-desktop")); }
[*] target: assertNotNull(attributes)
[-] pred: org. junit. Assert. assertNotNull ( attributes )
************************************
[+] input: test_fetchNameWithSingleAliveAndMultipleArchived_ok() { Random rand = new Random(); int times = rand.nextInt(5) + 5; for (int time = 1; time <= times; time++) { TaskDefinition taskDefinitionTemp = MockTaskDefinitionFactory.createTaskDefinition(); taskDefinitionTemp = taskDefinitionTemp.cloneBuilder() .withName("test") .build(); taskDefinitionDao.create(taskDefinitionTemp); if (time == times) break; taskDefinitionDao.archive(taskDefinitionTemp.getDefinitionId()); } Optional<TaskDefinition> fetched = taskDefinitionDao.fetchAliveTaskDefinitionByName("test").stream() .findAny(); "<AssertPlaceHolder>"; assertTrue(fetched.get().getName().equals("test")); }
[*] target: assertTrue(fetched.isPresent())
[-] pred: org. junit. Assert. assertTrue ( fetched. isPresent ( ) )
************************************
[+] input: changeUsername() { UserIdentityDO userIdentity = setUp1(); userIdentityService.createIdentity(userIdentity);  boolean b = userIdentityService.changeUsername(userIdentity.getUserId(), "pedro1"); assertTrue(b);  boolean valid = userIdentityService.verifyUsernamePassword(userIdentity.getUserId(), "pedro1", "123456"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
[+] input: checkClassFromExternalJar() { final JarFile actual = ClassUtil.jarFileOf(StringUtils.class);  // asserts "<AssertPlaceHolder>"; assertTrue(actual.getName().contains("junit-platform-commons")); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
[+] input: IOException { String data = "\ud83d\udc49"; String result = DOMUtilities.contentToString(data, false); "<AssertPlaceHolder>"; }
[*] target: assertEquals(data, result)
[-] pred: org. junit. Assert. assertEquals ( data, result )
************************************
[+] input: create_validInput_returnSubscriptionForRepresentation() { /* ARRANGE */ Mockito.doReturn(Optional.of(getRepresentation())).when(entityResolver).getEntityById(Mockito.any()); Mockito.doNothing().when(repSubLinker).add(Mockito.any(), Mockito.any());  /* ACT */ final var subscription = service.create(subscriptionDesc);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNotNull(subscription)
[-] pred: org. junit. Assert. assertNotNull ( subscription )
************************************
[+] input: checkMakeAnAddress() {  //Arrange String street = "rua da saudade"; String doorNumber = "12"; String postCode = "4000-121"; String city = "Porto"; String country = "Portugal";  //Act Address address = Address.createAddress(street, doorNumber, postCode, city, country); Address addressC = new Address(address);  //Assert "<AssertPlaceHolder>";   }
[*] target: assertEquals(address, addressC)
[-] pred: org. junit. Assert. assertEquals ( address, addressC )
************************************
[+] input: ParsingException { ParseTokens pTokens = new ParseTokens(Arrays.asList("functionalfoo",""), Arrays.asList('a', OpsinTools.END_OF_FUNCTIONALTERM)); List<ParseWord> parseWords = WordTools.splitIntoParseWords(Arrays.asList(pTokens), "functionalfoo"); "<AssertPlaceHolder>"; assertEquals("functionalfoo", parseWords.get(0).getWord()); assertEquals(1, parseWords.get(0).getParseTokens().size()); assertEquals(pTokens, parseWords.get(0).getParseTokens().get(0)); }
[*] target: assertEquals(1, parseWords.size())
[-] pred: org. junit. Assert. assertEquals ( 1, parseWords. size ( ) )
************************************
[+] input: findSupportedDiseaseByName_successful() { SupportedDisease covid = _repo.findByName("COVID-19").orElse(null); "<AssertPlaceHolder>"; assertEquals("96741-4", covid.getLoinc()); }
[*] target: assertNotNull(covid)
[-] pred: org. junit. Assert. assertNotNull ( covid )
************************************
[+] input: testRemoteActivityConfiguration() { String phrase = "Hello remote!"; RemoteActivities remoteActivity = mock(RemoteActivities.class); when(remoteActivity.echo(phrase)).thenReturn(phrase);  createWorkerForRemoteActivity(remoteActivity); createWorkerForLocalWorkflow(HelloRemoteWorkflowImpl.class);  HelloWorkflow workflowStub = fact.makeStub( HelloWorkflow.class, HelloRemoteWorkflowImpl.class, testEnv.getWorkflowClient()); testEnv.start();  String echoResult = workflowStub.process(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(phrase, echoResult)
[-] pred: org. junit. Assert. assertEquals ( phrase, echoResult )
************************************
[+] input: toModel_validInput_returnOfferedResourceView() { /* ARRANGE */ final var offeredResource = getOfferedResource();  /* ACT */ final var result = offeredResourceViewAssembler.toModel(offeredResource);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(offeredResource.getTitle(), result.getTitle()); Assertions.assertEquals(offeredResource.getDescription(), result.getDescription()); Assertions.assertEquals(offeredResource.getKeywords(), result.getKeywords()); Assertions.assertEquals(offeredResource.getPublisher(), result.getPublisher()); Assertions.assertEquals(offeredResource.getLanguage(), result.getLanguage()); Assertions.assertEquals(offeredResource.getLicense(), result.getLicense()); Assertions.assertEquals(offeredResource.getVersion(), result.getVersion()); Assertions.assertEquals(offeredResource.getSovereign(), result.getSovereign()); Assertions.assertEquals(offeredResource.getEndpointDocumentation(), result.getEndpointDocumentation()); Assertions.assertEquals(offeredResource.getAdditional(), result.getAdditional()); Assertions.assertEquals(offeredResource.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(offeredResource.getModificationDate(), result.getModificationDate());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getOfferedResourceLink(offeredResource.getId()), selfLink.get().getHref());  final var contractsLink = result.getLink("contracts"); assertTrue(contractsLink.isPresent()); assertNotNull(contractsLink.get()); assertEquals(getOfferedResourceContractsLink(offeredResource.getId()), contractsLink.get().getHref());  final var representationsLink = result.getLink("representations"); assertTrue(representationsLink.isPresent()); assertNotNull(representationsLink.get()); assertEquals(getOfferedResourceRepresentationsLink(offeredResource.getId()), representationsLink.get().getHref());  final var catalogsLink = result.getLink("catalogs"); assertTrue(catalogsLink.isPresent()); assertNotNull(catalogsLink.get()); assertEquals(getOfferedResourceCatalogsLink(offeredResource.getId()), catalogsLink.get().getHref()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: checkEqualsAddress_true_doorNumber_null() {  //Arrange String streetA = "rua da alegria"; String doorNumberA = ""; String postCodeA = "4000-222"; String cityA = "Porto"; String countryA = "Portugal";  String streetB = "rua da alegria"; String doorNumberB = ""; String postCodeB = "4000-222"; String cityB = "Porto"; String countryB = "Portugal";   //Act  Address addressA = Address.createAddress(streetA, doorNumberA, postCodeA, cityA, countryA); Address addressB = Address.createAddress(streetB, doorNumberB, postCodeB, cityB, countryB); addressA.setDoorNumber(null); addressB.setDoorNumber(null);   //Assert  "<AssertPlaceHolder>";  }
[*] target: assertEquals(addressA, addressB)
[-] pred: org. junit. Assert. assertEquals ( addressA, addressB )
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  when(mockConnection.getSession()).thenReturn(mockSession); when(mockSession.getLog()).thenReturn(mockLogger);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isRds()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains( "my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com:1234")); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: SQLException { final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: should_canConvertValue_returnTrue_ifFloatIsMinusZero() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(-0.0));  //then "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: readResolve() { InnerClassSingleton instance = InnerClassSingleton.getInstance();  try (FileOutputStream fileOutputStream = new FileOutputStream(InnerClassSingleton.class.getResource("").getPath() + "InnerClassSingleton.txt"); final ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) { objectOutputStream.writeObject(instance); final ObjectInputStream objectInputStream = new ObjectInputStream(InnerClassSingleton.class.getResourceAsStream("InnerClassSingleton.txt")); final InnerClassSingleton o = (InnerClassSingleton) objectInputStream.readObject(); Assertions."<AssertPlaceHolder>"; } catch (IOException | SecurityException | ClassNotFoundException e) { e.printStackTrace(); }  }
[*] target: assertEquals(instance, o)
[-] pred: org. junit. Assert. assertEquals ( instance, o )
************************************
[+] input: testEnforced05() { // given Long contentLength = Long.valueOf(0); String siteId = UUID.randomUUID().toString(); ConfigService configService = awsservice.getExtension(ConfigService.class);  DynamicObject ob = configService.get(siteId); ob.put(ConfigService.MAX_DOCUMENT_SIZE_BYTES, "10"); configService.save(siteId, ob);  // when String value = service.getValue(awsservice, siteId); boolean result = service.enforced(awsservice, siteId, value, contentLength);  // then "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testContrainsNoProperty() { // given final MinLengthConstraint constraint = new MinLengthConstraint(7); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
[+] input: testDoVolatilityAssert_withExpectation() { AbsoluteAssertion absoluteAssertion = MockAbsoluteAssertionFactory.create("0", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean validateResult = absoluteAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
[*] target: assertTrue(validateResult)
[-] pred: org. junit. Assert. assertTrue ( validateResult )
************************************
[+] input: testInvokeWithArgs() { final WebOperation op = webOperation(InvocationContext::getArguments); final OperationHandler handler = new OperationHandler(op); final AsyncRequest get = MockAsyncRequest.aMockRequest() .withMethod("GET") .build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); Map<String, String> body = new HashMap<>(16); body.put("foo", "1"); body.put("bar", "2"); final CompletableFuture<Object> ret = handler.handle(get, response, body); assertNotNull(ret); assertNotNull(ret.join()); final Map<String, Object> args = (Map<String, Object>) ret.join(); assertEquals(0, args.size());  final AsyncRequest post = MockAsyncRequest.aMockRequest() .withMethod("POST") .build(); final AsyncResponse response1 = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(post, response1, body); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); final Map<String, Object> args1 = (Map<String, Object>) ret1.join(); assertEquals(body, args1); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
[+] input: finds_correct_file_suffix() { String[] suffixes = {".cbl", ".cob", ".txt", ".java"}; List<String> suffixList = Arrays.asList(suffixes); String fullPath = "fake\\fake\\file.txt"; String pathWithNoSuffix = "fake\\fake\\file"; MockedStatic<Files> mockedFiles = Mockito.mockStatic(Files.class); mockedFiles.when(() -> Files.isRegularFile(Paths.get(fullPath))) .thenReturn(true); String appended = PathHelper.appendMatchingFileSuffix(pathWithNoSuffix, suffixList);  mockedFiles.close();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(fullPath, appended)
[-] pred: org. junit. Assert. assertEquals ( fullPath, appended )
************************************
[+] input: IOException { final String expected = "Jodd - The Unbearable Lightness of Java - üäößÜÄÖ";  final String actual = NetUtil.downloadString(joddInfoTxt.toExternalForm(), StandardCharsets.UTF_8);  // Asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = RepresentationController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = representationViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: getValuesWithIndex() { var indexKey = "myIndex"; var one = "1"; var two = "1"; var map = new IndexedMap<Integer, String>().indexBuilder() .withMapper(str -> Integer.parseInt(str)) .withName(indexKey) .build();  map.put(1, one); map.put(2, two);  var values = map.values().stream().collect(Collectors.toList());  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, values.size())
[-] pred: org. junit. Assert. assertEquals ( 2, values. size() )
************************************
[+] input: Exception { try (InputStream in = Resources.getResourceAsStream(CLASS_LOADER, JPETSTORE_PROPERTIES)) { "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(in)
[-] pred: org. junit. Assert. assertNotNull ( in )
************************************
[+] input: testProducerConfigSupplier() { Properties consumerConfig = new Properties(); consumerConfig.setProperty("bootstrap.servers", "localhost:9092"); consumerConfig.setProperty("max.poll.records", "10"); consumerConfig.setProperty("group.id", "group-a"); consumerConfig.setProperty("metric.reporters", "org.apache.kafka.common.metrics.MetricsReporter"); Properties producerConfig = SubscriptionBuilder.producerConfigSupplier(consumerConfig).get(); "<AssertPlaceHolder>"; assertEquals("localhost:9092", producerConfig.getProperty("bootstrap.servers")); assertEquals("org.apache.kafka.common.metrics.MetricsReporter", producerConfig.getProperty("metric.reporters")); }
[*] target: assertEquals(2, producerConfig.size())
[-] pred: org. junit. Assert. assertEquals ( 2, producerConfig. size ( ) )
************************************
[+] input: JsonProcessingException { // Write a message (John Wick user) to Kafka using a test producer String uuid = "11111"; String message = objectMapper.writeValueAsString(new User(uuid, "John", "Wick")); producer.send(new ProducerRecord<>(TOPIC_NAME, 0, uuid, message)); producer.flush();  // Read the message and assert its properties verify(userKafkaConsumer, timeout(10000).times(1)) .logKafkaMessages(userArgumentCaptor.capture(), topicArgumentCaptor.capture(), partitionArgumentCaptor.capture(), offsetArgumentCaptor.capture());  User user = userArgumentCaptor.getValue(); "<AssertPlaceHolder>"; assertEquals("11111", user.getUuid()); assertEquals("John", user.getFirstName()); assertEquals("Wick", user.getLastName()); assertEquals(TOPIC_NAME, topicArgumentCaptor.getValue()); assertEquals(0, partitionArgumentCaptor.getValue()); assertEquals(0, offsetArgumentCaptor.getValue()); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: putObjectAndGetMoney() { final RealNumberParser realNumberParser = new RealNumberParser(locales);  final Money money = MoneyParser.parse(twelveDotThreeFour, MoneyParser.GBP); assertNotNull(money); dataManager.put(DBKey.PRICE_LISTED, money);  final Money out = dataManager.getMoney(DBKey.PRICE_LISTED, realNumberParser); assertNotNull(out); assertEquals(twelveDotThreeFour, out.getValue()); final Currency currency = out.getCurrency(); "<AssertPlaceHolder>"; assertEquals("GBP", currency.getCurrencyCode());  MoneyVerifier.checkRawData(dataManager, twelveDotThreeFour, "GBP"); }
[*] target: assertNotNull(currency)
[-] pred: org. junit. Assert. assertNotNull ( currency )
************************************
[+] input: mapDtoToEntity_expects_TextIsMapped() { String expected = "An Example for a text"; noteObjectiveDto.setNoteBody(expected); noteObjective = noteObjectiveMapper.mapDtoToEntity(noteObjectiveDto); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, noteObjective.getText())
[-] pred: org. junit. Assert. assertEquals ( expected, noteObjective. getText ( ) )
************************************
[+] input: matrixVectorTest() { DenseMatrix a = generateA(); DenseMatrix b = generateB(); DenseMatrix c = generateC();  DenseVector vector = generateVector(); DenseMatrix oneDimMatrix = generateOneDimMatrix();  SGDVector matrixMatrixOutput; SGDVector matrixVectorOutput;  matrixMatrixOutput = a.matrixMultiply(oneDimMatrix).getColumn(0); matrixVectorOutput = a.leftMultiply(vector); assertEquals(matrixMatrixOutput,matrixVectorOutput);  matrixMatrixOutput = b.matrixMultiply(oneDimMatrix).getColumn(0); matrixVectorOutput = b.leftMultiply(vector); assertEquals(matrixMatrixOutput,matrixVectorOutput);  matrixMatrixOutput = c.matrixMultiply(oneDimMatrix).getColumn(0); matrixVectorOutput = c.leftMultiply(vector); "<AssertPlaceHolder>"; }
[*] target: assertEquals(matrixMatrixOutput,matrixVectorOutput)
[-] pred: org. junit. Assert. assertEquals ( matrixMatrixOutput, matrixVectorOutput )
************************************
[+] input: Exception { String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; MetadataIdentifier consumerIdentifier = storeConsumer(etcdMetadataReport, TEST_SERVICE, version, group, application);  CompletableFuture<GetResponse> response = etcdClientForTest.getKVClient().get(ByteSequence.from( etcdMetadataReport.getNodeKey(consumerIdentifier), StandardCharsets.UTF_8)); String fileContent = response.get().getKvs().get(0).getValue().toString(StandardCharsets.UTF_8); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(fileContent, "{"paramConsumerTest":"etcdConsumer"}"); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
[+] input: Exception { final String expected = "UPDATE BLOG SET  NAME = ?"; DynamicSqlSource source = createDynamicSqlSource( new TextSqlNode("UPDATE BLOG"), new SetSqlNode(new Configuration(), mixedContents( new IfSqlNode(mixedContents(new TextSqlNode("ID = ?")), "false"), new IfSqlNode(mixedContents(new TextSqlNode(", NAME = ?")), "true")))); BoundSql boundSql = source.getBoundSql(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, boundSql.getSql())
[-] pred: org. junit. Assert. assertEquals ( expected, boundSql. getSql ( ) )
************************************
[+] input: testGetDisk() { String expected = "true"; RecordingOptions opts = new RecordingOptions.Builder().disk(expected).build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getDisk())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDisk() )
************************************
[+] input: StructureBuildingException { Fragment frag = sBuilder.build("C1CCCC2CCCCC12"); List<Atom> atomList = frag.getAtomList(); Set<Bond> bonds = new HashSet<Bond>(frag.getBondSet()); bonds.remove(atomList.get(4).getBondToAtom(atomList.get(9))); List<List<Atom>> paths = CycleDetector.getPathBetweenAtomsUsingBonds(atomList.get(4), atomList.get(9), bonds); "<AssertPlaceHolder>";  List<Atom> pathLeftRing; List<Atom> pathRightRing; if (atomList.indexOf(paths.get(0).get(0))==3){ pathLeftRing = paths.get(0); pathRightRing = paths.get(1); } else{ pathLeftRing = paths.get(1); pathRightRing = paths.get(0); } assertEquals(3, atomList.indexOf(pathLeftRing.get(0))); assertEquals(2, atomList.indexOf(pathLeftRing.get(1))); assertEquals(1, atomList.indexOf(pathLeftRing.get(2))); assertEquals(0, atomList.indexOf(pathLeftRing.get(3)));  assertEquals(5, atomList.indexOf(pathRightRing.get(0))); assertEquals(6, atomList.indexOf(pathRightRing.get(1))); assertEquals(7, atomList.indexOf(pathRightRing.get(2))); assertEquals(8, atomList.indexOf(pathRightRing.get(3))); }
[*] target: assertEquals(2, paths.size())
[-] pred: org. junit. Assert. assertEquals ( 2, paths. size ( ) )
************************************
[+] input: shouldRetrieveAnEmptyRelatedObject_onceEventInvolvedObjectHasNoValue() { event.setRelated(null); ObjectReference reference = ObjectReferenceMapper.map(event.getRelated()); "<AssertPlaceHolder>"; }
[*] target: assertNull(reference)
[-] pred: org. junit. Assert. assertNull ( reference )
************************************
[+] input: testDeepCopy() { Document d = getBaseDocument("/jdocs/sample_1.json"); String expected = d.getJson();  Document d1 = d.deepCopy(); d.empty(); String actual = d1.getJson();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { var stack = new ArrayList<RecordedFrame>(); var method = buildMethod("", "", ""); // Specially crafted artisanal length in order to exercise the edge case // It happens on the second recursion. for (int i = 0; i < 75; i++) { var frame = buildFrame(method, 0, 0); stack.add(frame); }  String result = MethodSupport.jsonWrite(stack, Optional.of(74)); "<AssertPlaceHolder>"; assertTrue(result.length() <= MethodSupport.HEADROOM_75PC); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithNoneStatus() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  when(topicDraftService.getAllTopicDrafts()).thenReturn(new ArrayList<>());  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(0, result.getSeries()[0]); assertEquals(0, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testSerialize() { // PredicateExpr predicateExpr = null; // PredicateSerDes instance = new JsonPredicateSerDes(); // String expResult = ""; // String result = instance.serialize(predicateExpr); // "<AssertPlaceHolder>"; }
[*] target: assertEquals(expResult, result)
[-] pred: org. junit. Assert. assertEquals ( expResult, result )
************************************
[+] input: testContrainsPropertyValueNull() { // given final PropertyValueConvertableConstraint<Integer> constraint = new PropertyValueConvertableConstraint<>(); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
[+] input: testXxeDisabled() { String xml = "<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>" + "<FaceAmount>&xxe;</FaceAmount>"; final MxNode doc = MxNode.parse(xml); "<AssertPlaceHolder>"; }
[*] target: assertNull(doc)
[-] pred: org. junit. Assert. assertNull ( doc )
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .withAction(() -> { throw new RuntimeException(); }) .withRollback((inputHolder, thrown)-> { }) .build();  try { stage.execute(null); } catch (Throwable t) { stage.rollback(t); }  Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(stage.isRolledback())
[-] pred: org. junit. Assert. assertFalse ( stage. isRolledback() )
************************************
[+] input: batchIdStringFormatIsCorrect() { BatchId id = new BatchId(123); String stringId = "123"; "<AssertPlaceHolder>"; assertEquals(id, new BatchId(stringId)); }
[*] target: assertEquals(stringId, id.toString())
[-] pred: org. junit. Assert. assertEquals ( stringId, id. toString ( ) )
************************************
[+] input: testSetAndCallOnEndHandler() { final Req req = plainReq(); when(req.response.isCommitted()).thenReturn(true); when(req.response.isEnded()).thenReturn(true); final AtomicBoolean end = new AtomicBoolean(); assertSame(req, req.onEnd(p -> { end.set(true); return p.setSuccess(null); })); req.handleEnd(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(end.get())
[-] pred: org. junit. Assert. assertTrue ( end. get ( ) )
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .withSupplier(() -> {  return 1; }) .withRollback((inputHolder, thrown)-> { Assertions.assertNull(inputHolder); Assertions.assertNull(thrown);  }) .build(); stage.execute(null); stage.rollback(null);  Assertions.assertTrue(stage.isExecuted()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(stage.isRolledback())
[-] pred: org. junit. Assert. assertTrue ( stage. isRolledback ( ) )
************************************
[+] input: updateByteSize_setByteFromNullToEmpty_willNotUpdate() { /* ARRANGE */ final var artifact = factory.create(new ArtifactDesc());  /* ACT */ final byte[] data = {}; final var checksum = new CRC32C(); checksum.update(data, 0, data.length); final var result = factory.updateByteSize(artifact, data);  /* ASSERT */ //bytesize and checksum should still be 0 "<AssertPlaceHolder>"; assertEquals(0, artifact.getByteSize()); assertEquals(checksum.getValue(), artifact.getCheckSum()); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testI2() { Collection<Link> result = Link.of("https://example.org/"); "<AssertPlaceHolder>"; assertEquals(0, result.size()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: getAll_validInput_returnEndpoints() { /* ARRANGE */ Mockito.doReturn(new PageImpl<Endpoint>(List.of())).when(repository).findAll(Pageable.unpaged());  /* ACT */ final var result = serviceProxy.getAll(Pageable.unpaged());  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testCRC32IsCompatibleWithJavaUtilZipCRC32() { byte[] buf1 = randombuf(1024); java.util.zip.CRC32 juza = new java.util.zip.CRC32(); juza.update(buf1, 0, buf1.length); long expected = juza.getValue(); long actual = getValue(Arrays.asList(buf1));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception {  DubboSwaggerApiListingResource resource = new  DubboSwaggerApiListingResource();  app = mock(Application.class); sc = mock(ServletConfig.class); Set<Class<?>> sets = new HashSet<Class<?>>(); sets.add(SwaggerService.class);  when(sc.getServletContext()).thenReturn(mock(ServletContext.class)); when(app.getClasses()).thenReturn(sets);  Response response = resource.getListingJson(app, sc, null, new ResteasyUriInfo(new URI("http://rest.test")));  Assertions."<AssertPlaceHolder>"; Swagger swagger = (Swagger)response.getEntity(); Assertions.assertEquals("SwaggerService",swagger.getTags().get(0).getName()); Assertions.assertEquals("/demoService/hello",swagger.getPaths().keySet().toArray()[0].toString()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: shouldGetAndSetAttributes() { var user = new LegacyUser(); var expectedValue = Map.of("attribute1", singletonList("value1")); user.setAttributes(expectedValue); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, user.getAttributes())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getAttributes() )
************************************
[+] input: Exception { File f = resolveFile("src/test/resources/ie/baltimore/merlin-examples/merlin-xmldsig-twenty-three/certs/lugh.crt"); X509Certificate cert; try (FileInputStream fis = new FileInputStream(f)) { CertificateFactory cf = CertificateFactory.getInstance("X.509"); cert = (X509Certificate) cf.generateCertificate(fis); }  XMLX509SubjectName x509SubjectName1 = new XMLX509SubjectName(TestUtils.newDocument(), cert); assertNotNull(x509SubjectName1.getSubjectName()); XMLX509SubjectName x509SubjectName2 = new XMLX509SubjectName(TestUtils.newDocument(), cert);  assertEquals(x509SubjectName1, x509SubjectName2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(x509SubjectName1.hashCode(), x509SubjectName2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( x509SubjectName1. hashCode ( ), x509SubjectName2. hashCode ( ) )
************************************
[+] input: Exception { final Response response = mock(Response.class); when(response.code()).thenReturn(204); when(github.request("/repos/someowner/somerepo/collaborators/user")) .thenReturn(completedFuture(response)); boolean isCollaborator = repoClient.isCollaborator("user").get(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isCollaborator)
[-] pred: org. junit. Assert. assertTrue ( isCollaborator )
************************************
[+] input: should_GenerateLeftNumberPointZero_WhenPassingLeftNumberPointZero() { DecimalInWords decimal = new DecimalInWords( createLeftNumber(), IntegerInWords.createZero(), "" ); String expected = "ترليون ومئة مليار ومليار ومليونان ومئتا ألف ومئة وخمسة وستون" + " فاصلة " + "صفر"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, decimal.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, decimal. toString ( ) )
************************************
[+] input: Exception { var method = buildMethod("Foo", "meth", "()V");  var frames = new ArrayList<RecordedFrame>(); for (int i = 0; i < 8; i++) { var frame = buildFrame(method, i + 10, 14); frames.add(frame); }  var expected = "{"type":"stacktrace","language":"java","version":1,"truncated":true,"payload":[{"desc":"Foo.meth()V","line":"10","bytecodeIndex":"14"},{"desc":"Foo.meth()V","line":"11","bytecodeIndex":"14"},{"desc":"Foo.meth()V","line":"12","bytecodeIndex":"14"}]}"; var result = MethodSupport.jsonWrite(frames, Optional.of(3)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: SQLException { final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final Properties properties = new Properties();  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);  assertEquals(4, failoverPlugin.initialConnectionProps.size()); assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: given_an_available_object_when_couchbase_contains_then_return_true() { //Given IdempotencyKey idempotencyKey = new IdempotencyKey("key"); ExistsResult existsResult = mock(ExistsResult.class); when(existsResult.exists()).thenReturn(true); when(collection.exists(idempotencyKey.getKeyValue())).thenReturn(existsResult);  //When Boolean isContain = couchbaseIdempotentRepository.contains(idempotencyKey);  //Then verify(collection, times(1)).exists(idempotencyKey.getKeyValue()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isContain)
[-] pred: org. junit. Assert. assertTrue ( isContain )
************************************
[+] input: buildProgressChart_shouldBuildCorrectXAxisLabels() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle"); long companyId = 11L; KeyResultHistory keyResultHistory1 = new KeyResultHistoryBuilder().SetBaseInformation(5, 10, null, LocalDate.now().minusDays(5)).Build(); KeyResultHistory keyResultHistory2 = new KeyResultHistoryBuilder().SetBaseInformation(10, 10, null, LocalDate.now().minusDays(4)).Build(); KeyResult keyResult = new KeyResultBuilder() .SetTarget(10).SetCurrent(10) .AddHistory(keyResultHistory1) .AddHistory(keyResultHistory2) .Build(); Objective objective1 = ObjectiveBuilder.Create().AddKeyResult(keyResult).Build(); OkrChildUnit team1 = TeamBuilder.CreateDepartment(10L).AddObjective(objective1).Build(); OkrCompany company = new CompanyBuilder().AddChildUnits(team1).Build(); when(keyResultHistoryService.findOldestKeyResultHistoryForKeyResultList(any())).thenReturn(keyResult.getKeyResultHistory().stream().toList().get(0)); when(companyService.findById(companyId)).thenReturn(company);  LineChartOptionsDto result = lineChartService.buildProgressChart(chartCreationOptions, companyId);  "<AssertPlaceHolder>"; assertEquals(6, result.getXAxisCategories().size()); String[] xAxisLabels = result.getXAxisCategories().toArray(new String[0]); assertEquals(LocalDate.now().minusDays(5).toString(), xAxisLabels[0]); assertEquals(LocalDate.now().minusDays(4).toString(), xAxisLabels[1]); assertEquals(LocalDate.now().minusDays(3).toString(), xAxisLabels[2]); assertEquals(LocalDate.now().minusDays(2).toString(), xAxisLabels[3]); assertEquals(LocalDate.now().minusDays(1).toString(), xAxisLabels[4]); assertEquals(LocalDate.now().toString(), xAxisLabels[5]); assertEquals("TestTitle", result.getTitle()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: IOException { //prepare File operator = new File("/tmp/testOperator.jar"); operator.createNewFile(); Long operatorId = IdGenerator.getInstance().nextId();  localStorageManager.uploadOperator(operatorId, "/tmp/testOperator.jar");  //verify File updatedOperator = new File("/tmp/operators/" + operatorId + "/testOperator.jar"); "<AssertPlaceHolder>"; operator.delete(); }
[*] target: assertTrue(updatedOperator.exists())
[-] pred: org. junit. Assert. assertTrue ( updatedOperator. exists ( ) )
************************************
[+] input: shouldGetAndSetRequiredActions() { var user = new LegacyUser(); var expectedValue = singletonList("value1"); user.setRequiredActions(expectedValue); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, user.getRequiredActions())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getRequiredActions() )
************************************
[+] input: test2() { Solution solution = new Solution(); String[] words = { "Science", "is", "what", "we", "understand", "well", "enough", "to", "explain", "to", "a", "computer.", "Art", "is", "everything", "else", "we", "do"};  List<String> expected = List.of( "Science  is  what we", "understand      well", "enough to explain to", "a  computer.  Art is", "everything  else  we", "do                  " ); List<String> actual = solution.fullJustify(words, 20); "<AssertPlaceHolder>";  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: checkEqualsAddress_true_city_null() {  //Arrange String streetA = "rua da alegria"; String doorNumberA = "1"; String postCodeA = "4000"; String cityA = ""; String countryA = "Portugal";  String streetB = "rua da alegria"; String doorNumberB = "1"; String postCodeB = "4000"; String cityB = ""; String countryB = "Portugal";   //Act  Address addressA = Address.createAddress(streetA, doorNumberA, postCodeA, cityA, countryA); Address addressB = Address.createAddress(streetB, doorNumberB, postCodeB, cityB, countryB); addressA.setCity(null); addressB.setCity(null);   //Assert  "<AssertPlaceHolder>";  }
[*] target: assertEquals(addressA, addressB)
[-] pred: org. junit. Assert. assertEquals ( addressA, addressB )
************************************
[+] input: GestaltException { BlobConfigSourceBuilder builder = BlobConfigSourceBuilder.builder() .setBlobClient(blobClient) .setBlobName("testBlob.properties") .setContainerName("testContainer");  when(blobClient.getBlobName()).thenReturn("testBlob.properties");   ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  BlobConfigSource blobConfigSource = (BlobConfigSource) configSourcePackage.getConfigSource(); assertTrue(blobConfigSource.hasStream()); assertEquals("properties", blobConfigSource.format()); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
[+] input: serializeEmptyData() { byte[] actual = testSubject.serialize("test-topic", Collections.emptySet());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, actual.length)
[-] pred: org. junit. Assert. assertEquals ( 0, actual. length )
************************************
[+] input: testContrainsNoProperty() { // given final PropertyValueConvertableConstraint<Integer> constraint = new PropertyValueConvertableConstraint<>(); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = false; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
[+] input: testDoVolatilityAssert_aboveUpperLimit() { AbsoluteAssertion absoluteAssertion = MockAbsoluteAssertionFactory.create("10", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "200"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean validateResult = absoluteAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
[*] target: assertFalse(validateResult)
[-] pred: org. junit. Assert. assertFalse ( validateResult )
************************************
[+] input: testEmpty() { final FilteredStreamRulePredicate p = FilteredStreamRulePredicate.empty(); assertEquals("", p.toString()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(p.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( p. isEmpty() )
************************************
[+] input: getAllCycles_expectedNoCycles() { Collection<Cycle> expectedCycles = new ArrayList<>(); when(cycleRepository.findAll()).thenReturn(new ArrayList<>());  Collection<Cycle> actualCycles = cycleService.getAllCycles();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCycles, actualCycles)
[-] pred: org. junit. Assert. assertEquals ( expectedCycles, actualCycles )
************************************
[+] input: resolveNull() { // given Cluster cluster = new Cluster("test-cluster", "https://kubernetes.default.svc"); cluster.setHost("minikube.host"); Environment environment = new Environment("dev", "development"); cluster.addEnvironment(environment); Release release = new Release("release1"); EnvironmentRelease environmentRelease = new EnvironmentRelease(environment, release); Application application = new Application("app1"); String routeHostname = null;  // when String resolvedRouteHostname = resolver.resolve(environmentRelease, application, routeHostname);  // then "<AssertPlaceHolder>"; }
[*] target: assertNull(resolvedRouteHostname)
[-] pred: org. junit. Assert. assertNull ( resolvedRouteHostname )
************************************
[+] input: IOException { /* ARRANGE */ final var request = new MockHttpServletRequest(); request.setContent("HELLO".getBytes(StandardCharsets.UTF_8)); request.setCharacterEncoding(String.valueOf(Charset.defaultCharset())); final var wrapper = new RequestWrapper(request); wrapper.getRequestBody();  final var reader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream( "HELLO".getBytes(StandardCharsets.UTF_8))));  /* ACT && ASSERT */ final var result = wrapper.getReader();  while (true) { final var x = result.read(); final var y = reader.read(); "<AssertPlaceHolder>"; if (x == -1 || y == -1) { break; } } }
[*] target: assertEquals(x, y)
[-] pred: org. junit. Assert. assertEquals ( x, y )
************************************
[+] input: get_genericEndpoint_returnGenericEndpoint() { /* ARRANGE */ final var uuid = UUID.randomUUID();  Mockito.doReturn(new GenericEndpoint()).when(generic).get(uuid);  /* ACT */ final var result = serviceProxy.get(uuid);  /* ASSERT */ "<AssertPlaceHolder>"; assertTrue(result instanceof GenericEndpoint); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: InterruptedException { final NetOptions options = new NetOptions(); options.setSoBacklog(10); options.setReuseAddress(false); options.setSoKeepalive(true); options.setTcpNoDelay(true); options.setSoRcvbuf(100); options.setSoSendbuf(100); options.setSoLinger(1); options.setOptions(Collections.singletonMap(ChannelOption.AUTO_READ, false)); final CountDownLatch latch = new CountDownLatch(1); final AtomicReference<Channel> ch = new AtomicReference<>(); final EventLoopGroup group = new NioEventLoopGroup(1); try { ServerBootstrap sb = new ServerBootstrap(); NioTransport.INSTANCE.applyOptions(sb, options, new LocalAddress("foo")); sb.channel(NioServerSocketChannel.class) .group(group) .childHandler(new ChannelInboundHandlerAdapter()) .handler(new ChannelHandlerAdapter() { @Override public void handlerAdded(ChannelHandlerContext ctx) { ch.set(ctx.channel()); latch.countDown(); } }); sb.register().syncUninterruptibly(); latch.await(); final Channel channel = ch.get(); "<AssertPlaceHolder>";  assertEquals(10, channel.config().getOption(ChannelOption.SO_BACKLOG)); assertFalse(channel.config().getOption(ChannelOption.SO_REUSEADDR)); assertFalse(channel.config().getOption(ChannelOption.AUTO_READ)); } finally { group.shutdownGracefully(); } }
[*] target: assertNotNull(channel)
[-] pred: org. junit. Assert. assertNotNull ( channel )
************************************
[+] input: test6() { int[] arrInitial = {1, 2, 3, 4, 5}; int[] arrExpected = {1, 2, 4, 5}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCenterHeadingEvenText2() { String actual = SerialiserFlavorBase.createCenteredHeading("Keystrokes", '#', 51); String expected = "#################### Keystrokes ###################"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/ElastiCacheSubnetGroup.cmd")); String actual = exportElastiCacheSubnetGroups.getTFImport(getAwsCacheSubnetGroups()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: deleteById() { BookDO bookDO = new BookDO(); bookDO.setTitle(title); bookDO.setAuthor(author); bookDO.setImage(image); bookDO.setSummary(summary); bookMapper.insert(bookDO);  bookService.deleteById(bookDO.getId()); BookDO hit = bookService.getById(bookDO.getId()); "<AssertPlaceHolder>"; }
[*] target: assertNull(hit)
[-] pred: org. junit. Assert. assertNull ( hit )
************************************
[+] input: findMemberDocumentNoDocumentPresent() { // given HouseMember testMember = new HouseMember(MEMBER_ID, null, MEMBER_NAME, null); given(houseMemberRepository.findByMemberId(MEMBER_ID)) .willReturn(Optional.of(testMember)); // when Optional<HouseMemberDocument> houseMemberDocument = houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID);  // then "<AssertPlaceHolder>"; verify(houseMemberRepository).findByMemberId(MEMBER_ID); }
[*] target: assertFalse(houseMemberDocument.isPresent())
[-] pred: org. junit. Assert. assertFalse ( houseMemberDocument. isPresent ( ) )
************************************
[+] input: Exception {  final String expected = "üöä ÜÖÄ ß";  final File file = new File(BASE_DIR, "file_with_german_umlaut.txt");  FileUtil.writeString(file, expected, StandardCharsets.UTF_8);  final String actual = PathUtil.readString(file.toPath());  // asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { List<RecordedFrame> stack = new ArrayList<>(); for (int i = 0; i < 500; i++) { var method = buildMethod("Act", "io" + i, ""); stack.add(buildFrame(method, 21 + i, 77 + i)); }  String payloads = IntStream.range(0, 55) .mapToObj( i -> "{"desc":"Act.io" + i + "","line":"" + (21 + i) + "","bytecodeIndex":"" + (77 + i) + ""}") .collect(Collectors.joining(",")); var expected = "{"type":"stacktrace","language":"java","version":1,"truncated":true,"payload":[" + payloads + "]}"; var result = MethodSupport.jsonWrite(stack, Optional.empty()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testSetupEmptyCredentialsGraphCreateDefaultUser() { final String defaultUser = "user"; final String defaultPassword = "pass"; final Map<String, Object> configMap = configBuilder().defaultUser(defaultUser).defaultPassword(defaultPassword).create(); final JanusGraph graph = StorageSetup.getInMemoryGraph(); final JanusGraphAbstractAuthenticator authenticator = createInitializedAuthenticator(configMap, graph);  authenticator.setup(configMap);  CredentialTraversalSource credentialSource = graph.traversal(CredentialTraversalSource.class); List<Vertex> users = credentialSource.users(defaultUser).toList(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, users.size())
[-] pred: org. junit. Assert. assertEquals ( 1, users. size ( ) )
************************************
[+] input: test_5_getMonitorCalledWithMultipleNodesInKeys() { final Set<String> nodeKeys = new HashSet<>(); nodeKeys.add("nodeOne.domain"); nodeKeys.add("nodeTwo.domain");  final Set<String> nodeKeysTwo = new HashSet<>(); nodeKeysTwo.add("nodeTwo.domain");  final IMonitor monitorOne = monitorService.getMonitor(nodeKeys, info, propertySet); assertNotNull(monitorOne);  // Should get the same monitor as before as contain the same key "nodeTwo.domain" final IMonitor monitorOneSame = monitorService.getMonitor(nodeKeysTwo, info, propertySet); "<AssertPlaceHolder>"; assertEquals(monitorOne, monitorOneSame);  // Make sure createMonitor was called once verify(monitorInitializer).createMonitor( eq(info), eq(propertySet), eq(monitorService)); }
[*] target: assertNotNull(monitorOneSame)
[-] pred: org. junit. Assert. assertNotNull ( monitorOneSame )
************************************
[+] input: toArgs_inputSetAuth_ArgsSetAuthField() { /* ARRANGE */ final var params = Map.of("A", "AV", "B", "BV"); final var headers = Map.of("C", "CV", "D", "DV"); final var authType = new BasicAuth("X", "Y"); final var auth = new ArrayList<Authentication>();  auth.add(authType);  final var input = new QueryInput(); input.setParams(params); input.setHeaders(headers);  final var expected = new HttpService.HttpArgs(); expected.setParams(params); expected.setHeaders(headers); authType.setAuth(expected);  /* ACT */ final var result = service.toArgs(input, auth);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: modularMultiply() { int[] a = {1, 2, 3}; int[] b = {4, 5, 6}; int[] actual = FastFourierTransform.modularMultiply(a, b); int[] expected = {4, 13, 28, 27, 18}; Assertions."<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expected, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expected, actual )
************************************
[+] input: DbxException { // given DropboxClient testee = spy(new DropboxClient(dropboxService)); File nonExistingFile = new File("thisFileDoesNotExist.txt");  // when boolean result = testee.upload(nonExistingFile);  // then verifyNoInteractions(dropboxService); verify(testee, never()).doesFileExist(anyString()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testCreateNewNettyInternalThread() { InternalThread t = InternalThreads.newThread(); assertTrue(t instanceof NettyInternalThread); assertThreadInfo(t, null, null);  final AtomicBoolean b = new AtomicBoolean(); t = InternalThreads.newThread(() -> b.set(true)); assertThreadInfo(t, null, null); t.thread().run(); assertTrue(b.get()); b.set(false);  final ThreadGroup group = new ThreadGroup("foo"); t = InternalThreads.newThread(group, () -> b.set(true)); assertThreadInfo(t, group, null); t.thread().run(); assertTrue(b.get()); b.set(false);  assertThreadInfo(InternalThreads.newThread("foo"), null, "foo"); assertThreadInfo(InternalThreads.newThread(group, "foo"), group, "foo");  t = InternalThreads.newThread(() -> b.set(true), "foo"); assertThreadInfo(t, null, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = InternalThreads.newThread(group, () -> b.set(true), "foo"); assertThreadInfo(t, group, "foo"); t.thread().run(); assertTrue(b.get()); b.set(false);  t = InternalThreads.newThread(group, () -> b.set(true), "foo", 8); assertThreadInfo(t, group, "foo"); t.thread().run(); "<AssertPlaceHolder>"; b.set(false); }
[*] target: assertTrue(b.get())
[-] pred: org. junit. Assert. assertTrue ( b. get ( ) )
************************************
[+] input: IOException { final Res res = new Res(); final File file = File.createTempFile("httpserver-", ".tmp"); file.deleteOnExit(); assertTrue(res.end(new byte[1]).isSuccess()); try { assertThrows(IllegalStateException.class, () -> res.sendFile(file, 0L, 1L)); } finally { file.delete(); }  assertTrue(res.isCommitted()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(res.isEnded())
[-] pred: org. junit. Assert. assertTrue ( res. isEnded() )
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenExistButNotMatchedPageLinkHeader() { HttpHeaders httpHeaders = buildHttpHeaders(NONE_PAGE_HEADER); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder().jobs(List.of(testJob)).build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, httpHeaders, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(1); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
[+] input: testApply() { var threadName = "santiago"; var threadState = "almost_asleep"; var stackTrace = "{"type":"stacktrace","language":"java","version":1,"truncated":false,"payload":[]}"; var startTime = Instant.now(); var expectedAttrs = new Attributes() .put(THREAD_NAME, threadName) .put(THREAD_STATE, threadState) .put(STACK_TRACE, stackTrace); var expectedEvent = new Event(JFR_METHOD_SAMPLE, expectedAttrs, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class); var stack = mock(RecordedStackTrace.class); var sampledThread = mock(RecordedThread.class);  when(stack.getFrames()).thenReturn(List.of()); when(event.getStartTime()).thenReturn(startTime); when(event.getStackTrace()).thenReturn(stack); when(event.getThread(SAMPLED_THREAD)).thenReturn(sampledThread); when(event.getString(STATE)).thenReturn(threadState); when(sampledThread.getJavaName()).thenReturn(threadName);  var mapper = MethodSampleMapper.forExecutionSample();  var result = mapper.apply(event); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testEqualsAndHashCode() { MultiLabel a = new MultiLabelFactory().generateOutput("a"); MultiLabel b = new MultiLabelFactory().generateOutput("a"); assertEquals(a, b); "<AssertPlaceHolder>"; }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode(), b. hashCode() )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/EksCluster.cmd")); String actual = exportEksClusters.getTFImport(getAwsEksClusters()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: removeAdminFromCommunityNotExists() { // given given(communityRepository.findByCommunityIdWithAdmins(TEST_COMMUNITY_ID)) .willReturn(Optional.empty());  // when boolean adminRemoved = communitySDJpaService.removeAdminFromCommunity(TEST_COMMUNITY_ID, TEST_ADMIN_ID);  // then "<AssertPlaceHolder>"; verify(communityRepository).findByCommunityIdWithAdmins(TEST_COMMUNITY_ID); verify(communityRepository, never()).save(any()); }
[*] target: assertFalse(adminRemoved)
[-] pred: org. junit. Assert. assertFalse ( adminRemoved )
************************************
[+] input: testCenterHeadingEvenText() { String actual = SerialiserFlavorBase.createCenteredHeading("TASfiles", '#', 51); String expected = "##################### TASfiles ####################"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testToDateStringNow() { long now = System.currentTimeMillis() / 1000L; String expected = new Date(now * 1000L).toString(); String actual = SftpATTRS.toDateString(now); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("\thttps://example.com").context(JsonDocument.of(MediaType.JSON, new InputStreamReader(new ByteArrayInputStream(JsonValue.EMPTY_JSON_OBJECT.toString().getBytes())))).loader(MOCK_LOADER).ordered().get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
[+] input: testCustomLinks() { List<CustomLinkConfig> links = testController.getCustomLinks(); "<AssertPlaceHolder>";  for (CustomLinkConfig link : links) { assertNotNull(link.getId());  assertNotNull(link.getHref()); assertFalse(link.getHref().isBlank());  assertNotNull(link.getLabel()); assertFalse(link.getLabel().isBlank());  assertNotNull(link.getLinkType()); } }
[*] target: assertNotNull(links)
[-] pred: org. junit. Assert. assertNotNull ( links )
************************************
[+] input: deleteGroup() { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  boolean ok = adminService.deleteGroup(group.getId()); "<AssertPlaceHolder>"; GroupDO selected = groupMapper.selectById(group.getId()); assertNull(selected); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
[+] input: Exception { final Method method = Object.class.getMethod("hashCode");  final boolean actual = ClassUtil.isUserDefinedMethod(method);  // asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
[+] input: testDoVolatilityAssert_increase() { FallAssertion fallAssertion = MockFallAssertionFactory.create("0", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "200"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = fallAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
[+] input: testGetDestinationDefault() { String expected = ""; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getDestination())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDestination() )
************************************
[+] input: testRegisterFlight() { boolean registered = flightService.registerFlight("PR344");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(registered)
[-] pred: org. junit. Assert. assertTrue ( registered )
************************************
[+] input: Exception { HashCodeHasher hasher = new HashCodeHasher("abcdefghi"); HasherProto hasherProto = hasher.serialize(); assertEquals(0, hasherProto.getVersion()); assertEquals("org.tribuo.hash.HashCodeHasher", hasherProto.getClassName());  HashCodeHasher hasherD = ProtoUtil.deserialize(hasherProto); hasherD.setSalt("abcdefghi"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(hasher, hasherD)
[-] pred: org. junit. Assert. assertEquals ( hasher, hasherD )
************************************
[+] input: roundTripWithQuotedComponentWithSingleQuote() { final String expression = "'Someone\'s CodeSystem'|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("Someone's CodeSystem", literalValue.getSystem()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
[+] input: IOException { Document fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6_frag.json"); Document toDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc.merge(fromDoc, null); String expected = getCompressedJson("/jdocs/sample_6_1_expected.json"); String actual = toDoc.getJson(); assertEquals(expected, actual);  fromDoc = getTypedDocument("sample_9_model", "/jdocs/sample_9_frag.json"); toDoc = getTypedDocument("sample_9_model", "/jdocs/sample_9.json"); toDoc.merge(fromDoc, null); expected = getCompressedJson("/jdocs/sample_9_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // this tests the merging of value arrays fromDoc = getTypedDocument("sample_10_model", "/jdocs/sample_10_frag.json"); toDoc = getTypedDocument("sample_10_model", "/jdocs/sample_10.json"); toDoc.merge(fromDoc, null); expected = getCompressedJson("/jdocs/sample_10_expected.json"); actual = toDoc.getJson(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getResourceMaps() { List<AWSRdsSubnetGroup> awsRdsSubnetGroup = getAwsRdsSubnetGroups();  Maps<Resource> resourceMaps = exportRdsSubnetGroups.getResourceMaps(awsRdsSubnetGroup); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/RdsSubnetGroup.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-instance-name.XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: it_recognizes_non_batch_file_io_statement() { CobolLine line = new CobolLine("       5200-PREPARE-OUTPUT-RECORD.", tokenExtractor);  boolean isBatchFileIOStatement = Interpreter.checkForBatchFileIOStatement(line);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(isBatchFileIOStatement)
[-] pred: org. junit. Assert. assertFalse ( isBatchFileIOStatement )
************************************
[+] input: default_isNull_returnsListElementAsDefault() { var defaultEmail = "test@fake.com";  var sut = new PatientEmailsHolder(null, List.of(defaultEmail));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(defaultEmail, sut.getDefault())
[-] pred: org. junit. Assert. assertEquals ( defaultEmail, sut. getDefault() )
************************************
[+] input: testStorageTemplateDataOnStatefulCQRSModel() { final List<TemplateData> allTemplatesData = StorageTemplateDataFactory.build("io.vlingo.xoomapp", "xoomapp", contents(), StorageType.STATE_STORE, databaseTypesForCQRS(), ProjectionType.NONE, false, true);  //General Assert  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).count()); Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).count());  //Assert for StateAdapter  final TemplateData stateAdapterTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).findFirst().get();  final TemplateParameters stateAdapterConfigurationParameters = stateAdapterTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, stateAdapterConfigurationParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals("BookState", stateAdapterConfigurationParameters.find(TemplateParameter.SOURCE_NAME)); Assertions.assertEquals(StorageType.STATE_STORE, stateAdapterConfigurationParameters.find(TemplateParameter.STORAGE_TYPE)); Assertions.assertEquals(1, stateAdapterConfigurationParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(stateAdapterConfigurationParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookStateAdapter", stateAdapterTemplateData.filename());  //Assert for StoreProvider  final List<TemplateData> storeProviders = allTemplatesData.stream() .filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)) .collect(Collectors.toList());  IntStream.range(0, 1).forEach(modelClassificationIndex -> { final TemplateData storeProviderTemplateData = storeProviders.get(modelClassificationIndex); final Model model = modelClassificationIndex == 0 ? Model.COMMAND : Model.QUERY; final TemplateParameters storeProviderParameters = storeProviderTemplateData.parameters(); final int expectedImports = modelClassificationIndex == 0 ? 2 : 1; Assertions.assertEquals(EXPECTED_PACKAGE, storeProviderParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals(model, storeProviderParameters.find(TemplateParameter.MODEL)); Assertions.assertEquals(model.title + "StateStoreProvider", storeProviderParameters.find(TemplateParameter.STORE_PROVIDER_NAME)); Assertions.assertEquals(expectedImports, storeProviderParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.author.AuthorState")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookState")); Assertions.assertEquals("BookState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getSourceClass()); Assertions.assertEquals("BookStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getAdapterClass()); Assertions.assertEquals("AuthorState", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getSourceClass()); Assertions.assertEquals("AuthorStateAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getAdapterClass()); Assertions.assertEquals(model.title  + "StateStoreProvider", storeProviderTemplateData.filename()); }); }
[*] target: assertEquals(9, allTemplatesData.size())
[-] pred: org. junit. Assert. assertEquals ( 9, allTemplatesData. size ( ) )
************************************
[+] input: generateForCompany_ShouldReturnListWithOkrMasterAndOkrSponsorAndOkrMembers() { when(companyService.findById(companyId)).thenReturn(okrCompany); when(userService.findById(guidUser1)).thenReturn(Optional.of(user1)); when(userService.findById(guidUser2)).thenReturn(Optional.of(user2)); when(userService.findById(guidUser3)).thenReturn(Optional.of(user3)); when(messages.get("okrmaster")).thenReturn("OKR Master"); when(messages.get("topicsponsor")).thenReturn("Topic sponsor"); when(messages.get("teammember")).thenReturn("Team member");  okrCompany.setOkrChildUnits(Collections.singletonList(okrDepartment)); okrDepartment.setParentOkrUnit(okrCompany); okrDepartment.setOkrMasterId(guidUser1); okrDepartment.setOkrTopicSponsorId(guidUser2); okrDepartment.setOkrMemberIds(Collections.singletonList(guidUser3));  Collection<TeamMemberRow> rows = teamMemberRowBuilderService.generateForCompany(companyId);  "<AssertPlaceHolder>";  assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[0]).getTeamName()); assertEquals("OKR Master", ((TeamMemberRow) rows.toArray()[0]).getRole()); assertEquals( user1.getGivenName() + " " + user1.getSurname(), ((TeamMemberRow) rows.toArray()[0]).getFullName() ); assertEquals(user1.getMail(), ((TeamMemberRow) rows.toArray()[0]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[1]).getTeamName()); assertEquals("Topic sponsor", ((TeamMemberRow) rows.toArray()[1]).getRole()); assertEquals( user2.getGivenName() + " " + user2.getSurname(), ((TeamMemberRow) rows.toArray()[1]).getFullName() ); assertEquals(user2.getMail(), ((TeamMemberRow) rows.toArray()[1]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[2]).getTeamName()); assertEquals("Team member", ((TeamMemberRow) rows.toArray()[2]).getRole()); assertEquals( user3.getGivenName() + " " + user3.getSurname(), ((TeamMemberRow) rows.toArray()[2]).getFullName() ); assertEquals(user3.getMail(), ((TeamMemberRow) rows.toArray()[2]).getEmailAddress());  verify(companyService, times(1)).findById(companyId); verify(userService, times(1)).findById(guidUser1); verify(userService, times(1)).findById(guidUser2); verify(userService, times(1)).findById(guidUser3); }
[*] target: assertEquals(3, rows.size())
[-] pred: org. junit. Assert. assertEquals ( 3, rows. size ( ) )
************************************
[+] input: updateUserInfo2() { UserDO user = UserDO.builder().nickname("pedro大大").username("pedro大大").build(); GroupDO group1 = GroupDO.builder().name("测试分组12").info("just for test").build(); GroupDO group2 = GroupDO.builder().name("测试分组11").info("just for test").build(); userMapper.insert(user); groupMapper.insert(group1); groupMapper.insert(group2); List<UserGroupDO> relations = new ArrayList<>(); UserGroupDO relation1 = new UserGroupDO(user.getId(), group1.getId()); relations.add(relation1); userGroupMapper.insertBatch(relations);  UpdateUserInfoDTO dto = new UpdateUserInfoDTO(); dto.setGroupIds(Collections.singletonList(group2.getId())); boolean b = adminService.updateUserInfo(user.getId(), dto); "<AssertPlaceHolder>";  QueryWrapper<UserGroupDO> wrapper = new QueryWrapper<>(); wrapper.lambda().eq(UserGroupDO::getUserId, user.getId()) .eq(UserGroupDO::getGroupId, group1.getId()); UserGroupDO rel1 = userGroupMapper.selectOne(wrapper); assertNull(rel1);  QueryWrapper<UserGroupDO> wrapper1 = new QueryWrapper<>(); wrapper1.lambda().eq(UserGroupDO::getUserId, user.getId()) .eq(UserGroupDO::getGroupId, group2.getId()); UserGroupDO rel2 = userGroupMapper.selectOne(wrapper1); assertEquals(rel2.getGroupId(), group2.getId()); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: dataSource() { DataSource dataSource = jdbcSourceConfig.dataSource(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
[+] input: getPersonByEmail_SUCCESS() {  // Arrange String personEmail = "maria@gmail.com"; PersonEmailDTO personEmailDTO = PersonEmailDTOAssembler.createPersonEmailDTO(personEmail); String personName = "Maria Silva"; LocalDate personBirthdate = LocalDate.of(1973, 07, 25); String personBirthplace = "Braga";  // Expected Person DTO Email email = Email.createEmail(personEmail); Name name = Name.createName(personName); Birthdate birthdate = Birthdate.createBirthdate(personBirthdate); Birthplace birthplace = Birthplace.createBirthplace(personBirthplace); PersonID fatherID = null; PersonID motherID = null;  PersonDTO personExpected = PersonDTOAssembler.createDTOFromDomainObject(email, name, birthdate, birthplace, fatherID, motherID);  // Expected Response ResponseEntity<Object> expectedResponse = new ResponseEntity<>(personExpected, HttpStatus.OK);  // Act Mockito.when(service.getPersonByEmail(personEmailDTO)).thenReturn(personExpected); ResponseEntity<Object> person = controller.getPersonByEmail(personEmail);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResponse, person)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, person )
************************************
[+] input: NoSuchAlgorithmException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = new ProtectedMailboxStorageEntry( mailboxStoragePayload, senderKeys.getPublic(), 1, new byte[] { 0 }, receiverKeys.getPublic(), Clock.systemDefaultZone());  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation() )
************************************
[+] input: updateGroup2() { assertThrows(NotFoundException.class, () -> { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组2"); dto.setInfo("测试分组2info"); Random random = new Random(); boolean ok = adminService.updateGroup(random.nextInt(100) + 10, dto); "<AssertPlaceHolder>"; }); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
[+] input: getAtAutoCast_dataFieldExists_returnsInt() { GraphQLResponse response = constructResponse("{ "data": { "field": { "innerField": 42 } } }"); Integer value = response.getAt("field.innerField"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(42, value)
[-] pred: org. junit. Assert. assertEquals ( 42, value )
************************************
[+] input: test1() { String s = "(123)"; List<String> expected = List.of("(1, 23)", "(12, 3)", "(1.2, 3)", "(1, 2.3)"); List<String> actual = new Solution().ambiguousCoordinates(s); List<String> l1 = expected.stream().sorted().collect(Collectors.toList()); List<String> l2 = actual.stream().sorted().collect(Collectors.toList()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(l1, l2)
[-] pred: org. junit. Assert. assertEquals ( l1, l2 )
************************************
[+] input: testSearchExistingFlightByFullNumber() { flightService.registerFlight("OL234"); flightService.registerFlight("KM23234"); flightService.registerFlight("LTE114"); flightService.registerFlight("BRT14");  List<String> foundFlights = flightService.searchFlights("LTE114");  "<AssertPlaceHolder>"; assertEquals("LTE114", foundFlights.get(0)); }
[*] target: assertEquals(1, foundFlights.size())
[-] pred: org. junit. Assert. assertEquals ( 1, foundFlights. size ( ) )
************************************
[+] input: IOException { try (InputStream yamlStream = this.getClass().getResourceAsStream("/AppAnyServices.yml")) { List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream)); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, urls.size()); URL url = urls.get(0); Assertions.assertEquals("127.0.0.1", url.getAddress()); Assertions.assertEquals("*", url.getServiceInterface()); Assertions.assertEquals(6666, url.getParameter(TIMEOUT_KEY, 0)); Assertions.assertEquals("random", url.getParameter(LOADBALANCE_KEY)); Assertions.assertEquals(url.getParameter(APPLICATION_KEY), "demo-consumer"); } }
[*] target: assertNotNull(urls)
[-] pred: org. junit. Assert. assertNotNull ( urls )
************************************
[+] input: GestaltException { sourceBuilder.setSource("abc=def"); ConfigSourcePackage result = sourceBuilder.build(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: IOException { try ( FileInputStream testFis = new FileInputStream("src/codeforces/contest1731/testsE.txt"); Scanner testScanner = new Scanner(testFis); FileInputStream ansFis = new FileInputStream("src/codeforces/contest1731/answersE.txt"); Scanner answerScanner = new Scanner(ansFis); ) { while (testScanner.hasNextLine()) { int n = testScanner.nextInt(); long m = testScanner.nextLong(); long expected = answerScanner.nextLong(); long actual = ProblemE.solve(n, m); if (expected != actual) System.out.println(n + " " + m); "<AssertPlaceHolder>"; } } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: createFrom3ByteBgr() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_3BYTE_BGR); final byte[] data = PngEncoderBufferedImageConverter.getDataBufferByte(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFrom3ByteBgr(data, width, height); "<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: testInvalid() { // given final PropertyExistsConstraint<String> constraint = new PropertyExistsConstraint<>(); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertFalse(configViolation.propertyExists()); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
[+] input: getResourceMaps() { // given List<AWSVpc> vpcs = getAwsVpcs();  Maps<Resource> resourceMaps = exportvpcs.getResourceMaps(vpcs); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Vpc.tf")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetMaxSizeDefault() { String expected = "0"; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getMaxSize())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getMaxSize() )
************************************
[+] input: testGetDiskDefault() { String expected = "false"; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getDisk())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDisk() )
************************************
[+] input: extractHeaderFromMultipartMessage_mapWithoutHeaderValue_returnNull() { /* ARRANGE */ final var response = new HashMap<String, String>(); response.put("payload", "some payload values");  /* ACT */ final var result = MessageUtils.extractHeaderFromMultipartMessage(response);  /* ACT & ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: test4() { int[] pre = {1, 2, 4, 5, 3, 6, 7}; int[] post = {4, 5, 2, 6, 7, 3, 1}; TreeNode root = new Solution().constructFromPrePost(pre, post); "<AssertPlaceHolder>"; assertEquals(1, root.val);  assertNotNull(root.left); assertEquals(2, root.left.val); assertNotNull(root.right); assertEquals(3, root.right.val);  assertNotNull(root.left.left); assertEquals(4, root.left.left.val); assertNotNull(root.left.right); assertEquals(5, root.left.right.val); assertNotNull(root.right.left); assertEquals(6, root.right.left.val); assertNotNull(root.right.right); assertEquals(7, root.right.right.val); }
[*] target: assertNotNull(root)
[-] pred: org. junit. Assert. assertNotNull ( root )
************************************
[+] input: shouldApply() { String userId = "userId123"; String resultMessage = "Success"; when(userInteractionService.getCurrentTracksMessage(userId)).thenReturn(resultMessage); String response = trackUrlPrinterCommand.apply(userId); "<AssertPlaceHolder>"; }
[*] target: assertEquals(resultMessage, response)
[-] pred: org. junit. Assert. assertEquals ( resultMessage, response )
************************************
[+] input: removeTaskNotifyConfigByWorkflowTaskId() { // 1. Prepare TaskNotifyConfig config = MockTaskNotifyConfigFactory.mockWithoutId(); TaskNotifyConfig persistedConfig = taskNotifyConfigDao.create(config);  // 2. Process boolean removeExistingResult = taskNotifyConfigService.removeTaskNotifyConfigByWorkflowTaskId(persistedConfig.getWorkflowTaskId()); boolean removeNotFoundResult = taskNotifyConfigService.removeTaskNotifyConfigByWorkflowTaskId(1234L);  // 3. Validate "<AssertPlaceHolder>"; assertFalse(removeNotFoundResult); }
[*] target: assertTrue(removeExistingResult)
[-] pred: org. junit. Assert. assertTrue ( removeExistingResult )
************************************
[+] input: testEnforced03() { // given ConfigService configService = awsservice.getExtension(ConfigService.class); Long contentLength = Long.valueOf("10"); String siteId = UUID.randomUUID().toString();  DynamicObject ob = configService.get(siteId); ob.put(ConfigService.MAX_DOCUMENT_SIZE_BYTES, "10"); configService.save(siteId, ob);  // when String value = service.getValue(awsservice, siteId); boolean result = service.enforced(awsservice, siteId, value, contentLength);  // then "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testWriteTyped() { Document d = getTypedDocument("sample_7_model", null);  d.setString("$.id", "id"); d.setString("$.info.iid", "iid"); d.setString("$.members[0].first_name", "Deepak"); d.setInteger("$.members[0].age", 48); d.setString("$.members[type=basic].first_name", "Deepak"); d.setString("$.members[type=basic].last_name", "Arora"); d.setString("$.members[type=basic].phones[type=home].type", "Home"); d.setString("$.members[0].phones[type=Home].number", "11111111111"); d.setString("$.info.iid", "12345678"); d.setLong("$.members[0].index", 0); d.setBoolean("$.members[0].phones[type=Home].is_primary", true); d.setString("$.members[type=supp].first_name", "Nitika");  String expected = getCompressedJson("/jdocs/sample_7_expected.json"); String actual = d.getJson(); "<AssertPlaceHolder>";  // exception scenarios UnifyException e = assertThrows(UnifyException.class, () -> { d.setString("$.addresses[4].line_1", "line 1"); }); assertEquals("jdoc_err_38", e.getErrorCode()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { File dir = tempFolder.newFolder("xyz"); dir.delete(); String path = "file://" + dir.getPath() + "/1/2"; Resource resource = resourceLoader.getResource(path, true); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(resource)
[-] pred: org. junit. Assert. assertNotNull ( resource )
************************************
[+] input: getSettingTest() { Settings settings = provider.getSettings(context.request(), "some"); "<AssertPlaceHolder>"; assertEquals("linkTag", settings.getEmbedType()); assertEquals("https://use.typekit.net", settings.getUrl()); assertEquals("foo", settings.getId()); }
[*] target: assertNotNull(settings)
[-] pred: org. junit. Assert. assertNotNull ( settings )
************************************
[+] input: testCenterHeadingOdd() { String actual = SerialiserFlavorBase.createCenteredHeading("TASfile", '#', 51); String expected = "##################### TASfile #####################"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = SubscriptionController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = subscriptionViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: test3() { int[] arrInitial = {1, 2}; int[] arrExpected = {1}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getResourceMaps() { List<AWSEksCluster> awsEksClusters = getAwsEksClusters();  Maps<Resource> resourceMaps = exportEksClusters.getResourceMaps(awsEksClusters); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/EksCluster.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithMuchOfOne() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft2 = new OkrTopicDraft(); okrTopicDraft2.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft3 = new OkrTopicDraft(); okrTopicDraft3.setCurrentStatus(OkrTopicDraftStatusEnum.draft); OkrTopicDraft okrTopicDraft4 = new OkrTopicDraft(); okrTopicDraft4.setCurrentStatus(OkrTopicDraftStatusEnum.submitted);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1, okrTopicDraft2, okrTopicDraft3, okrTopicDraft4));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(3, result.getSeries()[0]); assertEquals(1, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/test.pdf");  String site = siteId != null ? siteId + "/" : "";  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 1; "<AssertPlaceHolder>";  Map<String, AttributeValue> map = indexes.get(0); assertFalse(dbService.exists(map.get(PK), map.get(SK))); verifyIndex(map, site + "global#folders#", "fi#test.pdf", "test.pdf", false); } }
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
[+] input: checkEqualsAddress_true_country_null() {  //Arrange String streetA = "rua da alegria"; String doorNumberA = "1"; String postCodeA = "4000"; String cityA = "Porto"; String countryA = "";  String streetB = "rua da alegria"; String doorNumberB = "1"; String postCodeB = "4000"; String cityB = "Porto"; String countryB = "";   //Act  Address addressA = Address.createAddress(streetA, doorNumberA, postCodeA, cityA, countryA); Address addressB = Address.createAddress(streetB, doorNumberB, postCodeB, cityB, countryB); addressA.setCountry(null); addressB.setCountry(null);   //Assert  "<AssertPlaceHolder>";  }
[*] target: assertEquals(addressA, addressB)
[-] pred: org. junit. Assert. assertEquals ( addressA, addressB )
************************************
[+] input: getResourceMaps() { Maps<Resource> resourceMaps = exportVpcEndpoints.getResourceMaps(getVpcEndpoints()); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/VpcEndpoint.tf")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: should_result_false_when_file_version_is_not_greater() {  final Path file = Path.of("v0002_my-migration.yml");  boolean actual = MigrationLoader.greater(file, "v0002");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: getLoginUserTestWithFail() {  UserIdAndPassword userIdAndPassword = new UserIdAndPassword("test2", "5678");  when(userMapper.getPassword(userIdAndPassword.getUserId())).thenReturn(null);  User loginUser = userService.getLoginUser(userIdAndPassword); "<AssertPlaceHolder>";  verify(userMapper).getPassword("test2"); verify(userMapper, times(0)).getUser("test2"); }
[*] target: assertEquals(null, loginUser)
[-] pred: org. junit. Assert. assertEquals ( null, loginUser )
************************************
[+] input: deserialize() { ResourceSpans resourceSpans = ResourceSpans.newBuilder().setResource(Resource.getDefaultInstance()).build(); ExportTraceServiceRequest request = ExportTraceServiceRequest.newBuilder() .addResourceSpans(resourceSpans) .addResourceSpans(resourceSpans) .build(); byte[] data = request.toByteArray();  ExportTraceServiceRequest actual = testSubject.deserialize("test-topic", data);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(request, actual)
[-] pred: org. junit. Assert. assertEquals ( request, actual )
************************************
[+] input: testNotCancelledAfterSet() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.set(42); "<AssertPlaceHolder>"; }
[*] target: assertFalse(f.isCancelled())
[-] pred: org. junit. Assert. assertFalse ( f. isCancelled() )
************************************
[+] input: serializationTest() { DenseMatrix a = generateA(); TensorProto proto = a.serialize(); Tensor deser = Tensor.deserialize(proto); "<AssertPlaceHolder>"; }
[*] target: assertEquals(a,deser)
[-] pred: org. junit. Assert. assertEquals ( a, deser )
************************************
[+] input: testGetMaxAgeDefault() { String expected = "0"; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getMaxAge())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getMaxAge() )
************************************
[+] input: testEnforced02() { // given ConfigService configService = awsservice.getExtension(ConfigService.class); Long contentLength = null; String siteId = UUID.randomUUID().toString();  DynamicObject ob = configService.get(siteId); ob.put(ConfigService.MAX_DOCUMENT_SIZE_BYTES, "10"); configService.save(siteId, ob);  // when String value = service.getValue(awsservice, siteId); boolean result = service.enforced(awsservice, siteId, value, contentLength);  // then "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: generateForDepartment_ShouldReturnListWithOkrMasterAndOkrSponsorAndOkrMembers() { when(departmentServiceUsers.findById(departmentId)).thenReturn(okrDepartment); when(userService.findById(guidUser1)).thenReturn(Optional.of(user1)); when(userService.findById(guidUser2)).thenReturn(Optional.of(user2)); when(userService.findById(guidUser3)).thenReturn(Optional.of(user3)); when(messages.get("okrmaster")).thenReturn("OKR Master"); when(messages.get("topicsponsor")).thenReturn("Topic sponsor"); when(messages.get("teammember")).thenReturn("Team member");  okrDepartment.setOkrMasterId(guidUser1); okrDepartment.setOkrTopicSponsorId(guidUser2); okrDepartment.setOkrMemberIds(Collections.singletonList(guidUser3));  Collection<TeamMemberRow> rows = teamMemberRowBuilderService.generateForOkrChildUnit(departmentId);  "<AssertPlaceHolder>";  assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[0]).getTeamName()); assertEquals("OKR Master", ((TeamMemberRow) rows.toArray()[0]).getRole()); assertEquals( user1.getGivenName() + " " + user1.getSurname(), ((TeamMemberRow) rows.toArray()[0]).getFullName() ); assertEquals(user1.getMail(), ((TeamMemberRow) rows.toArray()[0]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[1]).getTeamName()); assertEquals("Topic sponsor", ((TeamMemberRow) rows.toArray()[1]).getRole()); assertEquals( user2.getGivenName() + " " + user2.getSurname(), ((TeamMemberRow) rows.toArray()[1]).getFullName() ); assertEquals(user2.getMail(), ((TeamMemberRow) rows.toArray()[1]).getEmailAddress()); assertEquals(okrDepartment.getName(), ((TeamMemberRow) rows.toArray()[2]).getTeamName()); assertEquals("Team member", ((TeamMemberRow) rows.toArray()[2]).getRole()); assertEquals( user3.getGivenName() + " " + user3.getSurname(), ((TeamMemberRow) rows.toArray()[2]).getFullName() ); assertEquals(user3.getMail(), ((TeamMemberRow) rows.toArray()[2]).getEmailAddress());  verify(departmentServiceUsers, times(1)).findById(departmentId); verify(userService, times(1)).findById(guidUser1); verify(userService, times(1)).findById(guidUser2); verify(userService, times(1)).findById(guidUser3); }
[*] target: assertEquals(3, rows.size())
[-] pred: org. junit. Assert. assertEquals ( 3, rows. size ( ) )
************************************
[+] input: confirmAgreement_confirmationSuccessful_returnTrue() { /* ARRANGE */ final var agreement = new Agreement();  when(agreementService.confirmAgreement(agreement)).thenReturn(true);  /* ACT */ final var result = entityUpdateService.confirmAgreement(agreement);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: should_canConvertValue_returnTrue_ifFloatIsZero() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(0));  //then "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: Exception { URL url = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostAddress() + ":2233"); Monitor monitor1 = monitorFactory.getMonitor(url); Monitor monitor2 = monitorFactory.getMonitor(url); if (monitor1 == null || monitor2 == null) { Thread.sleep(2000); monitor1 = monitorFactory.getMonitor(url); monitor2 = monitorFactory.getMonitor(url); } Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(monitor1, monitor2)
[-] pred: org. junit. Assert. assertEquals ( monitor1, monitor2 )
************************************
[+] input: getResourceMaps() { List<AWSRdsClusterParameterGroup> awsRdsClusterParameterGroups = getAwsRdsClusterParameterGroups();  Maps<Resource> resourceMaps = exportRdsClusterParameterGroups.getResourceMaps(awsRdsClusterParameterGroups); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/RdsClusterParameterGroup.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldProperlySendStatDTO() { //given Mockito.when(telegramUserService.findAllInActiveUsers()).thenReturn(singletonList(new TelegramUser())); TelegramUser activeUser = new TelegramUser(); activeUser.setGroupSubs(singletonList(new GroupSub())); Mockito.when(telegramUserService.findAllActiveUsers()).thenReturn(singletonList(activeUser)); GroupSub groupSub = new GroupSub(); groupSub.setTitle("group"); groupSub.setId(1); groupSub.setUsers(singletonList(new TelegramUser())); Mockito.when(groupSubService.findAll()).thenReturn(singletonList(groupSub));  //when StatisticDTO statisticDTO = statisticsService.countBotStatistic();  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, statisticDTO.getActiveUserCount()); Assertions.assertEquals(1, statisticDTO.getInactiveUserCount()); Assertions.assertEquals(1.0, statisticDTO.getAverageGroupCountByUser()); Assertions.assertEquals(singletonList(new GroupStatDTO(groupSub.getId(), groupSub.getTitle(), groupSub.getUsers().size())), statisticDTO.getGroupStatDTOs()); }
[*] target: assertNotNull(statisticDTO)
[-] pred: org. junit. Assert. assertNotNull ( statisticDTO )
************************************
[+] input: toModel_withRequestedResources_returnRepresentationViewWithRequestsLink() { /* ARRANGE */ final var representation = getRepresentationWithRequestedResources();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isEmpty());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isPresent()); assertNotNull(requestsLink.get()); assertEquals(getRepresentationRequestedResourcesLink(representation.getId()), requestsLink.get().getHref()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("[Li+]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(1, atomList.get(0).getCharge()); assertEquals(0, atomList.get(0).getProtonsExplicitlyAddedOrRemoved()); assertEquals(0, atomList.get(0).determineValency(true)); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
[+] input: upgradeJob_shouldUpdateTheOperatorVersionOfTheTargetCluster() { final String expectedOperatorVersion = JobsProperty.OPERATOR_VERSION.getString(); cluster.getMetadata().getAnnotations().put( StackGresContext.VERSION_KEY, PREVIOUS_OPERATOR_VERSION); cluster = kubeDb.addOrReplaceCluster(cluster); kubeDb.watchCluster(clusterName, clusterNamespace, cluster -> { statefulSet.getMetadata().setAnnotations(Map.of( StackGresContext.VERSION_KEY, cluster.getMetadata().getAnnotations().get(StackGresContext.VERSION_KEY))); }); securityUpgradeJob.runJob(dbOps, cluster).await().indefinitely(); var storedClusterVersion = kubeDb.getCluster(clusterName, clusterNamespace) .getMetadata().getAnnotations() .get(StackGresContext.VERSION_KEY); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedOperatorVersion, storedClusterVersion)
[-] pred: org. junit. Assert. assertEquals ( expectedOperatorVersion, storedClusterVersion )
************************************
[+] input: should_result_alternative_config_file() {  var expected = new File("./src/test/resources/.kattlo.yaml"); String[] args = { "--config-file=./src/test/resources/.kattlo.yaml", "--kafka-config-file=./src/test/resources/kafka.properties", "--bootstrap-servers=" + expected, "topic", "--directory=." };  var command = new CommandLine(entry);  command.execute(args);  //assert EntryCommand actualCommand = command.getCommand(); var actual = actualCommand.getConfiguration();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: given_an_available_object_when_couchbase_contains_then_return_false() { //Given IdempotencyKey idempotencyKey = new IdempotencyKey("key"); ExistsResult existsResult = mock(ExistsResult.class); when(existsResult.exists()).thenReturn(false); when(collection.exists(idempotencyKey.getKeyValue())).thenReturn(existsResult);  //When Boolean isContain = couchbaseIdempotentRepository.contains(idempotencyKey);  //Then verify(collection, times(1)).exists(idempotencyKey.getKeyValue()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(isContain)
[-] pred: org. junit. Assert. assertFalse ( isContain )
************************************
[+] input: JsonLdError {  URL fileUrl = getClass().getResource("document.nq");  assertNotNull(fileUrl);  Document document = (new FileLoader()).loadDocument(fileUrl.toURI(), new DocumentLoaderOptions());  "<AssertPlaceHolder>"; assertTrue(MediaType.N_QUADS.match(document.getContentType())); }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
[+] input: testReportSnapshot() { Integer id = this.saveSource();  TaskSnapshotRequest request = new TaskSnapshotRequest(); request.setAgentIp("127.0.0.1"); request.setReportTime(new Date());  TaskSnapshotMessage message = new TaskSnapshotMessage(); message.setJobId(id); message.setSnapshot("{"offset": 100}"); request.setSnapshotList(Collections.singletonList(message));  Boolean result = agentService.reportSnapshot(request); Assertions."<AssertPlaceHolder>";  sourceService.delete(id, GLOBAL_OPERATOR); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testOrderByParserComplexExpressions() { List<Order> orderSpec = new ExprParser("field not in ('a',func('b', 2.0),'c') desc, 1-a->$**[0].*, now () + $.b + c > 2 asc").parseOrderSpec(); "<AssertPlaceHolder>"; Order o1 = orderSpec.get(0); assertTrue(o1.hasDirection()); assertEquals(Order.Direction.DESC, o1.getDirection()); assertEquals("field not in("a", func("b", 2.0), "c")", ExprUnparser.exprToString(o1.getExpr())); Order o2 = orderSpec.get(1); assertFalse(o2.hasDirection()); assertEquals("(1 - a->$**[0].*)", ExprUnparser.exprToString(o2.getExpr())); Order o3 = orderSpec.get(2); assertTrue(o3.hasDirection()); assertEquals(Order.Direction.ASC, o3.getDirection()); assertEquals("(((now() + $.b) + c) > 2)", ExprUnparser.exprToString(o3.getExpr())); }
[*] target: assertEquals(3, orderSpec.size())
[-] pred: org. junit. Assert. assertEquals ( 3, orderSpec. size ( ) )
************************************
[+] input: testLineIntersection4() { double[] p = GeometryTools.lineIntersection(2, -4, 0, 1, -2, 0); "<AssertPlaceHolder>"; }
[*] target: assertNull(p)
[-] pred: org. junit. Assert. assertNull ( p )
************************************
[+] input: testGetRandomMaxFrequencyWithMultipleMaxFrequencies() { MapWithRandomMostFrequentValue<String, String> map = new MapWithRandomMostFrequentValue<>(); map.put("a", "b"); map.put("c", "d"); map.put("e", "b"); map.put("f", "d"); map.put("g", "b"); map.put("h", "d"); map.put("i", "c"); Set<String> expected = Set.of("b", "d"); Set<String> actual = new HashSet<>(); for (int i = 0; i < 100; i++) actual.add(map.getRandomValueWithMaxFrequency()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: protobufTest() { var pnpRes = new PNPResult(); var serializedPNPRes = PNPResult.proto.createMessage(); PNPResult.proto.pack(serializedPNPRes, pnpRes); var unpackedPNPRes = PNPResult.proto.unpack(serializedPNPRes); assertEquals(pnpRes, unpackedPNPRes);  pnpRes = new PNPResult(new Transform3d(1, 2, 3, new Rotation3d(1, 2, 3)), 0.1); serializedPNPRes = PNPResult.proto.createMessage(); PNPResult.proto.pack(serializedPNPRes, pnpRes); unpackedPNPRes = PNPResult.proto.unpack(serializedPNPRes); "<AssertPlaceHolder>"; }
[*] target: assertEquals(pnpRes, unpackedPNPRes)
[-] pred: org. junit. Assert. assertEquals ( pnpRes, unpackedPNPRes )
************************************
[+] input: skipTaskRun_shouldWork() { TaskRun taskRun = mockTaskRun(1l); mockPut("/taskruns/" + taskRun.getId() + "/_skip", "", JSONUtils.toJsonString(true)); Boolean result = (Boolean) wfApi.skipTaskRun(taskRun.getId()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { VerifiableIndyCredential vc = loadAndConvertTo( "files/VCUnsigned.json", VerifiableIndyCredential.class); final VerifiablePresentationBuilder<VerifiableIndyCredential> builder = VerifiablePresentation.builder(); VerifiablePresentation<VerifiableIndyCredential> vp = builder .verifiableCredential(List.of(vc)) .build(); VerifiablePresentation<VerifiableIndyCredential> signed = mgmt.sign(vp).orElseThrow(); assertNotNull(signed.getProof());  Boolean verified = mgmt.verify(id.getVerkey().orElseThrow(), signed); "<AssertPlaceHolder>"; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer,Integer>withFunction(num -> 1) .build();  AtomicReference<Integer> result = stage.execute(new AtomicReference(null));  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, result.get()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: getResourceMaps() { // given List<AWSSecurityGroup> awsSecurityGroups = getAwsSecurityGroups();  Maps<Resource> resourceMaps = exportSecurityGroups.getResourceMaps(awsSecurityGroups); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/SecurityGroup.tf")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testUpdateStatus_createThenUpdate() { // create abnormal dataset AbnormalDataset abnormalDataset = MockAbnormalDatasetFactory.create(); Long datasetGid = IdGenerator.getInstance().nextId(); abnormalDatasetService.create(abnormalDataset, datasetGid);  List<AbnormalDataset> abnormalDatasets = abnormalDatasetRepository.fetchAll(); assertThat(abnormalDatasets.size(), is(1)); TaskRun taskRun = MockTaskRunFactory.create(TaskRunStatus.SUCCESS); boolean result = abnormalDatasetService.updateStatus(abnormalDatasets.get(0).getId(), taskRun); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: NoSuchMethodException { Method method = controller.getDeclaredMethod("primitives", int.class); ParameterDefinition parameter = ParameterDefinition.build(method.getParameters()[0], validatorRegistry);  assertEquals(Integer.class, parameter.getType()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(parameter.isPrimitive())
[-] pred: org. junit. Assert. assertTrue ( parameter. isPrimitive() )
************************************
[+] input: GestaltException { StringConfigSource source = new StringConfigSource("test", "properties");  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, source::loadList); }
[*] target: assertFalse(source.hasList())
[-] pred: org. junit. Assert. assertFalse ( source. hasList() )
************************************
[+] input: NoSuchMethodException { HandlerInvoker invoker = getInvoker("method"); final HandlerMethod handlerMethod = HandlerMethod.of(Subject.class.getDeclaredMethod("method"), SUBJECT); final HttpResponseStatus customResponse = HttpResponseStatus.ACCEPTED; final HandlerImpl handler = new HandlerImpl(handlerMethod, customResponse, invoker); assertEquals(handlerMethod, handler.handler()); "<AssertPlaceHolder>";  }
[*] target: assertEquals(customResponse, handler.customResponse())
[-] pred: org. junit. Assert. assertEquals ( customResponse, handler. customResponse() )
************************************
[+] input: rootsToSearchNone() { var resolution = new EqualTagsWithDefaultTagResolutionStrategy();  var roots = new LinkedHashMap<Tags, ConfigNode>(); var foundNodes = resolution.rootsToSearch(roots, Tags.of());  Assertions.assertEquals(0, foundNodes.size());  // search for dev foundNodes = resolution.rootsToSearch(roots, Tags.environment("dev"));  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, foundNodes.size())
[-] pred: org. junit. Assert. assertEquals ( 0, foundNodes. size ( ) )
************************************
[+] input: test_convert_csv_line_empty() { String[] record = {"1", "", "10", ""}; String expected = ""1","","10",""";  String result = writer.convertToCsvFormat(record); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: Exception { Constructor constructor = ReflectUtils.findConstructor(Foo3.class, Foo2.class); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(constructor)
[-] pred: org. junit. Assert. assertNotNull ( constructor )
************************************
[+] input: testCreateListConvertor() { ConvertorRegister register = ConvertorRegister.instance(); String convertorName = register.createListConvert(Car.class, CarDTO.class);  String convertorNameNew = register.createListConvert(Car.class, CarDTO.class); "<AssertPlaceHolder>"; }
[*] target: assertEquals(convertorName, convertorNameNew)
[-] pred: org. junit. Assert. assertEquals ( convertorName, convertorNameNew )
************************************
[+] input: testFilterAndSort() { final BusinessRule one_v1_0_0 = new BusinessRule(); one_v1_0_0.setVersion("1.0.0"); one_v1_0_0.setIdentifier("one");  final BusinessRule two_v1_0_5 = new BusinessRule(); two_v1_0_5.setVersion("1.0.5"); two_v1_0_5.setIdentifier("two");  final BusinessRule v1_2_0 = new BusinessRule(); v1_2_0.setVersion("1.2.0"); v1_2_0.setIdentifier("one");  final BusinessRule v2_0_42 = new BusinessRule(); v2_0_42.setVersion("2.0.42"); v2_0_42.setIdentifier("one");  final BusinessRule v2_1_1 = new BusinessRule(); v2_1_1.setVersion("2.1.1"); v2_1_1.setIdentifier("one");  final Map<Integer, Collection<BusinessRule>> map = BusinessRule .filterAndSort(List.of(one_v1_0_0, two_v1_0_5, v1_2_0, v2_0_42, v2_1_1)); "<AssertPlaceHolder>"; assertEquals(2, map.get(1).size()); assertEquals(v2_1_1, map.get(2).iterator().next()); }
[*] target: assertEquals(2, map.size())
[-] pred: org. junit. Assert. assertEquals ( 2, map. size ( ) )
************************************
[+] input: test_convert_csv_line_contains_newline() { String[] record = {"1", "promotion!\napple", "10", "9.99"}; String expected = ""1","promotion!\napple","10","9.99"";  String result = writer.convertToCsvFormat(record); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, senderKeys, receiverKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
[+] input: Exception { final File originalPomFile = new File("src/test/resources/revision.and.sha1/original-test-pom.xml"); final String originalPom = readPom(originalPomFile);  final File resultPomFile = new File("src/test/resources/revision.and.sha1/result-test-pom.xml"); final String resultPom = readPom(resultPomFile);  final String modifiedPom = visitor.visit(originalPom, "test-revision", null, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(resultPom, modifiedPom)
[-] pred: org. junit. Assert. assertEquals ( resultPom, modifiedPom )
************************************
[+] input: testIsSameMajorVersionButNewer() { final BusinessRule r1 = new BusinessRule(); r1.setVersion("2.1.0");  final BusinessRule r2 = new BusinessRule(); r2.setVersion("2.1.0");  assertTrue(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("2.1.1"); assertFalse(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("1.1.0"); assertFalse(r1.isSameMajorVersionButNewer(r2));  r2.setVersion("2.0.0"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(r1.isSameMajorVersionButNewer(r2))
[-] pred: org. junit. Assert. assertTrue ( r1. isSameMajorVersionButNewer(r2 ) )
************************************
[+] input: testDoFixValueAssert_notAsExpected() { LessThanOrEqualsAssertion lessThanOrEqualsAssertion = MockLessThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "1");  boolean assertionResult = lessThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
[+] input: test1() { int[] nums = {1, 5, 1, 1, 6, 4}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
[+] input: run_sparksql_ok() { String sqlScript = "create table a as select * from b where bizdate = {{bizdate}}"; operatorRunner.setConfigKey(SparkConfiguration.CONF_SPARK_SQL, sqlScript); operatorRunner.setConfigKey(SparkConfiguration.CONF_VARIABLES,  "{"bizdate":"'2020'"}");  // 1. create session mockPost("/sessions",  null,"{"id":0,"name":null,"appId":null,"owner":null,"proxyUser":null,"state":"starting","kind":"shared","appInfo":{"driverLogUrl":null,"sparkUiUrl":null},"log":["stdout: ","\\nstderr: ","\\nYARN Diagnostics: "]}"); // 2. query session state mockGet("/sessions/0/state", "{"state":"starting"}"); mockGet("/sessions/0/state", "{"state":"idle"}");  // 3. create session statement String evaluatedSQL = "create table a as select * from b where bizdate = '2020'"; String response = String.format(" {"id":0,"code":"%s","state":"available","progress":0.0}", evaluatedSQL); mockPost("/sessions/0/statements", String.format("{"code":"%s","kind":"sql"}", evaluatedSQL), response);  // 4. query statement state response = " {"id":0,"code":"select 1","state":"available","output":{"status":"ok","execution_count":0,"data":{"application/json":{"schema":{"type":"struct","fields":[{"name":"1","type":"integer","nullable":false,"metadata":{}}]},"data":[[1]]}}},"progress":1.0}"; mockGet("/sessions/0/statements/0", response);  // 5. delete session mockDelete("/sessions/0", "{"msg": "deleted"}");  boolean isSuccess = operatorRunner.run(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isSuccess)
[-] pred: org. junit. Assert. assertTrue ( isSuccess )
************************************
[+] input: resetPasswordUserNotExists() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); ; given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.empty());  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
[+] input: testReadNamspaceSingleQuote2() { final String xml = "<message>" + "<AppHdr xmlns='urn:iso:std:iso:20022:tech:xsd:head.001.001.01' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>" + "	<Fr><FIId><FinInstnId><BICFI>BNANAOLUXXX</BICFI></FinInstnId></FIId></Fr>" + "	<To><FIId><FinInstnId><BICFI>CIYUCNBAFUZ</BICFI></FinInstnId></FIId></To>" + "	<BizMsgIdr>asdfsd</BizMsgIdr>" + "	<MsgDefIdr>catm.004.001.02</MsgDefIdr>" + "	<CreDt>2016-09-16T22:34:48Z</CreDt>" + "</AppHdr>" + "<Document xmlns='urn:iso:std:iso:20022:tech:xsd:catm.004.001.02' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>" + "	<TermnlMgmtRjctn>" + "		<Hdr>" + "			<DwnldTrf>false</DwnldTrf>" + "			<FrmtVrsn>asdfsd</FrmtVrsn>" + "			<CreDtTm>2016-09-17T10:55:10</CreDtTm>" + "		</Hdr>" + "		<Rjct>" + "			<RjctRsn>VERS</RjctRsn>" + "		</Rjct>" + "	</TermnlMgmtRjctn>" + "</Document>" + "</message>"; MxCatm00400102 mx = (MxCatm00400102) new MxReadImpl().read(MxCatm00400102.class, xml, MxCatm00400102._classes); "<AssertPlaceHolder>"; assertNotNull(mx.getAppHdr()); assertEquals("BNANAOLUXXX", mx.getAppHdr().from()); assertEquals(RejectReason1Code.VERS, mx.getTermnlMgmtRjctn().getRjct().getRjctRsn()); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
[+] input: shouldStopResultHandler() { try (SqlSession session = sqlMapper.openSession()) { final TestResultStopHandler resultHandler = new TestResultStopHandler(); session.select("org.apache.ibatis.domain.blog.mappers.BlogMapper.selectAllPosts", null, resultHandler); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(2, resultHandler.count)
[-] pred: org. junit. Assert. assertEquals ( 2, resultHandler. count )
************************************
[+] input: testIsComplete() { LocalStatisticsJsonStringObject object = new LocalStatisticsJsonStringObject(); assertFalse(object.isComplete());  object.setSevenDayIncidence1stReportedDaily(42.42); assertFalse(object.isComplete());  object.setSevenDayIncidence1stReportedDaily(null); object.setSevenDayIncidence1stReportedTrend1Percent(42); assertFalse(object.isComplete());  object.setSevenDayIncidence1stReportedDaily(42.42); "<AssertPlaceHolder>"; }
[*] target: assertTrue(object.isComplete())
[-] pred: org. junit. Assert. assertTrue ( object. isComplete() )
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains( "my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com:1234")); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Apigateway.cmd")); String actual = exportApiGatewayAccount.getTFImport(getAwsAccount()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testRoute_HostFilter() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl("host = " + LOCAL_HOST + " => " + " host = " + LOCAL_HOST)); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
[+] input: testGetSubscriptions() { assertNotNull(graphqlController);  String environmentId = "test-env"; TopicMetadata topicMetadata = new TopicMetadata(); topicMetadata.setName("test-topic"); SubscriptionMetadata subscriptionMetadata = new SubscriptionMetadata(); subscriptionMetadata.setId("1"); subscriptionMetadata.setClientApplicationId("client-app"); subscriptionMetadata.setDescription("Deprecation notice");  when(subscriptionService.getSubscriptionsForTopic(environmentId, "test-topic", false)) .thenReturn(List.of(subscriptionMetadata)); List<SubscriptionMetadata> subscriptions = graphqlController.getSubscriptions(environmentId, topicMetadata);  "<AssertPlaceHolder>"; assertEquals(1, subscriptions.size()); assertEquals("1", subscriptions.get(0).getId()); assertEquals("client-app", subscriptions.get(0).getClientApplicationId()); assertEquals("Deprecation notice", subscriptions.get(0).getDescription()); }
[*] target: assertNotNull(subscriptions)
[-] pred: org. junit. Assert. assertNotNull ( subscriptions )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/EgressOnlyInternetGateway.cmd")); String actual = exportEgressOnlyInternetGateways.getTFImport(getAwsEgressOnlyInternetGateways()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenValidLinkHeader() { HttpHeaders httpHeaders = buildHttpHeaders(TOTAL_PAGE_HEADER); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder().jobs(List.of(testJob)).build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, httpHeaders, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(3); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
[+] input: it_recognizes_end_of_statement_when_next_line_is_verb() { CobolLine current = new CobolLine("               WHEN OUTPUT-OK", tokenExtractor); CobolLine next = new CobolLine("                   CONTINUE", tokenExtractor);  boolean isEnd = Interpreter.isEndOfStatement(current, next);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isEnd)
[-] pred: org. junit. Assert. assertTrue ( isEnd )
************************************
[+] input: testAvailability() { int port = NetUtils.getAvailablePort(); MulticastRegistry registry = new MulticastRegistry(URL.valueOf("multicast://224.5.6.8:" + port)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(registry.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( registry. isAvailable() )
************************************
[+] input: sendMessage_protocolIdscp_returnResponseEntityFromErrorRoute() { /* ARRANGE */ final var errorMessage = "Error message."; final var response = new ResponseEntity<Object>(errorMessage, HttpStatus.INTERNAL_SERVER_ERROR);  when(producerTemplate.send(anyString(), any(Exchange.class))).thenReturn(exchange); when(exchange.getIn()).thenReturn(in); when(in.getBody(ResponseEntity.class)).thenReturn(response); when(connectorConfig.isIdscpEnabled()).thenReturn(true);  /* ACT */ final var responseEntity = controller .sendMessage(URI.create("https://recipient.com"), null);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(response, responseEntity)
[-] pred: org. junit. Assert. assertEquals ( response, responseEntity )
************************************
[+] input: checkConstructor() {  //Arrange String street = "rua da saudade"; String doorNumber = "12"; String postCode = "4000-121"; String city = "Porto"; String country = "Portugal";  //Act Address address = Address.createAddress(street, doorNumber, postCode, city, country);  //Assert assertEquals(street, address.getStreet()); assertEquals(doorNumber, address.getDoorNumber()); assertEquals(postCode, address.getPostCode()); assertEquals(city, address.getCity()); "<AssertPlaceHolder>";  }
[*] target: assertEquals(country, address.getCountry())
[-] pred: org. junit. Assert. assertEquals ( country, address. getCountry() )
************************************
[+] input: shouldNotThrowExceptionIfInputIsNull_4() { var encoded = UUIDAdapter.toStringOrNull(null);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(encoded)
[-] pred: org. junit. Assert. assertNull ( encoded )
************************************
[+] input: createFromUshort555Rgb() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_USHORT_555_RGB); final short[] data = PngEncoderBufferedImageConverter.getDataBufferUShort(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromUshort555Rgb(data, width, height); "<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: testClone() { //Arrange String street = "rua da saudade"; String doorNumber = "12"; String postCode = "4000-121"; String city = "Porto"; String country = "Portugal";  //Act  Address address = Address.createAddress(street, doorNumber, postCode, city, country); Address cloneAddress = address.clone();  //Assert  "<AssertPlaceHolder>"; }
[*] target: assertEquals(address, cloneAddress)
[-] pred: org. junit. Assert. assertEquals ( address, cloneAddress )
************************************
[+] input: sendPasswordSuccessfullyChangedMailException() { // given MimeMessage mimeMessage = new MimeMessage((Session)null); User user = getTestUser(); given(emailTemplateEngine.process(eq(""), any(Context.class))) .willReturn("HTML"); given(mailSender.createMimeMessage()) .willReturn(mimeMessage); doThrow(MailSendException.class).when(mailSender).send(mimeMessage);  // when boolean mailSent = mailSDJpaService.sendPasswordSuccessfullyChanged(user);  // then "<AssertPlaceHolder>"; }
[*] target: assertFalse(mailSent)
[-] pred: org. junit. Assert. assertFalse ( mailSent )
************************************
[+] input: should_generate_hash() { //given String expectedSignature = "Tj0mkbp+WLBwLhS65CjX708PGCl9hD9rlT6n6Zgcyi8="; CreateMemberRequest request = CreateMemberRequest.builder() .memberExternalId("ext-1511") .email("haluk.demir@example.com") .phoneNumber("905551111111") .name("Haluk Demir") .build();  //when String signature = HashGenerator.generateHash("http://api.craftgate.io", "api-key", "secret-key", "rand-2010", request, "/onboarding/v1/members");  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSignature, signature)
[-] pred: org. junit. Assert. assertEquals ( expectedSignature, signature )
************************************
[+] input: shouldProperlyGetGroupsWithEmptyArgs() { //given GroupRequestArgs args = GroupRequestArgs.builder().build();  //when List<GroupInfo> groupList = groupClient.getGroupList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(groupList.isEmpty()); }
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
[+] input: should_result_long_number_of_bytes_when_mib_symbol() {  var expected = (long)(1 * 1024 * 1024);  var actual = NumberUtil.fromHumanReadable("1MiB");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldNotAddCallIfCallIdIsNotProvided() { var aliceClientSample = aliceObservedSamplesGenerator.generateObservedClientSample(); var observedClientSamples = ObservedClientSamples.builder() .add(aliceClientSample.getServiceId(), aliceClientSample.getMediaUnitId(), aliceClientSample.getClientSample()) .build();  var callsFetcherResult = this.observedCallsFetcher.fetchFor(observedClientSamples); var aliceRoom = this.roomsRepository.get(aliceClientSample.getServiceRoomId()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(aliceRoom)
[-] pred: org. junit. Assert. assertNull ( aliceRoom )
************************************
[+] input: NoSuchMethodException { // given Method method = Object.class.getMethod("toString");  // when Method ifMethod = LogRecordOperationSource.getInterfaceMethodIfPossible(method);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(Object.class.getMethod("toString"), ifMethod); }
[*] target: assertNotNull(ifMethod)
[-] pred: org. junit. Assert. assertNotNull ( ifMethod )
************************************
[+] input: testRoute_Empty_HostFilter() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl(" => " + " host = " + LOCAL_HOST)); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
[+] input: testConfigure() { final MultipartOptions options = MultipartOptionsConfigure.newOpts() .charset(StandardCharsets.UTF_8) .maxSize(1L) .memoryThreshold(2L) .tempDir("/foo") .useDisk(true) .configured();  assertEquals(StandardCharsets.UTF_8, options.getCharset()); assertEquals(1L, options.getMaxSize()); assertEquals(2L, options.getMemoryThreshold()); assertEquals("/foo", options.getTempDir()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(options.isUseDisk())
[-] pred: org. junit. Assert. assertTrue ( options. isUseDisk() )
************************************
[+] input: GestaltException { // Arrange MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder();  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  MapConfigSource configSource = (MapConfigSource) configSourcePackage.getConfigSource(); assertNotNull(configSource.hasList()); assertTrue(configSource.loadList().isEmpty()); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
[+] input: putMoneyAndGetMoney() { final RealNumberParser realNumberParser = new RealNumberParser(locales);  final Money money = MoneyParser.parse(twelveDotThreeFour, MoneyParser.GBP); assertNotNull(money); dataManager.putMoney(DBKey.PRICE_LISTED, money);  final Money out = dataManager.getMoney(DBKey.PRICE_LISTED, realNumberParser); assertNotNull(out); assertEquals(twelveDotThreeFour, out.getValue()); final Currency currency = out.getCurrency(); "<AssertPlaceHolder>"; assertEquals("GBP", currency.getCurrencyCode());  MoneyVerifier.checkRawData(dataManager, twelveDotThreeFour, "GBP"); }
[*] target: assertNotNull(currency)
[-] pred: org. junit. Assert. assertNotNull ( currency )
************************************
[+] input: canLookupPapersFromAuthor() { // given PaperArchiveFacade service = new PaperArchiveFacadeImpl(); LookupPapersFromAuthorRequestDataType anonymousInput = new LookupPapersFromAuthorRequestDataType(); anonymousInput.setAnonymous1("5hbpNILyJe");  // when PaperItemDTOList result = service.lookupPapersFromAuthor(anonymousInput);  // then "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testStartEditOfferForDeactivatedOffer() { P2PService p2PService = mock(P2PService.class); OfferBookService offerBookService = mock(OfferBookService.class); XmrConnectionService xmrConnectionService = mock(XmrConnectionService.class); when(p2PService.getPeerManager()).thenReturn(mock(PeerManager.class));  final OpenOfferManager manager = new OpenOfferManager(coreContext, null, null, p2PService, xmrConnectionService, null, null, null, offerBookService, null, null, null, null, null, null, null, null, persistenceManager, signedOfferPersistenceManager, null);  AtomicBoolean startEditOfferSuccessful = new AtomicBoolean(false);  ResultHandler resultHandler = () -> startEditOfferSuccessful.set(true);  final OpenOffer openOffer = new OpenOffer(make(btcUsdOffer)); openOffer.setState(OpenOffer.State.DEACTIVATED);  manager.editOpenOfferStart(openOffer, resultHandler, null); "<AssertPlaceHolder>";  }
[*] target: assertTrue(startEditOfferSuccessful.get())
[-] pred: org. junit. Assert. assertTrue ( startEditOfferSuccessful. get ( ) )
************************************
[+] input: getResourceMaps() { // given List<AWSSubnet> awsSubnets = getAwsSubnets();  Maps<Resource> resourceMaps = exportSubnets.getResourceMaps(awsSubnets); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Subnet.tf")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, senderKeys, senderKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation() )
************************************
[+] input: testReadConsistencyLevel() { int levelsChecked = 0;  // Test whether CassandraTransaction honors the write consistency level option for (CLevel writeLevel : CLevel.values()) { StandardBaseTransactionConfig.Builder b = new StandardBaseTransactionConfig.Builder(); ModifiableConfiguration mc = GraphDatabaseConfiguration.buildGraphConfiguration(); mc.set(CASSANDRA_READ_CONSISTENCY, writeLevel.name()); b.timestampProvider(TimestampProviders.MICRO); b.customOptions(mc); CassandraTransaction ct = new CassandraTransaction(b.build()); "<AssertPlaceHolder>"; levelsChecked++; }  // Sanity check: if CLevel.values was empty, something is wrong with the test Preconditions.checkState(0 < levelsChecked); }
[*] target: assertEquals(writeLevel, ct.getReadConsistencyLevel())
[-] pred: org. junit. Assert. assertEquals ( writeLevel, ct. getReadConsistencyLevel() )
************************************
[+] input: getInstance() { DCLSingleton instance1 = DCLSingleton.getInstance(); DCLSingleton instance2 = DCLSingleton.getInstance(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(instance1, instance2)
[-] pred: org. junit. Assert. assertEquals ( instance1, instance2 )
************************************
[+] input: testDeserialiseKeyboardWithKeyCodes() { List<String> tick = new ArrayList<>(); tick.add(";a"); tick.add("17;w"); tick.add("17,29;"); tick.add("17,29,31;s"); tick.add("17,29,31,500;"); // Test theoretical keycode that doesn't exist  VirtualKeyboard actual = deserialiseKeyboard(tick);  VirtualKeyboard expected = new VirtualKeyboard(); expected.updateFromEvent(VirtualKey.ZERO, false, 'a'); expected.updateFromEvent(VirtualKey.W, true, 'w'); expected.updateFromEvent(VirtualKey.LCONTROL, true, Character.MIN_VALUE); expected.updateFromEvent(VirtualKey.S, true, 's'); expected.updateFromEvent(500, true, Character.MIN_VALUE);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getInternal_Valid_returnOfferedResources() { /* ARRANGE */ catalog.getRequestedResources().add(resource);  /* ACT */ final var resources = linker.getInternal(catalog);  /* ASSERT */ final var expected = List.of(resource); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, resources)
[-] pred: org. junit. Assert. assertEquals ( expected, resources )
************************************
[+] input: testRehashing() { int count = 20000;  for (int i = 0; i < count; i++) { map.put(i, "value" + i); }  for (int i = 0; i < count; i++) { assertEquals("value" + i, map.get(i)); } "<AssertPlaceHolder>"; }
[*] target: assertEquals(count, map.size())
[-] pred: org. junit. Assert. assertEquals ( count, map. size() )
************************************
[+] input: handleRouteCreationException_returnStatusInternalServerError() { /* ACT */ final var response = exceptionHandler .handleRouteCreationException( new RouteCreationException("Failed to create route."));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());  final var headers = response.getHeaders(); assertEquals(MediaType.APPLICATION_JSON, headers.getContentType());  final var body = response.getBody(); assertEquals("Failed to create Camel route.", body.get("message")); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testDoVolatilityAssert_withExpectation() { FallAssertion fallAssertion = MockFallAssertionFactory.create("0", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean assertionResult = fallAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
[+] input: ifSubjectIsExpectedOrAlternativeTest_1() { var actual = Utils.ifSubjectIsExpectedOrAlternative(1, 1, 2); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, actual)
[-] pred: org. junit. Assert. assertEquals ( 1, actual )
************************************
[+] input: Exception { RealInterface ins = ConstructionUtil.generateSubClassOf(AbstractClazz.class, options); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
[+] input: create_validInput_returnSubscriptionForOffer() { /* ARRANGE */ Mockito.doReturn(Optional.of(getOfferedResource())).when(entityResolver).getEntityById(Mockito.any()); Mockito.doNothing().when(offeredResLinker).add(Mockito.any(), Mockito.any());  /* ACT */ final var subscription = service.create(subscriptionDesc);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNotNull(subscription)
[-] pred: org. junit. Assert. assertNotNull ( subscription )
************************************
[+] input: testSuffixArray1() { int[] arr = {2, 1, 1, 4, 3}; int[] suffixArray = SuffixArrays.buildSuffixArray(arr, 4); int[] expected = {1, 2, 0, 4, 3}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expected, suffixArray)
[-] pred: org. junit. Assert. assertArrayEquals ( expected, suffixArray )
************************************
[+] input: InvalidMetricException { MetricsContext mc = new MetricsContext(); int metricCount = 10; for (int i = 0; i < metricCount; i++) { String key = "Metric-" + i; mc.putMetric(key, i); }  List<String> events = mc.serialize(); Assertions."<AssertPlaceHolder>";  List<MetricDefinition> metrics = parseMetrics(events.get(0)); Assertions.assertEquals(metrics.size(), metricCount); for (MetricDefinition metric : metrics) { MetricDefinition originalMetric = mc.getRootNode().metrics().get(metric.getName()); Assertions.assertEquals(originalMetric.getName(), metric.getName()); Assertions.assertEquals(originalMetric.getUnit(), metric.getUnit()); } }
[*] target: assertEquals(1, events.size())
[-] pred: org. junit. Assert. assertEquals ( 1, events. size ( ) )
************************************
[+] input: test_convert_csv_line_contains_comma() { String[] record = {"1", "apple,orange", "10", "9.99"}; String expected = ""1","apple,orange","10","9.99"";  String result = writer.convertToCsvFormat(record); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testCreateProvider() {  // Act CustomProvider customProvider = ParamManager.createProvider(CustomProvider.class);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertNotNull(customProvider)
[-] pred: org. junit. Assert. assertNotNull ( customProvider )
************************************
[+] input: updateInteger_differentNewInt_returnNewInt() { /* ARRANGE */ final var oldInt = 1; final var newInt = 2;  /* ACT */ final var result = FactoryUtils.updateInteger(oldInt, newInt);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(newInt, result)
[-] pred: org. junit. Assert. assertEquals ( newInt, result )
************************************
[+] input: testDisablePayloadSupport() { PayloadStorageAsyncConfiguration payloadStorageConfiguration = new PayloadStorageAsyncConfiguration(); payloadStorageConfiguration.setPayloadSupportDisabled();  "<AssertPlaceHolder>"; assertNull(payloadStorageConfiguration.getS3BucketName()); }
[*] target: assertNull(payloadStorageConfiguration.getS3AsyncClient())
[-] pred: org. junit. Assert. assertNull ( payloadStorageConfiguration. getS3AsyncClient() )
************************************
[+] input: whenGroupAccountIsCreated_MsgSuccess() { // //        //Arrange //        String personEmail = "ilda@gmail.com"; //        String groupDenomination = "Fontes Family"; //        String groupDescription = "All members from Fontes family"; //        String accountDenomination = "LakersAccount"; //        String accountDescription = "Lakers Expenses"; // //        //Expected result //        Denomination denomination = Denomination.createDenomination(groupDenomination); //        Description description = Description.createDescription(groupDescription); //        DateOfCreation dateOfCreation = DateOfCreation.createDateOfCreation(LocalDate.now()); // //        GroupDTO isAccountCreatedExpected = GroupDTOAssembler.createDTOFromDomainObject(denomination, description, dateOfCreation); // //        NewGroupAccountInfoDTO newGroupAccountInfoDTO = new NewGroupAccountInfoDTO(accountDescription, accountDenomination); // //        CreateGroupAccountDTO createGroupAccountDTO = CreateGroupAccountDTOAssembler.createDTOFromPrimitiveTypes(personEmail, groupDenomination, accountDescription, accountDenomination); // //        //Expected ResponseEntity //        ResponseEntity<Object> expectedResponse = new ResponseEntity<>(isAccountCreatedExpected, HttpStatus.CREATED); // //        // Mock the behaviour of the service's createAccountAsPeopleInCharge method //        Mockito.when(service.createAccountAsPeopleInCharge(createGroupAccountDTO)).thenReturn(isAccountCreatedExpected); // //        //Act //        ResponseEntity<Object> isAccountCreated = controller.createGroupAccount(newGroupAccountInfoDTO, personEmail, groupDenomination); // //        //Assert //        "<AssertPlaceHolder>"; //    }
[*] target: assertEquals(expectedResponse, isAccountCreated)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, isAccountCreated )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/IamRole.cmd")); String actual = exportIamRoles.getTFImport(getRoleList()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: JsonProcessingException { InheritedResponse expectedResponse = InheritedResponse.inheritedBuilder() .name("testing") .detail("testing-detail") .build();  wireMockServer.stubFor( post(urlPathEqualTo("/inherited")) .withHeader(HttpHeaders.CONTENT_TYPE, containing(MediaType.APPLICATION_JSON_VALUE)) .withHeader(HttpHeaders.ACCEPT, equalTo(MediaType.APPLICATION_JSON_VALUE)) .withHeader(ECHO, equalTo(ECHO)) .withRequestBody(equalTo("testing")) .willReturn( aResponse() .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) .withBody(objectMapper.writeValueAsString(expectedResponse)) ) );  InheritedResponse response = exampleClient.inherited("testing").block(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResponse, response)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, response )
************************************
[+] input: testRoute_Placeholder() { Router router = new ConditionRouterFactory().getRouter(getRouteUrl("host = " + LOCAL_HOST + " => " + " host = $host")); List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf("dubbo://10.20.3.3:20880/com.foo.BarService")); Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf("dubbo://" + LOCAL_HOST + ":20880/com.foo.BarService")); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf("consumer://" + LOCAL_HOST + "/com.foo.BarService"), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
[+] input: testGetMethod() { Method getMethod = null; for (Method method : MethodTestClazz.class.getMethods()) { if (MethodUtils.isGetter(method)) { getMethod = method; } } Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("getValue", getMethod.getName()); }
[*] target: assertNotNull(getMethod)
[-] pred: org. junit. Assert. assertNotNull ( getMethod )
************************************
[+] input: testProcessEvent() { var stack = new Stack<String>();  String expectedFrameName1 = "expectedFrameName1"; String expectedFrameName2 = "expectedFrameName2"; String expectedFrameName3 = "expectedFrameName3"; Integer expectedFrameValue = 27;  stack.push(expectedFrameName1); stack.push(expectedFrameName2); stack.push(expectedFrameName3);  FlamegraphMarshaller flamegraphMarshaller = new FlamegraphMarshaller(); flamegraphMarshaller.processEvent(stack, expectedFrameValue); FlamegraphMarshaller.StackFrame stackFrame = flamegraphMarshaller.getStackFrame(); List<FlamegraphMarshaller.StackFrame> children = stackFrame.getChildren(); assertNotNull(children);  FlamegraphMarshaller.StackFrame frame3 = (FlamegraphMarshaller.StackFrame) children.toArray()[0]; FlamegraphMarshaller.StackFrame frame2 = (FlamegraphMarshaller.StackFrame) frame3.getChildren().toArray()[0]; FlamegraphMarshaller.StackFrame frame1 = (FlamegraphMarshaller.StackFrame) frame2.getChildren().toArray()[0];  assertEquals(expectedFrameName3, frame3.getName()); assertEquals(expectedFrameValue, frame3.getValue());  assertEquals(expectedFrameName2, frame2.getName()); assertEquals(expectedFrameValue, frame2.getValue());  assertEquals(expectedFrameName1, frame1.getName()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedFrameValue, frame1.getValue())
[-] pred: org. junit. Assert. assertEquals ( expectedFrameValue, frame1. getValue ( ) )
************************************
[+] input: testToString() { MetadataTest test = new MetadataTest(); PlaybackMetadata metadata = new PlaybackMetadata(test); metadata.setValue("1", "One"); metadata.setValue("2", "Two"); metadata.setValue("3", "Three"); metadata.setValue("4", "Four");  String actual = metadata.toString();  String expected = "1:One\n" + "2:Two\n" + "3:Three\n" + "4:Four\n";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testEncodeDecodeString() { final String VALUE = "How many ,'s in this sentence?\n"; final SequenceEncoder se = new SequenceEncoder(',').append(VALUE); final SequenceEncoder.Decoder sd = new SequenceEncoder.Decoder(se.getValue(), ','); "<AssertPlaceHolder>"; }
[*] target: assertEquals(VALUE, sd.nextToken())
[-] pred: org. junit. Assert. assertEquals ( VALUE, sd. nextToken ( ) )
************************************
[+] input: getResourceMaps() { // given Maps<Resource> resourceMaps = exportNatGateways.getResourceMaps(getNatGateways()); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/NatGateway.tf")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testNotFoundRegionIso() { var db = new NaturalEarthDb(List.of(), List.of(), List.of()); var result = db.getAdmin1ByIso("CA-YT"); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: NoSuchAlgorithmException { KeyPair ownerKeys = TestUtils.generateKeyPair();  ProtectedStoragePayload protectedStoragePayload = new ProtectedStoragePayloadStub(ownerKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = new ProtectedStorageEntry(protectedStoragePayload, ownerKeys.getPublic(), 1, new byte[] { 0 }, Clock.systemDefaultZone());  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
[+] input: testDoFixValueAssert_withExpectation() { GreaterThanAssertion greaterThanAssertion = MockGreaterThanAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "1");  boolean assertionResult = greaterThanAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
[+] input: selectByTitleLikeKeyword() { BookDO book = initData(); List<BookDO> found = bookMapper.selectByTitleLikeKeyword("%千里%"); boolean anyMatch = found.stream().anyMatch(it -> it.getTitle().equals(book.getTitle())); "<AssertPlaceHolder>"; }
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
[+] input: changeVisibilityNoOp() { AccessInfo accessInfo = new AccessInfo(AccessFlags.ACC_PUBLIC, AFType.METHOD); AccessInfo result = accessInfo.changeVisibility(AccessFlags.ACC_PUBLIC); "<AssertPlaceHolder>"; }
[*] target: assertSame(accessInfo, result)
[-] pred: org. junit. Assert. assertSame ( accessInfo, result )
************************************
[+] input: testWhenConfigResourceIsNotPresent() { ValueMap cloudConfig = cloudConfigReaderImpl.getContextAwareCloudConfigRes("/content/dx", "notExistentConfig", ValueMap.class); "<AssertPlaceHolder>"; }
[*] target: assertNull(cloudConfig)
[-] pred: org. junit. Assert. assertNull ( cloudConfig )
************************************
[+] input: shouldConstructWithPassword() { var password = "somePassword"; var dto = new UserPasswordDto(password); "<AssertPlaceHolder>"; }
[*] target: assertEquals(password, dto.getPassword())
[-] pred: org. junit. Assert. assertEquals ( password, dto. getPassword() )
************************************
[+] input: Exception { // given String siteId = null; String documentId = "3dbc3319-6ef4-402a-a46c-a87a7ce05a73";  Map<String, Object> map = loadRequest("/insert_subdocument01.json", null, null);  // when processor.handleRequest(map, this.context);  // then List<String> documents = service.searchFulltext(siteId, documentId, MAX); "<AssertPlaceHolder>"; assertEquals(documentId, documents.get(0));  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(1, syncs.getResults().size()); assertEquals(documentId, syncs.getResults().get(0).getDocumentId()); assertEquals(DocumentSyncServiceType.TYPESENSE, syncs.getResults().get(0).getService()); assertEquals(DocumentSyncStatus.COMPLETE, syncs.getResults().get(0).getStatus()); assertEquals(DocumentSyncType.METADATA, syncs.getResults().get(0).getType()); assertEquals("System", syncs.getResults().get(0).getUserId()); assertEquals("added Document Metadata", syncs.getResults().get(0).getMessage()); assertNotNull(syncs.getResults().get(0).getSyncDate()); }
[*] target: assertEquals(1, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 1, documents. size ( ) )
************************************
[+] input: NacosException { URL url = URL.valueOf("xxx://" + NetUtils.getLocalAddress().getHostName() + ":4444/" + TEST_SERVICE + "?paramTest=nacosTest&version=" + VERSION + "&application=" + APPLICATION_NAME + (METADATA_GROUP == null ? "" : "&group=" + METADATA_GROUP)); SubscriberMetadataIdentifier subscriberMetadataIdentifier = new SubscriberMetadataIdentifier(APPLICATION_NAME, REVISION); Gson gson = new Gson(); String urlListJsonString = gson.toJson(Arrays.asList(url)); nacosMetadataReport.doSaveSubscriberData(subscriberMetadataIdentifier, urlListJsonString); Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH);  String subscriberMetadata = configService.getConfig(subscriberMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(subscriberMetadata, urlListJsonString);  //clear test data configService.removeConfig(subscriberMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP);  }
[*] target: assertNotNull(subscriberMetadata)
[-] pred: org. junit. Assert. assertNotNull ( subscriberMetadata )
************************************
[+] input: testWrapBoldAroundNewline() { final String input = "[B]Dum\nDum[/B]"; final String expected = "**Dum**\n**Dum**"; final String result = this.converter.convertToMarkdown(input); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: GestaltException { InputStreamConfigSource source = new InputStreamConfigSource( new ByteArrayInputStream("test".getBytes(StandardCharsets.UTF_8)), "properties");  Assertions.assertTrue(source.hasStream()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(source.loadStream())
[-] pred: org. junit. Assert. assertNotNull ( source. loadStream() )
************************************
[+] input: shouldNotApplyIfConfigItemOverrides() { var existing = makeBasicResource("blargus");  when(config.getBoolean(METRICS_FULL_COMMAND_LINE, false)).thenReturn(true);  var testClass = new TruncateCommandLineWhenMetricsEnabled.CommandLineTruncator();  var result = testClass.apply(existing, config); "<AssertPlaceHolder>"; }
[*] target: assertSame(existing, result)
[-] pred: org. junit. Assert. assertSame ( existing, result )
************************************
[+] input: GestaltException { URLConfigSource fileConfigSource = new URLConfigSource(testURL);  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, fileConfigSource::loadList); }
[*] target: assertFalse(fileConfigSource.hasList())
[-] pred: org. junit. Assert. assertFalse ( fileConfigSource. hasList() )
************************************
[+] input: Exception { final File input = new File(SystemUtil.info().getTempDir(), "/folder-does-not-exists");  final boolean actual = FileUtil.isExistingFolder(input);  // asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
[+] input: createsUser() { final UserProvider userProvider = mock(UserProvider.class); final RealmModel realm = mock(RealmModel.class); final String username = "user";  when(session.users()) .thenReturn(userProvider); when(userProvider.addUser(realm, username)) .thenReturn(new TestUserModel(username));  LegacyUser legacyUser = createLegacyUser(username); var result = userModelFactory.create(legacyUser, realm);  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: confirmEmailUsedToken() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); testSecurityToken.setUsed(true); user.getUserTokens().add(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), testSecurityToken.getToken());  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
[+] input: testParseWithWrapper() { final String xml = "<foo><bar>" + "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.01">" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>" + "</bar></foo>"; BusinessAppHdrV01 h = BusinessAppHdrV01.parse(xml); "<AssertPlaceHolder>"; // +System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertNotNull(h.getCreDt()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
[+] input: testTransferListenableFuture() { final CompletableFuture<String> cf = FutureUtils .transferListenableFuture(guavaExecutor.submit(() -> "foo")); assertNotNull(cf); assertEquals("foo", cf.join());  final IllegalStateException e = new IllegalStateException("bar"); final CompletableFuture<String> cf1 = FutureUtils .transferListenableFuture(guavaExecutor.submit(() -> { throw e; })); "<AssertPlaceHolder>"; try { cf1.join(); } catch (Exception ex) { Throwable err = Futures.unwrapCompletionException(ex); assertEquals(e, err); assertEquals("bar", err.getMessage()); } }
[*] target: assertNotNull(cf1)
[-] pred: org. junit. Assert. assertNotNull ( cf1 )
************************************
[+] input: hasList() { SystemPropertiesConfigSource configSource = new SystemPropertiesConfigSource();  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(configSource.hasList())
[-] pred: org. junit. Assert. assertTrue ( configSource. hasList() )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/EcrRepository.cmd")); String actual = exportEcrRepositories.getTFImport(getRepositories()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: checkEqualsAddress_true_postCode_null() {  //Arrange String streetA = "rua da alegria"; String doorNumberA = "1"; String postCodeA = ""; String cityA = "Porto"; String countryA = "Portugal";  String streetB = "rua da alegria"; String doorNumberB = "1"; String postCodeB = ""; String cityB = "Porto"; String countryB = "Portugal";   //Act  Address addressA = Address.createAddress(streetA, doorNumberA, postCodeA, cityA, countryA); Address addressB = Address.createAddress(streetB, doorNumberB, postCodeB, cityB, countryB); addressA.setPostCode(null); addressB.setPostCode(null);   //Assert  "<AssertPlaceHolder>";  }
[*] target: assertEquals(addressA, addressB)
[-] pred: org. junit. Assert. assertEquals ( addressA, addressB )
************************************
[+] input: shouldNotThrowExceptionIfInputIsNull_2() { var encoded = UUIDAdapter.toUUIDOrDefault(null, null);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(encoded)
[-] pred: org. junit. Assert. assertNull ( encoded )
************************************
[+] input: should_return_false_if_checkout_time_is_equal_or_before_checkin_time() { SubmissionPayload newPayload = SubmissionPayload.newBuilder() .addAllCheckIns(List.of(CheckIn.newBuilder().setStartIntervalNumber(CORRECT_CHECKOUT_TIME) .setEndIntervalNumber(CORRECT_CHECKOUT_TIME).setTransmissionRiskLevel(CORRECT_TRL).build())) .build();  boolean result = validator.verify(newPayload, mockValidatorContext); assertFalse(result);  newPayload = SubmissionPayload.newBuilder() .addAllCheckIns(List.of(CheckIn.newBuilder().setStartIntervalNumber(CORRECT_CHECKOUT_TIME) .setEndIntervalNumber(CORRECT_CHECKOUT_TIME - 1).setTransmissionRiskLevel(CORRECT_TRL).build())) .build();  result = validator.verify(newPayload, mockValidatorContext); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: Exception { final boolean actual = FileUtil.isExistingFile(null);  // asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
[+] input: testGetOneMetadataReport() { URL url = URL.valueOf("zookeeper://" + NetUtils.getLocalAddress().getHostName() + ":4444/org.apache.dubbo.TestService?version=1.0.0&application=vic"); MetadataReport metadataReport1 = metadataReportFactory.getMetadataReport(url); MetadataReport metadataReport2 = metadataReportFactory.getMetadataReport(url); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(metadataReport1, metadataReport2)
[-] pred: org. junit. Assert. assertEquals ( metadataReport1, metadataReport2 )
************************************
[+] input: shouldTestCacheKeysEqual() { Date date = new Date(); CacheKey key1 = new CacheKey(new Object[] { 1, "hello", null, new Date(date.getTime()) }); CacheKey key2 = new CacheKey(new Object[] { 1, "hello", null, new Date(date.getTime()) }); assertEquals(key1, key2); assertEquals(key2, key1); assertEquals(key1.hashCode(), key2.hashCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(key1.toString(), key2.toString())
[-] pred: org. junit. Assert. assertEquals ( key1. toString ( ), key2. toString ( ) )
************************************
[+] input: getNotifierConfigMetadata() { ConfigMetadata notifierConfig = provider.getNotifierConfigMetadata(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("阿里云通知配置", notifierConfig.getName()); }
[*] target: assertNotNull(notifierConfig)
[-] pred: org. junit. Assert. assertNotNull ( notifierConfig )
************************************
[+] input: Exception { String json = "{"key1":"1234","key2":"4321"}"; final Map<String, Object> d = createMap(json);  Set<String> attributeNames = new LinkedHashSet<>(); attributeNames.add("key1"); attributeNames.add("key2");  when(schemaService.getSchemaFor(anyString())).thenReturn(Optional.of( BPASchema.builder() .schemaAttributeNames(attributeNames) .schemaId("1234") .build()));  when(identity.getDidPrefix()).thenReturn("did:iil:");  MyDocument doc = buildDefault() .setType(CredentialType.INDY) .setSchemaId("testSchema") .setDocument(d);  final VerifiableCredential vp = vpm.buildFromDocument(doc, "xxyyyzzz");  String actual = gson.toJson(vp.getContext()); String expected = "["https://www.w3.org/2018/credentials/v1","https://raw.githubusercontent.com/iil-network/contexts/master/labeled-credential.jsonld"" + ",{"@context":{"sc":"did:iil:1234","key1":{"@id":"sc:key1"},"key2":{"@id":"sc:key2"}}}]";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: test() { long timestamp = System.currentTimeMillis(); String msg = "Thread pool is EXHAUSTED! Thread Name: DubboServerHandler-127.0.0.1:12345, Pool Size: 1 (active: 0, core: 1, max: 1, largest: 1), Task: 6 (completed: 6), Executor status:(isShutdown:false, isTerminated:false, isTerminating:false), in dubbo://127.0.0.1:12345!, dubbo version: 2.7.3, current host: 127.0.0.1"; ThreadPoolExhaustedEvent event = new ThreadPoolExhaustedEvent(this, msg);  assertEquals(this, event.getSource()); "<AssertPlaceHolder>"; assertTrue(event.getTimestamp() >= timestamp); }
[*] target: assertEquals(msg, event.getMsg())
[-] pred: org. junit. Assert. assertEquals ( msg, event. getMsg() )
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand(JsonDocument.of(JsonValue.EMPTY_JSON_OBJECT)).get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
[+] input: shouldReturnTrueWhenMacBytesIsSame() { // given var fakeData = MetricCsvFixture.MOCK_METRIC_CSV_DATA_WITH_ONE_PIPELINE(); String jsonFakeData = new Gson().toJson(fakeData); String randomIv = encryptDecryptUtil.getRandomIv(); when(systemUtil.getEnvMap()).thenReturn(envMap); String secretKey = encryptDecryptUtil.getSecretKey("fakePassword");  String encryptedData = encryptDecryptUtil.getEncryptedData(randomIv, secretKey, jsonFakeData); String macBytes = encryptDecryptUtil.getMacBytes(secretKey, encryptedData); // when boolean verifyPass = encryptDecryptUtil.verifyMacBytes(secretKey, encryptedData, macBytes); // then "<AssertPlaceHolder>";  }
[*] target: assertTrue(verifyPass)
[-] pred: org. junit. Assert. assertTrue ( verifyPass )
************************************
[+] input: testMultipleEventSummary() { var summaryStartTime = Instant.now().toEpochMilli();  var event1 = mock(RecordedEvent.class); var numOfEvents = 1; var event1StartTime = summaryStartTime + 1; var event1DurationNanos = 13700000;  var event2 = mock(RecordedEvent.class); numOfEvents = ++numOfEvents; var event2StartTime = summaryStartTime + 2; var event2DurationNanos = 24800000; // max duration of final summary var event2DurationMillis = Duration.ofNanos(event2DurationNanos).toMillis();  var event3 = mock(RecordedEvent.class); numOfEvents = ++numOfEvents; var event3StartTime = summaryStartTime + 3; var event3DurationNanos = 1000000; // min duration of final summary var event3DurationMillis = Duration.ofNanos(event3DurationNanos).toMillis();  var summedDurationNanos = event1DurationNanos + event2DurationNanos + event3DurationNanos; var summedDurationMillis = Duration.ofNanos(summedDurationNanos).toMillis();  var expectedSummaryMetric = new Summary( JFR_G1_GARBAGE_COLLECTION_DURATION, numOfEvents, // count summedDurationMillis, // sum event3DurationMillis, // min event2DurationMillis, // max summaryStartTime, // startTimeMs event3StartTime, // endTimeMs: the summary metric endTimeMs is the eventStartTime of // each RecordedEvent new Attributes());  var expected = List.of(expectedSummaryMetric);  var testClass = new G1GarbageCollectionSummarizer(summaryStartTime);  when(event1.getStartTime()).thenReturn(Instant.ofEpochMilli(event1StartTime)); when(event1.getDuration(DURATION)).thenReturn(Duration.ofNanos(event1DurationNanos));  when(event2.getStartTime()).thenReturn(Instant.ofEpochMilli(event2StartTime)); when(event2.getDuration(DURATION)).thenReturn(Duration.ofNanos(event2DurationNanos));  when(event3.getStartTime()).thenReturn(Instant.ofEpochMilli(event3StartTime)); when(event3.getDuration(DURATION)).thenReturn(Duration.ofNanos(event3DurationNanos));  // Summarize all events testClass.accept(event1); testClass.accept(event2); testClass.accept(event3);  var result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: getConfig() { context.create() .resource("/content/some/component", "test", "foobar"); Config config = condition.getConfig(context.currentResource("/content/some/component")); "<AssertPlaceHolder>"; assertEquals("foobar", config.get("test")); }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
[+] input: confirmEmailWrongToken() { // given User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.EMAIL_CONFIRM, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), "wrong-token");  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
[+] input: equals_true_when_same_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertTrue(areEqual)
[-] pred: org. junit. Assert. assertTrue ( areEqual )
************************************
[+] input: testCreateGraph() { final SoftwareArchitecture architecture = SoftwareArchitectureMother.simple();  final GraphOptions options = new GraphOptions.Builder() .direction(LEFT_TO_RIGHT) .build();  final BufferedImage bufferedImage = GraphFactory .createGraph(options, new RoughStyle(), architecture) .render(Format.PNG).toImage();  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(bufferedImage)
[-] pred: org. junit. Assert. assertNotNull ( bufferedImage )
************************************
[+] input: Exception { final StringBuffer sourceCode = new StringBuffer();  sourceCode.append("package org.mdkt;\n"); sourceCode.append("public class HelloClass {\n"); sourceCode.append("   public String hello() { return "hello"; }"); sourceCode.append("}");  Class<?> helloClass = InMemoryJavaCompiler.newInstance().compile("org.mdkt.HelloClass", sourceCode.toString()); "<AssertPlaceHolder>"; assertEquals(1, helloClass.getDeclaredMethods().length); }
[*] target: assertNotNull(helloClass)
[-] pred: org. junit. Assert. assertNotNull ( helloClass )
************************************
[+] input: createFrom4ByteAbgrPre() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_4BYTE_ABGR_PRE); final byte[] data = PngEncoderBufferedImageConverter.getDataBufferByte(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFrom4ByteAbgrPre(data, width, height); "<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: Exception { String path = String.format("s3://%s/%s", BUCKET_NAME, FILE_NAME); String config = awsConfigLoader.loadTextFile(new URI(path)); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
[+] input: extractRejectionReason_validRejectionMessage_returnRejectionReason() { /* ARRANGE */ final var rejectionReason = RejectionReason.NOT_FOUND; final var message = getRejectionMessage(rejectionReason);  /* ACT */ final var result = MessageUtils.extractRejectionReason(message);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(rejectionReason, result)
[-] pred: org. junit. Assert. assertEquals ( rejectionReason, result )
************************************
[+] input: InvalidMetricException { MetricsContext mc = new MetricsContext(); int metricCount = 253; int expectedEventCount = 3; for (int i = 0; i < metricCount; i++) { String key = "Metric-" + i; mc.putMetric(key, i); }  List<String> events = mc.serialize(); Assertions."<AssertPlaceHolder>";  List<MetricDefinition> allMetrics = new ArrayList<>(); for (String event : events) { allMetrics.addAll(parseMetrics(event)); } Assertions.assertEquals(metricCount, allMetrics.size()); for (MetricDefinition metric : allMetrics) { MetricDefinition originalMetric = mc.getRootNode().metrics().get(metric.getName()); Assertions.assertEquals(originalMetric.getName(), metric.getName()); Assertions.assertEquals(originalMetric.getUnit(), metric.getUnit()); } }
[*] target: assertEquals(expectedEventCount, events.size())
[-] pred: org. junit. Assert. assertEquals ( expectedEventCount, events. size ( ) )
************************************
[+] input: should_result_true_when_file_version_is_greater() {  final Path file = Path.of("v0003_my-migration.yml");  boolean actual = MigrationLoader.greater(file, "v0002");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: update_newPushData_willNotUpdate() { /* ARRANGE */ final var desc = new SubscriptionDesc(); desc.setLocation(URI.create("https://location")); desc.setSubscriber(URI.create("https://subscriber")); desc.setTarget(URI.create("https://target")); final var updatedDesc = new SubscriptionDesc(); updatedDesc.setLocation(URI.create("https://location")); updatedDesc.setSubscriber(URI.create("https://subscriber")); updatedDesc.setTarget(URI.create("https://target"));  final var subscription = factory.create(desc);  /* ACT */ final var result = factory.update(subscription, updatedDesc);  /* ASSERT */ "<AssertPlaceHolder>"; assertFalse(subscription.isPushData()); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: Exception { URL url = URL.valueOf("dubbo://" + NetUtils.getLocalAddress().getHostName() + ":2233"); Monitor monitor1 = monitorFactory.getMonitor(url); Monitor monitor2 = monitorFactory.getMonitor(url); if (monitor1 == null || monitor2 == null) { Thread.sleep(2000); monitor1 = monitorFactory.getMonitor(url); monitor2 = monitorFactory.getMonitor(url); } Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(monitor1, monitor2)
[-] pred: org. junit. Assert. assertEquals ( monitor1, monitor2 )
************************************
[+] input: test5() { int[] arrInitial = {1, 2, 3, 4}; int[] arrExpected = {1, 2, 4}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: test3() { int[] nums = {1, 1, 2, 2, 1}; Map<Integer, Integer> before = countMap(nums);  new Solution().wiggleSort(nums);  Map<Integer, Integer> after = countMap(nums); "<AssertPlaceHolder>";  for (int i = 1; i < nums.length; i += 2) assertTrue(nums[i] > nums[i - 1]); for (int i = 2; i < nums.length; i += 2) assertTrue(nums[i] < nums[i - 1]); }
[*] target: assertEquals(before, after)
[-] pred: org. junit. Assert. assertEquals ( before, after )
************************************
[+] input: shouldHandleZeroParameters() { try (SqlSession session = sqlMapper.openSession()) { final TestResultHandler resultHandler = new TestResultHandler(); session.select("org.apache.ibatis.domain.blog.mappers.BlogMapper.selectAllPosts", resultHandler); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(5, resultHandler.count)
[-] pred: org. junit. Assert. assertEquals ( 5, resultHandler. count )
************************************
[+] input: deleteBookingNotExists() { // given given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID)) .willReturn(Optional.empty());  // when boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);  // then "<AssertPlaceHolder>"; verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID); verify(bookingItemRepository, never()).delete(any()); }
[*] target: assertFalse(bookingDeleted)
[-] pred: org. junit. Assert. assertFalse ( bookingDeleted )
************************************
[+] input: IOException { String modalContent = TestUtils.getFileContent("files/invocation_template.json"); InvocationModal invocationModal = OBJECT_MAPPER.readValue(modalContent, InvocationModal.class); invocationModal.getActions().get(0).setBlockId(BLOCK_ID_HOURS_INPUT); State invalidHoursState = invocationModal.getView().getState(); invalidHoursState.getStateValues().get(BLOCK_ID_HOURS_INPUT).setEndHour("07:00"); // add warning userInteractionService.handleUserInteraction(invocationModal);  invalidHoursState.getStateValues().get(BLOCK_ID_HOURS_INPUT).setEndHour("20:00"); invocationModal.getView().setState(invalidHoursState); //remove warning InteractionModal returnedModal = userInteractionService.handleUserInteraction(invocationModal); "<AssertPlaceHolder>"; verify(slackClient, times(2)).notifyUser(eq(SLACK_VIEW_UPDATE_URI), interactionModalCaptor.capture(), eq("test_user_id")); InteractionModal updatedModal = interactionModalCaptor.getValue(); assertNotNull(updatedModal.getView()); assertNotNull(updatedModal.getView().getType()); assertNotNull(updatedModal.getView().getSubmit()); assertEquals(17, updatedModal.getView().getBlocks().size()); assertTrue(updatedModal.getView().getBlocks().stream().noneMatch(block -> BLOCK_ID_INVALID_HOURS.equals(block.getBlockId()))); }
[*] target: assertNull(returnedModal)
[-] pred: org. junit. Assert. assertNull ( returnedModal )
************************************
[+] input: testToString() { ConfigChangedEvent event = new ConfigChangedEvent(key, group, content); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(event.toString())
[-] pred: org. junit. Assert. assertNotNull ( event. toString() )
************************************
[+] input: isDuplicateUserIdReturnsFalseIfTheUserIdDoesntExists() { final UserProvider userProvider = mock(UserProvider.class); final RealmModel realm = mock(RealmModel.class); final String userId = "0123456789"; final String username = "user";  when(session.users()) .thenReturn(userProvider); when(userProvider.getUserById(realm, userId)) .thenReturn(null);  LegacyUser legacyUser = createLegacyUser(username, userId);  var result = userModelFactory.isDuplicateUserId(legacyUser, realm);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: importFromDescriptor_overrideDefaultValues_Success() { final MicroserviceImportDescriptorDto descriptorDto = aMicroserviceImportDescriptorDto() .withName("Test Imported Microservice 2") .withDescription("Test description") .withImageUrl("Test image url") .withApiUrl("Test api url") .withGitUrl("Test git url") .withCiUrl("Test ci url") .withTeam("Test team") .withStatus("Test status") .build();  final Optional<FullMicroserviceDto> maybeDto = sut.importFromDescriptor(descriptorDto); "<AssertPlaceHolder>";  final FullMicroserviceDto dto = maybeDto.get(); assertEquals(descriptorDto.getDescription(), dto.getDescription()); assertEquals(descriptorDto.getImageUrl(), dto.getImageUrl()); assertEquals(descriptorDto.getApiUrl(), dto.getSwaggerUrl()); assertEquals(descriptorDto.getGitUrl(), dto.getGitUrl()); assertEquals(descriptorDto.getCiUrl(), dto.getCiUrl()); assertNotNull(dto.getStatus()); assertEquals(descriptorDto.getStatus(), dto.getStatus().getName()); assertNotNull(dto.getTeam());  final TeamDto team = dto.getTeam(); assertEquals(descriptorDto.getTeam(), team.getName()); }
[*] target: assertTrue(maybeDto.isPresent())
[-] pred: org. junit. Assert. assertTrue ( maybeDto. isPresent ( ) )
************************************
[+] input: testBusinessAppHdrV01Xm() { BusinessAppHdrV01 bah = new BusinessAppHdrV01(); bah.setFr(new Party9Choice()); bah.getFr().setFIId(new BranchAndFinancialInstitutionIdentification5()); bah.getFr().getFIId().setFinInstnId(new FinancialInstitutionIdentification8()); bah.getFr().getFIId().getFinInstnId().setBICFI("BIC"); bah.getFr().getFIId().setBrnchId(new BranchData2()); bah.getFr().getFIId().getBrnchId().setId("id"); bah.getFr().getFIId().getBrnchId().setNm("name"); bah.getFr().getFIId().getBrnchId().setPstlAdr(new PostalAddress6()); bah.getFr().getFIId().getBrnchId().getPstlAdr().setCtry("AR");  final String xml = bah.xml();  "<AssertPlaceHolder>"; // System.out.println(xml); testXpath(xml, "/AppHdr/Fr/FIId/FinInstnId/BICFI", "BIC"); testXpath(xml, "/AppHdr/Fr/FIId/BrnchId/Id", "id"); testXpath(xml, "/AppHdr/Fr/FIId/BrnchId/Nm", "name"); }
[*] target: assertNotNull(xml)
[-] pred: org. junit. Assert. assertNotNull ( xml )
************************************
[+] input: it_recognizes_end_of_statement_when_ending_in_period() { CobolLine current = new CobolLine("               FILE STATUS INPUT-FILE-STATUS.", tokenExtractor); CobolLine next = new CobolLine(" ", tokenExtractor);  boolean isEnd = Interpreter.isEndOfStatement(current, next);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isEnd)
[-] pred: org. junit. Assert. assertTrue ( isEnd )
************************************
[+] input: testLegacyAppHdrXml() { LegacyAppHdr ah = new LegacyAppHdr(); ah.setFrom(new EntityIdentification()); ah.getFrom().setId("id");  final String xml = ah.xml();  "<AssertPlaceHolder>"; testXpath(xml, "/AppHdr/From/Id", "id"); }
[*] target: assertNotNull(xml)
[-] pred: org. junit. Assert. assertNotNull ( xml )
************************************
[+] input: updateUserInfo1() { assertThrows(ForbiddenException.class, () -> { UserDO user1 = UserDO.builder().nickname("pedro大大").username("pedro大大").build(); userMapper.insert(user1); Random random = new Random(); UpdateUserInfoDTO dto = new UpdateUserInfoDTO(); dto.setGroupIds(Arrays.asList(random.nextInt(100), random.nextInt(100))); boolean b = adminService.updateUserInfo(user1.getId(), dto); "<AssertPlaceHolder>"; }); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
[+] input: Exception { MutableFeatureMap mfm = new MutableFeatureMap(); mfm.add("goldrat", 1.618033988749); mfm.add("e", Math.E); mfm.add("pi", Math.PI); HashedFeatureMap hfm = HashedFeatureMap.generateHashedFeatureMap(mfm, new MessageDigestHasher("SHA-512", "abcdefghi")); FeatureDomainProto fdp = hfm.serialize(); assertEquals(0, fdp.getVersion()); assertEquals("org.tribuo.hash.HashedFeatureMap", fdp.getClassName()); HashedFeatureMapProto hfmp = fdp.getSerializedData().unpack(HashedFeatureMapProto.class); HasherProto hasherProto = hfmp.getHasher(); assertEquals(0, hasherProto.getVersion()); assertEquals("org.tribuo.hash.MessageDigestHasher", hasherProto.getClassName()); MessageDigestHasherProto mdhp = hasherProto.getSerializedData().unpack(MessageDigestHasherProto.class); assertEquals("SHA-512", mdhp.getHashType());  HashedFeatureMap hfmD = ProtoUtil.deserialize(fdp); hfmD.setSalt("abcdefghi"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(hfm, hfmD)
[-] pred: org. junit. Assert. assertEquals ( hfm, hfmD )
************************************
[+] input: test_convert_csv_line_custom_separator() { String[] record = {"1", "apple", "10", "9.99"}; String expected = ""1";"apple";"10";"9.99"";  String result = writer.convertToCsvFormat(record, ";"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: getAssociatedRoute_noRouteAssociated_returnNull() { /* ARRANGE */ final var artifact = getArtifact(); when(routeService.getByOutput(any())).thenReturn(null);  /* ACT */ final var result = artifactRouteService.getAssociatedRoute(artifact);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: InvalidAlgorithmParameterException { String encodedString = textEncryptorConverter.encode(unencryptedString); "<AssertPlaceHolder>"; return; }
[*] target: assertNotNull(encodedString)
[-] pred: org. junit. Assert. assertNotNull ( encodedString )
************************************
[+] input: getCatalogs_catalogsNull_returnNull() { /* ARRANGE */ final var resource = new OfferedResource();  /* ACT */ final var result = resource.getCatalogs();  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testSendResult0() { final MockAsyncResponse response = MockAsyncResponse.aMockResponse() .build();  response.setStatus(200); response.sendResult(302, "Hello".getBytes(), 0, "Hello".getBytes().length); assertEquals(302, response.status());  "<AssertPlaceHolder>";  assertThrows(IllegalStateException.class, () -> response.sendResult(404, null, 0, 0, true)); }
[*] target: assertTrue(response.isCommitted())
[-] pred: org. junit. Assert. assertTrue ( response. isCommitted() )
************************************
[+] input: Exception { File f = resolveFile("src/test/resources/ie/baltimore/merlin-examples/merlin-xmldsig-twenty-three/certs/lugh.crt"); X509Certificate cert; try (FileInputStream fis = new FileInputStream(f)) { CertificateFactory cf = CertificateFactory.getInstance("X.509"); cert = (X509Certificate) cf.generateCertificate(fis); }  XMLX509Certificate x509Cert1 = new XMLX509Certificate(TestUtils.newDocument(), cert); XMLX509Certificate x509Cert2 = new XMLX509Certificate(TestUtils.newDocument(), cert);  assertEquals(x509Cert1, x509Cert2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(x509Cert1.hashCode(), x509Cert2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( x509Cert1. hashCode ( ), x509Cert2. hashCode ( ) )
************************************
[+] input: testEmailAddress() { RFC2822AddressParser.ParsedAddress address = new RFC2822AddressParser().parse("igor@jodd.org");  assertEquals(null, address.getPersonalName()); assertEquals("igor", address.getLocalPart()); assertEquals("jodd.org", address.getDomain()); assertTrue(address.isValid());  address = new RFC2822AddressParser().parse("Vladimir <djs@gmail.com>");  assertEquals("Vladimir", address.getPersonalName()); assertEquals("djs", address.getLocalPart()); assertEquals("gmail.com", address.getDomain());  "<AssertPlaceHolder>"; }
[*] target: assertTrue(address.isValid())
[-] pred: org. junit. Assert. assertTrue ( address. isValid() )
************************************
[+] input: StructureBuildingException { BuildState state = new BuildState(mock(NameToStructureConfig.class)); Element word = new GroupingEl(WORD_EL);  Element phospho = new TokenEl(GROUP_EL); phospho.addAttribute(new Attribute(SUBTYPE_ATR, PHOSPHO_SUBTYPE_VAL)); Fragment phosphoFrag = state.fragManager.buildSMILES("-P(=O)O"); phospho.setFrag(phosphoFrag); Element substituent = new GroupingEl(SUBSTITUENT_EL); substituent.addAttribute(new Attribute(LOCANT_ATR, "4")); substituent.addChild(phospho);  Element methanol = new TokenEl(GROUP_EL); methanol.setFrag(state.fragManager.buildSMILES("CCCCO",methanol,"1/2/3/4/")); Element root = new GroupingEl(ROOT_EL); root.addChild(methanol);  word.addChild(substituent); word.addChild(root); StructureBuildingMethods.resolveRootOrSubstituentLocanted(state, substituent);  Set<Bond> interFragmentBonds =  state.fragManager.getInterFragmentBonds(phosphoFrag); "<AssertPlaceHolder>"; assertEquals(ChemEl.O, interFragmentBonds.iterator().next().getOtherAtom(phosphoFrag.getFirstAtom()).getElement()); }
[*] target: assertEquals(1, interFragmentBonds.size())
[-] pred: org. junit. Assert. assertEquals ( 1, interFragmentBonds. size ( ) )
************************************
[+] input: testApply() { var key = "key1"; var value = "value1"; var startTime = Instant.now();  var expectedAttrs = new Attributes(); expectedAttrs.put(JVM_PROPERTY, key); expectedAttrs.put(JVM_PROPERTY_VALUE, value);  var expectedEvent = new Event(JFR_JVM_INFORMATION, expectedAttrs, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var mapper = new JVMSystemPropertyMapper(new AttributeValueSplitter());  var event = mock(RecordedEvent.class); when(event.getStartTime()).thenReturn(startTime); when(event.getString(KEY)).thenReturn(key); when(event.getString(VALUE)).thenReturn(value);  var result = mapper.apply(event);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldFindOddPostsInList() { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList("org.apache.ibatis.domain.blog.mappers.PostMapper.selectOddPostsIn", new ArrayList<Integer>() {{ add(0); add(1); add(2); add(3); add(4); }}); // we're getting odd indexes, not odd values, 0 is not odd "<AssertPlaceHolder>"; assertEquals(1, posts.get(0).getId()); assertEquals(3, posts.get(1).getId()); } }
[*] target: assertEquals(2, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, posts. size ( ) )
************************************
[+] input: testInitialNullBug3465() { // SequenceEncoder was failing to include initial null in sequence // Nulls are decoded as empty strings final String value2 = "value"; final char delim = ';';  final SequenceEncoder se = new SequenceEncoder(null, delim); se.append(value2);  final SequenceEncoder.Decoder sd = new SequenceEncoder.Decoder(se.getValue(), delim);  assertEquals("", sd.nextToken()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value2, sd.nextToken())
[-] pred: org. junit. Assert. assertEquals ( value2, sd. nextToken ( ) )
************************************
[+] input: JsonProcessingException { InheritedResponse wrapped = InheritedResponse.inheritedBuilder() .name("testing") .detail("testing-detail") .build();  GenericResponse<InheritedResponse> expectedResponse = GenericResponse.<InheritedResponse>builder() .value(wrapped) .build();  wireMockServer.stubFor( post(urlPathEqualTo("/generic-inherited")) .withHeader(HttpHeaders.CONTENT_TYPE, containing(MediaType.APPLICATION_JSON_VALUE)) .withHeader(HttpHeaders.ACCEPT, equalTo(MediaType.APPLICATION_JSON_VALUE)) .withHeader(ECHO, equalTo(ECHO)) .withRequestBody(equalTo("testing")) .willReturn( aResponse() .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) .withBody(objectMapper.writeValueAsString(expectedResponse)) ) );  GenericResponse<InheritedResponse> response = exampleClient.genericInherited("testing").block(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResponse, response)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, response )
************************************
[+] input: buildUsageULogging() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.USAGE_LOGGING, null, uri); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: IOException {  final File uploadFile = new File(UPLOAD_FILE_NAME); byte[] bytes = Files.readAllBytes(uploadFile.toPath());  Mockito.when(storage.get(BlobId.of(BUCKET_NAME, uploadFile.getName()))).thenReturn(blob); Mockito.when(blob.getContent()).thenReturn(bytes);  GCSConfigSource source = new GCSConfigSource(storage, BUCKET_NAME, uploadFile.getName(), Tags.of());  Assertions.assertTrue(source.hasStream()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(source.loadStream())
[-] pred: org. junit. Assert. assertNotNull ( source. loadStream ( ) )
************************************
[+] input: create_validInput_returnSubscriptionForArtifact() { /* ARRANGE */ Mockito.doReturn(Optional.of(getArtifact())).when(entityResolver).getEntityById(Mockito.any()); Mockito.doNothing().when(artSubLinker).add(Mockito.any(), Mockito.any());  /* ACT */ final var subscription = service.create(subscriptionDesc);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNotNull(subscription)
[-] pred: org. junit. Assert. assertNotNull ( subscription )
************************************
[+] input: testIsStop() { JFR jfr = mock(JFR.class); JfrRecorder jfrRecorder = buildJfrRecorder(jfr); assertFalse(jfrRecorder.isStarted()); jfrRecorder.start(); verify(recording, never()).stop(); jfrRecorder.stop(); verify(recording).stop(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(jfrRecorder.isStarted())
[-] pred: org. junit. Assert. assertFalse ( jfrRecorder. isStarted() )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Elasticache.cmd")); String actual = exportElastiCacheClusters.getTFImport(getAwsCacheClusters()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testNotifyoverrideUrls_withInvoker() { RegistryDirectory registryDirectory = getRegistryDirectory();  List<URL> durls = new ArrayList<URL>(); durls.add(SERVICEURL.addParameter("timeout", "1000")); durls.add(SERVICEURL2.addParameter("timeout", "1000").addParameter("connections", "10")); durls.add(URL.valueOf("override://0.0.0.0?timeout=1&connections=5"));  registryDirectory.notify(durls); Assertions."<AssertPlaceHolder>";  //Start validation of parameter values  invocation = new RpcInvocation();  List<Invoker<?>> invokers = registryDirectory.list(invocation); Assertions.assertEquals(2, invokers.size());  Assertions.assertEquals("1", invokers.get(0).getUrl().getParameter("timeout"), "override rute must be first priority"); Assertions.assertEquals("5", invokers.get(0).getUrl().getParameter("connections"), "override rute must be first priority"); }
[*] target: assertTrue(registryDirectory.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( registryDirectory. isAvailable ( ) )
************************************
[+] input: Exception { try(Reader in = Resources.getResourceAsReader(CLASS_LOADER, JPETSTORE_PROPERTIES)) { "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(in)
[-] pred: org. junit. Assert. assertNotNull ( in )
************************************
[+] input: testCountTodaysDiagnosisKeysWithNoKeysFromToday() { //1 hour before today in hours since epoch long midnightToday = now(UTC).toEpochSecond(LocalTime.MIDNIGHT, UTC) / 3600; long oneHourBeforeToday = midnightToday - 1;  final var expKeys = list(buildDiagnosisKeyForSubmissionTimestamp(oneHourBeforeToday)); service.saveDiagnosisKeys(expKeys); int countOnDb = service.countTodaysDiagnosisKeys(); //there should not be an entry for today now "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, countOnDb)
[-] pred: org. junit. Assert. assertEquals ( 0, countOnDb )
************************************
[+] input: testSuffixArray2() { int[] arr = {1, 2, 1, 3, 1, 2, 1}; int[] suffixArray = SuffixArrays.buildSuffixArray(arr, 3); int[] expected = {6, 4, 0, 2, 5, 1, 3}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expected, suffixArray)
[-] pred: org. junit. Assert. assertArrayEquals ( expected, suffixArray )
************************************
[+] input: Exception { Class<?> clazz = Resources.classForName(ResourcesTest.class.getName()); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(clazz)
[-] pred: org. junit. Assert. assertNotNull ( clazz )
************************************
[+] input: StructureBuildingException { //standard unlocanted substitution BuildState state = new BuildState(mock(NameToStructureConfig.class)); Element word = new GroupingEl(WORD_EL);  Element amino = new TokenEl(GROUP_EL); Fragment aminoFrag = state.fragManager.buildSMILES("-N"); amino.setFrag(aminoFrag); Element substituent = new GroupingEl(SUBSTITUENT_EL); substituent.addChild(amino);  Element methanol = new TokenEl(GROUP_EL); methanol.setFrag(state.fragManager.buildSMILES("CO")); Element root = new GroupingEl(ROOT_EL); root.addChild(methanol);  word.addChild(substituent); word.addChild(root); StructureBuildingMethods.resolveRootOrSubstituentUnLocanted(state, substituent);  Set<Bond> interFragmentBonds =  state.fragManager.getInterFragmentBonds(aminoFrag); "<AssertPlaceHolder>"; assertEquals(ChemEl.C, interFragmentBonds.iterator().next().getOtherAtom(aminoFrag.getFirstAtom()).getElement()); }
[*] target: assertEquals(1, interFragmentBonds.size())
[-] pred: org. junit. Assert. assertEquals ( 1, interFragmentBonds. size ( ) )
************************************
[+] input: testValid() { // given final PropertyExistsConstraint<String> constraint = new PropertyExistsConstraint<>(); final String propName = "app.property"; final String value = "12345678"; final Class<String> propertyClass = String.class; final boolean present = true; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(configViolation)
[-] pred: org. junit. Assert. assertNull ( configViolation )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/LoadBalancerListener.cmd")); String actual = exportLoadBalancerListeners.getTFImport(getAwsListeners()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: resetPasswordTokenNotExists() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user));  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertNotEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verifyNoInteractions(securityTokenRepository); verifyNoInteractions(passwordEncoder); verifyNoInteractions(mailService); }
[*] target: assertFalse(passwordChanged)
[-] pred: org. junit. Assert. assertFalse ( passwordChanged )
************************************
[+] input: should_create_empty_packet_correctly() { OpusPacket opusPacket = OpusPackets.newPacket(Config.of(12), Channel.STEREO, 0); assertEquals(0, opusPacket.getCode()); assertFalse(opusPacket.isVbr()); assertFalse(opusPacket.hasPadding()); assertEquals(1, opusPacket.getFrameCount()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, opusPacket.getPadLenBytesSum())
[-] pred: org. junit. Assert. assertEquals ( 0, opusPacket. getPadLenBytesSum() )
************************************
[+] input: shouldProperlyGetGroupById() { //given Integer androidGroupId = 16;  //when GroupDiscussionInfo groupById = groupClient.getGroupById(androidGroupId);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(16, groupById.getId()); Assertions.assertEquals(TECH, groupById.getType()); Assertions.assertEquals("android", groupById.getKey()); }
[*] target: assertNotNull(groupById)
[-] pred: org. junit. Assert. assertNotNull ( groupById )
************************************
[+] input: given_an_available_object_when_redis_contains_then_return_true() { //Given IdempotencyKey idempotencyKey = new IdempotencyKey("key"); var key = new IdempotencyKey("key"); var wrapper = new IdempotentRequestResponseWrapper( new IdempotentRequestWrapper(new Object())); when(valueOperations.get(key.getKeyValue())).thenReturn(wrapper);  //When Boolean isContain = redisIdempotentRepository.contains(idempotencyKey);  //Then verify(valueOperations, times(1)).get(idempotencyKey.getKeyValue()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isContain)
[-] pred: org. junit. Assert. assertTrue ( isContain )
************************************
[+] input: changeUserPassword() { RegisterDTO dto = new RegisterDTO(); dto.setUsername("pedro&佩德罗"); dto.setPassword("123456"); dto.setConfirmPassword("123456"); UserDO user = userService.createUser(dto); assertEquals("pedro&佩德罗", user.getUsername()); boolean valid = userIdentityService.verifyUsernamePassword(user.getId(), "pedro&佩德罗", "123456"); assertTrue(valid);  ResetPasswordDTO dto1 = new ResetPasswordDTO(); dto1.setNewPassword("147258"); dto1.setConfirmPassword("147258"); boolean b = adminService.changeUserPassword(user.getId(), dto1); "<AssertPlaceHolder>";  valid = userIdentityService.verifyUsernamePassword(user.getId(), "pedro&佩德罗", "147258"); assertTrue(valid); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: testDeployments() { final ServerOptions ops = ServerOptionsConfigure.newOpts() .scheduling(SchedulingOptionsConfigure.newOpts() .defaultScheduler("custom") .configured()) .route(RouteOptionsConfigure.newOpts().useCachedRouting(true).computeRate(20).configured()) .configured(); final Route r1 = Route.route(get("/foo")).schedule(Schedulers.io()); final Route r2 = Route.route(get("/bar")).schedule(Schedulers.biz()); final Route r3 = Route.route(get("/baz")); final ThreadPoolExecutor custom = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.SECONDS, new LinkedBlockingQueue<>()); final Restlite restlite = Restlite0.forServer(ops) .deployments() .addScheduler(Schedulers.fromExecutor("custom", custom)) .addSchedulers(Collections.singleton(Schedulers.fromExecutor("custom0", GlobalEventExecutor.INSTANCE))) .addRoute(r1) .addRoutes(Arrays.asList(r2, r3)) .addRequestTaskHook((RequestTaskHook) task -> null) .addRequestTaskHook((RequestTaskHookFactory) ctx -> Optional.empty()) .addRequestTaskHooks(Collections.singletonList(ctx -> Optional.empty())) .server(); restlite.start(); final ServerDeployContext<ServerOptions> ctx = restlite.deployments().deployContext(); "<AssertPlaceHolder>"; assertEquals(ops, ctx.options()); assertTrue(ctx.routeRegistry().isPresent()); assertNotNull(ctx.routeRegistry().get().routes()); assertEquals(3, ctx.routeRegistry().get().routes().size()); assertEquals(4, ctx.schedulers().size()); assertEquals(Schedulers.io(), ctx.schedulers().get(Schedulers.IO)); final Scheduler biz = ctx.schedulers().get(Schedulers.BIZ); assertTrue(biz instanceof ExecutorScheduler); assertTrue(((ExecutorScheduler) biz).executor() instanceof ThreadPoolExecutor); final ThreadPoolExecutor bizPool = (ThreadPoolExecutor) ((ExecutorScheduler) biz).executor(); assertEquals(ops.getBizThreads().getCore(), bizPool.getCorePoolSize()); assertEquals(ops.getBizThreads().getMax(), bizPool.getMaximumPoolSize()); assertEquals(ops.getBizThreads().getKeepAliveTimeSeconds(), bizPool.getKeepAliveTime(TimeUnit.SECONDS)); final Scheduler customScheduler = ctx.schedulers().get("custom"); assertTrue(customScheduler instanceof ExecutorScheduler); assertEquals(custom, ((ExecutorScheduler) customScheduler).executor()); assertTrue(custom.getRejectedExecutionHandler() instanceof BaseDeployments.BizRejectedHandler); }
[*] target: assertNotNull(ctx)
[-] pred: org. junit. Assert. assertNotNull ( ctx )
************************************
[+] input: test_tupleOperations_shouldSerializeCorrectly_ifFieldIsDefinedByName() { final String FIELD_DATA = "data"; List<String> object = Arrays.asList("test1", "test2");  final String FIELD_TS = "ts"; long epochSecond = 12345L;  final String FIELD_SPLICE = "test";  TupleOperations tupleOperations = TupleOperations .set(FIELD_DATA, object) .andSet(FIELD_TS, epochSecond) .andSplice(FIELD_SPLICE, 1, 2, "rep");  Value value = mapperFactory.defaultComplexTypesMapper().toValue(tupleOperations.asProxyOperationList());  Value cond1 = ValueFactory.newArray( ValueFactory.newString("="), ValueFactory.newString(FIELD_DATA), ValueFactory.newArray(ValueFactory.newString(object.get(0)), ValueFactory.newString(object.get(1))));  Value cond2 = ValueFactory.newArray( ValueFactory.newString("="), ValueFactory.newString(FIELD_TS), ValueFactory.newInteger(epochSecond));  Value cond3 = ValueFactory.newArray( ValueFactory.newString(":"), ValueFactory.newString(FIELD_SPLICE), ValueFactory.newInteger(1), ValueFactory.newInteger(2), ValueFactory.newString("rep"));  Value expected = ValueFactory.newArray(cond1, cond2, cond3);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, value)
[-] pred: org. junit. Assert. assertEquals ( expected, value )
************************************
[+] input: testDisablePayloadSupport() { PayloadStorageConfiguration payloadStorageConfiguration = new PayloadStorageConfiguration(); payloadStorageConfiguration.setPayloadSupportDisabled();  "<AssertPlaceHolder>"; assertNull(payloadStorageConfiguration.getS3BucketName()); }
[*] target: assertNull(payloadStorageConfiguration.getS3Client())
[-] pred: org. junit. Assert. assertNull ( payloadStorageConfiguration. getS3Client() )
************************************
[+] input: getResourceMaps() { // given List<AWSEgressOnlyInternetGateway> internetGateways = getAwsEgressOnlyInternetGateways();  Maps<Resource> resourceMaps = exportEgressOnlyInternetGateways.getResourceMaps(internetGateways); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/EgressOnlyInternetGateway.tf")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: edgeCase2_emptyString() { ThreadDumpRegion region = new ThreadDumpRegion("", 0, 0); "<AssertPlaceHolder>"; }
[*] target: assertFalse(region.findNextStack())
[-] pred: org. junit. Assert. assertFalse ( region. findNextStack() )
************************************
[+] input: lineCircleIntersection3() { double[][] points = GeometryTools.lineCircleIntersection(0, 1, -7, 1, 1, 5); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, points.length)
[-] pred: org. junit. Assert. assertEquals ( 0, points. length )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/IamInstanceProfile.cmd")); String actual = exportIamInstanceProfiles.getTFImport(getInstanceProfiles()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getResourceMaps() { List<AWSMskCluster> awsMskClusters = getAwsMskClusters();  Maps<Resource> resourceMaps = exportMskClusters.getResourceMaps(awsMskClusters); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/MskCluster.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getResourceMaps() { // given List<AWSInternetGateway> internetGateways = getAwsInternetGateways();  Maps<Resource> resourceMaps = exportInternetGateways.getResourceMaps(internetGateways); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/InternetGateway.tf")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("[SiH2]="); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
[+] input: Exception { // given String siteId = null; String documentId = "0a5f8534-4c27-4fb3-b50f-09015dd96927";  Map<String, Object> map = loadRequest("/insert_subdocument.json", null, null);  // when processor.handleRequest(map, this.context);  // then List<String> documents = service.searchFulltext(siteId, documentId, MAX); "<AssertPlaceHolder>";  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(0, syncs.getResults().size()); }
[*] target: assertEquals(0, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 0, documents. size ( ) )
************************************
[+] input: testGetTweetByIdWithExpansions() { String  tweetId = "1361010662714007557"; TweetV2 tweet   = (TweetV2) twitterClient.getTweet(tweetId); "<AssertPlaceHolder>"; assertEquals(3, tweet.getIncludes().getUsers().size()); Assertions.assertEquals("RedouaneBali", tweet.getIncludes().getUsers().get(0).getName()); Assertions.assertEquals("TwitterDev", tweet.getIncludes().getUsers().get(1).getName()); Assertions.assertEquals("jessicagarson", tweet.getIncludes().getUsers().get(2).getName()); assertEquals(1, tweet.getIncludes().getTweets().size()); assertEquals("2244994945", tweet.getIncludes().getTweets().get(0).getAuthorId()); assertEquals("1341761599976181763", tweet.getIncludes().getTweets().get(0).getId()); assertNotNull(tweet.getIncludes().getTweets().get(0).getEntities()); }
[*] target: assertNotNull(tweet)
[-] pred: org. junit. Assert. assertNotNull ( tweet )
************************************
[+] input: Exception { VerifiableIndyCredential vc = loadAndConvertTo( "files/verifiableCredentialAdHocContext.json", VerifiableIndyCredential.class); final VerifiablePresentationBuilder<VerifiableIndyCredential> builder = VerifiablePresentation.builder(); VerifiablePresentation<VerifiableIndyCredential> vp = builder .verifiableCredential(List.of(vc)) .build(); final Optional<VerifiablePresentation<VerifiableIndyCredential>> signed = mgmt.sign(vp); "<AssertPlaceHolder>"; assertNotNull(signed.get().getProof()); }
[*] target: assertTrue(signed.isPresent())
[-] pred: org. junit. Assert. assertTrue ( signed. isPresent ( ) )
************************************
[+] input: jwtDecodeSuccess() { // given SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder(); AppJwt appJwt = AppJwt.builder().userId(TEST_USER_ID).expiration(LocalDateTime.now().plusHours(1)).build(); String encodedJwt = jwtEncoderDecoder.encode(appJwt, VALID_SECRET);  // when AppJwt decodedJwt = jwtEncoderDecoder.decode(encodedJwt, VALID_SECRET);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(decodedJwt.getUserId(), TEST_USER_ID); Assertions.assertNotNull(decodedJwt.getExpiration()); }
[*] target: assertNotNull(decodedJwt)
[-] pred: org. junit. Assert. assertNotNull ( decodedJwt )
************************************
[+] input: IOException { String modalContent = TestUtils.getFileContent("files/invocation_template.json"); InvocationModal invocationModal = OBJECT_MAPPER.readValue(modalContent, InvocationModal.class); invocationModal.getActions().get(0).setBlockId(BLOCK_ID_HOURS_INPUT); invocationModal.getView() .getState() .getStateValues() .get(BLOCK_ID_HOURS_INPUT).setEndHour("07:00"); InteractionModal modal = userInteractionService.handleUserInteraction(invocationModal); "<AssertPlaceHolder>"; verify(slackClient).notifyUser(eq(SLACK_VIEW_UPDATE_URI), interactionModalCaptor.capture(), eq("test_user_id")); InteractionModal updateModal = interactionModalCaptor.getValue(); assertNotNull(updateModal.getView()); assertNotNull(updateModal.getViewId()); assertNotNull(updateModal.getHash()); assertNotNull(updateModal.getView().getType()); assertNotNull(updateModal.getView().getSubmit()); assertEquals(18, updateModal.getView().getBlocks().size()); Block warningBlock = updateModal.getView().getBlocks().get(8); assertEquals(BLOCK_ID_INVALID_HOURS, warningBlock.getBlockId()); assertEquals(":warning: start and end time cannot identical", warningBlock.getElements().get(0).getText()); }
[*] target: assertNull(modal)
[-] pred: org. junit. Assert. assertNull ( modal )
************************************
[+] input: toArgs_inputSetFields_ArgsSetFields() { /* ARRANGE */ final var params = Map.of("A", "AV", "B", "BV"); final var headers = Map.of("C", "CV", "D", "DV");  final var input = new QueryInput(); input.setParams(params); input.setHeaders(headers);  final var expected = new HttpService.HttpArgs(); expected.setParams(params); expected.setHeaders(headers);  /* ACT */ final var result = service.toArgs(input);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldReturnPageStepsInfoDtoWhenFetchPageStepsInfoSuccessGivenExistButNotMatchedLinkHeader() { HttpHeaders httpHeaders = buildHttpHeaders(NONE_TOTAL_PAGE_HEADER); List<BuildKiteBuildInfo> buildKiteBuildInfoList = new ArrayList<>(); BuildKiteJob testJob = BuildKiteJob.builder().name(TEST_JOB_NAME).build(); buildKiteBuildInfoList.add(BuildKiteBuildInfo.builder().jobs(List.of(testJob)).build()); ResponseEntity<List<BuildKiteBuildInfo>> responseEntity = new ResponseEntity<>(buildKiteBuildInfoList, httpHeaders, HttpStatus.OK); when(buildKiteFeignClient.getPipelineSteps(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any())) .thenReturn(responseEntity);  PageStepsInfoDto pageStepsInfoDto = cachePageService.fetchPageStepsInfo(MOCK_TOKEN, TEST_ORG_ID, TEST_PIPELINE_ID, "1", "100", MOCK_START_TIME, MOCK_END_TIME, List.of("main"));  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageStepsInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(1); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
[+] input: createBusinessAppHdrV01() { BusinessAppHdrV01 h = AppHdrFactory.createBusinessAppHdrV01( "AAAAUSXXXXX", "BBBBUSXXXXX", "REF12345", new MxId("pacs.008.001.08")); "<AssertPlaceHolder>"; assertNull(h.getBizSvc()); assertEquals("AAAAUSXXXXX", h.getFr().getFIId().getFinInstnId().getBICFI()); assertEquals("BBBBUSXXXXX", h.getTo().getFIId().getFinInstnId().getBICFI()); assertEquals("REF12345", h.getBizMsgIdr()); assertEquals("pacs.008.001.08", h.getMsgDefIdr());  final String xml = h.xml(); // for BAH v01 the date time must be ISONormalisedDateTime assertTrue(xml.contains("Z</CreDt>")); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
[+] input: CryptoException { KeyPair ownerKeys = TestUtils.generateKeyPair(); KeyPair notOwnerKeys = TestUtils.generateKeyPair(); ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry(ownerKeys, notOwnerKeys, 1);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
[+] input: testInterpolationDisabled() { VirtualInput virtual = new VirtualInput(LOGGER);  virtual.CAMERA_ANGLE.setCamera(0f, 0f); virtual.CAMERA_ANGLE.updateNextCameraAngle(10f, 20f); virtual.CAMERA_ANGLE.updateNextCameraAngle(20f, 30f);  Triple<Float, Float, Float> expected = Triple.of(30f, 50f+180f, 0f); Triple<Float, Float, Float> actual = virtual.CAMERA_ANGLE.getInterpolatedState(0f, 1f, 2f, false);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: whenGroupTransactionIsCreated_thenRetrievedMsgIsSuccess() { //        //Arrange // //        String personEmail = "manuel@gmail.com"; //        String groupDenomination = "Fontes Family"; //        String groupDescription = "All members from Fontes family"; // // //        String denominationCategory = "IRS"; //        String type = "debit"; //        String transactionDescription = "May IRS"; //        double amount = 150.0; //        String denominationAccountDeb = "Bank Account"; //        String denominationAccountCred = "State"; // // //        //Expected result //        Denomination denomination = Denomination.createDenomination(groupDenomination); //        Description description = Description.createDescription(groupDescription); //        DateOfCreation dateOfCreation = DateOfCreation.createDateOfCreation(LocalDate.now()); //        GroupDTO isTransactionCreatedExpected = GroupDTOAssembler.createDTOFromDomainObject(denomination, description, dateOfCreation); // //        NewGroupTransactionInfoDTO newGroupTransactionInfoDTO = new NewGroupTransactionInfoDTO(denominationCategory, type, transactionDescription, amount, denominationAccountDeb, denominationAccountCred); // //        CreateGroupTransactionDTO createGroupTransactionDTO = CreateGroupTransactionDTOAssembler.createDTOFromPrimitiveTypes(groupDenomination, personEmail, newGroupTransactionInfoDTO.getDenominationCategory(), newGroupTransactionInfoDTO.getDenominationAccountDeb(), newGroupTransactionInfoDTO.getDenominationAccountCred(), newGroupTransactionInfoDTO.getAmount(), newGroupTransactionInfoDTO.getType(), newGroupTransactionInfoDTO.getDescription()); // //        //Expected Response Entity //        ResponseEntity<Object> expectedResponse = new ResponseEntity<>(isTransactionCreatedExpected, HttpStatus.CREATED); // //        // Mock the behaviour of the service's createCategoryAsPersonInCharge method, //        // so it does not depend on other parts (e.g. DB) //        Mockito.when(service.createGroupTransaction(createGroupTransactionDTO)).thenReturn(isTransactionCreatedExpected); // //        //Act // //        ResponseEntity<Object> isCategoryCreated = controller.createGroupTransaction(newGroupTransactionInfoDTO, personEmail, groupDenomination); // //        //Assert //        "<AssertPlaceHolder>"; //    }
[*] target: assertEquals(expectedResponse, isCategoryCreated)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, isCategoryCreated )
************************************
[+] input: testDoFixValueAssert_notAsExpected() { EqualsAssertion equalsAssertion = MockEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "1");  boolean assertionResult = equalsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
[+] input: getResourceMaps() { List<AWSRestApi> awsRestApis = List.of( AWSRestApi.builder() .restApi(RestApi.builder() .name("PetStore") .description("Your first API with Amazon API Gateway. This is a sample API that integrates via HTTP with our demo Pet Store endpoints") .apiKeySource(ApiKeySourceType.HEADER) .disableExecuteApiEndpoint(false) .endpointConfiguration(EndpointConfiguration.builder() .types(EndpointType.REGIONAL) .build()) .build() ) .awsStage(AWSStage.builder() .stage(Stage.builder() .stageName("PROD") .deploymentId("0t5yci") .tracingEnabled(false) .build()) .awsDeployment(AWSDeployment.builder() .restApiName("PetStore") .deployment( GetDeploymentResponse.builder() .id("0t5yci") .description("test deploy") .build()) .build()) .build()) .build());  Maps<Resource> resourceMaps = exportApigatewayRestApis.getResourceMaps(awsRestApis); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/ApigatewayRestApi.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { // given DropboxClient testee = spy(new DropboxClient(dropboxService));  // Mocking a file is not a good idea File testFileToUpload = new File("src/test/resources/testFileToUpload.txt"); if (!testFileToUpload.exists()) { System.out.println("Test file does not exist..."); } // TODO what to return here? when(dropboxService.files().uploadBuilder(anyString()).uploadAndFinish(any())).thenReturn(null); doReturn(true).when(testee).doesFileExist(anyString());  // when boolean result = testee.upload(testFileToUpload);  // then // TODO verify each method call in call chain? verify(dropboxService.files().uploadBuilder("/testFileToUpload.txt")).uploadAndFinish(any(FileInputStream.class)); verify(testee).doesFileExist("testFileToUpload.txt"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: shouldNotUpdateCommunityAmenitySuccessfullyIfSavingFails() { // given Amenity testAmenity = TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION); Amenity updatedAmenity = getUpdatedCommunityAmenity(); AmenityDto updatedDto = getTestAmenityDto(); Community community = TestUtils.CommunityHelpers.getTestCommunity();  given(amenityRepository.findByAmenityId(TEST_AMENITY_ID)) .willReturn(Optional.of(testAmenity)); given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID)) .willReturn(Optional.of(community)); given(amenityRepository.save(updatedAmenity)) .willReturn(null);  // when boolean result = amenitySDJpaService.updateAmenity(updatedDto);  // then "<AssertPlaceHolder>"; verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID); verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID); verify(amenityRepository).save(updatedAmenity); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testHashPasswordCorrectly() { PasswordUtils utils = new PasswordUtils();  String password = "mypassword"; String hashed = PasswordUtils.hashPassword(password); assertNotNull(hashed);  boolean isValid = PasswordUtils.checkPassword(password, hashed); assertTrue(isValid);  isValid = PasswordUtils.checkPassword("notmypassword", hashed); "<AssertPlaceHolder>"; }
[*] target: assertFalse(isValid)
[-] pred: org. junit. Assert. assertFalse ( isValid )
************************************
[+] input: test_convert_csv_line_default() { String[] record = {"1", "apple", "10", "9.99"}; String expected = ""1","apple","10","9.99"";  String result = writer.convertToCsvFormat(record); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: NoSuchMethodException { // given Method method = MyService.class.getMethod("doStuff");  // when Method ifMethod = LogRecordOperationSource.getInterfaceMethodIfPossible(method);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(MyIf.class.getMethod("doStuff"), ifMethod); }
[*] target: assertNotNull(ifMethod)
[-] pred: org. junit. Assert. assertNotNull ( ifMethod )
************************************
[+] input: IOException { final InputStream[] ch = prepareStreams();  int available = 0; for (InputStream child : ch) available += child.available();  final InputStream in = new CompositeInputStream(ch); "<AssertPlaceHolder>"; }
[*] target: assertEquals(available, in.available())
[-] pred: org. junit. Assert. assertEquals ( available, in. available() )
************************************
[+] input: shouldReturnNumber_whenItsOnly() { int[] arr = { 5 }; int expected = 5;  int actual = oddOccurrences.getNumberWithOddOccurrences(arr);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: assertEquals ( expected, actual )
************************************
[+] input: testCloseQuietly() { IOUtils.closeQuietly(() -> { throw new IOException(); });  final AtomicBoolean closed = new AtomicBoolean(false); IOUtils.closeQuietly(() -> closed.set(true)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(closed.get())
[-] pred: org. junit. Assert. assertTrue ( closed. get ( ) )
************************************
[+] input: GestaltException { // Arrange String config = ""; String format = "properties";  StringConfigSourceBuilder builder = StringConfigSourceBuilder.builder(); builder.setConfig(config) .setFormat(format);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  StringConfigSource stringConfigSource = (StringConfigSource) configSourcePackage.getConfigSource(); assertTrue(stringConfigSource.hasStream()); assertEquals(format, stringConfigSource.format()); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
[+] input: testApply() { var jvmArgs = "-Xmx9001m"; var jvmVersion = "11.0.1"; var startTime = Instant.now(); var eventTime = Instant.now().plus(12, MILLIS); var expectedAttributes = new Attributes() .put(JVM_ARGUMENTS, jvmArgs) .put(JVM_START_TIME, startTime.toEpochMilli()) .put(JVM_VERSION, jvmVersion); var expectedEvent = new Event(JFR_JVM_INFORMATION, expectedAttributes, eventTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class);  when(event.getStartTime()).thenReturn(eventTime); when(event.getString(JVM_ARGUMENTS)).thenReturn(jvmArgs); when(event.getInstant(JVM_START_TIME)).thenReturn(startTime); when(event.getString(JVM_VERSION)).thenReturn(jvmVersion);  var mapper = new JVMInformationMapper();  var result = mapper.apply(event);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: IOException { Document d = getBaseDocument("/jdocs/sample_11.json"); Document primary = new JDocument(); primary.setContent(d, "$.members[0]", "$.members[0]"); primary.setContent(d, "$.members[0]", "$.members[1]"); primary.setContent(d, "$.members[0]", "$.members[2]"); String expected = getCompressedJson("/jdocs/sample_11_expected.json"); String actual = primary.getJson(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetRecordingOptions() { Map<String, String> expected = new HashMap<>(); expected.put("name", "test"); expected.put("maxAge", "3m"); expected.put("maxSize", "1048576"); expected.put("dumpOnExit", "true"); expected.put("destination", "test.jfr"); expected.put("disk", "true"); expected.put("duration", "120s"); RecordingOptions opts = new RecordingOptions.Builder() .name("test") .maxAge("3 m") .maxSize("1048576") .dumpOnExit("true") .destination("test.jfr") .disk("true") .duration("120 s") .build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getRecordingOptions())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getRecordingOptions() )
************************************
[+] input: testCRC2CanCopyItself() { byte[] buf1 = randombuf(1024); byte[] buf2 = randombuf(1024);  CRC32 crc1 = new CRC32();  crc1.update(buf1, 0, buf1.length);  CRC32 crc2 = crc1.copy();  crc1.update(buf2, 0, buf1.length); crc2.update(buf2, 0, buf1.length);  long expected = crc1.getValue(); long actual = crc2.getValue();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Efs.cmd")); String actual = exportEfses.getTFImport(getAwsEfs()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetOneMetadataReportForIpFormat() { String hostName = NetUtils.getLocalAddress().getHostName(); String ip = NetUtils.getIpByHost(hostName); URL url1 = URL.valueOf("zookeeper://" + hostName + ":4444/org.apache.dubbo.TestService?version=1.0.0&application=vic"); URL url2 = URL.valueOf("zookeeper://" + ip + ":4444/org.apache.dubbo.TestService?version=1.0.0&application=vic"); MetadataReport metadataReport1 = metadataReportFactory.getMetadataReport(url1); MetadataReport metadataReport2 = metadataReportFactory.getMetadataReport(url2); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(metadataReport1, metadataReport2)
[-] pred: org. junit. Assert. assertEquals ( metadataReport1, metadataReport2 )
************************************
[+] input: shouldRetrieveAnEmptyInvolvedObject_onceEventInvolvedObjectHasNoValue() { event.setInvolvedObject(null); ObjectReference reference = ObjectReferenceMapper.map(event.getInvolvedObject()); "<AssertPlaceHolder>"; }
[*] target: assertNull(reference)
[-] pred: org. junit. Assert. assertNull ( reference )
************************************
[+] input: updateGroup() { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); groupMapper.insert(group);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组1儿子"); dto.setInfo("测试分组1儿子info"); boolean ok = adminService.updateGroup(group.getId(), dto); "<AssertPlaceHolder>"; GroupDO selected = groupMapper.selectById(group.getId()); assertEquals(selected.getName(), "测试分组1儿子"); assertEquals(selected.getInfo(), "测试分组1儿子info"); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
[+] input: testCenterHeadingEven() { String actual = SerialiserFlavorBase.createCenteredHeading("TASfile", '#', 52); String expected = "###################### TASfile #####################"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: mapDateStringToDate_shouldNotMapWhenStringIsNull() { String expected = null;  LocalDate actual = dateMapper.mapDateStringToDate(expected);  "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: it_recognizes_non_empty_line() { CobolLine line1 = new CobolLine("               WHEN OUTPUT-OK", tokenExtractor);  boolean isEmpty = Interpreter.isEmpty(line1);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(isEmpty)
[-] pred: org. junit. Assert. assertFalse ( isEmpty )
************************************
[+] input: testNotifyoverrideUrls_beforeInvoker() { RegistryDirectory registryDirectory = getRegistryDirectory(); List<URL> overrideUrls = new ArrayList<URL>(); overrideUrls.add(URL.valueOf("override://0.0.0.0?timeout=1&connections=5")); registryDirectory.notify(overrideUrls); //The registry is initially pushed to override only, and the dirctory state should be false because there is no invoker. Assertions.assertFalse(registryDirectory.isAvailable());  //After pushing two provider, the directory state is restored to true List<URL> serviceUrls = new ArrayList<URL>(); serviceUrls.add(SERVICEURL.addParameter("timeout", "1000")); serviceUrls.add(SERVICEURL2.addParameter("timeout", "1000").addParameter("connections", "10"));  registryDirectory.notify(serviceUrls); Assertions."<AssertPlaceHolder>";  //Start validation of parameter values  invocation = new RpcInvocation();  List<Invoker<?>> invokers = registryDirectory.list(invocation); Assertions.assertEquals(2, invokers.size());  Assertions.assertEquals("1", invokers.get(0).getUrl().getParameter("timeout"), "override rute must be first priority"); Assertions.assertEquals("5", invokers.get(0).getUrl().getParameter("connections"), "override rute must be first priority"); }
[*] target: assertTrue(registryDirectory.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( registryDirectory. isAvailable ( ) )
************************************
[+] input: CryptoException { KeyPair ownerKeys = TestUtils.generateKeyPair(); ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry(ownerKeys, ownerKeys, 1);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
[+] input: shouldLimitResultsUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { BlogMapper mapper = session.getMapper(BlogMapper.class); List<Map> posts = mapper.selectAllPosts(new RowBounds(0, 2), null); "<AssertPlaceHolder>"; assertEquals(1, posts.get(0).get("ID")); assertEquals(2, posts.get(1).get("ID")); } }
[*] target: assertEquals(2, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, posts. size ( ) )
************************************
[+] input: selectByPrimaryKeyWithOtherTenant() { InlongGroupEntity entity = createGroupEntity(); groupEntityMapper.insert(entity); setOtherTenant(ANOTHER_TENANT); InlongGroupEntity groupEntity = groupEntityMapper.selectByPrimaryKey(entity.getId()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(groupEntity)
[-] pred: org. junit. Assert. assertNull ( groupEntity )
************************************
[+] input: should_generate_hash_when_request_body_null() { //given String expectedSignature = "lecLrGZXo5u+Oq3V33vIqtbLU2fopbiH78kq6wjWNDQ=";  //when String signature = HashGenerator.generateHash("http://api.craftgate.io", "api-key", "secret-key", "rand-2010", null, "/onboarding/v1/members");  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSignature, signature)
[-] pred: org. junit. Assert. assertEquals ( expectedSignature, signature )
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry( buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()), receiverKeys, 1);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
[+] input: mapEntityToDto_shouldMapEntityToDto() { //Arrange UserDto expected = userDto1;  //Act UserDto actual = userMapper.mapEntityToDto(user1);  //Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: demoAndV2BatchIdStringFormatIsCorrect() { BatchId id = new BatchId(123, Optional.of(45)); String stringId = "123_45"; "<AssertPlaceHolder>"; assertEquals(id, new BatchId(stringId)); }
[*] target: assertEquals(stringId, id.toString())
[-] pred: org. junit. Assert. assertEquals ( stringId, id. toString ( ) )
************************************
[+] input: selectUserGroupIDs() { String email = "13129982604@qq.com"; String username = "pedro-test"; UserDO user = new UserDO(); user.setEmail(email); user.setUsername(username); userMapper.insert(user);  GroupDO group = GroupDO.builder().name("group").info("零零落落").build(); groupMapper.insert(group);  userGroupMapper.insert(new UserGroupDO(user.getId(), group.getId()));  List<Integer> groupIds = groupMapper.selectUserGroupIds(user.getId()); boolean anyMatch = groupIds.stream().anyMatch(it -> it.equals(group.getId())); "<AssertPlaceHolder>"; }
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
[+] input: shouldBeCorrectCallInvocationsForFunctions() { var visitor = ReportTypeVisitor.<Void, ReportType>createFunctionalVisitor( VOID -> ReportType.OBSERVER_EVENT, VOID -> ReportType.CALL_EVENT, VOID -> ReportType.CALL_META_DATA, VOID -> ReportType.CLIENT_EXTENSION_DATA, VOID -> ReportType.PEER_CONNECTION_TRANSPORT, VOID -> ReportType.ICE_CANDIDATE_PAIR, VOID -> ReportType.PEER_CONNECTION_DATA_CHANNEL, VOID -> ReportType.INBOUND_AUDIO_TRACK, VOID -> ReportType.INBOUND_VIDEO_TRACK, VOID -> ReportType.OUTBOUND_AUDIO_TRACK, VOID -> ReportType.OUTBOUND_VIDEO_TRACK, VOID -> ReportType.SFU_EVENT, VOID -> ReportType.SFU_META_DATA, VOID -> ReportType.SFU_EXTENSION_DATA, VOID -> ReportType.SFU_TRANSPORT, VOID -> ReportType.SFU_INBOUND_RTP_PAD, VOID -> ReportType.SFU_OUTBOUND_RTP_PAD, VOID -> ReportType.SFU_SCTP_STREAM ); for (var expected : ReportType.values()) { var actual = visitor.apply(null, expected); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldReturnBoardReportId() { String timeStamp = "121322545121"; String expected = "board-121322545121";  String boardReportId = IdUtil.getBoardReportId(timeStamp);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, boardReportId)
[-] pred: org. junit. Assert. assertEquals ( expected, boardReportId )
************************************
[+] input: getResourceMaps() { List<AWSReservation> awsReservations = getAwsReservations();  Maps<Resource> resourceMaps = exportInstances.getResourceMaps(awsReservations); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Instance.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: generateTextWalksForEntity() { NxMemoryWalkGenerator parser = new NxMemoryWalkGenerator(); parser.setParseDatatypeProperties(true); assertTrue(parser.isParseDatatypeProperties); parser.readNtriples(loadFile("dummyGraph_with_labels.nt"));  // walk depth 8 List<String> result = parser.generateTextWalksForEntity("W", 8); "<AssertPlaceHolder>"; assertTrue(result.contains("W rdfs:label gedichte")); String expectedSentence = "W rdf:Description wer reitet so spät durch nacht"; assertTrue(result.contains(expectedSentence), "Could not find String '" + expectedSentence + "'.\n" + transformToString(result) + "\nNumber of walks: " + result.size()); assertFalse(result.contains("W rdf:Description wer reitet"));  // walk depth 4 result = parser.generateTextWalksForEntity("W", 4); assertNotNull(result); assertTrue(result.contains("W rdfs:label gedichte")); assertTrue(result.contains("W rdf:Description wer reitet")); assertFalse(result.contains("W rdf:Description wer reitet so spät durch nacht")); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: getResourceMaps() { AWSAccount awsAccount = getAwsAccount();  Maps<Resource> resourceMaps = exportApiGatewayAccount.getResourceMaps(awsAccount); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Apigateway.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("#[SiH]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
[+] input: should_result_long_number_of_bytes_when_kib_symbol() {  var expected = 1 * 1024l;  var actual = NumberUtil.fromHumanReadable("1KiB");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: changeUserPassword1() { assertThrows(NotFoundException.class, () -> { Random random = new Random(); ResetPasswordDTO dto1 = new ResetPasswordDTO(); dto1.setNewPassword("147258"); dto1.setConfirmPassword("147258"); boolean b = adminService.changeUserPassword(random.nextInt(), dto1); "<AssertPlaceHolder>"; }); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
[+] input: buildProgressChart_shouldBuildPieChartWithOneDraft() { ChartCreationOptions chartCreationOptions = new ChartCreationOptions(); chartCreationOptions.setChartType(ChartInformationTypeEnum.LINE_PROGRESS); Collection<Long> teamIds = List.of(10L, 20L); chartCreationOptions.setTeamIds(teamIds); chartCreationOptions.setTitle("TestTitle");  OkrTopicDraft okrTopicDraft1 = new OkrTopicDraft(); okrTopicDraft1.setCurrentStatus(OkrTopicDraftStatusEnum.draft);  when(topicDraftService.getAllTopicDrafts()).thenReturn(List.of(okrTopicDraft1));  PieChartOptionsDto result = pieChartService.buildTopicDraftOverviewChart(chartCreationOptions);  "<AssertPlaceHolder>"; assertEquals("TestTitle", result.getTitle()); assertEquals(4, result.getSeries().length); assertEquals(1, result.getSeries()[0]); assertEquals(0, result.getSeries()[1]); assertEquals(0, result.getSeries()[2]); assertEquals(0, result.getSeries()[3]); assertEquals(4, result.getValueLabels().length); assertEquals("Draft", result.getValueLabels()[0]); assertEquals("Submitted", result.getValueLabels()[1]); assertEquals("Approved", result.getValueLabels()[2]); assertEquals("Rejected", result.getValueLabels()[3]); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testISONoMilli() { final String ts = "2020-07-17T14:32:34Z"; Instant i = TimeUtil.fromISOInstant(ts); String time = TimeUtil.toISOInstantTruncated(i); "<AssertPlaceHolder>"; }
[*] target: assertEquals(ts, time)
[-] pred: org. junit. Assert. assertEquals ( ts, time )
************************************
[+] input: shouldOffsetAndLimitResultsUsingMapperClass() { try (SqlSession session = sqlMapper.openSession()) { BlogMapper mapper = session.getMapper(BlogMapper.class); List<Map> posts = mapper.selectAllPosts(new RowBounds(2, 3)); "<AssertPlaceHolder>"; assertEquals(3, posts.get(0).get("ID")); assertEquals(4, posts.get(1).get("ID")); assertEquals(5, posts.get(2).get("ID")); } }
[*] target: assertEquals(3, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 3, posts. size ( ) )
************************************
[+] input: Exception {  Properties p = ConfigUtils.loadProperties("META-INF/dubbo/internal/org.apache.dubbo.common.status.StatusChecker", true);  Properties expected = new Properties(); expected.put("memory", "org.apache.dubbo.common.status.support.MemoryStatusChecker"); expected.put("load", "org.apache.dubbo.common.status.support.LoadStatusChecker"); expected.put("aa", "12");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, p)
[-] pred: org. junit. Assert. assertEquals ( expected, p )
************************************
[+] input: Exception { var action = buildMethod("Act", "ion", ""); List<RecordedFrame> stack = new ArrayList<>(); stack.add(buildFrame(action, 21, 77)); String payload = "{"desc":"Act.ion","line":"21","bytecodeIndex":"77"}"; var expected = "{"type":"stacktrace","language":"java","version":1,"truncated":false,"payload":[" + payload + "]}"; var result = MethodSupport.jsonWrite(stack, Optional.empty()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: getUserByUserName() { String userName = "RedouaneBali"; User   result   = twitterClient.getUserFromUserName(userName); "<AssertPlaceHolder>"; }
[*] target: assertEquals(userName, result.getName())
[-] pred: org. junit. Assert. assertEquals ( userName, result. getName ( ) )
************************************
[+] input: FlashForgePrinterException { AdventurerClient client = new AdventurerClient(printerAddress); boolean replay = client.setLed(false); System.out.println(replay); client.close(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(replay)
[-] pred: org. junit. Assert. assertTrue ( replay )
************************************
[+] input: mapDtoToEntity_shouldExpectNotesNotNull() { keyResult = keyResultMapper.mapDtoToEntity(keyResultDto); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(keyResult)
[-] pred: org. junit. Assert. assertNotNull ( keyResult )
************************************
[+] input: testDoFixValueAssert_less() { LessThanOrEqualsAssertion lessThanOrEqualsAssertion = MockLessThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "-1");  boolean assertionResult = lessThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertTrue(assertionResult)
[-] pred: org. junit. Assert. assertTrue ( assertionResult )
************************************
[+] input: testDoneAfterCancel() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.cancel(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(f.isDone())
[-] pred: org. junit. Assert. assertTrue ( f. isDone() )
************************************
[+] input: testReader() { String content = "jdk.EvacuationFailed#enabled=true\n" + "# lines can start with comments\n" + "jdk.ClassLoad#threshold=0 ms\n" + "  # and comments can be indented\n" + "jdk.ReservedStackActivation#enabled=true\n";  Map<String, String> expected = new HashMap<>(); expected.put("jdk.EvacuationFailed#enabled", "true"); expected.put("jdk.ClassLoad#threshold", "0 ms"); expected.put("jdk.ReservedStackActivation#enabled", "true");  BufferedReader reader = new BufferedReader(new StringReader(content)); JfrSettingsReader settingsReader = new JfrSettingsReader() { @Override BufferedReader openResource(String resourceName) { return reader; } }; Map<String, String> result = settingsReader.read(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testF2() { for (int i = 1; i < MAX_VAl; i++) { int expected = Solution.f1(i); int actual = Solution.f2(i); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: given_an_unavailable_object_when_redis_contains_then_return_false() { //Given IdempotencyKey idempotencyKey = new IdempotencyKey("key1");  //When Boolean isContain = redisIdempotentRepository.contains(idempotencyKey);  //Then verify(valueOperations, times(1)).get(idempotencyKey.getKeyValue()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(isContain)
[-] pred: org. junit. Assert. assertFalse ( isContain )
************************************
[+] input: toModel_validInput_returnArtifactView() { /* ARRANGE */ final var artifact = getArtifact();  /* ACT */ final var result = artifactViewAssembler.toModel(artifact);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(artifact.getTitle(), result.getTitle()); Assertions.assertEquals(artifact.getByteSize(), result.getByteSize()); Assertions.assertEquals(artifact.getCheckSum(), result.getCheckSum()); Assertions.assertEquals(artifact.getNumAccessed(), result.getNumAccessed()); Assertions.assertEquals(artifact.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(artifact.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(artifact.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(artifact.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getArtifactLink(artifact.getId()), selfLink.get().getHref());  final var dataLink = result.getLink("data"); assertTrue(dataLink.isPresent()); assertNotNull(dataLink.get()); assertEquals(getArtifactDataLink(artifact.getId()), dataLink.get().getHref());  final var representationsLink = result.getLink("representations"); assertTrue(representationsLink.isPresent()); assertNotNull(representationsLink.get()); assertEquals(getArtifactRepresentationsLink(artifact.getId()), representationsLink.get().getHref());  final var agreementsLink = result.getLink("agreements"); assertTrue(agreementsLink.isPresent()); assertNotNull(agreementsLink.get()); assertEquals(getArtifactAgreementsLink(artifact.getId()), agreementsLink.get().getHref()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, receiverKeys, senderKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
[+] input: testWrite() { Document d = new JDocument();  d.setString("$.id", "id"); d.setString("$.info.iid", "iid");  d.setString("$.members[0].first_name", "Deepak"); d.setString("$.members[%].first_name", "Deepak", "0"); d.setString("$.members[sex=male].first_name", "Deepak"); d.setString("$.members[sex=male].last_name", "Arora");  d.setString("$.members[sex=male].phones[type=home].type", "home"); d.setString("$.members[sex=%].phones[type=%].type", "home", "male", "home");  d.setString("$.members[0].phones[type=home].number", "9999999999"); d.setString("$.info.iid", "12345678"); d.setString("$.addresses[0].line_1", "line 1"); d.setString("$.addresses[1].line_1", "line 1"); d.setString("$.addresses[2].line_1", "line 1"); d.setInteger("$.members[0].index", 0); d.setLong("$.members[0].index", 0); d.setBoolean("$.members[0].phones[type=home].is_primary", true); d.setString("$.members[sex=female].first_name", "Nitika");  String expected = getCompressedJson("/jdocs/sample_5_expected.json"); String actual = d.getJson(); "<AssertPlaceHolder>";  // exception scenarios UnifyException e = assertThrows(UnifyException.class, () -> { d.setString("$.addresses[4].line_1", "line 1"); }); assertEquals("jdoc_err_17", e.getErrorCode()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: equals_false_when_different_value() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(3.0, 2.0, 1.0);  // Act boolean areEqual = vec3c1.equals(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: setPropertyShouldDoNothingGetPropertyShouldReturnNull() { // prepare final Object key = new Object(); final Object value = new Object();  // run Stack s = new Stack(); s.setProperty(key, value);  // assert "<AssertPlaceHolder>";  }
[*] target: assertNull(s.getProperty(key))
[-] pred: org. junit. Assert. assertNull ( s. getProperty ( key ) )
************************************
[+] input: testGetDumpOnExitDefault() { String expected = "false"; RecordingOptions opts = new RecordingOptions.Builder().build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getDumpOnExit())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDumpOnExit() )
************************************
[+] input: testGetSecretsProvider_withoutParameter_shouldCreateDefaultClient() {  // Act SecretsProvider secretsProvider = ParamManager.getSecretsProvider();  // Assert "<AssertPlaceHolder>"; assertNotNull(secretsProvider.getClient()); }
[*] target: assertNotNull(secretsProvider)
[-] pred: org. junit. Assert. assertNotNull ( secretsProvider )
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, receiverKeys, receiverKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation() )
************************************
[+] input: hasStream() { SystemPropertiesConfigSource configSource = new SystemPropertiesConfigSource();  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(configSource.hasStream())
[-] pred: org. junit. Assert. assertTrue ( configSource. hasStream() )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/IamRolePolicyAttachment.cmd")); String actual = exportIamRolePolicyAttachments.getTFImport(getAwsRolePolicyAttachments()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testAdler32IsCompatibleWithJavaUtilZipAdler32() { byte[] buf1 = randombuf(1024); java.util.zip.Adler32 juza = new java.util.zip.Adler32(); juza.update(buf1, 0, buf1.length); long expected = juza.getValue(); long actual = getValue(Arrays.asList(buf1));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testDecoderCopyFromStart() { final char delim = ',';  final SequenceEncoder se = new SequenceEncoder(delim); se.append(1).append("blah blah blah,,,").append((String) null).append(42);  final SequenceEncoder.Decoder sd1 = new SequenceEncoder.Decoder(se.getValue(), delim);  final SequenceEncoder.Decoder sd2 = sd1.copy();  assertEquals(sd1.nextInt(-1), sd2.nextInt(-2)); assertEquals(sd1.nextToken("x"), sd2.nextToken("y")); assertEquals(sd1.nextToken("x"), sd2.nextToken("y")); assertEquals(sd1.nextInt(-1), sd2.nextInt(-2)); assertFalse(sd1.hasNext()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(sd2.hasNext())
[-] pred: org. junit. Assert. assertFalse ( sd2. hasNext() )
************************************
[+] input: testIsTailingFalse() { final File file = new File(EXISTS); final Tailer tailer = new Tailer(file); "<AssertPlaceHolder>"; }
[*] target: assertFalse(tailer.isTailing())
[-] pred: org. junit. Assert. assertFalse ( tailer. isTailing() )
************************************
[+] input: validUnknownAddress_returnsTrue() { String state = "NA"; String zip = "00000"; String street = "** Unknown / Not Given **"; "<AssertPlaceHolder>"; }
[*] target: assertTrue(isAddressUnknown(state, zip, street))
[-] pred: org. junit. Assert. assertTrue ( isAddressUnknown(state, zip, street) )
************************************
[+] input: testDoneAfterSet() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.set(42); "<AssertPlaceHolder>"; }
[*] target: assertTrue(f.isDone())
[-] pred: org. junit. Assert. assertTrue ( f. isDone() )
************************************
[+] input: BackendException { Object result = new Object(); KeyColumnValueStoreManager mock = mock(KeyColumnValueStoreManager.class); when(mock.getHadoopManager()).thenReturn(result); MetricInstrumentedStoreManager metricInstrumentedStoreManager = new MetricInstrumentedStoreManager(mock, "", true, "");  Object hadoopManager = metricInstrumentedStoreManager.getHadoopManager();  verify(mock).getHadoopManager(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(result, hadoopManager)
[-] pred: org. junit. Assert. assertEquals ( result, hadoopManager )
************************************
[+] input: Exception { final File originalPomFile = new File("src/test/resources/all/original-test-pom.xml"); final String originalPom = readPom(originalPomFile);  final File resultPomFile = new File("src/test/resources/all/result-test-pom.xml"); final String resultPom = readPom(resultPomFile);  final String modifiedPom = visitor.visit(originalPom, "test-revision", "test-sha1", "test-changelist");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(resultPom, modifiedPom)
[-] pred: org. junit. Assert. assertEquals ( resultPom, modifiedPom )
************************************
[+] input: testStorageTemplateDataOnSourcedSingleModel() { final List<TemplateData> allTemplatesData = StorageTemplateDataFactory.build("io.vlingo.xoomapp", "xoomapp", contents(), StorageType.JOURNAL, databaseTypes(), ProjectionType.EVENT_BASED, false, false);  //General Assert  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).count()); Assertions.assertEquals(1, allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).count());  //Assert for StateAdapter  final TemplateData entryAdapterTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.ADAPTER)).findFirst().get();  final TemplateParameters stateAdapterConfigurationParameters = entryAdapterTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, stateAdapterConfigurationParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals("BookRented", stateAdapterConfigurationParameters.find(TemplateParameter.SOURCE_NAME)); Assertions.assertEquals(StorageType.JOURNAL, stateAdapterConfigurationParameters.find(TemplateParameter.STORAGE_TYPE)); Assertions.assertEquals(1, stateAdapterConfigurationParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(stateAdapterConfigurationParameters.hasImport("io.vlingo.xoomapp.model.book.BookRented")); Assertions.assertEquals("BookRentedAdapter", entryAdapterTemplateData.filename());  //Assert for StoreProvider  final TemplateData storeProviderTemplateData = allTemplatesData.stream().filter(templateData -> templateData.hasStandard(JavaTemplateStandard.STORE_PROVIDER)).findFirst().get();  final TemplateParameters storeProviderParameters = storeProviderTemplateData.parameters();  Assertions.assertEquals(EXPECTED_PACKAGE, storeProviderParameters.find(TemplateParameter.PACKAGE_NAME)); Assertions.assertEquals(Model.DOMAIN, storeProviderParameters.find(TemplateParameter.MODEL)); Assertions.assertEquals("JournalProvider", storeProviderParameters.find(TemplateParameter.STORE_PROVIDER_NAME)); Assertions.assertEquals(4, storeProviderParameters.<Set<ImportParameter>>find(TemplateParameter.IMPORTS).size()); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookRented")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookPurchased")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.author.AuthorEntity")); Assertions.assertTrue(storeProviderParameters.hasImport("io.vlingo.xoomapp.model.book.BookEntity")); Assertions.assertEquals("BookRented", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getSourceClass()); Assertions.assertEquals("BookRentedAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(0).getAdapterClass()); Assertions.assertEquals("BookPurchased", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getSourceClass()); Assertions.assertEquals("BookPurchasedAdapter", storeProviderParameters.<List<Adapter>>find(TemplateParameter.ADAPTERS).get(1).getAdapterClass()); Assertions.assertEquals(2, storeProviderParameters.<Set<String>>find(TemplateParameter.AGGREGATES).size()); Assertions.assertTrue(storeProviderParameters.<Set<String>>find(TemplateParameter.AGGREGATES).contains("AuthorEntity")); Assertions.assertTrue(storeProviderParameters.<Set<String>>find(TemplateParameter.AGGREGATES).contains("BookEntity")); Assertions.assertEquals("JournalProvider", storeProviderTemplateData.filename()); }
[*] target: assertEquals(4, allTemplatesData.size())
[-] pred: org. junit. Assert. assertEquals ( 4, allTemplatesData. size ( ) )
************************************
[+] input: testConvertRGB() { Color color = convertPaint(CSSConstants.CSS_FILL_PROPERTY, "rgb(120, 30, 200)", ColorValue.RGB_FUNCTION); "<AssertPlaceHolder>"; assertEquals(120, color.getRed()); assertEquals(30, color.getGreen()); assertEquals(200, color.getBlue()); assertEquals(255, color.getAlpha());  assertNull(context.getColorSpace()); }
[*] target: assertNotNull(color)
[-] pred: org. junit. Assert. assertNotNull ( color )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/InternetGateway.cmd")); String actual = exportInternetGateways.getTFImport(getAwsInternetGateways()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { var duration = Duration.of(19, MILLIS); var expected = List.of();  var event = mock(RecordedEvent.class);  when(event.getDuration()).thenReturn(duration);  var mapper = new ThreadLockEventMapper();  var result = mapper.apply(event); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testGetDevelopers() { assertNotNull(graphqlController);  KnownApplicationImpl app = new KnownApplicationImpl("app-id", "app-name");  ApplicationOwnerRequest ownerRequest1 = new ApplicationOwnerRequest(); ownerRequest1.setApplicationId("app-id"); ownerRequest1.setUserName("developer1"); ownerRequest1.setState(RequestState.APPROVED); ApplicationOwnerRequest ownerRequest2 = new ApplicationOwnerRequest(); ownerRequest2.setApplicationId("app-id"); ownerRequest2.setUserName("developer2"); ownerRequest2.setState(RequestState.APPROVED); ApplicationOwnerRequest ownerRequest3 = new ApplicationOwnerRequest(); ownerRequest3.setApplicationId("app-id"); ownerRequest3.setUserName("developer3"); ownerRequest3.setState(RequestState.REJECTED); ApplicationOwnerRequest ownerRequest4 = new ApplicationOwnerRequest(); ownerRequest4.setApplicationId("application-id"); ownerRequest4.setUserName("developer4"); ownerRequest4.setState(RequestState.APPROVED);  when(applicationsService.getAllApplicationOwnerRequests()) .thenReturn(List.of(ownerRequest1, ownerRequest2, ownerRequest3, ownerRequest4)); List<String> developers = graphqlController.getDevelopers(app);  "<AssertPlaceHolder>"; assertEquals(2, developers.size()); assertEquals("developer1", developers.get(0)); assertEquals("developer2", developers.get(1)); }
[*] target: assertNotNull(developers)
[-] pred: org. junit. Assert. assertNotNull ( developers )
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://test-proxy.proxy-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertTrue(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains("test-proxy.proxy-XYZ.us-east-2.rds.amazonaws.com:1234")); }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: convertToEntityAttribute_inputNull_returnNull() { /* ACT */ final var result = uriConverter.convertToEntityAttribute(null);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: Exception { final ApacheHttpClient client = mock(ApacheHttpClient.class); final Request request = Request.create(HttpMethod.GET, "http://localhost", Collections.emptyMap(), Body.empty(), (RequestTemplate) null); final Response mockResponse = Response.builder().request(request).body("foo".getBytes()).build(); when(client.execute(any(), any())).thenReturn(mockResponse); final DccRevocationClientDelegator fixture = new DccRevocationClientDelegator(client); assertNotNull(mockResponse.body()); final Response response = fixture.execute(request, new Options()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(mockResponse, response)
[-] pred: org. junit. Assert. assertEquals ( mockResponse, response )
************************************
[+] input: extractHeaderFromMultipartMessage_mapWithHeaderValue_returnHeaderValue() { /* ARRANGE */ final var headerValue = "some header values"; final var response = new HashMap<String, String>(); response.put("header", headerValue); response.put("payload", "some payload values");  /* ACT */ final var result = MessageUtils.extractHeaderFromMultipartMessage(response);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(headerValue, result)
[-] pred: org. junit. Assert. assertEquals ( headerValue, result )
************************************
[+] input: testStringPaddingOdd() { String actual = SerialiserFlavorBase.createCenteredHeading(null, '#', 51); String expected = "###################################################"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldNotThrowExceptionIfInputIsNull_3() { var encoded = UUIDAdapter.toStringOrDefault(null, null);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(encoded)
[-] pred: org. junit. Assert. assertNull ( encoded )
************************************
[+] input: DbxException { // given DropboxClient testee = new DropboxClient(dropboxService);  Metadata m1 = new Metadata("folder1"); Metadata m2 = new Metadata("folder2"); Metadata m3 = new Metadata("testFileToUpload.txt"); List<Metadata> metadataList = List.of(m1, m2, m3); ListFolderResult listFolderResult = new ListFolderResult(metadataList, "3", true); when(dropboxService.files().listFolder(anyString())).thenReturn(listFolderResult); clearInvocations(dropboxService);  // when boolean result = testee.doesFileExist("testFileToUpload.txt");  // then verify(dropboxService.files()).listFolder(""); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: deleteAmenityNotExists() { // given given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID)) .willReturn(Optional.empty());  // when boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);  // then "<AssertPlaceHolder>"; verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID); verify(amenityRepository, never()).delete(any()); }
[*] target: assertFalse(amenityDeleted)
[-] pred: org. junit. Assert. assertFalse ( amenityDeleted )
************************************
[+] input: DefaultStringsTest() { final SimpleRunConfig config = new SimpleRunConfig(new String[0]);  assertThat(config.getNumOfThreads(), is(4)); assertThat(config.getAllocRateInMbPerSecond(), is(1024L)); assertThat(config.getDurationInSecond(), is(60)); assertThat(config.getMaxObjectSize(), is(1024)); assertThat(config.getMinObjectSize(), is(128)); assertThat(config.getHeapSizeInMb(), is(1024)); assertThat(config.getLongLivedInMb(), is(64)); assertThat(config.getMidAgedInMb(), is(64)); assertThat(config.getPruneRatio(), is(50)); assertThat(config.getReshuffleRatio(), is(100)); assertThat(config.getLogFile(), is("output.csv")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(config.isUseCompressedOops())
[-] pred: org. junit. Assert. assertTrue ( config. isUseCompressedOops() )
************************************
[+] input: IOException { String xml = Lib.readResource("pacs.002-CDATA.xml"); MxPacs00200103 mx = (MxPacs00200103) new MxReadImpl().read(MxPacs00200103.class, xml, MxPacs00200103._classes); "<AssertPlaceHolder>"; assertNotNull(mx.getAppHdr()); assertEquals("11de568fd1754cb7b2fbbb3dd238ff16", mx.getAppHdr().reference()); assertEquals("UNKNOWN", mx.getFIToFIPmtStsRpt().getOrgnlGrpInfAndSts().getOrgnlMsgId()); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
[+] input: getResourceMaps() { List<AWSKmsKey> roles = getAwsKmsKeys(); Maps<Resource> resourceMaps = exportKmsKeys.getResourceMaps(roles); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/KmsKey.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getBrokers_brokersNull_returnNull() { /* ARRANGE */ final var resource = new OfferedResource();  /* ACT */ final var result = resource.getBrokers();  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: Exception { EmptyInterface ins = ConstructionUtil.generateSubClassOf(EmptyInterface.class, options); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
[+] input: it_recognizes_lines_that_should_be_parsed() { CobolLine line1 = new CobolLine("           .", tokenExtractor); CobolLine line2 = new CobolLine("                   PERFORM 9999-ABORT", tokenExtractor); state.setFlagFor(Constants.PROCEDURE_DIVISION);  boolean shouldBeParsed1 = Interpreter.shouldLineBeParsed(line1, state); boolean shouldBeParsed2 = Interpreter.shouldLineBeParsed(line2, state);  "<AssertPlaceHolder>"; assertTrue(shouldBeParsed2); }
[*] target: assertTrue(shouldBeParsed1)
[-] pred: org. junit. Assert. assertTrue ( shouldBeParsed1 )
************************************
[+] input: createFromUshort565Rgb() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_USHORT_565_RGB); final short[] data = PngEncoderBufferedImageConverter.getDataBufferUShort(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromUshort565Rgb(data, width, height); "<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: shouldReturnSourceControlReportId() { String timeStamp = "121322545121"; String expected = "sourceControl-121322545121";  String sourceControlReportId = IdUtil.getSourceControlReportId(timeStamp);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, sourceControlReportId)
[-] pred: org. junit. Assert. assertEquals ( expected, sourceControlReportId )
************************************
[+] input: createFromIntBgr() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_INT_BGR); final int[] data = PngEncoderBufferedImageConverter.getDataBufferInt(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromIntBgr(data, width, height); "<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: shouldReturnAEmptyDto_onceEventObjectIsNotValid() { EventDto eventDto = EventMapper.map(null); "<AssertPlaceHolder>"; assertNull(eventDto.getMetadata().getNamespace()); }
[*] target: assertNotNull(eventDto)
[-] pred: org. junit. Assert. assertNotNull ( eventDto )
************************************
[+] input: updateGroup1() { assertThrows(ForbiddenException.class, () -> { GroupDO group = GroupDO.builder().name("测试分组1").info("just for test").build(); GroupDO group1 = GroupDO.builder().name("测试分组2").info("just for test").build(); groupMapper.insert(group); groupMapper.insert(group1);  UpdateGroupDTO dto = new UpdateGroupDTO(); dto.setName("测试分组2"); dto.setInfo("测试分组2info"); boolean ok = adminService.updateGroup(group.getId(), dto); "<AssertPlaceHolder>"; }); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
[+] input: getResourceMaps() { List<AWSRdsCluster> awsTargetGroups = getAwsRdsClusters();  Maps<Resource> resourceMaps = exportRdsClusters.getResourceMaps(awsTargetGroups); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Rds.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { /* ARRANGE */ final var endpointId = UUID.randomUUID(); final var requestedArtifact = URI.create("https://requested/" + endpointId); final var queryInput = new QueryInput(); final var expect = new ByteArrayInputStream(new byte[]{});  Mockito.doReturn(expect).when(artifactService) .getData(any(), any(), eq(endpointId), eq(queryInput), any());  /* ACT */ final var result = resolver.getDataByArtifactId(requestedArtifact, queryInput);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, result)
[-] pred: org. junit. Assert. assertEquals ( expect, result )
************************************
[+] input: testUpdateStatus_notExist() { boolean result = abnormalDatasetRepository.updateStatus(1L, "SUCCESS", DateTimeUtils.now()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: Exception {  int port = NetUtils.getAvailablePort(); URL url = URL.valueOf(ThriftProtocol.NAME + "://127.0.0.1:" + port + "/" + Demo.class.getName());  Channel channel = new MockedChannel(url);  RandomAccessByteArrayOutputStream bos = new RandomAccessByteArrayOutputStream(128);  Request request = createRequest();  DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null);  TMessage message = new TMessage("echoString", TMessageType.EXCEPTION, ThriftCodec.getSeqId());  TTransport transport = new TIOStreamTransport(bos);  TBinaryProtocol protocol = new TBinaryProtocol(transport);  TApplicationException exception = new TApplicationException();  int messageLength, headerLength; // prepare protocol.writeI16(ThriftCodec.MAGIC); protocol.writeI32(Integer.MAX_VALUE); protocol.writeI16(Short.MAX_VALUE); protocol.writeByte(ThriftCodec.VERSION); protocol.writeString(Demo.class.getName()); // path protocol.writeString(Demo.class.getName()); protocol.writeI64(request.getId()); protocol.getTransport().flush(); headerLength = bos.size();  protocol.writeMessageBegin(message); exception.write(protocol); protocol.writeMessageEnd(); protocol.getTransport().flush(); int oldIndex = messageLength = bos.size();  try { bos.setWriteIndex(ThriftCodec.MESSAGE_LENGTH_INDEX); protocol.writeI32(messageLength); bos.setWriteIndex(ThriftCodec.MESSAGE_HEADER_LENGTH_INDEX); protocol.writeI16((short) (0xffff & headerLength)); } finally { bos.setWriteIndex(oldIndex); } // prepare  ChannelBuffer bis = ChannelBuffers.wrappedBuffer(encodeFrame(bos.toByteArray()));  Object obj = codec.decode((Channel) null, bis);  Assertions."<AssertPlaceHolder>";  Assertions.assertTrue(obj instanceof Response);  Response response = (Response) obj;  Assertions.assertTrue(response.getResult() instanceof AppResponse);  AppResponse result = (AppResponse) response.getResult();  Assertions.assertTrue(result.hasException());  Assertions.assertTrue(result.getException() instanceof RpcException);  }
[*] target: assertNotNull(obj)
[-] pred: org. junit. Assert. assertNotNull ( obj )
************************************
[+] input: testScanFromJarWithIncludesPredicates() { // use slf4j as target assumeTrue(ClassUtils.hasClass("org.slf4j.Logger") && ClassUtils.hasClass("org.slf4j.LoggerFactory"));  final ClassPathScanUtils scanUtils = new ClassPathScanUtils(true, true, Collections.singletonList("LoggerFactory")); Set<Class<?>> classes = scanUtils.getPackageAllClasses("org.slf4j", false); "<AssertPlaceHolder>"; assertTrue(classes.contains(org.slf4j.LoggerFactory.class)); assertFalse(classes.contains(org.slf4j.Logger.class)); }
[*] target: assertEquals(1, classes.size())
[-] pred: org. junit. Assert. assertEquals ( 1, classes. size ( ) )
************************************
[+] input: convert() { // given final UrlConverter converter = new UrlConverter(); final String rawValue = "http://example.net";  // when final URL value = converter.convert(rawValue);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("http://example.net", value.toString()); }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
[+] input: touchEnabled() { String userAgent = "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; ARM; Trident/6.0; Touch; ARMBJS)"; Detection d = DD.detect(userAgent);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(d.isTouchEnabled())
[-] pred: org. junit. Assert. assertTrue ( d. isTouchEnabled ( ) )
************************************
[+] input: testMapper() { var now = System.currentTimeMillis(); Instant startTime = Instant.ofEpochMilli(now); var attr = new Attributes(); var name = "myName"; var cause = "too huge"; attr.put("name", name); attr.put("cause", cause); var longestPause = 21.77; var gauge1 = new Gauge(JFR_GARBAGE_COLLECTION_LONGEST_PAUSE, longestPause, now, attr); List<Metric> expected = List.of(gauge1);  var testClass = new GarbageCollectionMapper(); var event = mock(RecordedEvent.class);  when(event.getStartTime()).thenReturn(startTime); when(event.getDouble(LONGEST_PAUSE)).thenReturn(longestPause); when(event.getString(NAME)).thenReturn(name); when(event.getString(CAUSE)).thenReturn(cause);  List<? extends Metric> result = testClass.apply(event);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testAsChunkAdds12Bytes() { byte[] data = {5}; byte[] chunk = PngEncoderLogic.asChunk(VALID_CHUNK_TYPE, data);  int expected = 13; int actual = chunk.length; "<AssertPlaceHolder>"; }
[*] target: assertThat(actual, is(expected))
[-] pred: org. junit. Assert. assertThat ( actual, is ( expected ) )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/MskCluster.cmd")); String actual = exportMskClusters.getTFImport(getAwsMskClusters()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: default_returnsDefault() { var defaultEmail = "test@fake.com";  var sut = new PatientEmailsHolder(defaultEmail, List.of(defaultEmail));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(defaultEmail, sut.getDefault())
[-] pred: org. junit. Assert. assertEquals ( defaultEmail, sut. getDefault() )
************************************
[+] input: GestaltException { KubernetesSecretConfigSource source = new KubernetesSecretConfigSource(kubernetesPath); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(source.hasStream())
[-] pred: org. junit. Assert. assertFalse ( source. hasStream() )
************************************
[+] input: GestaltException {  final File uploadFile = new File(UPLOAD_FILE_NAME);  Mockito.when(storage.get(BlobId.of(BUCKET_NAME, uploadFile.getName()))).thenReturn(blob); Mockito.when(blob.getContent()).thenThrow(new StorageException(504, "bad data"));  GCSConfigSource source = new GCSConfigSource(storage, BUCKET_NAME, uploadFile.getName(), Tags.of());  Assertions."<AssertPlaceHolder>"; GestaltException exception = Assertions.assertThrows(GestaltException.class, source::loadStream); Assertions.assertEquals("Exception loading Google Cloud Storage " + "object: default.properties, bucket: testbucket, with error:bad data", exception.getMessage()); }
[*] target: assertTrue(source.hasStream())
[-] pred: org. junit. Assert. assertTrue ( source. hasStream ( ) )
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, receiverKeys, receiverKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
[+] input: NoSuchAlgorithmException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = new ProtectedMailboxStorageEntry(mailboxStoragePayload, receiverKeys.getPublic(), 1, new byte[] { 0 }, receiverKeys.getPublic(), Clock.systemDefaultZone());  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
[+] input: testApplyWithThreadName() {  Attributes attributes = new Attributes().put(THREAD_NAME, threadName);  Metric gauge1 = new Gauge(JFR_THREAD_CPU_LOAD_USER, user, timestamp, attributes); Metric gauge2 = new Gauge(JFR_THREAD_CPU_LOAD_SYSTEM, system, timestamp, attributes); List<Metric> expected = List.of(gauge1, gauge2);  RecordedEvent event = mock(RecordedEvent.class); RecordedThread recordedThread = mock(RecordedThread.class);  when(event.getStartTime()).thenReturn(instant); when(event.getDouble(USER)).thenReturn(user); when(event.getDouble(SYSTEM)).thenReturn(system); when(event.getValue(EVENT_THREAD)).thenReturn(recordedThread); when(recordedThread.getJavaName()).thenReturn(threadName);  CPUThreadLoadMapper mapper = new CPUThreadLoadMapper();  List<? extends Metric> result = mapper.apply(event);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand(JsonDocument.of(MediaType.JSON, new ByteArrayInputStream(JsonValue.EMPTY_JSON_OBJECT.toString().getBytes()))).get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
[+] input: testGenCronTrigger() { // normal ScheduleInfo scheduleInfo = genDefaultScheduleInfo(); JobDetail jobDetail = ScheduleUtils.genQuartzJobDetail(scheduleInfo, MockQuartzJob.class, null, null, null, null);  Trigger trigger = ScheduleUtils.genQuartzTrigger(jobDetail, scheduleInfo); assertNotNull(trigger);  TriggerKey triggerKey = trigger.getKey(); assertNotNull(triggerKey); String identity = triggerKey.getName(); assertEquals(scheduleInfo.getInlongGroupId(), identity);  ScheduleBuilder<? extends Trigger> scheduleBuilder = trigger.getScheduleBuilder(); assertInstanceOf(SimpleScheduleBuilder.class, scheduleBuilder);  Date startDate = trigger.getStartTime(); assertNotNull(startDate); assertEquals(startDate.getTime(), scheduleInfo.getStartTime().getTime());  Date endDate = trigger.getEndTime(); assertNotNull(endDate); assertEquals(endDate.getTime(), scheduleInfo.getEndTime().getTime());  // cron scheduleInfo = genDefaultCronScheduleInfo(); jobDetail = ScheduleUtils.genQuartzJobDetail(scheduleInfo, MockQuartzJob.class, null, null, null, null);  trigger = ScheduleUtils.genQuartzTrigger(jobDetail, scheduleInfo); "<AssertPlaceHolder>";  triggerKey = trigger.getKey(); assertNotNull(triggerKey); identity = triggerKey.getName(); assertEquals(scheduleInfo.getInlongGroupId(), identity);  scheduleBuilder = trigger.getScheduleBuilder(); assertInstanceOf(CronScheduleBuilder.class, scheduleBuilder);  startDate = trigger.getStartTime(); assertNotNull(startDate); assertEquals(startDate.getTime(), scheduleInfo.getStartTime().getTime());  endDate = trigger.getEndTime(); assertNotNull(endDate); assertEquals(endDate.getTime(), scheduleInfo.getEndTime().getTime());  }
[*] target: assertNotNull(trigger)
[-] pred: org. junit. Assert. assertNotNull ( trigger )
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-cluster-name.cluster-ro-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final int newConnectionHostIndex = 1;  final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerA_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final HostInfo readerB_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-b-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerA_Host); topology.add(readerB_Host);  when(mockConnectionProvider.connect(refEq(readerA_Host))).thenReturn(mockConnection);  when(mockTopologyService.getCachedTopology()).thenReturn(topology); when(mockTopologyService.getLastUsedReaderHost()).thenReturn(readerA_Host); when(mockTopologyService.getTopology( eq(mockConnection), any(Boolean.class))).thenReturn(topology); when(mockTopologyService.getHostByName(mockConnection)).thenReturn(readerA_Host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertEquals(newConnectionHostIndex, failoverPlugin.currentHostIndex); assertTrue(failoverPlugin.explicitlyReadOnly); "<AssertPlaceHolder>"; }
[*] target: assertTrue(failoverPlugin.isCurrentConnectionReadOnly())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isCurrentConnectionReadOnly ( ) )
************************************
[+] input: testSerialization() { FeatureMap fm = buildMap(); FeatureDomainProto fmProto = fm.serialize(); FeatureMap deserFm = FeatureMap.deserialize(fmProto); assertEquals(fm, deserFm);  ImmutableFeatureMap ifm = new ImmutableFeatureMap(fm); FeatureDomainProto ifmProto = ifm.serialize(); FeatureMap deserIfm = FeatureMap.deserialize(ifmProto); "<AssertPlaceHolder>"; }
[*] target: assertEquals(ifm, deserIfm)
[-] pred: org. junit. Assert. assertEquals ( ifm, deserIfm )
************************************
[+] input: nullOrFalseTest_1() { var actual = Utils.nullOrFalse(null); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
[+] input: testEnforced04() { // given ConfigService configService = awsservice.getExtension(ConfigService.class); Long contentLength = Long.valueOf("15"); String siteId = UUID.randomUUID().toString();  DynamicObject ob = configService.get(siteId); ob.put(ConfigService.MAX_DOCUMENT_SIZE_BYTES, "10"); configService.save(siteId, ob);  // when String value = service.getValue(awsservice, siteId); boolean result = service.enforced(awsservice, siteId, value, contentLength);  // then "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: getBySubscriberAndTarget_validInput_returnSubscriptionList() { /* ARRANGE */ Mockito.doReturn(List.of(subscription)).when(repository).findAllBySubscriberAndTarget(Mockito.any(), Mockito.any());  /* ACT */ final var result = service.getBySubscriberAndTarget(URI.create("https://subscriber"), URI.create("https://target"));  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(1, result.size()); assertEquals(subscription, result.get(0)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer>withSupplier(() -> 10) .build();  AtomicReference<Integer> result = stage.execute(null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(10, result.get()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: GestaltException { ClassPathConfigSource classPathConfigSource = new ClassPathConfigSource("test.properties");  Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(GestaltException.class, classPathConfigSource::loadList); }
[*] target: assertFalse(classPathConfigSource.hasList())
[-] pred: org. junit. Assert. assertFalse ( classPathConfigSource. hasList() )
************************************
[+] input: Exception { QpackDecoderDynamicTable table = newTable(100); assertEquals(0, table.length()); table.add(fooBar); assertEquals(1, table.length()); table.clear(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, table.length())
[-] pred: org. junit. Assert. assertEquals ( 0, table. length() )
************************************
[+] input: Exception { KeyInfoReference keyInfoReference = new KeyInfoReference(TestUtils.newDocument(), URI_CONTROL); "<AssertPlaceHolder>"; }
[*] target: assertEquals(URI_CONTROL, keyInfoReference.getURI())
[-] pred: org. junit. Assert. assertEquals ( URI_CONTROL, keyInfoReference. getURI ( ) )
************************************
[+] input: buildUsageUntilDeletion() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.USAGE_UNTIL_DELETION, null, uri); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { Properties p = ConfigUtils.loadProperties("META-INF/dubbo/internal/org.apache.dubbo.common.threadpool.ThreadPool", false);  Properties expected = new Properties(); expected.put("fixed", "org.apache.dubbo.common.threadpool.support.fixed.FixedThreadPool"); expected.put("cached", "org.apache.dubbo.common.threadpool.support.cached.CachedThreadPool"); expected.put("limited", "org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool"); expected.put("eager", "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPool");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, p)
[-] pred: org. junit. Assert. assertEquals ( expected, p )
************************************
[+] input: Exception { SqlSessionFactory sqlSessionFactory = jdbcSourceConfig.sqlSessionFactory(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(sqlSessionFactory)
[-] pred: org. junit. Assert. assertNotNull ( sqlSessionFactory )
************************************
[+] input: Exception { URL url = Resources.getResourceURL(CLASS_LOADER, JPETSTORE_PROPERTIES); try (InputStream in = Resources.getUrlAsStream(url.toString())) { "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(in)
[-] pred: org. junit. Assert. assertNotNull ( in )
************************************
[+] input: Exception { var action1 = buildMethod("Foo", "action1", "()V"); var action2 = buildMethod("Foo", "action2", "()V"); var action3 = buildMethod("Foo", "action3", "()V");  List<RecordedFrame> stack = new ArrayList<>(); stack.add(buildFrame(action1, 21, 77)); stack.add(buildFrame(action2, 22, 78)); stack.add(buildFrame(action3, 23, 79)); String payload1 = "{"desc":"Foo.action1()V","line":"21","bytecodeIndex":"77"}"; String payload2 = "{"desc":"Foo.action2()V","line":"22","bytecodeIndex":"78"}"; var expected = "{"type":"stacktrace","language":"java","version":1,"truncated":true,"payload":[" + payload1 + "," + payload2 + "]}"; var result = MethodSupport.jsonWrite(stack, Optional.of(2)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: listSucceeds() { Flux<Simple> response = graphqlClient.flux("query-list.graphql", Simple.class); List<Simple> list = response.collectList().block(); "<AssertPlaceHolder>"; assertEquals(1, list.size()); }
[*] target: assertNotNull(list)
[-] pred: org. junit. Assert. assertNotNull ( list )
************************************
[+] input: shouldFailOnAddAmenityToNotExistingCommunity() { // given final String communityId = "communityId"; final AmenityDto baseAmenityDto = new AmenityDto() .id(1L) .amenityId("amenityId") .name("name") .description("description") .price(BigDecimal.valueOf(12)); final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto)); given(communityService.getCommunityDetailsById(communityId)) .willReturn(Optional.empty());  // when final Optional<List<AmenityDto>> actualResult = amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);  // then "<AssertPlaceHolder>"; verify(communityService).getCommunityDetailsById(communityId); verifyNoInteractions(amenityApiMapper); verifyNoInteractions(amenityRepository); }
[*] target: assertFalse(actualResult.isPresent())
[-] pred: org. junit. Assert. assertFalse ( actualResult. isPresent ( ) )
************************************
[+] input: clientRegistrationRepository_nullRegistration_returnsNull() { var properties = new OAuth2ClientRegistrationProperties(); var repository = configuration.reactiveClientRegistrationRepository(properties); "<AssertPlaceHolder>"; }
[*] target: assertNull(repository)
[-] pred: org. junit. Assert. assertNull ( repository )
************************************
[+] input: CryptoException { KeyPair ownerKeys = TestUtils.generateKeyPair(); ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry(ownerKeys, ownerKeys, 1);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
[+] input: deleteAmenity() { // given Amenity testAmenity = TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);  given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID)) .willReturn(Optional.of(testAmenity));  // when boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);  // then "<AssertPlaceHolder>"; verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID); verify(amenityRepository).delete(testAmenity); }
[*] target: assertTrue(amenityDeleted)
[-] pred: org. junit. Assert. assertTrue ( amenityDeleted )
************************************
[+] input: limitDepth() { StackSerializer serializer = new StackSerializer(2); IMCStackTrace stack = mock(IMCStackTrace.class);  when(stack.getFrames()).thenReturn((List) frames);  String result = serializer.serialize(stack); String expected = "\tat io.test.MyClass.action(unknown:123)\n" + "\tat io.test.MyClass.silver(unknown:456)"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: getOptions() { String result = WalkGenerationMode.getOptions(); "<AssertPlaceHolder>"; assertFalse(result.endsWith(" ")); assertFalse(result.endsWith("|")); //System.out.println(result); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: removeTaskNotifyConfigById() { // 1. Prepare TaskNotifyConfig config = MockTaskNotifyConfigFactory.mockWithoutId(); TaskNotifyConfig persistedConfig = taskNotifyConfigDao.create(config);  // 2. Process boolean removeExistingResult = taskNotifyConfigService.removeTaskNotifyConfigById(persistedConfig.getId()); boolean removeNotFoundResult = taskNotifyConfigService.removeTaskNotifyConfigById(1234L);  // 3. Validate "<AssertPlaceHolder>"; assertFalse(removeNotFoundResult); }
[*] target: assertTrue(removeExistingResult)
[-] pred: org. junit. Assert. assertTrue ( removeExistingResult )
************************************
[+] input: testMapper() { var now = System.currentTimeMillis(); Instant startTime = Instant.ofEpochMilli(now); var attr = new Attributes(); long heapUsed = 300; long heapCommittedSize = 500; long reservedSize = 200; long heapStart = 123; long committedEnd = 321; long reservedEnd = 456; String when = "when"; attr.put(WHEN, when); attr.put(HEAP_START, heapStart); attr.put(COMMITTED_END, committedEnd); attr.put(RESERVED_END, reservedEnd);  var gauge1 = new Gauge(JFR_GC_HEAP_SUMMARY_HEAP_COMMITTED_SIZE, heapCommittedSize, now, attr); var gauge2 = new Gauge(JFR_GC_HEAP_SUMMARY_RESERVED_SIZE, reservedSize, now, attr); var gauge3 = new Gauge(JFR_GC_HEAP_SUMMARY_HEAP_USED, heapUsed, now, attr); List<Metric> expected = List.of(gauge1, gauge2, gauge3);  var testClass = new GCHeapSummaryMapper();  var recordedObject = mock(RecordedObject.class); when(recordedObject.getLong(COMMITTED_SIZE)).thenReturn(heapCommittedSize); when(recordedObject.getLong(RESERVED_SIZE)).thenReturn(reservedSize); when(recordedObject.getLong(START)).thenReturn(heapStart); when(recordedObject.getLong(COMMITTED_END)).thenReturn(committedEnd); when(recordedObject.getLong(RESERVED_END)).thenReturn(reservedEnd);  var event = mock(RecordedEvent.class); when(event.getStartTime()).thenReturn(startTime); when(event.getLong(HEAP_USED)).thenReturn(heapUsed); when(event.getValue(HEAP_SPACE)).thenReturn(recordedObject); when(event.getString(WHEN)).thenReturn(when);  List<? extends Metric> result = testClass.apply(event);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testToDateString0() { String expected = new Date(0L).toString(); String actual = SftpATTRS.toDateString(0L); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: GestaltException { GCSConfigSourceBuilder builder = GCSConfigSourceBuilder.builder(); builder.setStorage(storage); builder.setBucketName("testBucket"); builder.setObjectName("testObject");  assertEquals(storage, builder.getStorage()); assertEquals("testBucket", builder.getBucketName()); assertEquals("testObject", builder.getObjectName());  ConfigSourcePackage configSourcePackage = builder.build(); "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  GCSConfigSource gcsConfigSource = (GCSConfigSource) configSourcePackage.getConfigSource(); assertTrue(gcsConfigSource.hasStream()); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
[+] input: getAllCycles_expectedOneCycle() { Cycle testCycle1 = new Cycle("TestCycle1");  Collection<Cycle> expectedCycles = new ArrayList<>(); expectedCycles.add(testCycle1);  Collection<Cycle> outputCycles = new ArrayList<>(); outputCycles.add(testCycle1);  when(cycleRepository.findAll()).thenReturn(outputCycles);  Collection<Cycle> actualCycles = cycleService.getAllCycles();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCycles, actualCycles)
[-] pred: org. junit. Assert. assertEquals ( expectedCycles, actualCycles )
************************************
[+] input: testDelete1() { Document d = getBaseDocument("/jdocs/sample_1.json"); d.deletePath("$.members[]"); d.deletePath("$.id"); d.deletePath("$.info"); String expected = "{ }"; String actual = d.getPrettyPrintJson(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testAddServices() { Proto proto = new Proto();  proto.addService(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, proto.getServices().size())
[-] pred: org. junit. Assert. assertEquals ( 0, proto. getServices(). size ( ) )
************************************
[+] input: should_result_millis_when_hour() {  var expected = 1 * 60 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("1hour");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: isCollectionEmptyOrNullTest_2() { var actual = Utils.isCollectionEmptyOrNull(Collections.EMPTY_LIST); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
[+] input: createFromIntArgb() { final BufferedImage expected = PngEncoderTestUtil.createTestImage(PngEncoderBufferedImageType.TYPE_INT_ARGB); final int[] data = PngEncoderBufferedImageConverter.getDataBufferInt(expected).getData(); final int width = expected.getWidth(); final int height = expected.getHeight(); final BufferedImage actual = PngEncoderBufferedImageConverter.createFromIntArgb(data, width, height); "<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: testMapRemoteExceptionReturnsUnknownExceptionsAsIs() { Throwable expected = new IllegalArgumentException("some-exception");  Throwable result = ExceptionMapper.mapRemoteException(expected);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: getResourceMaps() { List<AWSLoadBalancer> AWSLoadBalancers = getAwsLoadBalancers();  Maps<Resource> resourceMaps = exportLoadBalancers.getResourceMaps(AWSLoadBalancers); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/LoadBalancer.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: skipClustersWithoutDoubleQuote() { ThreadDumpRegion region = new ThreadDumpRegion("something\n\n"else"", 0, 0); assertTrue(region.findNextStack()); assertEquals(region.getCurrentRegion(), ""else""); "<AssertPlaceHolder>"; }
[*] target: assertFalse(region.findNextStack())
[-] pred: org. junit. Assert. assertFalse ( region. findNextStack() )
************************************
[+] input: deleteMemberFromHouseMemberNotPresent() { // given Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT); CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();  communityHouse.setHouseMembers(houseMembers);  given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID)) .willReturn(Optional.of(communityHouse));  // when boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);  // then "<AssertPlaceHolder>"; verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID); verify(communityHouseRepository, never()).save(communityHouse); verifyNoInteractions(houseMemberRepository); }
[*] target: assertFalse(isMemberDeleted)
[-] pred: org. junit. Assert. assertFalse ( isMemberDeleted )
************************************
[+] input: Exception { RealInterface ins = ConstructionUtil.generateSubClassOf(ParameterizedClazz.class, options); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ins)
[-] pred: org. junit. Assert. assertNotNull ( ins )
************************************
[+] input: shouldContainCorrectHeadersWhenRemoteSystemIsInvoked() {  this.mockRestServiceServer .expect(requestTo("/api/books?jscmd=data&format=json&bibkeys=" + ISBN)) .andExpect(MockRestRequestMatchers.header("X-Custom-Auth", "Duke42")) .andExpect(MockRestRequestMatchers.header("X-Customer-Id", "42")) .andRespond( withSuccess( new ClassPathResource("/stubs/openlibrary/success-" + ISBN + ".json"), MediaType.APPLICATION_JSON));  Book result = cut.fetchMetadataForBook(ISBN);  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: convert() { // given final UriConverter converter = new UriConverter(); final String rawValue = "http://example.net";  // when final URI value = converter.convert(rawValue);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("http://example.net", value.toString()); }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
[+] input: testGetListMembers() { String   listId  = "1449313282892910592"; UserList members = twitterClient.getListMembers(listId); "<AssertPlaceHolder>"; assertTrue(members.getData().size() > 1); assertNotNull(members.getData().get(0).getId()); assertNotNull(members.getData().get(0).getName()); assertNotNull(members.getData().get(0).getCreatedAt()); assertTrue(members.getData().get(0).getFollowersCount() > 0); assertTrue(members.getData().get(0).getFollowingCount() > 0); }
[*] target: assertNotNull(members)
[-] pred: org. junit. Assert. assertNotNull ( members )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/RdsOptionGroup.cmd")); String actual = exportRdsOptionGroups.getTFImport(getAwsRdsOptionGroups()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: FlashForgePrinterException { AdventurerClient client = new AdventurerClient(printerAddress); boolean replay = client.stopPrinting(); client.close(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(replay)
[-] pred: org. junit. Assert. assertTrue ( replay )
************************************
[+] input: getList_dataFieldExists_returnsList() { GraphQLResponse response = constructResponse("{ "data": { "field": ["value"] } }"); List<String> values = response.getList("field", String.class); "<AssertPlaceHolder>"; assertEquals("value", values.get(0)); }
[*] target: assertEquals(1, values.size())
[-] pred: org. junit. Assert. assertEquals ( 1, values. size ( ) )
************************************
[+] input: supplyInCaseOfNormalExecution() { var result = Try.wrap(() -> 1, 0); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
[+] input: deleteTaskRun_byExistingId_shouldReturnRemovedRowNum() { // Prepare Clock mockClock = getMockClock(); DateTimeUtils.setClock(mockClock);  // 1. create task runs Task task = MockTaskFactory.createTask(); taskDao.create(task);  // 2. create task run TaskRun sampleTaskRun = MockTaskRunFactory.createTaskRun(1L, task); taskRunDao.createTaskRun(sampleTaskRun);  // Process // 3. Perform delete action boolean deletionSuccess = taskRunDao.deleteTaskRun(1L);  // Validate assertTrue(deletionSuccess);  // 4. fetch and validate Optional<TaskRun> persistedTaskRunOptional = taskRunDao.fetchTaskRunById(1L); assertFalse(persistedTaskRunOptional.isPresent());  // 5. Multiple deletions on same id should be idempotent, but returns false flag boolean deletionSuccessAfterAction = taskRunDao.deleteTaskRun(1L); "<AssertPlaceHolder>"; }
[*] target: assertFalse(deletionSuccessAfterAction)
[-] pred: org. junit. Assert. assertFalse ( deletionSuccessAfterAction )
************************************
[+] input: testEncodeDecodeStringStartingWithDelim() { final String VALUE = ",hahahahah"; final SequenceEncoder se = new SequenceEncoder(',').append(VALUE); final SequenceEncoder.Decoder sd = new SequenceEncoder.Decoder(se.getValue(), ','); "<AssertPlaceHolder>"; }
[*] target: assertEquals(VALUE, sd.nextToken())
[-] pred: org. junit. Assert. assertEquals ( VALUE, sd. nextToken ( ) )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Elasticsearch.cmd")); String actual = exportElasticsearchDomains.getTFImport(getAwsElasticsearchDomains()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: deleteDatasetNode_withNonExistingNodeId_shouldReturnFalse() { // Prepare prepareGraph();  // Process boolean isSuccess = lineageService.deleteDatasetNode(1234556L);  // Validate "<AssertPlaceHolder>"; }
[*] target: assertFalse(isSuccess)
[-] pred: org. junit. Assert. assertFalse ( isSuccess )
************************************
[+] input: testGetAuthenticationInfoWithNull() { assertNotNull(graphqlController);  String environmentId = "test-env"; KnownApplicationImpl app = new KnownApplicationImpl("app-id", "app-name"); ApplicationMetadata applicationMetadata = new ApplicationMetadata(); applicationMetadata.setApplicationId("app-id"); applicationMetadata.setAuthenticationJson(null);  when(applicationsService.getApplicationMetadata(environmentId, "app-id")) .thenReturn(Optional.of(applicationMetadata)); String authInfo = graphqlController.getAuthenticationInfo(environmentId, app);  "<AssertPlaceHolder>"; }
[*] target: assertNull(authInfo)
[-] pred: org. junit. Assert. assertNull ( authInfo )
************************************
[+] input: testTopicsByType() { assertNotNull(graphqlController);  String environmentId = "test-env"; TopicType topicType = TopicType.EVENTS;  TopicMetadata topicMetadata = new TopicMetadata(); topicMetadata.setType(topicType); topicMetadata.setName("test-topic"); topicMetadata.setOwnerApplicationId("owner-app"); topicMetadata.setProducers(List.of("producer-app")); topicMetadata.setEolDate(LocalDate.parse("2024-01-01")); topicMetadata.setDeprecationText("Deprecation notice"); GraphQLContext context = GraphQLContext.newContext().build();  when(topicService.listTopics(environmentId)).thenReturn(List.of(topicMetadata)); List<TopicMetadata> topics = graphqlController.topicsByType(environmentId, topicType, context);  "<AssertPlaceHolder>"; assertEquals(1, topics.size()); TopicMetadata topic = topics.get(0); assertEquals("test-topic", topic.getName()); assertEquals(TopicType.EVENTS, topic.getType()); assertEquals("owner-app", topic.getOwnerApplicationId()); assertNotNull(topic.getProducers()); assertNotNull(topic.getEolDate()); assertEquals("Deprecation notice", topic.getDeprecationText()); }
[*] target: assertNotNull(topics)
[-] pred: org. junit. Assert. assertNotNull ( topics )
************************************
[+] input: testConstructor() { // test newKeyValue(PublicKey pk) for (PublicKey key : keys) { try { KeyValue kv = fac.newKeyValue(key); "<AssertPlaceHolder>"; } catch (KeyException ke) { fail("Should pass instead of throwing KeyException"); } } }
[*] target: assertEquals(key, kv.getPublicKey())
[-] pred: org. junit. Assert. assertEquals ( key, kv. getPublicKey() )
************************************
[+] input: roundTripWithQuotedComponent() { final String expression = "http://snomed.info/sct" + "|'397956004 |Prosthetic arthroplasty of the hip|: 363704007 |Procedure site| = " + "( 24136001 |Hip joint structure|: 272741003 |Laterality| =  7771000 |Left| )'" + "|http://snomed.info/sct/32506021000036107/version/20201231"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("http://snomed.info/sct", literalValue.getSystem()); assertEquals("http://snomed.info/sct/32506021000036107/version/20201231", literalValue.getVersion()); assertEquals( "397956004 |Prosthetic arthroplasty of the hip|: 363704007 |Procedure site| = " + "( 24136001 |Hip joint structure|: 272741003 |Laterality| =  7771000 |Left| )", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
[+] input: Exception { wireMock.register(serviceAccountsEndpoint(HttpMethod.POST) .willReturn(okForPlainJson(readTestResource("ccloud/service-account.json")) .withStatus(HttpStatus.CREATED.value()))); wireMock.register(authenticatedEndpoint("/service_accounts") .willReturn(okForPlainJson(readTestResource("ccloud/service-account-mapping.json"))));  ConfluentCloudApiClient apiClient = new ConfluentCloudApiClient(baseUrl, "myKey", "mySecret", true);  ServiceAccountSpec spec = apiClient.createServiceAccount("myaccount", "mydesc").block(); "<AssertPlaceHolder>"; assertEquals("123456", spec.getNumericId());  wireMock.verifyThat(1, requestedFor(HttpMethod.POST.name(), urlPathEqualTo(SERVICE_ACCOUNTS_ENDPOINT))); wireMock.verifyThat(1, requestedFor(HttpMethod.GET.name(), urlPathEqualTo("/service_accounts"))); }
[*] target: assertNotNull(spec)
[-] pred: org. junit. Assert. assertNotNull ( spec )
************************************
[+] input: testCallback() { AtomicBoolean wasCalled = new AtomicBoolean(false);  FoundationCallback foundationCallback = FoundationCallbackRegistry.registerCallback(id -> wasCalled.set(true));  System.gc();  Foundation.invoke(foundationCallback.getTarget(), "accept:"); FoundationCallbackRegistry.unregister(foundationCallback);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(wasCalled.get())
[-] pred: org. junit. Assert. assertTrue ( wasCalled. get ( ) )
************************************
[+] input: extractContext_fromStreamRequestHandler() { Object[] args = {mock(InputStream.class), mock(OutputStream.class), mock(Context.class)}; ProceedingJoinPoint pjpMock = mockRequestHandlerPjp(RequestStreamHandler.class, args);  Context context = LambdaHandlerProcessor.extractContext(pjpMock);  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(context)
[-] pred: org. junit. Assert. assertNotNull ( context )
************************************
[+] input: testCapsuleOnEmptyPredicate() { final FilteredStreamRulePredicate p = FilteredStreamRulePredicate.empty().capsule(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(p.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( p. isEmpty() )
************************************
[+] input: serializationTest() { DenseVector a = generateVectorA(); TensorProto proto = a.serialize(); Tensor deser = Tensor.deserialize(proto); "<AssertPlaceHolder>"; }
[*] target: assertEquals(a,deser)
[-] pred: org. junit. Assert. assertEquals ( a, deser )
************************************
[+] input: buildProvideAccess() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.PROVIDE_ACCESS, null, uri); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry( buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()), senderKeys, 1);  // should be assertFalse "<AssertPlaceHolder>"; }
[*] target: assertTrue(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
[+] input: testMoveHeadingToFront() { final String input = "[B][SIZE=5]Dum[/SIZE][/B]"; final String expected = "### **Dum**"; final String result = this.converter.convertToMarkdown(input); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldGetAndSetEnabled() { var user = new LegacyUser(); user.setEnabled(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(user.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( user. isEnabled() )
************************************
[+] input: loginSuccess() { // given LoginRequest request = getDefaultLoginRequest(); UserDto userDto = getDefaultUserDtoRequest(); AppJwt appJwt = getDefaultJwtToken(userDto); String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET); given(userSDJpaService.findUserByEmail(request.getEmail())) .willReturn(Optional.of(userDto)); given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword())) .willReturn(true); given(appJwtEncoderDecoder.encode(appJwt, SECRET)) .willReturn(encodedJwt);  // when AuthenticationData authenticationData = authenticationSDJpaService.login(request);  // then "<AssertPlaceHolder>"; assertEquals(authenticationData.getUserId(), userDto.getUserId()); assertEquals(authenticationData.getJwtToken(), encodedJwt); verify(userSDJpaService).findUserByEmail(request.getEmail()); verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword()); verify(appJwtEncoderDecoder).encode(appJwt, SECRET); }
[*] target: assertNotNull(authenticationData)
[-] pred: org. junit. Assert. assertNotNull ( authenticationData )
************************************
[+] input: select1asATest() { ClickHouseAliasOperation oneConstAsA = new ClickHouseAliasOperation(new ClickHouseInt8Constant(1), "a"); ClickHouseSelect selectOne = new ClickHouseSelect(); selectOne.setFetchColumns(Arrays.asList(oneConstAsA)); String result = ClickHouseVisitor.asString(selectOne); String answer = "SELECT 1 AS `a`"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(answer, result)
[-] pred: org. junit. Assert. assertEquals ( answer, result )
************************************
[+] input: equals_false_when_different_object_type() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); BlockPos blockPos = new BlockPos(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c1.equals(blockPos);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: it_recognizes_lines_that_should_not_be_parsed() { CobolLine line1 = new CobolLine("  ", tokenExtractor); //In FILE SECTION CobolLine line2 = new CobolLine("       FD  INPUT-FILE", tokenExtractor); state.setFlagFor(Constants.FILE_SECTION);  boolean shouldBeParsed1 = Interpreter.shouldLineBeParsed(line1, state); boolean shouldBeParsed2 = Interpreter.shouldLineBeParsed(line2, state);  "<AssertPlaceHolder>"; assertFalse(shouldBeParsed2); }
[*] target: assertFalse(shouldBeParsed1)
[-] pred: org. junit. Assert. assertFalse ( shouldBeParsed1 )
************************************
[+] input: test_create() { RefTableVersionInfo info = MockRefDataVersionBasicFactory.mockDefaultUnpublishedRefTableVersionInfo(1L, 1L, "test_table", "test_database"); refTableVersionRepository.create(info); RefTableVersionInfo refTableVersionInfo = refTableVersionRepository.findByVersionId(info.getVersionId()); "<AssertPlaceHolder>";  }
[*] target: assertEquals(info, refTableVersionInfo)
[-] pred: org. junit. Assert. assertEquals ( info, refTableVersionInfo )
************************************
[+] input: should_canConvertValue_returnFalse_ifCheckDoubleMinValue() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(Double.MIN_VALUE));  //then "<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: testNotFoundRegionWikidata() { var db = new NaturalEarthDb(List.of(), List.of(), List.of()); var result = db.getAdmin1ByWikidata("Q2009"); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: deleteUser1() { Random random = new Random(); boolean b = adminService.deleteUser(random.nextInt()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
[+] input: IOException { InputStream stream = ResourceUtils.getResourceAsStream("/test/Test.txt"); String actualText = IOUtils.toString(stream, defaultCharset()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedText, actualText)
[-] pred: org. junit. Assert. assertEquals ( expectedText, actualText )
************************************
[+] input: toModel_validInput_returnContractRuleView() { /* ARRANGE */ final var contractRule = getContractRule();  /* ACT */ final var result = contractRuleViewAssembler.toModel(contractRule);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contractRule.getTitle(), result.getTitle()); Assertions.assertEquals(contractRule.getValue(), result.getValue()); Assertions.assertEquals(contractRule.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contractRule.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contractRule.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractRuleLink(contractRule.getId()), selfLink.get().getHref());  final var contractsLink = result.getLink("contracts"); assertTrue(contractsLink.isPresent()); assertNotNull(contractsLink.get()); assertEquals(getContractRuleContractsLink(contractRule.getId()), contractsLink.get().getHref()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: test2() { String s = "(00011)"; List<String> expected = List.of("(0.001, 1)", "(0, 0.011)"); List<String> actual = new Solution().ambiguousCoordinates(s); List<String> l1 = expected.stream().sorted().collect(Collectors.toList()); List<String> l2 = actual.stream().sorted().collect(Collectors.toList()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(l1, l2)
[-] pred: org. junit. Assert. assertEquals ( l1, l2 )
************************************
[+] input: test() { String s = "V5__create_customers.sql"; FilenameParser.MigrationInfo migrationInfo = FilenameParser.getMigrationInfo(s); Assertions.assertEquals(5, migrationInfo.getVersion()); Assertions.assertEquals("create customers", migrationInfo.getDescription()); Assertions.assertFalse(migrationInfo.isSplitByLine()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(migrationInfo.isTransactional())
[-] pred: org. junit. Assert. assertTrue ( migrationInfo. isTransactional() )
************************************
[+] input: testDeserialiseKeyboard() { List<String> tick = new ArrayList<>(); tick.add(";a"); tick.add("W;w"); tick.add("W,LCONTROL;"); tick.add("W,LCONTROL,S;s");  VirtualKeyboard actual = deserialiseKeyboard(tick);  VirtualKeyboard expected = new VirtualKeyboard(); expected.updateFromEvent(VirtualKey.ZERO, false, 'a'); expected.updateFromEvent(VirtualKey.W, true, 'w'); expected.updateFromEvent(VirtualKey.LCONTROL, true, Character.MIN_VALUE); expected.updateFromEvent(VirtualKey.S, true, 's');  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: deleteBookingItem() { // given AmenityBookingItem testBookingItem = getTestBookingItem();  given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID)) .willReturn(Optional.of(testBookingItem)); testBookingItem.setAmenity(TestUtils.AmenityHelpers .getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION));  // when boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);  // then "<AssertPlaceHolder>"; verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID); verify(bookingItemRepository).delete(testBookingItem); }
[*] target: assertTrue(bookingDeleted)
[-] pred: org. junit. Assert. assertTrue ( bookingDeleted )
************************************
[+] input: Exception { String path = String.format("gcp://%s/%s", BUCKET_NAME, FILE_NAME); String config = gcpConfigLoader.loadTextFile(new URI(path)); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
[+] input: testParseNoPrefix() { final String xml = "<AppHdr xmlns="urn:swift:xsd:$ahV10">\n" + "    <From>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=abcdchzz,o=swift</Id>\n" + "    </From>\n" + "    <To>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=dcbadeff,o=swift</Id>\n" + "    </To>\n" + "    <MsgRef>11308917</MsgRef>\n" + "    <CrDate>2013-12-23T15:50:00</CrDate>\n" + "</AppHdr>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
[+] input: Exception { final String expected = "SELECT * FROM BLOG"; DynamicSqlSource source = createDynamicSqlSource( new TextSqlNode("SELECT * FROM BLOG"), new IfSqlNode(mixedContents(new TextSqlNode("WHERE ID = ?")), "false" )); BoundSql boundSql = source.getBoundSql(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, boundSql.getSql())
[-] pred: org. junit. Assert. assertEquals ( expected, boundSql. getSql ( ) )
************************************
[+] input: selectByTitle() { BookDO book = initData(); List<BookDO> found = bookMapper.selectByTitle(book.getTitle()); boolean anyMatch = found.stream().anyMatch(it -> it.getTitle().equals(book.getTitle())); "<AssertPlaceHolder>"; }
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("=[Si]="); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
[+] input: serializationTest() { SparseVector a = generateVectorA(); TensorProto proto = a.serialize(); Tensor deser = Tensor.deserialize(proto); assertEquals(a, deser);  SparseVector empty = new SparseVector(10, new int[0], new double[0]); proto = empty.serialize(); deser = Tensor.deserialize(proto); assertEquals(empty, deser);  SparseVector full = new SparseVector(10, new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 5); proto = full.serialize(); deser = Tensor.deserialize(proto); "<AssertPlaceHolder>";  }
[*] target: assertEquals(full, deser)
[-] pred: org. junit. Assert. assertEquals ( full, deser )
************************************
[+] input: test4() { int[] arrInitial = {1, 2, 3}; int[] arrExpected = {1, 3}; ListNode head = LeetcodeUtils.initializeList(arrInitial); ListNode actual = new Solution().deleteMiddle(head); ListNode expected = LeetcodeUtils.initializeList(arrExpected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: listBrokerMetricsByTopicsTest() { List<String>   metrics  = Arrays.asList( "Messages",                         "BytesIn_min_15",       "BytesRejected", "PartitionURP",                     "HealthCheckTotal",     "ReplicationCount", "CollectMetricsCostTimeUnitSec",    "FailedFetchRequests",  "BytesIn_min_5", "HealthScore",                      "LogSize",              "BytesOut", "FailedProduceRequests",            "BytesOut_min_15",      "BytesIn", "BytesOut_min_5",                   "MessagesIn",           "TotalProduceRequests", "HealthCheckPassed"); List<String>   topics   = Arrays.asList("QAtest_1_13", "__consumer_offsets"); Long endTime   = System.currentTimeMillis(); Long startTime = endTime - 4 * 60 * 60 * 1000;  Table<String, String, List<MetricPointVO>> list = topicMetricESDAO.listTopicMetricsByTopics(clusterId, metrics, "avg", topics, startTime, endTime); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(list)
[-] pred: org. junit. Assert. assertNotNull ( list )
************************************
[+] input: roundTripWithQuotedComponentWithSpace() { final String expression = "'Some CodeSystem'|166056000"; final CodingLiteralPath codingLiteralPath = CodingLiteralPath .fromString(expression, inputContext); final Coding literalValue = codingLiteralPath.getValue(); assertEquals("Some CodeSystem", literalValue.getSystem()); assertEquals("166056000", literalValue.getCode());  final String actualExpression = codingLiteralPath.getExpression(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expression, actualExpression)
[-] pred: org. junit. Assert. assertEquals ( expression, actualExpression )
************************************
[+] input: IOException { Layout layout = LogLinearLayout.create(1e-8, 1e-2, -1e6, 1e6); Histogram histogram = Histogram.createDynamic(layout); histogram.addValue(-5.5);  ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream); histogram.write(dataOutputStream); byte[] serializedHistogram = byteArrayOutputStream.toByteArray();  DataInputStream dataInputStream = new DataInputStream(new ByteArrayInputStream(serializedHistogram)); Histogram deserializedHistogram = Histogram.readAsPreprocessed(layout, dataInputStream);  "<AssertPlaceHolder>"; assertEquals(histogram.hashCode(), deserializedHistogram.hashCode()); }
[*] target: assertEquals(histogram, deserializedHistogram)
[-] pred: org. junit. Assert. assertEquals ( histogram, deserializedHistogram )
************************************
[+] input: buildNTimesUsage() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.N_TIMES_USAGE, rule, uri); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { final boolean actual = FileUtil.isExistingFolder(null);  // asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
[+] input: test_should_createClient_ifMessagePackMapperIsChanged() { //given String expectedMappingResult = "Hello";  //when TarantoolClient<TarantoolTuple, TarantoolResult<TarantoolTuple>> client = TarantoolClientFactory.createClient() .withAddresses(SAMPLE_ADDRESS) .withCredentials(SAMPLE_CREDENTIALS) .withDefaultMessagePackMapperConfiguration(mapperBuilder -> mapperBuilder.withObjectConverter(String.class, StringValue.class, object -> ValueFactory.newString(expectedMappingResult)) ) .withConnections(SAMPLE_CONNECTIONS) .withConnectTimeout(SAMPLE_CONNECT_TIMEOUT) .withRequestTimeout(SAMPLE_REQUEST_TIMEOUT) .withReadTimeout(SAMPLE_READ_TIMEOUT) .withEventLoopThreadsNumber(SAMPLE_EVENT_LOOP_THREADS_NUMBER) .build();  TarantoolClient<TarantoolTuple, TarantoolResult<TarantoolTuple>> configuredClient = TarantoolClientFactory.configureClient(client).build();  String convertedTest = configuredClient.getConfig().getMessagePackMapper() .toValue("Test").asStringValue().asString();  //then "<AssertPlaceHolder>"; assertEquals(ClusterTarantoolTupleClient.class, configuredClient.getClass()); TarantoolClientConfig config = configuredClient.getConfig();  assertTrue(((ClusterTarantoolTupleClient) client).getAddressProvider() .getAddresses().contains(SAMPLE_ADDRESS));  assertNotEquals(SAMPLE_MAPPER, config.getMessagePackMapper());  assertEquals(SAMPLE_CREDENTIALS, config.getCredentials()); assertEquals(SAMPLE_CONNECTIONS, config.getConnections()); assertEquals(SAMPLE_READ_TIMEOUT, config.getReadTimeout()); assertEquals(SAMPLE_REQUEST_TIMEOUT, config.getRequestTimeout()); assertEquals(SAMPLE_CONNECT_TIMEOUT, config.getConnectTimeout()); assertEquals(PARALLEL_ROUND_ROBIN.value(), config.getConnectionSelectionStrategyFactory()); }
[*] target: assertEquals(expectedMappingResult, convertedTest)
[-] pred: org. junit. Assert. assertEquals ( expectedMappingResult, convertedTest )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/NatGateway.cmd")); String actual = exportNatGateways.getTFImport(getNatGateways()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: it_finds_too_short_line() { CobolLine line = new CobolLine(" .", tokenExtractor);  boolean isTooShort = Interpreter.isTooShortToBeMeaningful(line);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(isTooShort)
[-] pred: org. junit. Assert. assertTrue ( isTooShort )
************************************
[+] input: search_withUnmatchedKeyword_shouldReturnEmptySet() { // Prepare // 5 rows, 3 rows with name including substring "example" insertSampleData(); OperatorSearchFilter filter = OperatorSearchFilter.newBuilder() .withKeyword("exampleABC") .withPageNum(1) .withPageSize(5) .build();  // Process List<Operator> results = operatorDao.fetchWithFilter(filter);  // Validate "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, results.size())
[-] pred: org. junit. Assert. assertEquals ( 0, results. size ( ) )
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  MailboxStoragePayload mailboxStoragePayload = buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = buildProtectedMailboxStorageEntry(mailboxStoragePayload, senderKeys, receiverKeys.getPublic(), 1);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
[+] input: Exception { List<PostLite> posts = manager.selectList("org.apache.ibatis.domain.blog.mappers.PostMapper.selectPostLite"); "<AssertPlaceHolder>"; // old gcode issue #392, new #1848 }
[*] target: assertEquals(2, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, posts. size ( ) )
************************************
[+] input: testInfo() { final java.util.logging.Logger mock = mock(java.util.logging.Logger.class); when(mock.getName()).thenReturn("foo"); final Logger logger = new JdkLogger(mock); when(mock.isLoggable(Level.INFO)).thenReturn(true); assertTrue(logger.isInfoEnabled()); verifyInfo(mock, logger, true);  reset(mock);  when(mock.getName()).thenReturn("foo"); when(mock.isLoggable(Level.INFO)).thenReturn(false); "<AssertPlaceHolder>"; verifyInfo(mock, logger, false); }
[*] target: assertFalse(logger.isInfoEnabled())
[-] pred: org. junit. Assert. assertFalse ( logger. isInfoEnabled() )
************************************
[+] input: testParseWithWrapper() { final String xml = "<foo><bar>" + "<AppHdr xmlns:Ah="urn:swift:xsd:$ahV10">\n" + "    <From>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=abcdchzz,o=swift</Id>\n" + "    </From>\n" + "    <To>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=dcbadeff,o=swift</Id>\n" + "    </To>\n" + "    <MsgRef>11308917</MsgRef>\n" + "    <CrDate>2013-12-23T15:50:00</CrDate>\n" + "</AppHdr>" + "</bar></foo>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
[+] input: mapDtosToEntities_shouldMapDescriptionsArray() { int expected = 3; List<OkrTopicDescriptionDto> topicDescriptionDtos = new ArrayList<>() { { add(new OkrTopicDescriptionDto()); add(new OkrTopicDescriptionDto()); add(new OkrTopicDescriptionDto()); } };  Collection<OkrTopicDescription> actual = topicDescriptionMapper.mapDtosToEntities(topicDescriptionDtos);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual.size())
[-] pred: org. junit. Assert. assertEquals ( expected, actual. size ( ) )
************************************
[+] input: toModel_noResources_returnContractViewWithOffersLink() { /* ARRANGE */ final var contract = getContract();  /* ACT */ final var result = contractViewAssembler.toModel(contract);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(contract.getTitle(), result.getTitle()); Assertions.assertEquals(contract.getStart(), result.getStart()); Assertions.assertEquals(contract.getEnd(), result.getEnd()); Assertions.assertEquals(contract.getConsumer(), result.getConsumer()); Assertions.assertEquals(contract.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(contract.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(contract.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getContractLink(contract.getId()), selfLink.get().getHref());  final var rulesLink = result.getLink("rules"); assertTrue(rulesLink.isPresent()); assertNotNull(rulesLink.get()); assertEquals(getContractRulesLink(contract.getId()), rulesLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getContractOfferedResourcesLink(contract.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: it_accepts_normal_length_line() { CobolLine line = new CobolLine("               WHEN OUTPUT-OK", tokenExtractor);  boolean isTooShort = Interpreter.isTooShortToBeMeaningful(line);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(isTooShort)
[-] pred: org. junit. Assert. assertFalse ( isTooShort )
************************************
[+] input: startCloseTest() { try { boolean isClosing = channel.isClosing(); Assertions.assertFalse(isClosing); header.startClose(); isClosing = channel.isClosing(); Assertions."<AssertPlaceHolder>"; } catch (Exception e) { e.printStackTrace(); } }
[*] target: assertTrue(isClosing)
[-] pred: org. junit. Assert. assertTrue ( isClosing )
************************************
[+] input: should_serialize_object_and_deserialize_from_bytes() { JacksonSerializer jacksonSerializer = new JacksonSerializer(); SerializeObject serializeObject = new SerializeObject("java", "Java"); byte[] bytes = jacksonSerializer.serialize(serializeObject); assertNotEquals(bytes.length, 0); SerializeObject deserializeObject = jacksonSerializer.deserialize(bytes, SerializeObject.class); "<AssertPlaceHolder>"; }
[*] target: assertEquals(serializeObject, deserializeObject)
[-] pred: org. junit. Assert. assertEquals ( serializeObject, deserializeObject )
************************************
[+] input: KidTrackerParseException {  Message message = Message.device("3G", "1234567890", "UD", "060620,125420,A,60.062543,N,30.4606333,E,0.00,95.3,0.0,9,100,100,865649,0,00000008,7,255,250,1,234,15482,170,234,15481,151,234,15485,146,234,20082,144,290,25623,142,234,63301,141,234,63332,138,2,AccessPoint1,01:23:45:67:8a:bc,-69,AccessPoint2,fe:dc:ba:98:76:54,-51,25.9");  Location location = MessageUtils.toLocation(message).getValue();  "<AssertPlaceHolder>"; assertEquals(LocalDateTime.of(2020, 6, 6, 12, 54, 20), location.getTime()); assertTrue(location.isValid()); assertEquals(60.062543, location.getLatitude(),  DELTA); assertEquals(30.4606333, location.getLongitude(), DELTA); assertEquals(0, location.getSpeed(), DELTA); assertEquals(95.3, location.getCourse(), DELTA); assertEquals(0, location.getAltitude(), DELTA); assertEquals(9, location.getSatellites()); assertEquals(100, location.getRssi()); assertEquals(100, location.getBattery()); assertEquals(865649, location.getPedometer()); assertEquals(0, location.getRolls()); assertTrue(location.getState().isTakeOff()); assertFalse(location.getState().isLowBattery()); assertEquals(7, location.getBaseStations().size()); assertEquals(255, location.getGsmDelay()); assertEquals(250, location.getMcc()); assertEquals(1, location.getMnc()); assertEquals(234, location.getBaseStations().get(0).getArea()); assertEquals(15482, location.getBaseStations().get(0).getSerial()); assertEquals(170, location.getBaseStations().get(0).getRssi()); assertEquals(2, location.getAccessPoints().size()); assertEquals("AccessPoint1", location.getAccessPoints().get(0).getName()); assertEquals("01:23:45:67:8a:bc", location.getAccessPoints().get(0).getMac()); assertEquals(-69, location.getAccessPoints().get(0).getSignal()); assertEquals("AccessPoint2", location.getAccessPoints().get(1).getName()); assertEquals("fe:dc:ba:98:76:54", location.getAccessPoints().get(1).getMac()); assertEquals(-51, location.getAccessPoints().get(1).getSignal()); assertEquals(25.9, location.getAccuracy(), DELTA); }
[*] target: assertNotNull(location)
[-] pred: org. junit. Assert. assertNotNull ( location )
************************************
[+] input: shouldReThrowException_1() { var task = this.makeOneTimeFailingTask(1);  task.withRethrowingExceptions(true);  Assertions.assertThrows(RuntimeException.class, task::execute); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(task.succeeded())
[-] pred: org. junit. Assert. assertFalse ( task. succeeded() )
************************************
[+] input: compareTo_zero_when_equal() { // Arrange Vec3Comparable vec3c1 = new Vec3Comparable(1.0, 2.0, 3.0); Vec3Comparable vec3c2 = new Vec3Comparable(1.0, 2.0, 3.0);  // Act int result = vec3c1.compareTo(vec3c2);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
[+] input: TimeoutException { var expected = generator.generateReport(); var emitted = new CompletableFuture<List<Report>>(); reportsCollector.getObservableReports().subscribe(emitted::complete); reportsCollector.accept(expected); reportsCollector.teardown(); var actual = emitted.get(60, TimeUnit.SECONDS).get(0); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Throwable { final HandlerAdvicesFactory factory = mock(HandlerAdvicesFactory.class); when(factory.getHandlerAdvices(any())) .thenReturn(new HandlerAdvice[]{(request, response, args, invoker) -> "bar"});  final AbstractRouteHandlerLocator locator = new AbstractRouteHandlerLocator("foo", factory) { @Override protected HttpResponseStatus getCustomResponse(InvocableMethod handlerMethod) { return HttpResponseStatus.OK; } };  final Optional<RouteHandler> handler = locator.getRouteHandler(AbstractRouteHandlerLocatorTest.class, AbstractRouteHandlerLocatorTest.class.getDeclaredMethod("forTest"), new AbstractRouteHandlerLocatorTest());  "<AssertPlaceHolder>"; assertTrue(handler.isPresent()); assertEquals("foo", handler.get().scheduler()); assertTrue(handler.get().hasCustomResponse()); assertEquals(HttpResponseStatus.OK, handler.get().customResponse()); assertEquals("bar", handler.get().invoke(MockAsyncRequest.aMockRequest().build(), MockAsyncResponse.aMockResponse().build(), null)); }
[*] target: assertNotNull(handler)
[-] pred: org. junit. Assert. assertNotNull ( handler )
************************************
[+] input: shouldProperlyGetGroupDiscWithOffSetAndLimit() { //given GroupRequestArgs args = GroupRequestArgs.builder() .offset(1) .limit(3) .build();  //when List<GroupDiscussionInfo> groupList = groupClient.getGroupDiscussionList(args);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, groupList.size()); }
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
[+] input: InterruptedException { RequestRetryPolicy policy = throwable -> true; CompletableFuture<Boolean> wrappedFuture = policy.wrapOperation(this::simpleSuccessFuture, executor); "<AssertPlaceHolder>"; }
[*] target: assertTrue(wrappedFuture.get())
[-] pred: org. junit. Assert. assertTrue ( wrappedFuture. get ( ) )
************************************
[+] input: should_result_millis_when_second() {  var expected = 1 * 1000l;  var actual = NumberUtil.fromHumanReadable("1second");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { File file = tempFolder.newFile("xyz"); Resource resource = resourceLoader.getResource(file.getPath()); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(resource)
[-] pred: org. junit. Assert. assertNotNull ( resource )
************************************
[+] input: toModel_validInput_returnAgreementView() { /* ARRANGE */ final var agreement = getAgreement();  /* ACT */ final var result = agreementViewAssembler.toModel(agreement);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(agreement.getValue(), result.getValue()); Assertions.assertEquals(agreement.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(agreement.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(agreement.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(agreement.isConfirmed(), result.isConfirmed());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getAgreementLink(agreement.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getAgreementArtifactsLink(agreement.getId()), artifactsLink.get().getHref()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: shouldCacheAllAuthors() { int first; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList("org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors"); first = System.identityHashCode(authors); session.commit(); // commit should not be required for read/only activity. } int second; try (SqlSession session = sqlMapper.openSession()) { List<Author> authors = session.selectList("org.apache.ibatis.builder.CachedAuthorMapper.selectAllAuthors"); second = System.identityHashCode(authors); } "<AssertPlaceHolder>"; }
[*] target: assertEquals(first, second)
[-] pred: org. junit. Assert. assertEquals ( first, second )
************************************
[+] input: testCopy() { // test case 1 Document fromDoc = getBaseDocument("/jdocs/sample_1.json"); Document toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.info", "$.info"); toDoc.setContent(fromDoc, "$.members[%]", "$.members[%]", 0 + "", 0 + "");  try { toDoc.setContent(fromDoc, "$.id", "$.id"); } catch (UnifyException e) { assertEquals(UnifyException.class, e.getClass()); assertEquals(e.getErrorCode(), "jdoc_err_22"); }  fromDoc.deletePath("$.id"); fromDoc.deletePath("$.members[1]"); String expected = fromDoc.getJson(); String actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 2 fromDoc = getBaseDocument("/jdocs/sample_2.json"); toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.info", "$"); expected = getCompressedJson("/jdocs/sample_2_1_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 3 fromDoc = getBaseDocument("/jdocs/sample_2.json"); toDoc = new JDocument(); toDoc.setContent(fromDoc, "$", "$.members[type=basic].block"); expected = getCompressedJson("/jdocs/sample_2_2_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 4 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$", "$"); expected = getCompressedJson("/jdocs/sample_6_2_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 5 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[%]", "$.application.members[%]", 0 + "", 0 + ""); expected = getCompressedJson("/jdocs/sample_6_3_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 6 fromDoc = getTypedDocument("sample_6_model", "/jdocs/sample_6.json"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[]", "$.application.members[]"); expected = getCompressedJson("/jdocs/sample_6_4_expected.json"); actual = toDoc.getJson(); assertEquals(expected, actual);  // test case 7 fromDoc = getTypedDocument("sample_6_model", null); fromDoc.setInteger("$.application.members[0].phones[0].docs[0].index", 0); fromDoc.setString("$.application.members[0].phones[0].docs[0].name", "Deepak"); toDoc = getTypedDocument("sample_6_model", null); toDoc.setContent(fromDoc, "$.application.members[0].phones[0].docs[%]", "$.application.members[%].phones[%].docs[%]", 0 + "", 0 + "", 0 + "", 0 + ""); expected = getCompressedJson("/jdocs/sample_6_5_expected.json"); actual = toDoc.getJson(); "<AssertPlaceHolder>";  // test case 8 - we just check that it does not throw an exception fromDoc = getBaseDocument("/jdocs/sample_25.json"); toDoc = new JDocument("[]"); toDoc.setContent(fromDoc, "$.addresses[]", "$.[]"); assertTrue(true);  toDoc = new JDocument("[]"); toDoc.setContent(fromDoc, "$.addresses", "$.[]"); assertTrue(true);  toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.addresses", "$.addresses[]"); assertTrue(true);  try { toDoc = new JDocument(); toDoc.setContent(fromDoc, "$.addresses", "$.addresses"); } catch (UnifyException e) { assertEquals(UnifyException.class, e.getClass()); } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: ParseException { InputArguments inputArguments = new InputArguments("-i", "foo", "-o", "bar"); assertAll( () -> assertEquals(Paths.get("foo"), inputArguments.getInput()), () -> assertEquals(Paths.get("bar"), inputArguments.getOutput()), () -> "<AssertPlaceHolder>"; }
[*] target: assertFalse(inputArguments.isTransparent()))
[-] pred: org. junit. Assert. assertFalse ( inputArguments. isTransparent() ) )
************************************
[+] input: test_convert_csv_line_contains_double_quotes() { String[] record = {"1", "12"apple", "10", "9.99"}; String expected = ""1","12""apple","10","9.99"";  String result = writer.convertToCsvFormat(record); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: deleteGroup1() { assertThrows(NotFoundException.class, () -> { Random random = new Random(); boolean ok = adminService.deleteGroup(random.nextInt(1000)); "<AssertPlaceHolder>"; }); }
[*] target: assertFalse(ok)
[-] pred: org. junit. Assert. assertFalse ( ok )
************************************
[+] input: default_allNull_returnsNull() { var sut = new PatientEmailsHolder(null, null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(null, sut.getDefault())
[-] pred: org. junit. Assert. assertEquals ( null, sut. getDefault() )
************************************
[+] input: testPostAndGetBody() { String testValue = "testValue"; when(restTemplate.postForEntity(startsWith("http://document:8080"), any(HttpEntity.class), eq(String.class))) .thenReturn(new ResponseEntity<>(testValue, HttpStatus.OK)); String tenantId = "smart-upload"; String responseBody = buildRestHelper(null) .withQueryParam("tenantId", tenantId) .withQueryParam("userId", "userId_123") .withHeader("header1", "test_header") .withHeader("header2", List.of("value1", "value2")) .postAndGetBody(restTemplate, String.class);  "<AssertPlaceHolder>"; verify(restTemplate).postForEntity(uriCaptor.capture(), httpEntityCaptor.capture(), responseTypeCaptor.capture()); assertEquals("http://document:8080/documents/search/?tenantId=" + tenantId + "&userId=userId_123", uriCaptor.getValue()); assertEquals(String.class, responseTypeCaptor.getValue()); HttpEntity<List<UUID>> httpEntity = httpEntityCaptor.getValue(); assertTrue(httpEntity.getHeaders().getAccept().contains(MediaType.APPLICATION_JSON)); assertEquals(MediaType.APPLICATION_FORM_URLENCODED, httpEntity.getHeaders().getContentType()); assertTrue(httpEntity.getHeaders().get("Cookie").contains(TEST_COOKIE)); assertTrue(httpEntity.getHeaders().get("Authorization").contains("Bearer 1234")); assertTrue(httpEntity.getHeaders().get("header1").contains("test_header")); assertTrue(httpEntity.getHeaders().get("header2").containsAll(List.of("value1", "value2"))); }
[*] target: assertEquals(testValue, responseBody)
[-] pred: org. junit. Assert. assertEquals ( testValue, responseBody )
************************************
[+] input: testHashCodeEquals() { final Property<Boolean> p1 = new Property<Boolean>("foo", Boolean.class); final Property<Boolean> p2 = new Property<Boolean>("foo", Boolean.class);  assertEquals(p1.hashCode(), p1.hashCode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(p1.hashCode(), p2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( p1. hashCode(), p2. hashCode() )
************************************
[+] input: GestaltException { GCSConfigSource source = new GCSConfigSource(storage, BUCKET_NAME, "test", Tags.of()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(source.id())
[-] pred: org. junit. Assert. assertNotNull ( source. id() )
************************************
[+] input: Exception { final String expected = "SELECT * FROM BLOG WHERE ID = ?"; DynamicSqlSource source = createDynamicSqlSource( new TextSqlNode("SELECT * FROM BLOG"), new TextSqlNode("WHERE ID = ?")); BoundSql boundSql = source.getBoundSql(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, boundSql.getSql())
[-] pred: org. junit. Assert. assertEquals ( expected, boundSql. getSql ( ) )
************************************
[+] input: test() { VoiceNotifierConfiguration configuration = new VoiceNotifierConfiguration(); AliyunNotifierProvider provider = configuration.aliyunNotifierProvider(null); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(provider)
[-] pred: org. junit. Assert. assertNotNull ( provider )
************************************
[+] input: JsonLdError { JsonArray expanded = JsonLd.expand("\thttps://example.com  ").loader(MOCK_LOADER).ordered().get(); "<AssertPlaceHolder>"; assertEquals(JsonValue.EMPTY_JSON_ARRAY, expanded); }
[*] target: assertNotNull(expanded)
[-] pred: org. junit. Assert. assertNotNull ( expanded )
************************************
[+] input: shouldNotApplyIfNoCommandline() { var existing = makeBasicResource(null);  var testClass = new TruncateCommandLineWhenMetricsEnabled.CommandLineTruncator();  var result = testClass.apply(existing, config); "<AssertPlaceHolder>"; }
[*] target: assertSame(existing, result)
[-] pred: org. junit. Assert. assertSame ( existing, result )
************************************
[+] input: IOException { String triggerId = "trigger123"; String modalContent = TestUtils.getFileContent("files/invocation_template.json"); InvocationModal invocationModal = OBJECT_MAPPER.readValue(modalContent, InvocationModal.class); invocationModal.setTriggerId(triggerId); invocationModal.getActions().get(0).setBlockId(BLOCK_ID_SPOTIFY_LINKS); InteractionModal modal = userInteractionService.handleUserInteraction(invocationModal); "<AssertPlaceHolder>"; verify(slackClient).notifyUser(eq(SLACK_VIEW_PUSH_URI), interactionModalCaptor.capture(), eq(TEST_USER_ID)); InteractionModal updateModal = interactionModalCaptor.getValue(); assertNotNull(updateModal.getView()); assertNotNull(updateModal.getView()); assertEquals(triggerId, updateModal.getTriggerId()); assertEquals(NO_TRACK_WARNING_MESSAGE, updateModal.getView().getBlocks().get(0).getText().getTextValue()); }
[*] target: assertNull(modal)
[-] pred: org. junit. Assert. assertNull ( modal )
************************************
[+] input: size_shouldReturn0_whenNothingRegistered() { int size = service.size();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, size)
[-] pred: org. junit. Assert. assertEquals ( 0, size )
************************************
[+] input: getMaxAccess_inputCorrectOperatorEquals_returnAccessInteger() { /* ARRANGE */ final var maxAccess = 2;  final var constraint = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.EQ) ._rightOperand_(new RdfResource(String.valueOf(maxAccess), URI.create("xsd:decimal"))) .build();  final var permission = new PermissionBuilder() ._action_(Util.asList(Action.USE)) ._constraint_(Util.asList(constraint)) .build();  /* ACT */ final var result = RuleUtils.getMaxAccess(permission);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(maxAccess, result)
[-] pred: org. junit. Assert. assertEquals ( maxAccess, result )
************************************
[+] input: EncodeException {  byte[] bs = ProtoBuf.toByteArray(null);  "<AssertPlaceHolder>"; }
[*] target: assertNull(bs)
[-] pred: org. junit. Assert. assertNull ( bs )
************************************
[+] input: deleteCommunity() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(); Set<CommunityHouse> testCommunityHouses = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT); testCommunity.setHouses(testCommunityHouses);  given(communityRepository.findByCommunityIdWithHouses(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); testCommunityHouses.forEach(house -> { given(communityHouseRepository.findByHouseId(house.getHouseId())) .willReturn(Optional.of(house)); });  testCommunityHouses.forEach(house -> { given(communityHouseRepository.findByHouseId(house.getHouseId())) .willReturn(Optional.of(house)); });  // when boolean communityDeleted = communitySDJpaService.deleteCommunity(TEST_COMMUNITY_ID);  // then "<AssertPlaceHolder>"; verify(communityRepository).findByCommunityIdWithHouses(TEST_COMMUNITY_ID); verify(communityRepository).delete(testCommunity); }
[*] target: assertTrue(communityDeleted)
[-] pred: org. junit. Assert. assertTrue ( communityDeleted )
************************************
[+] input: addCustomConfigNullMap() { // Arrange MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder();  // Act builder.addCustomConfig("db.port", "1234");  // Assert Map<String, String> customConfig = builder.getCustomConfig(); "<AssertPlaceHolder>"; assertEquals(1, customConfig.size()); assertEquals("1234", customConfig.get("db.port")); }
[*] target: assertNotNull(customConfig)
[-] pred: org. junit. Assert. assertNotNull ( customConfig )
************************************
[+] input: test1() { List<Integer> v1 = List.of(1, 2), v2 = List.of(3, 4, 5, 6); ZigzagIterator iterator = new ZigzagIterator(v1, v2); List<Integer> expected = List.of(1, 3, 2, 4, 5, 6); List<Integer> actual = new ArrayList<>(); while (iterator.hasNext()) actual.add(iterator.next()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCreateMappersFromController() { final HandlerResolverFactoryImpl handlerResolverFactory = newHandlerResolverFactory(); final HandlerLocator locator = newHandlerLocator(); final SpringMvcExceptionResolverFactory factory = newExceptionResolverFactory( locator, handlerResolverFactory);  final ControllerExceptionMapping controller = new ControllerExceptionMapping(); List<ExceptionMapper> mappers = factory.createMappersFromController(controller, locator, handlerResolverFactory); "<AssertPlaceHolder>"; assertNotNull(mappers.get(0).mapTo(NullPointerException.class)); assertNotNull(mappers.get(0).mapTo(IllegalArgumentException.class)); assertNull(mappers.get(0).mapTo(RuntimeException.class)); }
[*] target: assertEquals(1, mappers.size())
[-] pred: org. junit. Assert. assertEquals ( 1, mappers. size ( ) )
************************************
[+] input: confirmAgreement_resourceNotFound_returnFalse() { /* ARRANGE */ final var agreement = new Agreement();  when(agreementService.confirmAgreement(agreement)) .thenThrow(ResourceNotFoundException.class);  /* ACT */ final var result = entityUpdateService.confirmAgreement(agreement);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: GeometryException { List<VectorTile.Feature> items = new ArrayList<>();  items.add(new VectorTile.Feature("mylayer", 1, VectorTile.encodeGeometry(newLineString(0, 0, 10, 0)), Map.of("highway", "tag1_link") ));  var result = LinkSimplify.linkSimplify(items, "highway", "tag1", "tag1_link"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: testGetProviderWithProviderClass() {  // Act SecretsProvider secretsProvider = ParamManager.getProvider(SecretsProvider.class);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertNotNull(secretsProvider)
[-] pred: org. junit. Assert. assertNotNull ( secretsProvider )
************************************
[+] input: testGetVirtualEventsOnSubtick() {  VirtualKeyboard pressed = new VirtualKeyboard(new HashSet<>(), new ArrayList<>(), null, false);  // Load actual with the events Queue<VirtualKeyboardEvent> actual = new ConcurrentLinkedQueue<>(); pressed.getVirtualEvents(pressed, actual);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( actual. isEmpty() )
************************************
[+] input: getInternal_Valid_returnOfferedResources() { /* ARRANGE */ agreement.getArtifacts().add(artifact);  /* ACT */ final var artifacts = linker.getInternal(agreement);  /* ASSERT */ final var expected = List.of(artifact); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, artifacts)
[-] pred: org. junit. Assert. assertEquals ( expected, artifacts )
************************************
[+] input: shouldVerifyCorrectPasswordForEmail() { User user = userDataProvider.full(); String email = user.getEmail();  when(userRepository.findByEmail(email)) .thenReturn(Optional.of(user));  boolean verified = migrationService.passwordIsCorrect(email, user.getPassword());  "<AssertPlaceHolder>"; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
[+] input: testHttpTime() { long millis = System.currentTimeMillis();  millis = (millis / 1000) * 1000;  String time = TimeUtil.formatHttpDate(millis);  long millisBack = TimeUtil.parseHttpTime(time);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(millis, millisBack)
[-] pred: org. junit. Assert. assertEquals ( millis, millisBack )
************************************
[+] input: whenGroupCategoryIsCreated_thenRetrievedMsgIsSuccess() { //        //Arrange // //        String personEmail = "manuel@gmail.com"; //        String groupDenomination = "Fontes Family"; //        String groupDescription = "All members from Fontes family"; //        String categoryDenomination = "Allowance"; // //        //Expected result //        Denomination denomination = Denomination.createDenomination(groupDenomination); //        Description description = Description.createDescription(groupDescription); //        DateOfCreation dateOfCreation = DateOfCreation.createDateOfCreation(LocalDate.now()); //        GroupDTO isCategoryCreatedExpected = GroupDTOAssembler.createDTOFromDomainObject(denomination, description, dateOfCreation); // //        NewGroupCategoryInfoDTO newGroupCategoryInfoDTO = new NewGroupCategoryInfoDTO(categoryDenomination); // //        CreateGroupCategoryDTO createGroupCategoryDTO = CreateGroupCategoryDTOAssembler.createDTOFromPrimitiveTypes(personEmail, groupDenomination, categoryDenomination); // //        //Expected Response Entity //        ResponseEntity<Object> expectedResponse = new ResponseEntity<>(isCategoryCreatedExpected, HttpStatus.CREATED); // //        // Mock the behaviour of the service's createCategoryAsPersonInCharge method, //        // so it does not depend on other parts (e.g. DB) //        Mockito.when(service.createCategoryAsPeopleInCharge(createGroupCategoryDTO)).thenReturn(isCategoryCreatedExpected); // //        //Act // //        ResponseEntity<Object> isCategoryCreated = controller.createGroupCategory(newGroupCategoryInfoDTO, personEmail, groupDenomination); // //        //Assert //        "<AssertPlaceHolder>"; //    }
[*] target: assertEquals(expectedResponse, isCategoryCreated)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, isCategoryCreated )
************************************
[+] input: getResourceMaps() { List<AWSCacheCluster> awsCacheClusters = getAwsCacheClusters();  Maps<Resource> resourceMaps = exportElastiCacheClusters.getResourceMaps(awsCacheClusters); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Elasticache.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { final StringBuffer sourceCode = new StringBuffer();  sourceCode.append("package org.mdkt;\n"); sourceCode.append("public class HelloClass {\n"); sourceCode.append("   private static class InnerHelloWorld { int inner; }\n"); sourceCode.append("   public String hello() { return "hello"; }"); sourceCode.append("}");  Class<?> helloClass = InMemoryJavaCompiler.newInstance().compile("org.mdkt.HelloClass", sourceCode.toString()); "<AssertPlaceHolder>"; assertEquals(1, helloClass.getDeclaredMethods().length); }
[*] target: assertNotNull(helloClass)
[-] pred: org. junit. Assert. assertNotNull ( helloClass )
************************************
[+] input: shouldNotThrowExceptionIfInputIsNull_1() { var encoded = UUIDAdapter.toBytesOrDefault(null, null);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(encoded)
[-] pred: org. junit. Assert. assertNull ( encoded )
************************************
[+] input: testParseNoNamespace() { final String xml = "<AppHdr>\n" + "    <From>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=abcdchzz,o=swift</Id>\n" + "    </From>\n" + "    <To>\n" + "        <Type>DN</Type>\n" + "        <Id>cn=funds,ou=dcbadeff,o=swift</Id>\n" + "    </To>\n" + "    <MsgRef>11308917</MsgRef>\n" + "    <CrDate>2013-12-23T15:50:00</CrDate>\n" + "</AppHdr>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
[+] input: testGetOldestPaymentAccountForOfferWhenNoValidAccounts() { PaymentAccounts accounts = new PaymentAccounts(Collections.emptySet(), mock(AccountAgeWitnessService.class)); PaymentAccount actual = accounts.getOldestPaymentAccountForOffer(mock(Offer.class));  "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: should_correctly_set_flag() { OggPage oggPage = OggPage.empty(); oggPage.setFlag(0x00);  oggPage.setContinued(); assertTrue(oggPage.isContinued()); assertFalse(oggPage.isBOS()); assertFalse(oggPage.isEOS());  oggPage.setFlag(0x00);  oggPage.setBOS(); assertFalse(oggPage.isContinued()); assertTrue(oggPage.isBOS()); assertFalse(oggPage.isEOS());  oggPage.setFlag(0x00);  oggPage.setEOS(); assertFalse(oggPage.isContinued()); assertFalse(oggPage.isBOS()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(oggPage.isEOS())
[-] pred: org. junit. Assert. assertTrue ( oggPage. isEOS() )
************************************
[+] input: instantiateViaServiceLoaderApi() { final ServiceLoader<DataCaptureConfig> dataCaptureConfigs = ServiceLoader.load(DataCaptureConfig.class); final Iterator<DataCaptureConfig> iterator = dataCaptureConfigs.iterator(); "<AssertPlaceHolder>"; final DataCaptureConfig dataCaptureConfig = iterator.next(); assertNotNull(dataCaptureConfig); assertFalse(iterator.hasNext()); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
[+] input: setUseHierarchicalSoftmax() { Word2VecConfiguration configuration = new Word2VecConfiguration(Word2VecType.SG); assertEquals(Word2VecConfiguration.IS_USE_HIERARCHICAL_SOFTMAX_DEFAULT, configuration.isUseHierarchicalSoftmax()); configuration.setUseHierarchicalSoftmax(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(configuration.isUseHierarchicalSoftmax())
[-] pred: org. junit. Assert. assertTrue ( configuration. isUseHierarchicalSoftmax ( ) )
************************************
[+] input: shouldGetAndSetEmail() { var user = new LegacyUser(); var expectedValue = "someValue"; user.setEmail(expectedValue); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, user.getEmail())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getEmail() )
************************************
[+] input: shouldReturnPipelineReportId() { String timeStamp = "121322545121"; String expected = "pipeline-121322545121";  String pipelineReportId = IdUtil.getPipelineReportId(timeStamp);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, pipelineReportId)
[-] pred: org. junit. Assert. assertEquals ( expected, pipelineReportId )
************************************
[+] input: testGetOldestPaymentAccountForOffer() { //        AccountAgeWitnessService service = mock(AccountAgeWitnessService.class); // //        PaymentAccount oldest = createAccountWithAge(service, 3); //        Set<PaymentAccount> accounts = Sets.newHashSet( //                oldest, //                createAccountWithAge(service, 2), //                createAccountWithAge(service, 1)); // //        BiFunction<Offer, PaymentAccount, Boolean> dummyValidator = (offer, account) -> true; //        PaymentAccounts testedEntity = new PaymentAccounts(accounts, service, dummyValidator); // //        PaymentAccount actual = testedEntity.getOldestPaymentAccountForOffer(mock(Offer.class)); //        "<AssertPlaceHolder>"; //    }
[*] target: assertEquals(oldest, actual)
[-] pred: org. junit. Assert. assertEquals ( oldest, actual )
************************************
[+] input: testDoneAfterSetException() { final SimpleFuture<Integer> f = new SimpleFuture<>(); f.setException(new Exception()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(f.isDone())
[-] pred: org. junit. Assert. assertTrue ( f. isDone ( ) )
************************************
[+] input: shouldBeEqual() { SchemaVersion version_1 = SchemaVersion.parse("1.2.3"); SchemaVersion version_2 = SchemaVersion.parse("1.2.3"); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, version_1.compareTo(version_2))
[-] pred: org. junit. Assert. assertEquals ( 0, version_1. compareTo ( version_2 ) )
************************************
[+] input: extractPayloadFromMultipartMessage_mapWithPayloadValue_returnPayloadValue() { /* ARRANGE */ final var payloadValue = "some payload values"; final var response = new HashMap<String, String>(); response.put("header", "some header values"); response.put("payload", payloadValue);  /* ACT */ final var result = MessageUtils.extractPayloadFromMultipartMessage(response);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(payloadValue, result)
[-] pred: org. junit. Assert. assertEquals ( payloadValue, result )
************************************
[+] input: Exception { final Long result = function.call("2020-01-01", null, "years"); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("[I-].[Na+]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; Atom iodine = atomList.get(0); assertEquals(0, iodine.getAtomNeighbours().size()); assertEquals(-1, iodine.getCharge());  Atom sodium = atomList.get(1); assertEquals(0, sodium.getAtomNeighbours().size()); assertEquals(1, sodium.getCharge()); }
[*] target: assertEquals(2, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, atomList. size ( ) )
************************************
[+] input: testApply() { var startTime = Instant.now(); var threadName = "akita"; var duration = Duration.of(21, MILLIS); var monitorClassName = "ooo"; var expectedAttributes = new Attributes() .put(THREAD_NAME, threadName) .put(CLASS, monitorClassName) .put(DURATION, duration.toMillis()) .put(STACK_TRACE, (String) null); var expectedEvent = new Event(JFR_JAVA_MONITOR_WAIT, expectedAttributes, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class); var monitorClass = mock(RecordedClass.class); var eventThread = mock(RecordedThread.class);  when(event.getStartTime()).thenReturn(startTime); when(event.getThread(EVENT_THREAD)).thenReturn(eventThread); when(event.getDuration()).thenReturn(duration); when(event.getClass(MONITOR_CLASS)).thenReturn(monitorClass); when(eventThread.getJavaName()).thenReturn(threadName); when(monitorClass.getName()).thenReturn(monitorClassName);  var mapper = new ThreadLockEventMapper();  var result = mapper.apply(event); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: nullOrFalseTest_3() { var actual = Utils.nullOrFalse(true); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(false, actual)
[-] pred: org. junit. Assert. assertEquals ( false, actual )
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("=[SiH2]"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; assertEquals(4, atomList.get(0).determineValency(true)); }
[*] target: assertEquals(1, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, atomList. size ( ) )
************************************
[+] input: configRoot_nonFile() {  var configUrl = "test://config_svr/config_dir/sample-config.yaml"; var expectedRoot = URI.create("test://config_svr/config_dir/");  var manager = new ConfigManager(configUrl, tempDir, plugins); var configRoot = manager.configRoot();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRoot, configRoot)
[-] pred: org. junit. Assert. assertEquals ( expectedRoot, configRoot )
************************************
[+] input: Exception {  int port = NetUtils.getAvailablePort(); URL url = URL.valueOf(ThriftProtocol.NAME + "://127.0.0.1:" + port + "/" + Demo.Iface.class.getName());  Channel channel = new MockedChannel(url);  RandomAccessByteArrayOutputStream bos = new RandomAccessByteArrayOutputStream(128);  Request request = createRequest();  DefaultFuture future = DefaultFuture.newFuture(channel, request, 10, null);  TMessage message = new TMessage("echoString", TMessageType.REPLY, ThriftCodec.getSeqId());  Demo.echoString_result methodResult = new Demo.echoString_result();  methodResult.success = "Hello, World!";  TTransport transport = new TIOStreamTransport(bos);  TBinaryProtocol protocol = new TBinaryProtocol(transport);  int messageLength, headerLength; // prepare protocol.writeI16(ThriftCodec.MAGIC); protocol.writeI32(Integer.MAX_VALUE); protocol.writeI16(Short.MAX_VALUE); protocol.writeByte(ThriftCodec.VERSION); protocol.writeString(Demo.Iface.class.getName()); // path protocol.writeString(Demo.Iface.class.getName()); protocol.writeI64(request.getId()); protocol.getTransport().flush(); headerLength = bos.size();  protocol.writeMessageBegin(message); methodResult.write(protocol); protocol.writeMessageEnd(); protocol.getTransport().flush(); int oldIndex = messageLength = bos.size();  try { bos.setWriteIndex(ThriftCodec.MESSAGE_LENGTH_INDEX); protocol.writeI32(messageLength); bos.setWriteIndex(ThriftCodec.MESSAGE_HEADER_LENGTH_INDEX); protocol.writeI16((short) (0xffff & headerLength)); } finally { bos.setWriteIndex(oldIndex); } // prepare  byte[] buf = new byte[4 + bos.size()]; System.arraycopy(bos.toByteArray(), 0, buf, 4, bos.size());  ChannelBuffer bis = ChannelBuffers.wrappedBuffer(buf);  Object obj = codec.decode((Channel) null, bis);  Assertions."<AssertPlaceHolder>";  Assertions.assertTrue(obj instanceof Response);  Response response = (Response) obj;  Assertions.assertEquals(request.getId(), response.getId());  Assertions.assertTrue(response.getResult() instanceof AppResponse);  AppResponse result = (AppResponse) response.getResult();  Assertions.assertTrue(result.getValue() instanceof String);  Assertions.assertEquals(methodResult.success, result.getValue());  }
[*] target: assertNotNull(obj)
[-] pred: org. junit. Assert. assertNotNull ( obj )
************************************
[+] input: shouldReturnTrue_whenPassed8() { boolean result = powerOfTwo.isPowerOfTwo(8);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testISOWithMilli() { final String ts = "2021-11-16T12:02:41.930486Z"; final Instant i = TimeUtil.fromISOInstant(ts); assertNotNull(i); String time = TimeUtil.toISOInstant(i); "<AssertPlaceHolder>"; }
[*] target: assertEquals(ts, time)
[-] pred: org. junit. Assert. assertEquals ( ts, time )
************************************
[+] input: shouldReturnNullIfUserWithDuplicateIdExists() { final String email = "email"; final LegacyUser user = new LegacyUser(); when(legacyUserService.findByEmail(email)) .thenReturn(Optional.of(user)); when(userModelFactory.isDuplicateUserId(user, realmModel)) .thenReturn(true);  var result = legacyProvider.getUserByEmail(realmModel, email);  "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: test1() { Solution solution = new Solution(); String[] words = {"What", "must", "be", "acknowledgment", "shall", "be"}; List<String> expected = List.of( "What   must   be", "acknowledgment  ", "shall be        " ); List<String> actual = solution.fullJustify(words, 16); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testMap() { var now = System.currentTimeMillis(); Instant startTime = Instant.ofEpochMilli(now); var attr = new Attributes(); var jvmUser = 21.77; var jvmSystem = 22.98; var machineTotal = 1203987.22; var gauge1 = new Gauge(JFR_CPU_LOAD_JVM_USER, jvmUser, now, attr); var gauge2 = new Gauge(JFR_CPU_LOAD_JVM_SYSTEM, jvmSystem, now, attr); var gauge3 = new Gauge(JFR_CPU_LOAD_MACHINE_TOTAL, machineTotal, now, attr); List<Metric> expected = List.of(gauge1, gauge2, gauge3);  var testClass = new OverallCPULoadMapper(); var event = mock(RecordedEvent.class);  when(event.getStartTime()).thenReturn(startTime); when(event.getDouble(JVM_USER)).thenReturn(jvmUser); when(event.getDouble(JVM_SYSTEM)).thenReturn(jvmSystem); when(event.getDouble(MACHINE_TOTAL)).thenReturn(machineTotal);  List<? extends Metric> result = testClass.apply(event);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: getCatalogTemplate_validInput_returnCatalog() { /* ARRANGE */ final var catalog = new ResourceCatalogBuilder().build();  /* ACT */ final var result = TemplateUtils.getCatalogTemplate(catalog);  /* ASSERT */ "<AssertPlaceHolder>"; assertNotNull(result.getDesc());  }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testAdler32CanCombineValues() {  byte[] buf1 = randombuf(1024); byte[] buf2 = randombuf(1024);  long adler1 = getValue(Arrays.asList(buf1)); long adler2 = getValue(Arrays.asList(buf2)); long expected = getValue(Arrays.asList(buf1, buf2));  long actual = Adler32.combine(adler1, adler2, buf2.length);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-cluster-name.cluster-ro-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host); final int connectionHostIndex = 1;  final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerAHost = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerAHost);  when(mockConnectionProvider.connect(refEq(readerAHost))).thenReturn(mockConnection); when(mockTopologyService.getTopology( eq(mockConnection), any(Boolean.class))).thenReturn(topology); when(mockTopologyService.getCachedTopology()).thenReturn(topology); when(mockTopologyService.getHostByName(mockConnection)).thenReturn(readerAHost);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertEquals(connectionHostIndex, failoverPlugin.currentHostIndex); assertTrue(failoverPlugin.explicitlyReadOnly); "<AssertPlaceHolder>"; }
[*] target: assertTrue(failoverPlugin.isCurrentConnectionReadOnly())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isCurrentConnectionReadOnly ( ) )
************************************
[+] input: generateMidWalkForEntity() { try { HdtWalkGenerator parser = new HdtWalkGenerator(loadFile("swdf-2012-11-28.hdt")); String concept = "http://data.semanticweb.org/workshop/semwiki/2010/programme-committee-member";  for (int depth = 1; depth < 10; depth++) { List<String> walk1 = parser.generateMidWalkForEntity(concept, depth); "<AssertPlaceHolder>"; assertTrue(walk1.size() <= depth * 2 + 1, "The walk is supposed to have at most " + (depth * 2 + 1) + " elements. It has: " + walk1.size() + "\nWalk:\n" + walk1); assertTrue(walk1.size() >= 3, "The walk must consist of at least 3 elements. Walk:\n" + walk1);  String[] walkArray = new String[walk1.size()]; for (int i = 0; i < walkArray.length; i++) { walkArray[i] = walk1.get(i); } String hdtPath = loadFile("swdf-2012-11-28.hdt").getAbsolutePath(); try { HDT hdtDataSet = HDTManager.loadHDT(hdtPath); for (int i = 2; i < walkArray.length - 1; i += i + 2) { IteratorTripleString iterator = hdtDataSet.search(walkArray[i - 2], walkArray[i - 1], walkArray[i]); assertTrue(iterator.hasNext(), "The following triple appeared in the walk but not in the data set:\n" + walkArray[i - 2] + " " + walkArray[i - 1] + " " + walkArray[i] + "\nSentence:\n" + walk1); } } catch (NotFoundException | IOException e) { fail("Exception", e); } } } catch (IOException ioe) { LOGGER.error("HDT Init error."); fail("Init should not fail."); } }
[*] target: assertNotNull(walk1)
[-] pred: org. junit. Assert. assertNotNull ( walk1 )
************************************
[+] input: shouldReadCorrectData() { List<AddressRecord> expected = List.of(getDanilaRecord(), getLinasRecord());  List<AddressRecord> records = reader.read( "src/test/resources/address-book.json");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, records)
[-] pred: org. junit. Assert. assertEquals ( expected, records )
************************************
[+] input: Exception { var action = buildMethod("Act", "ion", "()V"); List<RecordedFrame> stack = new ArrayList<>(); stack.add(buildFrame(action, 21, 77)); String payload = "{"desc":"Act.ion()V","line":"21","bytecodeIndex":"77"}"; var expected = "{"type":"stacktrace","language":"java","version":1,"truncated":false,"payload":[" + payload + "]}"; var result = MethodSupport.jsonWrite(stack, Optional.of(1)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testFromJdbcUrl_InvalidUrl_ReturnsNull() { // Prepare test data String connectionUrl = "jdbc:oracle://localhost:1521/mydatabase";  // Test the fromJdbcUrl method DatabaseType result = DatabaseType.fromJdbcUrl(connectionUrl);  // Verify the result "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://10.10.10.10"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: requestResetPassword() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, null); given(securityTokenService.createPasswordResetToken(user)) .willReturn(testSecurityToken); given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user)); given(mailService.sendPasswordRecoverCode(user, testSecurityToken.getToken())) .willReturn(true);  // when boolean resetRequested = userService.requestResetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertEquals(getUserSecurityToken(user, SecurityTokenType.RESET), testSecurityToken); verify(securityTokenService).createPasswordResetToken(user); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verify(userRepository).save(user); verify(mailService).sendPasswordRecoverCode(user, testSecurityToken.getToken()); }
[*] target: assertTrue(resetRequested)
[-] pred: org. junit. Assert. assertTrue ( resetRequested )
************************************
[+] input: getKeysWithIndex() { var indexKey = "myIndex"; var one = "1"; var two = "1"; var map = new IndexedMap<Integer, String>().indexBuilder() .withMapper(str -> Integer.parseInt(str)) .withName(indexKey) .build();  map.put(1, one); map.put(2, two);  var keys = map.keySet(indexKey, 1).stream().collect(Collectors.toList());  Assertions.assertTrue(keys.contains(1)); Assertions.assertTrue(keys.contains(2)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, keys.size())
[-] pred: org. junit. Assert. assertEquals ( 2, keys. size() )
************************************
[+] input: BackendException { GeometryFactory gf = new GeometryFactory(); Geoshape g = HELPER.geoshape(gf.createMultiPoint(new Coordinate[] {new Coordinate(10,10), new Coordinate(20,20)}));  String wkt1 = "MULTIPOINT ((10 10), (20 20))"; String actualWkt1 = GeoToWktConverter.convertToWktString(g); "<AssertPlaceHolder>"; }
[*] target: assertEquals(wkt1, actualWkt1)
[-] pred: org. junit. Assert. assertEquals ( wkt1, actualWkt1 )
************************************
[+] input: shouldFindPostsAllPostsWithDynamicSql() { try (SqlSession session = sqlMapper.openSession()) { List<Post> posts = session.selectList("org.apache.ibatis.domain.blog.mappers.PostMapper.findPost"); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(5, posts.size())
[-] pred: org. junit. Assert. assertEquals ( 5, posts. size ( ) )
************************************
[+] input: JsonProcessingException { setExperianMockResponse(EXPERIAN_ANSWERS_SAMPLE_RESPONSE_REFER);  IdentityVerificationAnswersRequest request = createValidAnswersRequest(); IdentityVerificationAnswersResponse response = _service.submitAnswers(request);  // expect false because experian responded with REFER "<AssertPlaceHolder>"; }
[*] target: assertFalse(response.isPassed())
[-] pred: org. junit. Assert. assertFalse ( response. isPassed ( ) )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/ApigatewayResource.cmd")); String actual = exportApiGatewayResources.getTFImport(getAwsRestApiResources()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: removeAllShouldResetExpanded() { // prepare final GameModule gameModule = mock(GameModule.class); final GamePiece gamePiece1 = mock(GamePiece.class); final GamePiece gamePiece2 = mock(GamePiece.class);  // run Deck d = new Deck(gameModule); d.add(gamePiece1); d.add(gamePiece2); d.setExpanded(true); d.removeAll();  // assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(d.isExpanded())
[-] pred: org. junit. Assert. assertFalse ( d. isExpanded() )
************************************
[+] input: IOException { final String name = "bytes!"; final byte[] data = new byte[]{ 0, 42, 11 };  final Path p = testArchivePath();  // add a file try (ZipArchive z = new ZipArchive(p.toFile())) { // file isn't there assertFalse(z.isModified()); assertNoFile(name, z);  try (OutputStream out = z.getOutputStream(name)) { out.write(data); }  // file is there now assertTrue(z.isModified()); assertFile(name, data, z); }  try (ZipArchive z = new ZipArchive(p.toFile())) { // reopen, check the file was written correctly assertFalse(z.isModified()); assertFile(name, data, z);  // remove the file z.remove(name);  // check that the file is gone assertTrue(z.isModified()); assertNoFile(name, z); }  // reopen, check that the removed file is gone try (ZipArchive z = new ZipArchive(p.toFile())) { "<AssertPlaceHolder>"; assertNoFile(name, z); } }
[*] target: assertFalse(z.isModified())
[-] pred: org. junit. Assert. assertFalse ( z. isModified() )
************************************
[+] input: readResolve() { StraightwaySingleton instance = StraightwaySingleton.getInstance(); try (FileOutputStream fileOutputStream = new FileOutputStream(StraightwaySingleton.class.getResource("").getPath() + "StraightwaySingleton.txt"); final ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) { objectOutputStream.writeObject(instance); final ObjectInputStream objectInputStream = new ObjectInputStream(StraightwaySingleton.class.getResourceAsStream("StraightwaySingleton.txt")); final StraightwaySingleton o = (StraightwaySingleton) objectInputStream.readObject(); Assertions."<AssertPlaceHolder>"; } catch (IOException | SecurityException | ClassNotFoundException e) { e.printStackTrace(); }  }
[*] target: assertEquals(instance, o)
[-] pred: org. junit. Assert. assertEquals ( instance, o )
************************************
[+] input: testResolveEmptyArguments() { final HandlerAdapter mock = mock(HandlerAdapter.class); final AbstractHandlerExecution<HandlerAdapter> execution = new AbstractHandlerExecution<HandlerAdapter>(mock) { @Override protected CompletableFuture<Object> transferToFuture(Object returnValue) { return Futures.completedFuture(returnValue); } }; final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); when(mock.params()).thenReturn(new HandlerAdapter.ResolvableParam[0]); final Object[] args = execution.resolveArguments(request, response); "<AssertPlaceHolder>"; assertEquals(0, args.length); }
[*] target: assertNotNull(args)
[-] pred: org. junit. Assert. assertNotNull ( args )
************************************
[+] input: checkWithClassFromThisModule() { final JarFile actual = ClassUtil.jarFileOf(StringUtil.class);  // asserts "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: create_validInput_returnSubscriptionForRequest() { /* ARRANGE */ Mockito.doReturn(Optional.of(getRequestedResource())).when(entityResolver).getEntityById(Mockito.any()); Mockito.doNothing().when(reqSubLinker).add(Mockito.any(), Mockito.any());  /* ACT */ final var subscription = service.create(subscriptionDesc);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNotNull(subscription)
[-] pred: org. junit. Assert. assertNotNull ( subscription )
************************************
[+] input: InterruptedException { LockCleanerService mockCleaner = ctrl.createMock(LockCleanerService.class); ctrl.replay(); Locker altLocker = getDefaultBuilder().customCleaner(mockCleaner).build(); ctrl.verify(); ctrl.reset();  final ConsistentKeyLockStatus expired = makeStatusNow(); expect(lockState.getLocksForTx(defaultTx)).andReturn(ImmutableMap.of(defaultLockID, expired)); // pretend a huge multiple of the expiration time has passed currentTimeNS = currentTimeNS.plus(100, ChronoUnit.DAYS);  // Checker should compare the fake lock's timestamp to the current time expect(times.sleepPast(expired.getWriteTimestamp().plus(defaultWaitNS))).andReturn(currentTimeNS);  // Checker must slice the store; we return the single expired lock column recordLockGetSliceAndReturnSingleEntry( StaticArrayEntry.of( codec.toLockCol(expired.getWriteTimestamp(), defaultLockRid, times), defaultLockVal));  // Checker must attempt to cleanup expired lock mockCleaner.clean(eq(defaultLockID), eq(currentTimeNS.minus(defaultExpireNS)), eq(defaultTx)); expectLastCall().once();  ctrl.replay(); TemporaryLockingException ple = null; try { altLocker.checkLocks(defaultTx); } catch (TemporaryLockingException e) { ple = e; } "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ple)
[-] pred: org. junit. Assert. assertNotNull ( ple )
************************************
[+] input: InterruptedException { // Fake a pre-existing lock that's long since expired final ConsistentKeyLockStatus expired = makeStatusNow(); expect(lockState.getLocksForTx(defaultTx)).andReturn(ImmutableMap.of(defaultLockID, expired)); // pretend a huge multiple of the expiration time has passed currentTimeNS = currentTimeNS.plus(100, ChronoUnit.DAYS);  // Checker should compare the fake lock's timestamp to the current time expectSleepAfterWritingLock(expired);  // Checker must slice the store; we return the single expired lock column recordLockGetSliceAndReturnSingleEntry( StaticArrayEntry.of( codec.toLockCol(expired.getWriteTimestamp(), defaultLockRid, times), defaultLockVal));  ctrl.replay(); ExpiredLockException ele = null; try { locker.checkLocks(defaultTx); } catch (ExpiredLockException e) { ele = e; } "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ele)
[-] pred: org. junit. Assert. assertNotNull ( ele )
************************************
[+] input: testLineIntersection2() { double[] p = GeometryTools.lineIntersection(0, 0, 1, 1, 0, 2, 1, 3); "<AssertPlaceHolder>"; }
[*] target: assertNull(p)
[-] pred: org. junit. Assert. assertNull ( p )
************************************
[+] input: ConfigurationException { final TinkerGraphApp app = new TinkerGraphApp(CONF_FILE); final GraphTraversalSource g = app.openGraph(); app.createSchema(); final TinkerGraph tinkerGraph = (TinkerGraph) g.getGraph(); final Set<String> vertexIndexes = tinkerGraph.getIndexedKeys(TinkerVertex.class); "<AssertPlaceHolder>"; assertEquals("name", vertexIndexes.toArray()[0]); final Set<String> edgeIndexes = tinkerGraph.getIndexedKeys(TinkerEdge.class); assertTrue(edgeIndexes.isEmpty()); }
[*] target: assertEquals(1, vertexIndexes.size())
[-] pred: org. junit. Assert. assertEquals ( 1, vertexIndexes. size ( ) )
************************************
[+] input: writeReducedTextVectorFile() { String fileToWritePath = "./reduced_vocab.txt"; String vectorTxtFilePath = getPathOfResource("txtVectorFile.txt"); String entityFilePath = getPathOfResource("txtVectorFileEntities.txt");  // try error cases first VectorFileReducer.writeReducedTextVectorFile(null, null, null); VectorFileReducer.writeReducedTextVectorFile(null, fileToWritePath, entityFilePath); VectorFileReducer.writeReducedTextVectorFile(vectorTxtFilePath, null, entityFilePath); VectorFileReducer.writeReducedTextVectorFile(vectorTxtFilePath, fileToWritePath, null);  File fileToWrite = new File(fileToWritePath); assertFalse(fileToWrite.exists());  // now try the real thing: VectorFileReducer.writeReducedTextVectorFile(vectorTxtFilePath, fileToWritePath, entityFilePath); "<AssertPlaceHolder>"; assertTrue(getNumberOfLines(fileToWrite) <= 3);  deleteFile(fileToWrite); }
[*] target: assertTrue(fileToWrite.exists())
[-] pred: org. junit. Assert. assertTrue ( fileToWrite. exists ( ) )
************************************
[+] input: getResourceMaps() { List<AWSElasticsearchDomain> awsElasticsearchDomains = getAwsElasticsearchDomains();  Maps<Resource> resourceMaps = exportElasticsearchDomains.getResourceMaps(awsElasticsearchDomains); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/Elasticsearch.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testParseWithWrapper() { final String xml = "<foo><bar>" + "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.02">" + "   <Fr>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </Fr>" + "   <To>" + "      <FIId>" + "         <FinInstnId>" + "            <Nm>Not available</Nm>" + "         </FinInstnId>" + "      </FIId>" + "   </To>" + "   <BizMsgIdr>AAAAAAAAAA222222</BizMsgIdr>" + "   <MsgDefIdr>seev.037.002.02</MsgDefIdr>" + "   <MktPrctc>" + "       <Regy>FOO</Regy>" + "       <Id>BAR</Id>·+" + "   </MktPrctc>" + "   <CreDt>2017-08-08T16:58:01Z</CreDt>" + "</AppHdr>" + "</bar></foo>"; BusinessAppHdrV02 h = BusinessAppHdrV02.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("Not available", h.getFr().getFIId().getFinInstnId().getNm()); assertEquals("Not available", h.getTo().getFIId().getFinInstnId().getNm()); assertEquals("AAAAAAAAAA222222", h.getBizMsgIdr()); assertEquals("seev.037.002.02", h.getMsgDefIdr()); assertEquals("FOO", h.getMktPrctc().getRegy()); assertEquals("BAR", h.getMktPrctc().getId()); assertNotNull(h.getCreDt()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
[+] input: Exception { final File input = FileUtil.createTempFile(); // first bytes of a zip / jar file FileUtil.writeBytes(input, new byte[] {0x50, 0x4b, 0x03, 0x04, 0x14, 0x20, 0x08, 0x08, 0x08, 0x20, 0x09, 0x76, 0x19, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 });  final boolean actual = FileUtil.isBinary(input);  // asserts "<AssertPlaceHolder>"; }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
[+] input: should_result_millis_when_seconds() {  var expected = 6 * 1000l;  var actual = NumberUtil.fromHumanReadable("6seconds");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { XMLSignature sig; SignedInfo si; KeyInfo ki = null; XMLSignContext signContext; XMLValidateContext validateContext; boolean status = true; for (int i = SIGN_KEYS.length-1; i>=0 ; i--) { si = createSignedInfo(SIG_METHODS[i]); if (VALIDATE_KEYS[i] instanceof PublicKey) { ki = kifac.newKeyInfo(Collections.singletonList (kifac.newKeyValue((PublicKey) VALIDATE_KEYS[i]))); } else { ki = kifac.newKeyInfo(Collections.singletonList (kifac.newKeyName("testuser"))); } sig = fac.newXMLSignature(si, ki, objs, id, sigValueId); Document doc = TestUtils.newDocument(); signContext = new DOMSignContext(SIGN_KEYS[i], doc); signContext.setURIDereferencer(ud); sig.sign(signContext); validateContext = new DOMValidateContext (VALIDATE_KEYS[i], doc.getDocumentElement()); validateContext.setURIDereferencer(ud); if (!sig.validate(validateContext)) { status = false; TestUtils.dumpDocument(doc, "signatureTest_out"+i+".xml"); } } "<AssertPlaceHolder>"; }
[*] target: assertTrue(status)
[-] pred: org. junit. Assert. assertTrue ( status )
************************************
[+] input: testGetKafkaLatestMessage() { QueryMessageRequest request = new QueryMessageRequest(); request.setMessageCount(10); List<BriefMQMessage> messages = kafkaOperator.getLatestMessage(consumer, TOPIC_NAME, streamInfo, request); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, messages.size())
[-] pred: org. junit. Assert. assertEquals ( 0, messages. size ( ) )
************************************
[+] input: removeObjectTriple() { TripleDataSetMemory ds = new TripleDataSetMemory(); ds.addObjectTriple("A", "B", "C"); ds.addObjectTriple("A", "B", "D"); assertEquals(2, ds.getObjectTripleSize());  ds.removeObjectTriple(new Triple("A", "B", "D")); assertEquals(1, ds.getObjectTripleSize()); assertNull(ds.getObjectTriplesInvolvingObject("D")); assertTrue(ds.getObjectTriplesInvolvingSubject("A").contains(new Triple("A", "B", "C")) ); assertEquals(1, ds.getObjectTriplesInvolvingSubject("A").size() );  // negative test ds.removeObjectTriple(null);  // negative test 2 ds.removeObjectTriple(new Triple("A1", "B", "C")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ds.getObjectTripleSize())
[-] pred: org. junit. Assert. assertEquals ( 1, ds. getObjectTripleSize ( ) )
************************************
[+] input: importFromDescriptor_noDependencies_Success() { final MicroserviceImportDescriptorDto descriptorDto = aMicroserviceImportDescriptorDto() .withName("Test Imported Microservice") .build();  final Optional<FullMicroserviceDto> maybeDto = sut.importFromDescriptor(descriptorDto); "<AssertPlaceHolder>";  final FullMicroserviceDto dto = maybeDto.get(); assertNotNull(dto); assertEquals(descriptorDto.getName(), dto.getName());  ApplicationProperties.Imports.Defaults defaults = applicationProperties.getImports().getDefaults(); assertEquals(defaults.getDescription(), dto.getDescription()); assertEquals(defaults.getImageUrl(), dto.getImageUrl()); assertEquals(defaults.getApiUrl(), dto.getSwaggerUrl()); assertEquals(defaults.getGitUrl(), dto.getGitUrl()); assertEquals(defaults.getCiUrl(), dto.getCiUrl()); assertNotNull(dto.getStatus()); assertEquals(defaults.getStatus(), dto.getStatus().getName()); assertNotNull(dto.getTeam());  final TeamDto team = dto.getTeam(); assertEquals(defaults.getTeam().getName(), team.getName()); }
[*] target: assertTrue(maybeDto.isPresent())
[-] pred: org. junit. Assert. assertTrue ( maybeDto. isPresent ( ) )
************************************
[+] input: JsonProcessingException { wireMockServer.stubFor( get(urlPathEqualTo("/response-entity-list")) .withHeader(HttpHeaders.ACCEPT, equalTo(MediaType.APPLICATION_JSON_VALUE)) .withHeader(ECHO, equalTo(ECHO)) .willReturn( aResponse() .withStatus(400) .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) .withBody(objectMapper.writeValueAsString(Collections.singletonList(FIRST_RESPONSE))) ) );  ResponseEntity<List<FirstResponse>> response = exampleClient.responseEntityList().block(); "<AssertPlaceHolder>"; assertEquals(400, response.getStatusCodeValue()); assertNotNull(response.getBody()); assertEquals(1, response.getBody().size()); assertEquals(FIRST_RESPONSE, response.getBody().get(0)); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: should_canConvertValue_returnFalse_ifCheckDoubleMaxValue() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(Double.MAX_VALUE));  //then "<AssertPlaceHolder>"; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
[+] input: ReflectiveOperationException { MarketoFooter footer = getModel(MarketoFooter.class, CURRENT_PAGE_PATH); MarketoConfBasicInfo marketoConfig = footer.getMarketoConfBasicInfo(); "<AssertPlaceHolder>"; assertArrayEquals(new String[]{"dx/content/components/marketo"}, marketoConfig.getMarketoComponentTypes()); assertEquals("//app-ab12.marketo.com", marketoConfig.getBaseUrl()); assertEquals("123-shs-456", marketoConfig.getMunchkinId()); }
[*] target: assertNotNull(marketoConfig)
[-] pred: org. junit. Assert. assertNotNull ( marketoConfig )
************************************
[+] input: TimeoutException { this.clientSamplesAnalyser.config.dropUnmatchedReports = false; var samplesGeneratorForSingleSfu = new SamplesGeneratorForSingleSfu(); samplesGeneratorForSingleSfu.saveTo(this.hamokStorages); var observedClientSamples = samplesGeneratorForSingleSfu.getObservedClientSamples();  var reports = new LinkedList<Report>(); this.clientSamplesAnalyser.observableReports().subscribe(reports::addAll); this.clientSamplesAnalyser.accept(observedClientSamples);  var inboundAudioReports = reports.stream() .filter(report -> ReportType.INBOUND_AUDIO_TRACK.equals(report.type)) .map(report -> (InboundAudioTrackReport) report.payload) .collect(Collectors.toList()); var inboundVideoReports = reports.stream() .filter(report -> ReportType.INBOUND_VIDEO_TRACK.equals(report.type)) .map(report -> (InboundVideoTrackReport) report.payload) .collect(Collectors.toList()); var outboundAudioReports = reports.stream() .filter(report -> ReportType.OUTBOUND_AUDIO_TRACK.equals(report.type)) .map(report -> (OutboundAudioTrackReport) report.payload) .collect(Collectors.toList()); var outboundVideoReports = reports.stream() .filter(report -> ReportType.OUTBOUND_VIDEO_TRACK.equals(report.type)) .map(report -> (OutboundVideoTrackReport) report.payload) .collect(Collectors.toList());  for (var inboundAudioReport : inboundAudioReports) { var found = false; for (var outboundAudioReport : outboundAudioReports) { if (outboundAudioReport.sfuStreamId == inboundAudioReport.sfuStreamId) { found = true; } } Assertions."<AssertPlaceHolder>"; } for (var outboundVideoReport : outboundVideoReports) { var found = false; for (var inboundVideoReport : inboundVideoReports) { if (inboundVideoReport.sfuStreamId == outboundVideoReport.sfuStreamId) { found = true; } } Assertions.assertTrue(found); } }
[*] target: assertTrue(found)
[-] pred: org. junit. Assert. assertTrue ( found )
************************************
[+] input: test() { SaCookie cookie = new SaCookie("satoken", "xxxx-xxxx-xxxx-xxxx") .setDomain("https://sa-token.cc/") .setMaxAge(-1) .setPath("/") .setSameSite("Lax") .setHttpOnly(true) .setSecure(true);  Assertions.assertEquals(cookie.getName(), "satoken"); Assertions.assertEquals(cookie.getValue(), "xxxx-xxxx-xxxx-xxxx"); Assertions.assertEquals(cookie.getDomain(), "https://sa-token.cc/"); Assertions.assertEquals(cookie.getMaxAge(), -1); Assertions.assertEquals(cookie.getPath(), "/"); Assertions.assertEquals(cookie.getSameSite(), "Lax"); Assertions.assertEquals(cookie.getHttpOnly(), true); Assertions.assertEquals(cookie.getSecure(), true); Assertions.assertEquals(cookie.toHeaderValue(), "satoken=xxxx-xxxx-xxxx-xxxx; Domain=https://sa-token.cc/; Path=/; Secure; HttpOnly; SameSite=Lax");  Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(cookie.toString())
[-] pred: org. junit. Assert. assertNotNull ( cookie. toString() )
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-custom-domain.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final Properties properties = new Properties(); properties.setProperty( PropertyKey.clusterInstanceHostPattern.getKeyName(), "?.my-custom-domain.com:9999");  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: testSaveUser() { userService.save(new User(UUID.randomUUID().toString(), "John", "McClane")); userService.save(new User(UUID.randomUUID().toString(), "Chandler", "Bing")); userService.save(new User(UUID.randomUUID().toString(), "Joey", "Tribbiani")); userService.save(new User(UUID.randomUUID().toString(), "John", "Kennedy"));  List<com.madadipouya.springkafkatest.entity.User> users = userService.getUsers("John");  "<AssertPlaceHolder>"; assertEquals(4, users.size()); assertEquals("Kennedy", users.get(0).getLastName()); assertEquals("McClane", users.get(1).getLastName()); assertEquals("Rambo", users.get(2).getLastName()); assertEquals("Wick", users.get(3).getLastName()); }
[*] target: assertNotNull(users)
[-] pred: org. junit. Assert. assertNotNull ( users )
************************************
[+] input: getEndpoint_inputInvalidWrongConstraintType_returnValue() { /* ARRANGE */ final var value = "5"; final var constraint = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.EQ) ._rightOperand_(new RdfResource(value, URI.create("xsd:decimal"))) .build();  final var duty = new DutyBuilder() ._action_(Util.asList(Action.NOTIFY)) ._constraint_(Util.asList(constraint)) .build();  /* ACT */ final var result = RuleUtils.getEndpoint(duty);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
[+] input: getDuration_inputInvalidDurationConstraintNotFirstInList_returnNull() { /* ARRANGE */ final var duration = "P6M";  final var constraint1 = new ConstraintBuilder() ._leftOperand_(LeftOperand.COUNT) ._operator_(BinaryOperator.LTEQ) ._rightOperand_(new RdfResource("5", URI.create("xsd:decimal"))) .build(); final var constraint2 = new ConstraintBuilder() ._leftOperand_(LeftOperand.ELAPSED_TIME) ._operator_(BinaryOperator.SHORTER_EQ) ._rightOperand_(new RdfResource(duration, URI.create("xsd:duration"))) .build();  final var permission = new PermissionBuilder() ._action_(Util.asList(Action.USE)) ._constraint_(Util.asList(constraint1, constraint2)) .build();  /*ACT*/ final var result = RuleUtils.getDuration(permission);  /*ASSERT*/ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: Exception { // given String siteId = null; String oldDocumentId = "acd4be1b-9466-4dcd-b8b8-e5b19135b460"; String documentId = UUID.randomUUID().toString();  Map<String, Object> map = loadRequest("/insert.json", oldDocumentId, documentId);  // when processor.handleRequest(map, this.context);  // then List<String> documents = service.searchFulltext(siteId, "karate", MAX); "<AssertPlaceHolder>"; assertEquals(documentId, documents.get(0));  documents = service.searchFulltext(siteId, "test.pdf", MAX); assertEquals(1, documents.size());  documents = service.searchFulltext(siteId, "bleh.pdf", MAX); assertEquals(0, documents.size());  PaginationResults<DocumentSync> syncs = syncService.getSyncs(siteId, documentId, null, MAX); assertEquals(1, syncs.getResults().size());  assertEquals(documentId, syncs.getResults().get(0).getDocumentId()); assertEquals(DocumentSyncServiceType.TYPESENSE, syncs.getResults().get(0).getService()); assertEquals(DocumentSyncStatus.COMPLETE, syncs.getResults().get(0).getStatus()); assertEquals(DocumentSyncType.METADATA, syncs.getResults().get(0).getType()); assertEquals("added Document Metadata", syncs.getResults().get(0).getMessage()); assertNotNull(syncs.getResults().get(0).getSyncDate()); }
[*] target: assertEquals(1, documents.size())
[-] pred: org. junit. Assert. assertEquals ( 1, documents. size ( ) )
************************************
[+] input: should_result_long_number_of_bytes_when_gib_symbol() {  var expected = (long)(1 * 1024 * 1024 * 1024);  var actual = NumberUtil.fromHumanReadable("1GiB");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/Instance.cmd")); String actual = exportInstances.getTFImport(getAwsReservations()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: tangentLinesForTwoCircles2() { List<double[]> lines = GeometryTools.tangentLinesForTwoCircles(1, 1, 5, 11, 1, 5); "<AssertPlaceHolder>";  lines.sort(comparatorLine);  assertEquals(-1.0, lines.get(0)[0], 1e-6); assertEquals(0.0, lines.get(0)[1], 1e-6); assertEquals(6.0, lines.get(0)[2], 1e-6);  assertEquals(0.0, lines.get(1)[0], 1e-6); assertEquals(1.0, lines.get(1)[1], 1e-6); assertEquals(4.0, lines.get(1)[2], 1e-6);  assertEquals(0.0, lines.get(2)[0], 1e-6); assertEquals(-1.0, lines.get(2)[1], 1e-6); assertEquals(6.0, lines.get(2)[2], 1e-6); }
[*] target: assertEquals(3, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 3, lines. size ( ) )
************************************
[+] input: verifyUsernamePassword() { UserIdentityDO userIdentity = setUp1(); userIdentityService.createIdentity(userIdentity);  boolean valid = userIdentityService.verifyUsernamePassword(userIdentity.getUserId(), "pedro", "123456"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
[+] input: Throwable { String methodName = "toString";  when(invoker.toString()).thenReturn(methodName); Method method = invoker.getClass().getMethod(methodName);  Object result = invokerInvocationHandler.invoke(null, method, new Object[]{}); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(methodName, result)
[-] pred: org. junit. Assert. assertEquals ( methodName, result )
************************************
[+] input: InterruptedException { String interfaceName = "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport4TstService"; String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; String revision = "90980"; String protocol = "xxx"; URL url = generateURL(interfaceName, version, group, application); ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(interfaceName, version, group, "provider", revision, protocol); zookeeperMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url); String fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(serviceMetadataIdentifier));  Assertions.assertNotNull(fileContent);   zookeeperMetadataReport.doRemoveMetadata(serviceMetadataIdentifier);  fileContent = zookeeperMetadataReport.zkClient.getContent(zookeeperMetadataReport.getNodePath(serviceMetadataIdentifier)); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(fileContent)
[-] pred: org. junit. Assert. assertNull ( fileContent )
************************************
[+] input: Exception { var replayMarkerAwareTrackingEventProcessor = spy(processor); when(replayMarkerAwareTrackingEventProcessor.processingStatus()).thenReturn(Map.of( 0, mock(EventTrackerStatus.class), 1, mock(EventTrackerStatus.class))); CountDownLatch replayLatch = new CountDownLatch(1); Consumer<ReplayableEventProcessor> listener = p -> replayLatch.countDown(); replayMarkerAwareTrackingEventProcessor.registerReplayCompletionListener(listener); replayMarkerAwareTrackingEventProcessor.startReplay(startPosition, replayMarkerEvent); assertTrue(replayMarkerAwareTrackingEventProcessor.isReplaying()); verify(replayMarkerAwareTrackingEventProcessor).shutDown(); verify(replayMarkerAwareTrackingEventProcessor).resetTokens(startPosition); verify(replayMarkerAwareTrackingEventProcessor).start(); assertTrue(replayMarkerAwareTrackingEventProcessor.isReplaying());  // Feed the replay event replayMarkerAwareTrackingEventProcessor.canHandle(new GenericEventMessage<>(replayMarkerEvent), List.of(mock(Segment.class))); // one is not enough since we have two segments assertTrue(replayMarkerAwareTrackingEventProcessor.isReplaying()); assertEquals(1, replayLatch.getCount());  // Feed again the replay event replayMarkerAwareTrackingEventProcessor.canHandle(new GenericEventMessage<>(replayMarkerEvent), List.of(mock(Segment.class))); // Now the replay be completed replayLatch.await(1, TimeUnit.SECONDS); assertEquals(0, replayLatch.getCount()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(replayMarkerAwareTrackingEventProcessor.isReplaying())
[-] pred: org. junit. Assert. assertFalse ( replayMarkerAwareTrackingEventProcessor. isReplaying() )
************************************
[+] input: changePassword() { UserIdentityDO userIdentity = setUp1(); userIdentityService.createIdentity(userIdentity);  boolean b = userIdentityService.changePassword(userIdentity.getUserId(), "147258"); assertTrue(b);  boolean valid = userIdentityService.verifyUsernamePassword(userIdentity.getUserId(), "pedro", "147258"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
[+] input: testFindByBatchTagIsAndUploader_CountryIsNot() { List<DiagnosisKeyEntity> result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.FIRST_BATCHTAG, TestData.COUNTRY_A); Assertions.assertEquals(1, result.size()); Assertions.assertEquals(TestData.COUNTRY_B, result.get(0).getUploader().getCountry()); Assertions.assertEquals(TestData.FIRST_BATCHTAG, result.get(0).getBatchTag());  result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.FIRST_BATCHTAG, TestData.COUNTRY_B); Assertions.assertEquals(1, result.size()); Assertions.assertEquals(TestData.COUNTRY_A, result.get(0).getUploader().getCountry()); Assertions.assertEquals(TestData.FIRST_BATCHTAG, result.get(0).getBatchTag());  result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.SECOND_BATCHTAG, TestData.COUNTRY_A); Assertions.assertEquals(1, result.size()); Assertions.assertEquals(TestData.COUNTRY_B, result.get(0).getUploader().getCountry()); Assertions.assertEquals(TestData.SECOND_BATCHTAG, result.get(0).getBatchTag());  result = repository.findByBatchTagIsAndUploader_CountryIsNotOrderByIdAsc(TestData.SECOND_BATCHTAG, TestData.COUNTRY_B); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(result.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )
************************************
[+] input: confirmAgreement_confirmationUnsuccessful_returnFalse() { /* ARRANGE */ final var agreement = new Agreement();  when(agreementService.confirmAgreement(agreement)).thenReturn(false);  /* ACT */ final var result = entityUpdateService.confirmAgreement(agreement);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: updateUserInfo() { UserDO user1 = UserDO.builder().nickname("pedro大大").username("pedro大大").build(); userMapper.insert(user1); Random random = new Random(); UpdateUserInfoDTO dto = new UpdateUserInfoDTO(); Integer rootGroupId = groupService.getParticularGroupIdByLevel(GroupLevelEnum.ROOT); dto.setGroupIds(Arrays.asList(rootGroupId, random.nextInt(100))); boolean b = adminService.updateUserInfo(user1.getId(), dto); "<AssertPlaceHolder>"; }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/RouteTable.cmd")); String actual = exportRouteTables.getTFImport(getAwsRouteTables()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldReturnEmptyTenantWithInvalidClosingInvoiceTime() { String tenantIdentifier = "Tenant0"; loadDeterministicTenantWithInvalidClosingInvoiceTime(tenantIdentifier); TenantConfiguration tenant = TenantConfiguration.getTenantConfiguration( tenantIdentifier, new TableConfiguration(tableName, indexName), client, logger); "<AssertPlaceHolder>"; }
[*] target: assertTrue(tenant.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( tenant. isEmpty() )
************************************
[+] input: getResourceMaps() { List<AWSInstanceProfile> instanceProfiles = getInstanceProfiles(); Maps<Resource> resourceMaps = exportIamInstanceProfiles.getResourceMaps(instanceProfiles); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/IamInstanceProfile.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetFolderByDocumentId01() { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/a/test.pdf");  List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item); assertEquals(2, indexes.size()); dbService.putItems(indexes);  // when FolderIndexRecord folder = index.getFolderByDocumentId(siteId, indexes.get(0).get("documentId").s()); FolderIndexRecord file = index.getFolderByDocumentId(siteId, indexes.get(1).get("documentId").s());  // then "<AssertPlaceHolder>"; assertNotNull(folder); assertEquals("a", folder.path()); assertEquals("folder", folder.type()); } }
[*] target: assertNull(file)
[-] pred: org. junit. Assert. assertNull ( file )
************************************
[+] input: shouldGetEvenNull() { Once<Integer> once = new Once<>();  once.set(null);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(once.get())
[-] pred: org. junit. Assert. assertNull ( once. get() )
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-cluster-name.cluster-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final HostInfo writerHost = ClusterAwareTestUtils.createBasicHostInfo("writer-host"); final HostInfo readerA_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-a-host"); final HostInfo readerB_Host = ClusterAwareTestUtils.createBasicHostInfo("reader-b-host"); final List<HostInfo> topology = new ArrayList<>(); topology.add(writerHost); topology.add(readerA_Host); topology.add(readerB_Host);  when(mockTopologyService.getCachedTopology()).thenReturn(topology); when(mockTopologyService.getTopology( eq(mockConnection), any(Boolean.class))).thenReturn(topology); when(mockTopologyService.getHostByName(mockConnection)).thenReturn(writerHost); when(mockConnectionProvider.connect(refEq(writerHost))).thenReturn(mockConnection);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isCurrentConnectionWriter()); assertFalse(failoverPlugin.explicitlyReadOnly); "<AssertPlaceHolder>"; }
[*] target: assertFalse(failoverPlugin.isCurrentConnectionReadOnly())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isCurrentConnectionReadOnly ( ) )
************************************
[+] input: Exception { Properties p = ConfigUtils.loadProperties("properties.load", false);  Properties expected = new Properties(); expected.put("a", "12"); expected.put("b", "34"); expected.put("c", "56");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, p)
[-] pred: org. junit. Assert. assertEquals ( expected, p )
************************************
[+] input: IOException { String data = "In ancient times cats were worshipped as gods; they have not forgotten this."; ByteBuffer compressed;  try (ByteArrayOutputStream baos = new ByteArrayOutputStream(); BrotliOutputStream output = new BrotliOutputStream(baos)) { output.write(data.getBytes(StandardCharsets.UTF_8)); output.close(); compressed = ByteBuffer.wrap(baos.toByteArray()); }  // Quick verification that it compressed as expected assertEquals(59, compressed.remaining());  BrotliDecoderChannel channel = new BrotliDecoderChannel(new EntireBufferByteChannel(compressed)); ByteBuffer output = ByteBuffer.allocate(2048); channel.read(output); output.flip(); String result = StandardCharsets.UTF_8.decode(output).toString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(data, result)
[-] pred: org. junit. Assert. assertEquals ( data, result )
************************************
[+] input: convert() { // given final BigDecimalConverter converter = new BigDecimalConverter(); final String rawValue = "1.2";  // when final BigDecimal value = converter.convert(rawValue);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("1.2", value.toString()); }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
[+] input: crc32Empty() { LibdeflateCRC32 crc32 = new LibdeflateCRC32(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, crc32.getValue())
[-] pred: org. junit. Assert. assertEquals ( 0, crc32. getValue() )
************************************
[+] input: getInternal_Valid_returnOfferedResources() { /* ARRANGE */ catalog.getOfferedResources().add(resource);  /* ACT */ final var resources = linker.getInternal(catalog);  /* ASSERT */ final var expected = List.of(resource); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, resources)
[-] pred: org. junit. Assert. assertEquals ( expected, resources )
************************************
[+] input: Throwable { TaskStage stage = TaskStage .builder("test") .<Integer>withSupplier(() -> 1) .build();  AtomicReference<Integer> result = stage.execute(null);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, result.get()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: InterruptedException { String version = "1.0.0"; String group = null; String application = "etc-metadata-report-consumer-test"; String revision = "90980"; String protocol = "xxx"; URL url = generateURL(TEST_SERVICE, version, group, application); SubscriberMetadataIdentifier subscriberMetadataIdentifier = new SubscriberMetadataIdentifier(application, revision); Gson gson = new Gson(); String r = gson.toJson(Arrays.asList(url)); etcdMetadataReport.doSaveSubscriberData(subscriberMetadataIdentifier, r);  CompletableFuture<GetResponse> response = etcdClientForTest.getKVClient().get(ByteSequence.from( etcdMetadataReport.getNodeKey(subscriberMetadataIdentifier), StandardCharsets.UTF_8)); String fileContent = etcdMetadataReport.doGetSubscribedURLs(subscriberMetadataIdentifier); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(fileContent, r); }
[*] target: assertNotNull(fileContent)
[-] pred: org. junit. Assert. assertNotNull ( fileContent )
************************************
[+] input: configRoot_file() {  var configUrl = "config_dir/sample-config.yaml"; var expectedRoot = tempDir.resolve("config_dir").normalize();  var manager = new ConfigManager(configUrl, tempDir, plugins); var configRoot = Paths.get(manager.configRoot()).normalize();  "<AssertPlaceHolder>"; assertTrue(Files.exists(configRoot)); assertTrue(Files.isDirectory(configRoot)); }
[*] target: assertEquals(expectedRoot, configRoot)
[-] pred: org. junit. Assert. assertEquals ( expectedRoot, configRoot )
************************************
[+] input: IOException { try (InputStream yamlStream = this.getClass().getResourceAsStream("/AppNoService.yml")) { List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream)); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, urls.size()); URL url = urls.get(0); Assertions.assertEquals("127.0.0.1", url.getAddress()); Assertions.assertEquals("*", url.getServiceInterface()); Assertions.assertEquals(6666, url.getParameter(TIMEOUT_KEY, 0)); Assertions.assertEquals("random", url.getParameter(LOADBALANCE_KEY)); Assertions.assertEquals(url.getParameter(APPLICATION_KEY), "demo-consumer"); } }
[*] target: assertNotNull(urls)
[-] pred: org. junit. Assert. assertNotNull ( urls )
************************************
[+] input: shouldGetDecryptedData() { // given var fakeData = MetricCsvFixture.MOCK_METRIC_CSV_DATA_WITH_ONE_PIPELINE(); String jsonFakeData = new Gson().toJson(fakeData); String randomIv = encryptDecryptUtil.getRandomIv(); when(systemUtil.getEnvMap()).thenReturn(envMap); String secretKey = encryptDecryptUtil.getSecretKey("fakePassword"); String encryptedData = encryptDecryptUtil.getEncryptedData(randomIv, secretKey, jsonFakeData); // when String configData = encryptDecryptUtil.getDecryptedData(randomIv, secretKey, encryptedData); // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(jsonFakeData, configData)
[-] pred: org. junit. Assert. assertEquals ( jsonFakeData, configData )
************************************
[+] input: extractPayloadFromMultipartMessage_mapWithoutPayloadValue_returnNull() { /* ARRANGE */ final var response = new HashMap<String, String>(); response.put("header", "some header values");  /* ACT */ final var result = MessageUtils.extractPayloadFromMultipartMessage(response);  /* ACT & ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: setIdGetIdShouldWork() { // prepare final String id = "someId";  // run Stack s = new Stack(); s.setId(id);  // assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(id, s.getId())
[-] pred: org. junit. Assert. assertEquals ( id, s. getId() )
************************************
[+] input: getAllProducts() { wireMockServer.stubFor(get(urlPathEqualTo("/products")) .willReturn(aResponse() .withStatus(200) .withHeader("Content-Type", "application/json") .withBody("[" + "{"id":"9","type":"CREDIT_CARD","name":"GEM Visa","version":"v2"},"+ "{"id":"10","type":"CREDIT_CARD","name":"28 Degrees","version":"v1"}"+ "]")));  List<Product> expected = Arrays.asList(new Product("9", "CREDIT_CARD", "GEM Visa", "v2"), new Product("10", "CREDIT_CARD", "28 Degrees", "v1"));  List<Product> products = productService.getAllProducts();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, products)
[-] pred: org. junit. Assert. assertEquals ( expected, products )
************************************
[+] input: testDoFixValueAssert_notAsExpected() { GreaterThanOrEqualsAssertion greaterThanOrEqualsAssertion = MockGreaterThanOrEqualsAssertionFactory.create("0"); MetricsCollectedResult<String> metricsCollectedResult = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "-1");  boolean assertionResult = greaterThanOrEqualsAssertion.doFixValueAssert(metricsCollectedResult); "<AssertPlaceHolder>"; }
[*] target: assertFalse(assertionResult)
[-] pred: org. junit. Assert. assertFalse ( assertionResult )
************************************
[+] input: getInstance() { final InnerClassSingleton instance1 = InnerClassSingleton.getInstance(); final InnerClassSingleton instance2 = InnerClassSingleton.getInstance(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertSame(instance1, instance2)
[-] pred: org. junit. Assert. assertSame ( instance1, instance2 )
************************************
[+] input: getInstance() { final StraightwaySingleton instance1 = StraightwaySingleton.getInstance(); final StraightwaySingleton instance2 = StraightwaySingleton.getInstance(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertSame(instance1, instance2)
[-] pred: org. junit. Assert. assertSame ( instance1, instance2 )
************************************
[+] input: Exception { try (Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:association_nested", "SA", ""); Statement stmt = conn.createStatement()) { stmt.execute("create table folder (id int, name varchar(100), parent_id int)"); stmt.execute("insert into folder (id, name) values(1, 'Root')"); stmt.execute("insert into folder values(2, 'Folder 1', 1)"); stmt.execute("insert into folder values(3, 'Folder 2', 1)"); stmt.execute("insert into folder values(4, 'Folder 2_1', 3)"); stmt.execute("insert into folder values(5, 'Folder 2_2', 3)"); }  /** * Root/ *    Folder 1/ *    Folder 2/ *      Folder 2_1 *      Folder 2_2 */  String resource = "org/apache/ibatis/submitted/association_nested/mybatis-config.xml"; try (InputStream inputStream = Resources.getResourceAsStream(resource)) { SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); try (SqlSession session = sqlSessionFactory.openSession()) { FolderMapper postMapper = session.getMapper(FolderMapper.class);  List<FolderFlatTree> folders = postMapper.findWithSubFolders("Root");  Assertions."<AssertPlaceHolder>"; } } }
[*] target: assertEquals(3, folders.size())
[-] pred: org. junit. Assert. assertEquals ( 3, folders. size ( ) )
************************************
[+] input: testContrainsPropertyValueNull() { // given final MinConstraint<Integer> constraint = new MinConstraint<>(7); final String propName = "app.property"; final String value = null; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String site = siteId != null ? siteId + "/" : ""; String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/test.pdf");  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 1; "<AssertPlaceHolder>";  int i = 0; assertEquals(site + "global#folders#", indexes.get(i).get(PK).s()); assertEquals("fi#test.pdf", indexes.get(i).get(SK).s()); assertEquals("test.pdf", indexes.get(i).get("path").s()); assertEquals(item.getDocumentId(), indexes.get(i++).get("documentId").s()); } }
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
[+] input: shouldGetConfigProperties() { var result = ConfigurationProperties.getConfigProperties(); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testFilterFields() { Document doc = getTypedDocument("sample_12_model", "/jdocs/sample_12.json"); doc.setString("$.application.members[number=0].name", "Nitika1"); doc.setString("$.application.members[number=0].contacts.addresses[type=home].line1", "Greenwood City"); String expected = getCompressedJson("/jdocs/sample_12_expected.json"); String actual = doc.getJson(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldSetAndGetPassword() { var password = "somePassword"; var dto = new UserPasswordDto(); dto.setPassword(password); "<AssertPlaceHolder>"; }
[*] target: assertEquals(password, dto.getPassword())
[-] pred: org. junit. Assert. assertEquals ( password, dto. getPassword() )
************************************
[+] input: testIdentifyMessage_FromBAH() { final String xml = "<?xml version="1.0" encoding="UTF-8"?>" + "<Message>\n" + "<AppHdr xmlns="urn:iso:std:iso:20022:tech:xsd:head.001.001.01" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n" + "<Fr> \n" + "	<FIId>\n" + "		<FinInstnId>\n" + "			<BICFI>FOOCUS3NXXX</BICFI>\n" + "			<ClrSysMmbId>\n" + "				<ClrSysId>\n" + "					<Prtry>T2S</Prtry>\n" + "				</ClrSysId>\n" + "				<MmbId>ADMNUSERLUXCSDT1</MmbId>\n" + "			</ClrSysMmbId>\n" + "			<Othr>\n" + "				<Id>FOOTXE2SXXX</Id>\n" + "				</Othr> \n" + "		</FinInstnId> \n" + "	</FIId> \n" + "</Fr> \n" + "<To> \n" + "	<FIId>\n" + "		<FinInstnId>\n" + "			<BICFI>ABICUS33</BICFI>\n" + "			<Othr>\n" + "				<Id>AARBDE5W100</Id>\n" + "			</Othr>\n" + "		</FinInstnId> \n" + "	</FIId> \n" + "</To> \n" + "<BizMsgIdr>2012111915360885</BizMsgIdr>\n" + "<MsgDefIdr>seev.031.002.03</MsgDefIdr> \n" + "<BizSvc>CSD</BizSvc> \n" + "<CreDt>2015-08-27T08:59:00Z</CreDt>\n" + "</AppHdr>\n" + "<Document></Document>\n" + "</Message>"; MxId id = MxParseUtils.identifyMessage(xml).orElse(null); "<AssertPlaceHolder>"; assertEquals("seev.031.002.03", id.id()); }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
[+] input: should_result_millis_when_minute() {  var expected = 1 * 60 * 1000l;  var actual = NumberUtil.fromHumanReadable("1minute");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testFreeCell() { Cell cell = new Cell(0, 0); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cell.isFree())
[-] pred: org. junit. Assert. assertTrue ( cell. isFree() )
************************************
[+] input: IOException { // Be sure to retest/-generate this output if "breaking" changes are made, for example to spacing final String input = Files.readString(PATH.resolve("BBCodeExample.txt")); final String expected = Files.readString(PATH.resolve("BBCodeConverted.txt")); final String result = this.converter.convertToMarkdown(input); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: getResourceMaps() { //given List<AWSPolicy> awsPolicy = getAwsPolicies();  Maps<Resource> resourceMaps = exportIamPolicies.getResourceMaps(awsPolicy);  String actual = resourceMaps.unmarshall(); log.debug("actual => \n{}", actual);  String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/IamPolicy.tf")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetDumpOnExitBadValue() { String expected = "false"; RecordingOptions opts = new RecordingOptions.Builder().dumpOnExit("BAD_VALUE").build(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, opts.getDumpOnExit())
[-] pred: org. junit. Assert. assertEquals ( expected, opts. getDumpOnExit() )
************************************
[+] input: shouldReturnNullIfUserNotFoundByUsername() { final String username = "user"; when(legacyUserService.findByUsername(username)) .thenReturn(Optional.empty());  var result = legacyProvider.getUserByUsername(realmModel, username);  "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: shouldImplicitlyRollbackInsertedAuthor() { manager.startManagedSession(); AuthorMapper mapper = manager.getMapper(AuthorMapper.class); Author expected = new Author(502, "emacarron", "******", "emacarron@somewhere.com", "Something...", null); mapper.insertAuthor(expected); manager.close(); Author actual = mapper.selectAuthor(502); "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: Exception { VariableInfo info = new RealInfo("bob", 100, 1000.0, 0.0, 25.0, 125.0); VariableInfoProto infoProto = info.serialize(); assertEquals(0, infoProto.getVersion()); assertEquals("org.tribuo.RealInfo", infoProto.getClassName()); RealInfoProto proto = infoProto.getSerializedData().unpack(RealInfoProto.class); assertEquals("bob", proto.getName()); assertEquals(100, proto.getCount()); assertEquals(1000.0, proto.getMax()); assertEquals(0.0, proto.getMin()); assertEquals(25.0, proto.getMean()); assertEquals(125.0, proto.getSumSquares());  VariableInfo infoD = ProtoUtil.deserialize(infoProto); "<AssertPlaceHolder>"; }
[*] target: assertEquals(info, infoD)
[-] pred: org. junit. Assert. assertEquals ( info, infoD )
************************************
[+] input: testGetListTweets() { String   listId  = "1449313282892910592"; TweetList tweets = twitterClient.getListTweets(listId,  AdditionalParameters.builder().recursiveCall(false).maxResults(150).build()); "<AssertPlaceHolder>"; assertTrue(tweets.getData().size() > 1); assertNotNull(tweets.getData().get(0).getId()); assertNotNull(tweets.getData().get(0).getText()); assertNotNull(tweets.getData().get(0).getCreatedAt()); }
[*] target: assertNotNull(tweets)
[-] pred: org. junit. Assert. assertNotNull ( tweets )
************************************
[+] input: Language.LanguageLoadException { Language language = getBaseLanguage(); for (Language.Term term : Language.Term.values()) { language.get(term, getFakeReplacements(term)); } "<AssertPlaceHolder>"; }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: SQLException { final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class); final String url = "jdbc:mysql:aws://10.10.10.10"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final Properties properties = new Properties(); properties.setProperty( PropertyKey.clusterInstanceHostPattern.getKeyName(), "?.my-custom-domain.com:9999"); properties.setProperty( PropertyKey.clusterId.getKeyName(), "test-cluster-id"); final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties);  assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); verify(mockTopologyService, atLeastOnce()).setClusterId(captor.capture()); final List<String> values = captor.getAllValues(); assertTrue(values.contains("test-cluster-id")); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: ignoreErrorsNoTransferTest() { Condition returnValue = ignoreErrors(() -> {}); "<AssertPlaceHolder>"; }
[*] target: assertNull(returnValue)
[-] pred: org. junit. Assert. assertNull ( returnValue )
************************************
[+] input: StructureBuildingException { Fragment fragment = sBuilder.build("C#N"); List<Atom> atomList = fragment.getAtomList(); "<AssertPlaceHolder>"; Set<Bond> bonds = fragment.getBondSet(); assertEquals(1, bonds.size()); for (Bond bond : bonds) { assertEquals(3, bond.getOrder()); } }
[*] target: assertEquals(2, atomList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, atomList. size ( ) )
************************************
[+] input: test_fetchNameWithMultipleArchived_notFound() { Random rand = new Random(); int times = rand.nextInt(5) + 5; for (int time = 1; time <= times; time++) { TaskDefinition taskDefinitionTemp = MockTaskDefinitionFactory.createTaskDefinition(); taskDefinitionTemp = taskDefinitionTemp.cloneBuilder() .withName("test") .build(); taskDefinitionDao.archive(taskDefinitionTemp.getDefinitionId()); } List<TaskDefinition> fetched = taskDefinitionDao.fetchAliveTaskDefinitionByName("test"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(fetched.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( fetched. isEmpty ( ) )
************************************
[+] input: testSingleMajorGcEventSummary() { var event = mock(RecordedEvent.class); var numOfEvents = 1; var eventStartTime = DEFAULT_START_TIME_MS + 1; var eventDurationNanos = 13_700_000; var eventDurationMillis = Duration.ofNanos(eventDurationNanos).toMillis();  var expectedMajorGcSummaryMetric = new Summary( MAJOR_GC_DURATION_METRIC_NAME, numOfEvents, // count eventDurationMillis, // sum eventDurationMillis, // min eventDurationMillis, // max DEFAULT_START_TIME_MS, // startTimeMs eventStartTime, // endTimeMs new Attributes());  List<Metric> expected = List.of(defaultMinorGcSummary, expectedMajorGcSummaryMetric); var testClass = new BasicGarbageCollectionSummarizer(DEFAULT_START_TIME_MS);  when(event.getValue(NAME)).thenReturn(G1_OLD); when(event.getStartTime()).thenReturn(Instant.ofEpochMilli(eventStartTime)); when(event.getDuration(DURATION)).thenReturn(Duration.ofNanos(eventDurationNanos));  testClass.accept(event); final List<Summary> result = testClass.summarize().collect(toList()); "<AssertPlaceHolder>";  for (Summary summary : result) { var summaryName = summary.getName(); if (summaryName.equals(MAJOR_GC_DURATION_METRIC_NAME)) { assertEquals(numOfEvents, summary.getCount()); } else if (summaryName.equals(MINOR_GC_DURATION_METRIC_NAME)) { assertEquals(DEFAULT_COUNT, summary.getCount()); } } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: isJoinable() { study.setPublished(true); study.setRecruiting(true);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(study.isJoinable(userAccount))
[-] pred: org. junit. Assert. assertTrue ( study. isJoinable ( userAccount ) )
************************************
[+] input: testInvokeWithUrlParams() { final WebOperation op = webOperation(InvocationContext::getArguments); final OperationHandler handler = new OperationHandler(op); final AsyncRequest get = MockAsyncRequest.aMockRequest() .withMethod("GET") .withParameter("foo", "a") .withParameter("bar", "b") .build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final CompletableFuture<Object> ret1 = handler.handle(get, response, null); "<AssertPlaceHolder>"; assertNotNull(ret1.join()); final Map<String, Object> args = (Map<String, Object>) ret1.join(); assertEquals(2, args.size()); assertTrue(args.containsKey("foo")); assertTrue(args.containsKey("bar")); assertEquals("a", args.get("foo")); assertEquals("b", args.get("bar")); }
[*] target: assertNotNull(ret1)
[-] pred: org. junit. Assert. assertNotNull ( ret1 )
************************************
[+] input: ParsingException { ParseTokens pTokens = new ParseTokens(Arrays.asList("fooane",""), Arrays.asList('a', OpsinTools.END_OF_MAINGROUP)); List<ParseWord> parseWords = WordTools.splitIntoParseWords(Arrays.asList(pTokens), "fooane"); "<AssertPlaceHolder>"; assertEquals("fooane", parseWords.get(0).getWord()); assertEquals(1, parseWords.get(0).getParseTokens().size()); assertEquals(pTokens, parseWords.get(0).getParseTokens().get(0)); }
[*] target: assertEquals(1, parseWords.size())
[-] pred: org. junit. Assert. assertEquals ( 1, parseWords. size ( ) )
************************************
[+] input: testTasks_basicTask() {  var TASKS = List.of(StandardArgs.task("do_something", "desc"));  var command = "--config app.conf --task do_something"; var commandArgs = command.split("\\s");  var standardArgs = StandardArgsProcessor.processArgs(APP_NAME, commandArgs, TASKS, null); var tasks = standardArgs.getTasks();  "<AssertPlaceHolder>"; assertEquals("do_something", tasks.get(0).getTaskName()); assertNull(tasks.get(0).getTaskArg()); }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
[+] input: Exception { final HandlerAdapter mock = mock(HandlerAdapter.class); final AbstractHandlerExecution<HandlerAdapter> execution = new AbstractHandlerExecution<HandlerAdapter>(mock) { @Override protected CompletableFuture<Object> transferToFuture(Object returnValue) { return Futures.completedFuture(returnValue); } }; final AsyncRequest request = MockAsyncRequest.aMockRequest().build(); final AsyncResponse response = MockAsyncResponse.aMockResponse().build(); final MethodParam param = mock(MethodParam.class); final ArgumentResolver argResolver = mock(ArgumentResolver.class); when(argResolver.resolve(any(), any())).thenReturn("foo"); final HandlerAdapter.ResolvableParam[] params = new HandlerAdapter.ResolvableParam[1]; params[0] = new HandlerAdapter.ResolvableParam(param, argResolver); when(mock.params()) .thenReturn(params); final Object[] args = execution.resolveArguments(request, response); "<AssertPlaceHolder>"; assertEquals(1, args.length); assertEquals("foo", args[0]); }
[*] target: assertNotNull(args)
[-] pred: org. junit. Assert. assertNotNull ( args )
************************************
[+] input: JsonProcessingException { // Create a user and write to Kafka User user = new User("11111", "John", "Wick"); producer.writeToKafka(user);  // Read the message (John Wick user) with a test consumer from Kafka and assert its properties ConsumerRecord<String, String> message = records.poll(500, TimeUnit.MILLISECONDS); "<AssertPlaceHolder>"; assertEquals("11111", message.key()); User result = objectMapper.readValue(message.value(), User.class); assertNotNull(result); assertEquals("John", result.getFirstName()); assertEquals("Wick", result.getLastName()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
[+] input: getResourceMaps() { // given List<AWSRouteTable> routeTables = getAwsRouteTables();  Maps<Resource> resourceMaps = exportRouteTables.getResourceMaps(routeTables); String actual = resourceMaps.unmarshall(); log.debug("resourceMaps => \n{}", actual); String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/RouteTable.tf")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testHashed() { FeatureMap fm = buildMap(); String salt = "This is a salt"; Hasher hasher = new HashCodeHasher(salt); HashedFeatureMap hfm = HashedFeatureMap.generateHashedFeatureMap(fm,hasher);  // Note this check is only true if the hashing didn't induce collisions. assertEquals(fm.size(),hfm.size);  FeatureDomainProto hfmProto = hfm.serialize(); FeatureMap deserHfm = FeatureMap.deserialize(hfmProto); // Serialization intentionally doesn't preserve the salt. ((HashedFeatureMap) deserHfm).setSalt(salt); "<AssertPlaceHolder>"; }
[*] target: assertEquals(hfm, deserHfm)
[-] pred: org. junit. Assert. assertEquals ( hfm, deserHfm )
************************************
[+] input: selectGroupsByUserId() { String email = "13129982604@qq.com"; String username = "pedro-test"; UserDO user = new UserDO(); user.setEmail(email); user.setUsername(username); userMapper.insert(user);  GroupDO group = GroupDO.builder().name("group").info("零零落落").build(); groupMapper.insert(group);  userGroupMapper.insert(new UserGroupDO(user.getId(), group.getId()));  List<GroupDO> groups = groupMapper.selectGroupsByUserId(user.getId()); boolean anyMatch = groups.stream().anyMatch(it -> it.getName().equals("group")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(anyMatch)
[-] pred: org. junit. Assert. assertTrue ( anyMatch )
************************************
[+] input: getResourceMaps() { List<AWSCacheReplicationGroup> awsCacheClusters = getAwsCacheReplicationGroups();  Maps<Resource> resourceMaps = exportElastiCacheReplicationGroups.getResourceMaps(awsCacheClusters); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/ElasticacheReplicationGroup.tf") ); "<AssertPlaceHolder>";  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldGetValueWhenObjectIsNotNull() { Velocity velocity = Velocity.builder().velocityForCards(10).velocityForSP(10).build(); ReportResponse response = ReportResponse.builder().velocity(velocity).build();  Velocity result = ValueUtil.getValueOrNull(response, ReportResponse::getVelocity);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(velocity, result)
[-] pred: org. junit. Assert. assertEquals ( velocity, result )
************************************
[+] input: NoSuchAlgorithmException { KeyPair ownerKeys = TestUtils.generateKeyPair();  ProtectedStoragePayload protectedStoragePayload = new ProtectedStoragePayloadStub(ownerKeys.getPublic()); ProtectedStorageEntry protectedStorageEntry = new ProtectedStorageEntry(protectedStoragePayload, ownerKeys.getPublic(), 1, new byte[] { 0 }, Clock.systemDefaultZone());  "<AssertPlaceHolder>"; }
[*] target: assertFalse(protectedStorageEntry.isValidForAddOperation())
[-] pred: org. junit. Assert. assertFalse ( protectedStorageEntry. isValidForAddOperation ( ) )
************************************
[+] input: should_result_even_has_space_between_value_and_symbol() {  var expected = 0.5d;  var actual = NumberUtil.fromHumanReadable("50 %");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetKafkaLatestMessage_1() { addRecord(Collections.singletonList("inlong")); QueryMessageRequest request = new QueryMessageRequest(); request.setMessageCount(10); List<BriefMQMessage> messages = kafkaOperator.getLatestMessage(consumer, TOPIC_NAME, streamInfo, request); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("inlong", messages.get(0).getBody()); }
[*] target: assertEquals(1, messages.size())
[-] pred: org. junit. Assert. assertEquals ( 1, messages. size ( ) )
************************************
[+] input: testDoVolatilityAssert_belowLowerLimit() { AbsoluteAssertion absoluteAssertion = MockAbsoluteAssertionFactory.create("10", ComparisonPeriod.from(ComparisonPeriod.FixedPeriod.THIS_TIME)); MetricsCollectedResult<String> current = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "0"); MetricsCollectedResult<String> benchmark = new MetricsCollectedResult<>(MockSQLMetricsFactory.create(), DateTimeUtils.now(), "100"); boolean validateResult = absoluteAssertion.doVolatilityAssert(current, benchmark); "<AssertPlaceHolder>"; }
[*] target: assertFalse(validateResult)
[-] pred: org. junit. Assert. assertFalse ( validateResult )
************************************
[+] input: setPosGetPosShouldWork() { // prepare final GamePiece gamePiece = mock(GamePiece.class); final Map map = mock(Map.class); final Point point1 = new Point(10, 100); final Point point2 = new Point(11, 101); when(gamePiece.getMap()).thenReturn(map); when(gamePiece.getPosition()).thenReturn(point1);  // run Stack s = new Stack(gamePiece); s.setPosition(point2);  // assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(point2, s.getPosition())
[-] pred: org. junit. Assert. assertEquals ( point2, s. getPosition() )
************************************
[+] input: getInstanceShouldNotBeNull() { VFS vsf = VFS.getInstance(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(vsf)
[-] pred: org. junit. Assert. assertNotNull ( vsf )
************************************
[+] input: IOException { final Res res = new Res(); final File file = File.createTempFile("httpserver-", ".tmp"); file.deleteOnExit(); assertTrue(res.write(new byte[1]).isSuccess()); try { assertThrows(IllegalStateException.class, () -> res.sendFile(file, 0L, 1L)); } finally { file.delete(); }  assertTrue(res.isCommitted()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(res.isEnded())
[-] pred: org. junit. Assert. assertFalse ( res. isEnded() )
************************************
[+] input: testKafkaDoc() { List<KafkaConfigDescriptionDto> result = new UISupportController(null, null, null, null, null, null, null) .getSupportedKafkaConfigs(); "<AssertPlaceHolder>"; assertTrue(result.size() > 10); assertTrue(result.stream().filter(d -> d.getConfigDescription().length() > 20).count() > 10); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: updateInteger_same_returnOldInt() { /* ARRANGE */ final var oldInt = 1; final var newInt = 1;  /* ACT */ final var result = FactoryUtils.updateInteger(oldInt, newInt);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(oldInt, result)
[-] pred: org. junit. Assert. assertEquals ( oldInt, result )
************************************
[+] input: testContrainsNoProperty() { // given final PropertyExistsConstraint<String> constraint = new PropertyExistsConstraint<>(); final String propName = "app.property"; final String value = null; final Class<String> propertyClass = String.class; final boolean present = false; final ConfigConverter<String> converter = v -> v; final PropertyMetadata<String> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertNull(configViolation.getPropertyValue()); Assertions.assertFalse(configViolation.propertyExists()); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
[+] input: withSimpleRestartTransferTest() { Boolean returnValue = withSimpleRestart("ABORT", "foo", () -> invokeRestart(findRestart("ABORT"))); "<AssertPlaceHolder>"; }
[*] target: assertEquals(true, returnValue)
[-] pred: org. junit. Assert. assertEquals ( true, returnValue )
************************************
[+] input: testSaveAndDelete() { Integer id = this.saveSource(); Assertions.assertNotNull(id);  boolean result = sourceService.delete(id, GLOBAL_OPERATOR); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testUpdateStatus_notExist() { TaskRun taskRun = MockTaskRunFactory.create(TaskRunStatus.SUCCESS); boolean result = abnormalDatasetService.updateStatus(1L, taskRun); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: shouldReturnNumberWithOddOccurrences2() { int[] arr = { 5, 4, 5, 3, 1, 4, 1, 3, 3, 3, 3 }; int expected = 3;  int actual = oddOccurrences.getNumberWithOddOccurrences(arr);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/LoadBalancer.cmd")); String actual = exportLoadBalancers.getTFImport(getAwsLoadBalancers()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testUnknownNamesDropped() { var names = List.of( "unknown1", CPUThreadLoadMapper.EVENT_NAME, "unknown2", GCHeapSummaryMapper.EVENT_NAME, "unknown3");  var expected = List.of(CPUThreadLoadMapper.EVENT_NAME, GCHeapSummaryMapper.EVENT_NAME); ToMetricRegistry registry = ToMetricRegistry.create(names);  var actual = registry.all().map(EventToMetric::getEventName).collect(toList()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { final File file = new File(EXISTS);  final StringBuilder sb_tailer = new StringBuilder();  final Tailer tailer = new Tailer(file); tailer.addEventListener((src, str) -> sb_tailer.append(str)); tailer.start();  // give the Tailer time to work Thread.sleep(1000L);  tailer.stop();  final String actual = sb_tailer.toString().replace("\r\n", "\n"); final String expected = Files.readString(file.toPath()) .replace("\r\n", "\n") .substring(0, actual.length());  // compare whatever the Tailer had time to read "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getResourceMaps() { List<AWSRolePolicyAttachment> awsRolePolicyAttachments = getAwsRolePolicyAttachments(); Maps<Resource> resourceMaps = exportIamRolePolicyAttachments.getResourceMaps(awsRolePolicyAttachments); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/IamRolePolicyAttachment.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { HttpHeaders httpHeaders = buildHttpHeaders(TOTAL_PAGE_HEADER); ResponseEntity<List<BuildKitePipelineDTO>> responseEntity = getBuildKitepipelineResponseEntity(httpHeaders); when(buildKiteFeignClient.getPipelineInfo(MOCK_TOKEN, TEST_ORG_ID, "1", "100")).thenReturn(responseEntity);  var pageStepsInfoDto = cachePageService.getPipelineInfoList(TEST_ORG_ID, MOCK_TOKEN, "1", "100");  "<AssertPlaceHolder>"; assertThat(pageStepsInfoDto.getFirstPageInfo()).isEqualTo(responseEntity.getBody()); assertThat(pageStepsInfoDto.getTotalPage()).isEqualTo(3); }
[*] target: assertNotNull(pageStepsInfoDto)
[-] pred: org. junit. Assert. assertNotNull ( pageStepsInfoDto )
************************************
[+] input: testGetRandomKeyForMaxFrequencyWithTwoAfterDelete() { MapWithRandomKeyForMostFrequentValue<String, String> map = new MapWithRandomKeyForMostFrequentValue<>(); map.put("a", "b"); map.put("c", "b"); map.put("e", "f"); map.put("g", "f"); map.put("i", "h"); map.put("k", "h"); map.remove("k");  Set<String> expected = Set.of("a", "c", "e", "g"); Set<String> actual = new HashSet<>(); for (int i = 0; i < 1000; i++) actual.add(map.getRandomKeyWithMaxFrequency()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testExtractExceptionStackTrace_it_should_return_null_when_message_don_t_has_an_exception() { //Given  //When final var extractedMessageId = MessageUtils.extractExceptionStackTrace(Map.of());  //Then "<AssertPlaceHolder>"; }
[*] target: assertNull(extractedMessageId)
[-] pred: org. junit. Assert. assertNull ( extractedMessageId )
************************************
[+] input: InvalidAlgorithmParameterException { String decodedString = textEncryptorConverter.decode(encryptedString); "<AssertPlaceHolder>"; return; }
[*] target: assertNotNull(decodedString)
[-] pred: org. junit. Assert. assertNotNull ( decodedString )
************************************
[+] input: Exception {  final String uniqueInstanceKey = String.valueOf(instanceCount.getAndIncrement()); final String[] customAuthArgs = new String[]{ uniqueInstanceKey, "arg1", "arg2" }; final String serializedArgList = StringUtils.join(customAuthArgs,','); final HttpClientConfigCallback hccc = authTestBase( ImmutableMap.<String, String>builder(). put("index." + INDEX_NAME + ".elasticsearch.interface", "REST_CLIENT"). put("index." + INDEX_NAME + ".elasticsearch.http.auth.type", HttpAuthTypes.CUSTOM.toString()). put("index." + INDEX_NAME + ".elasticsearch.http.auth.custom.authenticator-class", TestCustomAuthenticator.class.getName()). put("index." + INDEX_NAME + ".elasticsearch.http.auth.custom.authenticator-args", serializedArgList). build() );  verify(restClientSetup).getCustomAuthenticator( eq(TestCustomAuthenticator.class.getName()), eq(customAuthArgs));  TestCustomAuthenticator customAuth = TestCustomAuthenticator.instanceMap.get(uniqueInstanceKey); "<AssertPlaceHolder>";  // authenticator has been instantiated, verifying it has been called assertEquals(1, customAuth.numInitCalls);  // verifying that the custom callback is in the chain final HttpAsyncClientBuilder hacb = mock(HttpAsyncClientBuilder.class); hccc.customizeHttpClient(hacb);  assertEquals(1, customAuth.customizeHttpClientHistory.size()); assertSame(hacb, customAuth.customizeHttpClientHistory.get(0)); assertArrayEquals(customAuthArgs, customAuth.args); }
[*] target: assertNotNull(customAuth)
[-] pred: org. junit. Assert. assertNotNull ( customAuth )
************************************
[+] input: SQLException { final String url = "jdbc:mysql:aws://my-custom-cluster-name.cluster-custom-XYZ.us-east-2.rds.amazonaws.com"; final String host = url.split(PREFIX)[1]; when(mockHostInfo.getDatabaseUrl()).thenReturn(url); when(mockHostInfo.getHost()).thenReturn(host);  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin();  assertTrue(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertTrue(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; verify(mockTopologyService, never()).setClusterId(any()); verify(mockTopologyService, atLeastOnce()).setClusterInstanceTemplate(any()); }
[*] target: assertTrue(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertTrue ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: testApply() { var startTime = Instant.now(); var threadName = "wonder"; var expectedAttrs = new Attributes() .put(THREAD_NAME, threadName) .put(STACK_TRACE, MethodSupport.empty()) .put(BOX_CLASS, JAVA_LANG_INTEGER); var expectedEvent = new Event(JFR_VALHALLA_VBC_SYNC, expectedAttrs, startTime.toEpochMilli()); var expected = List.of(expectedEvent);  var event = mock(RecordedEvent.class); var eventThread = mock(RecordedThread.class); var stack = mock(RecordedStackTrace.class); when(stack.getFrames()).thenReturn(List.of()); var clazz = mock(RecordedClass.class); when(clazz.getName()).thenReturn(JAVA_LANG_INTEGER);  when(event.getClass(BOX_CLASS)).thenReturn(clazz); when(event.getStartTime()).thenReturn(startTime); when(event.getStackTrace()).thenReturn(stack); when(event.getThread(EVENT_THREAD)).thenReturn(eventThread);  when(eventThread.getJavaName()).thenReturn(threadName);  var mapper = new ValhallaVBCDetector();  var result = mapper.apply(event);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldUpdateCommunityAmenitySuccessfully() { // given Amenity communityAmenity = TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION); Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(); AmenityDto updated = getTestAmenityDto(); Amenity updatedAmenity = getUpdatedCommunityAmenity();  given(amenityRepository.findByAmenityId(TEST_AMENITY_ID)) .willReturn(Optional.of(communityAmenity)); given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID)) .willReturn(Optional.of(testCommunity)); given(amenityRepository.save(updatedAmenity)) .willReturn(updatedAmenity);  // when boolean result = amenitySDJpaService.updateAmenity(updated);  // then "<AssertPlaceHolder>"; verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID); verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID); verify(amenityRepository).save(updatedAmenity); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: createCommunity() { // given CommunityDto testCommunityDto = getTestCommunityDto(); Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity(TEST_COMMUNITY_ID, TEST_COMMUNITY_NAME, TEST_COMMUNITY_DISTRICT, 0, 0); UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(TEST_ADMIN_ID, null, Collections.emptyList()); SecurityContextHolder.getContext().setAuthentication(authentication);  given(communityMapper.communityDtoToCommunity(testCommunityDto)) .willReturn(testCommunity); given(communityAdminRepository.findByUserIdWithCommunities(TEST_ADMIN_ID)) .willReturn(Optional.of(getTestAdmin())); given(communityRepository.save(testCommunity)) .willReturn(testCommunity);  // when Community createdCommunity = communitySDJpaService.createCommunity(testCommunityDto);  // then "<AssertPlaceHolder>"; assertEquals(testCommunityDto.getName(), createdCommunity.getName()); assertEquals(testCommunityDto.getDistrict(), createdCommunity.getDistrict()); verify(communityMapper).communityDtoToCommunity(testCommunityDto); verify(communityAdminRepository).findByUserIdWithCommunities(TEST_ADMIN_ID); verify(communityRepository).save(testCommunity); }
[*] target: assertNotNull(createdCommunity)
[-] pred: org. junit. Assert. assertNotNull ( createdCommunity )
************************************
[+] input: shouldMakeServiceAndRoomId() { var serviceRoomId = ServiceRoomId.make(this.serviceId, this.roomId);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(serviceRoomId)
[-] pred: org. junit. Assert. assertNotNull ( serviceRoomId )
************************************
[+] input: IOException { final String xml = Lib.readResource("pacs.008.001.07.xml"); // System.out.println(xml); assertNotNull(xml); final MxPacs00800107 mx = (MxPacs00800107) new MxReadImpl().read(MxPacs00800107.class, xml, MxPacs00800107._classes); // System.out.println(ToStringBuilder.reflectionToString(mx)); "<AssertPlaceHolder>"; assertNotNull(mx.getFIToFICstmrCdtTrf()); assertNotNull( "123452342", mx.getFIToFICstmrCdtTrf().getCdtTrfTxInf().get(0).getPmtId().getTxId()); // System.out.println(mx); }
[*] target: assertNotNull(mx)
[-] pred: org. junit. Assert. assertNotNull ( mx )
************************************
[+] input: testDecode() { val expected = new DataObject(); val actual = FastProto.decode(expected.toBytes(), DataObject.class);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetFile() { final File file = new File(EXISTS); final Tailer tailer = new Tailer(file); "<AssertPlaceHolder>"; }
[*] target: assertEquals(file, tailer.getFile())
[-] pred: org. junit. Assert. assertEquals ( file, tailer. getFile() )
************************************
[+] input: getConfigUrlSplunkRealm() { ConfigProperties config = mock(ConfigProperties.class); when(config.getString(Configuration.CONFIG_KEY_OTEL_OTLP_URL, null)) .thenReturn("https://ingest.us0.signalfx.com"); when(config.getString(Configuration.CONFIG_KEY_INGEST_URL, null)).thenReturn(null); String result = Configuration.getConfigUrl(config); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testInvalid() { // given final MinConstraint<Integer> constraint = new MinConstraint<>(7); final String propName = "app.property"; final String value = "1"; final Class<Integer> propertyClass = Integer.class; final boolean present = true; final ConfigConverter<Integer> converter = new IntegerConverter(); final PropertyMetadata<Integer> metadata = new DummyMetadata<>(propName, value, propertyClass, present, converter);  // when final ConfigViolation configViolation = constraint.check(metadata);  // then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("app.property", configViolation.getPropertyName()); Assertions.assertEquals("1", configViolation.getPropertyValue()); Assertions.assertTrue(configViolation.propertyExists()); }
[*] target: assertNotNull(configViolation)
[-] pred: org. junit. Assert. assertNotNull ( configViolation )
************************************
[+] input: resetPassword() { // given ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest(); User user = getDefaultUser(); SecurityToken testSecurityToken = getSecurityToken(SecurityTokenType.RESET, TOKEN_LIFETIME, PASSWORD_RESET_TOKEN, user); user.getUserTokens().add(testSecurityToken); given(userRepository.findByEmailWithTokens(forgotPasswordRequest.getEmail())) .willReturn(Optional.of(user)); given(passwordEncoder.encode(forgotPasswordRequest.getNewPassword())) .willReturn(forgotPasswordRequest.getNewPassword()); when(userRepository.save(user)) .then(returnsFirstArg()); given(mailService.sendPasswordSuccessfullyChanged(user)) .willReturn(true); given(securityTokenService.useToken(testSecurityToken)) .willReturn(testSecurityToken);  // when boolean passwordChanged = userService.resetPassword(forgotPasswordRequest);  // then "<AssertPlaceHolder>"; assertEquals(user.getEncryptedPassword(), forgotPasswordRequest.getNewPassword()); verify(userRepository).findByEmailWithTokens(forgotPasswordRequest.getEmail()); verify(passwordEncoder).encode(forgotPasswordRequest.getNewPassword()); verify(mailService).sendPasswordSuccessfullyChanged(user); verify(securityTokenService).useToken(testSecurityToken); }
[*] target: assertTrue(passwordChanged)
[-] pred: org. junit. Assert. assertTrue ( passwordChanged )
************************************
[+] input: should_GenerateZeroPointZero_WhenPassingZeroPointZero() { DecimalInWords decimal = new DecimalInWords( IntegerInWords.createZero(), IntegerInWords.createZero(), "" ); String expected = "صفر" + " فاصلة " + "صفر"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, decimal.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, decimal. toString ( ) )
************************************
[+] input: GestaltException { // Arrange Map<String, String> customConfig = new HashMap<>(); customConfig.put("db.port", "1234"); customConfig.put("db.password", "password"); customConfig.put("db.user", "notroot");  MapConfigSourceBuilder builder = MapConfigSourceBuilder.builder(); builder.setCustomConfig(customConfig);  // Act ConfigSourcePackage configSourcePackage = builder.build();  // Assert "<AssertPlaceHolder>"; assertNotNull(configSourcePackage.getConfigSource());  MapConfigSource configSource = (MapConfigSource) configSourcePackage.getConfigSource(); assertTrue(configSource.hasList()); assertEquals(3, configSource.loadList().size()); }
[*] target: assertNotNull(configSourcePackage)
[-] pred: org. junit. Assert. assertNotNull ( configSourcePackage )
************************************
[+] input: getConfigUrlNull() { ConfigProperties config = mock(ConfigProperties.class); when(config.getString(Configuration.CONFIG_KEY_OTEL_OTLP_URL, null)).thenReturn(null); when(config.getString(Configuration.CONFIG_KEY_INGEST_URL, null)).thenReturn(null); String result = Configuration.getConfigUrl(config); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: getSelfLink_inputNull_returnBasePathWithoutId() { /* ARRANGE */ final var baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath().toUriString(); final var path = ArtifactController.class .getAnnotation(RequestMapping.class).value()[0];  /* ACT */ final var result = artifactViewAssembler.getSelfLink(null);  /* ASSERT */ "<AssertPlaceHolder>"; assertEquals(baseUrl + path, result.getHref()); assertEquals("self", result.getRel().value()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: shouldEncodeDecodeEquals_1() { var source = UUID.randomUUID(); var encoded = UUIDAdapter.toBytes(source); var decoded = UUIDAdapter.toUUID(encoded);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(source, decoded)
[-] pred: org. junit. Assert. assertEquals ( source, decoded )
************************************
[+] input: getResourceMaps() { List<AWSListener> awsListeners = getAwsListeners();  Maps<Resource> resourceMaps = exportLoadBalancerListeners.getResourceMaps(awsListeners); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/LoadBalancerListener.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldGetAndSetRoles() { var user = new LegacyUser(); var expectedValue = singletonList("value1"); user.setRoles(expectedValue); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, user.getRoles())
[-] pred: org. junit. Assert. assertEquals ( expectedValue, user. getRoles() )
************************************
[+] input: SQLException { final List<HostInfo> emptyTopology = new ArrayList<>(); when(mockTopologyService.getTopology(eq(mockConnection), any(Boolean.class))) .thenReturn(emptyTopology);  final Properties properties = new Properties(); properties.setProperty("maxAllowedPacket", "10");  final FailoverConnectionPlugin failoverPlugin = initFailoverPlugin(properties); final Map<String, String> initialConnectionProperties = failoverPlugin.initialConnectionProps;  assertEquals(5, initialConnectionProperties.size()); assertEquals("10", initialConnectionProperties.get("maxAllowedPacket")); assertFalse(failoverPlugin.isRds()); assertFalse(failoverPlugin.isRdsProxy()); assertFalse(failoverPlugin.isClusterTopologyAvailable); "<AssertPlaceHolder>"; }
[*] target: assertFalse(failoverPlugin.isFailoverEnabled())
[-] pred: org. junit. Assert. assertFalse ( failoverPlugin. isFailoverEnabled ( ) )
************************************
[+] input: Exception { // given for (String siteId : Arrays.asList(null, UUID.randomUUID().toString())) {  String site = siteId != null ? siteId + "/" : ""; String documentId = UUID.randomUUID().toString(); DocumentItem item = new DocumentItemDynamoDb(documentId, new Date(), "joe"); item.setPath("/a/B/");  // when List<Map<String, AttributeValue>> indexes = index.generateIndex(siteId, item);  // then final int expected = 2; "<AssertPlaceHolder>";  int i = 0; assertEquals(site + "global#folders#", indexes.get(i).get(PK).s()); assertEquals("ff#a", indexes.get(i).get(SK).s()); assertEquals("a", indexes.get(i).get("path").s()); String documentIdA = indexes.get(i).get("documentId").s(); assertNotNull(indexes.get(i++).get("documentId"));  assertEquals(site + "global#folders#" + documentIdA, indexes.get(i).get(PK).s()); assertEquals("fi#b", indexes.get(i).get(SK).s()); assertEquals("B", indexes.get(i).get("path").s()); assertNotNull(indexes.get(i++).get("documentId")); } }
[*] target: assertEquals(expected, indexes.size())
[-] pred: org. junit. Assert. assertEquals ( expected, indexes. size ( ) )
************************************
[+] input: getInstance() { final DelayLoadSingleton2 instance1 = DelayLoadSingleton2.getInstance(); final DelayLoadSingleton2 instance2 = DelayLoadSingleton2.getInstance(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertSame(instance1, instance2)
[-] pred: org. junit. Assert. assertSame ( instance1, instance2 )
************************************
[+] input: testConvert_with_null_input() { final UUIDConverter uuidConverter = new UUIDConverter();  final UUID actual = uuidConverter.convert(null);  //asserts "<AssertPlaceHolder>"; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
[+] input: shouldReturnNewValueGivenNewValueIsNotNull() { String defaultValue = "default"; String newValue = "new";  String result = ValueUtil.valueOrDefault(defaultValue, newValue);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(newValue, result)
[-] pred: org. junit. Assert. assertEquals ( newValue, result )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/RdsClusterParameterGroup.cmd")); String actual = exportRdsClusterParameterGroups.getTFImport(getAwsRdsClusterParameterGroups()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { DidVerkeyResponse verKey = new DidVerkeyResponse(); verKey.setVerkey("dummy"); Mockito.when(ac.ledgerDidVerkey(Mockito.anyString())) .thenReturn(Optional.of(verKey)); BPASchema dbSchema = schemaRepo.save(BPASchema.builder() .schemaId("1234") .seqNo(571) .type(CredentialType.INDY) .build()); Optional<TrustedIssuer> credDefId = mgmt .addRestriction(dbSchema.getId(), "5mwQSWnRePrZ3oF67C4KqD", null); Assertions.assertTrue(credDefId.isPresent());  Optional<BPASchema> schemaReloaded = schemaRepo.findById(dbSchema.getId()); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(schemaReloaded.get().getRestrictions()); Assertions.assertEquals(1, schemaReloaded.get().getRestrictions().size()); }
[*] target: assertTrue(schemaReloaded.isPresent())
[-] pred: org. junit. Assert. assertTrue ( schemaReloaded. isPresent ( ) )
************************************
[+] input: equals_false_when_null() { // Arrange Vec3Comparable vec3c = new Vec3Comparable(1.0, 2.0, 3.0);  // Act boolean areEqual = vec3c.equals(null);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(areEqual)
[-] pred: org. junit. Assert. assertFalse ( areEqual )
************************************
[+] input: testParseWithPrefix() { final String xml = "<h:AppHdr xmlns:h="urn:swift:xsd:$ahV10">\n" + "    <h:From>\n" + "        <h:Type>DN</h:Type>\n" + "        <h:Id>cn=funds,ou=abcdchzz,o=swift</h:Id>\n" + "    </h:From>\n" + "    <h:To>\n" + "        <h:Type>DN</h:Type>\n" + "        <h:Id>cn=funds,ou=dcbadeff,o=swift</h:Id>\n" + "    </h:To>\n" + "    <h:MsgRef>11308917</h:MsgRef>\n" + "    <h:CrDate>2013-12-23T15:50:00</h:CrDate>\n" + "</h:AppHdr>"; LegacyAppHdr h = LegacyAppHdr.parse(xml); "<AssertPlaceHolder>"; // System.out.println(h.xml()); assertEquals("DN", h.getFrom().getType()); assertEquals("cn=funds,ou=abcdchzz,o=swift", h.getFrom().getId()); assertEquals("DN", h.getTo().getType()); assertEquals("cn=funds,ou=dcbadeff,o=swift", h.getTo().getId()); assertEquals("11308917", h.getMsgRef()); assertNotNull(h.getCrDate()); }
[*] target: assertNotNull(h)
[-] pred: org. junit. Assert. assertNotNull ( h )
************************************
[+] input: priceGE12() { List<Product> products = dao.findAllByPriceGreaterThanEqual(12.0); "<AssertPlaceHolder>"; System.out.println(products); }
[*] target: assertEquals(3, products.size())
[-] pred: org. junit. Assert. assertEquals ( 3, products. size ( ) )
************************************
[+] input: setExpandedAndIsExpandedShouldWork() { // prepare final GamePiece gamePiece1 = mock(GamePiece.class); final GamePiece gamePiece2 = mock(GamePiece.class);  // run Stack s = new Stack(); s.add(gamePiece1); s.add(gamePiece2); s.setExpanded(true);  // assert "<AssertPlaceHolder>"; }
[*] target: assertTrue(s.isExpanded())
[-] pred: org. junit. Assert. assertTrue ( s. isExpanded() )
************************************
[+] input: testEmptyFrameCreation() { //given final Animation animation = new Animation();  //then "<AssertPlaceHolder>"; assertThrows(NoSuchElementException.class, animation::getFrame); }
[*] target: assertFalse(animation.hasFrame())
[-] pred: org. junit. Assert. assertFalse ( animation. hasFrame() )
************************************
[+] input: checkUserExistById1() { UserDO user = LocalUser.getLocalUser(); boolean b = userService.checkUserExistById(user.getId()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: deleteMemberDocumentNoDocumentPresent() { // given HouseMember testMember = new HouseMember(MEMBER_ID, null, MEMBER_NAME, null); given(houseMemberRepository.findByMemberId(MEMBER_ID)) .willReturn(Optional.of(testMember)); // when boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);  // then "<AssertPlaceHolder>"; assertNull(testMember.getHouseMemberDocument()); verify(houseMemberRepository).findByMemberId(MEMBER_ID); verify(houseMemberRepository, never()).save(testMember); }
[*] target: assertFalse(isDocumentDeleted)
[-] pred: org. junit. Assert. assertFalse ( isDocumentDeleted )
************************************
[+] input: testBcc() { UndirectedGraph g = new UndirectedGraph(12); g.addEdge(0, 1); g.addEdge(1, 2); g.addEdge(1, 3); g.addEdge(2, 3); g.addEdge(2, 4); g.addEdge(3, 4); g.addEdge(1, 5); g.addEdge(0, 6); g.addEdge(5, 6); g.addEdge(5, 7); g.addEdge(5, 8); g.addEdge(7, 8); g.addEdge(8, 9); g.addEdge(10, 11); Set<Set<Integer>> actual = g.bcc().stream().map(HashSet::new).collect(Collectors.toSet()); Set<Set<Integer>> expected = Set.of( Set.of(1, 2, 3, 4), Set.of(8, 9), Set.of(8, 5, 7), Set.of(6, 0, 5, 1), Set.of(10, 11) ); "<AssertPlaceHolder>";  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: setPropertyShouldDoNothingGetPropertyShouldReturnNull() { // prepare final GameModule gameModule = mock(GameModule.class); final Object key = new Object(); final Object value = new Object();  // run Deck d = new Deck(gameModule); d.setProperty(key, value);  // assert "<AssertPlaceHolder>"; }
[*] target: assertNull(d.getProperty(key))
[-] pred: org. junit. Assert. assertNull ( d. getProperty ( key ) )
************************************
[+] input: testRejectedBeforeExecution() { final AtomicBoolean flag = new AtomicBoolean();  // actualCost < timeoutMillis final TimeoutScheduler scheduler0 = new TimeoutScheduler(Schedulers.io(), TimeoutOptionsConfigure.newOpts().timeMillis(5L).configured()); final AsyncResponse response0 = MockAsyncResponse.aMockResponse().build(); final Runnable runnable0 = () -> { flag.set(true); response0.sendResult(1000); }; final RequestTask task0 = RequestTaskImpl.newRequestTask(MockAsyncRequest.aMockRequest().build(), response0, new CompletableFuture<>(), runnable0); scheduler0.schedule(task0); assertTrue(flag.get()); assertEquals(1000, response0.status()); flag.set(false);  // actualCost >= timeoutMillis final AsyncResponse response1 = MockAsyncResponse.aMockResponse().build(); final Runnable runnable1 = () -> { response1.sendResult(1000); flag.set(true); }; final RequestTask task1 = RequestTaskImpl.newRequestTask(MockAsyncRequest.aMockRequest().build(), MockAsyncResponse.aMockResponse().build(), new CompletableFuture<>(), runnable1); final TimeoutScheduler scheduler1 = new TimeoutScheduler(new Scheduler() {  @Override public String name() { return "test"; }  @Override public void schedule(Runnable cmd) { try { TimeUnit.MILLISECONDS.sleep(10L); } catch (Throwable ignore) { } cmd.run(); }  @Override public void shutdown() {  } }, TimeoutOptionsConfigure.newOpts().timeMillis(5L).configured());  scheduler1.schedule(task1); "<AssertPlaceHolder>"; assertEquals(200, response1.status()); }
[*] target: assertFalse(flag.get())
[-] pred: org. junit. Assert. assertFalse ( flag. get ( ) )
************************************
[+] input: mapDtoToEntity_shouldMapText() { String expected = "An example for a text"; noteKeyResultDto.setNoteBody(expected); noteKeyResult = noteKeyResultMapper.mapDtoToEntity(noteKeyResultDto); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, noteKeyResult.getText())
[-] pred: org. junit. Assert. assertEquals ( expected, noteKeyResult. getText ( ) )
************************************
[+] input: shouldParseFastOnJdk7u6() { Assertions.assertTimeout(Duration.ofMillis(1000), () -> { // issue #760 GenericTokenParser parser = new GenericTokenParser("${", "}", new VariableTokenHandler(new HashMap<String, String>() { { put("first_name", "James"); put("initial", "T"); put("last_name", "Kirk"); put("", ""); } }));  StringBuilder input = new StringBuilder(); for (int i = 0; i < 10000; i++) { input.append("${first_name} ${initial} ${last_name} reporting. "); } StringBuilder expected = new StringBuilder(); for (int i = 0; i < 10000; i++) { expected.append("James T Kirk reporting. "); } "<AssertPlaceHolder>"; }); }
[*] target: assertEquals(expected.toString(), parser.parse(input.toString()))
[-] pred: org. junit. Assert. assertEquals ( expected. toString ( ), parser. parse ( input. toString ( ) ) )
************************************
[+] input: toModel_noResources_returnRepresentationViewWithOffersLink() { /* ARRANGE */ final var representation = getRepresentation();  /* ACT */ final var result = representationViewAssembler.toModel(representation);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(representation.getTitle(), result.getTitle()); Assertions.assertEquals(representation.getMediaType(), result.getMediaType()); Assertions.assertEquals(representation.getLanguage(), result.getLanguage()); Assertions.assertEquals(representation.getRemoteId(), result.getRemoteId()); Assertions.assertEquals(representation.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(representation.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(representation.getAdditional(), result.getAdditional());  final var selfLink = result.getLink("self"); assertTrue(selfLink.isPresent()); assertNotNull(selfLink.get()); assertEquals(getRepresentationLink(representation.getId()), selfLink.get().getHref());  final var artifactsLink = result.getLink("artifacts"); assertTrue(artifactsLink.isPresent()); assertNotNull(artifactsLink.get()); assertEquals(getRepresentationArtifactsLink(representation.getId()), artifactsLink.get().getHref());  final var offersLink = result.getLink("offers"); assertTrue(offersLink.isPresent()); assertNotNull(offersLink.get()); assertEquals(getRepresentationOfferedResourcesLink(representation.getId()), offersLink.get().getHref());  final var requestsLink = result.getLink("requests"); assertTrue(requestsLink.isEmpty()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: CryptoException { KeyPair senderKeys = TestUtils.generateKeyPair(); KeyPair receiverKeys = TestUtils.generateKeyPair();  ProtectedStorageEntry protectedStorageEntry = buildProtectedStorageEntry( buildMailboxStoragePayload(senderKeys.getPublic(), receiverKeys.getPublic()), senderKeys, 1);  // should be assertFalse "<AssertPlaceHolder>"; }
[*] target: assertTrue(protectedStorageEntry.isValidForRemoveOperation())
[-] pred: org. junit. Assert. assertTrue ( protectedStorageEntry. isValidForRemoveOperation ( ) )
************************************
[+] input: confirmEmailNoToken() { // given User user = getDefaultUser(); given(userRepository.findByUserIdWithTokens(user.getUserId())) .willReturn(Optional.of(user));  // when boolean emailConfirmed = userService.confirmEmail(user.getUserId(), "any-token");  // then "<AssertPlaceHolder>"; assertFalse(user.isEmailConfirmed()); verify(userRepository, never()).save(user); verifyNoInteractions(securityTokenService); verifyNoInteractions(mailService); }
[*] target: assertFalse(emailConfirmed)
[-] pred: org. junit. Assert. assertFalse ( emailConfirmed )
************************************
[+] input: Exception { VariableInfo info = new RealIDInfo("bob", 100, 1000.0, 0.0, 25.0, 125.0, 12345); VariableInfoProto infoProto = info.serialize(); assertEquals(0, infoProto.getVersion()); assertEquals("org.tribuo.RealIDInfo", infoProto.getClassName()); RealIDInfoProto proto = infoProto.getSerializedData().unpack(RealIDInfoProto.class); assertEquals("bob", proto.getName()); assertEquals(100, proto.getCount()); assertEquals(1000.0, proto.getMax()); assertEquals(0.0, proto.getMin()); assertEquals(25.0, proto.getMean()); assertEquals(125.0, proto.getSumSquares()); assertEquals(12345, proto.getId());  VariableInfo infoD = ProtoUtil.deserialize(infoProto); "<AssertPlaceHolder>"; }
[*] target: assertEquals(info, infoD)
[-] pred: org. junit. Assert. assertEquals ( info, infoD )
************************************
[+] input: shouldSelectAllAuthorsAsMap() { try (SqlSession session = sqlMapper.openSession(TransactionIsolationLevel.SERIALIZABLE)) { final Map<Integer,Author> authors = session.selectMap("org.apache.ibatis.domain.blog.mappers.AuthorMapper.selectAllAuthors", "id"); "<AssertPlaceHolder>"; for(Map.Entry<Integer,Author> authorEntry : authors.entrySet()) { assertEquals(authorEntry.getKey(), (Integer) authorEntry.getValue().getId()); } } }
[*] target: assertEquals(2, authors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, authors. size ( ) )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/KmsKey.cmd")); String actual = exportKmsKeys.getTFImport(getAwsKmsKeys()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: should_canConvertValue_returnTrue_ifCheckFloatOne() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(1.0f));  //then "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: schedulePayment() { //given PaymentDto basePaymentDto = TestUtils.PaymentHelpers.getTestPaymentDto(TEST_PAYMENT_CHARGE,TEST_PAYMENT_TYPE,TEST_PAYMENT_DESCRIPTION,TEST_PAYMENT_RECURRING,TEST_PAYMENT_DUEDATE,TEST_PAYMENT_USER,TEST_PAYMENT_MEMBER); Payment basePayment = new Payment();  given(paymentMapper.paymentDtoToPayment(any(PaymentDto.class))).willReturn(basePayment); given(paymentMapper.paymentToPaymentDto(any(Payment.class))).willReturn(basePaymentDto);  //when PaymentDto testPaymentScheduled = paymentSDJpaService.schedulePayment(basePaymentDto);  //then verify(adminRepository).save(any()); //Logic: User gets associated with payment and persisted verify(paymentRepository).save(any(Payment.class)); //Logic: Payment is persisted Assert.notNull(testPaymentScheduled.getPaymentId()); //Logic: generation of payment ID "<AssertPlaceHolder>"; //Completion: method returns what is expected }
[*] target: assertEquals(basePaymentDto,testPaymentScheduled)
[-] pred: org. junit. Assert. assertEquals ( basePaymentDto, testPaymentScheduled )
************************************
[+] input: toModel_noResources_returnRepresentationViewWithOffersLink() { /* ARRANGE */ final var subscription = getSubscription();  /* ACT */ final var result = subscriptionViewAssembler.toModel(subscription);  /* ASSERT */ "<AssertPlaceHolder>"; Assertions.assertEquals(subscription.getSubscriber(), result.getSubscriber()); Assertions.assertEquals(subscription.getTarget(), result.getTarget()); Assertions.assertEquals(subscription.getLocation(), result.getLocation()); Assertions.assertEquals(subscription.isPushData(), result.isPushData()); Assertions.assertEquals(subscription.getCreationDate(), result.getCreationDate()); Assertions.assertEquals(subscription.getModificationDate(), result.getModificationDate()); Assertions.assertEquals(subscription.getAdditional(), result.getAdditional()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: canCreatePaperItem() { // given PaperArchiveFacade service = new PaperArchiveFacadeImpl(); CreatePaperItemParameter anonymousInput = new CreatePaperItemParameter(); anonymousInput.setWho("UJ7L4TcJQH"); anonymousInput.setWhat("0smET1o7Us"); anonymousInput.setWhere("f1AqeKUaNg");  // when PaperItemDTO result = service.createPaperItem(anonymousInput);  // then "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: removeHouseFromCommunityByHouseIdHouseNotExists() { // given Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();  given(communityHouseRepository.findByHouseIdWithHouseMembers(TEST_HOUSE_ID)) .willReturn(Optional.empty());  // when boolean houseDeleted = communitySDJpaService.removeHouseFromCommunityByHouseId(testCommunity, TEST_HOUSE_ID);  // then "<AssertPlaceHolder>"; verify(communityHouseRepository).findByHouseIdWithHouseMembers(TEST_HOUSE_ID); verifyNoInteractions(houseService); verify(communityRepository, never()).save(testCommunity); }
[*] target: assertFalse(houseDeleted)
[-] pred: org. junit. Assert. assertFalse ( houseDeleted )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/RdsSubnetGroup.cmd")); String actual = exportRdsSubnetGroups.getTFImport(getAwsRdsSubnetGroups()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: nullOrFalseTest_2() { var actual = Utils.nullOrFalse(false); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(true, actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
[+] input: test3() { int[][] boxTypes = {{2, 1}, {4, 4}, {3, 1}, {4, 1}, {2, 4}, {3, 4}, {1, 3}, {4, 3}, {5, 3}, {5, 3}}; int truckSize = 13; int expected = new Solution().maximumUnits(boxTypes, truckSize); int actual = new Solution5().maximumUnits(boxTypes, truckSize); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: tangentLinesForTwoCircles1() { List<double[]> lines = GeometryTools.tangentLinesForTwoCircles(1, 1, 5, 9, 1, 5); "<AssertPlaceHolder>";  lines.sort(comparatorLine);  assertEquals(0.0, lines.get(0)[0], 1e-6); assertEquals(1.0, lines.get(0)[1], 1e-6); assertEquals(4.0, lines.get(0)[2], 1e-6);  assertEquals(0.0, lines.get(1)[0], 1e-6); assertEquals(-1.0, lines.get(1)[1], 1e-6); assertEquals(6.0, lines.get(1)[2], 1e-6); }
[*] target: assertEquals(2, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 2, lines. size ( ) )
************************************
[+] input: checkEqualsAddress_true_street_null() {  //Arrange String streetA = ""; String doorNumberA = "1"; String postCodeA = "4000-222"; String cityA = "Lisboa"; String countryA = "Portugal";  String streetB = ""; String doorNumberB = "1"; String postCodeB = "4000-222"; String cityB = "Lisboa"; String countryB = "Portugal";   //Act  Address addressA = Address.createAddress(streetA, doorNumberA, postCodeA, cityA, countryA); Address addressB = Address.createAddress(streetB, doorNumberB, postCodeB, cityB, countryB); addressA.setStreet(null); addressB.setStreet(null);   //Assert  "<AssertPlaceHolder>";  }
[*] target: assertEquals(addressA, addressB)
[-] pred: org. junit. Assert. assertEquals ( addressA, addressB )
************************************
[+] input: BackendException { GeometryFactory gf = new GeometryFactory(); Geoshape g = HELPER.geoshape(gf.createMultiPolygon(new Polygon[] { gf.createPolygon(new Coordinate[] {new Coordinate(0,0), new Coordinate(0,10), new Coordinate(10,10), new Coordinate(0,0)}), gf.createPolygon(new Coordinate[] {new Coordinate(20,20), new Coordinate(20,30), new Coordinate(30,30), new Coordinate(20,20)})}));  String wkt1 = "MULTIPOLYGON (((0 0, 0 10, 10 10, 0 0)), ((20 20, 20 30, 30 30, 20 20)))"; String actualWkt1 = GeoToWktConverter.convertToWktString(g); "<AssertPlaceHolder>"; }
[*] target: assertEquals(wkt1, actualWkt1)
[-] pred: org. junit. Assert. assertEquals ( wkt1, actualWkt1 )
************************************
[+] input: testIsRedundantWith() { final DependencyChain chain1 = new DependencyChain() .add(single("c1")) .add(single("c2")) .add(single("c3")) .add(single("c1"));  final CircularDependency circularDependency1 = chain1.getCircularDependency().orElseThrow();  final DependencyChain chain2 = new DependencyChain() .add(single("c9")) .add(single("c2")) .add(single("c3")) .add(single("c1")) .add(single("c2"));  final CircularDependency circularDependency2 = chain2.getCircularDependency().orElseThrow();   "<AssertPlaceHolder>"; }
[*] target: assertTrue(circularDependency1.isRedundantWith(circularDependency2))
[-] pred: org. junit. Assert. assertTrue ( circularDependency1. isRedundantWith ( circularDependency2 ) )
************************************
[+] input: test2() { List<Integer> v1 = List.of(1, 1, 1, 1), v2 = List.of(3, 4, 5, 6); ZigzagIterator iterator = new ZigzagIterator(v1, v2); List<Integer> expected = List.of(1, 3, 1, 4, 1, 5, 1, 6); List<Integer> actual = new ArrayList<>(); while (iterator.hasNext()) actual.add(iterator.next()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: test3() { Solution solution = new Solution(); Solution2 solution2 = new Solution2(); TreeNode first = LeetcodeUtils.initializeTree(new Integer[]{}); TreeNode second = LeetcodeUtils.initializeTree(new Integer[]{5, 1, 7, 0, 2}); List<Integer> expected = Arrays.asList(0, 1, 2, 5, 7); assertEquals(expected, solution.getAllElements(first, second)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, solution2.getAllElements(first, second))
[-] pred: org. junit. Assert. assertEquals ( expected, solution2. getAllElements ( first, second ) )
************************************
[+] input: Exception { SqlSessionTemplate sqlSessionTemplate = jdbcSourceConfig.sqlSessionTemplate(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(sqlSessionTemplate)
[-] pred: org. junit. Assert. assertNotNull ( sqlSessionTemplate )
************************************
[+] input: createAndParseToken_ok() { String username = "test"; String token = JwtUtils.createToken(username); Assertions.assertTrue(token.startsWith("Bearer")); String username_parsed = JwtUtils.parseUsername(token); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(username, username_parsed)
[-] pred: org. junit. Assert. assertEquals ( username, username_parsed )
************************************
[+] input: testGetBearerToken() { String token = twitterClient.getBearerToken(); "<AssertPlaceHolder>"; assertTrue(token.length() > 50); }
[*] target: assertNotNull(token)
[-] pred: org. junit. Assert. assertNotNull ( token )
************************************
[+] input: extractRequestedElement_messageWithoutRequestedElement_returnNull() { /* ARRANGE */ final var message = getDescriptionRequestMessageWithoutRequestedElement();  /* ACT */ final var result = MessageUtils.extractRequestedElement(message);  /* ASSERT */ "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testNameAndUnwrap() { final LogHandler handler = mock(LogHandler.class); InternalLoggerImpl logger = new InternalLoggerImpl("foo", handler); assertEquals("foo", logger.name()); "<AssertPlaceHolder>"; }
[*] target: assertSame(logger, logger.unwrap())
[-] pred: org. junit. Assert. assertSame ( logger, logger. unwrap() )
************************************
[+] input: testRef() { JsonObject resolved = JsonRef.resolve(CIRCULAR);  "<AssertPlaceHolder>"; assertNotNull(resolved.getJsonObject("definitions")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1)); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1)); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties")); assertNotNull( resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("street_address")); assertEquals( "string", resolved .getJsonObject("definitions") .getJsonObject("addressWithCity") .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("subAddress") .getJsonArray("anyOf") .getJsonObject(1) .getJsonObject("properties") .getJsonObject("street_address") .getString("type")); }
[*] target: assertNotNull(resolved)
[-] pred: org. junit. Assert. assertNotNull ( resolved )
************************************
[+] input: getResourceMaps() { List<AWSRole> roles = getRoleList(); Maps<Resource> resourceMaps = exportIamRoles.getResourceMaps(roles); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/IamRole.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testRaw() { String u = "http://localhost:5256/static/:path?pa=12&pa=34&pb=afasdf"; QueryCoder qc = new QueryCoder(u);  assertNotEquals(qc.uri(), qc.raw()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(u, qc.raw())
[-] pred: org. junit. Assert. assertEquals ( u, qc. raw() )
************************************
[+] input: getTFImport() { String expected = TestDataFileUtils.asString(resourceLoader.getResource("testData/aws/expected/S3Bucket.cmd")); String actual = exportS3Buckets.getTFImport(getAwsBuckets()).script();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetMetaAnnotations() { List<Annotation> metaAnnotations = getMetaAnnotations(Service.class, a -> isSameType(a, Inherited.class)); "<AssertPlaceHolder>"; assertEquals(Inherited.class, metaAnnotations.get(0).annotationType());  metaAnnotations = getMetaAnnotations(Service.class); assertEquals(2, metaAnnotations.size()); assertEquals(Inherited.class, metaAnnotations.get(0).annotationType()); assertEquals(Deprecated.class, metaAnnotations.get(1).annotationType()); }
[*] target: assertEquals(1, metaAnnotations.size())
[-] pred: org. junit. Assert. assertEquals ( 1, metaAnnotations. size ( ) )
************************************
[+] input: testOccupiedCell() { Cell cell = new Cell(0, 0); cell.setCurrentPiece(TestHelpers.randomPiece()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(cell.isFree())
[-] pred: org. junit. Assert. assertFalse ( cell. isFree() )
************************************
[+] input: testRoutePickInvokers() { String rule = "var result = new java.util.ArrayList(invokers.size());" + "for (i=0;i<invokers.size(); i++){ " + "if (invokers.get(i).isAvailable()) {" + "result.add(invokers.get(i)) ;" + "}" + "} ; " + "return result;"; String script = "function route(invokers,invocation,context){" + rule + "} route(invokers,invocation,context)"; Router router = new ScriptRouterFactory().getRouter(getRouteUrl(script));  List<Invoker<String>> invokers = new ArrayList<Invoker<String>>(); Invoker<String> invoker1 = new MockInvoker<String>(false); Invoker<String> invoker2 = new MockInvoker<String>(true); Invoker<String> invoker3 = new MockInvoker<String>(true); invokers.add(invoker1); invokers.add(invoker2); invokers.add(invoker3); List<Invoker<String>> filteredInvokers = router.route(invokers, invokers.get(0).getUrl(), new RpcInvocation()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(invoker2, filteredInvokers.get(0)); Assertions.assertEquals(invoker3, filteredInvokers.get(1)); }
[*] target: assertEquals(2, filteredInvokers.size())
[-] pred: org. junit. Assert. assertEquals ( 2, filteredInvokers. size ( ) )
************************************
[+] input: normalizeXml() { String origit = "<?xml version="1.0" encoding="UTF-8"?>" + "<response xmlns="http://v8.1c.ru/8.3/debugger/debugBaseData" " + "xmlns:cfg="http://v8.1c.ru/8.1/data/enterprise/current-config" " + "xmlns:debugRDBGRequestResponse="http://v8.1c.ru/8.3/debugger/debugRDBGRequestResponse" " + "xmlns:v8="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" " + "xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>" + "                                                         " + "                                                         " + "            nvState>" + "</request> nDebugger></dbgtgtRemoteRequestResponse:commandFromDbgServer></response> mmand"; String template = "<?xml version="1.0" encoding="UTF-8"?>" + "<response xmlns="http://v8.1c.ru/8.3/debugger/debugBaseData" " + "xmlns:cfg="http://v8.1c.ru/8.1/data/enterprise/current-config" " + "xmlns:debugRDBGRequestResponse="http://v8.1c.ru/8.3/debugger/debugRDBGRequestResponse" " + "xmlns:v8="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" " + "xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>"; String result = Utils.normalizeXml(origit); "<AssertPlaceHolder>"; }
[*] target: assertEquals(template, result)
[-] pred: org. junit. Assert. assertEquals ( template, result )
************************************
[+] input: NoSuchMethodException { Method method = controller.getDeclaredMethod("permission", CommandEvent.class); SlashCommandDefinition definition = SlashCommandDefinition.build(method, validator, LOCALIZATION_FUNCTION).orElse(null);  "<AssertPlaceHolder>";  assertEquals(1, definition.getPermissions().size()); assertTrue(definition.getPermissions().contains("permission")); }
[*] target: assertNotNull(definition)
[-] pred: org. junit. Assert. assertNotNull ( definition )
************************************
[+] input: convertTxt2() { File txtFile = loadFile("freude_vectors_w2v_copy.txt"); File fileToWrite = new File(VECTORS_KV_FILE_2); fileToWrite.deleteOnExit(); KvConverter.convert(txtFile, fileToWrite); File w2vFile = new File("./freude_vectors_w2v_copy.w2v"); w2vFile.deleteOnExit(); "<AssertPlaceHolder>";  // checking vocabulary assertTrue(Gensim.getInstance().isInVocabulary("schöner", fileToWrite.getAbsoluteFile()));  // checking dimension Double[] vector = Gensim.getInstance().getVector("schöner", fileToWrite.getAbsolutePath());  // checking values assertEquals(3, vector.length); assertEquals(-0.0016543772, vector[0]); assertEquals(-0.0009240248, vector[1]); assertEquals(-0.0007398839, vector[2]);  assertTrue(fileToWrite.exists()); }
[*] target: assertFalse(w2vFile.exists())
[-] pred: org. junit. Assert. assertFalse ( w2vFile. exists ( ) )
************************************
[+] input: NoSuchMethodException { final SpringMvcRouteHandlerLocatorFactory factory = new SpringMvcRouteHandlerLocatorFactory(); final DeployContext<RestlightOptions> ctx = mock(DeployContext.class); when(ctx.options()).thenReturn(RestlightOptionsConfigure.defaultOpts()); RouteHandlerLocator locator = factory.locator(ctx); assertNotNull(locator); assertEquals(SpringMvcRouteHandlerLocatorFactory.HandlerLocator.class, locator.getClass());  final InvocableMethod method = mock(InvocableMethod.class); when(method.beanType()).thenReturn((Class) SpringMvcRouteHandlerLocatorFactoryTest.class); when(method.method()) .thenReturn(SpringMvcRouteHandlerLocatorFactoryTest.class.getDeclaredMethod("forTest"));  final HttpResponseStatus ret = ((SpringMvcRouteHandlerLocatorFactory.HandlerLocator) locator) .getCustomResponse(method);  "<AssertPlaceHolder>"; assertEquals(HttpResponseStatus.NOT_FOUND.code(), ret.code()); assertEquals("foo", ret.reasonPhrase()); }
[*] target: assertNotNull(ret)
[-] pred: org. junit. Assert. assertNotNull ( ret )
************************************
[+] input: supplyInCaseOfExecution() { var result = Try.wrap(() -> { throw new RuntimeException(); }, 0); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
[+] input: JsonLdError {  URL fileUrl = getClass().getResource("document.json");  assertNotNull(fileUrl);  Document document = (new FileLoader()).loadDocument(fileUrl.toURI(), new DocumentLoaderOptions());  "<AssertPlaceHolder>"; assertTrue(MediaType.JSON.match(document.getContentType())); }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
[+] input: supplyFirstNotNullTest_1() { var actual = Utils.supplyFirstNotNull(() -> 1); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, actual)
[-] pred: org. junit. Assert. assertEquals ( 1, actual )
************************************
[+] input: getResourceMaps() { List<AWSRepository> awsRepositories = getRepositories();  Maps<Resource> resourceMaps = exportEcrRepositories.getResourceMaps(awsRepositories); String actual = resourceMaps.unmarshall();  log.debug("actual => \n{}", actual); String expected = TestDataFileUtils.asString( resourceLoader.getResource("testData/aws/expected/EcrRepository.tf") ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: InterruptedException { final EDTExecutorService ex = new EDTExecutorService(); ex.shutdown(); assertTrue(ex.awaitTermination(1L, TimeUnit.SECONDS)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(ex.isTerminated())
[-] pred: org. junit. Assert. assertTrue ( ex. isTerminated() )
************************************
[+] input: generateObjectiveRowCollectionForCompany_expectOneRow() { when(companyService.findById(companyId)).thenReturn(okrCompany); objective.setParentOkrUnit(okrDepartment); okrDepartment.getObjectives().add(objective); objective.getKeyResults().add(keyResult); okrDepartment.setParentOkrUnit(okrCompany); okrCompany.getOkrChildUnits().add(okrDepartment);  Collection<ObjectiveRow> rows = objectiveRowBuilderService.generateForCompany(companyId);  "<AssertPlaceHolder>"; verify(companyService, times(1)).findById(companyId); }
[*] target: assertEquals(1, rows.size())
[-] pred: org. junit. Assert. assertEquals ( 1, rows. size ( ) )
************************************
[+] input: should_canConvertValue_returnTrue_ifFloatIsZeroWithFloatingPoint() { //given DefaultFloatValueToFloatConverter defaultFloatConverter = new DefaultFloatValueToFloatConverter();  //when boolean actual = defaultFloatConverter.canConvertValue(ValueFactory.newFloat(0.0));  //then "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: ParseException { AuthenticationRequestParams params = AuthenticationRequestParams .create(VALID_HOSTNAME, credentials, UserAgentUtils.getUserAgentValue()); AWS4SignedPayloadGenerator generator = new AWS4SignedPayloadGenerator(); byte[] signedPayload = generator.signedPayload(params);  "<AssertPlaceHolder>"; SignedPayloadValidatorUtils.validatePayload(signedPayload, params); }
[*] target: assertNotNull(signedPayload)
[-] pred: org. junit. Assert. assertNotNull ( signedPayload )
************************************
[+] input: shouldReturnDefaultValueGivenNewValueIsNull() { String defaultValue = "default";  String result = ValueUtil.valueOrDefault(defaultValue, null);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(defaultValue, result)
[-] pred: org. junit. Assert. assertEquals ( defaultValue, result )
************************************
[+] input: delete_WithNonExistId_shouldAffectNoRow() { // Prepare List<Operator> operators = insertSampleData(); Long operatorId = operators.get(0).getId(); Optional<Operator> firstOperator = operatorDao.fetchById(operatorId); assertTrue(firstOperator.isPresent());  // Process boolean rowAffected = operatorDao.deleteById(999L); "<AssertPlaceHolder>"; }
[*] target: assertFalse(rowAffected)
[-] pred: org. junit. Assert. assertFalse ( rowAffected )
************************************
[+] input: removeVariable_whenVariableNotExists_shouldReturnFalse() { // 1. Process boolean removeSuccess = variableService.removeByKey("not.existing");  // 2. Validate "<AssertPlaceHolder>"; }
[*] target: assertFalse(removeSuccess)
[-] pred: org. junit. Assert. assertFalse ( removeSuccess )
************************************
[+] input: buildConnectorRestrictedUsage() { final var result = RuleFormulaBuilder.buildFormula(PolicyPattern.CONNECTOR_RESTRICTED_USAGE, rule, uri); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testCreateMappersFromControllerAdvice() { final HandlerResolverFactoryImpl handlerResolverFactory = newHandlerResolverFactory(); final HandlerLocator locator = newHandlerLocator(); final SpringMvcExceptionResolverFactory factory = newExceptionResolverFactory( locator, handlerResolverFactory);  final ControllerAdviceExceptionMapping controller = new ControllerAdviceExceptionMapping(); List<ExceptionMapper> mappers = factory.createMappersFromControllerAdvice(controller, false, locator, handlerResolverFactory); "<AssertPlaceHolder>"; assertNotNull(mappers.get(0).mapTo(NullPointerException.class)); assertNotNull(mappers.get(0).mapTo(IllegalArgumentException.class)); assertNull(mappers.get(0).mapTo(RuntimeException.class)); }
[*] target: assertEquals(1, mappers.size())
[-] pred: org. junit. Assert. assertEquals ( 1, mappers. size ( ) )
************************************
[+] input: checkGroupExistByName() { GroupDO group = mockData1(); boolean exist = groupService.checkGroupExistByName(group.getName()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(exist)
[-] pred: org. junit. Assert. assertTrue ( exist )
************************************
