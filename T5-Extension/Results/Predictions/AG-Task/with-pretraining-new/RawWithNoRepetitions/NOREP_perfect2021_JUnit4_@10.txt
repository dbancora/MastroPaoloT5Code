[+] input: testToString() { String expectedStr = "MetricsData(successCount=1, failCount=2)"; MetricsData data = new MetricsData(1, 2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStr, data.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedStr, data. toString() )
************************************
[+] input: testIsTechnicallyEqual() { LogEntry logEntry1 = new LogEntry(); LogEntry logEntry2 = new LogEntry(); assertTrue(logEntry1.isTechnicallyEqual(logEntry2)); logEntry1.setId(0); assertTrue(logEntry1.isTechnicallyEqual(logEntry2)); logEntry2.setId(0); assertTrue(logEntry1.isTechnicallyEqual(logEntry2)); logEntry1.setNetworkTaskId(22); assertFalse(logEntry1.isTechnicallyEqual(logEntry2)); logEntry2.setNetworkTaskId(22); assertTrue(logEntry1.isTechnicallyEqual(logEntry2)); logEntry1.setTimestamp(123); assertFalse(logEntry1.isTechnicallyEqual(logEntry2)); logEntry2.setTimestamp(123); assertTrue(logEntry1.isTechnicallyEqual(logEntry2)); logEntry1.setSuccess(true); assertFalse(logEntry1.isTechnicallyEqual(logEntry2)); logEntry2.setSuccess(true); assertTrue(logEntry1.isTechnicallyEqual(logEntry2)); logEntry1.setMessage("message"); assertFalse(logEntry1.isTechnicallyEqual(logEntry2)); logEntry2.setMessage("message"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(logEntry1.isTechnicallyEqual(logEntry2))
[-] pred: org. junit. Assert. assertTrue ( logEntry1. isTechnicallyEqual ( logEntry2 ) )
************************************
[+] input: filteredListSizeIsCorrect2() { int k = 5; // instantiate random filter with parameter k KLeastExecutedFilter filter = new KLeastExecutedFilter(k); // call filter method to obtain filtered list List<MutationInstance> filteredList = filter.filterMutants(toFilter); // filtered list should be of size k "<AssertPlaceHolder>"; }
[*] target: assertEquals(k, filteredList.size())
[-] pred: org. junit. Assert. assertEquals ( k, filteredList. size ( ) )
************************************
[+] input: shouldReturnNullIfFieldNotInitializedWithAValueInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestMessageEnvelope.getDescriptor().findFieldByName("log_key"); /* The field is added to the schema but not assigned a value */ GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BINARY).named("log_key") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); ByteStringHandler byteStringHandler = new ByteStringHandler(fieldDescriptor);  Object actualValue = byteStringHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertNull(actualValue)
[-] pred: org. junit. Assert. assertNull ( actualValue )
************************************
[+] input: mp4MdhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x20, 0x6D, 0x64, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x5F, (byte) 0x90, 0x00, 0x01, 0x5F, (byte) 0x90, 0x55, (byte) 0xC4, 0x00, 0x00, }; Mp4MdhdBox box = new Mp4MdhdBox(this.trackInfo); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: Exception { LogRecord record = new LogRecord(Level.SEVERE, ""); try { long expected = 10L; if (Thread.currentThread().getId() == expected) { ++expected; } setLongThreadID(record, expected); assertNotEquals(expected, Thread.currentThread().getId());  CompactFormatter cf = new CompactFormatter("%10$d"); String output = cf.format(record); String expect = Long.toString(expected); assertEquals(expect, output);  setLongThreadID(record, -1L); output = cf.format(record); expect = Long.toString(-1L); assertEquals(expect, output);  //Test that downcast works right. Number id = cf.formatThreadID(record); assertEquals(-1, id.intValue()); assertEquals(expect, Long.toString(id.longValue()));  setLongThreadID(record, Long.MAX_VALUE >>> 1L); output = cf.format(record); expect = Long.toString(Long.MAX_VALUE >>> 1L); "<AssertPlaceHolder>";  int tid = getIntThreadID(record); assertTrue(String.valueOf(tid), tid < 0); } catch (NoSuchMethodException JDK8245302) { try { Method m = LogRecord.class.getMethod("getLongThreadID"); fail(m.toString()); } catch (NoSuchMethodException expect) { assertNull(LogManagerProperties.getLongThreadID(record)); } } }
[*] target: assertEquals(expect, output)
[-] pred: org. junit. Assert. assertEquals ( expect, output )
************************************
[+] input: IOException { CSVFormat format = CSVFormat.POSTGRESQL_TEXT;  PipedOutputStream payload = new PipedOutputStream(); OutputStreamWriter writer = new OutputStreamWriter(payload, StandardCharsets.UTF_8);  PipedInputStream inputStream = new PipedInputStream(payload); Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);  CSVParser parser = CSVParser.parse(reader, format); // Pass in 2 complete and one incomplete record. It should be possible to parse the two first // records without problems. String records = "1\tOne\n2\tTwo\n3\t"; writer.write(records); writer.flush();  // Get an iterator for the parser and get the first two records. Iterator<CSVRecord> iterator = parser.iterator(); assertTrue(iterator.hasNext()); CSVRecord record = iterator.next(); assertEquals("1", record.get(0)); assertEquals("One", record.get(1));  assertTrue(iterator.hasNext()); record = iterator.next(); assertEquals("2", record.get(0)); assertEquals("Two", record.get(1));  // Calling iterator.hasNext() or iterator.next() would now block, as there is not enough data // to build another record. // Add the missing pieces for the last record and parse that as well. writer.write("Three\n"); writer.close();  "<AssertPlaceHolder>"; record = iterator.next(); assertEquals("3", record.get(0)); assertEquals("Three", record.get(1));  // There are no more records as the writer has been closed. assertFalse(iterator.hasNext()); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
[+] input: testNullBitName() { byte holder = 0; NamedBitMaskHelper bitMask = new NamedBitMaskHelper(); try { holder = bitMask.setBit(null, holder); Assert.fail("null bitname is not allowed"); } catch (AssertionException e) { // ok } Assert."<AssertPlaceHolder>"; // ensure unchanged }
[*] target: assertEquals(0, holder)
[-] pred: org. junit. Assert. assertEquals ( 0, holder )
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestNestedMessage"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestNestedMessage.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  TestNestedMessage nestedMessage = TestNestedMessage.newBuilder() .setNestedId("id-123") .setSingleMessage(commonMessage) .build();  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(nestedMessage.getDescriptor(), nestedMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"nested_id":"id-123","single_message":{"order_number":"order-number-123","order_url":"https://order-url","order_details":"pickup"}}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
[+] input: testEqualsHashCode_attributeOrder() { DoEntity entity1 = BEANS.get(DoEntity.class); entity1.put("attr1", "foo"); entity1.put("attr2", "bar");  // assert attributes have insertion-order if using all() method List<String> expectedKeys1 = Arrays.asList("attr1", "attr2"); List<String> actualKeys1 = new ArrayList<>(entity1.all().keySet()); assertEquals(expectedKeys1, actualKeys1);  DoEntity entity2 = BEANS.get(DoEntity.class); entity2.put("attr2", "bar"); entity2.put("attr1", "foo");  // assert attributes have insertion-order if using all() method List<String> expectedKeys2 = Arrays.asList("attr2", "attr1"); List<String> actualKeys2 = new ArrayList<>(entity2.all().keySet()); "<AssertPlaceHolder>";  // assert entity equality (e.g. map identical) even if attribute order is not identical assertEquals(entity1, entity2); }
[*] target: assertEquals(expectedKeys2, actualKeys2)
[-] pred: org. junit. Assert. assertEquals ( expectedKeys2, actualKeys2 )
************************************
[+] input: selectByCategoryType() { ProductCategory productCategory = mapper.selectByCategoryType(7); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(productCategory)
[-] pred: org. junit. Assert. assertNotNull ( productCategory )
************************************
[+] input: canDecorateGrpcAsync() { GrpcStreamDecorator grpcStreamDecorator = new GrpcStreamDecorator(grpcSourceConfig, externalMetricConfig, schemaConfig); "<AssertPlaceHolder>"; }
[*] target: assertTrue(grpcStreamDecorator.canDecorate())
[-] pred: org. junit. Assert. assertTrue ( grpcStreamDecorator. canDecorate() )
************************************
[+] input: Exception { // Test by reading the country table. Table countryTable = this.benchmark.getCatalog().getTable(SEATSConstants.TABLENAME_COUNTRY); String countryFilePath = SEATSBenchmark.getTableDataFilePath(this.benchmark.getDataDir(), countryTable); "<AssertPlaceHolder>"; InputStream countryFile = this.getClass().getResourceAsStream(countryFilePath); assertNotNull(countryFile); }
[*] target: assertNotNull(countryFilePath)
[-] pred: org. junit. Assert. assertNotNull ( countryFilePath )
************************************
[+] input: testGetResourceToFile() { // 测试getResourceToFile方法是否能正确地将资源文件复制到指定的文件路径  //获取临时文件路径 String tempDirectoryPath = org.apache.commons.io.FileUtils.getTempDirectoryPath();  String resourceName = "iast.properties.example"; // 假设存在名为test_resource.txt的资源文件 String fileName = tempDirectoryPath + "test.example"; // 替换为实际的目标文件路径  boolean result; try { result = FileUtils.getResourceToFile(resourceName, fileName); } catch (IOException e) { throw new RuntimeException(e); }  Assert."<AssertPlaceHolder>"; // 验证复制操作是否成功  // 验证目标文件是否存在 java.io.File targetFile = new java.io.File(fileName); Assert.assertTrue(targetFile.exists());  // 清理测试产生的文件 targetFile.delete(); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: shouldFetchValueForFieldForFieldDescriptorOfTypeLong() { long actualValue = 2L;  Descriptors.FieldDescriptor fieldDescriptor = TestAggregatedSupplyMessage.getDescriptor().findFieldByName("s2_id"); LongHandler longHandler = new LongHandler(fieldDescriptor); Object value = longHandler.parseObject(actualValue);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("02:30 - 04:30"); TimeInterval expected = new TimeInterval( LocalTime.of(2, 30, 0), LocalTime.of(4, 30, 0) ); "<AssertPlaceHolder>"; assertEquals(7200, actual.getDuration()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: test6() { try (GetSetMethodHandler getSetMethodHandler = new GetSetMethodHandler(configureWrapper)) { BaseWriteDbData4GetSetMethod getSetMethod1 = getSetMethodHandler.queryGetSetMethodByFieldNameSuper(true, FRCDtoC.class.getName(), "iField1"); Assert.assertNotNull(getSetMethod1); printObjectContent(getSetMethod1, "querySuperGetSetMethodByFieldName-get");  BaseWriteDbData4GetSetMethod getSetMethod2 = getSetMethodHandler.queryGetSetMethodByFieldNameSuper(false, FRCDtoC.class.getName(), "iField1"); Assert."<AssertPlaceHolder>"; printObjectContent(getSetMethod2, "querySuperGetSetMethodByFieldName-set"); } }
[*] target: assertNotNull(getSetMethod2)
[-] pred: org. junit. Assert. assertNotNull ( getSetMethod2 )
************************************
[+] input: testHashPassword() { final byte[] salt = SecurityUtility.createRandomBytes(); final byte[] salt2 = SecurityUtility.createRandomBytes();  // test hash byte[] hash1 = SecurityUtility.hashPassword(PASSWORD, salt); byte[] hash2 = SecurityUtility.hashPassword(PASSWORD, salt2); byte[] hash3 = SecurityUtility.hashPassword(PASSWORD, salt); byte[] hash4 = SecurityUtility.hashPassword("other".toCharArray(), salt);  // ensure hashing was executed Assert.assertFalse(Arrays.equals(String.valueOf(PASSWORD).getBytes(ENCODING), hash1));  // ensure different salts matter Assert.assertFalse(Arrays.equals(hash1, hash2));  // ensure same input -> same output Assert.assertArrayEquals(hash1, hash3);  // ensure different input -> different output Assert.assertFalse(Arrays.equals(hash4, hash1));  // test invalid values boolean ok = false; try { SecurityUtility.hashPassword(null, salt); } catch (AssertionException e) { ok = true; } Assert.assertTrue(ok);  ok = false; try { SecurityUtility.hashPassword(PASSWORD, null); } catch (AssertionException e) { ok = true; } Assert.assertTrue(ok); ok = false; try { SecurityUtility.hashPassword("".toCharArray(), salt); } catch (AssertionException e) { ok = true; } Assert.assertTrue(ok); ok = false; try { SecurityUtility.hashPassword(PASSWORD, new byte[]{}); } catch (AssertionException e) { ok = true; } Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
[+] input: Exception { ServerTransportConfig config = new ServerTransportConfig(); config.setHost("0.0.0.0"); config.setPort(22222); config.setBossThreads(1); config.setIoThreads(8); config.setBizMaxThreads(200); config.setBizPoolQueues(50); config.setDaemon(false); config.setContainer("test"); ServerTransport server = ServerTransportFactory.getServerTransport(config); Assert.assertNotNull(server);  boolean error = false; try { config.setContainer("testasdasd"); ServerTransportFactory.getServerTransport(config); } catch (Exception e) { error = true; } Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(error)
[-] pred: org. junit. Assert. assertTrue ( error )
************************************
[+] input: FilterException { Message message1 = new Message(testKeyJson1.getBytes(), testMessageJson1.getBytes(), "topic1", 0, 100); Message message2 = new Message(testKeyJson2.getBytes(), testMessageJson2.getBytes(), "topic1", 0, 101); Map<String, String> filterConfigs = new HashMap<>(); filterConfigs.put("FILTER_ESB_MESSAGE_FORMAT", "JSON"); filterConfigs.put("FILTER_DATA_SOURCE", "message"); filterConfigs.put("FILTER_JSON_SCHEMA", ""); filterConfig = ConfigFactory.create(FilterConfig.class, filterConfigs); jsonFilter = new JsonFilter(stencilClient, filterConfig, firehoseInstrumentation); FilteredMessages expectedMessages = new FilteredMessages(); expectedMessages.addToValidMessages(message1); expectedMessages.addToValidMessages(message2); List<Message> inputMessages = Arrays.asList(message1, message2); FilteredMessages filteredMessages = jsonFilter.filter(inputMessages); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMessages, filteredMessages)
[-] pred: org. junit. Assert. assertEquals ( expectedMessages, filteredMessages )
************************************
[+] input: moveKingInChaos4() { Board board = Board.getBoard("r6r/Pp1pkppp/1PP2nbN/n7/BB2P3/q4N2/Pp1P2PP/R2Q1RK1 b - -"); board.inCheck = true; System.out.println(board); Engine engine = new Engine(); final int positions = engine.countAllMoves(board, 1); System.out.println("NUMBER OF POSITIONS: " + positions); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(5, positions)
[-] pred: org. junit. Assert. assertEquals ( 5, positions )
************************************
[+] input: shouldNotProvideProtoDeserializerWhenSourceNameIsUnsupported() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.PARQUET_SOURCE, SourceType.BOUNDED)}); when(streamConfig.getDataType()).thenReturn("PROTO");  ProtoDeserializerProvider provider = new ProtoDeserializerProvider(streamConfig, configuration, stencilClientOrchestrator);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(provider.canProvide())
[-] pred: org. junit. Assert. assertFalse ( provider. canProvide() )
************************************
[+] input: toByteArray1() { byte[] actual = ShortUtil.toByteArray(24565, true); byte[] expect = new byte[]{(byte) 0xF5, (byte) 0x5F}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: Exception { TestAbstractDAGVisitor visitor = new TestAbstractDAGVisitor(); visitor.putEdge(new TestAbstractDAGNode("1", "1"), new TestAbstractDAGNode("2", "2")); visitor.putEdge(new TestAbstractDAGNode("1", "1"), new TestAbstractDAGNode("3", "3")); visitor.putEdge(new TestAbstractDAGNode("1", "1"), new TestAbstractDAGNode("4", "4")); visitor.putEdge(new TestAbstractDAGNode("2", "2"), new TestAbstractDAGNode("5", "5")); visitor.putEdge(new TestAbstractDAGNode("3", "3"), new TestAbstractDAGNode("6", "6")); visitor.putEdge(new TestAbstractDAGNode("4", "4"), new TestAbstractDAGNode("7", "7")); visitor.putEdge(new TestAbstractDAGNode("5", "5"), new TestAbstractDAGNode("8", "8")); visitor.putEdge(new TestAbstractDAGNode("5", "5"), new TestAbstractDAGNode("9", "9")); visitor.putEdge(new TestAbstractDAGNode("8", "8"), new TestAbstractDAGNode("10", "10")); visitor.putEdge(new TestAbstractDAGNode("9", "9"), new TestAbstractDAGNode("10", "10")); visitor.putEdge(new TestAbstractDAGNode("7", "7"), new TestAbstractDAGNode("10", "10")); visitor.putEdge(new TestAbstractDAGNode("10", "10"), new TestAbstractDAGNode("2", "2")); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(visitor.hasCircle())
[-] pred: org. junit. Assert. assertTrue ( visitor. hasCircle ( ) )
************************************
[+] input: shouldReturnEmptyCollectionOnNullEnvVars() { HashMap<String, String> systemEnvs = null; Map<String, String> expectedEnvVars = new HashMap<>();  Map<String, String> actualEnvVars = KafkaEnvironmentVariables.parse(systemEnvs);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedEnvVars, actualEnvVars)
[-] pred: org. junit. Assert. assertEquals ( expectedEnvVars, actualEnvVars )
************************************
[+] input: SQLException { String jsonString = TABLE_METADATA.getResponse(); Response response = new Response.Builder().code(HttpStatus.SC_OK). request(buildRequest()).protocol(Protocol.HTTP_1_1). message("Successful"). body(ResponseBody.create(jsonString, MediaType.parse("application/json"))).build(); doReturn(response).when(queryExecutor).getMetadata(); ResultSet resultSet = queryServiceMetadata.getColumns("", "", "ContactPointEmail__dlm", ""); while(resultSet.next()) { String columnName = resultSet.getString("COLUMN_NAME"); Assert."<AssertPlaceHolder>"; if (booleanColumns.contains(columnName)) { Assert.assertEquals(resultSet.getInt("DATA_TYPE"), Types.BOOLEAN); Assert.assertEquals(resultSet.getString("SQL_DATA_TYPE"), JavaType.BOOLEAN.getName()); } else { Assert.assertEquals(resultSet.getInt("DATA_TYPE"), Types.VARCHAR); Assert.assertEquals(resultSet.getString("SQL_DATA_TYPE"), JavaType.STRING.getName()); } } Assert.assertEquals(resultSet.getMetaData().getColumnCount(), 24); }
[*] target: assertNotNull(columnName)
[-] pred: org. junit. Assert. assertNotNull ( columnName )
************************************
[+] input: getUserShouldReturnUser() { User user = dataService.getUser(); "<AssertPlaceHolder>"; assertEquals("Joe", user.firstName); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: mp4TfhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x10, 0x74, 0x66, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }; Mp4TfhdBox box = new Mp4TfhdBox(1); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: mp4SdtpBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x0E, 0x73, 0x64, 0x74, 0x70, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10 }; Mp4SdtpBox box = new Mp4SdtpBox(this.samples); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: testFindCodeTypeByIdInSeparateTransactions() { ICodeService codeService = BEANS.get(ICodeService.class); RunContexts.empty().run(() -> { Assert.assertNotNull(codeService.findCodeTypeById(DummyCodeType.ID)); codeService.reloadCodeType(DummyCodeType.class); }); RunContexts.empty().run(() -> { Assert.assertNotNull(codeService.getCodeType(DummyCodeType.class)); Assert."<AssertPlaceHolder>"; }); }
[*] target: assertNotNull(codeService.findCodeTypeById(DummyCodeType.ID))
[-] pred: org. junit. Assert. assertNotNull ( codeService. findCodeTypeById(DummyCodeType.ID ) )
************************************
[+] input: test() { JsonLookup lookup = JsonLookup.getInstance(); assertTrue(lookup.hasFastJson()); assertTrue(lookup.hasGson()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(lookup.hasJackson())
[-] pred: org. junit. Assert. assertTrue ( lookup. hasJackson() )
************************************
[+] input: fetchKeywordTest1() { String sql = "select * from `busu` where id = '1' and name = 'dingfeng' "; List<String> expectList = Lists .newArrayList("select", "*", "from", "`busu`", "where", "id", "=", "'1'", "and", "name", "=", "'dingfeng'"); List<String> actualList = SqlKeywordMatchUtils.fetchWords(sql); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectList, actualList)
[-] pred: org. junit. Assert. assertEquals ( expectList, actualList )
************************************
[+] input: testClearErrorStatus() { Cell c = new Cell(); c.addErrorStatus(new Status("error", IStatus.ERROR)); c.clearErrorStatus(); "<AssertPlaceHolder>"; }
[*] target: assertNull(c.getErrorStatus())
[-] pred: org. junit. Assert. assertNull ( c. getErrorStatus() )
************************************
[+] input: testEmptyUrlConfig() { when(mockUrl.getValue()).thenReturn(" "); HttpServiceTunnel tunnel = new HttpServiceTunnel(); assertNull(tunnel.getServerUrl()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(tunnel.isActive())
[-] pred: org. junit. Assert. assertFalse ( tunnel. isActive() )
************************************
[+] input: testDeserializeWithComment() {  String s = "{" + ""a": null, // 111\n" + "        "b":1, /*2   // asdsad / das */\n" + "        "c":1, /*2   // asdsad \n \r / das */\n" + "        "d":9999999999" + "}"; LOGGER.info(s); Map json = (Map) JSONSerializer.deserialize(s); Assert."<AssertPlaceHolder>"; Assert.assertEquals(json.get("a"), null); Assert.assertEquals(json.get("b"), 1); Assert.assertEquals(json.get("c"), 1); Assert.assertEquals(json.get("d"), 9999999999l); }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: testGetListenersEmptyNotNull() { final BasicPropertySupport propertySupport = new BasicPropertySupport(null); assertTrue(propertySupport.getPropertyChangeListeners().isEmpty()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(propertySupport.getSpecificPropertyChangeListeners().isEmpty())
[-] pred: org. junit. Assert. assertTrue ( propertySupport. getSpecificPropertyChangeListeners ( ). isEmpty ( ) )
************************************
[+] input: testCreateStringId_NullValue() { String str = null; FixtureStringId id = BEANS.get(IdFactory.class).createInternal(FixtureStringId.class, str); "<AssertPlaceHolder>"; }
[*] target: assertNull(id)
[-] pred: org. junit. Assert. assertNull ( id )
************************************
[+] input: testActive() { ILookupRow<String> row = new LookupRow<>("key", "text"); row.withActive(true); row.withActive(false); row.withActive(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(row.isActive())
[-] pred: org. junit. Assert. assertTrue ( row. isActive() )
************************************
[+] input: IOException { String fileName = "get-channel-test.txt"; BinlogFileReadChannel channel = fileSystem.getReadChannel(fileName); Assert.assertNull(channel); String content = "Darkness travels towards light, " + "but blindness towards death."; File f = fileSystem.newFile(fileName); f.createNewFile(); FileOutputStream fos = new FileOutputStream(f); fos.write(content.getBytes()); channel = fileSystem.getReadChannel(fileName); byte[] data = new byte[1024]; ByteBuffer buffer = ByteBuffer.wrap(data); channel.read(buffer); buffer.flip(); String actual = new String(buffer.array(), 0, buffer.limit()); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(content, actual)
[-] pred: org. junit. Assert. assertEquals ( content, actual )
************************************
[+] input: Exception { FilterRegistrationBean result = webMvcConfig.crossDomainFilter(); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { LinearRegression linearRegression = new LinearRegression().setWeightCol("weight"); LinearRegressionModel model = linearRegression.fit(trainDataTable); List<LinearRegressionModelData> modelData = IteratorUtils.toList( LinearRegressionModelData.getModelDataStream(model.getModelData()[0]) .executeAndCollect()); "<AssertPlaceHolder>"; assertEquals(1, modelData.size()); assertArrayEquals( expectedCoefficient, modelData.get(0).coefficient.values, COEFFICIENT_TOLERANCE); }
[*] target: assertNotNull(modelData)
[-] pred: org. junit. Assert. assertNotNull ( modelData )
************************************
[+] input: testGetMdl() { /** * ddl */ final ExecutorService ddlPool = Executors.newFixedThreadPool(1); ddlPool.submit(() -> { while (true) { // connect to DRDS final FrontConnection frontConn = new FrontConnection(g.nextId());  final MdlContext context = mdlManager.addContext(frontConn.getId()); frontConn.setMdlContext(context);  final Long trxId = 9527L; // get lock final MdlTicket ticket = context.acquireLock(writeRequest(trxId, tableName));  // update schema version tableSchemaMap.put(tableName, tableSchemaMap.get(tableName) + 1);  try { TimeUnit.MILLISECONDS.sleep(2); } catch (InterruptedException e) { e.printStackTrace(); }  // release lock context.releaseLock(trxId, ticket);  // close connection mdlManager.removeContext(context);  if (Thread.interrupted()) { break; } } });  /** * dml */ final ExecutorService dmlPool = Executors.newFixedThreadPool(10);  final List<Future> dmlFutures = new ArrayList<>(); IntStream.range(0, 10).forEach(index -> {  final Future<?> future = dmlPool.submit(() -> { final Random r = new Random(LocalDateTime.now().getNano());  int connCount = 0; while (connCount++ < CONN_COUNT) { // connect to DRDS final FrontConnection frontConn = new FrontConnection(g.nextId());  final MdlContext context = mdlManager.addContext(frontConn.getId()); frontConn.setMdlContext(context);  int trxCount = 0; while (trxCount++ < TRX_COUNT) { final int stmtCountInTrx = Math.abs(r.nextInt()) % 10 + 1;  final Long trxId = 9527L + trxIdGenerator.getAndIncrement();  // begin transaction MdlTicket ticket = null; for (int i = 0; i < stmtCountInTrx; i++) { final MdlTicket newTicket = context.acquireLock(readRequest(trxId, tableName));  // grant ticket once for a table in a transaction if (null != ticket) { Assert."<AssertPlaceHolder>"; }  ticket = newTicket;  // get schema version final Long schemaVersion1 = tableSchemaMap.get(tableName);  // execute query try { TimeUnit.MILLISECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); }  // check schema version final Long schemaVersion2 = tableSchemaMap.get(tableName);  final long versionChange = schemaVersion2 - schemaVersion1; Assert.assertTrue(versionChange >= 0 && versionChange <= 1); }  // commit context.releaseLock(trxId, ticket);  Assert.assertFalse(ticket.isValidate()); }  // close connection final MdlContext mdlContext = mdlManager.removeContext(context); } });  dmlFutures.add(future); });  dmlFutures.forEach(future -> { try { future.get(); } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } });  ddlPool.shutdown();  System.out.println(JSON.toJSONString(tableSchemaMap)); }
[*] target: assertEquals(ticket, newTicket)
[-] pred: org. junit. Assert. assertEquals ( ticket, newTicket )
************************************
[+] input: Exception { boolean error = false; try { new ExcludeRouter("*").route(null, null); } catch (Exception e) { error = e instanceof UnsupportedOperationException; } Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(error)
[-] pred: org. junit. Assert. assertTrue ( error )
************************************
[+] input: testRemoveOnFire() { final FastListenerList<EventListener> listenerList = new FastListenerList<>(); EventListener[] a = new EventListener[5]; for (int i = 0; i < a.length; i++) { a[i] = new FixtureEventListenerThatRemovesOnFire() { @Override public void handle(Object event) { listenerList.remove(this); } }; listenerList.add(a[i], true); } Assert.assertEquals(5, listenerList.indexes().size()); Assert.assertEquals(expectedList(4, 3, 2, 1, 0), iteratorDump(a, listenerList));  for (EventListener listener : listenerList.list()) { ((FixtureEventListenerThatRemovesOnFire) listener).handle(null); }  Assert.assertEquals(0, listenerList.indexes().size()); Assert."<AssertPlaceHolder>"; Assert.assertEquals(expectedList(), iteratorDump(a, listenerList)); }
[*] target: assertTrue(listenerList.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( listenerList. isEmpty() )
************************************
[+] input: testEquals() { MailHandler h = new MailHandler(); assertFalse(h.equals((Object) null)); assertNotEquals(h, new MailHandler()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(h.equals(h))
[-] pred: org. junit. Assert. assertTrue ( h. equals(h ) )
************************************
[+] input: testSQLInterceptor2() { //        InterceptorHelper.initSQLInterceptor(new FalseSQLInterceptor()); final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); //设置一个类型不匹配的错误 dynamicSql.andGreaterThanOrEqualTo(MysqlUserEntity::getId, null); final List<MysqlUserEntity> select = BraveSql.build(dynamicSql, MysqlUserEntity.class).select(); log.info("select.size() :{}", select.size()); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, select.size())
[-] pred: org. junit. Assert. assertEquals ( 0, select. size ( ) )
************************************
[+] input: shouldReturnMultipleListOfStringWhenLongbowDataMoreThanOne() { List<Result> scanResult = new ArrayList<>(); scanResult.add(result1); scanResult.add(result2); String[] columnNames = {"longbow_key", "longbow_data1", "rowtime", "longbow_duration", "longbow_data2"};  LongbowSchema longbowSchema = new LongbowSchema(columnNames); LongbowTableData longbowTableData = new LongbowTableData(longbowSchema); Map<String, List<String>> actualData = longbowTableData.parse(scanResult); Map<String, List<String>> expectedMap = new HashMap<String, List<String>>() {{ put("longbow_data1", Arrays.asList("RB-234", "RB-224")); put("longbow_data2", Arrays.asList("RB-235", "RB-225")); }}; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMap, actualData)
[-] pred: org. junit. Assert. assertEquals ( expectedMap, actualData )
************************************
[+] input: shouldGetValueForValueForGivenKeyInGivenMap() { ArrayList<Row> rows = new ArrayList<>(); Row row1 = new Row(2); String expectedValue = "0.4"; row1.setField(0, "payment_switch"); row1.setField(1, "PB-123456"); Row row2 = new Row(2); row2.setField(0, "weighted_abuse_probability"); row2.setField(1, expectedValue); String givenKey = "weighted_abuse_probability";  rows.add(row1); rows.add(row2);   MapGet mapGet = new MapGet(); Object actualValue = mapGet.eval(rows.toArray(new Row[0]), givenKey);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualValue )
************************************
[+] input: clearEmptyPaths_EmptyPathSize1_ShouldReturnTrueAndMapShouldBeEmpty() { Map<String, Object> map = new HashMap<>(); map.put("a", new HashMap<String, Object>()); boolean result = Util.clearEmptyPaths(map); Assert."<AssertPlaceHolder>"; Assert.assertEquals(0, map.size()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testAddSeconds() { TimeZone.setDefault(TimeZone.getTimeZone("GMT+1")); assertEquals("Test only works without day Daylight Saving Time", 0, TimeZone.getDefault().getDSTSavings());  Calendar cal = Calendar.getInstance(); for (int i = 0; i < SECONDS_IN_DAY; i++) { cal.set(Calendar.DATE, 1); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); String result = stringOf(DateUtility.addSeconds(cal.getTime(), i)); cal.set(Calendar.SECOND, i); String expected = stringOf(cal.getTime()); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testEnsureDeclaredNodes() { EntityFixtureDo testObj = BEANS.get(EntityFixtureDo.class); assertFalse(testObj.id().exists()); assertFalse(testObj.otherEntitiesList().exists()); assertFalse(testObj.otherEntities().exists()); assertFalse(testObj.otherEntitiesMap().exists());  EntityFixtureDo testObjEnsuredNodes = m_helper.ensureDeclaredNodes(testObj); "<AssertPlaceHolder>"; assertTrue(testObjEnsuredNodes.id().exists()); assertTrue(testObjEnsuredNodes.otherEntitiesList().exists()); assertTrue(testObjEnsuredNodes.otherEntities().exists()); assertTrue(testObjEnsuredNodes.otherEntitiesMap().exists()); }
[*] target: assertEquals(testObj, testObjEnsuredNodes)
[-] pred: org. junit. Assert. assertEquals ( testObj, testObjEnsuredNodes )
************************************
[+] input: mp4StscBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x10, 0x73, 0x74, 0x73, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }; Mp4StscBox box = new Mp4StscBox(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: selectSingle6() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andIn(MysqlUserEntity::getId, Arrays.asList(1, 1, 1, 1, 1, 1)); dynamicSql.andEqualTo(MysqlUserEntity::getId, 1); dynamicSql.andIn(MysqlUserEntity::getGender, Arrays.asList(GenderEnum.未知, GenderEnum.未知, GenderEnum.未知)); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
[+] input: mp4DrefBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x1C, 0x64, 0x72, 0x65, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x75, 0x72, 0x6C, 0x20, 0x00, 0x00, 0x00, 0x01, }; Mp4DrefBox box = new Mp4DrefBox(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: testRowCountAndHasRowsZeroRows() { TableEvent e = new TableEvent(mock(ITable.class), TableEvent.TYPE_ALL_ROWS_DELETED); assertEquals(0, e.getRowCount()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(e.hasRows())
[-] pred: org. junit. Assert. assertFalse ( e. hasRows() )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineConsumerConnectionInfo(anyString())).thenReturn(new ConsumerConnection()); } ConsumerConnection consumerConnection = mqAdminExtImpl.examineConsumerConnectionInfo("group_test"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(consumerConnection)
[-] pred: org. junit. Assert. assertNotNull ( consumerConnection )
************************************
[+] input: rangeQueryPolygonTest() { TreeIndex<Polygon> polygonTreeIndex = new STRTreeIndex<>(); polygonTreeIndex.insert(polygons);  List<Polygon> r1 = polygonTreeIndex.query(new Envelope(14, 20, 9, 12)); assertEquals(1, r1.size());  List<Polygon> r2 = polygonTreeIndex.query(new Envelope(5, 10, 0, 10)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(2, r2.size())
[-] pred: org. junit. Assert. assertEquals ( 2, r2. size ( ) )
************************************
[+] input: getUserByRequestTokenRequestSuccessFullWhenUserDetailsNull() { User user = getDummyUser(); ProfileVideo profileVideo = getDummyProfileVideo(); Mockito.doReturn(user).when(userService).getUserFromTokenWithoutValidation(Mockito.any()); userDetailsRepository.findByUser_id(user.getId()); Mockito.when(userDetailsRepository.findByUser_id(Mockito.anyLong())).thenReturn(null); Mockito.when(profileVideoRepository.findByUser_id(Mockito.anyLong())) .thenReturn(getDummyProfileVideo()); DashboardResponse dashboardResponse = userService.getUserByRequestToken(getMockHttpRequest()); Assertions."<AssertPlaceHolder>"; Assertions.assertNull(dashboardResponse.getPicture_url()); Assertions.assertNotNull(dashboardResponse.getVideo_url()); Assertions.assertNotNull(dashboardResponse.getVideo_name()); Assertions.assertEquals(dashboardResponse.getVideo_id(), profileVideo.getId()); }
[*] target: assertNotNull(dashboardResponse)
[-] pred: org. junit. Assert. assertNotNull ( dashboardResponse )
************************************
[+] input: testExists299() { Response r = new Response(Collections.emptyMap(), new byte[0], 299); "<AssertPlaceHolder>"; }
[*] target: assertTrue(r.exists())
[-] pred: org. junit. Assert. assertTrue ( r. exists() )
************************************
[+] input: containsEmptyKey() { JapCache japCache = new JapLocalCache(); boolean containsKey = japCache.containsKey(""); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(containsKey)
[-] pred: org. junit. Assert. assertFalse ( containsKey )
************************************
[+] input: testCheckAndSet_EnableCaching_LastModified() { Mockito.when(req.getPathInfo()).thenReturn("/"); Mockito.when(req.getHeader(HttpCacheControl.ETAG)).thenReturn(null); Mockito.when(req.getHeader(HttpCacheControl.IF_NONE_MATCH)).thenReturn(null); Mockito.when(req.getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE)).thenReturn(0L);  BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes(StandardCharsets.UTF_8)) .withCachingAllowed(true) .withLastModifiedNow() .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = cc.checkAndSetCacheHeaders(req, resp, obj); Assert."<AssertPlaceHolder>";  Mockito.verify(req, ANY_TIMES).getPathInfo(); Mockito.verify(req, ANY_TIMES).getAttribute("jakarta.servlet.forward.path_info"); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.ETAG); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.IF_NONE_MATCH); Mockito.verify(req, ANY_TIMES).getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.CACHE_CONTROL, "private, max-age=0, must-revalidate"); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.ETAG, obj.createETag()); Mockito.verify(resp, ONCE).setDateHeader(HttpCacheControl.LAST_MODIFIED, obj.getResource().getLastModified()); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
[+] input: testCheckAndSet_EnableCaching() { Mockito.when(req.getPathInfo()).thenReturn("/"); Mockito.when(req.getHeader(HttpCacheControl.ETAG)).thenReturn(null); Mockito.when(req.getHeader(HttpCacheControl.IF_NONE_MATCH)).thenReturn(null); Mockito.when(req.getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE)).thenReturn(0L);  BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes(StandardCharsets.UTF_8)) .withCachingAllowed(true) .withLastModified(0L) .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = cc.checkAndSetCacheHeaders(req, resp, obj); Assert."<AssertPlaceHolder>";  Mockito.verify(req, ANY_TIMES).getPathInfo(); Mockito.verify(req, ANY_TIMES).getAttribute("jakarta.servlet.forward.path_info"); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.ETAG); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.IF_NONE_MATCH); Mockito.verify(req, ANY_TIMES).getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.CACHE_CONTROL, "private, max-age=0, must-revalidate"); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.ETAG, obj.createETag()); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
[+] input: translate() { String input = TestUtils.resourceToString("pluscal/translate/test.tla"); String expected = TestUtils.resourceToString("pluscal/translate/test_expected.tla"); String actual = PlusCalTranslator.translate(input).getTranslated(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testSearchReturnsSomething() { final ChildPredicate predicate = new ChildPredicate(Optional.of(search)); final KDLDocument child = KDLDocument.builder() .addNode(KDLNode.builder().setIdentifier("identifier").build()) .build(); final KDLNode node = KDLNode.builder().setIdentifier("node") .setChild(child) .build();  when(search.anyMatch(any())).thenReturn(true);  "<AssertPlaceHolder>"; verify(search, times(1)).anyMatch(eq(child)); verifyNoMoreInteractions(search); }
[*] target: assertTrue(predicate.test(node))
[-] pred: org. junit. Assert. assertTrue ( predicate. test ( node ) )
************************************
[+] input: shouldReturnDefaultTimestampRowDuringTransformIfSimpleGroupDoesNotContainValueForInt64TimestampField() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("event_timestamp") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema);  TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor); Row actualRow = (Row) timestampHandler.transformFromParquet(simpleGroup);  Row expectedRow = Row.of(0L, 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
[+] input: convertMultiLineString_WithRedundantSpaces_ShouldConvert() { String wkt = "MULTILINESTRING ( (10 10, 20 20, 10   40 ) , (40 40, 30 30, 40 20, 30 10))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiLineString", "coordinates":" + " [[[10,10],[20,20],[10,40]],[[40,40],[30,30],[40,20],[30,10]]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: testAsIterator() { Enumeration<String> enumeration = enumeration(Arrays.asList("foo", "bar", "baz")); Iterator<String> iter = asIterator(enumeration); assertTrue(iter.hasNext()); assertEquals("foo", iter.next()); assertEquals("bar", iter.next()); assertEquals("baz", iter.next()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(iter.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iter. hasNext() )
************************************
[+] input: clearEmptyPaths_EmptyPathSize2_ShouldReturnTrueAndMapShouldBeEmpty() { Map<String, Object> map = new HashMap<>(); Map<String, Object> innerMap = new HashMap<>(); innerMap.put("b", new HashMap<String, Object>()); map.put("a", innerMap); boolean result = Util.clearEmptyPaths(map); Assert."<AssertPlaceHolder>"; Assert.assertEquals(0, map.size()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.viewBrokerStatsData(anyString(), anyString(), anyString())).thenReturn(new BrokerStatsData()); } BrokerStatsData brokerStatsData = mqAdminExtImpl.viewBrokerStatsData(brokerAddr, BrokerStatsManager.TOPIC_PUT_NUMS, "topic_test"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(brokerStatsData)
[-] pred: org. junit. Assert. assertNotNull ( brokerStatsData )
************************************
[+] input: shouldReturnAddedJsonStringForNestedJson() { JsonUpdate jsonUpdate = new JsonUpdate(); String jsonEvent = "{"k1":null,"k2":{"key1":"value1","key2":"value2"}}"; String expectedJsonEvent = "{"k1":null,"k2":{"key1":"value1","key2":"value2","key3":"value3"}}"; String jPath = "$.k2.key3"; String updateValue = "value3"; String actual = jsonUpdate.eval(jsonEvent, jPath, updateValue); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
[+] input: UnsupportedEncodingException { SnappyRpcCompressor compressor = new SnappyRpcCompressor(); String s = "xxxxasdasdasd0as8d0asdkmasldjalsd"; byte[] bs = compressor.compress(s.getBytes("utf-8")); Assert.assertNotNull(s);  String s1 = new String(compressor.deCompress(bs), "utf-8"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(s, s1)
[-] pred: org. junit. Assert. assertEquals ( s, s1 )
************************************
[+] input: moveKingInChaos21() { Board board = Board.getBoard("r2k3r/PpPp1ppp/5nbN/nP6/BB2P3/q4N2/Pp1P2PP/R2Q1RK1 b - -"); board.inCheck = true; System.out.println(board); Engine engine = new Engine(); final int positions = engine.countAllMoves(board, 1); System.out.println("NUMBER OF POSITIONS: " + positions); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(3, positions)
[-] pred: org. junit. Assert. assertEquals ( 3, positions )
************************************
[+] input: useSettingsFromConfigTemplate() { GinkgoRunConfiguration configTemplate = (GinkgoRunConfiguration) new GinkgoConfigurationType().createTemplateConfiguration(getProject()); configTemplate.getOptions().setGinkgoAdditionalOptions("additional options"); configTemplate.getOptions().setGoToolOptions("build tool options"); configTemplate.getOptions().setWorkingDir("custom directory");  GoFile file = (GoFile) myFixture.configureByFile("marker_ginkgo.go"); PsiElement specElement = getSpecElement(file, "Describe"); ConfigurationContext context = new ConfigurationContext(specElement); boolean result = ginkgoRunConfigurationProducer.setupConfigurationFromContext(configTemplate, context, new Ref<>(specElement));  "<AssertPlaceHolder>"; assertEquals("additional options", configTemplate.getOptions().getGinkgoAdditionalOptions()); assertEquals("build tool options", configTemplate.getOptions().getGoToolOptions()); assertEquals("custom directory", configTemplate.getOptions().getWorkingDir()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: createEsJsonWebKeyJson() { String jwkJson = JwkUtil.createEsJsonWebKeyJson("jap-jwks-keyid", TokenSigningAlg.ES256); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(jwkJson)
[-] pred: org. junit. Assert. assertNotNull ( jwkJson )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x10, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x02}; MbWriteMultipleRegisterResponse mb = new MbWriteMultipleRegisterResponse(); mb.setFunctionCode(EMbFunctionCode.WRITE_MULTIPLE_REGISTER); mb.setAddress(1); mb.setQuantity(2); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: mp4BtrtBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x14, 0x62, 0x74, 0x72, 0x74, 0x00, 0x1C, (byte) 0x9C, (byte) 0x80, 0x00, 0x2D, (byte) 0xC6, (byte) 0xC0, 0x00, 0x2D, (byte) 0xC6, (byte) 0xC0, }; Mp4BtrtBox box = new Mp4BtrtBox(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: shouldNotBeAbleToBuildSourceIfSourceDetailsContainsMultipleBackToBackSources() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_SOURCE, SourceType.UNBOUNDED), new SourceDetails(SourceName.KAFKA_SOURCE, SourceType.UNBOUNDED)}); KafkaDaggerSource daggerSource = new KafkaDaggerSource(streamConfig, configuration, daggerDeserializer);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(daggerSource.canBuild())
[-] pred: org. junit. Assert. assertFalse ( daggerSource. canBuild ( ) )
************************************
[+] input: Exception { SeedSentenceGenerator generator = new SeedSentenceGenerator("license.txt"); generator.init(context); for (int i = 0; i < 10; i++) { String sentence = generator.generate(); "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(sentence)
[-] pred: org. junit. Assert. assertNotNull ( sentence )
************************************
[+] input: Exception { when(rccCache.getApiToken(anyString())).thenReturn(null); when(apiTokenService.selectByToken(anyString())).thenReturn(new ApiToken());  ApiToken result = apiTokenCacheServiceImpl.getApiToken("token"); Assert."<AssertPlaceHolder>";   }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testUpdateFreeSpace() { createPageDirectory((short) 10);  short pageSize = (short) (pageDirectory.getEffectivePageSize() - 10); Page p1 = pageDirectory.getPageWithSpace(pageSize); p1.unpin();  pageDirectory.updateFreeSpace(p1, (short) 10);  Page p2 = pageDirectory.getPageWithSpace((short) 10); p2.unpin();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(p1, p2)
[-] pred: org. junit. Assert. assertEquals ( p1, p2 )
************************************
[+] input: convertMultiPolygon_NoRedundantSpaces_ShouldConvert() { String wkt = "MULTIPOLYGON (((30 20, 45 40, 10 40, 30 20)),((15 5, 40 10, 10 20, 5 10, 15 5)))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiPolygon", "coordinates":" + " [[[[30,20],[45,40],[10,40],[30,20]]],[[[15,5],[40,10],[10,20],[5,10],[15,5]]]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: createReadDeviceBatchMultiBlocksReq() { byte[] expect = new byte[]{ 0x50, 0x00, 0x00, (byte) 0xFF, (byte) 0xFF, 0x03, 0x00, 0x26, 0x00, 0x0C, 0x00, 0x06, 0x04, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, (byte) 0xA8, 0x04, 0x00, 0x00, 0x01, 0x00, (byte) 0xB4, 0x08, 0x00, 0x00, 0x00, 0x00, (byte) 0x90, 0x02, 0x00, (byte) 0x80, 0x00, 0x00, (byte) 0x90, 0x02, 0x00, 0x00, 0x01, 0x00, (byte) 0xA0, 0x03, 0x00 }; List<McDeviceAddress> wordAddresses = new ArrayList<>(); wordAddresses.add(new McDeviceAddress(EMcDeviceCode.D, 0, 4)); wordAddresses.add(new McDeviceAddress(EMcDeviceCode.W, 0x100, 8));  List<McDeviceAddress> bitAddresses = new ArrayList<>(); bitAddresses.add(new McDeviceAddress(EMcDeviceCode.M, 0, 2)); bitAddresses.add(new McDeviceAddress(EMcDeviceCode.M, 128, 2)); bitAddresses.add(new McDeviceAddress(EMcDeviceCode.B, 0x100, 3)); McMessageReq req = McReqBuilder.createReadDeviceBatchMultiBlocksReq(wordAddresses, bitAddresses); byte[] actual = req.toByteArray(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.getBrokerConfig(anyString())).thenReturn(new Properties()); } Properties brokerConfig = mqAdminExtImpl.getBrokerConfig(brokerAddr); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(brokerConfig)
[-] pred: org. junit. Assert. assertNotNull ( brokerConfig )
************************************
[+] input: logout() { JapUserStore japUserStore = new JapUserStoreTest(); JapCache japCache = new JapLocalCache(); JapConfig japConfig = new JapConfig(); JapContext japContext = new JapContext(japUserStore, japCache, japConfig); JapAuthentication.setContext(japContext);  boolean result = JapAuthentication.logout(request, response); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: IOException { AbstractByteBuf byteBuf = new ByteStreamWrapperByteBuf(null); Assert.assertNull(byteBuf.array()); Assert.assertTrue(byteBuf.readableBytes() == 0);  UnsafeByteArrayOutputStream bs = new UnsafeByteArrayOutputStream(); bs.write(new byte[] { 1, 2, 3 }); byteBuf = new ByteStreamWrapperByteBuf(bs); Assert.assertNotNull(byteBuf.array()); Assert.assertTrue(byteBuf.array().length == 3); Assert.assertTrue(byteBuf.readableBytes() == 3); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(byteBuf.release())
[-] pred: org. junit. Assert. assertTrue ( byteBuf. release() )
************************************
[+] input: toByteArray() { TPKT tpkt = new TPKT(); tpkt.setLength(100); byte[] actual = tpkt.toByteArray(); byte[] expect = {(byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x64}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "2."); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
[+] input: constraintOptional() { createCueFile("#Person: {\n" + "    <caret>name!: string\n" + "    age?:  int\n" + "}");  var field = findTypedElement(CueLabelExpr.class); assertTrue(field.isRequiredFieldConstraint()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(field.isOptionalFieldConstraint())
[-] pred: org. junit. Assert. assertFalse ( field. isOptionalFieldConstraint ( ) )
************************************
[+] input: testGenerateValidPeriod() { String result = ChineseIDCardNumberGenerator.generateValidPeriod(); System.err.println(result); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: pushNPopNRemove() { CustomLinkedList<Integer> linkedList = new CustomLinkedList<>(); linkedList.push(2); linkedList.push(3); linkedList.push(36);    // 36 3 2 assertThat(linkedList.remove(1), is(3));   // 36 2 linkedList.push(39); linkedList.push(43); linkedList.push(45);    // 45 43 39 36 2 assertThat(linkedList.remove(2), is(39));   // 45 43 36 2  assertThat(linkedList.pop(), is(45)); assertThat(linkedList.pop(), is(43)); assertThat(linkedList.pop(), is(36)); assertThat(linkedList.pop(), is(2)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(linkedList.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( linkedList. isEmpty() )
************************************
[+] input: shouldCheckIfQueryIsInvalidInCaseOfAllVariableValues() { when(sourceConfig.getVariables()).thenReturn("order_number,customer_id"); when(sourceConfig.getPattern()).thenReturn(""{\\"key\\": \\"%s\\", \\"other_key\\": \\"%s\\"}"");  Row row = new Row(2); Row inputData = new Row(2); inputData.setField(1, ""); inputData.setField(0, ""); row.setField(0, inputData); row.setField(1, new Row(1)); RowManager rowManager = new RowManager(row);  endpointHandler = new EndpointHandler(meterStatsManager, errorReporter, inputProtoClasses, getColumnNameManager(new String[]{"order_number", "customer_id"}), descriptorManager); Object[] endpointOrQueryVariablesValues = endpointHandler .getVariablesValue(rowManager, Constants.ExternalPostProcessorVariableType.REQUEST_VARIABLES, sourceConfig.getVariables(), resultFuture);  boolean queryInvalid = endpointHandler.isQueryInvalid(resultFuture, rowManager, sourceConfig.getVariables(), endpointOrQueryVariablesValues); "<AssertPlaceHolder>"; verify(meterStatsManager, times(1)).markEvent(ExternalSourceAspects.EMPTY_INPUT); }
[*] target: assertTrue(queryInvalid)
[-] pred: org. junit. Assert. assertTrue ( queryInvalid )
************************************
[+] input: hasTypeShouldBeFalseWhenTypeIsEmpty() { EsSourceConfig esSourceConfig = new EsSourceConfigBuilder() .setType("") .createEsSourceConfig(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(esSourceConfig.hasType())
[-] pred: org. junit. Assert. assertFalse ( esSourceConfig. hasType() )
************************************
[+] input: canNotProcessWhenTypeIsNull() { InvalidInternalConfigProcessor invalidInternalConfigProcessor = new InvalidInternalConfigProcessor(null);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(invalidInternalConfigProcessor.canProcess(null))
[-] pred: org. junit. Assert. assertFalse ( invalidInternalConfigProcessor. canProcess ( null ) )
************************************
[+] input: testToString() { String expectedStr = "CommonResponse(code=2, msg=msg-2)";  CommonResponse response = new TestResponse(2, "msg-2");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStr, response.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedStr, response. toString ( ) )
************************************
[+] input: testConstructor2() { Street actualStreet = new Street( new City(new State(), "Name", "Addition", new String[] {"foo", "foo", "foo"}, "Area Code"), "Name", 3); assertEquals("Name", actualStreet.getName()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(3, actualStreet.getMaxHouseNumber())
[-] pred: org. junit. Assert. assertEquals ( 3, actualStreet. getMaxHouseNumber() )
************************************
[+] input: otherMethodTest() { String[] value = new String[] {"case1","case2","case3","case4","case5","case6"}; double[] weight = new double[] {0.1,0.3,0.1,0.2,0.2,0.1}; WeightedStringGenerator generator = new WeightedStringGenerator(); generator.setWeight(weight); generator.setValue(value); assertEquals(weight, generator.getWeight()); assertEquals(value, generator.getValue()); assertEquals(String.class, generator.getGeneratedType()); assertTrue(generator.isThreadSafe()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(generator.isParallelizable())
[-] pred: org. junit. Assert. assertTrue ( generator. isParallelizable() )
************************************
[+] input: TableNotExistException { List<CatalogPartitionSpec> catalogPartitionSpecs = rocketMQCatalog.listPartitions(new ObjectPath("default", "test")); "<AssertPlaceHolder>"; assertEquals( new ArrayList<CatalogPartitionSpec>() { { add( new CatalogPartitionSpec( new HashMap<String, String>(1) { { put("__queue_id__", String.valueOf(0)); } })); add( new CatalogPartitionSpec( new HashMap<String, String>(1) { { put("__queue_id__", String.valueOf(1)); } })); } }, catalogPartitionSpecs); }
[*] target: assertEquals(2, catalogPartitionSpecs.size())
[-] pred: org. junit. Assert. assertEquals ( 2, catalogPartitionSpecs. size ( ) )
************************************
[+] input: testUpdateActionsFromPaths_unrecognizedPath() { Set<UpdateAction> expectedActions = EnumSet.noneOf(UpdateAction.class); List<Path> unrecognizedPaths = List.of(Path.of("abc/unrecognized/path.java")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(unrecognizedPaths); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
[+] input: testRangeMergeOnly() {  AckRangeSet set = new AckRangeSet(); set.add(0, 1); set.add(1, 101); set.add(101, 201); set.add(201, 301); set.add(301, 401); set.add(201, 301); set.add(501, 601);  List<AckRange> rangesList = convertToOrderedList(set.getRanges()); "<AssertPlaceHolder>"; assertRangeEquals(0, 401, rangesList.get(0)); assertRangeEquals(501, 601, rangesList.get(1));  }
[*] target: assertEquals(2, rangesList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, rangesList. size ( ) )
************************************
[+] input: testEnsureTypeWithItself() { final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT); RexBuilder builder = new RexBuilder(typeFactory);  RexNode node =  new RexLiteral( Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN); RexNode ensuredNode = builder.ensureType( typeFactory.createSqlType(SqlTypeName.BOOLEAN), node, true);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(node, ensuredNode)
[-] pred: org. junit. Assert. assertEquals ( node, ensuredNode )
************************************
[+] input: testParse() { GalleryDetailUrlParser.Result result = GalleryDetailUrlParser.parse(url, strict); if (isNull) { "<AssertPlaceHolder>"; } else { assertEquals(gid, result.gid); assertEquals(token, result.token); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testAddDays() { TimeZone.setDefault(TimeZone.getTimeZone("GMT+1")); assertEquals("Test only works without day Daylight Saving Time", 0, TimeZone.getDefault().getDSTSavings());  for (int sec = 0; sec < SECONDS_IN_DAY; sec++) { double d = sec / SECONDS_IN_DAY; Calendar cal = getCalendar(1, 0);  String result = stringOf(DateUtility.addDays(cal.getTime(), d));  cal.set(Calendar.SECOND, sec);  String expected = stringOf(cal.getTime()); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testIsAttached() { AbstractJsonAdapter<?> adapter = newAdapter(new Object()); adapter.init(); assertTrue(adapter.isInitialized());  adapter.dispose(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(adapter.isDisposed())
[-] pred: org. junit. Assert. assertTrue ( adapter. isDisposed() )
************************************
[+] input: testGsi() { // fastjson 对gsi 和 isGsi是完全兼容的 String extStr = "{"createSql4PhyTable":"","gsi":true," + ""orginalDdl":"alter table `jiyuetest2` add global index g_i_1(a,b,c) partition by key(a) partitions 3","taskId":1625938869717319684}"; DDLExtInfo extInfo = DDLExtInfo.parseExtInfo(extStr); Assert.assertTrue(extInfo.isGsi());  extStr = "{"createSql4PhyTable":"","isGsi":true," + ""originalDdl":"alter table `jiyuetest2` add global index g_i_1(a,b,c) partition by key(a) partitions 3","taskId":1625938869717319684}"; extInfo = DDLExtInfo.parseExtInfo(extStr); Assert.assertTrue(extInfo.isGsi());  // gson 对gsi 和 isGsi是不兼容的 Gson gson = new Gson(); extStr = "{"createSql4PhyTable":"","gsi":true," + ""orginalDdl":"alter table `jiyuetest2` add global index g_i_1(a,b,c) partition by key(a) partitions 3","taskId":1625938869717319684}"; extInfo = gson.fromJson(extStr, DDLExtInfo.class); Assert.assertFalse(extInfo.isGsi());  extStr = "{"createSql4PhyTable":"","isGsi":true," + ""originalDdl":"alter table `jiyuetest2` add global index g_i_1(a,b,c) partition by key(a) partitions 3","taskId":1625938869717319684}"; extInfo = gson.fromJson(extStr, DDLExtInfo.class); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(extInfo.isGsi())
[-] pred: org. junit. Assert. assertTrue ( extInfo. isGsi ( ) )
************************************
[+] input: testToString() { String expectedStr = "Breaker(status=CLOSED, lastBreakTimeMillis=-1)"; Breaker breaker = new Breaker();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStr, breaker.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedStr, breaker. toString() )
************************************
[+] input: SQLException { Query.Field[] fields = TestResult.makeTestFields("c1|c2", "varbinary|decimal"); VtResultSet resultSet = TestResult.makeTestResult(fields, "a|1", "g|2", "a|1", "c|4", "c|3"); FakePrimitive fp = new FakePrimitive(Lists.newArrayList(resultSet));  OrderByParamsGen4 orderByParamsGen4 = new OrderByParamsGen4(1, false, -1, null); MemorySortGen4Engine ms = new MemorySortGen4Engine(Lists.newArrayList(orderByParamsGen4), fp);  VtResultSet result = (VtResultSet) ms.execute(VtContext.background(), new NoopVCursor(), null, false).getVtRowList();  VtResultSet wantResult = TestResult.makeTestResult(fields, "a|1", "a|1", "g|2", "c|3", "c|4"); Assert.assertEquals(wantResult, result);  fp.rewind(); EvalEngine.BindVariable pv = new EvalEngine.BindVariable("__upper_limit"); ms.setUpperLimit(pv);  Map<String, BindVariable> bindVariableMap = new HashMap<>(); bindVariableMap.put("__upper_limit", SqlTypes.int64BindVariable(3L)); result = (VtResultSet) ms.execute(VtContext.background(), new NoopVCursor(), bindVariableMap, false).getVtRowList(); wantResult = TestResult.makeTestResult(fields, "a|1", "a|1", "g|2"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(wantResult, result)
[-] pred: org. junit. Assert. assertEquals ( wantResult, result )
************************************
[+] input: Exception { CollectorFormatter minF = new CollectorFormatter("{7}", (Formatter) null, (Comparator<LogRecord>) null);  tickMilli(); //Make sure the max not equal to the start time.  final String min = minF.getTail((Handler) null); NumberFormat.getIntegerInstance().parse(min); tickMilli();  //Next min is not old min. String next = minF.getTail((Handler) null); assertFalse(min + ' ' + next, min.equals(next));  //All mins start at the init time. CollectorFormatter initF = new CollectorFormatter("{10}", (Formatter) null, (Comparator<LogRecord>) null);  next = initF.getTail((Handler) null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(min, next)
[-] pred: org. junit. Assert. assertEquals ( min, next )
************************************
[+] input: testCreateCatalog() { RocketMQCatalogFactory factory = new RocketMQCatalogFactory(); FactoryUtil.DefaultCatalogContext context = new FactoryUtil.DefaultCatalogContext( "rocketmq-catalog", new HashMap<>(), null, this.getClass().getClassLoader()); Catalog catalog = factory.createCatalog(context); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(catalog)
[-] pred: org. junit. Assert. assertNotNull ( catalog )
************************************
[+] input: Exception { StarRocksTable oldTable = catalog.getTable(DB_NAME, tableName).orElse(null); assertNotNull(oldTable); List<StarRocksColumn> addColumns = new ArrayList<>();  StarRocksColumn c4 = new StarRocksColumn.Builder() .setColumnName("c4") .setOrdinalPosition(4) .setDataType("BIGINT") .setNullable(true) .setColumnSize(19) .setDecimalDigits(0) .setColumnComment("add c4") .build(); addColumns.add(c4);  StarRocksColumn c5 = new StarRocksColumn.Builder() .setColumnName("c5") .setOrdinalPosition(5) .setDataType("DECIMAL") .setNullable(true) .setColumnSize(20) .setDecimalDigits(1) .setColumnComment("add c5") .build(); addColumns.add(c5);  StarRocksColumn c6 = new StarRocksColumn.Builder() .setColumnName("c6") .setOrdinalPosition(6) .setDataType("DATETIME") .setNullable(true) .setDefaultValue(null) .setColumnSize(null) .setDecimalDigits(null) .setColumnComment("add c6") .build(); addColumns.add(c6);  catalog.alterAddColumns(DB_NAME, tableName, addColumns, 60); StarRocksTable newTable = catalog.getTable(DB_NAME, tableName).orElse(null); "<AssertPlaceHolder>";  List<StarRocksColumn> expectedColumns = new ArrayList<>(); expectedColumns.addAll(oldTable.getColumns()); expectedColumns.addAll(addColumns);  assertEquals(expectedColumns, newTable.getColumns()); }
[*] target: assertNotNull(newTable)
[-] pred: org. junit. Assert. assertNotNull ( newTable )
************************************
[+] input: shouldCheckIfQueryIsInValidInCaseOfSingeEmptyVariableValueForSingleField() { when(sourceConfig.getVariables()).thenReturn("customer_id"); when(sourceConfig.getPattern()).thenReturn(""{\\"key\\": \\"%s\\"}"");  Row row = new Row(2); Row inputData = new Row(2); inputData.setField(1, ""); row.setField(0, inputData); row.setField(1, new Row(1)); RowManager rowManager = new RowManager(row);  endpointHandler = new EndpointHandler(meterStatsManager, errorReporter, inputProtoClasses, getColumnNameManager(new String[]{"order_number", "customer_id"}), descriptorManager); Object[] endpointOrQueryVariablesValues = endpointHandler .getVariablesValue(rowManager, Constants.ExternalPostProcessorVariableType.REQUEST_VARIABLES, sourceConfig.getVariables(), resultFuture);  boolean queryInvalid = endpointHandler.isQueryInvalid(resultFuture, rowManager, sourceConfig.getVariables(), endpointOrQueryVariablesValues); "<AssertPlaceHolder>"; verify(resultFuture, times(1)).complete(any()); verify(meterStatsManager, times(1)).markEvent(ExternalSourceAspects.EMPTY_INPUT); }
[*] target: assertTrue(queryInvalid)
[-] pred: org. junit. Assert. assertTrue ( queryInvalid )
************************************
[+] input: shouldAddIndentForName() { //given String expectedString = "SELECT"+lineBreak + "\tmy_field" + lineBreak + "FROM" + lineBreak + "\tmy_table"; String inputString = "SELECT my_field FROM my_table";  Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_LF_BEFORE_COMMA))).thenReturn(false); Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_BREAK_BEFORE_CLOSE_BRACKET))).thenReturn(true);  //when String formattedString = formatter.format(inputString, configuration);  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
[+] input: getStructureViewBuilder_go() { GoFile file = (GoFile) myFixture.configureByFile("go_file.go"); StructureViewBuilder structureViewBuilder = ginkgoStructureViewFactory.getStructureViewBuilder(file); "<AssertPlaceHolder>"; StructureView structureView = structureViewBuilder.createStructureView(null, file.getProject()); assertTrue(structureView.getTreeModel() instanceof GoStructureViewFactory.Model); }
[*] target: assertNotNull(structureViewBuilder)
[-] pred: org. junit. Assert. assertNotNull ( structureViewBuilder )
************************************
[+] input: SQLException { Query.Field[] fields = TestResult.makeTestFields("c1|c2|c3", "varbinary|decimal|int64"); VtResultSet resultSet = TestResult.makeTestResult(fields, "a|1|1", "g|2|1", "a|1|1", "c|4|1", "c|3|1"); FakePrimitive fp = new FakePrimitive(Lists.newArrayList(resultSet));  OrderByParamsGen4 orderByParamsGen4 = new OrderByParamsGen4(1, false, -1, null); MemorySortGen4Engine ms = new MemorySortGen4Engine(Lists.newArrayList(orderByParamsGen4), fp); ms.setTruncateColumnCount(2);  VtResultSet result = (VtResultSet) ms.execute(VtContext.background(), new NoopVCursor(), null, false).getVtRowList(); VtResultSet wantResult = TestResult.makeTestResult(new Query.Field[] {fields[0], fields[1]}, "a|1", "a|1", "g|2", "c|3", "c|4"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(wantResult, result)
[-] pred: org. junit. Assert. assertEquals ( wantResult, result )
************************************
[+] input: testUpdateActionsFromPaths_basic() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.CLIENT, UpdateAction.FUNCTIONS); List<Path> changedPaths = List.of( Path.of("client/web/src/App.js"), Path.of("functions/onboarding-app-stack-listener/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.FUNCTIONS) { assertEquals(1, action.getTargets().size()); assertEquals(1, UpdateAction.FUNCTIONS.getTargets().size()); assertTrue(action.getTargets().contains("onboarding-app-stack-listener")); } }); }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
[+] input: createRsaJsonWebKeySetJson() { String jwkJson = JwkUtil.createRsaJsonWebKeySetJson("jap-jwks-keyid", TokenSigningAlg.RS256); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(jwkJson)
[-] pred: org. junit. Assert. assertNotNull ( jwkJson )
************************************
[+] input: save() { ProductInfo productInfo = new ProductInfo(); productInfo.setProductId("123457"); productInfo.setProductName("肉包子"); productInfo.setProductPrice(new BigDecimal(3.0)); productInfo.setProductStock(100); productInfo.setProductDescription("刚蒸的包子"); productInfo.setProductIcon("http://xxxx.jpg"); productInfo.setProductStatus(ProductStatusEnum.UP.getCode()); productInfo.setCategoryType(2);  ProductInfo result = productService.save(productInfo); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: toByteArray1() { byte[] actual = IntegerUtil.toByteArray(2111286, true); byte[] expect = new byte[]{(byte) 0x36, (byte) 0x37, (byte) 0x20, (byte) 0x00}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: testMTSettings() { assertFalse(converter.isParallelizable()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(converter.isThreadSafe())
[-] pred: org. junit. Assert. assertTrue ( converter. isThreadSafe() )
************************************
[+] input: toByteArray() { ByteArraySerializer serializer = ByteArraySerializer.newInstance(); byte[] expect = new byte[]{(byte) 0x01, // 0, 25689 (byte) 0x00, (byte) 0x00, (byte) 0x64, (byte) 0x59, // 523975585 (byte) 0x1F, (byte) 0x3B, (byte) 0x3B, (byte) 0xA1, (byte) 0x1F, (byte) 0x3B, (byte) 0x3B, (byte) 0xA1, // 33.16f, -15.62f (byte) 0x42, (byte) 0x04, (byte) 0xA3, (byte) 0xD7, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, // 156665.35455556 (byte) 0x41, (byte) 0x03, (byte) 0x1F, (byte) 0xCA, (byte) 0xD6, (byte) 0x21, (byte) 0x39, (byte) 0xB7, // -56516.66664 (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, // 23A (byte) 0x32, (byte) 0x33, (byte) 0x41};  ByteArrayBean bean = serializer.toObject(ByteArrayBean.class, expect); byte[] actual = serializer.toByteArray(bean); assertArrayEquals(expect, actual);  expect = new byte[]{(byte) 0x81, // 0, 25689 (byte) 0x00, (byte) 0x00, (byte) 0x64, (byte) 0x59, // 523975585 (byte) 0x1F, (byte) 0x3B, (byte) 0x3B, (byte) 0xA1, (byte) 0x1F, (byte) 0x3B, (byte) 0x3B, (byte) 0xA1, // 33.16f, -15.62f (byte) 0x42, (byte) 0x04, (byte) 0xA3, (byte) 0xD7, (byte) 0xC1, (byte) 0x79, (byte) 0xEB, (byte) 0x85, // 156665.35455556 (byte) 0x41, (byte) 0x03, (byte) 0x1F, (byte) 0xCA, (byte) 0xD6, (byte) 0x21, (byte) 0x39, (byte) 0xB7, // -56516.66664 (byte) 0xC0, (byte) 0xEB, (byte) 0x98, (byte) 0x95, (byte) 0x55, (byte) 0x1D, (byte) 0x68, (byte) 0xC7, // 23A (byte) 0x32, (byte) 0x33, (byte) 0x41};  ByteArrayListBean listBean = serializer.toObject(ByteArrayListBean.class, expect); actual = serializer.toByteArray(listBean); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: testLogout() { UiSession uiSession = (UiSession) JsonTestUtility.createAndInitializeUiSession();  uiSession.getClientSession().stop();  assertTrue(uiSession.isDisposed()); "<AssertPlaceHolder>"; JsonTestUtility.endRequest(uiSession); }
[*] target: assertNull(uiSession.currentJsonResponse())
[-] pred: org. junit. Assert. assertNull ( uiSession. currentJsonResponse() )
************************************
[+] input: shouldReturnFalseIfRepeatedMessageFieldDescriptorIsPassed() { Descriptors.FieldDescriptor repeatedMessageFieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("routes"); RepeatedPrimitiveHandler repeatedPrimitiveHandler = new RepeatedPrimitiveHandler(repeatedMessageFieldDescriptor);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(repeatedPrimitiveHandler.canHandle())
[-] pred: org. junit. Assert. assertFalse ( repeatedPrimitiveHandler. canHandle() )
************************************
[+] input: convertPolygonWithHole_WithRedundantSpaces_ShouldConvert() { String wkt = "POLYGON ( (35 10, 45 45, 15 40, 10 20, 35 10 ), (20 30 , 35 35, 30 20,   20 30 ) ) "; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Polygon", "coordinates":" + " [[[35,10],[45,45],[15,40],[10,20],[35,10]],[[20,30],[35,35],[30,20],[20,30]]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: getVehicleLocationNotFoundWhenVehicleDetailsOwnerIsNull() { VehicleDetails vehicleDetails = getDummyVehicleDetails(); vehicleDetails.setOwner(null); Mockito.when(vehicleDetailsRepository.findByUuid(vehicleDetails.getUuid())) .thenReturn(vehicleDetails); VehicleLocationResponse vehicleLocationResponse = vehicleService.getVehicleLocation(vehicleDetails.getUuid()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(vehicleLocationResponse)
[-] pred: org. junit. Assert. assertNull ( vehicleLocationResponse )
************************************
[+] input: testMultiStatusSeverity() { MultiStatus multiStatus = new MultiStatus(); multiStatus.add(m_warningStatus); multiStatus.add(m_infoStatus); assertTrue(multiStatus.getSeverity() == IStatus.WARNING); "<AssertPlaceHolder>"; }
[*] target: assertTrue(multiStatus.isMultiStatus())
[-] pred: org. junit. Assert. assertTrue ( multiStatus. isMultiStatus() )
************************************
[+] input: getByEmptyKey() { JapCache japCache = new JapLocalCache(); String res = (String) japCache.get(""); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
[+] input: testFindById() { WorkflowInfo workflowInfo = workflowService.findById(mockWorkflowId); Assert."<AssertPlaceHolder>"; Assert.assertEquals(mockWorkflowId, workflowInfo.getId()); Assert.assertEquals(mockWorkflowName, workflowInfo.getName()); }
[*] target: assertNotNull(workflowInfo)
[-] pred: org. junit. Assert. assertNotNull ( workflowInfo )
************************************
[+] input: shouldBeEmptyWhenExternalSourceHasEmptyConfig() { ArrayList<HttpSourceConfig> http = new ArrayList<>(); ArrayList<EsSourceConfig> es = new ArrayList<>(); ArrayList<PgSourceConfig> pg = new ArrayList<>(); ExternalSourceConfig externalSourceConfig = new ExternalSourceConfig(http, es, pg, new ArrayList<>()); defaultPostProcessorConfig = new PostProcessorConfig(externalSourceConfig, null, null);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(defaultPostProcessorConfig.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( defaultPostProcessorConfig. isEmpty() )
************************************
[+] input: test_AU() { DatasetUtil.runInRegion(Country.AUSTRALIA.getIsoCode(), () -> { StreetNameGenerator generator = new StreetNameGenerator(); generator.init(context); for (int i = 0; i < 10; i++) { String product = generator.generate(); "<AssertPlaceHolder>"; } generator.close(); }); }
[*] target: assertNotNull(product)
[-] pred: org. junit. Assert. assertNotNull ( product )
************************************
[+] input: IOException { TestingConfig.baseDir = "bin/test"; TestingConfig test = new TestingConfig(); if (test.exists()) test.getFile().delete();  test.writeAll(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(test.exists())
[-] pred: org. junit. Assert. assertTrue ( test. exists() )
************************************
[+] input: SQLException { Mockito.when(mockResults.getBoolean("writable")).thenReturn(true); GreenplumExternalTable table = new GreenplumExternalTable(mockSchema, mockResults); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(table.isWritable())
[-] pred: org. junit. Assert. assertTrue ( table. isWritable() )
************************************
[+] input: shouldGetIntValueForValueForGivenKeyInGivenMap() { ArrayList<Row> rows = new ArrayList<>(); Row row1 = new Row(2); int expectedValue = 4; row1.setField(0, "payment_switch"); row1.setField(1, "PB-123456"); Row row2 = new Row(2); row2.setField(0, "weighted_abuse_probability"); row2.setField(1, expectedValue); String givenKey = "weighted_abuse_probability";  rows.add(row1); rows.add(row2);   MapGet mapGet = new MapGet(); Object actualValue = mapGet.eval(rows.toArray(new Row[0]), givenKey);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualValue )
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForDateType() { String error = explicitNullableTypeChecker.checkValueForType(null, Date.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Date")); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: testGet() { try { String result = PoolHttpClient.get("https://www.baidu.com/"); Assert."<AssertPlaceHolder>"; } catch (Exception e) { fail("Unexpect an exception: " + e.getMessage()); } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { JobID jobId = randomJobId(); RegistrationID worker1 = new RegistrationID();  AssignmentTracker assignmentTracker = createAssignmentTracker( jobId, worker1, new InstanceID("worker1"), new EmptyShuffleWorkerGateway());  DataSetID dataSetId = randomDataSetId(); MapPartitionID dataPartitionId = randomMapPartitionId(); ShuffleResource shuffleResource1 = assignmentTracker.requestShuffleResource( jobId, dataSetId, dataPartitionId, 2, partitionFactory, null);  // reallocation the same data partition on the same worker should remain unchanged ShuffleResource shuffleResource2 = assignmentTracker.requestShuffleResource( jobId, dataSetId, dataPartitionId, 2, partitionFactory, null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(shuffleResource1, shuffleResource2)
[-] pred: org. junit. Assert. assertEquals ( shuffleResource1, shuffleResource2 )
************************************
[+] input: Exception { when(redisTemplate.execute(any(RedisCallback.class))).thenAnswer( invocation -> Boolean.TRUE ); Boolean result = redisCache.hmdel("key", Arrays.asList("String")); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(Boolean.TRUE, result)
[-] pred: org. junit. Assert. assertEquals ( Boolean. TRUE, result )
************************************
[+] input: testReadWriteValueWithStreams() { ByteArrayOutputStream bos = new ByteArrayOutputStream(); m_mapper.writeValue(bos, null); assertEquals(0, bos.toByteArray().length);  DoEntity entity = BEANS.get(DoEntity.class); entity.put("foo", "bar"); entity.put("baz", 42); ByteArrayOutputStream expected = new ByteArrayOutputStream(); m_mapper.writeValue(expected, entity); DoEntity parsedEntity = m_mapper.readValue(new ByteArrayInputStream(expected.toByteArray()), DoEntity.class); ByteArrayOutputStream actual = new ByteArrayOutputStream(); m_mapper.writeValue(actual, parsedEntity); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expected.toByteArray(), actual.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expected. toByteArray ( ), actual. toByteArray ( ) )
************************************
[+] input: shouldReturnTypeInformation() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("profile_data"); StructMessageHandler structMessageHandler = new StructMessageHandler(fieldDescriptor); TypeInformation actualTypeInformation = structMessageHandler.getTypeInformation(); TypeInformation<Row> expectedTypeInformation = Types.ROW_NAMED(new String[]{}); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedTypeInformation, actualTypeInformation)
[-] pred: org. junit. Assert. assertEquals ( expectedTypeInformation, actualTypeInformation )
************************************
[+] input: Exception { Object payload = Payloads.ROME.getPayload().getPayload(new String[]{"ldap://127.0.0.1:43658/Calc"}); Assert."<AssertPlaceHolder>";; }
[*] target: assertNotNull(payload)
[-] pred: org. junit. Assert. assertNotNull ( payload )
************************************
[+] input: interpolationMultiple() { createCueFile("'a\\(1)b\\(2)b\\(3)'"); var literal = findTypedElement(CueStringLiteral.class); var ranges = CueMultiHostInjector.findInjectionRanges(literal);  var expected = Arrays.asList( new InjectionData(TextRange.create(1, 2), null, null), new InjectionData(TextRange.create(6, 7), "\\(1)", null), new InjectionData(TextRange.create(11, 12), "\\(2)", null), new InjectionData(TextRange.create(16, 16), "\\(3)", null)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, ranges)
[-] pred: org. junit. Assert. assertEquals ( expected, ranges )
************************************
[+] input: shouldReturnTypeInformation() { Descriptors.Descriptor descriptor = TestBookingLogMessage.getDescriptor(); Descriptors.FieldDescriptor fieldDescriptor = descriptor.findFieldByName("event_timestamp"); TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor); TypeInformation actualTypeInformation = timestampHandler.getTypeInformation(); TypeInformation<Row> expectedTypeInformation = Types.ROW_NAMED(new String[]{"seconds", "nanos"}, Types.LONG, Types.INT); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedTypeInformation, actualTypeInformation)
[-] pred: org. junit. Assert. assertEquals ( expectedTypeInformation, actualTypeInformation )
************************************
[+] input: should_notEnableCsrf_When_CreatingCsrfCheckerAndXsrfProtectionDisabled() { Mockito.when(appConfig.isXsrfProtectionEnabled()).thenReturn(false); csrfChecker = Mockito.spy(new CsrfChecker(servletContext));  Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(csrfChecker.isCsrfProtectionEnabled())
[-] pred: org. junit. Assert. assertFalse ( csrfChecker. isCsrfProtectionEnabled() )
************************************
[+] input: selectSingle2() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andIn(MysqlUserEntity::getId, Arrays.asList(1, 1, 1, 1, 1, 1)); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x01}; MbReadInputRegisterRequest mb = new MbReadInputRegisterRequest(); mb.setFunctionCode(EMbFunctionCode.READ_INPUT_REGISTER); mb.setAddress(8); mb.setQuantity(1); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: Exception { File base = TEMP_FOLDER.newFolder(); String basePath = base.getAbsolutePath() + "/";  LocalShuffleMetaStore metaStore = new LocalShuffleMetaStore(Collections.singleton(basePath));  DataPartitionMeta meta = randomMeta(basePath); metaStore.onPartitionCreated(meta);  List<DataPartitionStatus> current = metaStore.listDataPartitions(); "<AssertPlaceHolder>"; assertEquals( new DataPartitionStatus( meta.getJobID(), new DataPartitionCoordinate(meta.getDataSetID(), meta.getDataPartitionID()), false), current.get(0));  File[] metaFiles = listMetaFiles(basePath); assertNotNull(metaFiles); assertEquals(1, metaFiles.length); }
[*] target: assertEquals(1, current.size())
[-] pred: org. junit. Assert. assertEquals ( 1, current. size ( ) )
************************************
[+] input: Exception { BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes("UTF-8")) .withCachingAllowed(true) .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = rc.put(obj); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: testConstructionDuplicate() {  // Create an ECMP switch with port 0 to 1... device0 = new EcmpSwitch(0, null, 5, new IdentityFlowletIntermediary()); device0.addConnection(topology.getPort(0, 1)); device0.addDestinationToNextSwitch(1, 1);  // ... and try to add the same destination to switch again boolean thrown = false; try { device0.addDestinationToNextSwitch(1, 1); } catch (IllegalArgumentException e) { thrown = true; } "<AssertPlaceHolder>";  }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForLcalTimeType() { String error = explicitNullableTypeChecker.checkValueForType(null, LocalTime.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("LocalTime")); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: Exception { File tempFile = File.createTempFile("textdata", "txt"); BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile))); writer.write("Hello World. This is used by IOUtilsTest."); writer.close();  InputStream inputStream = IOUtils.open(tempFile.toURI().toURL().toString()); "<AssertPlaceHolder>";  BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)); assertEquals("Hello World. This is used by IOUtilsTest.", reader.readLine()); }
[*] target: assertNotNull(inputStream)
[-] pred: org. junit. Assert. assertNotNull ( inputStream )
************************************
[+] input: shouldDoDefaultFormatForCreateStatementWhenIndentSubstatementsInParenthesesOn() { //given String inputString = "CREATE TABLE Persons (PersonID int, LastName varchar(255), FirstName varchar(255), Address varchar(255), City varchar(255));"; String expectedString = "CREATE TABLE Persons (" + lineBreak + "\tPersonID int," + lineBreak + "\tLastName varchar(255)," + lineBreak + "\tFirstName varchar(255)," + lineBreak + "\tAddress varchar(255)," + lineBreak + "\tCity varchar(255)" + lineBreak + ");";  Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_BREAK_BEFORE_CLOSE_BRACKET))).thenReturn(true);  //when String formattedString = formatter.format(inputString, configuration);  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
[+] input: testFilterColumns() { String sqlInput = "CREATE TABLE `omc_index_col_unique_test_gsi1` \n" + "( `a` int(11) NOT NULL,\n" + " `B` bigint(20) DEFAULT NULL, \n" + " `c` bigint(20) DEFAULT NULL, \n" + " PRIMARY KEY (`a`), \n" + " UNIQUE KEY `b` (`b`), \n" + " UNIQUE KEY `c` USING BTREE (`c`), \n" + " INDEX `idx_i` using btree(`B`)," + " UNIQUE KEY `b_zplr` \n" + " USING BTREE (`c`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4"; String sqlOutput = "CREATE TABLE `omc_index_col_unique_test_gsi1` (\n" + "\t`a` int(11) NOT NULL,\n" + "\t`c` bigint(20) DEFAULT NULL,\n" + "\tPRIMARY KEY (`a`),\n" + "\tUNIQUE KEY `c` USING BTREE (`c`),\n" + "\tUNIQUE KEY `b_zplr` USING BTREE (`c`)\n" + ") ENGINE = InnoDB DEFAULT CHARSET = utf8mb4";  List<SQLStatement> statementList = SQLParserUtils.createSQLStatementParser(sqlInput, DbType.mysql, SQL_PARSE_FEATURES).parseStatementList(); MySqlCreateTableStatement createStmt = (MySqlCreateTableStatement) statementList.get(0); filterColumns(createStmt, Lists.newArrayList("b")); String result = createStmt.toString(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(sqlOutput, result)
[-] pred: org. junit. Assert. assertEquals ( sqlOutput, result )
************************************
[+] input: multiplyByTwo2() { Class2 class2Mock = Mockito.mock(Class2.class); Mockito.when(class2Mock.getValue()).thenReturn(5);  Class1 class1 = new Class1(); int result = class1.multiplyByTwo2(class2Mock); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(10, result)
[-] pred: org. junit. Assert. assertEquals ( 10, result )
************************************
[+] input: testWithLocalDate() { LocalDate startDate = LocalDate.of(2020, 3, 11); LocalDate endDate = LocalDate.of(2020, 3, 13); final String uid = "5edf8af0-5347-4331-ae0f-3b4980180b37"; ICalVCardHelper helper = BEANS.get(ICalVCardHelper.class); ICalBean cal = BEANS.get(ICalBuilder.class) .withProductIdentifier("IDENTIFIER") .withComponent(BEANS.get(ICalVEventBuilder.class) .withDescription("description") .withLocation("location") .withSummary("summary") .withScheduling(startDate, endDate) .withUid(uid)) .build(); String expectedContent = "BEGIN:VCALENDAR\r\n" + "VERSION:2.0\r\n" + "PRODID;CHARSET=utf-8:IDENTIFIER\r\n" + "BEGIN:VEVENT\r\n" + "DTSTAMP;CHARSET=utf-8:" + helper.createDateTime(s_mockDate) + "\r\n" + "DESCRIPTION;CHARSET=utf-8:description\r\n" + "LOCATION;CHARSET=utf-8:location\r\n" + "SUMMARY;CHARSET=utf-8:summary\r\n" + "DTSTART;CHARSET=utf-8:20200311\r\n" + "DTEND;CHARSET=utf-8:20200314\r\n" + "UID;CHARSET=utf-8:5edf8af0-5347-4331-ae0f-3b4980180b37\r\n" + "END:VEVENT\r\n" + "END:VCALENDAR\r\n"; String createdContent = new String(cal.toBytes(StandardCharsets.UTF_8.name()), StandardCharsets.UTF_8); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedContent, createdContent)
[-] pred: org. junit. Assert. assertEquals ( expectedContent, createdContent )
************************************
[+] input: TableNotExistException { ObjectPath objectPath = new ObjectPath("default", "test"); CatalogBaseTable catalogBaseTable = rocketMQCatalog.getTable(objectPath); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(catalogBaseTable)
[-] pred: org. junit. Assert. assertNotNull ( catalogBaseTable )
************************************
[+] input: readAndWriteLock() { final SingleGroupAddressHolder addressHolder = new SingleGroupAddressHolder(null); final Random random = new Random(); final AtomicBoolean run = new AtomicBoolean(true); final AtomicBoolean error = new AtomicBoolean(false); // 有没有发生异常，例如死锁等 final CountDownLatch latch = new CountDownLatch(1); // 出现异常 跳出等待 Thread readThread = new Thread(new Runnable() { @Override public void run() { while (run.get()) { try { // 不停的读取 addressHolder.getProviderGroups(); } catch (Exception e) { error.set(true); latch.countDown(); } } } }, "readThread"); Thread writeThread = new Thread(new Runnable() { @Override public void run() { while (run.get()) { try { // 不停的变更 addressHolder.updateAllProviders(Arrays.asList( new ProviderGroup("xxx", Arrays.asList(ProviderHelper.toProviderInfo("127.0.0.1:" + random.nextInt(65535)))), new ProviderGroup(ADDRESS_DIRECT_GROUP, Arrays.asList(ProviderHelper.toProviderInfo("127.0.0.1:" + random.nextInt(65535)))))); } catch (Exception e) { error.set(true); latch.countDown(); } } } }, "writeThread"); readThread.start(); writeThread.start();  // 正常跑3秒 或者出异常 try { latch.await(3000, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { e.printStackTrace(); } finally { run.set(false); } Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(error.get())
[-] pred: org. junit. Assert. assertFalse ( error. get ( ) )
************************************
[+] input: shouldReturnEmptyCollectionOnEmptyEnvVars() { HashMap<String, String> systemEnvs = new HashMap<>(); Map<String, String> expectedEnvVars = new HashMap<>();  Map<String, String> actualEnvVars = KafkaEnvironmentVariables.parse(systemEnvs);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedEnvVars, actualEnvVars)
[-] pred: org. junit. Assert. assertEquals ( expectedEnvVars, actualEnvVars )
************************************
[+] input: crc16ToByteArray() { byte[] data = new byte[]{(byte) 0x01, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A}; byte[] expect = new byte[]{ (byte) 0xC5,(byte) 0xCD}; byte[] actual = CRCUtil.crc16ToByteArray(data); assertArrayEquals(expect, actual); data = new byte[]{(byte) 0x01, (byte) 0x03, (byte) 0x14, (byte) 0x00, (byte) 0x12, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}; expect = new byte[]{(byte) 0x1E, (byte) 0x1C}; actual = CRCUtil.crc16ToByteArray(data); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: testCopy() { JobInput input = Jobs.newInput().withRunContext(RunContexts.empty()); input.withName("name");  JobInput copy = input.copy();  assertNotSame(input.getRunContext(), copy.getRunContext()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(input.getName(), copy.getName())
[-] pred: org. junit. Assert. assertEquals ( input. getName(), copy. getName() )
************************************
[+] input: testMandatoryWithExistingTransactionAndError() { final RuntimeException exception = new RuntimeException("Expected JUnit exception"); ITransaction callingTransaction = mock(ITransaction.class);  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(callingTransaction) .withTransactionScope(TransactionScope.MANDATORY)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (Exception e) { "<AssertPlaceHolder>";  assertSame(callingTransaction, actualTransaction.getValue()); verifyNoInteractions(m_transaction); verify(callingTransaction, never()).commitPhase1(); verify(callingTransaction, never()).commitPhase2(); verify(callingTransaction, never()).rollback(); verify(callingTransaction, never()).release(); verify(callingTransaction, times(1)).addFailure(any(Exception.class)); } }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
[+] input: gracefulIncompleteParameterPairsParse() { testRequest = new Request.Builder() .url("http://www.amazon.com/request/library?isSigned& =false") .get() .build();  Map<String, List<String>> expected = new HashMap<>(); expected.put("isSigned", Collections.singletonList(null)); expected.put(" ", Collections.singletonList("false"));  underTest = new SignableRequestImpl(testRequest);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, underTest.getParameters())
[-] pred: org. junit. Assert. assertEquals ( expected, underTest. getParameters() )
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMatch2WithSubjectAndResource() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "2."); subject.put("userId", "123457"); subject.put("verify_userId", "12345[6|7]");  Map<String, String> resource = new HashMap<>(); resource.put("aal", "10"); resource.put("verify_aal", ".0"); resource.put("userId", "1111"); resource.put("verify_userId", "1111"); Context context = new Context<>(subject, resource, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
[+] input: isCallbackNoneResponseType() { boolean res = Oauth2Util.isCallback(request, new OAuthConfig() .setResponseType(Oauth2ResponseType.NONE)); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(res)
[-] pred: org. junit. Assert. assertFalse ( res )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.getConsumerRunningInfo(anyString(), anyString(), anyBoolean())).thenReturn(new ConsumerRunningInfo()); } ConsumerRunningInfo consumerRunningInfo = mqAdminExtImpl.getConsumerRunningInfo("group_test", "", true); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(consumerRunningInfo)
[-] pred: org. junit. Assert. assertNotNull ( consumerRunningInfo )
************************************
[+] input: testGetOrCreateScoutSessionWithCustomId() { HttpServerRunContextProducer producer = new HttpServerRunContextProducer(); assertTrue(producer.hasSessionSupport());  HttpServletRequest req = createRequestMock(null); HttpServletResponse resp = mock(HttpServletResponse.class);  ServerRunContext serverRunContextForSessionStart = (ServerRunContext) producer.getInnerRunContextProducer().produce(req, resp); String sessionId = "testid"; IServerSession session = producer.getOrCreateScoutSession(req, serverRunContextForSessionStart, sessionId); try { "<AssertPlaceHolder>"; assertEquals(sessionId, session.getId()); } finally { session.stop(); } }
[*] target: assertNotNull(session)
[-] pred: org. junit. Assert. assertNotNull ( session )
************************************
[+] input: FilterException { Message message1 = new Message(testKeyProto1.toByteArray(), testMessageProto1.toByteArray(), "topic1", 0, 100); Message message2 = new Message(testKeyProto2.toByteArray(), testMessageProto2.toByteArray(), "topic1", 0, 101); Map<String, String> filterConfigs = new HashMap<>(); filterConfigs.put("FILTER_DATA_SOURCE", "message"); filterConfigs.put("FILTER_ESB_MESSAGE_FORMAT", "PROTOBUF"); filterConfigs.put("FILTER_JSON_SCHEMA", ""); filterConfigs.put("FILTER_SCHEMA_PROTO_CLASS", TestMessage.class.getName()); filterConfig = ConfigFactory.create(FilterConfig.class, filterConfigs); jsonFilter = new JsonFilter(stencilClient, filterConfig, firehoseInstrumentation); FilteredMessages expectedMessages = new FilteredMessages(); expectedMessages.addToValidMessages(message1); expectedMessages.addToValidMessages(message2); List<Message> inputMessages = Arrays.asList(message1, message2); FilteredMessages filteredMessages = jsonFilter.filter(inputMessages); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMessages, filteredMessages)
[-] pred: org. junit. Assert. assertEquals ( expectedMessages, filteredMessages )
************************************
[+] input: shouldAddLineBreakIfScriptStartsWithComment() { //given String expectedString = lineBreak + "-- SELECT * FROM mytable;"; String inputString = "-- SELECT * FROM mytable;";  //when String formattedString = formatter.format(inputString, configuration);  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
[+] input: FilterException { TestBookingLogMessage bookingLogMessage = TestBookingLogMessage.newBuilder().setCustomerId("customerId").build(); TestBookingLogKey bookingLogKey = TestBookingLogKey.newBuilder().build(); Message message = new Message(bookingLogKey.toByteArray(), bookingLogMessage.toByteArray(), "topic1", 0, 100); HashMap<String, String> filterConfigs = new HashMap<>(); filterConfigs.put("FILTER_DATA_SOURCE", "message"); filterConfigs.put("FILTER_JSON_SCHEMA", "{"properties":{"customer_dynamic_surge_enabled":{"const":"true"}}}"); filterConfigs.put("FILTER_SCHEMA_PROTO_CLASS", TestBookingLogMessage.class.getName()); filterConfigs.put("FILTER_ESB_MESSAGE_FORMAT", "PROTOBUF"); FilterConfig bookingConsumerConfig = ConfigFactory.create(FilterConfig.class, filterConfigs); JsonFilter bookingFilter = new JsonFilter(stencilClient, bookingConsumerConfig, firehoseInstrumentation); FilteredMessages expectedMessages = new FilteredMessages(); expectedMessages.addToValidMessages(message); FilteredMessages filteredMessages = bookingFilter.filter(Collections.singletonList(message)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMessages, filteredMessages)
[-] pred: org. junit. Assert. assertEquals ( expectedMessages, filteredMessages )
************************************
[+] input: IOException { String storeFileType = "JKS"; when(jsonReader.nextString()).thenReturn(storeFileType); DaggerSSLKeyStoreFileTypeAdaptor daggerSSLKeyStoreFileTypeAdaptor = new DaggerSSLKeyStoreFileTypeAdaptor(); String keystoreFileType = daggerSSLKeyStoreFileTypeAdaptor.read(jsonReader); "<AssertPlaceHolder>"; }
[*] target: assertEquals(storeFileType, keystoreFileType)
[-] pred: org. junit. Assert. assertEquals ( storeFileType, keystoreFileType )
************************************
[+] input: shouldFetchDefaultValueIfFieldNotInitializedWithAValueInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("customer_dynamic_surge_enabled"); /* The field is added to the schema but not assigned a value */ GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BOOLEAN).named("customer_dynamic_surge_enabled") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); BooleanHandler booleanHandler = new BooleanHandler(fieldDescriptor);  Object actualValue = booleanHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, actualValue)
[-] pred: org. junit. Assert. assertEquals ( false, actualValue )
************************************
[+] input: mp4StcoBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x10, 0x73, 0x74, 0x63, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }; Mp4StcoBox box = new Mp4StcoBox(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: testGetLastEntryEmpty() { FileEntrySequence sequence = new FileEntrySequence(entriesFile, entryIndexFile, 1); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(sequence.getLastEntry())
[-] pred: org. junit. Assert. assertNull ( sequence. getLastEntry() )
************************************
[+] input: shouldFetchDefaultValueIfFieldNotPresentInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("customer_dynamic_surge_enabled"); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BOOLEAN).named("some-other-field") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); BooleanHandler booleanHandler = new BooleanHandler(fieldDescriptor);  Object actualValue = booleanHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(false, actualValue)
[-] pred: org. junit. Assert. assertEquals ( false, actualValue )
************************************
[+] input: shouldNotBeEmptyWhenHttpConfigIsPresent() { ExternalSourceConfig externalSourceConfig = new ExternalSourceConfig(http, null, null, null);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(externalSourceConfig.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( externalSourceConfig. isEmpty() )
************************************
[+] input: rtspInterleavedTransportToString() { String expect = "RTP/AVP/TCP;unicast;interleaved=0-1"; RtspInterleavedTransport transport = new RtspInterleavedTransport(); transport.setProtocol("RTP/AVP/TCP"); transport.setCastMode("unicast"); transport.setInterleaved1(0); transport.setInterleaved2(1); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, transport.toString())
[-] pred: org. junit. Assert. assertEquals ( expect, transport. toString ( ) )
************************************
[+] input: readRecombination1() { int[] data = new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}; int[] expect = new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}; List<Integer> src = Arrays.stream(data).boxed().collect(Collectors.toList()); List<S7ComGroup> recombination = S7SequentialGroupAlg.readRecombination(src, 240 - 14, 5, 12); int[] actual = recombination.stream().flatMap(x -> x.getItems().stream()) .mapToInt(S7ComItem::getRipeSize).toArray(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: convertMultiPolygon_OnePolygonHaveHoles_ShouldConvert() { String wkt = "MULTIPOLYGON (((30 20, 45 40, 10 40, 30 20),(20 30, 35 35, 30 20, 20 30)),((15 5, 40 10," + " 10 20, 5 10, 15 5)))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiPolygon", "coordinates":" + " [[[[30,20],[45,40],[10,40],[30,20]],[[20,30],[35,35],[30,20],[20,30]]],[[[15,5],[40,10],[10,20],[5,10],[15,5]]]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: mp4HdlrBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x2D, 0x68, 0x64, 0x6C, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x69, 0x64, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x69, 0x64, 0x65, 0x6F, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00, }; Mp4HdlrBox box = new Mp4HdlrBox(this.trackInfo); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: shouldNotProcessIfParameterPlacementDisabled() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.DISABLED);  parameterizedHeaderRequest = new ParameterizedHeaderRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedHeaderRequest.canProcess();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
[+] input: testIterableEnumeration() { final int size = 10; Enumeration<Integer> e = new Enumeration<Integer>() { int ctr = 0;  @Override public Integer nextElement() { return (ctr++); }  @Override public boolean hasMoreElements() { return (ctr < size); } };  List<Integer> found = new ArrayList<Integer>(); for (Integer i : CollectionUtil.iterable(e.asIterator())) found.add(i); "<AssertPlaceHolder>"; }
[*] target: assertEquals(size, found.size())
[-] pred: org. junit. Assert. assertEquals ( size, found. size ( ) )
************************************
[+] input: shouldNotReturnAnyError() { NoError noError = new NoError(); "<AssertPlaceHolder>"; }
[*] target: assertNull(noError.getCurrentException())
[-] pred: org. junit. Assert. assertNull ( noError. getCurrentException() )
************************************
[+] input: rtspSetupRequestTest() {  String expect = "SETUP rtsp://10.3.8.202:554/trackID=1 RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Transport: RTP/AVP;unicast;client_port=57844-57845\r\n" + "\r\n";  URI uri = URI.create("rtsp://10.3.8.202:554/trackID=1"); RtspTransport transport = RtspTransport.fromString("RTP/AVP;unicast;client_port=57844-57845"); RtspSetupRequest request = new RtspSetupRequest(uri, transport, this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: testFailureDueToInconsistency() { DBResult openSearchResult = new DBResult( "OpenSearch", asList(new Type("firstname", "text")), asList(new Row(asList("John")))); DBResult otherDbResult = new DBResult( "Other DB", asList(new Type("firstname", "text")), asList(new Row(asList("JOHN")))); when(openSearchConnection.select(anyString())).thenReturn(openSearchResult); when(otherDbConnection.select(anyString())).thenReturn(otherDbResult);  TestReport expected = new TestReport(); expected.addTestCase( new FailedTestCase( 1, "SELECT * FROM accounts", asList(openSearchResult, otherDbResult), "")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.getKVListByNamespace(anyString())).thenReturn(new KVTable()); } KVTable kvTable = mqAdminExtImpl.getKVListByNamespace("namespace"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(kvTable)
[-] pred: org. junit. Assert. assertNotNull ( kvTable )
************************************
[+] input: shouldTransformEpochInMillisFromSimpleGroup() { long sampleTimeInMillis = Instant.now().toEpochMilli(); Instant instant = Instant.ofEpochMilli(sampleTimeInMillis); Row expectedRow = Row.of(instant.getEpochSecond(), instant.getNano());  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("event_timestamp") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); simpleGroup.add("event_timestamp", sampleTimeInMillis);  TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor); Row actualRow = (Row) timestampHandler.transformFromParquet(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
[+] input: testContainsNodeSingleNode() { ITree tree = mock(ITree.class); ITreeNode nodeA = mockNode("a"); TreeEvent event = new TreeEvent(tree, TreeEvent.TYPE_NODE_ACTION, nodeA); "<AssertPlaceHolder>"; }
[*] target: assertTrue(event.containsNode(nodeA))
[-] pred: org. junit. Assert. assertTrue ( event. containsNode ( nodeA ) )
************************************
[+] input: shouldBuildBigQuerySink() { StencilClientOrchestrator stencilClientOrchestrator = Mockito.mock(StencilClientOrchestrator.class); BigQuerySinkBuilder builder = BigQuerySinkBuilder.create(); builder.setColumnNames(new String[]{"test", "some_column"}); builder.setConfiguration(new Configuration(ParameterTool.fromMap(new HashMap<String, String>() {{ put("SINK_CONNECTOR_SCHEMA_PROTO_MESSAGE_CLASS", "test"); }}))); builder.setStencilClientOrchestrator(stencilClientOrchestrator); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(builder.build())
[-] pred: org. junit. Assert. assertNotNull ( builder. build() )
************************************
[+] input: shouldReturnUpdatedJsonStringForNewNestedKeyValueInNestedPath() { JsonUpdate jsonUpdate = new JsonUpdate(); String jsonEvent = "{"k1":null,"k2":"v2","k3":{"nk1":"nv1","nk2":"nv2"}}"; String expectedJsonEvent = "{"k1":null,"k2":"v2","k3":{"nk1":{"key1":"value1","key2":"value2"},"nk2":"nv2"}}"; String jPath = "$.k3.nk1"; Map<String, String> updateValue = new HashMap<String, String>() {{ put("key1", "value1"); put("key2", "value2"); }}; String actual = jsonUpdate.eval(jsonEvent, jPath, updateValue); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
[+] input: testGetMessageStatusConstructor() { ProcessingStatus status = new ProcessingStatus("title", "body", IStatus.ERROR); ProcessingException processingException = new ProcessingException(status); "<AssertPlaceHolder>"; assertEquals("title: body [severity=ERROR]", processingException.getMessage()); assertEquals("title: body", processingException.getDisplayMessage()); }
[*] target: assertEquals(status, processingException.getStatus())
[-] pred: org. junit. Assert. assertEquals ( status, processingException. getStatus() )
************************************
[+] input: convertLineString_NoRedundantSpaces_ShouldConvert() { String wkt = "LINESTRING (30 10, 10 30, 40 40)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"LineString", "coordinates": [[30,10],[10,30],[40,40]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: testToString() { ResultResponse<String> response = new ResultResponse<>(2, "msg-2", "result-2");  TestResponseForString superResponse = new TestResponseForString(); superResponse.setCode(response.getCode()); superResponse.setMsg(response.getMsg());  String expectedStr = "ResultResponse(" + "super=" + superResponse + ", result=result-2)";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStr, response.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedStr, response. toString ( ) )
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); properties.put(DataSourceFactory.JDBC_INITIAL_POOL_SIZE, "5"); properties.put(DataSourceFactory.JDBC_MAX_POOL_SIZE, "10"); DataSource dataSource = dataSourceFactory.createDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof PoolingDataSource); PoolingDataSource poolingDataSource = (PoolingDataSource) dataSource; Assert.assertEquals("db", poolingDataSource.getDatabaseName()); Assert.assertEquals(5, poolingDataSource.getInitialConnections()); Assert.assertEquals(10, poolingDataSource.getMaxConnections()); }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
[+] input: canDeserializeSourceAsObject() { String json = "{"query":{"match_all":{}},"_source":{"includes":["_id"]},"size":1}";  SearchRequest searchRequest = fromJson(json, SearchRequest._DESERIALIZER);  SourceConfig _source = searchRequest.source(); assertNotNull(_source); assertTrue(_source.isFilter());  SourceFilter filter = _source.filter(); assertNotNull(filter);  List<String> includes = filter.includes(); "<AssertPlaceHolder>"; assertEquals("_id", includes.get(0));  assertTrue(filter.excludes().isEmpty()); }
[*] target: assertEquals(1, includes.size())
[-] pred: org. junit. Assert. assertEquals ( 1, includes. size ( ) )
************************************
[+] input: convertLineString_NegativeCoordinates_ShouldConvert() { String wkt = "LINESTRING (-30 10, 10 30, 40 40)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"LineString", "coordinates": [[-30,10],[10,30],[40,40]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: testAddListener() { ExtensionLoader<Filter> extensionLoader = ExtensionLoaderFactory.getExtensionLoader(Filter.class); extensionLoader.loadExtension(DynamicFilter.class); ConcurrentMap<String, ExtensionClass<Filter>> all = extensionLoader.all; String alias = "dynamic0"; Assert.assertTrue(all.containsKey(alias));   List<String> filters = new ArrayList<>(); extensionLoader = ExtensionLoaderFactory.getExtensionLoader(Filter.class); extensionLoader.addListener( new  ExtensionLoaderListener<Filter>() { @Override public void onLoad(ExtensionClass<Filter> extensionClass) { filters.add(extensionClass.getAlias()); } });  Assert."<AssertPlaceHolder>";  }
[*] target: assertTrue(filters.contains(alias))
[-] pred: org. junit. Assert. assertTrue ( filters. contains ( alias ) )
************************************
[+] input: Exception { TestAbstractDAGVisitor visitor = new TestAbstractDAGVisitor(); visitor.putEdge(new TestAbstractDAGNode("1", "1"), new TestAbstractDAGNode("2", "2")); visitor.putEdge(new TestAbstractDAGNode("2", "2"), new TestAbstractDAGNode("3", "3")); visitor.putEdge(new TestAbstractDAGNode("4", "4"), new TestAbstractDAGNode("5", "5")); visitor.putEdge(new TestAbstractDAGNode("5", "5"), new TestAbstractDAGNode("4", "4")); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(visitor.hasCircle())
[-] pred: org. junit. Assert. assertTrue ( visitor. hasCircle ( ) )
************************************
[+] input: IOException { // sample app config String configFile = "./test/data/sample/tkltest_ui_config.toml"; TomlParseResult parsedConfig = Toml.parse(Paths.get(configFile)); String appUrl = parsedConfig.getString("general.app_url"); String testDir = parsedConfig.getString("general.test_directory"); TomlTable generateOptions = parsedConfig.getTable("generate");  // call method for creating crawljax config CrawljaxConfiguration crawljaxConfig = CrawljaxRunner.createCrawljaxConfiguration(appUrl, testDir, generateOptions);  // assert on created config Assert."<AssertPlaceHolder>"; Assert.assertEquals(appUrl, crawljaxConfig.getUrl().toString()); Assert.assertTrue(crawljaxConfig.getOutputDir().toString().endsWith( testDir+File.separator+"localhost"+File.separator+"crawl0")); Assert.assertEquals(0, crawljaxConfig.getMaximumStates()); Assert.assertEquals(2, crawljaxConfig.getCrawlRules().getMaxRepeatExploredActions()); Assert.assertEquals(2, crawljaxConfig.getMaximumDepth()); CrawlRules crawlRules = crawljaxConfig.getCrawlRules(); Assert.assertEquals(9, crawlRules.getPreCrawlConfig().getIncludedElements().size()); Assert.assertEquals(6, crawlRules.getPreCrawlConfig().getExcludedElements().size()); Assert.assertEquals(500, crawlRules.getWaitAfterEvent()); Assert.assertEquals(500, crawlRules.getWaitAfterReloadUrl());  // pre-crawl plugin assertions ImmutableList<Plugin> plugins = crawljaxConfig.getPlugins(); Assert.assertEquals(4, plugins.size()); Assert.assertTrue(plugins.stream().anyMatch(plugin -> plugin instanceof TackleTestOnUrlFirstLoadPlugin)); TackleTestOnUrlFirstLoadPlugin precrawlPlugin = (TackleTestOnUrlFirstLoadPlugin) plugins .stream() .filter(plugin -> plugin instanceof TackleTestOnUrlFirstLoadPlugin) .findFirst() .get(); // assert on submit_totp action TomlTable[] precrawlActions = precrawlPlugin.getPreCrawlActions(); Assert.assertEquals(6, precrawlActions.length); Set<String> expKeySet = Stream .of("action_type", "max_attempts", "optional", "totp_secret_env_var", "enter", "click") .collect(Collectors.toSet()); Assert.assertEquals(expKeySet, precrawlActions[5].keySet()); Assert.assertEquals("submit_totp", precrawlActions[5].getString("action_type")); Assert.assertEquals("TKLTESTUI_TOTP_SECRET", precrawlActions[5].getString("totp_secret_env_var")); Assert.assertEquals(true, precrawlActions[5].getBoolean("optional")); Assert.assertEquals(2, precrawlActions[5].getLong("max_attempts").intValue()); }
[*] target: assertNotNull(crawljaxConfig)
[-] pred: org. junit. Assert. assertNotNull ( crawljaxConfig )
************************************
[+] input: testGetChildElementsEmptyDocument() { Element root = XmlUtility.getXmlDocument(EMPTY_XML).getDocumentElement(); List<Element> children = XmlUtility.getChildElements(root, "element"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, children.size())
[-] pred: org. junit. Assert. assertEquals ( 0, children. size ( ) )
************************************
[+] input: rtspTeardownRequestTest() { String expect = "TEARDOWN rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspTeardownRequest request = new RtspTeardownRequest(uri, "1273222592", this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: listLocalFilesTest() { List<CdcFile> localFiles = fileSystem.listLocalFiles(); List<String> actualFileList = new ArrayList<>(); for (CdcFile file : localFiles) { actualFileList.add(file.getName()); } List<String> expectFileList = new ArrayList<>(); int n = 15; for (int i = 1; i < n; i++) { expectFileList.add(binlogFilePrefix + String.format("%06d", i)); } boolean expectTrue = ListUtils.isEqualList(expectFileList, actualFileList); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(expectTrue)
[-] pred: org. junit. Assert. assertTrue ( expectTrue )
************************************
[+] input: testGenerate() { String generatedMobileNum = ChineseMobileNumberGenerator.getInstance() .generate(); "<AssertPlaceHolder>"; System.err.println(generatedMobileNum); }
[*] target: assertNotNull(generatedMobileNum)
[-] pred: org. junit. Assert. assertNotNull ( generatedMobileNum )
************************************
[+] input: testApplyFindsRootCause() { /** * Lots of frameworks wrap exceptions with runtime exceptions. The root * cause is always more important. */ SeverityComparator a = new SeverityComparator(); final Throwable root = new Exception(); Throwable next = root; for (int i = 0; i < 7; i++) { next = new RuntimeException(next); } Throwable reduced = a.apply(next); "<AssertPlaceHolder>"; }
[*] target: assertEquals(root, reduced)
[-] pred: org. junit. Assert. assertEquals ( root, reduced )
************************************
[+] input: testFormEventResetComplete() { final Boolean[] called = {false}; final AbstractForm form = new TestForm(false); form.addFormListener(e -> { if (e.getType() == FormEvent.TYPE_RESET_COMPLETE) { called[0] = true; } }); form.start(); assertFalse(called[0]); form.doReset(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(called[0])
[-] pred: org. junit. Assert. assertTrue ( called[0] )
************************************
[+] input: Exception { byte[] fullFileContent = createFileContent(1024 * 1024 + 987654); RandomAccessFile raf = createRaf(fullFileContent); DataSource rafDataSource = new FileChannelDataSource(raf.getChannel());  ByteArrayDataSink dataSink = new ByteArrayDataSink();  int offset = 23456; int bytesToFeed = 1024 * 1024 + 12345; rafDataSource.feed(offset, bytesToFeed, dataSink);  byte[] expectedBytes = Arrays.copyOfRange(fullFileContent, offset, offset + bytesToFeed);  byte[] resultBytes = getDataSinkBytes(dataSink);  "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedBytes, resultBytes)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedBytes, resultBytes )
************************************
[+] input: testConstructionNonExisting() {  // Create switch with 1->0, 1->2, and 1->3 device1 = new EcmpSwitch(1, null, 5, new IdentityFlowletIntermediary()); device1.addConnection(topology.getPort(1, 0)); device1.addConnection(topology.getPort(1, 2)); device1.addConnection(topology.getPort(1, 3)); device1.addDestinationToNextSwitch(0, 0);  // ... but deny that you can travel to 2 via a non-existing port boolean thrown = false; try { device1.addDestinationToNextSwitch(2, 4); // there is no port to 4 } catch (IllegalArgumentException e) { thrown = true; } "<AssertPlaceHolder>"; }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
[+] input: toByteArray() { Header header = new Header(); header.setProtocolId((byte) 0x32); header.setMessageType(EMessageType.JOB); header.setReserved(0x0000); header.setPduReference(0x0000); header.setParameterLength(0x0000); header.setDataLength(0x0002); //        header.setErrorClass(EErrorClass.NO_ERROR); //        header.setErrorCode((byte) 0x00); byte[] actual = header.toByteArray(); //        byte[] expect = new byte[]{(byte) 0x32, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00}; byte[] expect = new byte[]{(byte) 0x32, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMatch2() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "2."); subject.put("userId", "123456"); subject.put("verify_userId", "12345[6|7]"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
[+] input: shouldFetchDefaultValueIfFieldNotPresentInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("cash_amount");  GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(DOUBLE).named("some-other-field") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); DoubleHandler doubleHandler = new DoubleHandler(fieldDescriptor);  Object actualValue = doubleHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0.0D, actualValue)
[-] pred: org. junit. Assert. assertEquals ( 0.0D, actualValue )
************************************
[+] input: InterruptedException { DbTable table = DataBase.getInstance().getDbTableByName("t_person"); ExecutorService threadPool = Executors.newCachedThreadPool(); int threadNum = 2; ArrayList<Future<Page>> futureResult = new ArrayList<>(); HeapPageID heapPageID = new HeapPageID(table.getTableId(), 0);  Transaction transaction = new Transaction(Lock.LockType.SLock); Future<Page> pageFuture = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture);  transaction.setLockType(Lock.LockType.XLock); Future<Page> pageFuture2 = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture2);  Thread.sleep(100); // 锁应升级为x锁,新的事务获取应获取不到 Transaction transaction3 = new Transaction(Lock.LockType.SLock); Future<Page> pageFuture3 = threadPool.submit(() -> { Connection.passingTransaction(transaction3); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture3);  // 1获取锁成功 Page page = futureResult.get(0).get(); "<AssertPlaceHolder>";  // 2获取锁成功 Page page2 = futureResult.get(1).get(); assertNotNull(page2);  // 线程3获取锁失败 try { futureResult.get(2).get(1, TimeUnit.SECONDS); fail("expected timeout"); } catch (Exception ignored) { }   // 终止所有线程 threadPool.shutdownNow(); }
[*] target: assertNotNull(page)
[-] pred: org. junit. Assert. assertNotNull ( page )
************************************
[+] input: testAsciiConvertionWithoutSpecialChar() { // Arrange String emailAddress = "someone@example.com";  // Act String convertedAddress = BEANS.get(MailIDNConverter.class).toASCII(emailAddress);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(emailAddress, convertedAddress)
[-] pred: org. junit. Assert. assertEquals ( emailAddress, convertedAddress )
************************************
[+] input: test_DE() { StreetNameGenerator generator = new StreetNameGenerator("DE"); generator.init(context); for (int i = 0; i < 10; i++) { String product = generator.generate(); "<AssertPlaceHolder>"; } generator.close(); }
[*] target: assertNotNull(product)
[-] pred: org. junit. Assert. assertNotNull ( product )
************************************
[+] input: testWriteDate() { JdkValueWriter jdkValueWriter = new JdkValueWriter(); Date date = new Date(1420114230123l); Generator generator = Mockito.mock(Generator.class); ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class); jdkValueWriter.doWrite(date, generator, ""); Mockito.verify(generator).writeString(argument.capture()); String expected = date.toInstant().atZone(ZoneId.systemDefault()).toOffsetDateTime().toString(); String actual = argument.getValue(); "<AssertPlaceHolder>"; OffsetDateTime parsedDate = DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(actual, OffsetDateTime::from); assertEquals(123000000, parsedDate.getNano()); //Nothing beyond milliseconds }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: writeRecombination1() { int[] data = new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}; int[] expect = new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}; List<Integer> src = Arrays.stream(data).boxed().collect(Collectors.toList()); List<S7ComGroup> recombination = S7SequentialGroupAlg.writeRecombination(src, 228, 17); int[] actual = recombination.stream().flatMap(x -> x.getItems().stream()) .mapToInt(S7ComItem::getRipeSize).toArray(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: testClear() { ILogger logger = NetworkTaskLog.getLogger(TestRegistry.getContext(), getNetworkTask()); assertNotNull(logger); NetworkTaskLog.clear(); ILogger logger2 = NetworkTaskLog.getLogger(TestRegistry.getContext(), getNetworkTask()); "<AssertPlaceHolder>"; assertNotSame(logger, logger2); }
[*] target: assertNotNull(logger2)
[-] pred: org. junit. Assert. assertNotNull ( logger2 )
************************************
[+] input: testNumericParsingNaN() { String value = "NaN"; byte[] byteResult = new byte[8]; ByteConverter.int2(byteResult, 4, (short) 0xC000);  byte[] stringResult = {'N', 'a', 'N'};  NumericParser parser = new NumericParser(value);  validate(parser, byteResult, stringResult, stringResult); "<AssertPlaceHolder>"; validateCreateText(stringResult, Oid.NUMERIC, value); }
[*] target: assertEquals(value, parser.getItem())
[-] pred: org. junit. Assert. assertEquals ( value, parser. getItem() )
************************************
[+] input: testSubtractDays() { TimeZone.setDefault(TimeZone.getTimeZone("GMT+1")); assertEquals("Test only works without day Daylight Saving Time", 0, TimeZone.getDefault().getDSTSavings());  for (int sec = 0; sec < SECONDS_IN_DAY; sec++) { double d = -sec / SECONDS_IN_DAY; Calendar cal = getCalendar(1, 0);  String result = stringOf(DateUtility.addDays(cal.getTime(), d));  cal.set(Calendar.SECOND, -sec);  String expected = stringOf(cal.getTime()); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldReturnKafkaEnvVarsPositive() { Configuration configuration = new Configuration(); configuration.setString("PATH", "/usr/local/bin"); configuration.setString("SHELL", "/usr/local/bin/zsh"); configuration.setString("source_kafka_config_fetch_min_bytes", "1"); configuration.setString("source_kafka_config_ssl_keystore_location", "/home/user/.ssh/keystore"); configuration.setString("source_kafka_config_enable_auto_commit", "false");  Properties expectedEnvVars = new Properties() {{ put("fetch.min.bytes", "1"); put("ssl.keystore.location", "/home/user/.ssh/keystore"); put("enable.auto.commit", "false"); }};  Properties actualEnvVars = KafkaEnvironmentVariables.parse(configuration);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedEnvVars, actualEnvVars)
[-] pred: org. junit. Assert. assertEquals ( expectedEnvVars, actualEnvVars )
************************************
[+] input: shouldFetchParsedValueForFieldOfTypeBoolInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("customer_dynamic_surge_enabled"); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BOOLEAN).named("customer_dynamic_surge_enabled") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); simpleGroup.add("customer_dynamic_surge_enabled", true);  BooleanHandler booleanHandler = new BooleanHandler(fieldDescriptor); Object actualValue = booleanHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(true, actualValue)
[-] pred: org. junit. Assert. assertEquals ( true, actualValue )
************************************
[+] input: shouldReturnKafkaEnvVarsNegative() { HashMap<String, String> systemEnvs = new HashMap<String, String>() {{ put("PATH", "/usr/local/bin"); put("SHELL", "/usr/local/bin/zsh"); }};  Map<String, String> expectedEnvVars = new HashMap<>();  Map<String, String> actualEnvVars = KafkaEnvironmentVariables.parse(systemEnvs);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedEnvVars, actualEnvVars)
[-] pred: org. junit. Assert. assertEquals ( expectedEnvVars, actualEnvVars )
************************************
[+] input: mp4SttsBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x10, 0x73, 0x74, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }; Mp4SttsBox box = new Mp4SttsBox(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: IOException { PipedOutputStream pipedOutputStream = new PipedOutputStream(); BinaryCopyParser parser = new BinaryCopyParser(new PipedInputStream(pipedOutputStream, 256));  DataOutputStream data = new DataOutputStream(pipedOutputStream); data.write(COPY_BINARY_HEADER); data.writeInt(0); data.writeInt(0);  // Write trailer. data.writeShort(-1);  Iterator<CopyRecord> iterator = parser.iterator(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext() )
************************************
[+] input: testType() { String s = "test"; String res = Assertions.assertType(s, String.class); "<AssertPlaceHolder>"; }
[*] target: assertEquals(s, res)
[-] pred: org. junit. Assert. assertEquals ( s, res )
************************************
[+] input: shouldNotBeEmptyWhenAllConfigsArePresent() { ExternalSourceConfig externalSourceConfig = new ExternalSourceConfig(http, es, pg, grpc);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(externalSourceConfig.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( externalSourceConfig. isEmpty() )
************************************
[+] input: shouldAddLineBreakBeforeBraceBySpecialSetting() { //given String expectedString = getExpectedStringWithLineBreakBeforeBraces(); String inputString = "SELECT (SELECT thecol FROM thetable) FROM dual";  Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_LF_BEFORE_COMMA))).thenReturn(false); Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_BREAK_BEFORE_CLOSE_BRACKET))).thenReturn(true);  //when String formattedString = formatter.format(inputString, configuration);  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
[+] input: testGenerate() { String generatedAddress = ChineseAddressGenerator.getInstance() .generate(); System.err.println(generatedAddress); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(generatedAddress)
[-] pred: org. junit. Assert. assertNotNull ( generatedAddress )
************************************
[+] input: testCleanupWithEmptyList() { List<IMenu> cleanList = MenuUtility.visibleNormalizedMenus(Collections.emptyList()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cleanList.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cleanList. isEmpty ( ) )
************************************
[+] input: should_ReturnValidationError_When_EmptyAsEndpointNameGiven() { String validationResult = checker.check("");  "<AssertPlaceHolder>"; assertTrue(validationResult.contains("blank")); }
[*] target: assertNotNull(validationResult)
[-] pred: org. junit. Assert. assertNotNull ( validationResult )
************************************
[+] input: IOException { // [stripe 0] // Stripe: offset: 3 data: 6333874 rows: 240000 tail: 111 index: 4025 final int stripeId = 0; final int columnId = 2; final int[] rowGroupIds = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22};  final long rowsInStripe = orcTail.getStripes().get(stripeId).getNumberOfRows(); int groupsInStripe = (int) ((rowsInStripe + indexStride - 1) / indexStride);  BlockCacheManager<Block> blockCacheManager = prepareCache(stripeId, new int[] {columnId}, rowGroupIds);  CacheReader<Block> cacheReader = new CacheReaderImpl(stripeId, columnId, groupsInStripe);  if (!cacheReader.isInitialized()) { // Check the block-cache-manager what row-group of this column have been cached. Map<Integer, SeekableIterator<Block>> caches = blockCacheManager.getCachedRowGroups( FILE_PATH, stripeId, columnId, fromRowGroupIds(stripeId, rowGroupIds) ); cacheReader.initialize(caches); }  // Check cached row group bitmap. boolean[] bitmap = cacheReader.cachedRowGroupBitmap(); Assert.assertTrue( Arrays.equals(fromRowGroupIds(stripeId, rowGroupIds), bitmap));  // collect block locations in this group. List<BlockLocation> locationList = new ArrayList<>(); for (int groupId : rowGroupIds) { final int rowCountInGroup = getRowCount(orcTail.getStripes().get(stripeId), groupId); for (int startPosition = 0; startPosition < rowCountInGroup; startPosition += DEFAULT_CHUNK_LIMIT) { int positionCount = Math.min(DEFAULT_CHUNK_LIMIT, rowCountInGroup - startPosition); locationList.add(new BlockLocation(groupId, startPosition, positionCount)); } }  // Check block existence for (BlockLocation location : locationList) { Block cached = cacheReader.getCache(location.rowGroupId, location.startPosition); Assert."<AssertPlaceHolder>"; Assert.assertEquals(location.positionCount, cached.getPositionCount()); } }
[*] target: assertNotNull(cached)
[-] pred: org. junit. Assert. assertNotNull ( cached )
************************************
[+] input: testToString() { String expectedStr = "HttpClientConfig(" + "protocol=https" + ", socketTimeoutMillis=5000" + ", maxIdleTimeMillis=43000" + ", connectionRequestTimeoutMillis=1000" + ", connectionKeepAliveMillis=43000" + ", connectionTimeoutMillis=15000" + ", responseTimeoutMillis=20000" + ", maxConnectionCount=200" + ", maxConnectionCountPerRoute=20" + ", maxNoResponseRetryCount=1" + ", proxyScheme=null" + ", proxyHost=null" + ", proxyPort=-1)";  HttpClientConfig config = HttpClientConfig.defaultConfig();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStr, config.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedStr, config. toString ( ) )
************************************
[+] input: testParse() { GalleryPageUrlParser.Result result = GalleryPageUrlParser.parse(url, strict); if (isNull) { "<AssertPlaceHolder>"; } else { assertEquals(gid, result.gid); assertEquals(pToken, result.pToken); assertEquals(page, result.page); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: test4() { try (GetSetMethodHandler getSetMethodHandler = new GetSetMethodHandler(configureWrapper)) { BaseWriteDbData4GetSetMethod getSetMethod1 = getSetMethodHandler.queryGetSetMethodByClassMethod(true, FRADtoA.class.getName(), "getLongA1"); Assert.assertNotNull(getSetMethod1); printObjectContent(getSetMethod1, "queryGetSetMethodByMethodName-get");  BaseWriteDbData4GetSetMethod getSetMethod2 = getSetMethodHandler.queryGetSetMethodByFieldName(true, FRADtoA.class.getName(), "strA1"); Assert."<AssertPlaceHolder>"; printObjectContent(getSetMethod2, "queryGetSetMethodByFieldName-get"); } }
[*] target: assertNotNull(getSetMethod2)
[-] pred: org. junit. Assert. assertNotNull ( getSetMethod2 )
************************************
[+] input: testResourceName() { String serviceName = "foo"; String expected = "foo"; String actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo"; expected = "Foo"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo_Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); assertEquals(expected, actual);  serviceName = "Foo-Bar"; expected = "FooBar"; actual = ApplicationServicesMacro.ecrResourceName(serviceName); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { User result = userServiceImpl.selectUserByToken("token"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(null, result)
[-] pred: org. junit. Assert. assertEquals ( null, result )
************************************
[+] input: testGenerateOdd() { String generatedName = ChineseNameGenerator.getInstance().generateOdd(); "<AssertPlaceHolder>"; System.err.println(generatedName); }
[*] target: assertNotNull(generatedName)
[-] pred: org. junit. Assert. assertNotNull ( generatedName )
************************************
[+] input: testEncryptDecrypt() { char[] password = "insecure".toCharArray(); int keyLength = 128;  Crypter crypter = BEANS.get(Crypter.class).init(password, keyLength); String clearTextData = "lorem ipsum dolor"; String encryptedData = crypter.encrypt(clearTextData); String decryptedData = crypter.decrypt(encryptedData); "<AssertPlaceHolder>"; }
[*] target: assertEquals(clearTextData, decryptedData)
[-] pred: org. junit. Assert. assertEquals ( clearTextData, decryptedData )
************************************
[+] input: shouldDeleteNestedValueAndReturnAsJsonString() { JsonDelete jsonDelete = new JsonDelete(); String jsonEvent = "{"k1":"v1","k2":{"key1":"value1","key2":"value2","key3":"value3"}}"; String expectedJsonEvent = "{"k1":"v1","k2":{"key2":"value2","key3":"value3"}}"; String jPath = "$.k2.key1"; String actual = jsonDelete.eval(jsonEvent, jPath); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
[+] input: shouldDoDefaultFormatForSubSelectAndForValuesNestedInTheFunctionAndDoNotMakeALineBreakAfterTheCommaForThem() { //given String inputString = "CREATE VIEW bi_gaz_check_curve AS (SELECT cal.date, pay.check_id, COALESCE(pay.base_amount, pay.amount) amount_ars, pay.future_pay_due_date due_date, pay.cleared_date, pay.check_date issued_date FROM (SELECT generate_series('2010-01-01'::date, '2050-12-31'::date, INTERVAL '1 day') date, 1 payment_id) cal LEFT JOIN oracle.ap_checks_all pay ON cal.date >= pay.check_date AND cal.date <= (pay.future_pay_due_date::date + 30));"; //#9365 String expectedString = "CREATE VIEW bi_gaz_check_curve AS (" + lineBreak + "SELECT" + lineBreak + "\tcal.date," + lineBreak + "\tpay.check_id," + lineBreak + "\tCOALESCE(pay.base_amount, pay.amount) amount_ars," + lineBreak + "\tpay.future_pay_due_date due_date," + lineBreak + "\tpay.cleared_date," + lineBreak + "\tpay.check_date issued_date" + lineBreak + "FROM" + lineBreak + "\t(" + lineBreak + "\tSELECT" + lineBreak + "\t\tgenerate_series('2010-01-01'::date, '2050-12-31'::date, INTERVAL '1 day') date," + lineBreak + "\t\t1 payment_id) cal" + lineBreak + "LEFT JOIN oracle.ap_checks_all pay ON" + lineBreak + "\tcal.date >= pay.check_date" + lineBreak + "\tAND cal.date <= (pay.future_pay_due_date::date + 30));";  Mockito.when(configuration.isFunction("COALESCE")).thenReturn(true); Mockito.when(configuration.isFunction("generate_series")).thenReturn(true);  //when String formattedString = formatter.format(inputString, configuration);  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
[+] input: miss_DoTable_Miss_IgnoreTable_Ignore() { ReplicaMeta replicaMeta = new ReplicaMeta(); replicaMeta.setDoDb("full_src_1, rpl"); replicaMeta.setIgnoreDb("full_src_1, rpl"); replicaMeta.setDoTable("full_src_1.t1, full_src_1.t2"); replicaMeta.setIgnoreTable("full_src_1.t1, full_src_1.t2"); replicaMeta.setWildDoTable("d%.tb\\_charset%, d%.col\\_charset%"); replicaMeta.setWildIgnoreTable("d%.tb\\_charset%, d%.col\\_charset%"); replicaMeta.setRewriteDb(""); printChangeFilterSql(replicaMeta);  // init ReplicaFilter filter = new ReplicaFilter(replicaMeta); filter.init();  DefaultRowChange rowChange = new DefaultRowChange(); rowChange.setAction(DBMSAction.INSERT);  // Hit Replicate_Do_Table rowChange.setSchema("full_src_1"); rowChange.setTable("t3"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(filter.ignoreEvent(rowChange))
[-] pred: org. junit. Assert. assertTrue ( filter. ignoreEvent ( rowChange ) )
************************************
[+] input: convertPoint_FirstIsRoundNumber_ShouldConvert() { String wkt = "POINT(12 13.3)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [12,13.3]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: shouldNotBeEmptyWhenHttpAndEsConfigIsPresent() { ExternalSourceConfig externalSourceConfig = new ExternalSourceConfig(http, es, null, null);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(externalSourceConfig.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( externalSourceConfig. isEmpty() )
************************************
[+] input: generateRandomDate() { Date randomDate = ChineseIDCardNumberGenerator.randomDate(); System.err.println(randomDate); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(randomDate)
[-] pred: org. junit. Assert. assertNotNull ( randomDate )
************************************
[+] input: Exception { String name = "test_force"; MPFastKV kv1 = new MPFastKV.Builder(TestHelper.MP_DIR, name).disableWatchFileChange().build(); long newTime = System.currentTimeMillis() ^ System.nanoTime();  kv1.putLong("time", newTime); kv1.commit(); kv1.force();  File aFile = new File(TestHelper.MP_DIR, name + ".kva"); RandomAccessFile accessFile = new RandomAccessFile(aFile, "r"); ByteBuffer buffer = ByteBuffer.allocate(26); buffer.order(ByteOrder.LITTLE_ENDIAN); accessFile.read(buffer.array(), 0, 26); long t = buffer.getLong(18); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(newTime, t)
[-] pred: org. junit. Assert. assertEquals ( newTime, t )
************************************
[+] input: shouldFetchDefaultValueIfFieldNotInitializedWithAValueInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestAggregatedSupplyMessage.getDescriptor().findFieldByName("s2_id");  /* The field is added to the schema but not assigned a value */ GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("s2_id") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); LongHandler longHandler = new LongHandler(fieldDescriptor);  Object actualValue = longHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0L, actualValue)
[-] pred: org. junit. Assert. assertEquals ( 0L, actualValue )
************************************
[+] input: testUrlWithPredefinedQueryParamAndEmptyPathParam() { String expectedUrl = "http://x.y.z/api/v1/getName?token=abc&id=123";  // path parameter 为空map HttpRequest request = new HttpRequest() .protocol(ProtocolEnum.HTTP) .domain("x.y.z") .uriPattern("/api/v1/getName?token=abc") .pathParameters(Collections.emptyMap()) .queryParameter("id", "123"); assertEquals(expectedUrl, request.assembleUrl());  // path parameter 为 null request.pathParameters(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedUrl, request.assembleUrl())
[-] pred: org. junit. Assert. assertEquals ( expectedUrl, request. assembleUrl ( ) )
************************************
[+] input: InterruptedException { DbTable table = DataBase.getInstance().getDbTableByName("t_person"); ExecutorService threadPool = Executors.newCachedThreadPool(); int threadNum = 2; ArrayList<Future<Page>> futureResult = new ArrayList<>(); HeapPageID heapPageID = new HeapPageID(table.getTableId(), 0);  Transaction transaction = new Transaction(Lock.LockType.XLock); Future<Page> pageFuture = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture);   Thread.sleep(100); transaction.setLockType(Lock.LockType.SLock); Future<Page> pageFuture2 = threadPool.submit(() -> { Connection.passingTransaction(transaction); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture2);  Thread.sleep(100); // 锁应保持为x锁,新的事务获取应获取不到锁 Transaction transaction3 = new Transaction(Lock.LockType.SLock); Future<Page> pageFuture3 = threadPool.submit(() -> { Connection.passingTransaction(transaction3); return DataBase.getBufferPool().getPage(heapPageID); }); futureResult.add(pageFuture3);  // 1获取锁成功 Page page = futureResult.get(0).get(); "<AssertPlaceHolder>";  // 2获取锁成功 Page page2 = futureResult.get(1).get(); assertNotNull(page2);  // 线程3获取锁失败 try { futureResult.get(2).get(1, TimeUnit.SECONDS); fail("expected timeout"); } catch (Exception ignored) { }  // 终止所有线程 threadPool.shutdownNow(); }
[*] target: assertNotNull(page)
[-] pred: org. junit. Assert. assertNotNull ( page )
************************************
[+] input: shouldParseProtoByteDataFromBigTable() { ArrayList<Result> results = new ArrayList<>(); results.add(scanResult); byte[] mockResult = Bytes.toBytes("test"); when(scanResult.getValue(COLUMN_FAMILY_NAME, Bytes.toBytes(Constants.LONGBOW_QUALIFIER_DEFAULT))).thenReturn(mockResult); LongbowProtoData longbowProtoData = new LongbowProtoData(); Map<String, List<byte[]>> actualMap = longbowProtoData.parse(results); Map<String, List<byte[]>> expectedMap = new HashMap<String, List<byte[]>>() {{ put("proto_data", Arrays.asList(mockResult)); }}; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMap, actualMap)
[-] pred: org. junit. Assert. assertEquals ( expectedMap, actualMap )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.queryMessage(anyString(), anyString(), anyInt(), anyLong(), anyLong())).thenReturn(mock(QueryResult.class)); } QueryResult result = mqAdminExtImpl.queryMessage("topic_test", "key", 32, 1627804565000L, System.currentTimeMillis()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: URISyntaxException { BatchRequestCreator batchRequestCreator = new BatchRequestCreator(firehoseInstrumentation, uriBuilder, headerBuilder, HttpSinkRequestMethodType.PUT, jsonBody, httpSinkConfig); List<HttpEntityEnclosingRequestBase> requests = batchRequestCreator.create(messages, requestEntityBuilder);  "<AssertPlaceHolder>"; assertEquals(HttpSinkRequestMethodType.PUT.toString(), requests.get(0).getMethod()); verify(firehoseInstrumentation, times(1)).logDebug("\nRequest URL: {}\nRequest headers: {}\nRequest content: {}\nRequest method: {}", uriBuilder.build(), headerBuilder.build(), jsonBody.serialize(messages), HttpSinkRequestMethodType.PUT); }
[*] target: assertEquals(1, requests.size())
[-] pred: org. junit. Assert. assertEquals ( 1, requests. size ( ) )
************************************
[+] input: SQLException { Mockito.when(mockResults.getBoolean("is_temp_table")).thenReturn(true); GreenplumExternalTable table = new GreenplumExternalTable(mockSchema, mockResults); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(table.isTemporaryTable())
[-] pred: org. junit. Assert. assertTrue ( table. isTemporaryTable() )
************************************
[+] input: mp4StszBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x14, 0x73, 0x74, 0x73, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }; Mp4StszBox box = new Mp4StszBox(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: testRpcConnectionClose() { final String testRpcConnectionEndpointAddress = "<TestRpcConnectionEndpointAddress>"; final UUID leaderId = UUID.randomUUID(); final String connectionID = "Test RPC Connection ID";  TestRegistrationGateway testGateway = new TestRegistrationGateway( new RetryingRegistrationTest.TestRegistrationSuccess(connectionID));  try { rpcService.registerGateway(testRpcConnectionEndpointAddress, testGateway);  TestRpcConnection connection = new TestRpcConnection( testRpcConnectionEndpointAddress, leaderId, rpcService.getExecutor(), rpcService); connection.start(); // close the connection connection.close();  // validate connection is closed assertEquals(testRpcConnectionEndpointAddress, connection.getTargetAddress()); assertEquals(leaderId, connection.getTargetLeaderId()); "<AssertPlaceHolder>"; } finally { testGateway.stop(); } }
[*] target: assertTrue(connection.isClosed())
[-] pred: org. junit. Assert. assertTrue ( connection. isClosed() )
************************************
[+] input: shouldHandleTimestampMessagesByReturningNullForNonParseableTimeStampsForTransformForPostProcessor() { Descriptors.Descriptor descriptor = TestBookingLogMessage.getDescriptor(); Descriptors.FieldDescriptor fieldDescriptor = descriptor.findFieldByName("event_timestamp");  TypeHandler typeHandler = TypeHandlerFactory.getTypeHandler(fieldDescriptor);  Object value = typeHandler.transformFromPostProcessor("2");  "<AssertPlaceHolder>"; }
[*] target: assertNull(value)
[-] pred: org. junit. Assert. assertNull ( value )
************************************
[+] input: rtspPlayRequestTest() { String expect = "PLAY rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "Range: npt=0.000-\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspRange range = new RtspRangeNpt("0.000"); RtspPlayRequest request = new RtspPlayRequest(uri, "1273222592", range, this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.queryConsumeTimeSpan(anyString(), anyString())).thenReturn(new ArrayList<QueueTimeSpan>()); } List<QueueTimeSpan> timeSpans = mqAdminExtImpl.queryConsumeTimeSpan("topic_test", "group_test"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(timeSpans)
[-] pred: org. junit. Assert. assertNotNull ( timeSpans )
************************************
[+] input: testUnPublish() { UnPublishServiceRequest request = new UnPublishServiceRequest(); request.setServiceName("aa"); int result = meshApiClient.unPublishService(request); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
[+] input: toByteArray() { PlcStopParameter parameter = new PlcStopParameter(); parameter.setPiService("P_PROGRAM"); byte[] actual = parameter.toByteArray(); byte[] expect = {(byte) 0x29, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x09, (byte) 0x50, (byte) 0x5f, (byte) 0x50, (byte) 0x52, (byte) 0x4F, (byte) 0x47, (byte) 0x52, (byte) 0x41, (byte) 0x4D}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: shouldReturnEmptyStringWhenThereIsOnlyOneSpace() { //given String expectedString = ""; String inputString = " ";  //when String format = formatter.format(inputString, configuration);  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, format)
[-] pred: org. junit. Assert. assertEquals ( expectedString, format )
************************************
[+] input: Exception { DataSource dataSource = dataSourceFactory.createDataSource(null); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
[+] input: InterruptedException { ProviderConfig<?> providerConfig = providerConfig("consul-test-1", 12200); registry.register(providerConfig);  ConsumerConfig<?> consumerConfig = consumerConfig("consul-test-1"); MockProviderInfoListener listener = new MockProviderInfoListener(); consumerConfig.setProviderInfoListener(listener);  assertUntil(() -> { List<ProviderGroup> providerGroups = registry.subscribe(consumerConfig); Assert.assertEquals(1, providerGroups.size()); Assert.assertEquals(1, providerGroups.get(0).size()); }, 10, TimeUnit.SECONDS);  CountDownLatch latch = new CountDownLatch(1); listener.setCountDownLatch(latch);  providerConfig = providerConfig("consul-test-1", 12201, 12202); registry.register(providerConfig);  boolean ok = latch.await(10, TimeUnit.SECONDS); Assert.assertTrue(ok);  assertUntil(() -> { Map<String, ProviderInfo> providers = listener.getData(); Assert.assertEquals(3, providers.size()); }, 10, TimeUnit.SECONDS);  latch = new CountDownLatch(1); listener.setCountDownLatch(latch);  registry.unRegister(providerConfig);  ok = latch.await(10, TimeUnit.SECONDS); Assert."<AssertPlaceHolder>";  assertUntil(() -> { Map<String, ProviderInfo> providers = listener.getData(); Assert.assertEquals(1, providers.size()); }, 10, TimeUnit.SECONDS); }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
[+] input: Exception { Assume.assumeTrue(whole.markSupported()); whole.mark(1024); int read = whole.read(); whole.reset(); int reread = whole.read(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(read, reread)
[-] pred: org. junit. Assert. assertEquals ( read, reread )
************************************
[+] input: testElasticLogsBackendWithJenkinsVisualization() { ElasticBackend elasticBackend = new ElasticBackend(); elasticBackend.setElasticLogsBackend(new ElasticLogsBackendWithJenkinsVisualization()); Map<String, String> actual = elasticBackend.getOtelConfigurationProperties(); Map<String, String> expected = Collections.singletonMap("otel.logs.exporter", "otlp"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: testRunAnalyze() { String resp = engineService.runAnalyze(new EngineService.RunScriptParams() .withSql("load Everything.`` as Table;").withAsync("false")); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(resp)
[-] pred: org. junit. Assert. assertNotNull ( resp )
************************************
[+] input: testExtendAllDoNodeTypesAllExisting() { final IDoEntity target = BEANS.get(DoEntityBuilder.class) .put("stringAttribute", "t") .putList("stringList", Arrays.asList("x", "y", "z")).build(); target.putSet("stringSet", CollectionUtility.hashSet("a", "b", "c")); target.putCollection("stringCollection", Arrays.asList("u", "v", "w"));  final IDoEntity template = BEANS.get(DoEntityBuilder.class) .put("stringAttribute", "t2") .putList("stringList", Arrays.asList("x2", "y2", "z2")).build(); template.putSet("stringSet", CollectionUtility.hashSet("a2", "b2", "c2")); template.putCollection("stringCollection", Arrays.asList("u2", "v2", "w2"));  final IDoEntity targetExtended = m_helper.extend(target, template); "<AssertPlaceHolder>"; assertEquals(target, targetExtended); assertNotEquals(template, targetExtended); }
[*] target: assertSame(target, targetExtended)
[-] pred: org. junit. Assert. assertSame ( target, targetExtended )
************************************
[+] input: testErrorDueToNoOtherDBSupportThisQuery() { when(openSearchConnection.select(anyString())) .thenReturn( new DBResult( "OpenSearch", asList(new Type("firstname", "text")), asList(new Row(asList("John"))))); when(otherDbConnection.select(anyString())) .thenThrow(new RuntimeException("Unsupported feature"));  TestReport expected = new TestReport(); expected.addTestCase( new ErrorTestCase( 1, "SELECT * FROM accounts", "No other databases support this query: Unsupported feature;")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testUpdateActionsFromPaths_invalidChangedPath() { Set<UpdateAction> expectedActions = EnumSet.noneOf(UpdateAction.class); // just a directory is not a valid changedPath: directories don't change, files do. // getUpdateActionsFromPaths should skip invalid changedPaths List<Path> invalidChangedPaths = List.of( Path.of("resources"), Path.of("resources/custom-resources"), Path.of("services")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(invalidChangedPaths); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
[+] input: insert() { byte[] expect = {(byte) 0x28, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFD, (byte) 0x00, (byte) 0x0A, (byte) 0x01, (byte) 0x00, (byte) 0x30, (byte) 0x41, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x31, (byte) 0x50, (byte) 0x05, (byte) 0x5F, (byte) 0x49, (byte) 0x4e, (byte) 0x53, (byte) 0x45};  PlcControlParameter insert = PlcControlParameter.insert(EFileBlockType.DB, 1, EDestinationFileSystem.P); "<AssertPlaceHolder>";  }
[*] target: assertArrayEquals(expect, insert.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, insert. toByteArray ( ) )
************************************
[+] input: test03Countt() { Parent p = new Parent(); p.setAge(18); p.setName("person"); p.setId("10");  mars.insert(p); long count = mars.estimatedCount(Parent.class); Assert."<AssertPlaceHolder>";  }
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForOptionalType() { String error = explicitNullableTypeChecker.checkValueForType(null, Optional.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Optional.empty")); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: shouldBeEmptyWhenNoneOfTheConfigsExist() { defaultPostProcessorConfig = new PostProcessorConfig(null, null, null);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(defaultPostProcessorConfig.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( defaultPostProcessorConfig. isEmpty() )
************************************
[+] input: Exception { List<Long> result = userServiceImpl.getProjectIdsByUserId(Long.valueOf(1)); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMisMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "35"); subject.put("verify_aal", "2?"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
[+] input: testSubstraction() { System.out.println("resta"); double num1 = -2.0; double num2 = -7.0; Calculadora instance = new Calculadora(); double expResult = 5.0; double result = instance.resta(num1, num2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expResult, result, 0.0)
[-] pred: org. junit. Assert. assertEquals ( expResult, result, 0.0 )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x01, (byte) 0x00, (byte) 0x13, (byte) 0x00, (byte) 0x13}; MbReadCoilRequest mb = new MbReadCoilRequest(); mb.setFunctionCode(EMbFunctionCode.READ_COIL); mb.setAddress(19); mb.setQuantity(19); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.queryTopicConsumeByWho(anyString())).thenReturn(new GroupList()); } GroupList groupList = mqAdminExtImpl.queryTopicConsumeByWho("topic_test"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(groupList)
[-] pred: org. junit. Assert. assertNotNull ( groupList )
************************************
[+] input: Exception { SofaRpcException exception = new SofaRpcException(RpcErrorType.SERVER_BUSY, "111"); String string = ExceptionUtils.toString(exception); Assert."<AssertPlaceHolder>"; Pattern pattern = Pattern.compile("at"); Matcher matcher = pattern.matcher(string); int count = 0; while (matcher.find()) { count++; } Assert.assertTrue(count > 1); }
[*] target: assertNotNull(string)
[-] pred: org. junit. Assert. assertNotNull ( string )
************************************
[+] input: testMultiplication() { System.out.println("multiplicacion"); double num1 = 12.0; double num2 = 0.0; Calculadora instance = new Calculadora(); double expResult = 0.0; double result = instance.multiplicacion(num1, num2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expResult, result, 0.0)
[-] pred: org. junit. Assert. assertEquals ( expResult, result, 0.0 )
************************************
[+] input: testFor() { pipeline.sample(3);  Object users = mars.aggregate(pipeline, "users").tryNext(); Assert."<AssertPlaceHolder>";    }
[*] target: assertNotNull(users)
[-] pred: org. junit. Assert. assertNotNull ( users )
************************************
[+] input: testAllocPartPersist() { diskSpaceManager = getDiskSpaceManager(); diskSpaceManager.allocPart(); diskSpaceManager.close(); diskSpaceManager = getDiskSpaceManager(); int partNum = diskSpaceManager.allocPart(); diskSpaceManager.close();  "<AssertPlaceHolder>"; assertTrue(managerRoot.resolve("1").toFile().exists()); assertEquals(DiskSpaceManager.PAGE_SIZE, managerRoot.resolve("0").toFile().length()); }
[*] target: assertEquals(1, partNum)
[-] pred: org. junit. Assert. assertEquals ( 1, partNum )
************************************
[+] input: testMatch() { boolean b = MatcherUtil.match("/topic/*.query", "/topic/route.query"); boolean b1 = MatcherUtil.match("/**/**.do", "/consumer/route.do"); boolean b2 = MatcherUtil.match("/*", "/topic/qqq/route.do"); Assert."<AssertPlaceHolder>"; Assert.assertTrue(b1); Assert.assertFalse(b2); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: getCacheCodeVerifier() { JapCache japCache = new JapLocalCache(); JapAuthentication.setContext(new JapContext().setCache(japCache)); JapAuthentication.getContext().getCache().set("clientId", "111", 111111); String res = PkceHelper.getCacheCodeVerifier("clientId"); Assert."<AssertPlaceHolder>"; Assert.assertEquals("111", res); }
[*] target: assertNotNull(res)
[-] pred: org. junit. Assert. assertNotNull ( res )
************************************
[+] input: testRestartConnectionWithSsl_CreatesSslSocket() { ProxyServer server = mock(ProxyServer.class); Socket socket = mock(Socket.class); when(socket.getInetAddress()).thenReturn(InetAddress.getLoopbackAddress()); AtomicBoolean calledCreateSSLSocket = new AtomicBoolean(); ConnectionHandler connection = new ConnectionHandler(server, socket) { @Override void createSSLSocket() { calledCreateSSLSocket.set(true); } }; connection.setThread(mock(Thread.class)); connection.restartConnectionWithSsl();  "<AssertPlaceHolder>"; }
[*] target: assertTrue(calledCreateSSLSocket.get())
[-] pred: org. junit. Assert. assertTrue ( calledCreateSSLSocket. get ( ) )
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); properties.put("currentSchema", "schema"); DataSource dataSource = dataSourceFactory.createDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof SimpleDataSource); SimpleDataSource simpleDataSource = (SimpleDataSource) dataSource; Assert.assertEquals("db", simpleDataSource.getDatabaseName()); Assert.assertEquals("schema", simpleDataSource.getCurrentSchema()); }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
[+] input: testJoinQueryParametersWithLocaleIT() {  Locale.setDefault(new Locale("it", "IT"));  String joinedQuery = String.format("key1=%s&key2=%s", extensiveDecimalsDouble, highDouble); String buildQuery = UrlBuilder.joinQueryParameters(mockDoubleParameters); "<AssertPlaceHolder>"; }
[*] target: assertEquals(joinedQuery, buildQuery)
[-] pred: org. junit. Assert. assertEquals ( joinedQuery, buildQuery )
************************************
[+] input: testGenerateIssueOrg() { String issueOrg = ChineseIDCardNumberGenerator.generateIssueOrg(); System.err.println(issueOrg); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(issueOrg)
[-] pred: org. junit. Assert. assertNotNull ( issueOrg )
************************************
[+] input: convertPoint_WithRedundantSpaces_ShouldConvert() { String wkt = " POINT ( 12.3 13.3 )   "; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [12.3,13.3]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: shouldNotProcessIfParameterPlacementDisabled() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.DISABLED);  parameterizedURIRequest = new ParameterizedUriRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedURIRequest.canProcess();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
[+] input: testLazyBoolean() { boolean value = false; subject = makeSimpleCallable(value);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, subject.value())
[-] pred: org. junit. Assert. assertEquals ( value, subject. value() )
************************************
[+] input: Exception { final String p = CollectorFormatter.class.getName(); Properties props = new Properties(); final String expect = CollectorFormatterTest.class.getName(); props.put(p.concat(".format"), expect); LogManager manager = LogManager.getLogManager(); try { read(manager, props); CollectorFormatter cf = new CollectorFormatter(); LogRecord first = new LogRecord(Level.SEVERE, Level.SEVERE.getName()); assertEquals("", cf.format(first)); String result = cf.getTail((Handler) null); "<AssertPlaceHolder>"; } finally { manager.reset(); } }
[*] target: assertEquals(expect, result)
[-] pred: org. junit. Assert. assertEquals ( expect, result )
************************************
[+] input: InvalidMessageException { TimebasedProposalGenerator proposalGenerator = new TimebasedProposalGenerator(); Proposal proposal = proposalGenerator.nextProposal(); Value value = new Protocol.StringValue("test1"); Value svalue = new Protocol.StringValue("test2"); Promise prom = protocol.new Promise(proposal, value, svalue,new Ranking(100, 101), 1, LogEntryType.LOG_VERSION, JEVersion.CURRENT_VERSION); assertEquals(101, prom.getSuggestionRanking().minor);  final String wireFormatNew = prom.wireFormat();  int tieBreaker = wireFormatNew.lastIndexOf(TextProtocol.SEPARATOR); final String wireFormatOld = wireFormatNew.substring(0, tieBreaker);  /* Simulate new node reading old Promise format. */ Promise prom2 = (Promise)protocol.parse(wireFormatOld);  assertEquals(Ranking.UNINITIALIZED.major, prom2.getSuggestionRanking().minor);  TestProtocol.OldPromise oldProm = protocol.new OldPromise(proposal, value, svalue, 100, 1, LogEntryType.LOG_VERSION, JEVersion.CURRENT_VERSION);  /* Simulate old node reading old and new promise formats. */ protocol.replacePromise();  assertEquals(oldProm.wireFormat(), wireFormatOld); TestProtocol.OldPromise oldProm1 = (TestProtocol.OldPromise)protocol.parse(wireFormatOld); TestProtocol.OldPromise oldProm2 = (TestProtocol.OldPromise)protocol.parse(wireFormatNew);  /* verify they check out equal. */ "<AssertPlaceHolder>"; }
[*] target: assertEquals(oldProm1, oldProm2)
[-] pred: org. junit. Assert. assertEquals ( oldProm1, oldProm2 )
************************************
[+] input: testLogWritten() { NetworkTask task = getNetworkTask(); task = networkTaskDAO.insertNetworkTask(task); networkTaskDAO.updateNetworkTaskRunning(task.getId(), true); Intent intent = new Intent(); intent.putExtras(task.toBundle()); broadcastReceiver.onReceive(TestRegistry.getContext(), intent); List<LogEntry> entries = logDAO.readAllLogsForNetworkTask(task.getId()); "<AssertPlaceHolder>"; LogEntry entry = entries.get(0); assertEquals(task.getId(), entry.getNetworkTaskId()); assertEquals(getTestTimestamp(0, 0), entry.getTimestamp()); assertTrue(entry.isSuccess()); assertEquals("successful", entry.getMessage()); }
[*] target: assertEquals(1, entries.size())
[-] pred: org. junit. Assert. assertEquals ( 1, entries. size ( ) )
************************************
[+] input: test() { SeedWordGenerator generator = new SeedWordGenerator(); generator.init(context); //generator.printState(); for (int i = 0; i < 10; i++) { String word = generator.generate(); "<AssertPlaceHolder>"; logger.debug(word); assertNotNull(word); assertTrue(word.length() > 0); } assertAvailable(generator); }
[*] target: assertNotNull(word)
[-] pred: org. junit. Assert. assertNotNull ( word )
************************************
[+] input: mp4DinfBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x24, 0x64, 0x69, 0x6E, 0x66,  0x00, 0x00, 0x00, 0x1C, 0x64, 0x72, 0x65, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x75, 0x72, 0x6C, 0x20, 0x00, 0x00, 0x00, 0x01, }; Mp4DinfBox box = new Mp4DinfBox(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: hasTypeShouldBeTrueWhenTypeIsPresent() { EsSourceConfig esSourceConfig = new EsSourceConfigBuilder() .setType(type) .createEsSourceConfig(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(esSourceConfig.hasType())
[-] pred: org. junit. Assert. assertTrue ( esSourceConfig. hasType() )
************************************
[+] input: toByteArray1() { AckHeader header = new AckHeader(); header.setProtocolId((byte) 0x32); header.setMessageType(EMessageType.JOB); header.setReserved(0x0000); header.setPduReference(0x0000); header.setParameterLength(0x0000); header.setDataLength(0x0002); header.setErrorClass(EErrorClass.NO_ERROR); header.setErrorCode((byte) 0x00); byte[] actual = header.toByteArray(); byte[] expect = new byte[]{(byte) 0x32, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: Exception { when(redisTemplate.execute(any(RedisCallback.class))).thenAnswer( invocation -> Boolean.TRUE ); Boolean result = redisCache.put("key", "value"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(Boolean.TRUE, result)
[-] pred: org. junit. Assert. assertEquals ( Boolean.TRUE, result )
************************************
[+] input: IOException { appendEntryToFile(new NoOpEntry(1, 1)); FileEntrySequence sequence = new FileEntrySequence(entriesFile, entryIndexFile, 1); EntryMeta meta = sequence.getEntryMeta(1); Assert."<AssertPlaceHolder>"; Assert.assertEquals(Entry.KIND_NO_OP, meta.getKind()); Assert.assertEquals(1, meta.getIndex()); Assert.assertEquals(1, meta.getTerm()); }
[*] target: assertNotNull(meta)
[-] pred: org. junit. Assert. assertNotNull ( meta )
************************************
[+] input: testFluentGetterSetter() { ClientProfile profile = new ClientProfile() .primaryEndpoints(primaryEndpoints) .regionCode(regionCode) .signer(signer) .credentials(credentials) .httpClientConfig(httpClientConfig) .breakerConfig(breakerConfig) .maxRetryCount(maxRetryCount) .preheatRequestClassesForValidation(requestClassForValidation1, requestClassForValidation2) .preheatRequestsForValidation(requestForValidation1, requestForValidation2);  assertSame(primaryEndpoints, profile.getPrimaryEndpoints()); assertEquals(regionCode, profile.regionCode()); assertSame(signer, profile.signer()); assertSame(credentials, profile.credentials()); assertSame(httpClientConfig, profile.httpClientConfig()); assertSame(breakerConfig, profile.breakerConfig()); assertEquals(maxRetryCount, profile.maxRetryCount());  List<Class<?>> preheatRequestClasses = profile.preheatRequestClassesForValidation(); assertEquals(2, preheatRequestClasses.size()); assertSame(requestClassForValidation1, preheatRequestClasses.get(0)); assertSame(requestClassForValidation2, preheatRequestClasses.get(1));  List<BaseRequest> preheatRequests = profile.preheatRequestsForValidation(); "<AssertPlaceHolder>"; assertSame(requestForValidation1, preheatRequests.get(0)); assertSame(requestForValidation2, preheatRequests.get(1)); }
[*] target: assertEquals(2, preheatRequests.size())
[-] pred: org. junit. Assert. assertEquals ( 2, preheatRequests. size ( ) )
************************************
[+] input: Exception { List<Entity> entities = SingleSheetXLSEntityIterator.parseAll(IMPORT_XLS, "Product", null, null, context, true, false, null); "<AssertPlaceHolder>"; assertProduct(PROD1, entities.get(0)); assertProduct(PROD2, entities.get(1)); }
[*] target: assertEquals(2, entities.size())
[-] pred: org. junit. Assert. assertEquals ( 2, entities. size ( ) )
************************************
[+] input: shouldFetchParsedValueForFieldForFieldDescriptorOfTypeLong() { long actualValue = 2L;  Descriptors.FieldDescriptor fieldDescriptor = TestAggregatedSupplyMessage.getDescriptor().findFieldByName("s2_id"); LongHandler longHandler = new LongHandler(fieldDescriptor); Object value = longHandler.parseObject(String.valueOf(actualValue));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
[+] input: testHostSafeCheck2() { boolean exception = false; try { CommonUtil.hostSafeCheck("acbdabdasdhkj.com=="); } catch (Exception e) { exception = true; } "<AssertPlaceHolder>"; }
[*] target: assertTrue(exception)
[-] pred: org. junit. Assert. assertTrue ( exception )
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestComplexMap"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestComplexMap.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  TestComplexMap complexMapMessage = TestComplexMap.newBuilder() .putComplexMap(1, commonMessage) .build();  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(complexMapMessage.getDescriptor(), complexMapMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"complex_map":[{"key":1,"value":{"order_number":"order-number-123","order_url":"https://order-url","order_details":"pickup"}}],"int_message":[],"string_message":[]}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
[+] input: add() { cal.add(2,2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(4,cal.getResult())
[-] pred: org. junit. Assert. assertEquals ( 4, cal. getResult() )
************************************
[+] input: Exception { final DigitalCovidCertificate dgc = (DigitalCovidCertificate) new DigitalCovidCertificate() .withNam(new PersonName().withGn("Martin").withFn("Lindström")) .withDob("1969-11-11") .withV(Arrays.asList(new VaccinationEntry() .withTg("840539006") .withVp("1119349007") .withMp("EU/1/20/1507") .withMa("ORG-100030215") .withDn(Integer.valueOf(1)) .withSd(Integer.valueOf(2)) .withDt(LocalDate.parse("2021-04-17")) .withCo("SE") .withIs("Swedish eHealth Agency") .withCi("01:SE:JKJKHJGHG6768686HGJGH#M")));  String json = dgc.toJSONString();  DigitalCovidCertificate dgc2 = DigitalCovidCertificate.fromJsonString(json);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(dgc, dgc2)
[-] pred: org. junit. Assert. assertEquals ( dgc, dgc2 )
************************************
[+] input: generatePkceParametersPlainCodeChallengeMethod() { JapAuthentication.setContext(new JapContext()); JapAuthentication.getContext().setCache(new JapLocalCache()); Map<String, Object> pkceInfo = PkceHelper.generatePkceParameters(new OAuthConfig() .setCodeChallengeMethod(PkceCodeChallengeMethod.PLAIN) .setClientId("clientId") .setCodeVerifierTimeout(1000)); Assert."<AssertPlaceHolder>"; Assert.assertNotNull(pkceInfo.get(PkceParams.CODE_CHALLENGE)); Assert.assertNotNull(pkceInfo.get(PkceParams.CODE_CHALLENGE_METHOD)); Assert.assertEquals(PkceCodeChallengeMethod.PLAIN, pkceInfo.get(PkceParams.CODE_CHALLENGE_METHOD)); }
[*] target: assertEquals(2, pkceInfo.size())
[-] pred: org. junit. Assert. assertEquals ( 2, pkceInfo. size ( ) )
************************************
[+] input: testEquals() { ServerConfig config1 = new ServerConfig(); Assert.assertTrue(config1.equals(config1)); Assert.assertFalse(config1.equals(null)); Assert.assertFalse(config1.equals(""));  ServerConfig config2 = new ServerConfig(); Assert.assertTrue(config1.equals(config2));  config1.setHost("127.0.0.1"); Assert.assertFalse(config1.equals(config2)); config2.setHost("127.0.0.2"); Assert.assertFalse(config1.equals(config2)); config2.setHost("127.0.0.1"); Assert.assertTrue(config1.equals(config2));  config1.setPort(1234); Assert.assertFalse(config1.equals(config2)); config2.setPort(1235); Assert.assertFalse(config1.equals(config2)); config2.setPort(1234); Assert.assertTrue(config1.equals(config2));  config1.setProtocol("xxx"); Assert.assertFalse(config1.equals(config2)); config2.setProtocol("yyy"); Assert.assertFalse(config1.equals(config2)); config2.setProtocol("xxx"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(config1.equals(config2))
[-] pred: org. junit. Assert. assertTrue ( config1. equals ( config2 ) )
************************************
[+] input: shouldNotBeAbleToBuildSourceIfSourceTypeIsUnsupported() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_CONSUMER, SourceType.BOUNDED)}); FlinkKafkaConsumerDaggerSource daggerSource = new FlinkKafkaConsumerDaggerSource(streamConfig, configuration, daggerDeserializer);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(daggerSource.canBuild())
[-] pred: org. junit. Assert. assertFalse ( daggerSource. canBuild ( ) )
************************************
[+] input: pushNPop() { CustomLinkedList<Integer> linkedList = new CustomLinkedList<>(); assertTrue(linkedList.isEmpty()); linkedList.push(2); linkedList.push(3); linkedList.push(36); linkedList.push(39);  assertThat(linkedList.pop(), is(39)); assertThat(linkedList.pop(), is(36)); assertThat(linkedList.pop(), is(3)); assertFalse(linkedList.isEmpty()); assertThat(linkedList.pop(), is(2)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(linkedList.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( linkedList. isEmpty() )
************************************
[+] input: testMapStringValues() { Map<String, Object> map = new HashMap<>(); map.put("id", "1"); map.put("schedulerid", "2"); map.put("valid", "true"); map.put("timestamp", "3"); SchedulerId schedulerId = new SchedulerId(map); assertEquals(1, schedulerId.getId()); assertEquals(2, schedulerId.getSchedulerId()); assertEquals(3, schedulerId.getTimestamp()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(schedulerId.isValid())
[-] pred: org. junit. Assert. assertTrue ( schedulerId. isValid() )
************************************
[+] input: convertPoint_NoRedundantSpaces_ShouldConvert() { String wkt = "POINT(12.3 13.3)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [12.3,13.3]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: miss_DoTable_Miss_IgnoreTable_Hit_DoWildTable_Hit_IgnoreDb_Ignore() { ReplicaMeta replicaMeta = new ReplicaMeta(); replicaMeta.setDoDb(""); replicaMeta.setIgnoreDb("full_src_1, dutf8"); replicaMeta.setDoTable(""); replicaMeta.setIgnoreTable(""); replicaMeta.setWildDoTable("d%.tb\\_charset%, d%.col\\_charset%"); replicaMeta.setWildIgnoreTable(""); replicaMeta.setRewriteDb(""); printChangeFilterSql(replicaMeta);  // init ReplicaFilter filter = new ReplicaFilter(replicaMeta); filter.init();  DefaultRowChange rowChange = new DefaultRowChange(); rowChange.setAction(DBMSAction.INSERT);  rowChange.setSchema("dutf8"); rowChange.setTable("tb_charset_gbk"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(filter.ignoreEvent(rowChange))
[-] pred: org. junit. Assert. assertTrue ( filter. ignoreEvent ( rowChange ) )
************************************
[+] input: testLevelAfterClose() { MailHandler instance = new MailHandler(createInitProperties("")); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  instance.setLevel(Level.WARNING); instance.setFormatter(new LevelCheckingFormatter(Level.OFF)); instance.publish(new CloseLogRecord(Level.SEVERE, "", instance)); assertEquals(Level.OFF, instance.getLevel());  instance.close(); boolean failed = false; for (Exception exception : em.exceptions) { Throwable t = exception; if (t instanceof MessagingException) { if (!isConnectOrTimeout(t)) { dump(t); failed = true; } } else { dump(t); failed = true; } } "<AssertPlaceHolder>"; assertFalse(em.exceptions.isEmpty()); }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertFalse ( failed )
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("00:00 -00:30 "); TimeInterval expected = new TimeInterval( LocalTime.of(0, 0, 0), LocalTime.of(0, 30, 0) ); "<AssertPlaceHolder>"; assertEquals(1800, actual.getDuration()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testHashCode() { final SeverityComparator a = new SeverityComparator(); final SeverityComparator b = new SeverityComparator(); assertNotSame(a, b);  assertTrue(a.equals(b)); assertTrue(b.equals(a));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode(), b. hashCode() )
************************************
[+] input: testUpdateActionsFromPaths_shortPaths() { Set<UpdateAction> expectedActions = EnumSet.noneOf(UpdateAction.class); List<Path> changedPaths = List.of(Path.of("pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
[+] input: mp4VmhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x14, 0x76, 0x6D, 0x68, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }; Mp4VmhdBox box = new Mp4VmhdBox(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: testUpdateEventOffset() { List<Map<String, Object>> rows = offset.queryEventOffset().join(); rows.forEach(map -> { Long id = (Long) map.get("id"); Long offset_id = (Long) map.get("event_offset_id"); String dataSourceName = (String) map.get("data_source_name"); boolean status = offset.updateEventOffset(dataSourceName, offset_id + 1, id).join(); Assert.assertTrue(status); boolean status2 = offset.updateEventOffset(dataSourceName, offset_id, id).join(); Assert."<AssertPlaceHolder>"; });  }
[*] target: assertTrue(status2)
[-] pred: org. junit. Assert. assertTrue ( status2 )
************************************
[+] input: testInvalidMap() { Map<String, Object> map = new HashMap<>(); map.put("id", "id"); map.put("schedulerid", "schedulerid"); map.put("valid", "valid"); map.put("timestamp", "timestamp"); SchedulerId schedulerId = new SchedulerId(map); assertEquals(-1, schedulerId.getId()); assertEquals(-1, schedulerId.getSchedulerId()); assertEquals(-1, schedulerId.getTimestamp()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(schedulerId.isValid())
[-] pred: org. junit. Assert. assertFalse ( schedulerId. isValid() )
************************************
[+] input: Exception { LocalMapPartitionFile partitionFile1 = createPartitionFile(); partitionFile1.onError(new Exception("Test exception.")); partitionFile1.onError(new Exception("Test exception.")); partitionFile1.onError(new Exception("Test exception.")); partitionFile1.onError(new Exception("Test exception.")); assertTrue(partitionFile1.isConsumable());  partitionFile1.onError(new FileCorruptedException()); assertFalse(partitionFile1.isConsumable());  LocalMapPartitionFile partitionFile2 = createPartitionFile(); partitionFile2.onError(new ClosedChannelException()); partitionFile2.onError(new ClosedChannelException()); partitionFile2.onError(new ClosedChannelException()); partitionFile2.onError(new ClosedChannelException()); assertTrue(partitionFile2.isConsumable());  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception."));  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception."));  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception."));  assertTrue(partitionFile2.isConsumable()); partitionFile2.onError(new IOException("Test exception.")); "<AssertPlaceHolder>"; }
[*] target: assertFalse(partitionFile2.isConsumable())
[-] pred: org. junit. Assert. assertFalse ( partitionFile2. isConsumable ( ) )
************************************
[+] input: shouldReturnFalseForUpdateOnlyMode() { MongoUpsertRequestHandler mongoUpsertRequestHandler = new MongoUpsertRequestHandler(MongoSinkMessageType.PROTOBUF, jsonSerializer, MongoSinkRequestType.UPDATE_ONLY, "customer_id", "message");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(mongoUpsertRequestHandler.canCreate())
[-] pred: org. junit. Assert. assertFalse ( mongoUpsertRequestHandler. canCreate() )
************************************
[+] input: mp4MfhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x10, 0x6D, 0x66, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }; Mp4MfhdBox box = new Mp4MfhdBox(1); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: Exception { when(redisTemplate.execute(any(RedisCallback.class))).thenAnswer( invocation -> Boolean.TRUE ); Boolean result = redisCache.put("key", "value", Long.valueOf(1)); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(Boolean.TRUE, result)
[-] pred: org. junit. Assert. assertEquals ( Boolean.TRUE, result )
************************************
[+] input: testCalculateReturnDate() { for (int return_day : this.return_days) { Timestamp return_flight_date = ReturnFlight.calculateReturnDate(this.flight_date, return_day); "<AssertPlaceHolder>"; assertTrue(this.flight_date.getTime() < return_flight_date.getTime()); } // FOR }
[*] target: assertNotNull(return_flight_date)
[-] pred: org. junit. Assert. assertNotNull ( return_flight_date )
************************************
[+] input: AccountTransactionException { // fill code  // when boolean isDeposited = dao.deposit("ISBN0000", 4000.0); // Method call // then verify(ds, times(1)).getConnection(); verify(con, times(1)).prepareStatement(anyString()); verify(ps, times(1)).executeUpdate(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isDeposited)
[-] pred: org. junit. Assert. assertTrue ( isDeposited )
************************************
[+] input: shouldFetchValueForFieldForFieldDescriptorOfTypeInteger() { int actualValue = 2;  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("cancel_reason_id"); IntegerHandler integerHandler = new IntegerHandler(fieldDescriptor); Object value = integerHandler.parseObject(actualValue);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForStringType() { String error = explicitNullableTypeChecker.checkValueForType(null, String.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("String")); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: testUtf8Subject() { String s = null; try { s = MimeUtility.decodeText(ENV_UTF8_ENCODED_SUBJECT); } catch (UnsupportedEncodingException ex) { } final String subject = s;  testWithHandler( new IMAPTest() { @Override public void test(Folder folder, IMAPHandlerMessage handler) throws MessagingException { Message m = folder.getMessage(1); "<AssertPlaceHolder>"; } }, new IMAPHandlerMessage() { { { envelope = "(" + ENV_DATE + " "" + subject + "" " + ENV_ADDRS + ")"; capabilities += " ENABLE UTF8=ACCEPT"; } }  @Override public void enable(String line) throws IOException { ok(); } }); }
[*] target: assertEquals(subject, m.getSubject())
[-] pred: org. junit. Assert. assertEquals ( subject, m. getSubject ( ) )
************************************
[+] input: generateCodeIdTokenTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateCodeIdTokenTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(4, obj.size()); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("state")); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("id_token")); }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
[+] input: prueba1() { System.out.println("PRUEBA 1 - The test case is a prototype."); double a = 4.5566; double b = 2.3; double result = calculadora1.getSuma(a, b); double expected = 6.8566; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result, 0)
[-] pred: org. junit. Assert. assertEquals ( expected, result, 0 )
************************************
[+] input: IOException { EntryIndexFile file = new EntryIndexFile(makeEntryIndexFileContent(3, 4)); EntryIndexItem item = file.get(3); Assert."<AssertPlaceHolder>"; Assert.assertEquals(1, item.getKind()); Assert.assertEquals(3, item.getTerm()); }
[*] target: assertNotNull(item)
[-] pred: org. junit. Assert. assertNotNull ( item )
************************************
[+] input: shouldFetchValueForFieldForFieldDescriptorOfTypeString() { String actualValue = "test";  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("order_number"); StringHandler stringHandler = new StringHandler(fieldDescriptor); Object value = stringHandler.parseObject(actualValue);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
[+] input: testSaveToStringWithHeader() { FileConfiguration config = getConfig(); config.options().header(getTestHeaderInput());  for (Map.Entry<String, Object> entry : getTestValues().entrySet()) { config.set(entry.getKey(), entry.getValue()); }  String result = config.saveToString(); String expected = getTestHeaderResult() + "\n" + getTestValuesString();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testZeroFunctions() { final BloomFilter<Void> bloomFilter = BloomFilter.create(10, 0); assertFalse(bloomFilter.add("test")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, bloomFilter.size64())
[-] pred: org. junit. Assert. assertEquals ( 0, bloomFilter. size64() )
************************************
[+] input: selectSingle3() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andIn(MysqlUserEntity::getId, Arrays.asList(1, 1, 1, 1, 1, 1)); dynamicSql.andEqualTo(MysqlUserEntity::getId, 1); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
[+] input: testSpacesAndHyphens() { List<String> input = Arrays.asList( "abc_PT", "abc-mno1", "ABC MNO2", "abC NOP", "ABCOP", "abcopp", "ABC PQR", "abc PT", "ABC-PT");  List<String> expectedResult = Arrays.asList( "abc-mno1", "ABC MNO2", "abC NOP", "ABC PQR", "abc PT", "ABC-PT", "abc_PT", "ABCOP", "abcopp");  List<String> actualResult = new ArrayList<>(input); Collections.sort(actualResult, m_collatorProvider.getInstance(new Locale("en")));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualResult )
************************************
[+] input: Exception { String expected = "0123äöü"; ByteArrayOutputStream out = new ByteArrayOutputStream(); IOUtility.writeString(out, "UTF-8", expected); String actual = new String(out.toByteArray(), "UTF-8"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getVehicleLocationNotFoundWhenVehicleDetailsAreNull() { VehicleDetails vehicleDetails = getDummyVehicleDetails(); Mockito.when(vehicleDetailsRepository.findByUuid(vehicleDetails.getUuid())).thenReturn(null); VehicleLocationResponse vehicleLocationResponse = vehicleService.getVehicleLocation(vehicleDetails.getUuid()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(vehicleLocationResponse)
[-] pred: org. junit. Assert. assertNull ( vehicleLocationResponse )
************************************
[+] input: Exception { TestAbstractDAGVisitor visitor = new TestAbstractDAGVisitor(); visitor.putEdge(new TestAbstractDAGNode("1", "1"), new TestAbstractDAGNode("2", "2")); visitor.putEdge(new TestAbstractDAGNode("2", "2"), new TestAbstractDAGNode("3", "3")); visitor.putEdge(new TestAbstractDAGNode("3", "3"), new TestAbstractDAGNode("1", "1")); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(visitor.hasCircle())
[-] pred: org. junit. Assert. assertTrue ( visitor. hasCircle ( ) )
************************************
[+] input: listFilesTest() { List<CdcFile> files = fileSystem.listAllFiles(); List<String> actual = new ArrayList<>(); for (CdcFile file : files) { actual.add(file.getName()); } List<String> expect = new ArrayList<>(); int n = 15; for (int i = 1; i < n; i++) { expect.add(binlogFilePrefix + String.format("%06d", i)); } boolean expectTrue = ListUtils.isEqualList(expect, actual); Assert.assertTrue(expectTrue); files = fileSystem.listAllFiles(); actual.clear(); for (CdcFile file : files) { actual.add(file.getName()); } expectTrue = ListUtils.isEqualList(expect, actual); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(expectTrue)
[-] pred: org. junit. Assert. assertTrue ( expectTrue )
************************************
[+] input: Exception { OneHotEncoderModel model = estimator.fit(trainTable); Tuple2<Integer, Integer> expected = new Tuple2<>(0, 2); Tuple2<Integer, Integer> actual = OneHotEncoderModelData.getModelDataStream(model.getModelData()[0]) .executeAndCollect() .next(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.resetOffsetByTimestamp(anyString(), anyString(), anyLong(), anyBoolean())).thenReturn(new HashMap<MessageQueue, Long>()); } Map<MessageQueue, Long> map = mqAdminExtImpl.resetOffsetByTimestamp("group_test", "topic_test", 1628495765398L, false); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(map)
[-] pred: org. junit. Assert. assertNotNull ( map )
************************************
[+] input: Exception { final SeverityComparator a = new SeverityComparator(); final SeverityComparator b = serialClone(a);  assertTrue(a.equals(b)); assertTrue(b.equals(a));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode ( ), b. hashCode ( ) )
************************************
[+] input: convertMultiPoint_V1_ShouldConvert() { String wkt = "MULTIPOINT (10 40, 40 30, 20 20, 30 10)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiPoint", "coordinates": [[10,40],[40,30],[20,20],[30,10]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: testLocales() { Runnable runner = () -> { logger.debug("Checking Locale " + Locale.getDefault()); DepartmentNameGenerator generator = new DepartmentNameGenerator(); generator.init(context); for (int i = 0; i < 100; i++) { String product = generator.generate(); logger.debug(product); "<AssertPlaceHolder>"; } }; LocaleUtil.runInLocale(Locale.US, runner); LocaleUtil.runInLocale(Locale.GERMAN, runner); LocaleUtil.runInLocale(new Locale("XX"), runner); }
[*] target: assertNotNull(product)
[-] pred: org. junit. Assert. assertNotNull ( product )
************************************
[+] input: testSaveToStringWithIndent() { YamlConfiguration config = getConfig(); config.options().indent(9);  config.set("section.key", 1);  String result = config.saveToString(); String expected = "section:\n         key: 1\n";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testNull() { Append a = new Append(); "<AssertPlaceHolder>"; }
[*] target: assertNull(a.convert(null))
[-] pred: org. junit. Assert. assertNull ( a. convert ( null ) )
************************************
[+] input: testContainsNodeNoNodes() { ITree tree = mock(ITree.class); ITreeNode nodeA = mockNode("a"); TreeEvent event = new TreeEvent(tree, TreeEvent.TYPE_NODE_ACTION); "<AssertPlaceHolder>"; }
[*] target: assertFalse(event.containsNode(nodeA))
[-] pred: org. junit. Assert. assertFalse ( event. containsNode ( nodeA ) )
************************************
[+] input: shouldNotBeEmptyWhenEsAndGrpcConfigIsPresent() { ExternalSourceConfig externalSourceConfig = new ExternalSourceConfig(null, es, null, grpc);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(externalSourceConfig.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( externalSourceConfig. isEmpty() )
************************************
[+] input: testLast() { assertEquals("baz", m_testDoList.last()); m_testDoList.remove("baz"); assertEquals("bar", m_testDoList.last()); m_testDoList.clear(); "<AssertPlaceHolder>"; }
[*] target: assertNull(m_testDoList.last())
[-] pred: org. junit. Assert. assertNull ( m_testDoList. last() )
************************************
[+] input: InterruptedException { MDC.put(MDC_KEY, "value should not be pushed to child thread");  final AtomicReference<String> childThreadMdcValue = new AtomicReference<>(); final CountDownLatch latch = new CountDownLatch(1); new NamedThreadFactory("mdc-test-thread").newThread(() -> { childThreadMdcValue.set(MDC.get(MDC_KEY)); latch.countDown(); }).start();  latch.await(1, TimeUnit.SECONDS); "<AssertPlaceHolder>"; }
[*] target: assertNull(childThreadMdcValue.get())
[-] pred: org. junit. Assert. assertNull ( childThreadMdcValue. get ( ) )
************************************
[+] input: testGenerate() { String generatedName = EnglishNameGenerator.getInstance().generate(); "<AssertPlaceHolder>"; System.err.println(generatedName); }
[*] target: assertNotNull(generatedName)
[-] pred: org. junit. Assert. assertNotNull ( generatedName )
************************************
[+] input: isCallbackTokenResponseType() { boolean res = Oauth2Util.isCallback(request, new OAuthConfig() .setResponseType(Oauth2ResponseType.TOKEN)); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(res)
[-] pred: org. junit. Assert. assertFalse ( res )
************************************
[+] input: encodesKeyToBase64() { String actual = message.getSerializedKey();  String expected = "CgMxMjMSA2FiYw==";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testSchedule() { Mockito.when(nodeClient.threadPool()).thenReturn(threadPool);  Mockito.doAnswer( invocation -> { Runnable task = invocation.getArgument(0); task.run(); return null; }) .when(threadPool) .schedule(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any()); AtomicBoolean isRun = new AtomicBoolean(false); Scheduler.schedule(nodeClient, () -> isRun.set(true)); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(isRun.get())
[-] pred: org. junit. Assert. assertTrue ( isRun. get ( ) )
************************************
[+] input: testRewriteMasterRecord() { for (int i = 0; i < 1000; ++i) { logManager.appendToLog(new MasterLogRecord(i)); } logManager.rewriteMasterRecord(new MasterLogRecord(77)); logManager.rewriteMasterRecord(new MasterLogRecord(999)); logManager.rewriteMasterRecord(new MasterLogRecord(-1));  Iterator<LogRecord> iter = logManager.iterator(); assertEquals(new MasterLogRecord(-1), iter.next()); for (int i = 1; i < 1000; ++i) { assertEquals(new MasterLogRecord(i), iter.next()); } "<AssertPlaceHolder>"; }
[*] target: assertFalse(iter.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iter. hasNext() )
************************************
[+] input: convertMultiPolygon_WithRedundantSpaces_ShouldConvert() { String wkt = "MULTIPOLYGON ( ((30 20, 45 40, 10 40, 30 20) ) , ((15 5, 40 10, 10 20, 5 10, 15 5)))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiPolygon", "coordinates":" + " [[[[30,20],[45,40],[10,40],[30,20]]],[[[15,5],[40,10],[10,20],[5,10],[15,5]]]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: Exception { AtomicInteger num = new AtomicInteger(0); CollectExecutorConfig config = new CollectExecutorConfig(); config.setCoreSize(10); config.setMaxSize(10); config.setQueueSize(500); config.setKeepAliveTime(3000); ExecutorService collectExecutor = config.collectExecutor(config); Assert."<AssertPlaceHolder>"; CountDownLatch countDownLatch = new CountDownLatch(COUNT); for (int i = 0; i < COUNT; i++) { collectExecutor.submit(() -> { num.getAndIncrement(); countDownLatch.countDown(); }); } countDownLatch.await(); System.out.println(collectExecutor.isTerminated()); Assert.assertEquals(COUNT, num.get()); }
[*] target: assertNotNull(collectExecutor)
[-] pred: org. junit. Assert. assertNotNull ( collectExecutor )
************************************
[+] input: Exception {  Set<UserId> all_users = new HashSet<UserId>(); Set<UserId> worker_users = new TreeSet<UserId>(); Integer last_num_users = null; for (var w : this.workers) { AuctionMarkWorker worker = (AuctionMarkWorker) w; assertNotNull(w);  // Get the uninitialized profile AuctionMarkProfile profile = worker.getProfile(); "<AssertPlaceHolder>"; assertTrue(profile.users_per_itemCount.isEmpty());  // Then try to initialize it profile.loadProfile(worker); assertFalse(profile.users_per_itemCount.isEmpty()); int num_users = profile.users_per_itemCount.getSampleCount(); if (last_num_users != null) assertEquals(last_num_users.intValue(), num_users); else { System.err.println("Number of Users: " + num_users); }  worker_users.clear(); for (int i = 0; i < num_users; i++) { UserId user_id = profile.getRandomSellerId(worker.getId()); assertNotNull(user_id); assertFalse( worker.getId() + " -> " + user_id.toString() + " / " + user_id.encode(), all_users.contains(user_id)); worker_users.add(user_id); } // FOR assertFalse(worker_users.isEmpty()); all_users.addAll(worker_users); last_num_users = num_users; } // FOR }
[*] target: assertNotNull(profile)
[-] pred: org. junit. Assert. assertNotNull ( profile )
************************************
[+] input: Exception { String entityContent = "{\n" + "    "TxnId": 22736752,\n" + "    "Label": "119d4ca5-a920-4dbb-84ad-64e062a449c5",\n" + "    "Status": "Success",\n" + "    "Message": "OK",\n" + "    "NumberTotalRows": 93,\n" + "    "NumberLoadedRows": 93,\n" + "    "NumberFilteredRows": 0,\n" + "    "NumberUnselectedRows": 0,\n" + "    "LoadBytes": 17227,\n" + "    "LoadTimeMs": 17575,\n" + "    "BeginTxnTimeMs": 0,\n" + "    "StreamLoadPlanTimeMs": 1,\n" + "    "ReadDataTimeMs": 0,\n" + "    "WriteDataTimeMs": 17487,\n" + "    "CommitAndPublishTimeMs": 86\n" + "}";  ObjectMapper objectMapper = new ObjectMapper(); // StreamLoadResponseBody does not contain all fields returned by StarRocks objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); // filed names in StreamLoadResponseBody are case-insensitive objectMapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true); StreamLoadResponse.StreamLoadResponseBody responseBody = objectMapper.readValue(entityContent, StreamLoadResponse.StreamLoadResponseBody.class);  Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(responseBody.getStreamLoadPlanTimeMs())
[-] pred: org. junit. Assert. assertNotNull ( responseBody. getStreamLoadPlanTimeMs() )
************************************
[+] input: shouldReturnEmptyJsonAsJsonString() { JsonDelete jsonDelete = new JsonDelete(); String jsonEvent = "{"k1":"v1","k2":["value1","value2","value3"]}"; String expectedJsonEvent = "{}"; String jPath = "$..*"; String actual = jsonDelete.eval(jsonEvent, jPath); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
[+] input: testBeanSpecAnnotation() { annotationMapper.parseClassAnnotations(ClassWithBeanSpec.class.getAnnotations(), context); Object bean = context.get("bean"); "<AssertPlaceHolder>"; assertEquals(Date.class, bean.getClass()); assertEquals(123, ((Date) bean).getTime()); }
[*] target: assertNotNull(bean)
[-] pred: org. junit. Assert. assertNotNull ( bean )
************************************
[+] input: testPath() { final DynamicDAG<Integer> dag = new DynamicDAG<>(3.0 / 2.0); final int n = 25; boolean ok;  final int[] nodeOrder = IntArrays.shuffle(Util.identity(n), new XoRoShiRo128PlusRandom(0)); @SuppressWarnings("unchecked") final DOLNode<DAGNode<Integer>>[] x = new DOLNode[n]; for (int i = 0; i < n; i++) { x[nodeOrder[i]] = dag.addNode(nodeOrder[i]); Assert.assertTrue(dag.dynamicOrderedList.assertList()); } final int[] arcOrder = IntArrays.shuffle(Util.identity(n), new XoRoShiRo128PlusRandom(0)); for (int i = 0; i < n; i++) if (arcOrder[i] < n - 1) { ok = dag.addArc(x[arcOrder[i]], x[arcOrder[i] + 1]); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dag.dynamicOrderedList.assertList()); } // Now test for order for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) Assert.assertEquals(Integer.compare(i, j), DynamicOrderedList.compare(x[i], x[j]));  }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
[+] input: shouldDoDefaultFormatForCreateStatementWhenIndentSubstatementsInParenthesesOff() { //given String inputString = "CREATE TABLE Persons (PersonID int, LastName varchar(255), FirstName varchar(255), Address varchar(255), City varchar(255));"; String expectedString = "CREATE TABLE Persons (PersonID int," + lineBreak + "LastName varchar(255)," + lineBreak + "FirstName varchar(255)," + lineBreak + "Address varchar(255)," + lineBreak + "City varchar(255));";  Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_BREAK_BEFORE_CLOSE_BRACKET))).thenReturn(false);  //when String formattedString = formatter.format(inputString, configuration);  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
[+] input: shouldReturnNullIfValueIsNotPresentInGivenMap() { ArrayList<Row> rows = new ArrayList<>(); Row row1 = new Row(2); int expectedValue = 4; row1.setField(0, "payment_switch"); row1.setField(1, "PB-123456"); Row row2 = new Row(2); row2.setField(0, "weighted_abuse_probability"); row2.setField(1, expectedValue); String givenKey = "abuse_probability";  rows.add(row1); rows.add(row2);  MapGet valueForKeyInMap = new MapGet(); Object actualValue = valueForKeyInMap.eval(rows.toArray(new Row[0]), givenKey);  "<AssertPlaceHolder>"; }
[*] target: assertNull(actualValue)
[-] pred: org. junit. Assert. assertNull ( actualValue )
************************************
[+] input: testBuildForegroundNotificationWithoutPermission() { permissionManager.setHasPostNotificationsPermission(false); Notification notification = notificationHandler.buildForegroundNotification(); "<AssertPlaceHolder>"; }
[*] target: assertNull(notification)
[-] pred: org. junit. Assert. assertNull ( notification )
************************************
[+] input: testSerialize() { List<TableMeta.FieldMeta> fieldMetas = Lists.newArrayList( new TableMeta.FieldMeta("c1", "char", true, true, "xxx", false, "xxx"), new TableMeta.FieldMeta("c2", "char", true, true, "xxx", false, "xxx"), new TableMeta.FieldMeta("c3", "char", true, true, "xxx", false, "xxx") );  Map<String, TableMeta.IndexMeta> indexMetaMap = Maps.newHashMap(); indexMetaMap.put("idx1", new TableMeta.IndexMeta("idx1", "INDEX", false)); indexMetaMap.put("idx2", new TableMeta.IndexMeta("idx2", "INDEX", false)); indexMetaMap.put("idx3", new TableMeta.IndexMeta("idx3", "INDEX", false));  TableMeta tableMeta = new TableMeta(); tableMeta.setTable("t1"); tableMeta.setDdl("create table t1(id bigint)"); tableMeta.setCharset("utf8"); tableMeta.setSchema("d1"); tableMeta.setUseImplicitPk(true); tableMeta.setFields(fieldMetas); tableMeta.setIndexes(indexMetaMap);  DefaultQueryLog defaultQueryLog = new DefaultQueryLog( "d1", "create table t1", new Timestamp(System.currentTimeMillis()), 10000000, 1, DBMSAction.CREATE, System.currentTimeMillis()); defaultQueryLog.setFirstDdl(new AtomicBoolean(true)); defaultQueryLog.setParallelSeq(23); defaultQueryLog.setOptionValue("opt1", 200); defaultQueryLog.setTableMeta(tableMeta);  byte[] data = SerializationUtils.serialize(defaultQueryLog); DefaultQueryLog defaultQueryLog1 = SerializationUtils.deserialize(data); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(defaultQueryLog, defaultQueryLog1)
[-] pred: org. junit. Assert. assertEquals ( defaultQueryLog, defaultQueryLog1 )
************************************
[+] input: IOException { ApkModule apkModule = getApkModule(); Assert."<AssertPlaceHolder>"; File dir = TestUtils.getTempDir(); dir = new File(dir, "decode_json"); ApkModuleJsonDecoder decoder = new ApkModuleJsonDecoder(apkModule); decoder.decode(dir); mDir_json = dir; }
[*] target: assertNotNull(apkModule)
[-] pred: org. junit. Assert. assertNotNull ( apkModule )
************************************
[+] input: testGetMessageDefaultConstructor() { VetoException vetoException = new VetoException(); "<AssertPlaceHolder>"; assertEquals("undefined [severity=ERROR]", vetoException.getMessage()); assertEquals("undefined", vetoException.getDisplayMessage()); }
[*] target: assertNull(vetoException.getHtmlMessage())
[-] pred: org. junit. Assert. assertNull ( vetoException. getHtmlMessage() )
************************************
[+] input: IOException { final String basename = File.createTempFile(getClass().getSimpleName(), "test").toString(); final ImmutableGraph g = new ArrayListMutableGraph(new ErdosRenyiGraph(1000, .01, 0, false)).immutableView(); EFGraph.store(g, 1000, basename, 3, 1024, ByteOrder.nativeOrder(), null); final EFGraph efGraph = (EFGraph)ImmutableGraph.load(basename); assertEquals(g, efGraph);  for(int i = 0; i < 1000; i++) { for(int j = 0; j < 1000; j++) { LazyIntSkippableIterator sa = efGraph.successors(i); final int x = sa.skipTo(j); sa = efGraph.successors(i); for(;;) { final int y = sa.nextInt(); if (y >= j) { "<AssertPlaceHolder>"; break; } else if (y == -1) { if (x != LazyIntSkippableIterator.END_OF_LIST) fail(); break; } } } } new File(basename).delete(); new File(basename + EFGraph.GRAPH_EXTENSION).delete(); new File(basename + EFGraph.OFFSETS_EXTENSION).delete(); new File(basename + EFGraph.PROPERTIES_EXTENSION).delete();  }
[*] target: assertEquals(y, x)
[-] pred: org. junit. Assert. assertEquals ( y, x )
************************************
[+] input: testEmptyConstructor() { EndpointConfigEntry entry = new EndpointConfigEntry(); assertNull(entry.productCode()); assertNull(entry.regionCode()); "<AssertPlaceHolder>"; }
[*] target: assertNull(entry.domains())
[-] pred: org. junit. Assert. assertNull ( entry. domains() )
************************************
[+] input: getStructureViewBuilder_ginkgo() { GoFile file = (GoFile) myFixture.configureByFile("marker_test.go"); StructureViewBuilder structureViewBuilder = ginkgoStructureViewFactory.getStructureViewBuilder(file); "<AssertPlaceHolder>"; StructureView structureView = structureViewBuilder.createStructureView(null, file.getProject()); assertTrue(structureView.getTreeModel() instanceof GinkgoStructureViewModel); }
[*] target: assertNotNull(structureViewBuilder)
[-] pred: org. junit. Assert. assertNotNull ( structureViewBuilder )
************************************
[+] input: IOException { // [stripe 0] // Stripe: offset: 3 data: 6333874 rows: 240000 tail: 111 index: 4025 final int stripeId = 0; final int columnId = 2; final int[] rowGroupIds = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22};  final long rowsInStripe = orcTail.getStripes().get(stripeId).getNumberOfRows(); int groupsInStripe = (int) ((rowsInStripe + indexStride - 1) / indexStride);  CacheReader<Block> cacheReader = new CacheReaderImpl(stripeId, columnId, groupsInStripe);  // Initialize cache reader with empty map to forbid the block cache. cacheReader.initialize(new HashMap<>());  Assert.assertTrue(cacheReader.isInitialized());  // Check cached row group bitmap. boolean[] bitmap = cacheReader.cachedRowGroupBitmap(); for (boolean b : bitmap) { Assert.assertFalse(b); }  // collect block locations in this group. List<BlockLocation> locationList = new ArrayList<>(); for (int groupId : rowGroupIds) { final int rowCountInGroup = getRowCount(orcTail.getStripes().get(stripeId), groupId); for (int startPosition = 0; startPosition < rowCountInGroup; startPosition += DEFAULT_CHUNK_LIMIT) { int positionCount = Math.min(DEFAULT_CHUNK_LIMIT, rowCountInGroup - startPosition); locationList.add(new BlockLocation(groupId, startPosition, positionCount)); } }  // Check block existence for (BlockLocation location : locationList) { Block cached = cacheReader.getCache(location.rowGroupId, location.startPosition); Assert."<AssertPlaceHolder>"; } }
[*] target: assertNull(cached)
[-] pred: org. junit. Assert. assertNull ( cached )
************************************
[+] input: SQLException { Query.Field[] fields = TestResult.makeTestFields("col|count(*)", "varbinary|decimal"); VtResultSet resultSet = TestResult.makeTestResult(fields, "a|1", "a|1", "b|2", "c|3", "c|4"); FakePrimitive fp = new FakePrimitive(Lists.newArrayList(resultSet));  AbstractAggregateGen4.AggregateParams aggr = new AbstractAggregateGen4.AggregateParams(Engine.AggregateOpcodeG4.AggregateSum, 1); GroupByParams groupByParams = new GroupByParams(); groupByParams.setKeyCol(0); OrderedAggregateGen4Engine oa = new OrderedAggregateGen4Engine(false, Lists.newArrayList(aggr), false, 0, Lists.newArrayList(groupByParams), null, fp);  VtResultSet result = (VtResultSet) oa.execute(VtContext.background(), null, null, false).getVtRowList();  VtResultSet wantResult = TestResult.makeTestResult(fields, "a|2", "b|2", "c|7"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(wantResult, result)
[-] pred: org. junit. Assert. assertEquals ( wantResult, result )
************************************
[+] input: testMultipleAcquires() { OptimisticLock l = new OptimisticLock(); l.acquire(); l.acquire(); l.release(); assertTrue(l.isAcquired()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(l.isReleased())
[-] pred: org. junit. Assert. assertFalse ( l. isReleased() )
************************************
[+] input: testGetMethodPropertyAnnotationSetterOnly() { PropertyUtils propertyUtils = new PropertyUtils(); propertyUtils.setBeanAccess(BeanAccess.PROPERTY);  Property property = propertyUtils.getProperty(TestBean.class, "lastName"); TestAnnotation annotation = property.getAnnotation(TestAnnotation.class); "<AssertPlaceHolder>"; assertEquals("setter", annotation.value()); }
[*] target: assertNotNull(annotation)
[-] pred: org. junit. Assert. assertNotNull ( annotation )
************************************
[+] input: testTabletSetLargeMerge() { final int SetRange = 256; final int Blocks = 64;  TableSet[] tablesets = new TableSet[64];  for (int i = 0; i < tablesets.length; i++) { TableSet ts = new TableSet(); int setrng = i * SetRange;  for (int tid = 0; tid < SetRange; tid++) { ts.addTable(setrng + tid); }  tablesets[i] = ts; }  TableSet result = new TableSet(); for (TableSet ts : tablesets) { result = result.merge(ts); }  List<TableSet> expected = new ArrayList<>(); for (int tid = 0; tid < SetRange * Blocks; tid++) { expected.add(singleTableSet(tid)); } Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result.constituents())
[-] pred: org. junit. Assert. assertEquals ( expected, result. constituents ( ) )
************************************
[+] input: testNoElasticLogsBackend() { ElasticBackend elasticBackend = new ElasticBackend(); elasticBackend.setElasticLogsBackend(new NoElasticLogsBackend()); Map<String, String> actual = elasticBackend.getOtelConfigurationProperties(); Map<String, String> expected = Collections.emptyMap(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: getByNullKey() { JapCache japCache = new JapLocalCache(); String res = (String) japCache.get(null); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
[+] input: SQLException { Mockito.when(mockResults.getString("execlocation")).thenReturn("ALL_SEGMENTS"); GreenplumExternalTable table = new GreenplumExternalTable(mockSchema, mockResults); String expectedUriLocation = "ALL_SEGMENTS"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedUriLocation, table.getExecLocation())
[-] pred: org. junit. Assert. assertEquals ( expectedUriLocation, table. getExecLocation ( ) )
************************************
[+] input: shouldReturnKafkaEnvVarsPositive() { HashMap<String, String> systemEnvs = new HashMap<String, String>() {{ put("PATH", "/usr/local/bin"); put("SHELL", "/usr/local/bin/zsh"); put("source_kafka_consumer_config_fetch_min_bytes", "1"); put("source_kafka_consumer_config_ssl_keystore_location", "/home/user/.ssh/keystore"); put("SOURCE_KAFKA_CONSUMER_CONFIG_ENABLE_AUTO_COMMIT", "false");  }};  Map<String, String> expectedEnvVars = new HashMap<String, String>() {{ put("fetch.min.bytes", "1"); put("ssl.keystore.location", "/home/user/.ssh/keystore"); put("enable.auto.commit", "false"); }};  Map<String, String> actualEnvVars = KafkaEnvironmentVariables.parse(systemEnvs);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedEnvVars, actualEnvVars)
[-] pred: org. junit. Assert. assertEquals ( expectedEnvVars, actualEnvVars )
************************************
[+] input: Exception { String data = "0123äöü"; String expected = data.substring(0, 6); String actual = IOUtility.readString(newInputStream(data.getBytes("UTF-8")), "UTF-8", 6); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { final File file = File.createTempFile(FastBufferedReaderTest.class.getSimpleName(), "tmp"); file.deleteOnExit();  byte[] a = { '0', '\n', '1', '\n' }; BinIO.storeBytes(a, file); it.unimi.dsi.big.io.FileLinesByteArrayCollection flbac = new it.unimi.dsi.big.io.FileLinesByteArrayCollection(file.toString()); it.unimi.dsi.big.io.FileLinesByteArrayCollection.FileLinesIterator iterator = flbac.iterator(); assertArrayEquals(new byte[] { '0' }, iterator.next()); assertArrayEquals(new byte[] { '1' }, iterator.next()); assertFalse(iterator.hasNext()); assertEquals(2, flbac.size64());  a = new byte[] { '0', '\n', '1' }; BinIO.storeBytes(a, file); flbac = new it.unimi.dsi.big.io.FileLinesByteArrayCollection(file.toString()); assertEquals(2, flbac.size64()); iterator = flbac.iterator(); assertArrayEquals(new byte[] { '0' }, iterator.next()); assertTrue(iterator.hasNext()); assertArrayEquals(new byte[] { '1' }, iterator.next()); assertFalse(iterator.hasNext()); assertFalse(iterator.hasNext()); iterator.close();  a = new byte[1000000]; Arrays.fill(a, (byte)'A'); BinIO.storeBytes(a, file); flbac = new it.unimi.dsi.big.io.FileLinesByteArrayCollection(file.toString()); assertEquals(1, flbac.size64()); iterator = flbac.iterator(); assertArrayEquals(a, iterator.next()); "<AssertPlaceHolder>";  file.delete(); }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext ( ) )
************************************
[+] input: testReadString() { String expected = "0123"; String actual = IOUtility.readString(newReader(expected)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testRunAutoSuggest() { String resp = engineService.runAutoSuggest(new EngineService.RunScriptParams().withSql("s").withAsync("false")); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(resp)
[-] pred: org. junit. Assert. assertNotNull ( resp )
************************************
[+] input: no_DoTable_Miss_DoDb_Hit_WildDoTable_Ignore() { ReplicaMeta replicaMeta = new ReplicaMeta(); replicaMeta.setDoDb("full_src_1, rpl"); replicaMeta.setIgnoreDb("full_src_1, rpl"); replicaMeta.setDoTable(""); replicaMeta.setIgnoreTable("full_src_1.t1, full_src_1.t2"); replicaMeta.setWildDoTable("d%.tb\\_charset%, d%.col\\_charset%"); replicaMeta.setWildIgnoreTable("d%.tb\\_charset%, d%.col\\_charset%"); replicaMeta.setRewriteDb(""); printChangeFilterSql(replicaMeta);  // init ReplicaFilter filter = new ReplicaFilter(replicaMeta); filter.init();  DefaultRowChange rowChange = new DefaultRowChange(); rowChange.setAction(DBMSAction.INSERT);  rowChange.setSchema("dutf8"); rowChange.setTable("tb_charset_gbk"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(filter.ignoreEvent(rowChange))
[-] pred: org. junit. Assert. assertTrue ( filter. ignoreEvent ( rowChange ) )
************************************
[+] input: hasTypeShouldBeFalseWhenTypeIsEmpty() { pgSourceConfig = getPgSourceConfigBuilder() .setType("") .createPgSourceConfig(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(pgSourceConfig.hasType())
[-] pred: org. junit. Assert. assertFalse ( pgSourceConfig. hasType() )
************************************
[+] input: shouldProcessForParametrizedHeaders() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.MESSAGE); when(httpSinkConfig.getSinkHttpParameterPlacement()).thenReturn(HttpSinkParameterPlacementType.HEADER);  parameterizedHeaderRequest = new ParameterizedHeaderRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedHeaderRequest.canProcess(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(canProcess)
[-] pred: org. junit. Assert. assertTrue ( canProcess )
************************************
[+] input: testAddMilliseconds() { TimeZone.setDefault(TimeZone.getTimeZone("GMT+1")); assertEquals("Test only works without day Daylight Saving Time", 0, TimeZone.getDefault().getDSTSavings());  for (int i = 0; i < SECONDS_IN_DAY; i++) { Calendar cal = Calendar.getInstance(); cal.set(Calendar.DATE, 1); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); cal.set(Calendar.MILLISECOND, 0); String result = stringOf(DateUtility.addMilliseconds(cal.getTime(), i)); cal.set(Calendar.MILLISECOND, i); String expected = stringOf(cal.getTime()); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: filteredListSizeIsCorrect1() { int k = 3; // instantiate random filter with parameter k KLeastExecutedFilter filter = new KLeastExecutedFilter(k); // call filter method to obtain filtered list List<MutationInstance> filteredList = filter.filterMutants(toFilter); // filtered list should be of size k "<AssertPlaceHolder>"; }
[*] target: assertEquals(k, filteredList.size())
[-] pred: org. junit. Assert. assertEquals ( k, filteredList. size ( ) )
************************************
[+] input: testToString() { ForwarderSwitch device = new ForwarderSwitch(3, null, 5, new IdentityFlowletIntermediary()); device.addConnection(topology.getPort(3, 1)); device.addConnection(topology.getPort(3, 4)); device.setDestinationToNextSwitch(0, 1); device.setDestinationToNextSwitch(1, 1); device.setDestinationToNextSwitch(2, 4); device.setDestinationToNextSwitch(4, 4); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(device.toString())
[-] pred: org. junit. Assert. assertNotNull ( device. toString ( ) )
************************************
[+] input: rtspPauseRequestTest() { String expect = "PAUSE rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspPauseRequest request = new RtspPauseRequest(uri, "1273222592", this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: testHealthCheckTimeout() { printComment("7. HealthCheck Test when health check timeout"); printComment("a. Get Health"); HealthCheck hc = getHealthCheck();  printComment("b. Add a no-serving Tablet");  MockTablet mockTablet = MockTablet.buildMockTablet(grpcCleanup, "cell", 0, "a", "k", "s", portMap, Topodata.TabletType.REPLICA); hc.addTablet(mockTablet.getTablet());  sleepMillisSeconds(200); Assert.assertEquals("Wrong Tablet data", 1, hc.getHealthByAliasCopy().size()); Assert.assertEquals("Wrong Healthy Tablet data", 0, hc.getHealthyCopy().size()); Assert.assertEquals(1, mockTablet.getQueryServer().getConnectCount());  printComment("c. Modify the status of Tablet to serving"); sendOnNextMessage(mockTablet, Topodata.TabletType.REPLICA, true, 0, 0.5, 1);  sleepMillisSeconds(200);  Assert.assertEquals("Wrong Tablet data", 1, hc.getHealthByAliasCopy().size()); Assert.assertEquals("Wrong Healthy Tablet data", 1, hc.getHealthyCopy().size());  printComment("d. Sleep and wait for check timeout");  sleepMillisSeconds(90 * 1000); Assert.assertEquals("Wrong Tablet data", 1, hc.getHealthByAliasCopy().size()); Assert.assertEquals("Wrong Healthy Tablet data", 1, hc.getHealthyCopy().size()); // user shouldn't get a checking timeout tablet List<TabletHealthCheck> healthCheckList = hc.getHealthyTabletStats(Query.Target.newBuilder().setKeyspace("k").setShard("s").setTabletType(Topodata.TabletType.REPLICA).build()); Assert."<AssertPlaceHolder>"; // server should receive retrying connect request if (mockTablet.getQueryServer().getConnectCount() < 2) { Assert.fail("HealthCheck should try to reconnect tablet query service"); }  MockTablet.closeQueryService(mockTablet); }
[*] target: assertEquals(0, healthCheckList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, healthCheckList. size ( ) )
************************************
[+] input: byteArrayLength() { PlcStopParameter parameter = new PlcStopParameter(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(7, parameter.byteArrayLength())
[-] pred: org. junit. Assert. assertEquals ( 7, parameter. byteArrayLength() )
************************************
[+] input: shouldMapEmptyDataWhenFieldIsInvalidInTheQuery() { String[] columnNames = {"invalid"}; String outputProtoKey = "org.raystack.dagger.consumer.TestBookingLogKey"; String outputProtoMessage = "org.raystack.dagger.consumer.TestBookingLogMessage"; ProtoSerializer serializer = new ProtoSerializer(outputProtoKey, outputProtoMessage, columnNames, stencilClientOrchestrator); Row element = new Row(1); element.setField(0, "order_number");  byte[] valueBytes = serializer.serializeValue(element);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, valueBytes.length)
[-] pred: org. junit. Assert. assertEquals ( 0, valueBytes. length )
************************************
[+] input: shouldHaveNoError() { LateRecordDropError lateRecordDropError = new LateRecordDropError(initContext); "<AssertPlaceHolder>"; }
[*] target: assertFalse(lateRecordDropError.hasException())
[-] pred: org. junit. Assert. assertFalse ( lateRecordDropError. hasException() )
************************************
[+] input: testNullUrlConfig() { HttpServiceTunnel tunnel = new HttpServiceTunnel(); assertNull(tunnel.getServerUrl()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(tunnel.isActive())
[-] pred: org. junit. Assert. assertFalse ( tunnel. isActive() )
************************************
[+] input: testFindByLastNameIgnoreCase() { List<Student> expectedList = entities() .map(repository::save) .filter(student -> student.getLastName().equalsIgnoreCase("Stark")) .collect(Collectors.toList());  List<Student> actualList = repository.findByLastNameIgnoreCase("Stark"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedList, actualList)
[-] pred: org. junit. Assert. assertEquals ( expectedList, actualList )
************************************
[+] input: testVerifyRequestRequestWithNullDataAndRuleMisMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", null); subject.put("verify_aal", "25"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
[+] input: convertPoint_SecondIsRoundNumber_ShouldConvert() { String wkt = "POINT(12.2 13)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [12.2,13]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: Exception { Class<?>[] targets = { MockObject1.class, MockObject2.class, }; Class<?>[] params = {MockObject1.class};  for (Class<?> targetClass : targets) { Constructor<?> c = ClassUtil.getConstructor(targetClass, params); "<AssertPlaceHolder>"; } // FOR }
[*] target: assertNotNull(c)
[-] pred: org. junit. Assert. assertNotNull ( c )
************************************
[+] input: test() { FilterBlacklistTableFilter filter = new FilterBlacklistTableFilter("cdc_blacklist_db.*\\.cdc_black_table.*"); boolean flag = filter.doFilter1("cdc_blacklist_db", "cdc_black_table"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
[+] input: getContent() { String expectedContent = "{"foo":"bar"}"; StringBuilder actualContent = new StringBuilder();  underTest = new SignableRequestImpl(new Request.Builder() .url("https://www.amazon.com") .post(RequestBody.create(MediaType.parse("application/json; charset=utf-8"), expectedContent)) .build());  try(Scanner scanner = new Scanner(underTest.getContent())){ while(scanner.hasNext()) { actualContent.append(scanner.next()); } }  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedContent, actualContent.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedContent, actualContent. toString ( ) )
************************************
[+] input: testToString() { Field f = new Field("aliases", "string[]", true, false); assertEquals("Field [name=aliases, type=string[], isArray=true, required=false]", f.toString()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(f.isArray())
[-] pred: org. junit. Assert. assertTrue ( f. isArray() )
************************************
[+] input: testConcatAndSplitByteArrays() { byte[] first = new byte[] {1, 2, 3, 4}; byte[] second = new byte[] {1, 2, 3};  byte[] concat = CommonUtils.concatByteArrays(first, second); assertEquals(15, concat.length);  List<byte[]> split = CommonUtils.splitByteArrays(concat); "<AssertPlaceHolder>"; assertArrayEquals(first, split.get(0)); assertArrayEquals(second, split.get(1)); }
[*] target: assertEquals(2, split.size())
[-] pred: org. junit. Assert. assertEquals ( 2, split. size ( ) )
************************************
[+] input: testGetFieldPropertyAnnotation() { PropertyUtils propertyUtils = new PropertyUtils(); propertyUtils.setBeanAccess(BeanAccess.FIELD);  Property name = propertyUtils.getProperty(TestBean.class, "name");  TestAnnotation annotation = name.getAnnotation(TestAnnotation.class); "<AssertPlaceHolder>"; assertEquals("field", annotation.value()); }
[*] target: assertNotNull(annotation)
[-] pred: org. junit. Assert. assertNotNull ( annotation )
************************************
[+] input: shouldNotProvideSimpleGroupDeserializerWhenSourceNameIsUnsupported() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_SOURCE, SourceType.UNBOUNDED)}); when(streamConfig.getDataType()).thenReturn("PROTO");  SimpleGroupDeserializerProvider provider = new SimpleGroupDeserializerProvider(streamConfig, configuration, stencilClientOrchestrator);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(provider.canProvide())
[-] pred: org. junit. Assert. assertFalse ( provider. canProvide() )
************************************
[+] input: shouldNotProcessIfParameterPlacedInHeader() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.MESSAGE); when(httpSinkConfig.getSinkHttpParameterPlacement()).thenReturn(HttpSinkParameterPlacementType.HEADER);  parameterizedURIRequest = new ParameterizedUriRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedURIRequest.canProcess();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
[+] input: generateCodeIdTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateCodeIdTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(3, obj.size()); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("id_token")); Assert.assertTrue(obj.containsKey("state")); }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
[+] input: IOException { String fileName = "size-test.txt"; String content = "size_test"; long expect = -1; long actual = fileSystem.size(fileName); Assert.assertEquals(expect, actual); File f = fileSystem.newFile(fileName); f.createNewFile(); FileOutputStream fos = new FileOutputStream(f); fos.write(content.getBytes()); expect = content.length(); actual = fileSystem.size(fileName); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: shouldBeEmptyWhenAllConfigsAreEmpty() { ExternalSourceConfig externalSourceConfig = new ExternalSourceConfig(null, null, null, null);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(externalSourceConfig.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( externalSourceConfig. isEmpty() )
************************************
[+] input: Exception { XADataSource dataSource = dataSourceFactory.createXADataSource(null); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
[+] input: shouldProperlySerializeMessageToTemplateWithSingleUnknownField() { String template = "{"test":"$.vehicle_type"}"; StencilClient stencilClient = StencilClientFactory.getClient(); protoParser = stencilClient.getParser(TestAggregatedSupplyMessage.class.getName()); MessageToTemplatizedJson messageToTemplatizedJson = MessageToTemplatizedJson .create(firehoseInstrumentation, template, protoParser); Message message = new Message(Base64.getDecoder().decode(logKey.getBytes()), Base64.getDecoder().decode(logMessage.getBytes()), "sample-topic", 0, 100);  String serializedMessage = messageToTemplatizedJson.serialize(message); String expectedMessage = "{"test":"BIKE"}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMessage, serializedMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, serializedMessage )
************************************
[+] input: shouldNotBeAbleToBuildSourceIfSourceTypeIsUnsupported() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_SOURCE, SourceType.BOUNDED)}); KafkaDaggerSource daggerSource = new KafkaDaggerSource(streamConfig, configuration, daggerDeserializer);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(daggerSource.canBuild())
[-] pred: org. junit. Assert. assertFalse ( daggerSource. canBuild ( ) )
************************************
[+] input: test_scanParameterizedType_2() { Map<String, Type> m = ReflectUtil.scanParameterizedType(TestSubClass1.class, CommonInterface.class); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(m)
[-] pred: org. junit. Assert. assertNull ( m )
************************************
[+] input: testAllocateReservedMemory() { MemoryPool root = new MemoryPool("root", maxLimit, MemoryType.OTHER); long allocatedSize = 0; for (int i = 0; i < allocateCount; i++) { allocatedSize += testAllocateMemory(root, true); Assert.assertEquals(allocatedSize, root.getMemoryUsage()); } root.destroy(); Assert.assertEquals(0L, root.getMemoryUsage()); Assert.assertEquals(allocatedSize, root.getMaxMemoryUsage()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(root.isDestoryed())
[-] pred: org. junit. Assert. assertTrue ( root. isDestoryed() )
************************************
[+] input: mp4MvexBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x28, 0x6D, 0x76, 0x65, 0x78,  0x00, 0x00, 0x00, 0x20, 0x74, 0x72, 0x65, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, }; Mp4MvexBox box = new Mp4MvexBox(Collections.singletonList(this.trackInfo)); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: intTest() { int[] values = new int[]{Integer.MIN_VALUE, -99999999, -9999, -100, -2, -1, 0, 1, 2, 100, 9999, 99999999, Integer.MAX_VALUE}; ByteBuf byteBuf = Unpooled.buffer(); for (int value : values) { ByteBufUtils.writeInt(byteBuf, value); int result = ByteBufUtils.readInt(byteBuf); Assert.assertEquals(result, value); }  for (int value : values) { ByteBufUtils.writeIntBox(byteBuf, value); int result = ByteBufUtils.readIntBox(byteBuf); Assert."<AssertPlaceHolder>"; } }
[*] target: assertEquals(result, value)
[-] pred: org. junit. Assert. assertEquals ( result, value )
************************************
[+] input: toHexString() { String expected = "1A 6B DE 8C"; byte[] data = new byte[]{(byte) 0x1A, (byte) 0x6B, (byte) 0xDE, (byte) 0x8C}; String actual = HexUtil.toHexString(data); assertEquals(expected, actual);  expected = "A1 49 AB DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data); assertEquals(expected, actual);  expected = "A1|49|AB|DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data,"|"); assertEquals(expected, actual);  expected = "A1-49-AB-DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data,"-"); assertEquals(expected, actual);  expected = "A1@49@AB@DF"; data = new byte[]{(byte) 0xA1, (byte) 0x49, (byte) 0xAB, (byte) 0xDF}; actual = HexUtil.toHexString(data,"@"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldReturnFalseIfFieldDescriptorOtherThanEnumTypeIsPassed() { Descriptors.FieldDescriptor otherFieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("order_number"); EnumHandler enumHandler = new EnumHandler(otherFieldDescriptor);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(enumHandler.canHandle())
[-] pred: org. junit. Assert. assertFalse ( enumHandler. canHandle() )
************************************
[+] input: testMd5() { String str = "a-string-to-hash"; String expectedValue = "c6b763343cfeada6a408772701329d30";  String actualValue = SignatureMethodEnum.MD5.calcSign(str);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualValue )
************************************
[+] input: testTimestamp() {  final TimestampType dataType = new TimestampType(TEST_SCALE); TimestampBlockBuilder timestampBlockBuilder = new TimestampBlockBuilder(TEST_SIZE, dataType, new ExecutionContext());  // write List<String> values = IntStream.range(0, TEST_SIZE) .mapToObj( i -> RandomTimeGenerator.generateDatetimeString(1) ) .map( l -> R.nextInt() % 4 == 0 ? null : (String) l.get(0) ) .map(String.class::cast) .collect(Collectors.toList());  values.forEach(timestampBlockBuilder::writeString); Block block = timestampBlockBuilder.build();  // serialization & deserialization TimestampBlockEncoding encoding = new TimestampBlockEncoding(); SliceOutput sliceOutput = new DynamicSliceOutput(1 << 10); encoding.writeBlock(sliceOutput, block);  Slice slice = sliceOutput.slice(); Block block1 = encoding.readBlock(slice.getInput());  IntStream.range(0, TEST_SIZE) .forEach( i -> { boolean isEqual = block.equals(i, block1, i); Assert."<AssertPlaceHolder>"; } ); }
[*] target: assertTrue(isEqual)
[-] pred: org. junit. Assert. assertTrue ( isEqual )
************************************
[+] input: test_serialized_deserialize_all_test_config() { GinkgoRunConfigurationOptions configOptions = new GinkgoRunConfigurationOptions(); configOptions.setGinkgoExecutable("ginkgo"); configOptions.setWorkingDir("/workspace"); configOptions.setEnvData(EnvironmentVariablesData.DEFAULT); configOptions.setGinkgoAdditionalOptions("-race"); configOptions.setGinkgoScope(GinkgoScope.ALL); configOptions.setFocusTestExpression(""); configOptions.setTestNames(Arrays.asList("ginkgo all")); configOptions.setGoToolOptions("build tool options"); Element element = new Element("ginkgo_config");  GinkgoSerializationUtil.writeXml(element, configOptions); GinkgoRunConfigurationOptions result = GinkgoSerializationUtil.readXml(element);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(configOptions, result)
[-] pred: org. junit. Assert. assertEquals ( configOptions, result )
************************************
[+] input: shouldNotHaveInternalSourceWhenInternalSourceIsEmpty() { defaultPostProcessorConfig = new PostProcessorConfig(defaultExternalSourceConfig, null, defaultInternalSource); "<AssertPlaceHolder>"; }
[*] target: assertFalse(defaultPostProcessorConfig.hasInternalSource())
[-] pred: org. junit. Assert. assertFalse ( defaultPostProcessorConfig. hasInternalSource() )
************************************
[+] input: pesquisarCliente() { Cliente clienteConsultado = clienteDao.consultar(cliente.getCpf()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(clienteConsultado)
[-] pred: org. junit. Assert. assertNotNull ( clienteConsultado )
************************************
[+] input: canDeserializeSourceAsString() { String json = "{"query":{"match_all":{}},"_source":"_id","size":1}";  SearchRequest searchRequest = fromJson(json, SearchRequest._DESERIALIZER);  SourceConfig _source = searchRequest.source(); assertNotNull(_source); assertTrue(_source.isFilter());  SourceFilter filter = _source.filter(); assertNotNull(filter);  List<String> includes = filter.includes(); "<AssertPlaceHolder>"; assertEquals("_id", includes.get(0));  assertTrue(filter.excludes().isEmpty()); }
[*] target: assertEquals(1, includes.size())
[-] pred: org. junit. Assert. assertEquals ( 1, includes. size ( ) )
************************************
[+] input: convertPolygon_WithRedundantSpaces_ShouldConvert() { String wkt = " POLYGON  ( (30  10, 40    40 , 20 40, 10  20, 30 10 ) ) "; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Polygon", "coordinates": [[[30,10],[40,40],[20,40],[10,20],[30,10]]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: Exception { final SubscriptionConfig config = new SubscriptionConfig(subNodeName, home, subHostPortPair, feederHostPortPair, groupName, groupUUID, NodeType.EXTERNAL);  for (EntryRequestType type : EntryRequestType.values()) { config.setStreamMode(type); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(type, config.getStreamMode())
[-] pred: org. junit. Assert. assertEquals ( type, config. getStreamMode() )
************************************
[+] input: testGetNodeCountNoNodes() { ITree tree = mock(ITree.class); TreeEvent event = new TreeEvent(tree, TreeEvent.TYPE_NODE_ACTION); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, event.getNodeCount())
[-] pred: org. junit. Assert. assertEquals ( 0, event. getNodeCount() )
************************************
[+] input: Exception { this.rpcSofaTracer.startRpc(sofaRequest);  SofaTraceContext sofaTraceContext = SofaTraceContextHolder.getSofaTraceContext(); SofaTracerSpan sofaTracerSpan = sofaTraceContext.pop(); "<AssertPlaceHolder>"; System.err.println("\n" + sofaTracerSpan); }
[*] target: assertNotNull(sofaTracerSpan)
[-] pred: org. junit. Assert. assertNotNull ( sofaTracerSpan )
************************************
[+] input: Exception { StarRocksTable oldTable = catalog.getTable(DB_NAME, tableName).orElse(null); assertNotNull(oldTable); List<String> dropColumns = Arrays.asList("c2", "c3"); catalog.alterDropColumns(DB_NAME, tableName, dropColumns, 60); StarRocksTable newTable = catalog.getTable(DB_NAME, tableName).orElse(null); "<AssertPlaceHolder>";  List<StarRocksColumn> expectedColumns = oldTable.getColumns().stream() .filter(column -> !dropColumns.contains(column.getColumnName())) .collect(Collectors.toList()); assertEquals(expectedColumns, newTable.getColumns()); }
[*] target: assertNotNull(newTable)
[-] pred: org. junit. Assert. assertNotNull ( newTable )
************************************
[+] input: test() { final SummaryStats summaryStats = new SummaryStats(); summaryStats.add(0); assertEquals(0, summaryStats.sum(), 0); assertEquals(0, summaryStats.mean(), 0); assertEquals(0, summaryStats.variance(), 0); assertEquals(0, summaryStats.min(), 0); assertEquals(0, summaryStats.max(), 0); assertEquals(1, summaryStats.size64());  summaryStats.add(1); assertEquals(1, summaryStats.sum(), 0); assertEquals(.5, summaryStats.mean(), 0); assertEquals(.25, summaryStats.variance(), 0); assertEquals(0, summaryStats.min(), 0); assertEquals(1, summaryStats.max(), 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(2, summaryStats.size64())
[-] pred: org. junit. Assert. assertEquals ( 2, summaryStats. size64() )
************************************
[+] input: shouldFetchValueForFieldForFieldDescriptorOfTypeByteString() { ByteString actualValue = ByteString.copyFromUtf8("test");  Descriptors.FieldDescriptor fieldDescriptor = TestMessageEnvelope.getDescriptor().findFieldByName("log_key"); ByteStringHandler byteStringHandler = new ByteStringHandler(fieldDescriptor); Object value = byteStringHandler.parseObject(actualValue);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
[+] input: shouldProcessBaseCase() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.DISABLED);  simpleRequest = new SimpleRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType); boolean canProcess = simpleRequest.canProcess(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(canProcess)
[-] pred: org. junit. Assert. assertTrue ( canProcess )
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMisMatch2() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "2."); subject.put("userId", "123458"); subject.put("verify_userId", "12345[6|7]"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
[+] input: toByteArray() { DataItem dataItem = new DataItem(); dataItem.setReturnCode(EReturnCode.from((byte) 0xFF)); dataItem.setVariableType(EDataVariableType.BYTE_WORD_DWORD); dataItem.setCount(1); dataItem.setData(new byte[1]); ReadWriteDatum datum = new ReadWriteDatum(); datum.getReturnItems().add(dataItem); byte[] actual = datum.toByteArray(); byte[] expect = {(byte) 0xFF, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0x00}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: FilterException { Message message = new Message(key.toByteArray(), this.testMessage.toByteArray(), "topic1", 0, 100); filter = new JexlFilter(kafkaConsumerConfig, firehoseInstrumentation); FilteredMessages filteredMessages = filter.filter(Arrays.asList(message)); FilteredMessages expectedMessages = new FilteredMessages(); expectedMessages.addToValidMessages(message); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMessages, filteredMessages)
[-] pred: org. junit. Assert. assertEquals ( expectedMessages, filteredMessages )
************************************
[+] input: IOException { String pemPathString = "src/test/java/unit/signature/Ed25519PrivateKeyExample.pem";  String payload = "timeInForce=GTC&quantity=0.2&price=30000&symbol=BTCUSDT&side=SELL&type=LIMIT&timestamp=1683189275000"; String expectedSignature = "kJs8urXFQ/GkR/hQ+ukZMFwH9H8oe7Ec/sap6pFIB/7HHHoh5mKVQT1zLVaRl7QdJLjNB2QB4PGZPflubUCHBA==";  Ed25519SignatureGenerator ed25519SignatureGenerator = new Ed25519SignatureGenerator(pemPathString); String actualSignature = ed25519SignatureGenerator.getSignature(payload); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSignature, actualSignature)
[-] pred: org. junit. Assert. assertEquals ( expectedSignature, actualSignature )
************************************
[+] input: ketoneTest() { ContextRx contextRx = new ContextRx(JoH.hexStringToByteArray("02040006")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(contextRx.ketone())
[-] pred: org. junit. Assert. assertTrue ( contextRx. ketone() )
************************************
[+] input: testDeprecatedBinaryFormat() { PrintStream originalOut = System.out; try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); System.setOut(new PrintStream(outputStream)); OptionsMetadata options = new OptionsMetadata(new String[] {"-p p", "-i i", "-b"}); "<AssertPlaceHolder>";  assertEquals( "Forcing the server to return results using the binary format is a violation " + "of the PostgreSQL wire-protocol. Using this option can cause unexpected errors.\nIt is " + "recommended not to use the -b option." + System.lineSeparator(), outputStream.toString()); } finally { System.setOut(originalOut); } }
[*] target: assertTrue(options.isBinaryFormat())
[-] pred: org. junit. Assert. assertTrue ( options. isBinaryFormat() )
************************************
[+] input: IOException { HttpURLConnection connection = Mockito.mock(HttpURLConnection.class); when(connection.getInputStream()).thenReturn(null); when(connection.getOutputStream()).thenReturn(new ByteArrayOutputStream()); when(connection.getResponseCode()).thenReturn(200); try (ResponseInputStream response = HttpClientDefault.request(connection, new byte[0])) { "<AssertPlaceHolder>"; assertEquals(-1, response.read()); assertTrue(response.headers().isEmpty()); } }
[*] target: assertEquals(200, response.statusCode())
[-] pred: org. junit. Assert. assertEquals ( 200, response. statusCode ( ) )
************************************
[+] input: testFindByLastName() { List<Student> expectedList = entities() .map(repository::save) .filter(student -> student.getLastName().equals("Stark")) .collect(Collectors.toList());  List<Student> actualList = repository.findByLastName("Stark");  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedList, actualList)
[-] pred: org. junit. Assert. assertEquals ( expectedList, actualList )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x05, (byte) 0x00, (byte) 0xAC, (byte) 0xFF, (byte) 0x00}; MbWriteSingleCoilResponse mb = new MbWriteSingleCoilResponse(); mb.setFunctionCode(EMbFunctionCode.WRITE_SINGLE_COIL); mb.setAddress(172); mb.setValue(new byte[]{(byte) 0xFF, (byte) 0x00}); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: rowShouldEqualToOtherRowWithSimilarFloat() { Row row1 = new Row(); Row row2 = new Row(); row1.add(1.000001); row2.add(1.000002); "<AssertPlaceHolder>"; assertEquals(row2, row1); }
[*] target: assertEquals(row1, row2)
[-] pred: org. junit. Assert. assertEquals ( row1, row2 )
************************************
[+] input: createResponse1() { String expect = "Digest username="q", realm="test", nonce="N6yEOiDGTvOx9hwloHW7AQ==", uri="/portal/applications", response="bc3662d7309bdf68b5f6684647bd17e2", qop=auth, nc=00000001, cnonce="04fefcb40dae7db4""; UsernamePasswordCredential credential = new UsernamePasswordCredential("q", "q"); DigestAuthenticator authenticator = new DigestAuthenticator(credential); authenticator.addServerInfo("test", "auth", "N6yEOiDGTvOx9hwloHW7AQ==", false); authenticator.addClientInfo("/portal/applications", "GET", "04fefcb40dae7db4"); String actual = authenticator.createResponse(); "<AssertPlaceHolder>";  }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: testFormatSummary() { repository.addSample(NAME, 100); String summary = repository.formatSummary(); ConsolePrinter.printStandard(summary); String expectedSummary = "CounterRepositoryTest: 100 ms total, 1 inv, 100.0 ms/inv (avg.)" + SystemInfo.LF; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSummary, summary)
[-] pred: org. junit. Assert. assertEquals ( expectedSummary, summary )
************************************
[+] input: testApplyValuesAllDoNodeTypesAllExisting() { final IDoEntity target = BEANS.get(DoEntityBuilder.class) .put("stringAttribute", "t") .putList("stringList", Arrays.asList("x", "y", "z")).build(); target.putSet("stringSet", CollectionUtility.hashSet("a", "b", "c")); target.putCollection("stringCollection", Arrays.asList("u", "v", "w"));  final IDoEntity template = BEANS.get(DoEntityBuilder.class) .put("stringAttribute", "t2") .putList("stringList", Arrays.asList("x2", "y2", "z2")).build(); template.putSet("stringSet", CollectionUtility.hashSet("a2", "b2", "c2")); template.putCollection("stringCollection", Arrays.asList("u2", "v2", "w2"));  final IDoEntity targetExtended = m_helper.applyValues(target, template); "<AssertPlaceHolder>"; assertEquals(template, targetExtended); }
[*] target: assertSame(target, targetExtended)
[-] pred: org. junit. Assert. assertSame ( target, targetExtended )
************************************
[+] input: interpolationMiddle() { createCueFile("'a\\(123)b'"); var literal = findTypedElement(CueStringLiteral.class); var ranges = CueMultiHostInjector.findInjectionRanges(literal);  var expected = Arrays.asList( new InjectionData(TextRange.create(1, 2), null, null), new InjectionData(TextRange.create(8, 9), "\\(123)", null)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, ranges)
[-] pred: org. junit. Assert. assertEquals ( expected, ranges )
************************************
[+] input: test_3_4() { logger.info("testDefault"); LoggingConsumer consumer = new LoggingConsumer(2, 3); assertFalse(consumer.shouldLog()); consume(1, consumer); assertFalse(consumer.shouldLog()); consume(2, consumer); assertTrue(consumer.shouldLog()); consume(3, consumer); assertTrue(consumer.shouldLog()); consume(4, consumer); assertTrue(consumer.shouldLog()); consume(5, consumer); assertFalse(consumer.shouldLog()); consume(6, consumer); "<AssertPlaceHolder>"; consume(7, consumer); }
[*] target: assertFalse(consumer.shouldLog())
[-] pred: org. junit. Assert. assertFalse ( consumer. shouldLog() )
************************************
[+] input: testSegmentIoExample1() {  // SOURCE: https://github.com/segmentio/ksuid // // REPRESENTATION: // String: 0ujtsYcgvSTl8PAuAdqWYSMnLOv // Raw: 0669F7EFB5A1CD34B5F99D1154FB6853345C9735 // // COMPONENTS: // // Time: 2017-10-09 21:00:47 -0700 PDT // Timestamp: 107608047 // Payload: B5A1CD34B5F99D1154FB6853345C9735 //  String string = "0ujtsYcgvSTl8PAuAdqWYSMnLOv"; String raw = "0669F7EFB5A1CD34B5F99D1154FB6853345C9735"; Instant instant = Instant.parse("2017-10-10T04:00:47Z"); // UTC long timestamp = 107608047; // KSUID time String payload = "B5A1CD34B5F99D1154FB6853345C9735";  // instantiate a KSUID from bytes byte[] bytes = new BigInteger(raw, 16).toByteArray(); Ksuid ksuid = Ksuid.from(bytes);  // String: 0ujtsYcgvSTl8PAuAdqWYSMnLOv assertEquals(string, ksuid.toString());  // Raw: 0669F7EFB5A1CD34B5F99D1154FB6853345C9735 String raw2 = new BigInteger(1, ksuid.toBytes()).toString(16).toUpperCase(); assertEquals(raw.replaceAll("^0+", ""), raw2);  // Time: 2017-10-09 21:00:47 -0700 PDT assertEquals(instant, ksuid.getInstant());  // Timestamp: 107608047 assertEquals(Ksuid.toUnixTime(timestamp), ksuid.getTime());  // Payload: B5A1CD34B5F99D1154FB6853345C9735 String payload2 = new BigInteger(1, ksuid.getPayload()).toString(16).toUpperCase(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(payload, payload2)
[-] pred: org. junit. Assert. assertEquals ( payload, payload2 )
************************************
[+] input: SQLException { SystemRef system = createDbTestSystem(); Connection connection = EnvironmentUtil.connectDb(system); try { connection = EnvironmentUtil.connectDb(system); "<AssertPlaceHolder>"; } finally { connection.close(); HSQLUtil.shutdown(system.getProperty("url"), HSQLUtil.DEFAULT_USER, HSQLUtil.DEFAULT_PASSWORD); } }
[*] target: assertNotNull(connection)
[-] pred: org. junit. Assert. assertNotNull ( connection )
************************************
[+] input: IOException { long actual = binlogFileReadChannel.size(); long expect = localChannel.size(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: test_serialized_deserialize_focus_test_config() { GinkgoRunConfigurationOptions configOptions = new GinkgoRunConfigurationOptions(); configOptions.setGinkgoExecutable("ginkgo"); configOptions.setWorkingDir("/workspace"); configOptions.setEnvData(EnvironmentVariablesData.DEFAULT); configOptions.setGinkgoAdditionalOptions("-race"); configOptions.setGinkgoScope(GinkgoScope.FOCUS); configOptions.setFocusTestExpression("books"); configOptions.setTestNames(Arrays.asList("books")); configOptions.setGoToolOptions("build tool options"); Element element = new Element("ginkgo_config");  GinkgoSerializationUtil.writeXml(element, configOptions); GinkgoRunConfigurationOptions result = GinkgoSerializationUtil.readXml(element);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(configOptions, result)
[-] pred: org. junit. Assert. assertEquals ( configOptions, result )
************************************
[+] input: shouldUpdateCountAndReturnTheCorrectCountValue() { Counter simpleCounter = new SimpleCounter(); when(metricGroup.addGroup("counterTest")).thenReturn(metricGroup); when(metricGroup.counter("test_aspect3")).thenReturn(simpleCounter); counterStatsManager.registerAspects(TestAspects.values(), "counterTest"); counterStatsManager.inc(TestAspects.TEST_ASPECT_THREE); counterStatsManager.inc(TestAspects.TEST_ASPECT_THREE); long count = counterStatsManager.getCount(TestAspects.TEST_ASPECT_THREE); "<AssertPlaceHolder>"; }
[*] target: assertEquals(2, count)
[-] pred: org. junit. Assert. assertEquals ( 2, count )
************************************
[+] input: convert() { Schema c = convertor.convert(Enumnumnum.class); Assert."<AssertPlaceHolder>"; Assert.assertEquals("string", c.getType()); Assert.assertArrayEquals(c.getEnums(), new String[]{"A", "B", "C"}); }
[*] target: assertNotNull(c)
[-] pred: org. junit. Assert. assertNotNull ( c )
************************************
[+] input: insertByMap() { Map<String,Object> category = new HashMap<>(); category.put("categoryName","饮料"); category.put("category_type",new Integer(7)); int result = mapper.insertByMap(category); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1,result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
[+] input: SQLException { Mockito.when(mockResults.getInt("rejectlimit")).thenReturn(50_000); GreenplumExternalTable table = new GreenplumExternalTable(mockSchema, mockResults); int expectedUriLocation = 50_000; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedUriLocation, table.getRejectLimit())
[-] pred: org. junit. Assert. assertEquals ( expectedUriLocation, table. getRejectLimit ( ) )
************************************
[+] input: getVehicleLocationSuccessWithUserDetailsNotNull() { VehicleDetails vehicleDetails = getDummyVehicleDetails(); UserDetails userDetails = getDummyUserDetails(); Mockito.when(vehicleDetailsRepository.findByUuid(vehicleDetails.getUuid())) .thenReturn(vehicleDetails); Mockito.when(userDetailsRepository.findByUser_id(Mockito.anyLong())).thenReturn(userDetails); VehicleLocationResponse vehicleLocationResponse = vehicleService.getVehicleLocation(vehicleDetails.getUuid()); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(userDetails.getName(), vehicleLocationResponse.getFullName()); Assertions.assertEquals(userDetails.getUser().getEmail(), vehicleLocationResponse.getEmail()); }
[*] target: assertNotNull(vehicleLocationResponse)
[-] pred: org. junit. Assert. assertNotNull ( vehicleLocationResponse )
************************************
[+] input: shouldReturnMandatoryFields() { HashMap<String, Object> expectedMandatoryFields = new HashMap<>(); expectedMandatoryFields.put("host", host); expectedMandatoryFields.put("port", port); expectedMandatoryFields.put("endpoint_pattern", endpointPattern); expectedMandatoryFields.put("capacity", capacity); expectedMandatoryFields.put("connect_timeout", connectTimeout); expectedMandatoryFields.put("retry_timeout", retryTimeout); expectedMandatoryFields.put("socket_timeout", socketTimeout); expectedMandatoryFields.put("stream_timeout", streamTimeout); expectedMandatoryFields.put("fail_on_errors", failOnErrors); expectedMandatoryFields.put("outputMapping", outputMappingHashMap); EsSourceConfig esSourceConfig = getValidEsSourceConfigBuilder().createEsSourceConfig(); HashMap<String, Object> actualMandatoryFields = esSourceConfig.getMandatoryFields(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMandatoryFields, actualMandatoryFields)
[-] pred: org. junit. Assert. assertEquals ( expectedMandatoryFields, actualMandatoryFields )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.getClusterList(anyString())).thenReturn(new HashSet<>()); } Set<String> clusterList = mqAdminExtImpl.getClusterList("topic_test"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(clusterList)
[-] pred: org. junit. Assert. assertNotNull ( clusterList )
************************************
[+] input: testEmptyOrderedHashMap() { HashMap<Integer, String> map = CollectionUtility.emptyOrderedHashMap(); "<AssertPlaceHolder>"; // Test that it is a mutable map. assertTrue(map.isEmpty()); map.put(1, "test"); map.put(3, "test2"); map.put(2, "test3"); assertEquals(3, map.size());  // test that it is an ordered map assertArrayEquals(new int[]{1, 3, 2}, map.keySet().stream().mapToInt(i -> i).toArray()); assertFalse(map.isEmpty()); }
[*] target: assertNotNull(map)
[-] pred: org. junit. Assert. assertNotNull ( map )
************************************
[+] input: testAppendIterator() { LogRecord expected = new MasterLogRecord(1234);  logManager.appendToLog(expected); LogRecord record = logManager.iterator().next();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, record)
[-] pred: org. junit. Assert. assertEquals ( expected, record )
************************************
[+] input: getPrintStackTraceString() { Exception e = new Exception(); String printStackTraceString = ExceptionUtil.getPrintStackTraceString(e); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(printStackTraceString)
[-] pred: org. junit. Assert. assertNotNull ( printStackTraceString )
************************************
[+] input: Exception { PropertyGroup pg = new PropertyGroup(obj); String value = pg.getStringProperty("level1|level2|scalars|stringProp"); "<AssertPlaceHolder>"; assertEquals("stringValue", value); }
[*] target: assertNotNull(value)
[-] pred: org. junit. Assert. assertNotNull ( value )
************************************
[+] input: convertPolygon_NoRedundantSpaces_ShouldConvert() { String wkt = "POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Polygon", "coordinates": [[[30,10],[40,40],[20,40],[10,20],[30,10]]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: toHexArray_Multi() { byte[] actual = HexUtil.toHexArray("1a6BdE8c"); byte[] expected = new byte[]{(byte) 0x1A, (byte) 0x6B, (byte) 0xDE, (byte) 0x8C}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expected, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expected, actual )
************************************
[+] input: ExecutionException { String openhufuRoot = System.getenv("OPENHUFU_ROOT"); Path libDir = Paths.get(openhufuRoot, "lib"); Map<ProtocolType, ProtocolFactory> factories = LibraryLoader.loadProtocolLibrary(libDir.toString()); ProtocolFactory factory = factories.get(ProtocolType.ABY); ProtocolExecutor aby0 = factory.create( OwnerInfo.newBuilder().setEndpoint("127.0.0.1:7766").setId(0).build(), ProtocolType.ABY); "<AssertPlaceHolder>"; ProtocolExecutor aby1 = factory.create( OwnerInfo.newBuilder().setEndpoint("127.0.0.1:7766").setId(1).build(), ProtocolType.ABY); assertNotNull(aby1); ExecutorService service = Executors.newFixedThreadPool(2); final int A = 40; final int B = 30; final boolean expect = A > B; Future<Boolean> r0 = service.submit(new Callable<Boolean>() { @Override public Boolean call() throws Exception { LOG.info("0 call"); List<byte[]> res = (List<byte[]>) aby0.run(0, ImmutableList.of(0), ImmutableList.of(OpenHuFuCodec.encodeInt(A)), OperatorType.GT, ColumnType.INT, "127.0.0.1", 7766, false); return OpenHuFuCodec.decodeBoolean(res.get(0)); } }); Future<Boolean> r1 = service.submit(new Callable<Boolean>() { @Override public Boolean call() throws Exception { LOG.info("1 call"); List<byte[]> res = (List<byte[]>) aby1.run(0, ImmutableList.of(1), ImmutableList.of(OpenHuFuCodec.encodeInt(B)), OperatorType.GT, ColumnType.INT, "127.0.0.1", 7766, false); return OpenHuFuCodec.decodeBoolean(res.get(0)); } }); assertEquals(expect, r0.get()); assertEquals(expect, r1.get()); }
[*] target: assertNotNull(aby0)
[-] pred: org. junit. Assert. assertNotNull ( aby0 )
************************************
[+] input: serializeMap() { boolean error = false; Map<Object, Object> bean = createTestMap(); try { Map map = (Map) BeanSerializer.serialize(bean, true); for (Map.Entry<Object, Object> entry : bean.entrySet()) { if (!map.containsKey(entry.getKey())) { error = true; break; } } Assert.assertFalse(error);  map = (Map) BeanSerializer.serialize(bean); for (Map.Entry<Object, Object> entry : bean.entrySet()) { if (!map.containsKey(entry.getKey())) { error = true; break; } } Assert."<AssertPlaceHolder>"; } catch (Exception e) { error = true; } Assert.assertFalse(error); }
[*] target: assertFalse(error)
[-] pred: org. junit. Assert. assertFalse ( error )
************************************
[+] input: findByCategoryType() { ProductCategory result = mapper.findByCategoryType(new Integer(7)); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testFor() { AggregationPipeline<Document> pipeline = AggregationPipeline.create();  pipeline.project(Projection.project() .include("date", DateExpressions.dateToParts(field("date"))) .include("date_iso",DateExpressions.dateToParts(field("date")).iso8601(true).timezone(value("Asia/Shanghai"))));  Document document = mars.aggregate(pipeline, "sales").tryNext(); Assert."<AssertPlaceHolder>";  }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
[+] input: testVetoExceptionHtmlMessage() { TestFormWithMandatoryField form = new TestFormWithMandatoryField(); String htmlErrorMessage = "";  String expectedErrorMessage = HTML.fragment( HTML.div(TEXTS.get("FormEmptyMandatoryFieldsMessage")), HTML.ul(HTML.li(form.getStringField().getFullyQualifiedLabel(IValidateContentDescriptor.LABEL_SEPARATOR)))) .toHtml();  try { form.validateForm(); } catch (VetoException ve) { htmlErrorMessage = ve.getHtmlMessage().toHtml(); }  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedErrorMessage, htmlErrorMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, htmlErrorMessage )
************************************
[+] input: testIsEmpty() { QuantileSummary summary = new QuantileSummary(0.01); assertTrue(summary.isEmpty());  summary = summary.insert(1); assertFalse(summary.isEmpty());  summary = summary.compress(); assertFalse(summary.isEmpty());  summary = summary.merge(new QuantileSummary(0.01)); "<AssertPlaceHolder>"; }
[*] target: assertFalse(summary.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( summary. isEmpty() )
************************************
[+] input: isEmpty_correctly_returns_status() { SignalsRegistry signalsRegistry = new SignalsRegistry(); assertTrue(signalsRegistry.isEmpty());  String clientSignalId = UUID.randomUUID().toString(); NumberSignal signal = new NumberSignal();  signalsRegistry.register(clientSignalId, signal); assertFalse(signalsRegistry.isEmpty());  signalsRegistry.unregister(signal.getId()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(signalsRegistry.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( signalsRegistry. isEmpty() )
************************************
[+] input: SecurityException { List<Throwable> errors;  errors = new LinkedList<>(); ParameterizedTestRunnerExtension.validateOneParametersMethod(m_testClass, errors); assertTrue(errors.isEmpty());  errors = new LinkedList<>(); ParameterizedTestRunnerExtension.validateOneParametersMethod(new TestClass(ParameterizedTestClassWithMissingParametersMethod.class), errors); assertFalse(errors.isEmpty());  errors = new LinkedList<>(); ParameterizedTestRunnerExtension.validateOneParametersMethod(new TestClass(ParameterizedTestClassWithIncorrectParametersMethod1.class), errors); assertFalse(errors.isEmpty());  errors = new LinkedList<>(); ParameterizedTestRunnerExtension.validateOneParametersMethod(new TestClass(ParameterizedTestClassWithIncorrectParametersMethod2.class), errors); "<AssertPlaceHolder>"; }
[*] target: assertFalse(errors.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( errors. isEmpty ( ) )
************************************
[+] input: verifyEmailTokenSuccessFull() { ChangeEmailRequest changeEmailRequest = getDummyChangeEmailRequest(); User user = getDummyUser(); String expectedMessage = UserMessage.EMAIL_CHANGE_SUCCESSFUL; ChangeEmailForm changeEmailForm = getDummyChangeEmailForm(); changeEmailForm.setNew_email(changeEmailForm.getNew_email()); changeEmailForm.setOld_email("user@email.com"); Mockito.when(changeEmailRepository.findByEmailToken(Mockito.anyString())) .thenReturn(changeEmailRequest); Mockito.doReturn(user).when(userRepository).save(Mockito.any(User.class)); Mockito.doReturn(user).when(userService).getUserFromToken(Mockito.any()); CRAPIResponse crapiAPIResponse = userService.verifyEmailToken(getMockHttpRequest(), changeEmailForm); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(HttpStatus.OK.value(), crapiAPIResponse.getStatus()); }*/
[*] target: assertEquals(expectedMessage, crapiAPIResponse.getMessage())
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, crapiAPIResponse. getMessage ( ) )
************************************
[+] input: shouldReturnParsedValueForTransformFromParquet() { Descriptors.FieldDescriptor fieldDescriptor = TestMessageEnvelope.getDescriptor().findFieldByName("log_key"); String testString = "test-string"; ByteString expectedByteString = ByteString.copyFrom(testString.getBytes()); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BINARY).named("log_key") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); simpleGroup.add("log_key", Binary.fromConstantByteArray(expectedByteString.toByteArray())); PrimitiveTypeHandler primitiveTypeHandler = new PrimitiveTypeHandler(fieldDescriptor);  ByteString actualByteString = (ByteString) primitiveTypeHandler.transformFromParquet(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedByteString, actualByteString)
[-] pred: org. junit. Assert. assertEquals ( expectedByteString, actualByteString )
************************************
[+] input: testValueMethods() { AccessType type = AccessType.PING; assertFalse(type.needsPort()); assertTrue(type.isPing()); assertFalse(type.isConnect()); assertFalse(type.isDownload()); type = AccessType.CONNECT; assertTrue(type.needsPort()); assertFalse(type.isPing()); assertTrue(type.isConnect()); assertFalse(type.isDownload()); type = AccessType.DOWNLOAD; assertFalse(type.needsPort()); assertFalse(type.isPing()); assertFalse(type.isConnect()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(type.isDownload())
[-] pred: org. junit. Assert. assertTrue ( type. isDownload() )
************************************
[+] input: testDatabaseExists() { boolean exists = rocketMQCatalog.databaseExists("default"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
[+] input: testAttributeName() { FixtureDoNode node = new FixtureDoNode(); assertNull(node.getAttributeName()); node.setAttributeName("nodeAttributeName"); assertEquals("nodeAttributeName", node.getAttributeName()); node.setAttributeName(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(node.getAttributeName())
[-] pred: org. junit. Assert. assertNull ( node. getAttributeName() )
************************************
[+] input: SQLException { VtResultSet input = TestResult.makeTestResult(TestResult.makeTestFields("col1|col2", "varbinary|varbinary"), "a|aaa", "a|0", "a|1"); FakePrimitive fp = new FakePrimitive(Lists.newArrayList(input));  AbstractAggregateGen4.AggregateParams aggr1 = new AbstractAggregateGen4.AggregateParams(Engine.AggregateOpcodeG4.AggregateSumDistinct, 1, "sum(distinct col2)"); GroupByParams groupByParams = new GroupByParams(); groupByParams.setKeyCol(0); OrderedAggregateGen4Engine oa = new OrderedAggregateGen4Engine(true, Lists.newArrayList(aggr1), false, 0, Lists.newArrayList(groupByParams), null, fp); VtResultSet result = (VtResultSet) oa.execute(VtContext.background(), null, null, false).getVtRowList();  VtResultSet wantResult = TestResult.makeTestResult(TestResult.makeTestFields("col1|sum(distinct col2)", "varbinary|decimal"), "a|1"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(wantResult, result)
[-] pred: org. junit. Assert. assertEquals ( wantResult, result )
************************************
[+] input: testUpdateActionsFromPaths_customResourcesPath() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.CUSTOM_RESOURCES, UpdateAction.RESOURCES); List<Path> changedPaths = List.of( Path.of("resources/saas-boost.yaml"), Path.of("resources/custom-resources/app-services-macro/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("saas-boost.yaml")); } if (action == UpdateAction.CUSTOM_RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("app-services-macro")); } }); }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
[+] input: testMultipleAcquiresReleases() { OptimisticLock l = new OptimisticLock(); l.acquire(); l.acquire(); l.release(); l.release(); assertFalse(l.isAcquired()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(l.isReleased())
[-] pred: org. junit. Assert. assertTrue ( l. isReleased() )
************************************
[+] input: Exception { final DigitalCovidCertificate dgc = (DigitalCovidCertificate) new DigitalCovidCertificate() .withNam(new PersonName().withGn("Martin").withFn("Lindström")) .withDob("1969-11-11") .withV(Arrays.asList(new VaccinationEntry() .withTg("840539006") .withVp("1119349007") .withMp("EU/1/20/1507") .withMa("ORG-100030215") .withDn(Integer.valueOf(1)) .withSd(Integer.valueOf(2)) .withDt(LocalDate.parse("2021-04-17")) .withCo("SE") .withIs("Swedish eHealth Agency") .withCi("01:SE:JKJKHJGHG6768686HGJGH#M")));  byte[] encoding = dgc.encode();  DigitalCovidCertificate dgc2 = DigitalCovidCertificate.decode(encoding);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(dgc, dgc2)
[-] pred: org. junit. Assert. assertEquals ( dgc, dgc2 )
************************************
[+] input: testExists200() { Response r = new Response(Collections.emptyMap(), new byte[0], 200); "<AssertPlaceHolder>"; }
[*] target: assertTrue(r.exists())
[-] pred: org. junit. Assert. assertTrue ( r. exists() )
************************************
[+] input: testMultiPageScan() { for (int i = 0; i < 10000; ++i) { logManager.appendToLog(new MasterLogRecord(i)); }  Iterator<LogRecord> iter = logManager.scanFrom(90000); for (int i = 9 * (DiskSpaceManager.PAGE_SIZE / 9); i < 10000; ++i) { assertEquals(new MasterLogRecord(i), iter.next()); } "<AssertPlaceHolder>"; }
[*] target: assertFalse(iter.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iter. hasNext() )
************************************
[+] input: MalformedURLException { URL jarUrl = getClass().getResource("test repository/test.jar_"); URL scoutXml = new URL("jar:" + jarUrl.toExternalForm() + "!/" + JandexInventoryBuilder.SCOUT_XML_PATH); JandexInventoryBuilder builder = new JandexInventoryBuilder(RebuildStrategy.ALWAYS); Index index = builder.scanModule(builder.findIndexUri(scoutXml)); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(index)
[-] pred: org. junit. Assert. assertNotNull ( index )
************************************
[+] input: testGetNonExistent() { LRUCache<CacheValue> cache = new LRUCache<>(100); CacheValue nobody = cache.get("nobody");  Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(nobody)
[-] pred: org. junit. Assert. assertNull ( nobody )
************************************
[+] input: IOException { PipedOutputStream pipedOutputStream = new PipedOutputStream(); BinaryCopyParser parser = new BinaryCopyParser(new PipedInputStream(pipedOutputStream, 256));  DataOutputStream data = new DataOutputStream(pipedOutputStream); data.write(COPY_BINARY_HEADER); data.writeInt(0); data.writeInt(0);  // Write the trailer indicator to indicate that there are no more rows. data.writeShort(-1);  Iterator<CopyRecord> iterator = parser.iterator(); "<AssertPlaceHolder>"; assertThrows(NoSuchElementException.class, iterator::next); }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext() )
************************************
[+] input: testSaveCell() { long currentTimeStamp = System.currentTimeMillis(); String content = "select 1 as a as output;"; CellInfo cellInfo = new CellInfo(); cellInfo.setNotebookId(Integer.valueOf(defaultMockNotebookId)); cellInfo.setContent(content); cellInfo.setUpdateTime(new Timestamp(currentTimeStamp)); nbService.save(cellInfo); CellInfo savedCellInfo = nbService.getCellInfo(cellInfo.getId()); Assert."<AssertPlaceHolder>"; Assert.assertEquals(Integer.valueOf(defaultMockNotebookId), savedCellInfo.getNotebookId()); Assert.assertEquals(content, savedCellInfo.getContent()); }
[*] target: assertNotNull(savedCellInfo)
[-] pred: org. junit. Assert. assertNotNull ( savedCellInfo )
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); XADataSource dataSource = dataSourceFactory.createXADataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof PGXADataSource); PGXADataSource xaDataSource = (PGXADataSource) dataSource; Assert.assertEquals("db", xaDataSource.getDatabaseName()); }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
[+] input: testSuma() { System.out.println("suma"); double num1 = 5.0; double num2 = 7.0; Calculadora instance = new Calculadora(); double expResult = 12.0; double result = instance.suma(num1, num2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expResult, result, 0.0)
[-] pred: org. junit. Assert. assertEquals ( expResult, result, 0.0 )
************************************
[+] input: loadInvalidFormatConfigFile() { Enumeration<URL> configFileEnumeration = createConfigFileEnumeration( "invalid_format_yidun_regional_endpoints.json");  Map<String, Map<String, List<String>>> domainMap = EndpointConfigLoader.load(configFileEnumeration);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(domainMap.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( domainMap. isEmpty ( ) )
************************************
[+] input: Exception { // Obtained by prepending the rsa-1024 certificate to the PKCS#7 SignedData certificates set // of v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-2048.apk META-INF/CERT.RSA. The certs // (in the order of appearance in the file) are thus: rsa-1024, rsa-2048. The package's // signing cert is rsa-2048. ApkVerifier.Result result = verify("v1-only-pkcs7-cert-bag-first-cert-not-used.apk"); assertVerified(result); List<X509Certificate> signingCerts = result.getSignerCertificates(); "<AssertPlaceHolder>"; assertEquals( "fb5dbd3c669af9fc236c6991e6387b7f11ff0590997f22d0f5c74ff40e04fca8", HexEncoding.encode(sha256(signingCerts.get(0).getEncoded()))); }
[*] target: assertEquals(1, signingCerts.size())
[-] pred: org. junit. Assert. assertEquals ( 1, signingCerts. size ( ) )
************************************
[+] input: createWriteDeviceBatchInWordReq() { byte[] expect = new byte[]{ 0x50, 0x00, 0x00, (byte) 0xFF, (byte) 0xFF, 0x03, 0x00, 0x12, 0x00, 0x0C, 0x00, 0x01, 0x14, 0x00, 0x00, 0x58, 0x1B, 0x00, (byte) 0xA8, 0x03, 0x00, (byte) 0x95, 0x19, 0x02, 0x12, 0x30, 0x11 }; byte[] data = new byte[]{(byte) 0x95, 0x19, 0x02, 0x12, 0x30, 0x11}; McDeviceContent deviceAddress = new McDeviceContent(EMcDeviceCode.D, 7000, 3, data); McMessageReq req = McReqBuilder.createWriteDeviceBatchInWordReq(deviceAddress); byte[] actual = req.toByteArray(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: shouldUseDefaultSecondsDuringTransformIfSimpleGroupHasGroupTypeTimestampWithSecondsNotInitialized() { Instant currentInstant = Instant.now(); int nanos = currentInstant.getNano(); Row expectedRow = Row.of(0L, nanos);  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor);  /* adding both nanos and seconds field to the timestamp schema but initializing only for nanos */ GroupType timestampSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("seconds") .required(INT32).named("nanos") .named("event_timestamp"); SimpleGroup timestampMessage = new SimpleGroup(timestampSchema); timestampMessage.add("nanos", nanos);  MessageType parquetSchema = buildMessage() .addField(timestampSchema) .named("TestBookingLogMessage"); SimpleGroup mainMessage = new SimpleGroup(parquetSchema); mainMessage.add("event_timestamp", timestampMessage);  Row actualRow = (Row) timestampHandler.transformFromParquet(mainMessage);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
[+] input: testComment2() { XmlElement x = XmlElement.parse("<a><b>boo</b><!-- hi there --></a>"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, x.countChildren())
[-] pred: org. junit. Assert. assertEquals ( 1, x. countChildren() )
************************************
[+] input: Exception { when(redisTemplate.execute(any(RedisCallback.class))).thenAnswer( invocation -> Boolean.TRUE ); Boolean result = redisCache.exists("key"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(Boolean.TRUE, result)
[-] pred: org. junit. Assert. assertEquals ( Boolean. TRUE, result )
************************************
[+] input: shouldFetchDefaultValueIfFieldNotInitializedWithAValueInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("amount_paid_by_cash");  /* The field is added to the schema but not assigned a value */ GroupType parquetSchema = requiredGroup() .required(FLOAT).named("amount_paid_by_cash") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); FloatHandler floatHandler = new FloatHandler(fieldDescriptor);  Object actualValue = floatHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0.0F, actualValue)
[-] pred: org. junit. Assert. assertEquals ( 0.0F, actualValue )
************************************
[+] input: shouldNotProvideJsonDeserializerWhenSourceNameIsUnsupported() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.PARQUET_SOURCE, SourceType.BOUNDED)}); when(streamConfig.getDataType()).thenReturn("JSON");  JsonDeserializerProvider provider = new JsonDeserializerProvider(streamConfig);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(provider.canProvide())
[-] pred: org. junit. Assert. assertFalse ( provider. canProvide() )
************************************
[+] input: testUpdateActionsFromPaths_newPath() { Path newResource = Path.of("resources/saas-boost-newtemplate.yaml"); createFile(newResource); Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.RESOURCES); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(List.of(newResource)); "<AssertPlaceHolder>"; actualActions.forEach(action -> { if (action == UpdateAction.RESOURCES) { assertEquals(1, action.getTargets().size()); assertTrue(action.getTargets().contains("saas-boost-newtemplate.yaml")); } }); }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
[+] input: hasTypeShouldBeFalseWhenTypeIsNull() { pgSourceConfig = getPgSourceConfigBuilder() .setType(null) .createPgSourceConfig(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(pgSourceConfig.hasType())
[-] pred: org. junit. Assert. assertFalse ( pgSourceConfig. hasType() )
************************************
[+] input: testAllocateAllMemory() { MemoryPool root = new MemoryPool("root", maxLimit, MemoryType.OTHER); long allocatedSize = 0; for (int i = 0; i < allocateCount; i++) { allocatedSize += testAllocateMemory(root, false); allocatedSize += testAllocateMemory(root, true); Assert.assertEquals(allocatedSize, root.getMemoryUsage()); } root.destroy(); Assert.assertEquals(0L, root.getMemoryUsage()); Assert.assertEquals(allocatedSize, root.getMaxMemoryUsage()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(root.isDestoryed())
[-] pred: org. junit. Assert. assertTrue ( root. isDestoryed() )
************************************
[+] input: testVerifyRequestRequestWithEmptyDataAndRuleMisMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", ""); subject.put("verify_aal", "25"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
[+] input: testGenerateNotNullWithCustomAttributes() { ProductWrapper<FamilyContainer> w = new ProductWrapper<>(); FamilyGenerator g = new FamilyGenerator(); //config general g.setDataset("DE"); g.setLocale(new Locale("de_DE")); int customFirstParentMinAgeYears = 30; int customFirstParentMaxAgeYears = 50; g.setFirstParentMinAgeYears(customFirstParentMinAgeYears); g.setFirstParentMaxAgeYears(customFirstParentMaxAgeYears); //config peerRelation int customMinDiffAgeInPeerRelation = 0; int customMaxDiffAgeInPeerRelation = 3; g.setMinDiffAgeInPeerRelation(customMinDiffAgeInPeerRelation); g.setMaxDiffAgeInPeerRelation(customMaxDiffAgeInPeerRelation); //config higherRelation int customMinDiffAgeInHigherRelation = 30; int customMaxDiffAgeInHigherRelation = 40; g.setMinDiffAgeInHigherRelation(customMinDiffAgeInHigherRelation); g.setMaxDiffAgeInHigherRelation(customMaxDiffAgeInHigherRelation); //config lowerRelation int customMaxBiologicalChildrenNumber = 5; int customMaxChildrenAdoptedNumber = 1; g.setMaxBiologicalChildrenNumber(customMaxBiologicalChildrenNumber); g.setMaxChildrenAdoptedNumber(customMaxChildrenAdoptedNumber); //init context g.init(context); for (int i = 0; i < 1000; i++) { w = g.generate(w); FamilyContainer c = w.unwrap();  //get familyPerson FamilyPerson father = c.getFamilyPersonList().stream() .filter(familyPerson -> familyPerson.getFamilyRole().equals(FamilyRole.FATHER)) .findFirst() .orElse(null); "<AssertPlaceHolder>"; int fatherAge = father.getAge(); String fatherFamilyName = father.getFamilyName(); FamilyPerson mother = c.getFamilyPersonList().stream() .filter(familyPerson -> familyPerson.getFamilyRole().equals(FamilyRole.MOTHER)) .findFirst() .orElse(null); assertNotNull(mother); int motherAge = mother.getAge(); String motherFamilyName = mother.getFamilyName(); FamilyPerson grandParentOfFather = c.getGrandparents().stream() .filter(grandparent -> grandparent.getRelations().containsKey(father)) .findFirst() .orElse(null); assertNotNull(grandParentOfFather); int grandParent1Age = grandParentOfFather.getAge(); String grandParent1FamilyName = grandParentOfFather.getFamilyName(); List<FamilyPerson> children = c.getChildren(); assertNotNull(children); int childrenCount = children.size();  //check general attributes assertTrue(c.getFamilyPersonList().get(0).getAge() >= customFirstParentMinAgeYears && c.getFamilyPersonList().get(0).getAge() <= customFirstParentMaxAgeYears);  //check peer constraint assertEquals(fatherFamilyName, motherFamilyName); assertTrue(c.getFamilyPersonList().get(1).getAge() >= c.getFamilyPersonList().get(0).getAge() + customMinDiffAgeInPeerRelation && c.getFamilyPersonList().get(1).getAge() <= c.getFamilyPersonList().get(0).getAge() + customMaxDiffAgeInPeerRelation);  //check higher constraint assertEquals(fatherFamilyName, grandParent1FamilyName); assertTrue(grandParent1Age >= fatherAge + customMinDiffAgeInHigherRelation && grandParent1Age <= fatherAge + customMaxDiffAgeInHigherRelation);  //check lower constraint assertTrue(childrenCount <= customMaxBiologicalChildrenNumber + customMaxChildrenAdoptedNumber); for (FamilyPerson child : children) { assertEquals(fatherFamilyName, child.getFamilyName()); assertTrue(child.getAge() >= 1 && child.getAge() <= (Math.min(fatherAge, motherAge)) - 18); } } }
[*] target: assertNotNull(father)
[-] pred: org. junit. Assert. assertNotNull ( father )
************************************
[+] input: generateCodeTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateCodeTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(3, obj.size()); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("state")); }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
[+] input: testInvalidateDoesNothing() { Object o = new Object(); subject = new FixedMetadataValue(plugin, o); subject.invalidate(); "<AssertPlaceHolder>"; }
[*] target: assertSame(o, subject.value())
[-] pred: org. junit. Assert. assertSame ( o, subject. value() )
************************************
[+] input: shouldHaveError() { ValidError validError = new ValidError(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(validError.hasException())
[-] pred: org. junit. Assert. assertTrue ( validError. hasException() )
************************************
[+] input: shouldHaveNoError() { NoError noError = new NoError(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(noError.hasException())
[-] pred: org. junit. Assert. assertFalse ( noError. hasException() )
************************************
[+] input: testTechnicallyIsEqual() { AccessTypeData data1 = new AccessTypeData(); AccessTypeData data2 = new AccessTypeData(); assertTrue(data1.isTechnicallyEqual(data2)); data1.setId(0); assertTrue(data1.isTechnicallyEqual(data2)); data2.setId(0); assertTrue(data1.isTechnicallyEqual(data2)); data1.setNetworkTaskId(22); assertFalse(data1.isTechnicallyEqual(data2)); data2.setNetworkTaskId(22); assertTrue(data1.isTechnicallyEqual(data2)); data1.setPingCount(123); assertFalse(data1.isTechnicallyEqual(data2)); data2.setPingCount(123); assertTrue(data1.isTechnicallyEqual(data2)); data1.setPingPackageSize(456); assertFalse(data1.isTechnicallyEqual(data2)); data2.setPingPackageSize(456); assertTrue(data1.isTechnicallyEqual(data2)); data1.setConnectCount(789); assertFalse(data1.isTechnicallyEqual(data2)); data2.setConnectCount(789); "<AssertPlaceHolder>"; }
[*] target: assertTrue(data1.isTechnicallyEqual(data2))
[-] pred: org. junit. Assert. assertTrue ( data1. isTechnicallyEqual ( data2 ) )
************************************
[+] input: testExists404() { Response r = new Response(Collections.emptyMap(), new byte[0], 404); "<AssertPlaceHolder>"; }
[*] target: assertFalse(r.exists())
[-] pred: org. junit. Assert. assertFalse ( r. exists() )
************************************
[+] input: IOException { RocketMQPartitionSplitSerializer serializer = new RocketMQPartitionSplitSerializer(); RocketMQSourceSplit expected = new RocketMQSourceSplit("test-split-serialization", "taobaodaily", 256, 100, 300); RocketMQSourceSplit actual = serializer.deserialize(serializer.getVersion(), serializer.serialize(expected)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: checkTokenNullToken() { JapUserStore japUserStore = new JapUserStoreTest(); JapCache japCache = new JapLocalCache(); JapConfig japConfig = new JapConfig(); JapContext japContext = new JapContext(japUserStore, japCache, japConfig); JapAuthentication.setContext(japContext);  Map<String, Object> map = JapAuthentication.checkToken(null); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(map)
[-] pred: org. junit. Assert. assertNull ( map )
************************************
[+] input: shouldBeAbleToBuildSourceIfSourceDetailsIsUnboundedKafkaConsumerAndDaggerDeserializerIsKafkaDeserializationSchema() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_CONSUMER, SourceType.UNBOUNDED)}); FlinkKafkaConsumerDaggerSource daggerSource = new FlinkKafkaConsumerDaggerSource(streamConfig, configuration, daggerDeserializer);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(daggerSource.canBuild())
[-] pred: org. junit. Assert. assertTrue ( daggerSource. canBuild ( ) )
************************************
[+] input: testInvalidMap() { Map<String, Object> map = new HashMap<>(); map.put("id", "xyz"); map.put("index", "index"); map.put("schedulerid", "abc"); map.put("instances", "abc"); map.put("address", null); map.put("port", "port"); map.put("accessType", -1); map.put("interval", "interval"); map.put("onlyWifi", "fal"); map.put("notification", "tru"); map.put("running", "tru"); map.put("lastScheduled", "xyz"); map.put("failureCount", "zyx"); NetworkTask task = new NetworkTask(map); assertEquals(-1, task.getId()); assertEquals(-1, task.getIndex()); assertEquals(-1, task.getSchedulerId()); assertEquals(0, task.getInstances()); assertNull(task.getAddress()); assertEquals(0, task.getPort()); assertNull(task.getAccessType()); assertEquals(0, task.getInterval()); assertFalse(task.isOnlyWifi()); assertFalse(task.isNotification()); assertFalse(task.isRunning()); assertEquals(-1, task.getLastScheduled()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, task.getFailureCount())
[-] pred: org. junit. Assert. assertEquals ( 0, task. getFailureCount() )
************************************
[+] input: testSynchronizeDelete() { getIntervalDAO().insertInterval(getInterval1()); getIntervalDAO().insertInterval(getInterval2()); activityScenario = launchSettingsInputActivity(GlobalSettingsActivity.class); injectTimeBasedSuspensionScheduler(); SuspensionIntervalsDialog intervalsDialog = openSuspensionIntervalsDialog(); onView(isRoot()).perform(waitFor(500)); IntervalHandler handler = new IntervalHandler(getGlobalSettingsActivity(), intervalsDialog); intervalsDialog.getAdapter().removeItems(); "<AssertPlaceHolder>"; assertTrue(getIntervalDAO().readAllIntervals().isEmpty()); }
[*] target: assertTrue(handler.synchronizeIntervals())
[-] pred: org. junit. Assert. assertTrue ( handler. synchronizeIntervals ( ) )
************************************
[+] input: SQLException { Query.Field[] fields = TestResult.makeTestFields("c1|c2", "varbinary|decimal"); VtResultSet resultSet = TestResult.makeTestResult(fields, "a|1", "b|2", "b|1", "c|4", "c|3"); FakePrimitive fp = new FakePrimitive(Lists.newArrayList(resultSet));  OrderByParamsGen4 orderByParams1 = new OrderByParamsGen4(1, false, -1, null); OrderByParamsGen4 orderByParams2 = new OrderByParamsGen4(0, true, -1, null); MemorySortGen4Engine ms = new MemorySortGen4Engine(Lists.newArrayList(orderByParams1, orderByParams2), fp);  VtResultSet result = (VtResultSet) ms.execute(VtContext.background(), new NoopVCursor(), null, false).getVtRowList(); VtResultSet wantResult = TestResult.makeTestResult(fields, "b|1", "a|1", "b|2", "c|3", "c|4"); Assert.assertEquals(wantResult, result);  fp.rewind(); EvalEngine.BindVariable pv = new EvalEngine.BindVariable("__upper_limit"); ms.setUpperLimit(pv); Map<String, BindVariable> bindVariableMap = new HashMap<>(); bindVariableMap.put("__upper_limit", SqlTypes.int64BindVariable(3L)); result = (VtResultSet) ms.execute(VtContext.background(), new NoopVCursor(), bindVariableMap, false).getVtRowList(); wantResult = TestResult.makeTestResult(fields, "b|1", "a|1", "b|2"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(wantResult, result)
[-] pred: org. junit. Assert. assertEquals ( wantResult, result )
************************************
[+] input: Exception { User u = mock(User.class); UserThreadLocal.setUser(u); Object result = loginUserHandlerMethodArgumentResolver.resolveArgument(null, null, null, null); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(u, result)
[-] pred: org. junit. Assert. assertEquals ( u, result )
************************************
[+] input: ExecutionException { ExecInfo execInfo = new ExecInfo(); execInfo.setTimestamp(1636537498974L); execInfo.setSchema(SCHEMA); execInfo.setSqlType(SQL_TYPE); execInfo.setSampleSql(SQL_SAMPLE); execInfo.setPrevTemplateText(PREV_SAMPLE_SQL); execInfo.setTemplateText(SQL_TEMPLATE_TEXT); execInfo.setSampleTraceId(SAMPLE_TRACE_ID); execInfo.setWorkloadType(WORKLOAD_TYPE); execInfo.setExecuteMode(EXECUTE_MODE); execInfo.setTemplateHash(TEMPLATE_HASH); execInfo.setPrevTemplateHash(PREV_TEMPLATE_HASH); execInfo.setPlanHash(PLAN_HASH); execInfo.setErrorCount(0); execInfo.setAffectedRows(1); execInfo.setTransTime(2); execInfo.setResponseTime(3); execInfo.setPhysicalTime(4); execInfo.setPhysicalExecCount(5); execInfo.setParseTime(1); execInfo.setExecPlanCpuTime(1); execInfo.setPhyFetchRows(1); statementSummaryManager.getConfig().setStmtSummaryPercent(1); for (int i = 0; i < 10000; ++i) { statementSummaryManager.summaryStmt(execInfo); } Iterator<StatementSummaryByDigestEntry> iterator = statementSummaryManager.getCurrentStmtSummaries(1636537498974L); Assert."<AssertPlaceHolder>"; long queryCount = iterator.next().getValue().getCount(); Assert.assertTrue(queryCount > 50L && queryCount < 150L); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
[+] input: testVetoExceptionHtmlMessageWithHtmlLabel() { TestFormWithMandatoryField form = new TestFormWithMandatoryField(); form.getStringField().setLabelHtmlEnabled(true); form.getStringField().setLabel(HTML.italic("String") + " " + HTML.bold("Field")); String htmlErrorMessage = "";  String expectedErrorMessage = HTML.fragment( HTML.div(TEXTS.get("FormEmptyMandatoryFieldsMessage")), HTML.ul(HTML.li(form.getMainBox().getFullyQualifiedLabel(IValidateContentDescriptor.LABEL_SEPARATOR) + IValidateContentDescriptor.LABEL_SEPARATOR + "String Field"))) .toHtml();  try { form.validateForm(); } catch (VetoException ve) { htmlErrorMessage = ve.getHtmlMessage().toHtml(); }  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedErrorMessage, htmlErrorMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedErrorMessage, htmlErrorMessage )
************************************
[+] input: testSingle() { String original = "0000-00-00 01:01:01"; Calendar calendar = new GregorianCalendar(); byte[] bs = original.getBytes(); Timestamp t1 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, false, true); Timestamp t2 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, true, true); boolean eq = t1.toString().equals(t2.toString()); if (!(t1 instanceof OriginalTimestamp)) { // If timestamp is not modified, they are equal to each other. Assert."<AssertPlaceHolder>"; } else { // If timestamp is modified, they are not equal to each other. Assert.assertTrue(!eq); } // anyway, we must ensure the consistency of timestamp and original bytes Assert.assertTrue( t1.getClass().getSimpleName() + ", actual = " + t1.toString() + ", original = " + new String(bs), Arrays.equals(t1.toString().getBytes(), bs)); System.out.println(t2.toString()); }
[*] target: assertTrue(eq)
[-] pred: org. junit. Assert. assertTrue ( eq )
************************************
[+] input: testAllocateRevocableMemory() { MemoryPool root = new MemoryPool("root", maxLimit, MemoryType.OTHER); long allocatedSize = 0; for (int i = 0; i < allocateCount; i++) { allocatedSize += testAllocateMemory(root, true); Assert.assertEquals(allocatedSize, root.getMemoryUsage()); } root.destroy(); Assert.assertEquals(0L, root.getMemoryUsage()); Assert.assertEquals(allocatedSize, root.getMaxMemoryUsage()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(root.isDestoryed())
[-] pred: org. junit. Assert. assertTrue ( root. isDestoryed() )
************************************
[+] input: loadBlankConfigFile() { Enumeration<URL> configFileEnumeration = createConfigFileEnumeration("blank_yidun_regional_endpoints.json");  Map<String, Map<String, List<String>>> domainMap = EndpointConfigLoader.load(configFileEnumeration);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(domainMap.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( domainMap. isEmpty ( ) )
************************************
[+] input: shouldFetchParsedValueForFieldForFieldDescriptorOfTypeBool() { boolean actualValue = true;  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("customer_dynamic_surge_enabled");  BooleanHandler booleanHandler = new BooleanHandler(fieldDescriptor); Object value = booleanHandler.parseObject(String.valueOf(actualValue));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
[+] input: shouldProperlySerializeMessageToTemplateWithAsItIs() { String template = ""$._all_""; StencilClient stencilClient = StencilClientFactory.getClient(); protoParser = stencilClient.getParser(TestAggregatedSupplyMessage.class.getName()); MessageToTemplatizedJson messageToTemplatizedJson = MessageToTemplatizedJson .create(firehoseInstrumentation, template, protoParser); Message message = new Message(Base64.getDecoder().decode(logKey.getBytes()), Base64.getDecoder().decode(logMessage.getBytes()), "sample-topic", 0, 100);  String serializedMessage = messageToTemplatizedJson.serialize(message); String expectedMessage = "{\n" + "  "window_start_time": "2017-03-20T10:54:00Z",\n" + "  "window_end_time": "2017-03-20T10:55:00Z",\n" + "  "s2_id_level": 13,\n" + "  "s2_id": "3344472187078705152",\n" + "  "vehicle_type": "BIKE",\n" + "  "unique_drivers": "3"\n" + "}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMessage, serializedMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, serializedMessage )
************************************
[+] input: getUTCTotalSecond() { LocalDateTime dateTime = LocalDateTime.of(1970, 1, 1, 0, 0, 3); long second = TimesUtil.getUTCTotalSecond(dateTime); "<AssertPlaceHolder>"; }
[*] target: assertEquals(3, second)
[-] pred: org. junit. Assert. assertEquals ( 3, second )
************************************
[+] input: testTerribleHashing() {  // Packet destined for node 3 when(packet.getSourceId()).thenReturn(4); when(packet.getDestinationId()).thenReturn(3); when(packet.getHash(eq(4), anyInt())).thenReturn(3);  boolean thrown = false; try { device4identity.receiveFromIntermediary(packet); } catch (RuntimeException e) { thrown = true; } "<AssertPlaceHolder>";  }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
[+] input: convertMultiPoint_V2_ShouldConvert() { String wkt = "MULTIPOINT ((10 40), (40 30), (20 20), (30 10))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiPoint", "coordinates": [[10,40],[40,30],[20,20],[30,10]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: testFindEnvironments_global() { Map<String, Environment> environments = EnvironmentUtil.findEnvironments(); System.out.println(environments); Environment localEnv = environments.get("local"); "<AssertPlaceHolder>"; assertNotNull(localEnv.getSystem("h2")); }
[*] target: assertNotNull(localEnv)
[-] pred: org. junit. Assert. assertNotNull ( localEnv )
************************************
[+] input: testSetOrdered() { EAN13Generator ean13Generator = new EAN13Generator(); ean13Generator.setOrdered(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(ean13Generator.isOrdered())
[-] pred: org. junit. Assert. assertTrue ( ean13Generator. isOrdered() )
************************************
[+] input: Exception { RetryActionWithOneParam<String, R> retryActionWithOneParam = new RetryActionWithOneParam<>( "print", 3, "a" ); R result = retryActionWithOneParam.action( a -> { throw new CannotAcquireLockException("throw dae"); } ); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(null, result)
[-] pred: org. junit. Assert. assertEquals ( null, result )
************************************
[+] input: testComponentTypes() { List<Entity> list = CollectionUtil.toList(new Entity("childType", provider)); Entity[] array = new Entity[] { new Entity("childType", provider) }; Entity parent = new Entity(parentType, "list", list, "array", array); Entity result = converter.convert(parent); "<AssertPlaceHolder>"; // check list conversion Entity[] convertedList = (Entity[]) result.get("list"); Entity[] expectedList = ArrayUtil.toArray(new Entity("childType", provider)); assertArrayEquals(expectedList, convertedList); // check array conversion Entity[] convertedArray = (Entity[]) result.get("list"); Entity[] expectedArray = new Entity[] { new Entity("childType", provider) }; assertArrayEquals(expectedArray, convertedArray); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testToString() { String expectedStr = "EndpointConfigEntry(" + "productCode=p1" + ", regionCode=r1" + ", domains=[a.b.c, x.y.z]" + ")";  EndpointConfigEntry entry = new EndpointConfigEntry(productCode, regionCode, domains);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStr, entry.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedStr, entry. toString ( ) )
************************************
[+] input: Exception { PropertyGroup pg = new PropertyGroup(obj); Object[] array = pg.getArrayProperty("level1|level2|arrays|string-array"); "<AssertPlaceHolder>"; assertEquals(2, array.length); assertEquals("one", array[0]); assertEquals("two", array[1]); }
[*] target: assertNotNull(array)
[-] pred: org. junit. Assert. assertNotNull ( array )
************************************
[+] input: test() { // extract(year from col_date)  final int positionCount = context.getExecutorChunkLimit(); final int nullCount = 20; final int lowerBound = 0; // 1970-01-01 final int upperBound = 365 * 50; // days final SqlOperator operator = TddlOperatorTable.EXTRACT;  List<DataType<?>> inputTypes = ImmutableList.of(DataTypes.DateType);  RexNode root = REX_BUILDER.makeCall( TYPE_FACTORY.createSqlType(SqlTypeName.BIGINT), operator, ImmutableList.of( REX_BUILDER.makeLiteral("YEAR"), REX_BUILDER.makeInputRef(TYPE_FACTORY.createSqlType(SqlTypeName.DATE), 0) ));  InputRefTypeChecker inputRefTypeChecker = new InputRefTypeChecker(inputTypes); root = root.accept(inputRefTypeChecker);  Rex2VectorizedExpressionVisitor converter = new Rex2VectorizedExpressionVisitor(context, inputTypes.size());  VectorizedExpression expression = root.accept(converter);  MutableChunk preAllocatedChunk = MutableChunk.newBuilder(positionCount) .addEmptySlots(inputTypes) .addEmptySlots(converter.getOutputDataTypes()) .build();  // build input decimal block DateBlock inputBlock = generateDateBlock(positionCount, nullCount, lowerBound, upperBound); Chunk inputChunk = new Chunk(positionCount, inputBlock);  LongBlock outputBlock = (LongBlock) BlockUtils.createBlock(DataTypes.LongType, inputChunk.getPositionCount());  preAllocatedChunk.setSelection(null); preAllocatedChunk.setSelectionInUse(false); preAllocatedChunk.setSlotAt(inputBlock, 0); preAllocatedChunk.setSlotAt(outputBlock, expression.getOutputIndex()); preAllocatedChunk.setBatchSize(positionCount);  EvaluationContext evaluationContext = new EvaluationContext(preAllocatedChunk, context); expression.eval(evaluationContext);  for (int i = 0; i < inputChunk.getPositionCount(); i++) { Object actual = outputBlock.getObject(i); Object expected = inputBlock.isNull(i) ? null : ((OriginalDate) inputBlock.getDate(i)).getMysqlDateTime().getYear();  Assert."<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: rtspInterleavedTransportTest() { String src = "RTP/AVP/TCP;unicast;interleaved=0-1;ssrc=1fc17e75;mode="play""; RtspInterleavedTransport transport = (RtspInterleavedTransport)RtspTransport.fromString(src); assertEquals("RTP/AVP/TCP", transport.getProtocol()); assertEquals("unicast", transport.getCastMode()); assertEquals(0, transport.getInterleaved1().intValue()); assertEquals(1, transport.getInterleaved2().intValue()); assertEquals("1fc17e75", transport.getSsrc()); assertEquals("play", transport.getMode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(src, transport.toString())
[-] pred: org. junit. Assert. assertEquals ( src, transport. toString ( ) )
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestRepeatedEnumMessage"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestRepeatedEnumMessage.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  TestRepeatedEnumMessage repeatedEnumMessage = TestRepeatedEnumMessage.newBuilder() .addTestEnumsValue(0) .addTestEnumsValue(0) .build();  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(repeatedEnumMessage.getDescriptor(), repeatedEnumMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"test_enums":["UNKNOWN","UNKNOWN"]}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
[+] input: Exception { ITransaction callingTransaction = mock(ITransaction.class);  final RuntimeException exception = new RuntimeException("Expected JUnit exception");  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(callingTransaction) .withTransactionScope(TransactionScope.REQUIRED)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(callingTransaction, actualTransaction.getValue());  verifyNoInteractions(m_transaction);  verify(callingTransaction, never()).commitPhase1(); verify(callingTransaction, never()).commitPhase2(); verify(callingTransaction, never()).rollback(); verify(callingTransaction, times(1)).addFailure(any(Throwable.class)); } }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
[+] input: testCustomMaxBacklog() { OptionsMetadata options = new OptionsMetadata( new String[] {"-p", "p", "-i", "i", "-max_backlog", "100", "-c", "credentials.json"}); "<AssertPlaceHolder>"; }
[*] target: assertEquals(100, options.getMaxBacklog())
[-] pred: org. junit. Assert. assertEquals ( 100, options. getMaxBacklog() )
************************************
[+] input: testSearchResponse() {  String expectedStringValue = "{"aggregations":{},"query":{"match":{"name":{"query":"OpenSearch"}}},"terminate_after":5}"; SearchRequest searchRequest = SearchRequest.of( request -> request.index("index1", "index2") .aggregations(Collections.emptyMap()) .terminateAfter(5L) .query(q -> q.match(t -> t.field("name").query(FieldValue.of("OpenSearch")))) ); String searchRequestString = searchRequest.toJsonString(); "<AssertPlaceHolder>";  }
[*] target: assertEquals(expectedStringValue, searchRequestString)
[-] pred: org. junit. Assert. assertEquals ( expectedStringValue, searchRequestString )
************************************
[+] input: testConvert() { // 创建 MethodConvertor 实例 MethodConvertor methodConvertor = new MethodConvertor(manager, reflectionMethod);  // 调用 convert 方法 Operation convertedOperation = methodConvertor.convert();  // 进行断言，验证转换后的 Operation 对象是否符合预期 Assert.assertNotNull(convertedOperation); //判断类型是否正确 Assert.assertEquals(DataType.String().getType(),convertedOperation.getParameters().get(0).getSchema().getType()); Assert.assertEquals(DataType.String().getType(),convertedOperation.getParameters().get(1).getSchema().getType());  MethodConvertor methodConvertor1 = new MethodConvertor(manager, reflectionReturnMethod); Operation convert = methodConvertor1.convert(); Assert."<AssertPlaceHolder>"; //判断有返回值的情况下是否正确 Assert.assertEquals(DataType.Array(DataType.String()) .getType(),convert.getResponses().get(Response.CODE_OK).getContent().get(MediaType.APPLICATION_JSON) .getSchema().getType());   }
[*] target: assertNotNull(convert)
[-] pred: org. junit. Assert. assertNotNull ( convert )
************************************
[+] input: Exception { VectorSlicer vectorSlicer = new VectorSlicer().setInputCol("vec").setOutputCol("sliceVec").setIndices(0, 2, 1);  Table output = vectorSlicer.transform(inputDataTable)[0]; DataStream<Row> dataStream = tEnv.toDataStream(output); List<Row> results = IteratorUtils.toList(dataStream.executeAndCollect()); "<AssertPlaceHolder>"; for (Row result : results) { if (result.getField(0) == (Object) 0) { assertEquals( Vectors.dense(2.1, 2.3, 3.1), result.getField(vectorSlicer.getOutputCol()));  } else if (result.getField(0) == (Object) 1) { assertEquals( Vectors.dense(2.3, 1.3, 4.1), result.getField(vectorSlicer.getOutputCol())); } else { throw new RuntimeException("Result id value is error, it must be 0 or 1."); } } }
[*] target: assertEquals(2, results.size())
[-] pred: org. junit. Assert. assertEquals ( 2, results. size ( ) )
************************************
[+] input: testUtf8SubjectEncoded() { String s = null; try { s = MimeUtility.decodeText(ENV_UTF8_ENCODED_SUBJECT); } catch (UnsupportedEncodingException ex) { } final String subject = s;  testWithHandler( new IMAPTest() { @Override public void test(Folder folder, IMAPHandlerMessage handler) throws MessagingException { Message m = folder.getMessage(1); "<AssertPlaceHolder>"; } }, new IMAPHandlerMessage() { { { envelope = "(" + ENV_DATE + " "" + ENV_UTF8_ENCODED_SUBJECT + "" " + ENV_ADDRS + ")"; } } }); }
[*] target: assertEquals(subject, m.getSubject())
[-] pred: org. junit. Assert. assertEquals ( subject, m. getSubject ( ) )
************************************
[+] input: toByteArray2() { ByteArraySerializer serializer = ByteArraySerializer.newInstance(); byte[] expect = new byte[]{(byte) 0x01, // 0, 25689 (byte) 0x00, (byte) 0x00, (byte) 0x64, (byte) 0x59, // 523975585 (byte) 0x3B, (byte) 0xA1, (byte) 0x1F, (byte) 0x3B, (byte) 0x3B, (byte) 0xA1, (byte) 0x1F, (byte) 0x3B, // 33.16f, -15.62f (byte) 0xA3, (byte) 0xD7, (byte) 0x42, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, // 156665.35455556 (byte) 0xD6, (byte) 0x21, (byte) 0x39, (byte) 0xB7, (byte) 0x41, (byte) 0x03, (byte) 0x1F, (byte) 0xCA, // -56516.66664 (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, // 23A (byte) 0x32, (byte) 0x33, (byte) 0x41};  ByteFormatBean bean = serializer.toObject(ByteFormatBean.class, expect); byte[] actual = serializer.toByteArray(bean); "<AssertPlaceHolder>"; bean.getInt32Data().byteValue(); }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: shouldDoDefaultFormat() { //given String expectedString = getExpectedString(); String inputString = "SELECT * FROM TABLE1 t WHERE a > 100 AND b BETWEEN 12 AND 45;  SELECT t.*, j1.x, j2.y FROM TABLE1 t JOIN JT1 j1 ON j1.a = t.a LEFT OUTER JOIN JT2 j2 ON j2.a = t.a AND j2.b = j1.b WHERE t.xxx NOT NULL;  DELETE FROM TABLE1 WHERE a = 1;  UPDATE TABLE1 SET a = 2 WHERE a = 1;  SELECT table1.id, table2.number, SUM(table1.amount) FROM table1 INNER JOIN table2 ON table.id = table2.table1_id WHERE table1.id IN ( SELECT table1_id FROM table3 WHERE table3.name = 'Foo Bar' AND table3.type = 'unknown_type') GROUP BY table1.id, table2.number ORDER BY table1.id;\n";  Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_LF_BEFORE_COMMA))).thenReturn(false);  //when String formattedString = formatter.format(inputString, configuration);  //then  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
[+] input: shouldReturnOutputColumnIndex() { HashMap<String, Object> stringObjectHashMap = new HashMap<>(); stringObjectHashMap.put("outputColumnName", "features"); HashMap<String, String> data = new HashMap<>(); data.put("keyColumnName", "customer_id"); data.put("valueColumnName", "order_number"); data.put("type", "StingType"); List<HashMap<String, String>> hashMaps = Collections.singletonList(data); stringObjectHashMap.put("data", hashMaps);  String[] inputColumnNames = {"customer_id", "order_number", "features"}; FeatureWithTypeHandler featureWithTypeHandler = new FeatureWithTypeHandler(stringObjectHashMap, inputColumnNames); int outputColumnIndex = featureWithTypeHandler.getOutputColumnIndex();  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(2, outputColumnIndex)
[-] pred: org. junit. Assert. assertEquals ( 2, outputColumnIndex )
************************************
[+] input: shouldReturnEmptyArrayListWhenBulkResponseExecutedSuccessfully() { MongoSinkClient mongoSinkClient = new MongoSinkClient(mongoCollection, firehoseInstrumentation, mongoRetryStatusCodeBlacklist, mongoClient, mongoSinkConfig); when(mongoCollection.bulkWrite(request)).thenReturn(new BulkWriteResultMock(true, 1, 1, 0)); List<BulkWriteError> nonBlacklistedErrors = mongoSinkClient.processRequest(request); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, nonBlacklistedErrors.size())
[-] pred: org. junit. Assert. assertEquals ( 0, nonBlacklistedErrors. size ( ) )
************************************
[+] input: addScope() { IdsScopeProvider.addScope(new IdsScope().setCode("code").setDescription("aasdasd")); List<IdsScope> scopeList = IdsScopeProvider.getScopeByCodes(Collections.singletonList("code")); Assert."<AssertPlaceHolder>"; Assert.assertEquals(1, scopeList.size()); }
[*] target: assertNotNull(scopeList)
[-] pred: org. junit. Assert. assertNotNull ( scopeList )
************************************
[+] input: testInvalidInput() { parser.parse("xyz"); assertFalse(parser.isValidInput()); parser.parse(getInvalidTestIP4Ping1()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(parser.isValidInput())
[-] pred: org. junit. Assert. assertFalse ( parser. isValidInput() )
************************************
[+] input: listBucketTest() { List<String> buckets = manager.listBuckets(); boolean expectTrue = buckets.contains(manager.getBucket()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(expectTrue)
[-] pred: org. junit. Assert. assertTrue ( expectTrue )
************************************
[+] input: getShardingColumnName3() { String shardingColumnName = SplitTableUtil.getShardingColumnName("commerce2", "table_engine_test"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(shardingColumnName)
[-] pred: org. junit. Assert. assertNull ( shardingColumnName )
************************************
[+] input: shouldUseDefaultNanosDuringTransformIfSimpleGroupHasGroupTypeTimestampWithNanosNotInitialized() { Instant currentInstant = Instant.now(); long seconds = currentInstant.getEpochSecond(); Row expectedRow = Row.of(seconds, 0);  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor);  /* adding both nanos and seconds field to the timestamp schema but initializing only for seconds */ GroupType timestampSchema = org.apache.parquet.schema.Types.optionalGroup() .optional(INT64).named("seconds") .optional(INT32).named("nanos") .named("event_timestamp"); SimpleGroup timestampMessage = new SimpleGroup(timestampSchema); timestampMessage.add("seconds", seconds);  MessageType parquetSchema = buildMessage() .addField(timestampSchema) .named("TestBookingLogMessage"); SimpleGroup mainMessage = new SimpleGroup(parquetSchema); mainMessage.add("event_timestamp", timestampMessage);  Row actualRow = (Row) timestampHandler.transformFromParquet(mainMessage);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
[+] input: createToken() { when(httpServletRequestMock.getHeader("x-forwarded-for")).thenReturn("127.0.0.1"); when(httpServletRequestMock.getHeader("user-agent")).thenReturn("ua"); String token = JapSsoUtil.createToken("userId", "userName", request); System.out.println(token); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(token)
[-] pred: org. junit. Assert. assertNotNull ( token )
************************************
[+] input: testNotNull_Negative() { Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(null)
[-] pred: org. junit. Assert. assertNotNull ( null )
************************************
[+] input: testSuccess() { when(openSearchConnection.select(anyString())) .thenReturn( new DBResult( "OpenSearch", asList(new Type("firstname", "text")), asList(new Row(asList("John"))))); when(otherDbConnection.select(anyString())) .thenReturn( new DBResult( "Other DB", asList(new Type("firstname", "text")), asList(new Row(asList("John")))));  TestReport expected = new TestReport(); expected.addTestCase(new SuccessTestCase(1, "SELECT * FROM accounts")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: createRsaJsonWebKey() { RsaJsonWebKey rsaJsonWebKey = JwkUtil.createRsaJsonWebKey("jap-jwks-keyid", TokenSigningAlg.RS256); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(rsaJsonWebKey)
[-] pred: org. junit. Assert. assertNotNull ( rsaJsonWebKey )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x02, (byte) 0x00, (byte) 0xC4, (byte) 0x00, (byte) 0x16}; MbReadDiscreteInputRequest mb = new MbReadDiscreteInputRequest(); mb.setFunctionCode(EMbFunctionCode.READ_DISCRETE_INPUT); mb.setAddress(196); mb.setQuantity(22); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: testBeanPropertiesSpecAnnotation() { annotationMapper.parseClassAnnotations(ClassWithBeanPropertiesSpec.class.getAnnotations(), context); Object bean = context.get("bean"); "<AssertPlaceHolder>"; assertEquals(Date.class, bean.getClass()); assertEquals(345, ((Date) bean).getTime()); }
[*] target: assertNotNull(bean)
[-] pred: org. junit. Assert. assertNotNull ( bean )
************************************
[+] input: testParsingCustomAgent() { UserAgent testUserAgent = UserAgents .create() .withUiLayer(UiLayer.HTML) .withUiDeviceType(UiDeviceType.MOBILE) .withUiEngineType(UiEngineType.ANDROID) .withUiSystem(UiSystem.ANDROID) .withDeviceId("Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30") .build(); DefaultUserAgentParser parser = new DefaultUserAgentParser(); String id = testUserAgent.createIdentifier(parser);  UserAgent parsedAgent = UserAgents.createByIdentifier(parser, id); "<AssertPlaceHolder>"; }
[*] target: assertEquals(testUserAgent, parsedAgent)
[-] pred: org. junit. Assert. assertEquals ( testUserAgent, parsedAgent )
************************************
[+] input: Exception { IScoutTestParameter testParameter = new ParameterizedTestClassParameter("p");  Object createdTestInstance = ParameterizedTestRunnerExtension.createTest(m_testClass, testParameter); "<AssertPlaceHolder>"; assertEquals(SampleParameterizedTestClass.class, createdTestInstance.getClass()); assertEquals(testParameter, ((SampleParameterizedTestClass) createdTestInstance).getTestParameter()); }
[*] target: assertNotNull(createdTestInstance)
[-] pred: org. junit. Assert. assertNotNull ( createdTestInstance )
************************************
[+] input: testSaveNotebook() { String newName = "new name"; long currentTimeStamp = System.currentTimeMillis(); NotebookInfo nbInfo = nbService.findById(Integer.valueOf(defaultMockNotebookId)); nbInfo.setName(newName); nbInfo.setUpdateTime(new Timestamp(currentTimeStamp)); nbService.save(nbInfo); NotebookInfo newNotebookInfo = nbService.findById(Integer.valueOf(defaultMockNotebookId)); Assert."<AssertPlaceHolder>"; Assert.assertEquals(newName, newNotebookInfo.getName()); Assert.assertEquals(currentTimeStamp, newNotebookInfo.getUpdateTime().getTime()); }
[*] target: assertNotNull(newNotebookInfo)
[-] pred: org. junit. Assert. assertNotNull ( newNotebookInfo )
************************************
[+] input: testUnset() { FinalValue<String> s = new FinalValue<>(); assertFalse(s.isSet()); "<AssertPlaceHolder>"; }
[*] target: assertNull(s.get())
[-] pred: org. junit. Assert. assertNull ( s. get() )
************************************
[+] input: testUpdateActionsFromPaths_resourcesCheckstyle() { Set<UpdateAction> expectedActions = EnumSet.noneOf(UpdateAction.class); // this is not a valid update target List<Path> changedPaths = List.of(Path.of("resources/checkstyle/checkstyle.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
[+] input: testIsRunning() { LatencyCounter counter = new LatencyCounter("test"); counter.start(); assertNotEquals(counter.getStartTime(), 0L); assertTrue(counter.isRunning()); counter.stop(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(counter.isRunning())
[-] pred: org. junit. Assert. assertFalse ( counter. isRunning() )
************************************
[+] input: Exception { InputStream inputStream = IOUtils.open("org/opensearch/hadoop/util/textdata.txt"); "<AssertPlaceHolder>";  BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)); assertEquals("Hello World. This is used by IOUtilsTest.", reader.readLine()); }
[*] target: assertNotNull(inputStream)
[-] pred: org. junit. Assert. assertNotNull ( inputStream )
************************************
[+] input: Exception { GenericSink sink = new GenericSink(instrumentation, "test", this.depotSink); SinkResponse response = new SinkResponse(); response.addErrors(5, new ErrorInfo(new Exception(), ErrorType.SINK_4XX_ERROR)); response.addErrors(2, new ErrorInfo(new Exception(), ErrorType.DEFAULT_ERROR)); response.addErrors(4, new ErrorInfo(new Exception(), ErrorType.DESERIALIZATION_ERROR)); Mockito.when(this.depotSink.pushToSink(Mockito.anyList())).thenReturn(response); Message m1 = new Message(new byte[1], new byte[1], "test", 1, 1); Message m2 = new Message(new byte[1], new byte[1], "test", 1, 2); Message m3 = new Message(new byte[1], new byte[1], "test", 1, 3); Message m4 = new Message(new byte[1], new byte[1], "test", 1, 4); Message m5 = new Message(new byte[1], new byte[1], "test", 1, 5); Message m6 = new Message(new byte[1], new byte[1], "test", 1, 6); List<Message> messages = new ArrayList<Message>() {{ add(m1); add(m2); add(m3); add(m4); add(m5); add(m6); }}; sink.prepare(messages); List<Message> failedMessages = sink.execute(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(ErrorType.DEFAULT_ERROR, failedMessages.get(0).getErrorInfo().getErrorType()); Assert.assertEquals(ErrorType.DESERIALIZATION_ERROR, failedMessages.get(1).getErrorInfo().getErrorType()); Assert.assertEquals(ErrorType.SINK_4XX_ERROR, failedMessages.get(2).getErrorInfo().getErrorType());  Assert.assertEquals(3, failedMessages.get(0).getOffset()); Assert.assertEquals(5, failedMessages.get(1).getOffset()); Assert.assertEquals(6, failedMessages.get(2).getOffset()); }
[*] target: assertEquals(3, failedMessages.size())
[-] pred: org. junit. Assert. assertEquals ( 3, failedMessages. size ( ) )
************************************
[+] input: testGetSetRemovePreferenceFileDumpEnabled() { assertFalse(preferenceManager.getPreferenceFileDumpEnabled()); preferenceManager.setPreferenceFileDumpEnabled(true); assertTrue(preferenceManager.getPreferenceFileDumpEnabled()); preferenceManager.removeAllPreferences(); assertFalse(preferenceManager.getPreferenceFileDumpEnabled()); preferenceManager.setPreferenceFileDumpEnabled(true); preferenceManager.removePreferenceFileDumpEnabled(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(preferenceManager.getPreferenceFileDumpEnabled())
[-] pred: org. junit. Assert. assertFalse ( preferenceManager. getPreferenceFileDumpEnabled ( ) )
************************************
[+] input: testVarchar() { setConfig(ConfigKeys.TASK_EXTRACT_REBUILD_DATA_LOG, "true"); String str = "abcdefgh"; Field field = MakeFieldFactory.makeField("varchar(5)", str, "utf8", false, false); RowDataRebuildLogger logger = new RowDataRebuildLogger(); Serializable s = logger.doDecode(field.getMysqlType().getType(), field.doGetTableMeta(), field.encode(), "utf8", false); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(str, s)
[-] pred: org. junit. Assert. assertEquals ( str, s )
************************************
[+] input: shouldReturnTheSameBuilderWithoutSettingFieldIfNullPassed() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("order_number"); MessageHandler messageHandler = new MessageHandler(fieldDescriptor); DynamicMessage.Builder builder = DynamicMessage.newBuilder(fieldDescriptor.getContainingType());  DynamicMessage.Builder outputBuilder = messageHandler.transformToProtoBuilder(builder, null); "<AssertPlaceHolder>"; assertEquals("", outputBuilder.getField(fieldDescriptor)); }
[*] target: assertEquals(builder, outputBuilder)
[-] pred: org. junit. Assert. assertEquals ( builder, outputBuilder )
************************************
[+] input: testPrintEnvironments() { BeneratorUtil.printEnvironments(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
[+] input: shouldReturnFalseIfRepeatedEnumFieldDescriptorIsPassed() { Descriptors.FieldDescriptor repeatedEnumFieldDescriptor = TestRepeatedEnumMessage.getDescriptor().findFieldByName("test_enums"); RepeatedPrimitiveHandler repeatedPrimitiveHandler = new RepeatedPrimitiveHandler(repeatedEnumFieldDescriptor);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(repeatedPrimitiveHandler.canHandle())
[-] pred: org. junit. Assert. assertFalse ( repeatedPrimitiveHandler. canHandle() )
************************************
[+] input: testDivisionByNaN() { System.out.println("division por NaN"); double num1 = 0.0; double num2 = Double.NaN; Calculadora instance = new Calculadora(); double expResult = Double.NaN; double result = instance.division(num1, num2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expResult, result, 0.0)
[-] pred: org. junit. Assert. assertEquals ( expResult, result, 0.0 )
************************************
[+] input: interpolationEnd() { createCueFile("'a\\(123)'"); var literal = findTypedElement(CueStringLiteral.class); var ranges = CueMultiHostInjector.findInjectionRanges(literal);  var expected = Arrays.asList( new InjectionData(TextRange.create(1, 2), null, null), new InjectionData(TextRange.create(8, 8), "\\(123)", null)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, ranges)
[-] pred: org. junit. Assert. assertEquals ( expected, ranges )
************************************
[+] input: SQLException {  final String mockReleaseDate = "20240412"; final String mockEngineVersion = "5.4.19";  Connection mockConnection = mock(Connection.class); mockMetaDbUtil.when(MetaDbUtil::getConnection).thenAnswer(i -> mockConnection); Statement statement = mock(Statement.class); Mockito.when(mockConnection.createStatement()).thenReturn(statement); ResultSet resultSet = mock(ResultSet.class); Mockito.when(statement.executeQuery(Mockito.anyString())).thenReturn(resultSet); Mockito.when(resultSet.next()).thenReturn(true); Mockito.when(resultSet.getString(1)).thenReturn(mockEngineVersion); Mockito.when(resultSet.getString(2)).thenReturn(mockReleaseDate);  String gmsPolardbVersion = null; try { gmsPolardbVersion = MetaDbUtil.getGmsPolardbVersion(); } catch (Exception e) { Assert.fail(e.getMessage()); } Assert."<AssertPlaceHolder>"; Assert.assertEquals(String.format("%s-%s", mockEngineVersion, mockReleaseDate), gmsPolardbVersion); }
[*] target: assertNotNull(gmsPolardbVersion)
[-] pred: org. junit. Assert. assertNotNull ( gmsPolardbVersion )
************************************
[+] input: testAsciiConvertionWithSpecialChar() { // Arrange String emailAddress = "sömeone@exämple.com"; String punycodeAddress = "sömeone@xn--exmple-cua.com";  // Act String convertedAddress = BEANS.get(MailIDNConverter.class).toASCII(emailAddress);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(punycodeAddress, convertedAddress)
[-] pred: org. junit. Assert. assertEquals ( punycodeAddress, convertedAddress )
************************************
[+] input: testFreePart() { int partNum1 = diskSpaceManager.allocPart(1); int partNum2 = diskSpaceManager.allocPart(2);  BufferFrame frame1 = bufferManager.fetchNewPageFrame(partNum1); BufferFrame frame2 = bufferManager.fetchNewPageFrame(partNum2); BufferFrame frame3 = bufferManager.fetchNewPageFrame(partNum1); BufferFrame frame4 = bufferManager.fetchNewPageFrame(partNum2); BufferFrame frame5 = bufferManager.fetchNewPageFrame(partNum2);  frame1.unpin(); frame2.unpin(); frame3.unpin(); frame4.unpin(); frame5.unpin();  bufferManager.freePart(partNum1);  try { diskSpaceManager.readPage(frame1.getPageNum(), new byte[DiskSpaceManager.PAGE_SIZE]); fail(); } catch (Exception e) { /* do nothing */ } try { diskSpaceManager.readPage(frame3.getPageNum(), new byte[DiskSpaceManager.PAGE_SIZE]); fail(); } catch (Exception e) { /* do nothing */ } try { diskSpaceManager.allocPage(partNum1); fail(); } catch (Exception e) { /* do nothing */ }  BufferFrame frame6  = bufferManager.fetchNewPageFrame(partNum2); BufferFrame frame7  = bufferManager.fetchNewPageFrame(partNum2); frame6.unpin(); frame7.unpin(); assertFalse(frame1.isValid()); assertTrue(frame2.isValid()); assertFalse(frame3.isValid()); assertTrue(frame4.isValid()); assertTrue(frame5.isValid()); assertTrue(frame6.isValid()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(frame7.isValid())
[-] pred: org. junit. Assert. assertTrue ( frame7. isValid() )
************************************
[+] input: includeListTest() {  ProviderConfig providerConfig = new ProviderConfig(); DefaultProviderBootstrap defaultProviderBootstra = new DefaultProviderBootstrap(providerConfig); boolean result = defaultProviderBootstra.inList("hello1", "hello2", "hello1"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testAcquireAndRelease() { OptimisticLock l = new OptimisticLock(); l.acquire(); l.release(); assertFalse(l.isAcquired()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(l.isReleased())
[-] pred: org. junit. Assert. assertTrue ( l. isReleased() )
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("22:30-04:30"); TimeInterval expected = new TimeInterval( LocalTime.of(22, 30, 0), LocalTime.of(4, 30, 0) ); "<AssertPlaceHolder>"; assertEquals(3600 * 6, actual.getDuration()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCleanupWithEmptyList() { //noinspection deprecation List<IMenu> cleanList = ActionUtility.visibleNormalizedActions(Collections.emptyList()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cleanList.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cleanList. isEmpty ( ) )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineTopicRouteInfo(anyString())).thenReturn(MockObjectUtil.createTopicRouteData()); } TopicRouteData topicRouteData = mqAdminExtImpl.examineTopicRouteInfo("topic_test"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(topicRouteData)
[-] pred: org. junit. Assert. assertNotNull ( topicRouteData )
************************************
[+] input: testEmpty() { ClientRunContext runContext = ClientRunContexts.empty(); assertNull(runContext.getSubject()); assertNull(runContext.getSession()); "<AssertPlaceHolder>"; assertNull(runContext.getLocale()); assertEquals(TransactionScope.REQUIRED, runContext.getTransactionScope()); }
[*] target: assertNull(runContext.getUserAgent())
[-] pred: org. junit. Assert. assertNull ( runContext. getUserAgent() )
************************************
[+] input: JsonProcessingException { JsonQuery jsonQuery = new JsonQuery(); String jsonEvent = "{"k1":null,"k2":"v2"}"; String jPath = "$.k1"; String result = jsonQuery.eval(jsonEvent, jPath); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: test() { IFuture<Void> future1 = Jobs.schedule(mock(IRunnable.class), Jobs.newInput().withName("job_A_job")); IFuture<Void> future2 = Jobs.schedule(mock(IRunnable.class), Jobs.newInput().withName("job_B_job")); IFuture<Void> future3 = Jobs.schedule(mock(IRunnable.class), Jobs.newInput().withName("job_C_job"));  Predicate<IFuture<?>> filter = new JobNameRegexFutureFilter(Pattern.compile(".*[AB].*")); assertTrue(filter.test(future1)); assertTrue(filter.test(future2)); "<AssertPlaceHolder>";  // cleanup Jobs.getJobManager().awaitDone(Jobs.newFutureFilterBuilder() .andMatchFuture(future1, future2, future3) .toFilter(), 10, TimeUnit.SECONDS); }
[*] target: assertFalse(filter.test(future3))
[-] pred: org. junit. Assert. assertFalse ( filter. test ( future3 ) )
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestMessage"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestMessage.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(commonMessage.getDescriptor(), commonMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"order_number":"order-number-123","order_url":"https://order-url","order_details":"pickup"}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
[+] input: testEncryption() { final String origData = "origData"; final byte[] salt = SecurityUtility.createRandomBytes(); final byte[] inputBytes = origData.getBytes(ENCODING);  byte[] encryptData = SecurityUtility.encrypt(inputBytes, PASSWORD, salt, KEY_LEN); Assert.assertFalse(Arrays.equals(encryptData, inputBytes));  byte[] encryptData3 = SecurityUtility.encrypt(new byte[]{}, PASSWORD, salt, KEY_LEN); byte[] decryptedEmpty = SecurityUtility.decrypt(encryptData3, PASSWORD, salt, KEY_LEN); Assert.assertArrayEquals(decryptedEmpty, new byte[]{});  String decryptedString = new String(SecurityUtility.decrypt(encryptData, PASSWORD, salt, KEY_LEN), ENCODING); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(origData, decryptedString)
[-] pred: org. junit. Assert. assertEquals ( origData, decryptedString )
************************************
[+] input: testToBundleDefaultValues() { Time time = new Time(); assertEquals(0, time.getHour()); assertEquals(0, time.getMinute()); PersistableBundle persistableBundle = time.toPersistableBundle(); assertNotNull(persistableBundle); time = new Time(persistableBundle); assertEquals(0, time.getHour()); assertEquals(0, time.getMinute()); Bundle bundle = time.toBundle(); assertNotNull(bundle); time = new Time(bundle); assertEquals(0, time.getHour()); assertEquals(0, time.getMinute()); Map<String, ?> map = time.toMap(); assertNotNull(map); time = new Time(map); assertEquals(0, time.getHour()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, time.getMinute())
[-] pred: org. junit. Assert. assertEquals ( 0, time. getMinute() )
************************************
[+] input: getExtensionLoaderTest() { ExtensionLoader<?> extensionLoader = ExtensionLoader.getLoader(Extension.class); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(extensionLoader)
[-] pred: org. junit. Assert. assertNotNull ( extensionLoader )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x0F, (byte) 0x00, (byte) 0x13, (byte) 0x00, (byte) 0x0A, (byte) 0x02, (byte) 0xCD, (byte) 0x01}; MbWriteMultipleCoilRequest mb = new MbWriteMultipleCoilRequest(); mb.setFunctionCode(EMbFunctionCode.WRITE_MULTIPLE_COIL); mb.setAddress(19); mb.setQuantity(10); mb.setCount(2); mb.setValue(new byte[]{(byte) 0xCD, (byte) 0x01}); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: testEnvironmentAndSystemSubstitution() { final Properties defaults = new Properties(); defaults.put("a", "1"); defaults.put("b", "2"); defaults.put("c", "3");  final Properties systems = new Properties(); systems.put("a", "4"); systems.put("b", "5"); systems.put("c", "6");  final Map<String, String> environments = new HashMap<>(); environments.put("a", "7"); environments.put("b", "8"); environments.put("c", "9");  final StringSubstitution substitution = new StringSubstitution(defaults, systems, environments); final Map<String, String> mapping = new LinkedHashMap<>();  mapping.put("${a} ${sys:a} ${env:a}", "1 4 7"); mapping.put("${missing:-${b}} ${missing:-${sys:b}} ${missing:-${env:b}}", "2 5 8"); mapping.put("${sys:missing:-${b}} ${sys:missing:-${sys:b}} ${sys:missing:-${env:b}}", "2 5 8"); mapping.put("${env:missing:-${b}} ${env:missing:-${sys:b}} ${env:missing:-${env:b}}", "2 5 8");  for (final Map.Entry<String, String> entry : mapping.entrySet()) { final String text = entry.getKey(); final String expected = entry.getValue(); final String actual = substitution.substitute(text);  Assert."<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldReturnFalseForInsertOrUpdateMode() { MongoUpdateRequestHandler mongoUpdateRequestHandler = new MongoUpdateRequestHandler(MongoSinkMessageType.PROTOBUF, jsonSerializer, MongoSinkRequestType.UPSERT, "customer_id", "message");  "<AssertPlaceHolder>"; }
[*] target: assertFalse(mongoUpdateRequestHandler.canCreate())
[-] pred: org. junit. Assert. assertFalse ( mongoUpdateRequestHandler. canCreate() )
************************************
[+] input: testSynchronizeIntervalsAdd() { activityScenario = launchSettingsInputActivity(GlobalSettingsActivity.class); injectTimeBasedSuspensionScheduler(); SuspensionIntervalsDialog intervalsDialog = openSuspensionIntervalsDialog(); onView(isRoot()).perform(waitFor(500)); IntervalHandler handler = new IntervalHandler(getGlobalSettingsActivity(), intervalsDialog); intervalsDialog.getAdapter().addItem(getInterval1()); intervalsDialog.getAdapter().addItem(getInterval2()); intervalsDialog.getAdapter().addItem(getInterval3()); "<AssertPlaceHolder>"; List<Interval> intervals = getIntervalDAO().readAllIntervals(); assertEquals(2, intervals.size()); assertTrue(intervals.get(0).isEqual(getInterval1())); assertTrue(intervals.get(1).isEqual(getInterval2())); }
[*] target: assertTrue(handler.synchronizeIntervals())
[-] pred: org. junit. Assert. assertTrue ( handler. synchronizeIntervals ( ) )
************************************
[+] input: ParseException { final JSONObject expected = new JSONObject(ImmutableMap.of("commands", new JSONArray()));  final JSONObject actual = parser.emptyCommands();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testPart_entity() { Entity alice = new Entity("person", dp); alice.set("cars", createCar("Audi")); context.setCurrentProduct(new ProductWrapper<>(alice)); modifier.execute(context); Entity car = (Entity) alice.get("cars"); "<AssertPlaceHolder>"; assertEquals("BMW", car.get("maker")); }
[*] target: assertNotNull(car)
[-] pred: org. junit. Assert. assertNotNull ( car )
************************************
[+] input: testExplainRequest() { PPLQueryRequest request = new PPLQueryRequest("source=t a=1", null, "/_plugins/_ppl/_explain"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(request.isExplainRequest())
[-] pred: org. junit. Assert. assertTrue ( request. isExplainRequest ( ) )
************************************
[+] input: testCheckAndSet_EnableCaching_IfModifiedSince_NotModifiedAtFidelity() { Mockito.when(req.getPathInfo()).thenReturn("/"); Mockito.when(req.getHeader(HttpCacheControl.ETAG)).thenReturn(null); Mockito.when(req.getHeader(HttpCacheControl.IF_NONE_MATCH)).thenReturn(null); Mockito.when(req.getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE)).thenReturn(1000000L);  BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes(StandardCharsets.UTF_8)) .withCachingAllowed(true) .withLastModified(1000000L + HttpCacheControl.IF_MODIFIED_SINCE_FIDELITY) .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = cc.checkAndSetCacheHeaders(req, resp, obj); Assert."<AssertPlaceHolder>";  Mockito.verify(req, ANY_TIMES).getPathInfo(); Mockito.verify(req, ANY_TIMES).getAttribute("jakarta.servlet.forward.path_info"); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.ETAG); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.IF_NONE_MATCH); Mockito.verify(req, ANY_TIMES).getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.CACHE_CONTROL, "private, max-age=0, must-revalidate"); Mockito.verify(resp, ONCE).setStatus(HttpServletResponse.SC_NOT_MODIFIED); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: ExecutionException { ExecInfo execInfo = new ExecInfo(); execInfo.setTimestamp(1636537498974L); execInfo.setSchema(SCHEMA); execInfo.setSqlType(SQL_TYPE); execInfo.setSampleSql(SQL_SAMPLE); execInfo.setPrevTemplateText(PREV_SAMPLE_SQL); execInfo.setTemplateText(SQL_TEMPLATE_TEXT); execInfo.setSampleTraceId(SAMPLE_TRACE_ID); execInfo.setWorkloadType(WORKLOAD_TYPE); execInfo.setExecuteMode(EXECUTE_MODE); execInfo.setTemplateHash(TEMPLATE_HASH); execInfo.setPrevTemplateHash(PREV_TEMPLATE_HASH); execInfo.setPlanHash(PLAN_HASH); execInfo.setErrorCount(0); execInfo.setAffectedRows(1); execInfo.setTransTime(2); execInfo.setResponseTime(3); execInfo.setPhysicalTime(4); execInfo.setPhysicalExecCount(5); execInfo.setParseTime(1); execInfo.setExecPlanCpuTime(1); execInfo.setPhyFetchRows(1); statementSummaryManager.getConfig().setStmtSummaryPercent(0); for (int i = 0; i < 1000; ++i) { statementSummaryManager.summaryStmt(execInfo); } execInfo.setSlow(true); statementSummaryManager.summaryStmt(execInfo); Iterator<StatementSummaryByDigestEntry> iterator = statementSummaryManager.getCurrentStmtSummaries(1636537498974L); Assert."<AssertPlaceHolder>"; long queryCount = iterator.next().getValue().getCount(); Assert.assertTrue(queryCount == 1); }
[*] target: assertTrue(iterator.hasNext())
[-] pred: org. junit. Assert. assertTrue ( iterator. hasNext ( ) )
************************************
[+] input: testDivisionByZero() { System.out.println("division por cero"); double num1 = 0.0; double num2 = 0.0; Calculadora instance = new Calculadora(); double expResult = Double.NaN; double result = instance.division(num1, num2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expResult, result, 0.0)
[-] pred: org. junit. Assert. assertEquals ( expResult, result, 0.0 )
************************************
[+] input: testWriteDateWithNanos() { JdkValueWriter jdkValueWriter = new JdkValueWriter(); Timestamp timestamp = new Timestamp(1420114230123l); timestamp.setNanos(123456789); Generator generator = Mockito.mock(Generator.class); ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class); jdkValueWriter.doWrite(timestamp, generator, ""); Mockito.verify(generator).writeString(argument.capture()); String expected = timestamp.toInstant().atZone(ZoneId.systemDefault()).toOffsetDateTime().toString(); String actual = argument.getValue(); "<AssertPlaceHolder>"; OffsetDateTime parsedDate = DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(actual, OffsetDateTime::from); assertEquals(123456789, parsedDate.getNano()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { List<String> expect = new ArrayList<>(); List<String> actual = new ArrayList<>(); int n = 11; for (int i = 1; i < n; i++) { String fileName = BinlogFileUtil.getBinlogFilePrefix(group, stream) + String.format(".%06d", i); expect.add(fileName); File f = fileSystem.newFile(fileName); f.createNewFile(); }  // 测试后缀不匹配场景 String fileName = String.format("%06d", 10) + ".tmp"; File f = fileSystem.newFile(fileName); f.createNewFile(); fileName = String.format("%05d", 10); f = fileSystem.newFile(fileName); f.createNewFile(); // 测试前缀不匹配场景 fileName = "random" + String.format("%06d", 10); f = fileSystem.newFile(fileName); f.createNewFile();  List<CdcFile> fileList = fileSystem.listFiles(); for (CdcFile cdcFile : fileList) { actual.add(cdcFile.getName()); } boolean res = ListUtils.isEqualList(expect, actual); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(res)
[-] pred: org. junit. Assert. assertTrue ( res )
************************************
[+] input: test04ctById() {  Parent p = new Parent(); p.setAge(18); p.setName("person"); p.setId("10");  mars.insert(p); Criteria id = Criteria.where("_id").is("10");  long l = mars.count(new Query(id), Parent.class);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, l)
[-] pred: org. junit. Assert. assertEquals ( 1, l )
************************************
[+] input: testWithExceptionInRemove() { GroupedSynchronizer<String, String> lck = new GroupedSynchronizer<>(); RuntimeException expectedException = new RuntimeException(); String key = "key"; lck.runInGroupLock(key, () -> { }, Function.identity());  assertEquals(1, lck.size()); assertNull(lck.remove("nonExisting")); assertEquals(0, lck.numLockedRootLocks());  try { lck.remove("key", obj -> { assertEquals(1, lck.numLockedRootLocks()); throw expectedException; }); } catch (RuntimeException e) { assertSame(expectedException, e); }  // lock is available again: assertEquals(0, lck.numLockedRootLocks()); "<AssertPlaceHolder>"; // remove is done (event there was an exception) }
[*] target: assertEquals(0, lck.size())
[-] pred: org. junit. Assert. assertEquals ( 0, lck. size() )
************************************
[+] input: generateAuthorizationCodeResponse() { String url = idsAuthorizationProvider.generateAuthorizationCodeResponse(userInfo, idsRequestParam, clientDetail); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(2, obj.size()); Assert.assertTrue(obj.containsKey("code")); Assert.assertTrue(obj.containsKey("state")); }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
[+] input: testGetMonotonicKsuidAfterLeapSecond() {  long second = Instant.parse("2021-12-31T23:59:59.000Z").getEpochSecond(); long leapSecond = second - 1; // simulate a leap second long times[] = { second, leapSecond };  AtomicInteger i = new AtomicInteger(); Supplier<Instant> instantFunction = () -> Instant.ofEpochSecond(times[i.getAndIncrement() % times.length]);  KsuidFactory factory = KsuidFactory.newMonotonicInstance(() -> new Random().nextLong(), instantFunction);  long ms1 = factory.create().getTime(); // second long ms2 = factory.create().getTime(); // leap second  "<AssertPlaceHolder>"; // LEAP SECOND! DON'T MOVE BACKWARDS! }
[*] target: assertEquals(ms1, ms2)
[-] pred: org. junit. Assert. assertEquals ( ms1, ms2 )
************************************
[+] input: shouldReturnCheckPointedPositionWithNoOffsetAndZeroRecordsAfterOffsetWhenReadHasNotBeenCalledYet() { ParquetReader.ParquetReaderProvider provider = new ParquetReader.ParquetReaderProvider(deserializer, statsDReporterSupplierMock); ClassLoader classLoader = getClass().getClassLoader(); ParquetReader reader = provider.getReader(classLoader.getResource("test_file.parquet").getPath());  CheckpointedPosition expectedCheckpointedPosition = new CheckpointedPosition(CheckpointedPosition.NO_OFFSET, 0);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCheckpointedPosition, reader.getCheckpointedPosition())
[-] pred: org. junit. Assert. assertEquals ( expectedCheckpointedPosition, reader. getCheckpointedPosition ( ) )
************************************
[+] input: Exception { FilterRegistrationBean result = webMvcConfig.uriCostFilterRegistration(); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: containsNotEmptyKey() { JapCache japCache = new JapLocalCache(); boolean containsKey = japCache.containsKey("Key"); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(containsKey)
[-] pred: org. junit. Assert. assertFalse ( containsKey )
************************************
[+] input: testReadBytes() { byte[] expected = new byte[]{0, 1, 2, 3}; byte[] actual = IOUtility.readBytes(newInputStream(expected)); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expected, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expected, actual )
************************************
[+] input: mp4FtypBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x18, 0x66, 0x74, 0x79, 0x70, 0x69, 0x73, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x01, 0x69, 0x73, 0x6F, 0x6D, 0x61, 0x76, 0x63, 0x31 }; Mp4FtypBox box = new Mp4FtypBox(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: IOException { EntryIndexFile file = new EntryIndexFile(new ByteArraySeekableFile()); Iterator<EntryIndexItem> iterator = file.iterator(); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext ( ) )
************************************
[+] input: testEnsureTypeWithAny() { final RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT); RexBuilder builder = new RexBuilder(typeFactory);  RexNode node =  new RexLiteral( Boolean.TRUE, typeFactory.createSqlType(SqlTypeName.BOOLEAN), SqlTypeName.BOOLEAN); RexNode ensuredNode = builder.ensureType( typeFactory.createSqlType(SqlTypeName.ANY), node, true);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(node, ensuredNode)
[-] pred: org. junit. Assert. assertEquals ( node, ensuredNode )
************************************
[+] input: IllegalAccessException { BulkWriteError writeError1 = new BulkWriteError(400, "Duplicate Key Error", new BsonDocument(), 0); BulkWriteError writeError2 = new BulkWriteError(11000, "Duplicate Key Error", new BsonDocument(), 1); List<BulkWriteError> writeErrors = Arrays.asList(writeError1, writeError2);  MongoSink mongoSink = new MongoSink(firehoseInstrumentation, SinkType.MONGODB.name(), mongoRequestHandler, mongoSinkClient); Field messagesField = MongoSink.class.getDeclaredField("messages"); messagesField.setAccessible(true); messagesField.set(mongoSink, this.messages);  when(mongoSinkClient.processRequest(any())).thenReturn(writeErrors); List<Message> failedMessages = mongoSink.execute(); "<AssertPlaceHolder>"; assertEquals(this.messages.get(0), failedMessages.get(0)); assertEquals(this.messages.get(1), failedMessages.get(1)); }
[*] target: assertEquals(2, failedMessages.size())
[-] pred: org. junit. Assert. assertEquals ( 2, failedMessages. size ( ) )
************************************
[+] input: getNextBinlogFileNameTest() { // 单流测试 String groupName = GROUP_NAME_GLOBAL; String streamName = STREAM_NAME_GLOBAL; String fileName = getFirstBinlogFileName(groupName, streamName); int randomSeq = new Random().nextInt(BINLOG_FILE_NAME_MAX_SEQUENCE); for (int i = 1; i < randomSeq; i++) { fileName = getNextBinlogFileName(fileName); } String expectedFileName = getBinlogFileNameBySequence(groupName, streamName, randomSeq); assertEquals(expectedFileName, fileName); // 多流测试 groupName = "group1"; streamName = "stream1"; fileName = getFirstBinlogFileName(groupName, streamName); for (int i = 1; i < randomSeq; i++) { fileName = getNextBinlogFileName(fileName); } expectedFileName = getBinlogFileNameBySequence(groupName, streamName, randomSeq); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedFileName, fileName)
[-] pred: org. junit. Assert. assertEquals ( expectedFileName, fileName )
************************************
[+] input: testClear() { assertTrue(c.isEmpty()); c.clear(); assertTrue(c.isEmpty()); assertTrue(c.addOrdered(m_ordered10)); assertTrue(c.addOrdered(m_ordered20)); assertTrue(c.addOrdered(m_ordered30)); assertFalse(c.isEmpty()); c.clear(); assertTrue(c.isEmpty()); c.clear(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(c.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( c. isEmpty() )
************************************
[+] input: Exception { BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes("UTF-8")) .build(); HttpCacheKey key = new HttpCacheKey("/"); HttpCacheObject obj = new HttpCacheObject(key, res); boolean b = rc.put(obj); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
[+] input: testGetMethodPropertyAnnotation() { PropertyUtils propertyUtils = new PropertyUtils(); propertyUtils.setBeanAccess(BeanAccess.PROPERTY);  Property property = propertyUtils.getProperty(TestBean.class, "age");  TestAnnotation annotation = property.getAnnotation(TestAnnotation.class); "<AssertPlaceHolder>"; assertEquals("getter", annotation.value()); // Annotation on getter takes precedence }
[*] target: assertNotNull(annotation)
[-] pred: org. junit. Assert. assertNotNull ( annotation )
************************************
[+] input: getShardingColumnName2() { String shardingColumnName = SplitTableUtil.getShardingColumnName("commerce", "table_engine_test3"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(shardingColumnName)
[-] pred: org. junit. Assert. assertNull ( shardingColumnName )
************************************
[+] input: shouldReturnMultipleEmptyBlackListStatusCodesAsEmptyList() { String inputRetryStatusCodeBlacklist = ",,,,,"; List<Integer> statusCodesAsList = MongoSinkClientUtil.getStatusCodesAsList(inputRetryStatusCodeBlacklist); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, statusCodesAsList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, statusCodesAsList. size ( ) )
************************************
[+] input: toByteArray() { DataItem dataItem = new DataItem(); dataItem.setReturnCode(EReturnCode.from((byte) 0xFF)); dataItem.setVariableType(EDataVariableType.BYTE_WORD_DWORD); dataItem.setCount(1); dataItem.setData(new byte[1]); byte[] actual = dataItem.toByteArray(); byte[] expect = {(byte) 0xFF, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0x00}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleMismatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "26"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
[+] input: shouldFetchDefaultValueIfFieldNotPresentInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestAggregatedSupplyMessage.getDescriptor().findFieldByName("s2_id");  GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("some-other-field") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); LongHandler longHandler = new LongHandler(fieldDescriptor);  Object actualValue = longHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0L, actualValue)
[-] pred: org. junit. Assert. assertEquals ( 0L, actualValue )
************************************
[+] input: shouldGetCurrentTimestampAsResult() { long currentTimestampMs = System.currentTimeMillis(); Clock clock = mock(Clock.class); when(clock.millis()).thenReturn(currentTimestampMs);  CurrentTimestampFunction currentTimestampFunction = new CurrentTimestampFunction(clock);  Timestamp expectedCurrentTimestamp = new Timestamp(currentTimestampMs); Timestamp actualCurrentTimestamp = (Timestamp) currentTimestampFunction.getResult(null);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCurrentTimestamp, actualCurrentTimestamp)
[-] pred: org. junit. Assert. assertEquals ( expectedCurrentTimestamp, actualCurrentTimestamp )
************************************
[+] input: testInstance() { String s = "test"; String res = Assertions.assertInstance(s, String.class); "<AssertPlaceHolder>"; }
[*] target: assertEquals(s, res)
[-] pred: org. junit. Assert. assertEquals ( s, res )
************************************
[+] input: getAuthorizeUrlTest() { try { String url = webPageAuthorizationManager.getAuthorizeUrl("http://www.jlxxw.net", AuthScope.BASE, null); Assert."<AssertPlaceHolder>"; } catch (UnsupportedEncodingException e) { throw new RuntimeException(e); } }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
[+] input: shouldNotNeedRotateWhenSizeBelowTheLimit() { long dataSize = 100L; LocalFileMetadata metadata = new LocalFileMetadata("/tmp", "/tmp/a/random-file-name-1", 1L, 100L, dataSize); boolean shouldRotate = sizeBasedRotatingPolicy.shouldRotate(metadata); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(shouldRotate)
[-] pred: org. junit. Assert. assertFalse ( shouldRotate )
************************************
[+] input: createResponse2() { String expect = "Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="876fcfac745c91bb7dd89faa660891ea""; UsernamePasswordCredential credential = new UsernamePasswordCredential("admin", "12345"); DigestAuthenticator authenticator = new DigestAuthenticator(credential); authenticator.addServerInfo("IP Camera(10789)", "", "6b9a455aec675b8db81a9ceb802e4eb8", false); authenticator.addClientInfo("rtsp://10.3.8.202:554", "DESCRIBE"); String actual = authenticator.createResponse(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: testEmptyMap() { Map<String, ?> map = new HashMap<>(); Time time = new Time(map); assertEquals(0, time.getHour()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, time.getMinute())
[-] pred: org. junit. Assert. assertEquals ( 0, time. getMinute() )
************************************
[+] input: SQLException { Mockito.when(mockResults.getBoolean("is_logging_errors")).thenReturn(true); GreenplumExternalTable table = new GreenplumExternalTable(mockSchema, mockResults); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(table.isLoggingErrors())
[-] pred: org. junit. Assert. assertTrue ( table. isLoggingErrors() )
************************************
[+] input: testElasticLogsBackendWithoutJenkinsVisualization() { ElasticBackend elasticBackend = new ElasticBackend(); elasticBackend.setElasticLogsBackend(new ElasticLogsBackendWithoutJenkinsVisualization()); Map<String, String> actual = elasticBackend.getOtelConfigurationProperties(); Map<String, String> expected = Collections.singletonMap("otel.logs.exporter", "otlp"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(actual, expected)
[-] pred: org. junit. Assert. assertEquals ( actual, expected )
************************************
[+] input: testScanFolder() { URL scoutXml = getClass().getResource("/" + JandexInventoryBuilder.SCOUT_XML_PATH); JandexInventoryBuilder builder = new JandexInventoryBuilder(RebuildStrategy.ALWAYS); Index index = builder.scanModule(builder.findIndexUri(scoutXml)); "<AssertPlaceHolder>"; ClassInfo c = index.getClassByName(DotName.createSimple(FixtureJandexInventoryObject.class.getName())); assertNotNull(c); assertEquals(FixtureJandexInventoryObject.class.getSimpleName(), c.simpleName()); }
[*] target: assertNotNull(index)
[-] pred: org. junit. Assert. assertNotNull ( index )
************************************
[+] input: testUnSubscribe() { UnSubscribeServiceRequest request = new UnSubscribeServiceRequest(); request.setServiceName("com.alipay.rpc.common.service.facade.pb.SampleServicePb:1.0@DEFAULT"); boolean result = meshApiClient.unSubscribeService(request); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: InterruptedException { ScheduledService scheduledService = new ScheduledService("ttt", 12345, new Runnable() { @Override public void run() { count.incrementAndGet(); } }, 0, 100, TimeUnit.MILLISECONDS); scheduledService.start(); Assert.assertFalse(scheduledService.isStarted());  scheduledService = new ScheduledService("ttt", ScheduledService.MODE_FIXEDRATE, new Runnable() { @Override public void run() { count.incrementAndGet(); } }, 0, 100, TimeUnit.MILLISECONDS); scheduledService.start(); Assert.assertTrue(scheduledService.isStarted()); scheduledService.start(); Assert.assertTrue(scheduledService.isStarted()); Thread.sleep(300); Assert.assertTrue(count.get() > 0);  ScheduledService.reset(); Assert.assertTrue(scheduledService.isStarted()); Assert.assertFalse(ScheduledService.isResetting());  scheduledService.shutdown(); Assert.assertFalse(scheduledService.isStarted()); scheduledService.stop(); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(scheduledService.isStarted())
[-] pred: org. junit. Assert. assertFalse ( scheduledService. isStarted() )
************************************
[+] input: testReload() { int partNum = diskSpaceManager.allocPart(1);  byte[] expected = new byte[] { (byte) 0xDE, (byte) 0xAD, (byte) 0xBE, (byte) 0xEF }; byte[] actual = new byte[4];  BufferFrame frame1 = bufferManager.fetchNewPageFrame(partNum); frame1.writeBytes((short) 67, (short) 4, expected); frame1.unpin();  // force a eviction bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin();  assertFalse(frame1.isValid());  // reload page frame1 = bufferManager.fetchPageFrame(frame1.getPageNum()); frame1.readBytes((short) 67, (short) 4, actual); frame1.unpin();  "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expected, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expected, actual )
************************************
[+] input: createEsJsonWebKey() { EllipticCurveJsonWebKey ellipticCurveJsonWebKey = JwkUtil.createEsJsonWebKey("jap-jwks-keyid", TokenSigningAlg.ES256); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(ellipticCurveJsonWebKey)
[-] pred: org. junit. Assert. assertNotNull ( ellipticCurveJsonWebKey )
************************************
[+] input: toByteArray1() { ByteArraySerializer serializer = ByteArraySerializer.newInstance(); byte[] expect = new byte[]{(byte) 0x01, // 0, 25689 (byte) 0x59, (byte) 0x64, (byte) 0x00, (byte) 0x00, // 523975585 (byte) 0xA1, (byte) 0x3B, (byte) 0x3B, (byte) 0x1F, (byte) 0xA1, (byte) 0x3B, (byte) 0x3B, (byte) 0x1F, // 33.16f, -15.62f (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD7, (byte) 0xA3, (byte) 0x04, (byte) 0x42, // 156665.35455556 (byte) 0xB7, (byte) 0x39, (byte) 0x21, (byte) 0xD6, (byte) 0xCA, (byte) 0x1F, (byte) 0x03, (byte) 0x41, // -56516.66664 (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, // 23A (byte) 0x32, (byte) 0x33, (byte) 0x41};  ByteArrayLittleEndianBean bean = serializer.toObject(ByteArrayLittleEndianBean.class, expect); byte[] actual = serializer.toByteArray(bean); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: Exception { RetryActionWithOneParam<String, R> retryActionWithOneParam = new RetryActionWithOneParam<>( "print", 3, "a" ); R result = retryActionWithOneParam.action( a -> { throw new RuntimeException("run time exception test"); } ); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(null, result)
[-] pred: org. junit. Assert. assertEquals ( null, result )
************************************
[+] input: hasTypeShouldBeFalseWhenTypeIsNull() { EsSourceConfig esSourceConfig = new EsSourceConfigBuilder() .setType(null) .createEsSourceConfig(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(esSourceConfig.hasType())
[-] pred: org. junit. Assert. assertFalse ( esSourceConfig. hasType() )
************************************
[+] input: writeDTL() { LocalDateTime expect = LocalDateTime.of(2023, 5, 27, 12, 11, 22, 333225555); s7PLC.writeDTL("DB1.0", expect);  LocalDateTime actual = s7PLC.readDTL("DB1.0"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: test() { byte[] content = "hi there".getBytes(StandardCharsets.UTF_8); Map<String, List<String>> headers = new HashMap<>(); headers.put("x-amz-meta-color", Collections.singletonList("red")); headers.put("x-amz-meta-thing", Collections.singletonList("under")); headers.put("blah", Collections.singletonList("stuff")); Response r = new Response(headers, content, 200); assertEquals("hi there", r.contentUtf8()); assertTrue(r.isOk()); assertEquals("red", r.metadata("color").get()); assertEquals("under", r.metadata("thing").get()); assertEquals(2, r.metadata().entrySet().size()); assertEquals(3, r.headers().size()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(200, r.statusCode())
[-] pred: org. junit. Assert. assertEquals ( 200, r. statusCode() )
************************************
[+] input: startingBoard() { Board board = Board.getStartBoard(); final List<Move> legalMoves = board.getLegalMoves(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(20, legalMoves.size())
[-] pred: org. junit. Assert. assertEquals ( 20, legalMoves. size ( ) )
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForObjectType() { String error = explicitNullableTypeChecker.checkValueForType(null, Object.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Object")); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: hasTypeShouldBeFalseWhenTypeIsEmpty() { HttpSourceConfig httpSourceConfig = new HttpSourceConfig("", "", "", "", "", "", "", "", "", false, "", "", new HashMap<>(), new HashMap<>(), metricId, false); "<AssertPlaceHolder>"; }
[*] target: assertFalse(httpSourceConfig.hasType())
[-] pred: org. junit. Assert. assertFalse ( httpSourceConfig. hasType() )
************************************
[+] input: testCheckAndSet_EnableCaching_IfNoneMatch_false() { Mockito.when(req.getPathInfo()).thenReturn("/"); Mockito.when(req.getHeader(HttpCacheControl.ETAG)).thenReturn(null); Mockito.when(req.getHeader(HttpCacheControl.IF_NONE_MATCH)).thenReturn("W/"FooBar"");//non-matching E-Tag Mockito.when(req.getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE)).thenReturn(0L);  BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes(StandardCharsets.UTF_8)) .withCachingAllowed(true) .withLastModifiedNow() .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = cc.checkAndSetCacheHeaders(req, resp, obj); Assert."<AssertPlaceHolder>";  Mockito.verify(req, ANY_TIMES).getPathInfo(); Mockito.verify(req, ANY_TIMES).getAttribute("jakarta.servlet.forward.path_info"); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.ETAG); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.IF_NONE_MATCH); Mockito.verify(req, ANY_TIMES).getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.CACHE_CONTROL, "private, max-age=0, must-revalidate"); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.ETAG, obj.createETag()); Mockito.verify(resp, ONCE).setDateHeader(HttpCacheControl.LAST_MODIFIED, obj.getResource().getLastModified()); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
[+] input: Exception { LocalMapPartitionFile partitionFile1 = createPartitionFile(); assertTrue(partitionFile1.isConsumable()); Files.delete(partitionFile1.getFileMeta().getDataFilePath()); assertFalse(partitionFile1.isConsumable()); partitionFile1.deleteFile();  LocalMapPartitionFile partitionFile2 = createPartitionFile(); assertTrue(partitionFile2.isConsumable()); Files.delete(partitionFile2.getFileMeta().getIndexFilePath()); assertFalse(partitionFile2.isConsumable()); partitionFile2.deleteFile();  LocalMapPartitionFile partitionFile3 = createPartitionFile(); assertTrue(partitionFile3.isConsumable()); partitionFile3.setConsumable(false); "<AssertPlaceHolder>"; assertEquals(0, CommonUtils.checkNotNull(temporaryFolder.getRoot().list()).length); }
[*] target: assertFalse(partitionFile3.isConsumable())
[-] pred: org. junit. Assert. assertFalse ( partitionFile3. isConsumable ( ) )
************************************
[+] input: shouldReturnStringEnumValueWhenSimpleGroupIsPassed() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("status"); String expectedEnum = fieldDescriptor.getEnumType().getValues().get(1).getName(); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BINARY).named("status") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); simpleGroup.add("status", expectedEnum); EnumHandler enumHandler = new EnumHandler(fieldDescriptor);  Object actualEnum = enumHandler.transformFromParquet(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedEnum, actualEnum)
[-] pred: org. junit. Assert. assertEquals ( expectedEnum, actualEnum )
************************************
[+] input: testVerifyRequestRequestWithNoDataAndRuleMisMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("verify_aal", "25"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
[+] input: rtspOptionRequestTest() { String expect = "OPTIONS rtsp://10.3.8.202:554 RTSP/1.0\r\n" + "CSeq: 0\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554"); RtspOptionRequest request = new RtspOptionRequest(uri); request.setCSeq(0); String actual = request.toObjectString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: shouldReturnNullWhenTimeStampNotAvailableAndFieldDescriptorOfTypeTimeStampForTransformForPostProcessor() { Descriptors.Descriptor descriptor = TestBookingLogMessage.getDescriptor(); Descriptors.FieldDescriptor fieldDescriptor = descriptor.findFieldByName("booking_creation_time");  TypeHandler typeHandler = TypeHandlerFactory.getTypeHandler(fieldDescriptor);  Object value = typeHandler.transformFromPostProcessor(null); "<AssertPlaceHolder>"; }
[*] target: assertNull(value)
[-] pred: org. junit. Assert. assertNull ( value )
************************************
[+] input: testVerifyRequestRequestWithSomeData() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
[+] input: testGetMessageStatusConstructor() { VetoException vetoException = new VetoException(m_processingStatus); "<AssertPlaceHolder>"; assertEquals("title: body [severity=ERROR]", vetoException.getMessage()); assertEquals(PROCESSING_STATUS_MESSAGE, vetoException.getDisplayMessage()); }
[*] target: assertNull(vetoException.getHtmlMessage())
[-] pred: org. junit. Assert. assertNull ( vetoException. getHtmlMessage() )
************************************
[+] input: testLargeTablesConstituents() { final int GapSize = 32;  TableSet ts = new TableSet(); List<TableSet> expected = new ArrayList<>(); int table = 0;  for (int t = 0; t < 256; t++) { table += new Random().nextInt(GapSize) + 1; expected.add(singleTableSet(table)); ts.addTable(table); } Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, ts.constituents())
[-] pred: org. junit. Assert. assertEquals ( expected, ts. constituents() )
************************************
[+] input: testPublish() { PublishServiceRequest request = new PublishServiceRequest(); request.setServiceName("aa"); ProviderMetaInfo providerMetaInfo = new ProviderMetaInfo(); providerMetaInfo.setAppName("testApp"); providerMetaInfo.setProtocol("bolt"); providerMetaInfo.setSerializeType("hessian2"); providerMetaInfo.setVersion("4.0"); request.setProviderMetaInfo(providerMetaInfo); boolean result = meshApiClient.publishService(request); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testSaveToString() { FileConfiguration config = getConfig();  for (Map.Entry<String, Object> entry : getTestValues().entrySet()) { config.set(entry.getKey(), entry.getValue()); }  String result = config.saveToString(); String expected = getTestValuesString();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldDoDefaultFormatForAlterStatementWhenIndentSubstatementsInParenthesesOn() { //given String inputString = "ALTER TABLE `users` ADD COLUMN (count_copy smallint(6) NOT NULL, status int(10) unsigned NOT NULL) AFTER `lastname`;"; String expectedString = "ALTER TABLE `users` ADD COLUMN (" + lineBreak + "\tcount_copy SMALLINT(6) NOT NULL," + lineBreak + "\tstatus int(10) unsigned NOT NULL" + lineBreak + ") AFTER `lastname`;";  Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_BREAK_BEFORE_CLOSE_BRACKET))).thenReturn(true);  //when String formattedString = formatter.format(inputString, configuration);  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
[+] input: test5() { try (GetSetMethodHandler getSetMethodHandler = new GetSetMethodHandler(configureWrapper)) { BaseWriteDbData4GetSetMethod getSetMethod1 = getSetMethodHandler.queryGetSetMethodByClassMethod(false, FRADtoA.class.getName(), "setStrA1"); Assert.assertNotNull(getSetMethod1); printObjectContent(getSetMethod1, "queryGetSetMethodByMethodName-set");  BaseWriteDbData4GetSetMethod getSetMethod2 = getSetMethodHandler.queryGetSetMethodByFieldName(false, FRADtoA.class.getName(), "intA1"); Assert."<AssertPlaceHolder>"; printObjectContent(getSetMethod2, "queryGetSetMethodByFieldName-set"); } }
[*] target: assertNotNull(getSetMethod2)
[-] pred: org. junit. Assert. assertNotNull ( getSetMethod2 )
************************************
[+] input: convertPolygonWithHole_NoRedundantSpaces_ShouldConvert() { String wkt = "POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10),(20 30, 35 35, 30 20, 20 30))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Polygon", "coordinates":" + " [[[35,10],[45,45],[15,40],[10,20],[35,10]],[[20,30],[35,35],[30,20],[20,30]]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: testRetainWithUnexpandedObjectField() { SearchHit hit = new SearchHit(1); hit.sourceRef(new BytesArray("{"a.attributes.hardware.correlate_id": 10}")); SearchHitRow row = new SearchHitRow(hit, ""); row.retain(ImmutableMap.of("a.attributes.hardware.correlate_id", ""));  SearchHit expected = new SearchHit(1); expected.sourceRef(new BytesArray("{"a.attributes.hardware.correlate_id": 10}")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, row.data())
[-] pred: org. junit. Assert. assertEquals ( expected, row. data() )
************************************
[+] input: extractFrom() { String src = "RTP/AVP;unicast;client_port=60802-60803;server_port=8216-8217;ssrc=4f92ef4b;mode="play""; RtspClientPortTransport transport = (RtspClientPortTransport)RtspTransport.fromString(src); assertEquals("RTP/AVP", transport.getProtocol()); assertEquals("unicast", transport.getCastMode()); assertEquals(60802, transport.getRtpClientPort().intValue()); assertEquals(60803, transport.getRtcpClientPort().intValue()); assertEquals(8216, transport.getRtpServerPort().intValue()); assertEquals(8217, transport.getRtcpServerPort().intValue()); assertEquals("4f92ef4b", transport.getSsrc()); assertEquals("play", transport.getMode()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(src, transport.toString())
[-] pred: org. junit. Assert. assertEquals ( src, transport. toString ( ) )
************************************
[+] input: shouldReturnAddedJsonStringForEmptyJsonWithNewKeyValue() { JsonUpdate jsonUpdate = new JsonUpdate(); String jsonEvent = "{}"; String expectedJsonEvent = "{"k1":"v1"}"; String jPath = "$.k1"; String updateValue = "v1"; String actual = jsonUpdate.eval(jsonEvent, jPath, updateValue); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
[+] input: writeDate() { LocalDate expect = LocalDate.of(2023, 4, 1); s7PLC.writeDate("DB4.296", expect); LocalDate actual = s7PLC.readDate("DB4.296"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: testIndexResponse() {  String expectedStringValue = "{"_id":"id","_index":"index","_primary_term":1,"result":"created","_seq_no":2,"_shards":{"failed":1.0,"successful":1.0,"total":3.0,"failures":[{"index":"index","node":"node","reason":{"reason":"Failed to create query.","type":"query_shard_exception"},"shard":1,"status":"Failed"}],"skipped":1.0},"_version":3}"; IndexResponse indexResponse = IndexResponse.of( response -> response.result(Result.Created) .index("index") .id("id") .primaryTerm(1) .seqNo(2) .version(3) .shards( shardStats -> shardStats.total(3) .successful(1) .skipped(1) .failed(1) .failures( shardFailure -> shardFailure.index("index") .node("node") .shard(1) .status("Failed") .reason(cause -> cause.type("query_shard_exception").reason("Failed to create query.")) ) ) );  String indexResponseString = indexResponse.toJsonString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStringValue, indexResponseString)
[-] pred: org. junit. Assert. assertEquals ( expectedStringValue, indexResponseString )
************************************
[+] input: testToString() { SignResult result = new SignResult(SignatureMethodEnum.MD5, "a-secret-id-1", "a-sign-1"); String expectedStr = "SignResult(signMethod=MD5, secretId=a-secret-id-1, signature=a-sign-1)";  String actualStr = result.toString();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStr, actualStr)
[-] pred: org. junit. Assert. assertEquals ( expectedStr, actualStr )
************************************
[+] input: testFailureDueToInconsistencyAndExceptionMixed() { DBConnection otherDBConnection2 = mock(DBConnection.class); when(otherDBConnection2.getDatabaseName()).thenReturn("ZZZ DB"); correctnessTest = new ComparisonTest( openSearchConnection, new DBConnection[] {otherDbConnection, otherDBConnection2});  DBResult openSearchResult = new DBResult( "OpenSearch", asList(new Type("firstname", "text")), asList(new Row(asList("John")))); DBResult otherResult = new DBResult("Other", asList(new Type("firstname", "text")), Collections.emptyList());  when(openSearchConnection.select(anyString())).thenReturn(openSearchResult); when(otherDbConnection.select(anyString())).thenReturn(otherResult); when(otherDBConnection2.select(anyString())) .thenThrow(new RuntimeException("Unsupported feature"));  TestReport expected = new TestReport(); expected.addTestCase( new FailedTestCase( 1, "SELECT * FROM accounts", asList(openSearchResult, otherResult), "Unsupported feature;")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldFetchParsedValueForFieldForFieldDescriptorOfTypeInteger() { int actualValue = 2;  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("cancel_reason_id"); IntegerHandler integerHandler = new IntegerHandler(fieldDescriptor); Object value = integerHandler.parseObject(String.valueOf(actualValue));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
[+] input: testPreferenceValues() { PreferenceManager preferenceManager = new PreferenceManager(TestRegistry.getContext()); preferenceManager.setPreferencePingCount(123); preferenceManager.setPreferencePingPackageSize(456); preferenceManager.setPreferenceConnectCount(789); AccessTypeData data = new AccessTypeData(TestRegistry.getContext()); assertEquals(-1, data.getId()); assertEquals(-1, data.getNetworkTaskId()); assertEquals(123, data.getPingCount()); assertEquals(456, data.getPingPackageSize()); assertEquals(789, data.getConnectCount()); preferenceManager.removeAllPreferences(); data = new AccessTypeData(TestRegistry.getContext()); assertEquals(-1, data.getId()); assertEquals(-1, data.getNetworkTaskId()); assertEquals(3, data.getPingCount()); assertEquals(56, data.getPingPackageSize()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, data.getConnectCount())
[-] pred: org. junit. Assert. assertEquals ( 1, data. getConnectCount() )
************************************
[+] input: IOException { String storeFileType = "JKS"; when(jsonReader.nextString()).thenReturn(storeFileType); DaggerSSLTrustStoreFileTypeAdaptor daggerSSLTrustStoreFileTypeAdaptor = new DaggerSSLTrustStoreFileTypeAdaptor(); String truststoreFileType = daggerSSLTrustStoreFileTypeAdaptor.read(jsonReader); "<AssertPlaceHolder>"; }
[*] target: assertEquals(storeFileType, truststoreFileType)
[-] pred: org. junit. Assert. assertEquals ( storeFileType, truststoreFileType )
************************************
[+] input: testEmptyMap() { Map<String, ?> map = new HashMap<>(); SchedulerId schedulerId = new SchedulerId(map); assertEquals(-1, schedulerId.getId()); assertEquals(-1, schedulerId.getSchedulerId()); assertEquals(-1, schedulerId.getTimestamp()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(schedulerId.isValid())
[-] pred: org. junit. Assert. assertFalse ( schedulerId. isValid() )
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForDateTimeType() { String error = explicitNullableTypeChecker.checkValueForType(null, LocalDateTime.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("LocalDateTime")); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: rtspSetParameterRequestTest() {  String expect = "SET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspSetParameterRequest request = new RtspSetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); assertEquals(expect, actual);  expect = "SET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 1\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "Content-Type: text/parameters\r\n" + "Content-Length: 20\r\n" + "\r\n" + "barparam: barstuff\r\n";  uri = URI.create("rtsp://10.3.8.202:554/"); request = new RtspSetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(1); request.addParameter("barparam", "barstuff"); actual = request.toObjectString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: testRowCountAndHasRowsTwoRows() { TableEvent e = new TableEvent(mock(ITable.class), TableEvent.TYPE_ROWS_SELECTED, mockRows(0, 1)); assertEquals(2, e.getRowCount()); assertTrue(e.hasRows());  e.setRows(mockRows(0, 1, 2)); assertEquals(3, e.getRowCount()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(e.hasRows())
[-] pred: org. junit. Assert. assertTrue ( e. hasRows ( ) )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x03, (byte) 0x00, (byte) 0x6B, (byte) 0x00, (byte) 0x03}; MbReadHoldRegisterRequest mb = new MbReadHoldRegisterRequest(); mb.setFunctionCode(EMbFunctionCode.READ_HOLD_REGISTER); mb.setAddress(107); mb.setQuantity(3); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: shouldDoDefaultFormatForValuesNestedInTheFunctionAndDoNotMakeALineBreakAfterTheCommaForThem() { //given String inputString = "SELECT to_date(CONCAT(YEAR('2019-12-31'),'-',lpad(CEIL(MONTH('2019-12-31')/3)*3-2, 2, 0),'-01')) AS season_first_day"; //#7509 String expectedString = "SELECT" + lineBreak + "\tto_date(CONCAT(YEAR('2019-12-31'), '-', lpad(CEIL(MONTH('2019-12-31')/ 3)* 3-2, 2, 0), '-01')) AS season_first_day";  Mockito.when(configuration.isFunction("to_date")).thenReturn(true); Mockito.when(configuration.isFunction("lpad")).thenReturn(true);  //when String formattedString = formatter.format(inputString, configuration);  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
[+] input: shouldRemoveSpacesBeforeCommentSymbol() { //given String expectedString = "SELECT" + lineBreak + "\t*" + lineBreak + "FROM" + lineBreak + "\ttable1;" + lineBreak + "-- SELECT * FROM mytable;"; String inputString = "SELECT" + lineBreak + "\t*" + lineBreak + "FROM" + lineBreak + "\ttable1;" + lineBreak +" -- SELECT * FROM mytable;";  //when String formattedString = formatter.format(inputString, configuration);  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
[+] input: byteArrayLength() { COTPData cotpData = new COTPData(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(3, cotpData.byteArrayLength())
[-] pred: org. junit. Assert. assertEquals ( 3, cotpData. byteArrayLength() )
************************************
[+] input: test_generate() {  // 1. Arrange String hllCode = Objects.requireNonNull(FileReaderUtil.getResourceFileAsString("lexer/code.ck")); List<Token> tokens = Lexer.tokenize(hllCode); AstNode oldAst = new Parser(tokens).parse(); SvgAstNode newAst = new Transformer().transform(oldAst);  // 2. Act String result = new CodeGenerator().generate(newAst);  // 3. Assert "<AssertPlaceHolder>";  // 4. Log System.out.println(result); saveToFile(result, "src/test/resources/output/code.svg"); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testExecutionSkippedMarkedAsNotRunning() { NetworkTask task = getNetworkTask(); task = networkTaskDAO.insertNetworkTask(task); networkTaskDAO.updateNetworkTaskRunning(task.getId(), false); Intent intent = new Intent(); intent.putExtras(task.toBundle()); broadcastReceiver.onReceive(TestRegistry.getContext(), intent); List<LogEntry> entries = logDAO.readAllLogsForNetworkTask(task.getId()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, entries.size())
[-] pred: org. junit. Assert. assertEquals ( 0, entries. size ( ) )
************************************
[+] input: testGetEntryMetaInPendingEntries() { FileEntrySequence sequence = new FileEntrySequence(entriesFile, entryIndexFile, 1); sequence.append(new NoOpEntry(1, 1)); EntryMeta meta = sequence.getEntryMeta(1); Assert."<AssertPlaceHolder>"; Assert.assertEquals(Entry.KIND_NO_OP, meta.getKind()); Assert.assertEquals(1, meta.getIndex()); Assert.assertEquals(1, meta.getTerm()); }
[*] target: assertNotNull(meta)
[-] pred: org. junit. Assert. assertNotNull ( meta )
************************************
[+] input: convertLineString_WithRedundantSpaces_ShouldConvert() { String wkt = "LINESTRING (     30  10, 10 30 , 40 40    )"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"LineString", "coordinates": [[30,10],[10,30],[40,40]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: checkTokenNullCache() { JapUserStore japUserStore = new JapUserStoreTest(); JapCache japCache = null; JapConfig japConfig = new JapConfig(); JapContext japContext = new JapContext(japUserStore, japCache, japConfig); JapAuthentication.setContext(japContext);  Map<String, Object> map = JapAuthentication.checkToken("aaa"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(map)
[-] pred: org. junit. Assert. assertNull ( map )
************************************
[+] input: getCacheCodeVerifierNullClientId() { String res = PkceHelper.getCacheCodeVerifier(null); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
[+] input: broadcastAllocateStrategyTest() { AllocateStrategy allocateStrategy = new BroadcastAllocateStrategy(); Collection<RocketMQSourceSplit> mqAll = new ArrayList<>(); for (int i = 0; i < NUM_SPLITS; i++) { mqAll.add( new RocketMQSourceSplit( PREFIX_TOPIC + (i + 1), BROKER_NAME, i, 0, SPLIT_SIZE[i])); } int parallelism = 3; Map<Integer, Set<RocketMQSourceSplit>> result = allocateStrategy.allocate(mqAll, parallelism); "<AssertPlaceHolder>"; for (int i = 0; i < parallelism; i++) { Set<RocketMQSourceSplit> splits = result.get(i); assertEquals(NUM_SPLITS, splits.size());  for (int j = 0; j < NUM_SPLITS; j++) { assertTrue( splits.contains( new RocketMQSourceSplit( PREFIX_TOPIC + (i + 1), BROKER_NAME, i, 0, SPLIT_SIZE[i]))); } } }
[*] target: assertEquals(parallelism, result.size())
[-] pred: org. junit. Assert. assertEquals ( parallelism, result. size ( ) )
************************************
[+] input: shouldDeleteNodeValueAndReturnAsJsonString() { JsonDelete jsonDelete = new JsonDelete(); String jsonEvent = "{"k1":"v1","k2":{"key1":"value1","key2":"value2","key3":"value3"}}"; String expectedJsonEvent = "{"k1":"v1"}"; String jPath = "$.k2"; String actual = jsonDelete.eval(jsonEvent, jPath); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
[+] input: testConstructor() { DOMTree actualDomTree = new DOMTree(); assertNull(actualDomTree.getDataModel()); assertNull(actualDomTree.getInputUri()); assertTrue(actualDomTree.isNamespaceAware()); assertNull(actualDomTree.getId()); assertEquals(0, actualDomTree.getTypeDescriptors().length); "<AssertPlaceHolder>"; }
[*] target: assertNull(actualDomTree.getOutputUri())
[-] pred: org. junit. Assert. assertNull ( actualDomTree. getOutputUri() )
************************************
[+] input: shouldDeleteArrayValueAndReturnAsJsonString() { JsonDelete jsonDelete = new JsonDelete(); String jsonEvent = "{"k1":"v1","k2":["value1","value2","value3"]}"; String expectedJsonEvent = "{"k1":"v1","k2":["value1","value3"]}"; String jPath = "$.k2[1]"; String actual = jsonDelete.eval(jsonEvent, jPath); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
[+] input: shouldDistinguishLongbowPlus() { String[] columnNames = {"longbow_key"};  longBowSchema = new LongbowSchema(columnNames); "<AssertPlaceHolder>"; }
[*] target: assertFalse(longBowSchema.isLongbowPlus())
[-] pred: org. junit. Assert. assertFalse ( longBowSchema. isLongbowPlus() )
************************************
[+] input: getUserNullStore() { JapUserStore japUserStore = null; JapCache japCache = new JapLocalCache(); JapConfig japConfig = new JapConfig(); JapContext japContext = new JapContext(japUserStore, japCache, japConfig); JapAuthentication.setContext(japContext);  JapUser japUser = JapAuthentication.getUser(request, response); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(japUser)
[-] pred: org. junit. Assert. assertNull ( japUser )
************************************
[+] input: testConvertClassArray_nullArgument() { ClassIdentifier[] cids = ClassIdentifier.convertClassArrayToClassIdentifierArray((Class<?>[]) null); "<AssertPlaceHolder>"; assertArrayEquals(new ClassIdentifier[0], cids); }
[*] target: assertNotNull(cids)
[-] pred: org. junit. Assert. assertNotNull ( cids )
************************************
[+] input: toByteArray() { RequestItem requestItem = new RequestItem(); requestItem.setSpecificationType((byte) 0x12); requestItem.setLengthOfFollowing((byte) 0x10); requestItem.setSyntaxId(ESyntaxID.S7ANY); requestItem.setVariableType(EParamVariableType.BYTE); requestItem.setCount(7); requestItem.setDbNumber(7); requestItem.setArea(EArea.DATA_BLOCKS); requestItem.setByteAddress(3); requestItem.setBitAddress(1); ReadWriteParameter readWriteParameter = new ReadWriteParameter(); readWriteParameter.setFunctionCode(EFunctionCode.READ_VARIABLE); readWriteParameter.setItemCount((byte) 0x01); readWriteParameter.getRequestItems().add(requestItem); byte[] actual = readWriteParameter.toByteArray(); byte[] expect = new byte[]{(byte) 0x04, (byte) 0x01, (byte) 0x12, (byte) 0x10, (byte) 0x10, (byte) 0x02, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x07, (byte) 0x84, (byte) 0x00, (byte) 0x00, (byte) 0x19}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: shouldFetchParsedValueForFieldForFieldDescriptorOfTypeDouble() { double actualValue = 2.0D;  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("cash_amount"); DoubleHandler doubleHandler = new DoubleHandler(fieldDescriptor); Object value = doubleHandler.parseObject(String.valueOf(actualValue));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
[+] input: shouldReturnUpdatedJsonStringForNewNestedKeyValue() { JsonUpdate jsonUpdate = new JsonUpdate(); String jsonEvent = "{"k1":null,"k2":"v2"}"; String expectedJsonEvent = "{"k1":null,"k2":"v2","k3":{"key1":"value1","key2":"value2"}}"; String jPath = "$.k3"; Map<String, String> updateValue = new HashMap<String, String>() {{ put("key1", "value1"); put("key2", "value2"); }}; String actual = jsonUpdate.eval(jsonEvent, jPath, updateValue); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
[+] input: no_DoTable_Hit_DoDb_Hit_WildDoTable_Keep() { ReplicaMeta replicaMeta = new ReplicaMeta(); replicaMeta.setDoDb("full_src_1, rpl, dutf8"); replicaMeta.setIgnoreDb("full_src_1, rpl, dutf8"); replicaMeta.setDoTable(""); replicaMeta.setIgnoreTable("full_src_1.t1, full_src_1.t2"); replicaMeta.setWildDoTable("d%.tb\\_charset%, d%.col\\_charset%"); replicaMeta.setWildIgnoreTable("d%.tb\\_charset%, d%.col\\_charset%"); replicaMeta.setRewriteDb(""); printChangeFilterSql(replicaMeta);  // init ReplicaFilter filter = new ReplicaFilter(replicaMeta); filter.init();  DefaultRowChange rowChange = new DefaultRowChange(); rowChange.setAction(DBMSAction.INSERT);  rowChange.setSchema("dutf8"); rowChange.setTable("tb_charset_gbk"); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(filter.ignoreEvent(rowChange))
[-] pred: org. junit. Assert. assertFalse ( filter. ignoreEvent ( rowChange ) )
************************************
[+] input: getConfigNameTest() { String configName = "binlogx_stream_group_name"; String expect = "binlogx.stream.group.name"; String actual = ConfigNameMap.getOldConfigName(configName); Assert.assertEquals(expect, actual);  configName = "not_exist_config"; expect = ""; actual = ConfigNameMap.getOldConfigName(configName); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: getMappingForExistingField() { IndexMappings indexMappings = LocalClusterState.state().getFieldMappings(new String[] {INDEX_NAME}); Assert."<AssertPlaceHolder>";  FieldMappings fieldMappings = indexMappings.mapping(INDEX_NAME); Assert.assertNotNull(fieldMappings);  Assert.assertEquals("text", fieldMappings.mapping("address").get("type")); Assert.assertEquals("integer", fieldMappings.mapping("age").get("type")); Assert.assertEquals("keyword", fieldMappings.mapping("city").get("type")); Assert.assertEquals("text", fieldMappings.mapping("employer").get("type"));  Assert.assertEquals("text", fieldMappings.mapping("manager.name").get("type")); Assert.assertEquals("keyword", fieldMappings.mapping("manager.address").get("type")); }
[*] target: assertNotNull(indexMappings)
[-] pred: org. junit. Assert. assertNotNull ( indexMappings )
************************************
[+] input: Exception { LocalMapPartitionFileMeta fileMeta = StorageTestUtils.createLocalMapPartitionFileMeta();  File tmpFile = temporaryFolder.newFile(); try (DataOutputStream output = new DataOutputStream(new FileOutputStream(tmpFile))) { fileMeta.writeTo(output); }  LocalMapPartitionFileMeta recovered; try (DataInputStream input = new DataInputStream(new FileInputStream(tmpFile))) { recovered = LocalMapPartitionFileMeta.readFrom(input); }  "<AssertPlaceHolder>"; }
[*] target: assertEquals(fileMeta, recovered)
[-] pred: org. junit. Assert. assertEquals ( fileMeta, recovered )
************************************
[+] input: testGgenerateFake() { String generatedMobileNum = ChineseMobileNumberGenerator.getInstance() .generateFake(); "<AssertPlaceHolder>"; System.err.println(generatedMobileNum); }
[*] target: assertNotNull(generatedMobileNum)
[-] pred: org. junit. Assert. assertNotNull ( generatedMobileNum )
************************************
[+] input: IOException { ClassLoader classLoader = getClass().getClassLoader(); String pythonFile = classLoader.getResource("python_udf.zip").getFile(); byte[] expectedObject = Files.readAllBytes(Paths.get(pythonFile));  when(gcsClient.getFile(pythonFile)).thenReturn(expectedObject); GcsFileSource gcsFileSource = new GcsFileSource(pythonFile, gcsClient);  byte[] actualObject = gcsFileSource.getObjectFile();  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedObject, actualObject)
[-] pred: org. junit. Assert. assertEquals ( expectedObject, actualObject )
************************************
[+] input: shouldNeedRotateWhenWriterDataSizeGreaterThanEqualToMaxFileSize() { long dataSize = 258L; LocalFileMetadata metadata = new LocalFileMetadata("/tmp", "/tmp/a/random-file-name-1", 1L, 100L, dataSize); boolean shouldRotate = sizeBasedRotatingPolicy.shouldRotate(metadata); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(shouldRotate)
[-] pred: org. junit. Assert. assertTrue ( shouldRotate )
************************************
[+] input: testValidUrlConfig() { when(mockUrl.getValue()).thenReturn("http://localhost"); HttpServiceTunnel tunnel = new HttpServiceTunnel(); assertNotNull(tunnel.getServerUrl()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(tunnel.isActive())
[-] pred: org. junit. Assert. assertTrue ( tunnel. isActive() )
************************************
[+] input: testTableExists() { ObjectPath objectPath = new ObjectPath("default", "test"); boolean exists = rocketMQCatalog.tableExists(objectPath); "<AssertPlaceHolder>"; }
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
[+] input: selectSingle5() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andIn(MysqlUserEntity::getId, Arrays.asList(1, 1, 1, 1, 1, 1)); dynamicSql.andEqualTo(MysqlUserEntity::getId, 1); dynamicSql.andEqualTo(MysqlUserEntity::getGender, GenderEnum.未知); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  ITransactionMember m = new TestTransactionMember(exception);  m_transaction.registerMember(m);  final Holder<ITransaction> actualTransaction = new Holder<>(); CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); return "result"; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction);  inOrder.verify(m_transaction, times(1)).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } finally { m_transaction.unregisterMember(m); } }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
[+] input: shouldUseDefaultNanosDuringTransformIfSimpleGroupDoesNotContainNanosInGroupTypeTimestamp() { Instant currentInstant = Instant.now(); long seconds = currentInstant.getEpochSecond(); Row expectedRow = Row.of(seconds, 0);  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor);  /* only adding seconds field to the timestamp schema and initializing it */ GroupType timestampSchema = org.apache.parquet.schema.Types.optionalGroup() .optional(INT64).named("seconds") .named("event_timestamp"); SimpleGroup timestampMessage = new SimpleGroup(timestampSchema); timestampMessage.add("seconds", seconds);  MessageType parquetSchema = buildMessage() .addField(timestampSchema) .named("TestBookingLogMessage"); SimpleGroup mainMessage = new SimpleGroup(parquetSchema); mainMessage.add("event_timestamp", timestampMessage);  Row actualRow = (Row) timestampHandler.transformFromParquet(mainMessage);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
[+] input: toByteArray() { COTPConnection connection = COTPConnection.crConnectRequest(0x0100,0x0100); byte[] actual = connection.toByteArray(); byte[] expect = {(byte) 0x11, (byte) 0xE0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0xC0, (byte) 0x01, (byte) 0x0A, (byte) 0xC1, (byte) 0x02, (byte) 0x01, (byte) 0x00, (byte) 0xC2, (byte) 0x02, (byte) 0x01, (byte) 0x00};  "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: convertPoint_RoundNumbers_ShouldConvert() { String wkt = "POINT(12 13)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [12,13]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: testEquals() { MultiStatus multiStatus = new MultiStatus(); multiStatus.add(m_warningStatus); multiStatus.add(m_infoStatus); MultiStatus multiStatus2 = new MultiStatus(); multiStatus2.add(m_infoStatus); multiStatus2.add(m_warningStatus); "<AssertPlaceHolder>"; assertEquals(new MultiStatus(), new MultiStatus()); assertNotEquals(multiStatus, m_warningStatus); assertNotEquals(multiStatus, new Status("aaa")); assertNotEquals(multiStatus, new MultiStatus()); }
[*] target: assertEquals(multiStatus, multiStatus2)
[-] pred: org. junit. Assert. assertEquals ( multiStatus, multiStatus2 )
************************************
[+] input: shouldNotProvideSimpleGroupDeserializerWhenSchemaTypeIsUnsupported() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.PARQUET_SOURCE, SourceType.BOUNDED)}); when(streamConfig.getDataType()).thenReturn("JSON");  SimpleGroupDeserializerProvider provider = new SimpleGroupDeserializerProvider(streamConfig, configuration, stencilClientOrchestrator);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(provider.canProvide())
[-] pred: org. junit. Assert. assertFalse ( provider. canProvide() )
************************************
[+] input: IOException { String fileName = "download-test1.txt"; String expectContent = "hello, world"; String destFile = "download-test1.txt"; manager.delete(fileName); Appender appender = manager.providerAppender(fileName); appender.begin(); appender.append(expectContent.getBytes(), expectContent.getBytes().length); appender.end(); manager.download(fileName, "."); String actualContent = new String(Files.readAllBytes(Paths.get(destFile))); Assert."<AssertPlaceHolder>"; new File(destFile).deleteOnExit(); }
[*] target: assertEquals(expectContent, actualContent)
[-] pred: org. junit. Assert. assertEquals ( expectContent, actualContent )
************************************
[+] input: Exception { List<String> s1 = Arrays.asList("111", "222", "333"); List<String> s2 = Arrays.asList("111", "333", "444", "555", "666");  ListDifference difference = new ListDifference(s1, s2); Assert.assertFalse(difference.areEqual());  List<String> add = difference.getOnlyOnRight(); List<String> removed = difference.getOnlyOnLeft(); List<String> same = difference.getOnBoth();  Assert.assertEquals(add.size(), 3); Assert.assertEquals(removed.size(), 1); Assert.assertEquals(same.size(), 2);  Assert.assertEquals(add.get(0), "444"); Assert.assertEquals(removed.get(0), "222");  s1 = Arrays.asList("111", "222", "333"); s2 = Arrays.asList("111", "333", "222");  difference = new ListDifference(s1, s2); Assert.assertTrue(difference.areEqual());  add = difference.getOnlyOnRight(); removed = difference.getOnlyOnLeft(); same = difference.getOnBoth();  Assert.assertEquals(add.size(), 0); Assert.assertEquals(removed.size(), 0); Assert.assertEquals(same.size(), 3);  s1 = new ArrayList<String>(); s2 = Arrays.asList(); difference = new ListDifference(s1, s2); Assert.assertTrue(difference.areEqual());  s1 = null; s2 = Arrays.asList(); difference = new ListDifference(s1, s2); Assert.assertTrue(difference.areEqual());  s1 = Collections.emptyList(); s2 = null; difference = new ListDifference(s1, s2); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(difference.areEqual())
[-] pred: org. junit. Assert. assertTrue ( difference. areEqual ( ) )
************************************
[+] input: shouldNotProcessForDyanamicURL() { when(httpSinkConfig.getSinkHttpServiceUrl()).thenReturn("http://127.0.0.1:1080/api,%s");  simpleRequest = new SimpleRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType); boolean canProcess = simpleRequest.canProcess();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
[+] input: InterruptedException { long createdTimestamp = System.currentTimeMillis(); LocalFileMetadata metadata = new LocalFileMetadata("/tmp", "/tmp/a/random-file-name-1", createdTimestamp, 100L, 100L); Thread.sleep(100); boolean shouldRotate = rotatingPolicy.shouldRotate(metadata); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(shouldRotate)
[-] pred: org. junit. Assert. assertFalse ( shouldRotate )
************************************
[+] input: testAsciiConvertionWithSpecialCharInLocalPart() { // Arrange String emailAddress = "sömeöne@example.com";  // Act String convertedAddress = BEANS.get(MailIDNConverter.class).toASCII(emailAddress);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(emailAddress, convertedAddress)
[-] pred: org. junit. Assert. assertEquals ( emailAddress, convertedAddress )
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("00:00-00:00"); TimeInterval expected = new TimeInterval( LocalTime.of(0, 0, 0), LocalTime.of(0, 0, 0) ); "<AssertPlaceHolder>"; assertEquals(3600 * 24, actual.getDuration()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testConsume() { FuzzedDataProvider data = CannedFuzzedDataProvider.create( Arrays.asList( (byte) 1 /* do not return null */, 0 /* first class on the classpath */, (byte) 1 /* do not return null */, 0 /* first constructor */)); ImplementedInterface result = Autofuzz.consume(data, ImplementedInterface.class); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: JSONException { ITree tree = createTreeWithOneNode(); JsonTree<ITree> jsonTree = m_uiSession.createJsonAdapter(tree, new JsonAdapterMock()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(jsonTree.getOrCreateNodeId(null))
[-] pred: org. junit. Assert. assertNull ( jsonTree. getOrCreateNodeId ( null ) )
************************************
[+] input: shouldNotBeAbleToBuildSourceIfDeserializerTypeIsUnsupported() { DaggerDeserializer<Row> unsupportedDeserializer = Mockito.mock(SimpleGroupDeserializer.class); when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_SOURCE, SourceType.UNBOUNDED)}); KafkaDaggerSource daggerSource = new KafkaDaggerSource(streamConfig, configuration, unsupportedDeserializer);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(daggerSource.canBuild())
[-] pred: org. junit. Assert. assertFalse ( daggerSource. canBuild ( ) )
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndNullRule() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", null); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
[+] input: testCreateHttpClientInfo() { Map<String, HttpClientInfo> testMap = initTestMap(); for (String userAgent : testMap.keySet()) { HttpClientInfo createdHttpClientInfo = newHttpClientInfo(userAgent); HttpClientInfo expectedHttpClientInfo = testMap.get(userAgent);  //Ignore versions if not explicitly set if (expectedHttpClientInfo.getEngineVersion() == null) { createdHttpClientInfo.setEngineVersion(null); } if (expectedHttpClientInfo.getSystemVersion() == null) { createdHttpClientInfo.setSystemVersion(null); }  "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedHttpClientInfo, createdHttpClientInfo)
[-] pred: org. junit. Assert. assertEquals ( expectedHttpClientInfo, createdHttpClientInfo )
************************************
[+] input: shouldProcessForParametrizedQuery() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.MESSAGE); when(httpSinkConfig.getSinkHttpParameterPlacement()).thenReturn(HttpSinkParameterPlacementType.QUERY);  parameterizedURIRequest = new ParameterizedUriRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedURIRequest.canProcess(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(canProcess)
[-] pred: org. junit. Assert. assertTrue ( canProcess )
************************************
[+] input: Exception { String expected = StringUtility.trim(readFile("json/DefaultValuesFilterServiceTest_defaults_override_expected.json")); String actual = BEANS.get(DefaultValuesFilterService.class).getCombinedDefaultValuesConfiguration(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { TestAbstractDAGVisitor visitor = new TestAbstractDAGVisitor(); visitor.putEdge(new TestAbstractDAGNode("1", "1"), new TestAbstractDAGNode("2", "2")); visitor.putEdge(new TestAbstractDAGNode("2", "2"), new TestAbstractDAGNode("3", "3")); visitor.putEdge(new TestAbstractDAGNode("1", "1"), new TestAbstractDAGNode("4", "4")); visitor.putEdge(new TestAbstractDAGNode("4", "4"), new TestAbstractDAGNode("3", "3")); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(visitor.hasCircle())
[-] pred: org. junit. Assert. assertFalse ( visitor. hasCircle ( ) )
************************************
[+] input: Exception { CookieJar cookieJar = new DefaultCookieJar(); List<Cookie> cookies = Lists.of( new Cookie("test.com", "/", "test", "value", 0, false, false), new Cookie("test.com", "/test/", "test", "value1", 0, false, false), new Cookie("test.com", "/test/", "test1", "value1", 0, false, false), new Cookie("test1.com", "/", "test2", "value2", 0, false, false) ); cookieJar.storeCookies(cookies);  URL url = new URL("http://www.test.com/test/"); List<Cookie> matched = cookieJar.getCookies(url); "<AssertPlaceHolder>"; assertEquals(Sets.of( new Cookie("test.com", "/test/", "test", "value1", 0, false, false), new Cookie("test.com", "/test/", "test1", "value1", 0, false, false) ), new HashSet<>(matched.subList(0, 2))); assertEquals(new Cookie("test.com", "/", "test", "value", 0, false, false), matched.get(2)); }
[*] target: assertEquals(3, matched.size())
[-] pred: org. junit. Assert. assertEquals ( 3, matched. size ( ) )
************************************
[+] input: testResponseCodeOk() { Response r = new Response(Collections.emptyMap(), new byte[0], 210); "<AssertPlaceHolder>"; }
[*] target: assertTrue(r.isOk())
[-] pred: org. junit. Assert. assertTrue ( r. isOk() )
************************************
[+] input: XMLStreamException { XMLInputFactory factory = XmlUtility.newXMLInputFactory(); Assert."<AssertPlaceHolder>";  XMLEventReader reader = factory.createXMLEventReader(new ByteArrayInputStream(SIMPLE_XML.getBytes(StandardCharsets.UTF_8))); StringBuilder b = new StringBuilder(); while (reader.hasNext()) { XMLEvent event = reader.nextEvent(); b.append(event.getEventType()); } assertEquals("711228", b.toString()); }
[*] target: assertNotNull(factory)
[-] pred: org. junit. Assert. assertNotNull ( factory )
************************************
[+] input: testAll() {  ClientTransportConfig config = new ClientTransportConfig(); config.setProviderInfo(ProviderHelper.toProviderInfo("127.0.0.1")); config.setContainer("xxx"); config.setChannelListeners(Collections.<ChannelListener> singletonList(new ChannelListener() { @Override public void onConnected(AbstractChannel channel) {  }  @Override public void onDisconnected(AbstractChannel channel) {  } })); config.setConnectionNum(22); config.setConnectTimeout(3333); config.setConsumerConfig(new ConsumerConfig()); config.setDisconnectTimeout(4444); config.setInvokeTimeout(5555); config.setPayload(666666); config.setUseEpoll(true);  Assert.assertNotNull(config.getConsumerConfig()); Assert.assertNotNull(config.getProviderInfo()); Assert.assertNotNull(config.getChannelListeners()); Assert.assertEquals("xxx", config.getContainer()); Assert.assertEquals(22, config.getConnectionNum()); Assert.assertEquals(3333, config.getConnectTimeout()); Assert.assertEquals(4444, config.getDisconnectTimeout()); Assert.assertEquals(5555, config.getInvokeTimeout()); Assert.assertEquals(666666, config.getPayload()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(config.isUseEpoll())
[-] pred: org. junit. Assert. assertTrue ( config. isUseEpoll() )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x10, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x02, (byte) 0x04, (byte) 0x00, (byte) 0x0A, (byte) 0x01, (byte) 0x02}; MbWriteMultipleRegisterRequest mb = new MbWriteMultipleRegisterRequest(); mb.setFunctionCode(EMbFunctionCode.WRITE_MULTIPLE_REGISTER); mb.setAddress(1); mb.setQuantity(2); mb.setCount(4); mb.setValue(new byte[]{(byte) 0x00, (byte) 0x0A, (byte) 0x01, (byte) 0x02}); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: toByteArrayList() { byte[] expect = new byte[]{(byte) 0x81, // 0, 25689 (byte) 0x00, (byte) 0x00, (byte) 0x64, (byte) 0x59, // 523975585 (byte) 0x1F, (byte) 0x3B, (byte) 0x3B, (byte) 0xA1, (byte) 0x1F, (byte) 0x3B, (byte) 0x3B, (byte) 0xA1, // 33.16f, -15.62f (byte) 0x42, (byte) 0x04, (byte) 0xA3, (byte) 0xD7, (byte) 0xC1, (byte) 0x79, (byte) 0xEB, (byte) 0x85, // 156665.35455556 (byte) 0x41, (byte) 0x03, (byte) 0x1F, (byte) 0xCA, (byte) 0xD6, (byte) 0x21, (byte) 0x39, (byte) 0xB7, // -56516.66664 (byte) 0xC0, (byte) 0xEB, (byte) 0x98, (byte) 0x95, (byte) 0x55, (byte) 0x1D, (byte) 0x68, (byte) 0xC7, // 23A (byte) 0x32, (byte) 0x33, (byte) 0x41};  ByteArraySerializer serializer = ByteArraySerializer.newInstance(); ByteArrayListBean listBean = serializer.toObject(ByteArrayListBean.class, expect); byte[] actual = serializer.toByteArray(listBean); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: InterruptedException { long createdTimestamp = System.currentTimeMillis(); LocalFileMetadata metadata = new LocalFileMetadata("/tmp", "/tmp/a/random-file-name-1", createdTimestamp, 100L, 100L); Thread.sleep(300); boolean shouldRotate = rotatingPolicy.shouldRotate(metadata); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(shouldRotate)
[-] pred: org. junit. Assert. assertTrue ( shouldRotate )
************************************
[+] input: testSetOrdered() { EAN8Generator ean8Generator = new EAN8Generator(); ean8Generator.setOrdered(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(ean8Generator.isOrdered())
[-] pred: org. junit. Assert. assertTrue ( ean8Generator. isOrdered() )
************************************
[+] input: testGetJobLog() { when(mockEngineService.runScript(any())).thenReturn(getResponseContent(MOCK_JOB_LOG)); JobLog jobLog = mockJobService.getJobLog("admin", mockJobId, -1L); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(jobLog)
[-] pred: org. junit. Assert. assertNotNull ( jobLog )
************************************
[+] input: rtspGetParameterRequestTest() {  String expect = "GET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 0\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554/"); RtspGetParameterRequest request = new RtspGetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(0); String actual = request.toObjectString(); assertEquals(expect, actual);  expect = "GET_PARAMETER rtsp://10.3.8.202:554/ RTSP/1.0\r\n" + "CSeq: 1\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Session: 1273222592\r\n" + "Content-Type: text/parameters\r\n" + "Content-Length: 26\r\n" + "\r\n" + "packets_received\r\n" + "jitter\r\n"; uri = URI.create("rtsp://10.3.8.202:554/"); request = new RtspGetParameterRequest(uri, "1273222592", this.authenticator); request.setCSeq(1); request.addParameter("packets_received"); request.addParameter("jitter"); actual = request.toObjectString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: getByNotEmptyKey() { JapCache japCache = new JapLocalCache(); String res = (String) japCache.get("ke1y"); System.out.println(res); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
[+] input: testEmpty() { ScriptableExpression expression = new ScriptableExpression(null, null); "<AssertPlaceHolder>"; }
[*] target: assertNull(expression.evaluate(context))
[-] pred: org. junit. Assert. assertNull ( expression. evaluate ( context ) )
************************************
[+] input: TransformerException { Transformer transformer = XmlUtility.newTransformer(); Assert."<AssertPlaceHolder>";  StreamSource s = new StreamSource(new ByteArrayInputStream(SIMPLE_XML.getBytes(StandardCharsets.UTF_8))); ByteArrayOutputStream out = new ByteArrayOutputStream(); StreamResult r = new StreamResult(out); transformer.transform(s, r); assertEquals(SIMPLE_XML, new String(out.toByteArray(), StandardCharsets.UTF_8)); }
[*] target: assertNotNull(transformer)
[-] pred: org. junit. Assert. assertNotNull ( transformer )
************************************
[+] input: testGenerate() { String idCard = ChineseIDCardNumberGenerator.getInstance().generate(); System.err.println(idCard); System.out.println("Verify id result: " + ChineseIDCardUtil.isIDCard(idCard)); "<AssertPlaceHolder>"; if (idCard.charAt(idCard.length()-2)%2 == 0){ System.err.println("女"); } else { System.err.println("男"); } }
[*] target: assertNotNull(idCard)
[-] pred: org. junit. Assert. assertNotNull ( idCard )
************************************
[+] input: testConstructorTimeAndRandom() {  Random random = new Random();  for (int i = 0; i < DEFAULT_LOOP_MAX; i++) {  // get a random time and a random payload long time = random.nextLong() & 0x00000000ffffffffL; byte[] payload = new byte[Ksuid.PAYLOAD_BYTES]; random.nextBytes(payload);  // build the expected byte array byte[] expectedBytes = new byte[Ksuid.KSUID_BYTES]; ByteBuffer buffer = ByteBuffer.allocate(Ksuid.KSUID_BYTES + 4); buffer.putLong(time - Ksuid.EPOCH_OFFSET); // apply offset buffer.put(payload); System.arraycopy(buffer.array(), 4, expectedBytes, 0, Ksuid.KSUID_BYTES);  // get the actual byte array Ksuid ksuid = new Ksuid(time, payload); byte[] actualBytes = ksuid.toBytes();  // compare the actual byte array to the expected byte array for (int j = 0; j < Ksuid.KSUID_BYTES; j++) { "<AssertPlaceHolder>"; } }  try { long time = 0x0000000000000000L; byte[] payload = null; new Ksuid(time, payload); fail("Should throw an exception"); } catch (IllegalArgumentException e) { // success }  try { long time = 0x0000000000000000L; byte[] payload = new byte[Ksuid.PAYLOAD_BYTES + 1]; new Ksuid(time, payload); fail("Should throw an exception"); } catch (IllegalArgumentException e) { // success } }
[*] target: assertEquals(expectedBytes[j], actualBytes[j])
[-] pred: org. junit. Assert. assertEquals ( expectedBytes [ j ], actualBytes [ j ] )
************************************
[+] input: InterruptedException { TopoServer topoServer = MemoryTopoFactory.newServerAndFactory("cell1", "cell2").getTopoServer(); startWatchTopo("k", topoServer, "cell1", "cell2"); topoServer.addKeyspace("k"); topoServer.startTickerReloadCell(globalContext);  printComment("10. HealthCheck Test Primary in other cell"); printComment("a. Get Health"); HealthCheck hc = getHealthCheck();  printComment("b. Add a no-serving primary Tablet in different cell"); MockTablet mockTablet = MockTablet.buildMockTablet(grpcCleanup, "cell2", 0, "a", "k", "s", portMap, Topodata.TabletType.MASTER); hc.addTablet(mockTablet.getTablet()); sleepMillisSeconds(200);  printComment("c. Modify the status of Tablet to serving"); sendOnNextMessage(mockTablet, Topodata.TabletType.MASTER, true, 0, 0.5, 0); sleepMillisSeconds(200);  printComment("d.// check that PRIMARY tablet from other cell IS in healthy tablet list"); List<TabletHealthCheck> hcList = hc.getHealthyTabletStats(Query.Target.newBuilder().setKeyspace("k").setShard("s").setTabletType(Topodata.TabletType.MASTER).build()); Assert."<AssertPlaceHolder>";  MockTablet.closeQueryService(mockTablet); TopologyWatcherManager.INSTANCE.close(); topoServer.close();  printOk(); }
[*] target: assertEquals(1, hcList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, hcList. size ( ) )
************************************
[+] input: TopoException { TopoServer topoServer = MemoryTopoFactory.newServerAndFactory("cell1", "cell2").getTopoServer(); startWatchTopo("k", topoServer, "cell1", "cell2"); topoServer.addKeyspace("k"); topoServer.startTickerReloadCell(globalContext);  printComment("11. HealthCheck Test Primary in other cell"); printComment("a. Get Health"); HealthCheck hc = getHealthCheck();  printComment("b. Add a no-serving replica Tablet"); MockTablet mockTablet = MockTablet.buildMockTablet(grpcCleanup, "cell1", 0, "a", "k", "s", portMap, Topodata.TabletType.REPLICA); hc.addTablet(mockTablet.getTablet()); sleepMillisSeconds(200);  printComment("c. Modify the status of Tablet to serving"); sendOnNextMessage(mockTablet, Topodata.TabletType.REPLICA, true, 0, 0.5, 0); sleepMillisSeconds(200);  printComment("d. check that replica tablet IS in healthy tablet list"); List<TabletHealthCheck> hcList = hc.getHealthyTabletStats(createTarget(Topodata.TabletType.REPLICA)); Assert.assertEquals(1, hcList.size());  printComment("e. Add a tablet as replica in different cell");  MockTablet mockTablet1 = MockTablet.buildMockTablet(grpcCleanup, "cell2", 1, "b", "k", "s", portMap, Topodata.TabletType.REPLICA); hc.addTablet(mockTablet1.getTablet()); sleepMillisSeconds(200);  printComment("f. Modify the status of Tablet to serving"); sendOnNextMessage(mockTablet1, Topodata.TabletType.REPLICA, true, 0, 0.5, 1); sleepMillisSeconds(200);  printComment("g. check that only REPLICA tablet from cell1 is in healthy tablet list"); hcList = hc.getHealthyTabletStats(Query.Target.newBuilder().setKeyspace("k").setShard("s").setTabletType(Topodata.TabletType.REPLICA).build()); Assert."<AssertPlaceHolder>";  MockTablet.closeQueryService(mockTablet, mockTablet1); TopologyWatcherManager.INSTANCE.close(); topoServer.close();  printOk(); }
[*] target: assertEquals(2, hcList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, hcList. size ( ) )
************************************
[+] input: testGetMessageDefaultConstructorWithStatus() { ProcessingStatus status = new ProcessingStatus("title", "body", IStatus.ERROR); ProcessingException processingException = new ProcessingException().withStatus(status); "<AssertPlaceHolder>"; assertEquals("title: body [severity=ERROR]", processingException.getMessage()); assertEquals("title: body", processingException.getDisplayMessage()); }
[*] target: assertEquals(status, processingException.getStatus())
[-] pred: org. junit. Assert. assertEquals ( status, processingException. getStatus() )
************************************
[+] input: shouldNotBeEmptyWhenExternalSourceHasHttpConfigExist() { ArrayList<HttpSourceConfig> http = new ArrayList<>(); http.add(new HttpSourceConfig("", "", "", "", "", "", "", "", "", false, "", "", new HashMap<>(), new HashMap<>(), "metricId_01", false)); ArrayList<EsSourceConfig> es = new ArrayList<>(); ArrayList<PgSourceConfig> pg = new ArrayList<>(); ExternalSourceConfig externalSourceConfig = new ExternalSourceConfig(http, es, pg, new ArrayList<>()); defaultPostProcessorConfig = new PostProcessorConfig(externalSourceConfig, null, null);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(defaultPostProcessorConfig.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( defaultPostProcessorConfig. isEmpty() )
************************************
[+] input: Exception { Properties properties = new Properties(); properties.put(DataSourceFactory.JDBC_DATABASE_NAME, "db"); ConnectionPoolDataSource dataSource = dataSourceFactory.createConnectionPoolDataSource(properties); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dataSource instanceof ConnectionPool); ConnectionPool connectionPoolDataSource = (ConnectionPool) dataSource; Assert.assertEquals("db", connectionPoolDataSource.getDatabaseName()); }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
[+] input: testDogs() { List<String> input = Arrays.asList( "The dogs bark", "The dog barks", "The dog sleeps");  List<String> expectedResult = Arrays.asList( "The dog barks", "The dog sleeps", "The dogs bark");  List<String> actualResult = new ArrayList<>(input); Collections.sort(actualResult, m_collatorProvider.getInstance(new Locale("en")));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualResult )
************************************
[+] input: testReWriteWrongSql() { String ddl = "alter table `payment_voucher` drop key `out_voucher_id`,drop key pay_no\n" + "add index key `uid_pay_no`(`user_id`,`pay_no`) using btree\n" + "add unique key `uid_voucherid_source`(`user_id`,`out_voucher_id`,`source`) using btree";  String expect = "alter table `payment_voucher` drop key `out_voucher_id`,drop key pay_no \n" + "add index `uid_pay_no`(`user_id`,`pay_no`) using btree \n" + "add unique key `uid_voucherid_source`(`user_id`,`out_voucher_id`,`source`) using btree"; String newDdl = SQLUtils.reWriteWrongDdl(ddl); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, newDdl)
[-] pred: org. junit. Assert. assertEquals ( expect, newDdl )
************************************
[+] input: testWithMockedActivities() { ContentLengthActivity activities = mock(ContentLengthActivity.class, withSettings().withoutAnnotations());  ContentLengthInfo testInfo = new ContentLengthInfo(); testInfo.add("testsite", 100);  when(activities.count(anyString())).thenReturn(testInfo); testWorkflowRule.getWorker().registerActivitiesImplementations(activities); testWorkflowRule.getTestEnvironment().start();  ContentLengthWorkflow workflow = testWorkflowRule .getWorkflowClient() .newWorkflowStub( ContentLengthWorkflow.class, WorkflowOptions.newBuilder().setTaskQueue(testWorkflowRule.getTaskQueue()).build());  ContentLengthInfo info = workflow.execute(); "<AssertPlaceHolder>"; assertNotNull(info.getWebsiteMap()); assertEquals(1, info.getWebsiteMap().size());  assertEquals(100, (int) info.getWebsiteMap().get("testsite"));  }
[*] target: assertNotNull(info)
[-] pred: org. junit. Assert. assertNotNull ( info )
************************************
[+] input: testFilterClassIgnoringInjectFieldAnnotationExpectingNullValue() { Class<Replacement> filteredValue = ConfigurationUtility.filterClassIgnoringInjectFieldAnnotation(new Class[]{Replacement.class}, Replacement.class); "<AssertPlaceHolder>"; }
[*] target: assertNull(filteredValue)
[-] pred: org. junit. Assert. assertNull ( filteredValue )
************************************
[+] input: Exception { Future<Long> future = Mockito.mock(Future.class); LocalFileMetadata localFileMetadata = Mockito.mock(LocalFileMetadata.class); FirehoseInstrumentation firehoseInstrumentation = Mockito.mock(FirehoseInstrumentation.class); BlobStorageWriterFutureHandler handler = new BlobStorageWriterFutureHandler(future, localFileMetadata, firehoseInstrumentation); Mockito.when(future.isDone()).thenReturn(true); Mockito.when(future.get()).thenReturn(1000L); Mockito.when(localFileMetadata.getFullPath()).thenReturn("/tmp/test"); Mockito.when(localFileMetadata.getSize()).thenReturn(1024L); Assert."<AssertPlaceHolder>"; Mockito.verify(firehoseInstrumentation, Mockito.times(1)).logInfo("Flushed to blob storage {}", "/tmp/test"); Mockito.verify(firehoseInstrumentation, Mockito.times(1)).incrementCounter(BlobStorageMetrics.FILE_UPLOAD_TOTAL, Metrics.SUCCESS_TAG); Mockito.verify(firehoseInstrumentation, Mockito.times(1)).captureCount(BlobStorageMetrics.FILE_UPLOAD_BYTES, 1024L); Mockito.verify(firehoseInstrumentation, Mockito.times(1)).captureDuration(BlobStorageMetrics.FILE_UPLOAD_TIME_MILLISECONDS, 1000L); }
[*] target: assertTrue(handler.isFinished())
[-] pred: org. junit. Assert. assertTrue ( handler. isFinished() )
************************************
[+] input: valid() { String secretId = "a-secret-id-1"; String secretKey = "a-secret-key-1";  Credentials credentials = new Credentials(secretId, secretKey);  assertEquals(secretId, credentials.getSecretId()); assertEquals(secretId, credentials.secretId());  assertEquals(secretKey, credentials.getSecretKey()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(secretKey, credentials.secretKey())
[-] pred: org. junit. Assert. assertEquals ( secretKey, credentials. secretKey() )
************************************
[+] input: IOException { PipedOutputStream pipedOutputStream = new PipedOutputStream(); BinaryCopyParser parser = new BinaryCopyParser(new PipedInputStream(pipedOutputStream, 256));  DataOutputStream data = new DataOutputStream(pipedOutputStream); data.write(COPY_BINARY_HEADER); data.writeInt(0); data.writeInt(0);  // Write a tuple. data.writeShort(2); data.writeInt(10); data.write(new byte[10]); data.writeInt(4); data.writeInt(100); // Then write the trailer. data.writeShort(-1);  Iterator<CopyRecord> iterator = parser.iterator(); assertTrue(iterator.hasNext()); iterator.next(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext() )
************************************
[+] input: shouldNotProcessIfParameterPlacedInQuery() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.MESSAGE); when(httpSinkConfig.getSinkHttpParameterPlacement()).thenReturn(HttpSinkParameterPlacementType.QUERY);  parameterizedHeaderRequest = new ParameterizedHeaderRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType, protoToFieldMapper); boolean canProcess = parameterizedHeaderRequest.canProcess();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
[+] input: mp4AvcCBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x28, 0x61, 0x76, 0x63, 0x43, 0x01, 0x64, 0x00, 0x2A, (byte) 0xFF, (byte) 0xE1, 0x00, 0x11, 0x67, 0x64, 0x00, 0x2A, (byte) 0xAC, 0x2B, 0x50, 0x3C, 0x01, 0x13, (byte) 0xF2, (byte) 0xCD, (byte) 0xC0, 0x40, 0x40, 0x40, (byte) 0x80, 0x01, 0x00, 0x04, 0x68, (byte) 0xEE, 0x3C, (byte) 0xB0, }; Mp4AvcCBox box = new Mp4AvcCBox(this.trackInfo); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: getShardingColumnName4() { String shardingColumnName = SplitTableUtil.getShardingColumnName("commerce3", "table_engine_test3"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(shardingColumnName)
[-] pred: org. junit. Assert. assertNull ( shardingColumnName )
************************************
[+] input: testLazyString() { String value = "TEN"; subject = makeSimpleCallable(value);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, subject.value())
[-] pred: org. junit. Assert. assertEquals ( value, subject. value() )
************************************
[+] input: testListDatabases() { List<String> strings = rocketMQCatalog.listDatabases(); "<AssertPlaceHolder>"; assertEquals("default", strings.get(0)); }
[*] target: assertEquals(1, strings.size())
[-] pred: org. junit. Assert. assertEquals ( 1, strings. size ( ) )
************************************
[+] input: Exception { // ZooKeeper does not like whitespace in the quorum connect String. String actual, expected; Configuration conf = new Configuration();  { expected = "localhost:2891";  setQuorum(conf, expected); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, " localhost:2891 "); // with leading and trailing whitespace actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, "localhost :2891"); // whitespace after port actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual); }  { expected = "localhost:2891,localhost:2891";  setQuorum(conf, "localhost:2891,localhost:2891"); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, "localhost:2891, localhost:2891"); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, "localhost :2891, localhost:2891"); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); assertEquals(expected, actual);  setQuorum(conf, " localhost:2891, localhost:2891 "); actual = ZooKeeperUtils.getZooKeeperEnsemble(conf); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testReadBytesLengthToBig() { byte[] data = new byte[]{0, 1, 2, 3}; byte[] actual = IOUtility.readBytes(newInputStream(data), 10); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(data, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( data, actual )
************************************
[+] input: testSubstitute() { String sqlTemplate = "select * from table_name where number_param > ? and string_param = 'Amazon.com' and" + " test_str = '''test escape? \'' and state in (?,?) and null_param = ? and" + " double_param = ? and question_mark = '?'"; List<PreparedStatementRequest.PreparedStatementParameter> params = new ArrayList<>(); params.add(new PreparedStatementRequest.PreparedStatementParameter<Integer>(10)); params.add(new PreparedStatementRequest.StringParameter("WA")); params.add(new PreparedStatementRequest.StringParameter("")); params.add(new PreparedStatementRequest.NullParameter()); params.add(new PreparedStatementRequest.PreparedStatementParameter<Double>(2.0)); PreparedStatementRequest psr = new PreparedStatementRequest(sqlTemplate, new JSONObject(), params); String generatedSql = psr.getSql();  String expectedSql = "select * from table_name where number_param > 10 and string_param = 'Amazon.com' " + "and test_str = '''test escape? \'' and state in ('WA','') and null_param = null " + "and double_param = 2.0 and question_mark = '?'"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSql, generatedSql)
[-] pred: org. junit. Assert. assertEquals ( expectedSql, generatedSql )
************************************
[+] input: testFailureDueToEventualInconsistency() { DBConnection anotherDbConnection = mock(DBConnection.class); when(anotherDbConnection.getDatabaseName()) .thenReturn("ZZZ DB"); // Make sure this will be called after Other DB correctnessTest = new ComparisonTest( openSearchConnection, new DBConnection[] {otherDbConnection, anotherDbConnection});  DBResult openSearchResult = new DBResult( "OpenSearch", asList(new Type("firstname", "text")), asList(new Row(asList("John")))); DBResult otherDbResult = new DBResult( "Other DB", asList(new Type("firstname", "text")), asList(new Row(asList("JOHN")))); DBResult anotherDbResult = new DBResult( "ZZZ DB", asList(new Type("firstname", "text")), asList(new Row(asList("Hank")))); when(openSearchConnection.select(anyString())).thenReturn(openSearchResult); when(otherDbConnection.select(anyString())).thenReturn(otherDbResult); when(anotherDbConnection.select(anyString())).thenReturn(anotherDbResult);  TestReport expected = new TestReport(); expected.addTestCase( new FailedTestCase( 1, "SELECT * FROM accounts", asList(openSearchResult, otherDbResult, anotherDbResult), "")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { ApkModule apkModule = getApkModule(); Assert."<AssertPlaceHolder>"; File dir = TestUtils.getTempDir(); dir = new File(dir, "decode_xml"); ApkModuleXmlDecoder decoder = new ApkModuleXmlDecoder(apkModule); decoder.decode(dir); mDir_xml = dir; }
[*] target: assertNotNull(apkModule)
[-] pred: org. junit. Assert. assertNotNull ( apkModule )
************************************
[+] input: shouldFetchValueForFieldForFieldDescriptorOfTypeFloat() { float actualValue = 5.1f;  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("amount_paid_by_cash"); FloatHandler floatHandler = new FloatHandler(fieldDescriptor); Object value = floatHandler.parseObject(actualValue);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
[+] input: testPropSerialization() { Prop prop = new Prop(); List<Element> any = prop.getAny(); Element element1 = SardineUtil.createElement(SardineUtil.createQNameWithCustomNamespace("hello")); element1.setTextContent("bla"); any.add(element1);  Element element2 = SardineUtil.createElement(SardineUtil.createQNameWithDefaultNamespace("hello")); element2.setTextContent("bla"); any.add(element2);  prop.setDisplayname("bli");  String xml = SardineUtil.toXml(prop); String expectedXML = "<?xml version="1.0" encoding="utf-8"?>\n" + "<D:prop xmlns:D="DAV:">\n" + "   <s:hello xmlns:s="SAR:">bla</s:hello>\n" + "   <D:hello>bla</D:hello>\n" + "   <D:displayname>bli</D:displayname>\n" + "</D:prop>";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedXML, xml)
[-] pred: org. junit. Assert. assertEquals ( expectedXML, xml )
************************************
[+] input: getClientTransport() { NotReusableClientTransportHolder holder = new NotReusableClientTransportHolder(); ClientTransportConfig config = new ClientTransportConfig(); config.setProviderInfo(new ProviderInfo().setHost("127.0.0.1").setPort(12222)) .setContainer("test");  TestClientTransport clientTransport = (TestClientTransport) holder.getClientTransport(config);  ClientTransportConfig config2 = new ClientTransportConfig(); config2.setProviderInfo(new ProviderInfo().setHost("127.0.0.1").setPort(12222)) .setContainer("test"); TestClientTransport clientTransport2 = (TestClientTransport) holder.getClientTransport(config2); Assert.assertFalse(clientTransport == clientTransport2);  ClientTransportConfig config3 = new ClientTransportConfig(); config3.setProviderInfo(new ProviderInfo().setHost("127.0.0.1").setPort(12223)) .setContainer("test"); TestClientTransport clientTransport3 = (TestClientTransport) holder.getClientTransport(config3); Assert.assertFalse(clientTransport2 == clientTransport3);  Assert.assertFalse(holder.removeClientTransport(null));  clientTransport.setRequest(4); Assert.assertTrue(holder.removeClientTransport(clientTransport)); Assert.assertEquals(2, holder.size());  clientTransport2.setRequest(0); Assert.assertTrue(holder.removeClientTransport(clientTransport2)); Assert.assertEquals(1, holder.size());  holder.destroy(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, holder.size())
[-] pred: org. junit. Assert. assertEquals ( 0, holder. size() )
************************************
[+] input: testUnicodeConvertionWithSpecialChar() { // Arrange String punycodeAddress = "sömeöne@xn--exmple-cua.com"; String emailAddress = "sömeöne@exämple.com";  // Act String convertedAddress = BEANS.get(MailIDNConverter.class).toUnicode(punycodeAddress);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(emailAddress, convertedAddress)
[-] pred: org. junit. Assert. assertEquals ( emailAddress, convertedAddress )
************************************
[+] input: testSuccessWhenOneDBSupportThisQuery() { DBConnection anotherDbConnection = mock(DBConnection.class); when(anotherDbConnection.getDatabaseName()).thenReturn("Another"); correctnessTest = new ComparisonTest( openSearchConnection, new DBConnection[] {otherDbConnection, anotherDbConnection});  when(openSearchConnection.select(anyString())) .thenReturn( new DBResult( "OpenSearch", asList(new Type("firstname", "text")), asList(new Row(asList("John"))))); when(anotherDbConnection.select(anyString())) .thenReturn( new DBResult( "Another DB", asList(new Type("firstname", "text")), asList(new Row(asList("John")))));  TestReport expected = new TestReport(); expected.addTestCase(new SuccessTestCase(1, "SELECT * FROM accounts")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testConvertNull() { MiddleMask m = new MiddleMask(3, 2); "<AssertPlaceHolder>"; }
[*] target: assertNull(m.convert(null))
[-] pred: org. junit. Assert. assertNull ( m. convert ( null ) )
************************************
[+] input: Exception { boolean error = false; try { new ExcludeFilter("*").invoke(null, null); } catch (Exception e) { error = e instanceof UnsupportedOperationException; } Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(error)
[-] pred: org. junit. Assert. assertTrue ( error )
************************************
[+] input: testLoadFile() { ServerConfig serverConfig = new ServerConfig() .setProtocol("bolt") .setHost("0.0.0.0") .setPort(12200);  ProviderConfig<?> provider = new ProviderConfig(); provider.setInterfaceId("com.alipay.xxx.TestService") .setUniqueId("unique123Id") .setRegister(true) .setRegistry(registryConfig) .setServer(serverConfig);  registry.register(provider); registry.destroy();  // registry 关闭，但是 provider 信息保存到本地 Assert.assertTrue(new File(file).exists());  // 创建一个新的 localRegistry，会立即加载到缓存 RegistryConfig newRegistryConfig = new RegistryConfig() .setProtocol("local") //.setParameter("registry.local.scan.period", "1000") .setSubscribe(true) .setFile(file) .setRegister(true);  LocalRegistry newRegistry = (LocalRegistry) RegistryFactory.getRegistry(newRegistryConfig);  newRegistry.init(); Assert.assertFalse(newRegistry.memoryCache.isEmpty());  // consumer 订阅时应该能立刻读到数据 ConsumerConfig<?> consumer = new ConsumerConfig(); consumer.setInterfaceId("com.alipay.xxx.TestService") .setUniqueId("unique123Id") .setRegistry(registryConfig) .setSubscribe(true);  List<ProviderGroup> subscribe = newRegistry.subscribe(consumer); Assert."<AssertPlaceHolder>"; Assert.assertFalse(subscribe.get(0).getProviderInfos().isEmpty()); }
[*] target: assertFalse(subscribe.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( subscribe. isEmpty ( ) )
************************************
[+] input: URISyntaxException { BatchRequestCreator batchRequestCreator = new BatchRequestCreator(firehoseInstrumentation, uriBuilder, headerBuilder, HttpSinkRequestMethodType.POST, jsonBody, httpSinkConfig); List<HttpEntityEnclosingRequestBase> requests = batchRequestCreator.create(messages, requestEntityBuilder);  "<AssertPlaceHolder>"; assertEquals(HttpSinkRequestMethodType.POST.toString(), requests.get(0).getMethod()); verify(firehoseInstrumentation, times(1)).logDebug("\nRequest URL: {}\nRequest headers: {}\nRequest content: {}\nRequest method: {}", uriBuilder.build(), headerBuilder.build(), jsonBody.serialize(messages), HttpSinkRequestMethodType.POST); }
[*] target: assertEquals(1, requests.size())
[-] pred: org. junit. Assert. assertEquals ( 1, requests. size ( ) )
************************************
[+] input: InvalidSPDXAnalysisException { File resultDirectory = Files.createTempDirectory("cdxTest").toFile(); try { String resultFilePath = resultDirectory + File.separator + "resultSpdx.json"; CycloneToSpdx.cycloneDxToSpdx(VALID_BOM_PATH.toString(), resultFilePath); MultiFormatStore store = new MultiFormatStore(new InMemSpdxStore(), Format.JSON_PRETTY, Verbose.COMPACT); String documentUri; try (InputStream is = new FileInputStream(new File(resultFilePath))) { documentUri = store.deSerialize(is, false); } SpdxDocument spdxDoc = new SpdxDocument(store, documentUri, null, false); List<String> verify = spdxDoc.verify(); "<AssertPlaceHolder>"; List<String> expectedDocAttributionPatterns = new ArrayList<>(); assertTrue(spdxDoc.getDocumentUri().contains("3e671687-395b-41f5-a30f-a58921a69b79")); assertTrue(spdxDoc.getDocumentUri().endsWith("_1")); String created = spdxDoc.getCreationInfo().getCreated(); assertTrue(created.startsWith("2020-04-13T20:20:39")); Collection<String> creators = spdxDoc.getCreationInfo().getCreators(); boolean foundTool = false; boolean foundPerson = false; boolean foundOrganization = false; for (String creator:creators) { if (creator.contains("Awesome Tool")) { assertFalse(foundTool); foundTool = true; assertTrue(creator.startsWith("Tool:")); assertTrue(creator.contains("9.1.2")); // Too checksums expectedDocAttributionPatterns.add("25ed8e31b995bb927966616df2a42b979a2717f0"); expectedDocAttributionPatterns.add("a74f733635a19aefb1f73e5947cef59cd7440c6952ef0f03d09d974274cbd6df"); } if (creator.contains("Samantha Wright")) { assertFalse(foundPerson); foundPerson = true; assertTrue(creator.startsWith("Person:")); assertTrue(creator.contains("(samantha.wright@example.com)")); expectedDocAttributionPatterns.add("800-555-1212"); } if (creator.contains("Acme, Inc.")) { assertFalse(foundOrganization); foundOrganization = true; assertTrue(creator.startsWith("Organization: ")); expectedDocAttributionPatterns.add("https://example.com"); expectedDocAttributionPatterns.add("Acme Distribution"); expectedDocAttributionPatterns.add("distribution@example.com"); } } assertTrue(foundTool); assertTrue(foundPerson); assertTrue(foundOrganization); expectedDocAttributionPatterns.add("Acme, Inc."); expectedDocAttributionPatterns.add("Acme Professional Services"); expectedDocAttributionPatterns.add("professional.services@example.com"); assertEquals(1, spdxDoc.getDocumentDescribes().size()); SpdxElement described = spdxDoc.getDocumentDescribes().toArray(new SpdxElement[1])[0]; assertEquals("Acme Application", described.getName().get()); assertTrue(spdxDoc.getName().get().contains("Acme Application")); assertAnnotationsContains(spdxDoc.getAnnotations(), expectedDocAttributionPatterns);  // check on all the packages final List<String> foundComponentNames = new ArrayList<>(); SpdxModelFactory.getElements(spdxDoc.getModelStore(), spdxDoc.getDocumentUri(), spdxDoc.getCopyManager(), SpdxPackage.class).forEach(element -> { try { SpdxPackage pkg = (SpdxPackage)element; foundComponentNames.add(pkg.getName().get()); if ("Acme Application".equals(pkg.getName().get())) { List<String> expectedAnnotations = new ArrayList<>(); expectedAnnotations.add("application".toUpperCase());	// type assertEquals("Person: Acme Super Heros", pkg.getOriginator().get()); /** TODO: Uncomment this out once the SWID external refs are implemented assertEquals("9.1.1", pkg.getVersionInfo().get()); ExternalRef[] externalRefs = pkg.getExternalRefs().toArray(new ExternalRef[pkg.getExternalRefs().size()]); assertEquals(1, externalRefs.length); assertEquals(ListedReferenceTypes.getListedReferenceTypes().getListedReferenceTypeByName("swid"), externalRefs[0].getReferenceType()); assertEquals(ReferenceCategory.SECURITY, externalRefs[0].getReferenceCategory()); assertTrue(externalRefs[0].getReferenceLocator().contains("swidgen-242eb18a-503e-ca37-393b-cf156ef09691_9.1.1")); **/ expectedAnnotations.add("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8"); // part of the SWID content assertAnnotationsContains(pkg.getAnnotations(), expectedAnnotations); } else if ("com.acme:tomcat-catalina".equals(pkg.getName().get())) { List<String> expectedAnnotations = new ArrayList<>(); expectedAnnotations.add("library".toUpperCase());	// type assertTrue(pkg.getOriginator().get().contains("Acme Inc")); assertEquals("9.0.14", pkg.getVersionInfo().get()); if (pkg.getId().contains("npm")) { // There are 3 in the BOM test file with the same name - one has more details assertEquals("e6b1000b94e835ffd37f4c6dcbdad43f4b48a02a", pkg.getSha1()); boolean foundSha1 = false; boolean foundSha512 = false; boolean foundSha256 = false; boolean foundMd5 = false; for (Checksum checksum:pkg.getChecksums()) { if (ChecksumAlgorithm.SHA1.equals(checksum.getAlgorithm())) { assertFalse(foundSha1); foundSha1 = true; assertEquals("e6b1000b94e835ffd37f4c6dcbdad43f4b48a02a", checksum.getValue()); } else if (ChecksumAlgorithm.SHA256.equals(checksum.getAlgorithm())) { assertFalse(foundSha256); foundSha256 = true; assertEquals("f498a8ff2dd007e29c2074f5e4b01a9a01775c3ff3aeaf6906ea503bc5791b7b", checksum.getValue()); } else if (ChecksumAlgorithm.SHA512.equals(checksum.getAlgorithm())) { assertFalse(foundSha512); foundSha512 = true; assertEquals("e8f33e424f3f4ed6db76a482fde1a5298970e442c531729119e37991884bdffab4f9426b7ee11fccd074eeda0634d71697d6f88a460dce0ac8d627a29f7d1282", checksum.getValue()); } else if (ChecksumAlgorithm.MD5.equals(checksum.getAlgorithm())) { assertFalse(foundMd5); foundMd5 = true; assertEquals("3942447fac867ae5cdb3229b658f4d48", checksum.getValue()); } else { fail("Unexpected checksum algorithm"); } } assertTrue(foundSha512); assertTrue(foundSha256); assertTrue(foundSha1); assertTrue(foundMd5); assertEquals("Apache-2.0", pkg.getLicenseDeclared().toString()); ExternalRef[] externalRefs = pkg.getExternalRefs().toArray(new ExternalRef[pkg.getExternalRefs().size()]); assertEquals(1, externalRefs.length); assertEquals(ListedReferenceTypes.getListedReferenceTypes().getListedReferenceTypeByName("purl"), externalRefs[0].getReferenceType()); assertEquals(ReferenceCategory.PACKAGE_MANAGER, externalRefs[0].getReferenceCategory()); assertEquals("pkg:npm/acme/component@1.0.0", externalRefs[0].getReferenceLocator()); Relationship[] relationships = pkg.getRelationships().toArray(new Relationship[pkg.getRelationships().size()]); assertEquals(3, relationships.length); int numAcestors = 0; int numDependencies = 0; for (Relationship relationship:relationships) { SpdxPackage relatedPackage = (SpdxPackage)relationship.getRelatedSpdxElement().get(); assertEquals("com.acme:tomcat-catalina", relatedPackage.getName().get());  assertEquals("9.0.14", relatedPackage.getVersionInfo().get()); if (RelationshipType.ANCESTOR_OF.equals(relationship.getRelationshipType())) { numAcestors++; } else if (RelationshipType.DEPENDS_ON.equals(relationship.getRelationshipType())) { numDependencies++; } else { fail("Unexpected relationship type: "+relationship.getRelationshipType()); } } assertEquals(2, numAcestors); assertEquals(1, numDependencies); expectedAnnotations.add("123"); // commit expectedAnnotations.add("2018-11-13T"); // commit } assertAnnotationsContains(pkg.getAnnotations(), expectedAnnotations); } else if ("org.example:mylibrary".equals(pkg.getName().get())) { List<String> expectedAnnotations = new ArrayList<>(); assertTrue(pkg.getSupplier().get().contains("Example, Inc.")); assertTrue(pkg.getSupplier().get().contains("support@example.com")); expectedAnnotations.add("800-555-1212"); expectedAnnotations.add("Example Support APAC"); expectedAnnotations.add("support@apac.example.com"); assertEquals("Person: Example Super Heros", pkg.getOriginator().get()); expectedAnnotations.add("https://example.com"); expectedAnnotations.add("https://example.net"); assertEquals("1.0.0", pkg.getVersionInfo().get()); assertAnnotationsContains(pkg.getAnnotations(), expectedAnnotations); } else { fail("Unexpected package "+pkg.getName().get()); } } catch (Exception ex) { fail("Exception occurred while processing packages: "+ex.getMessage()); } }); assertEquals(5, foundComponentNames.size()); assertTrue(foundComponentNames.contains("Acme Application")); assertTrue(foundComponentNames.contains("com.acme:tomcat-catalina")); assertTrue(foundComponentNames.contains("org.example:mylibrary")); } finally { deleteDirOrFile(resultDirectory); } }
[*] target: assertEquals(0, verify.size())
[-] pred: org. junit. Assert. assertEquals ( 0, verify. size ( ) )
************************************
[+] input: testEmptyChild() { final ChildPredicate predicate = ChildPredicate.empty(); final KDLNode node = KDLNode.builder().setIdentifier("node").setChild(KDLDocument.empty()).build();  "<AssertPlaceHolder>"; }
[*] target: assertTrue(predicate.test(node))
[-] pred: org. junit. Assert. assertTrue ( predicate. test ( node ) )
************************************
[+] input: mp4TrexBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x20, 0x74, 0x72, 0x65, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, }; Mp4TrexBox box = new Mp4TrexBox(1); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: encodesValueToBase64() { String actual = message.getSerializedMessage();  String expected = "CgMxMjMSA2FiYxoHZGV0YWlscw==";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: generateImplicitGrantResponse() { String url = idsAuthorizationProvider.generateImplicitGrantResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(6, obj.size()); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("scope")); Assert.assertTrue(obj.containsKey("id_token")); Assert.assertTrue(obj.containsKey("state")); Assert.assertTrue(obj.containsKey("token_type")); Assert.assertTrue(obj.containsKey("expires_in")); }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
[+] input: testSynchronizeIntervalsUpdated() { Interval interval1 = getIntervalDAO().insertInterval(getInterval1()); Interval interval2 = getIntervalDAO().insertInterval(getInterval2()); activityScenario = launchSettingsInputActivity(GlobalSettingsActivity.class); injectTimeBasedSuspensionScheduler(); SuspensionIntervalsDialog intervalsDialog = openSuspensionIntervalsDialog(); onView(isRoot()).perform(waitFor(500)); IntervalHandler handler = new IntervalHandler(getGlobalSettingsActivity(), intervalsDialog); intervalsDialog.getAdapter().removeItems(); Time start1 = new Time(); start1.setHour(5); start1.setMinute(5); Time end1 = new Time(); end1.setHour(6); end1.setMinute(6); interval1.setStart(start1); interval1.setEnd(end1); Time start2 = new Time(); start2.setHour(9); start2.setMinute(9); Time end2 = new Time(); end2.setHour(10); end2.setMinute(10); interval2.setStart(start2); interval2.setEnd(end2); intervalsDialog.getAdapter().addItem(interval1); intervalsDialog.getAdapter().addItem(interval2); "<AssertPlaceHolder>"; List<Interval> intervals = getIntervalDAO().readAllIntervals(); assertEquals(2, intervals.size()); assertFalse(intervals.get(0).isEqual(getInterval1())); assertFalse(intervals.get(1).isEqual(getInterval2())); assertTrue(intervals.get(0).isEqual(interval1)); assertTrue(intervals.get(1).isEqual(interval2)); }
[*] target: assertTrue(handler.synchronizeIntervals())
[-] pred: org. junit. Assert. assertTrue ( handler. synchronizeIntervals ( ) )
************************************
[+] input: testDatabaseAnnotation() { annotationMapper.parseClassAnnotations(ClassWithDatabase.class.getAnnotations(), context); DefaultDBSystem db = (DefaultDBSystem) context.get("db"); "<AssertPlaceHolder>"; assertEquals("hsqlmem", db.getEnvironment()); }
[*] target: assertNotNull(db)
[-] pred: org. junit. Assert. assertNotNull ( db )
************************************
[+] input: createResponse4() { String expect = "Digest username="admin", realm="IP Camera(G5366)", nonce="00ea0e5bc0d4bee565d77d40502f9229"," + " uri="rtsp://192.168.3.142:554/h264/ch1/main/av_stream", response="f5592b62173d44ecc24738e0b0ed8dfd""; UsernamePasswordCredential credential = new UsernamePasswordCredential("admin", "kilox1234"); DigestAuthenticator authenticator = new DigestAuthenticator(credential); authenticator.addServerInfoByString("Digest realm="IP Camera(G5366)", nonce="00ea0e5bc0d4bee565d77d40502f9229", stale="FALSE""); authenticator.addClientInfo("rtsp://192.168.3.142:554/h264/ch1/main/av_stream", "DESCRIBE"); String actual = authenticator.createResponse(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: channelShouldBeAddedForAHostAndPort() {  grpcSourceConfig = mock(GrpcSourceConfig.class);  GrpcClient grpcClient = new GrpcClient(grpcSourceConfig);  when(grpcSourceConfig.getEndpoint()).thenReturn("localhost"); when(grpcSourceConfig.getServicePort()).thenReturn(8080);  grpcClient.addChannel();  Channel decoratedChannel = grpcClient.getDecoratedChannel(); "<AssertPlaceHolder>";  }
[*] target: assertNotNull(decoratedChannel)
[-] pred: org. junit. Assert. assertNotNull ( decoratedChannel )
************************************
[+] input: toByteArray() { SetupComParameter setupComParameter = new SetupComParameter(); setupComParameter.setFunctionCode(EFunctionCode.READ_VARIABLE); setupComParameter.setReserved((byte) 0x00); setupComParameter.setMaxAmqCaller(0x0001); setupComParameter.setMaxAmqCallee(0x0001); setupComParameter.setPduLength(0x0004); byte[] actual = setupComParameter.toByteArray(); byte[] expect = {(byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x04}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: testUpdateActionsFromPaths_layersFirst() { Set<UpdateAction> expectedActions = EnumSet.of(UpdateAction.LAYERS, UpdateAction.CLIENT, UpdateAction.FUNCTIONS); List<Path> changedPaths = List.of( Path.of("client/web/src/App.js"), Path.of("functions/onboarding-app-stack-listener/pom.xml"), Path.of("layers/apigw-helper/pom.xml")); Collection<UpdateAction> actualActions = updateWorkflow.getUpdateActionsFromPaths(changedPaths); "<AssertPlaceHolder>"; // the first item in the set iterator should always be LAYERS // (meaning we update layers first) regardless of changedPath ordering assertTrue(actualActions.iterator().next().name().equals("LAYERS")); }
[*] target: assertEquals(expectedActions, actualActions)
[-] pred: org. junit. Assert. assertEquals ( expectedActions, actualActions )
************************************
[+] input: shouldNotProcessIfParameterIsEnabled() { when(httpSinkConfig.getSinkHttpParameterSource()).thenReturn(HttpSinkParameterSourceType.MESSAGE);  simpleRequest = new SimpleRequest(statsDReporter, httpSinkConfig, jsonBody, httpSinkRequestMethodType); boolean canProcess = simpleRequest.canProcess();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(canProcess)
[-] pred: org. junit. Assert. assertFalse ( canProcess )
************************************
[+] input: Exception { SofaRpcException exception = new SofaRpcException(RpcErrorType.SERVER_BUSY, "111"); String string = ExceptionUtils.toShortString(exception, 1); Assert."<AssertPlaceHolder>"; Pattern pattern = Pattern.compile("at"); Matcher matcher = pattern.matcher(string); int count = 0; while (matcher.find()) { count++; } Assert.assertTrue(count == 1); }
[*] target: assertNotNull(string)
[-] pred: org. junit. Assert. assertNotNull ( string )
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestNestedRepeatedMessage"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestNestedRepeatedMessage.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  TestNestedRepeatedMessage nestedRepeatedMessage = TestNestedRepeatedMessage.newBuilder() .addRepeatedMessage(commonMessage) .addRepeatedMessage(commonMessage) .addRepeatedNumberField(1) .addRepeatedNumberField(2) .setNumberField(10) .build();  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(nestedRepeatedMessage.getDescriptor(), nestedRepeatedMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"single_message":{"order_number":"","order_url":"","order_details":""},"repeated_message":[{"order_number":"order-number-123","order_url":"https://order-url","order_details":"pickup"},{"order_number":"order-number-123","order_url":"https://order-url","order_details":"pickup"}],"number_field":10,"repeated_number_field":[1,2],"metadata":null,"event_timestamp":{"seconds":0,"nanos":0},"repeated_long_field":[]}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.viewMessage(anyString())).thenReturn(new MessageExt()); } MessageExt messageExt = mqAdminExtImpl.viewMessage("7F000001ACC018B4AAC2116AF6500000"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(messageExt)
[-] pred: org. junit. Assert. assertNotNull ( messageExt )
************************************
[+] input: testDefaultGeneration() { CountryGenerator generator = new CountryGenerator(); generator.init(context); for (int i = 0; i < 100; i++) { Country country = generator.generate(); "<AssertPlaceHolder>"; assertNotNull(Country.getInstance(country.getIsoCode())); } }
[*] target: assertNotNull(country)
[-] pred: org. junit. Assert. assertNotNull ( country )
************************************
[+] input: shouldTransformGroupTypeTimestampFromSimpleGroup() { Instant currentInstant = Instant.now(); long seconds = currentInstant.getEpochSecond(); int nanos = currentInstant.getNano(); Row expectedRow = Row.of(seconds, nanos);  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); GroupType timestampSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("seconds") .required(INT32).named("nanos") .named("event_timestamp"); SimpleGroup timestampMessage = new SimpleGroup(timestampSchema); timestampMessage.add("seconds", seconds); timestampMessage.add("nanos", nanos);  MessageType parquetSchema = buildMessage() .addField(timestampSchema) .named("TestBookingLogMessage"); SimpleGroup mainMessage = new SimpleGroup(parquetSchema); mainMessage.add("event_timestamp", timestampMessage);  TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor); Row actualRow = (Row) timestampHandler.transformFromParquet(mainMessage);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
[+] input: testIsNotSet() { AtomicLongComponent comp = new AtomicLongComponent(); assertTrue(comp.isNotSet()); comp.set(3); assertFalse(comp.isNotSet()); comp.clear(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(comp.isNotSet())
[-] pred: org. junit. Assert. assertTrue ( comp. isNotSet() )
************************************
[+] input: testIconCellSetErrorStatus() { final String testIconId = ""; Cell c = new Cell(); c.setIconId(testIconId); c.addErrorStatus(new Status("error", IStatus.ERROR)); c.addErrorStatus(new Status("error2", IStatus.ERROR)); c.clearErrorStatus(); c.addErrorStatus(new Status("error3", IStatus.ERROR)); c.clearErrorStatus(); assertNull(c.getErrorStatus()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(testIconId, c.getIconId())
[-] pred: org. junit. Assert. assertEquals ( testIconId, c. getIconId ( ) )
************************************
[+] input: shouldMakeUpperCaseForKeywords() { //given String expectedString = "SELECT" + lineBreak + "\t*" + lineBreak + "FROM" + lineBreak + "\tmytable;"; String inputString = "select * from mytable;";  //when String formattedString = formatter.format(inputString, configuration);  //then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedString, formattedString)
[-] pred: org. junit. Assert. assertEquals ( expectedString, formattedString )
************************************
[+] input: DeserializerException { when(testGrpcService.bindService()).thenCallRealMethod();  Server server = ServerBuilder .forPort(5000) .addService(testGrpcService.bindService()) .build() .start();  Map<String, String> config = new HashMap<>(); config.put("SINK_GRPC_METHOD_URL", "org.raystack.firehose.consumer.TestServer/TestRpcMethod"); config.put("SINK_GRPC_SERVICE_HOST", "localhost"); config.put("SINK_GRPC_SERVICE_PORT", "5000");   Sink sink = GrpcSinkFactory.create(config, statsDReporter, stencilClient);  Assert."<AssertPlaceHolder>"; server.shutdownNow(); }
[*] target: assertNotNull(sink)
[-] pred: org. junit. Assert. assertNotNull ( sink )
************************************
[+] input: miss_DoTable_Miss_IgnoreTable_Hit_DoWildTable_Miss_DoDb_Ignore() { ReplicaMeta replicaMeta = new ReplicaMeta(); replicaMeta.setDoDb("full_src_1, full_src_2"); replicaMeta.setIgnoreDb(""); replicaMeta.setDoTable(""); replicaMeta.setIgnoreTable(""); replicaMeta.setWildDoTable("d%.tb\\_charset%, d%.col\\_charset%"); replicaMeta.setWildIgnoreTable(""); replicaMeta.setRewriteDb(""); printChangeFilterSql(replicaMeta);  // init ReplicaFilter filter = new ReplicaFilter(replicaMeta); filter.init();  DefaultRowChange rowChange = new DefaultRowChange(); rowChange.setAction(DBMSAction.INSERT);  rowChange.setSchema("dutf8"); rowChange.setTable("tb_charset_gbk"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(filter.ignoreEvent(rowChange))
[-] pred: org. junit. Assert. assertTrue ( filter. ignoreEvent ( rowChange ) )
************************************
[+] input: IOException { ParquetReader.ParquetReaderProvider provider = new ParquetReader.ParquetReaderProvider(deserializer, statsDReporterSupplierMock); ClassLoader classLoader = getClass().getClassLoader(); ParquetReader reader = provider.getReader(classLoader.getResource("test_file.parquet").getPath());  reader.read(); reader.read(); reader.read(); /* This 4th call to read will return null as there are only 3 rows in test_file.parquet */ reader.read();  CheckpointedPosition expectedCheckpointedPosition = new CheckpointedPosition(CheckpointedPosition.NO_OFFSET, 3);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCheckpointedPosition, reader.getCheckpointedPosition())
[-] pred: org. junit. Assert. assertEquals ( expectedCheckpointedPosition, reader. getCheckpointedPosition ( ) )
************************************
[+] input: testEncodeAsBytes() { AbstractEntityEncoder e = createEntityEncoder(); byte[] actualBytes = e.encodeEntityAsBytes(createEntity()); byte[] expectedBytes = new byte[] { 112, 101, 114, 115, 111, 110, 91, 110, 97, 109, 101, 61, 79, 116, 116, 111, 93 }; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedBytes, actualBytes)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedBytes, actualBytes )
************************************
[+] input: testSm3() { String str = "a-string-to-hash"; String expectedValue = "10bd18e0e96b6e9d79f8726c04df6c5aecdda4cf3f8e5c227c76eb3d3c850498";  String actualValue = SignatureMethodEnum.SM3.calcSign(str);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualValue )
************************************
[+] input: testNormal() { Generator<Long> feed = new IncrementGenerator(1, 1, N); NonNullGenerator<Long> generator = WrapperFactory.asNonNullGenerator( ExpandGeneratorProxy.uniqueProxy(feed, CACHE_SIZE, BUCKET_SIZE)); generator.init(context); UniqueLongValidator validator = new UniqueLongValidator(N); for (int i = 0; i < N; i++) { Long product = generator.generate(); "<AssertPlaceHolder>"; assertTrue("Not unique: " + product, validator.valid(product)); assertTrue(product <= N); assertTrue(product >= 1); } assertUnavailable(generator); }
[*] target: assertNotNull(product)
[-] pred: org. junit. Assert. assertNotNull ( product )
************************************
[+] input: Exception { String xml = "<?xml version="1.0" encoding="UTF-8"?>\n" + "<log>\n" + "    <entry id="1">\n" + "        <message>Application started</message>\n" + "    </entry>\n" + "    <entry id="2">\n" + "        <message>Application ended</message>\n" + "    </entry>\n" + "</log>";  Collection<Integer> ids = parser.getIdsByMessage(xml, "Application stopped");  "<AssertPlaceHolder>"; }
[*] target: assertTrue(ids.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( ids. isEmpty ( ) )
************************************
[+] input: generateIdTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateIdTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(1, obj.size()); Assert.assertTrue(obj.containsKey("id_token")); }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
[+] input: testLabeledPointWithWeightGenerator() { String featuresCol = "features"; String labelCol = "label"; String weightCol = "weight";  LabeledPointWithWeightGenerator generator = new LabeledPointWithWeightGenerator() .setFeatureArity(10) .setLabelArity(10) .setColNames(new String[] {featuresCol, labelCol, weightCol}) .setNumValues(100);  int count = 0; for (CloseableIterator<Row> it = generator.getData(tEnv)[0].execute().collect(); it.hasNext(); ) { Row row = it.next(); count++; DenseVector features = (DenseVector) row.getField(featuresCol); "<AssertPlaceHolder>"; for (double value : features.values) { assertTrue(value >= 0); assertTrue(value <= generator.getFeatureArity() - 1); }  double label = (double) row.getField(labelCol); assertTrue(label >= 0); assertTrue(label <= generator.getLabelArity() - 1);  double weight = (double) row.getField(weightCol); assertTrue(weight >= 0); assertTrue(weight < 1); } assertEquals(generator.getNumValues(), count); }
[*] target: assertNotNull(features)
[-] pred: org. junit. Assert. assertNotNull ( features )
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("00:00-00:05"); TimeInterval expected = new TimeInterval( LocalTime.of(0, 0, 0), LocalTime.of(0, 5, 0) ); "<AssertPlaceHolder>"; assertEquals(300, actual.getDuration()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldBeAbleToBuildSourceIfSourceDetailsIsUnboundedKafkaAndDaggerDeserializerIsKafkaDeserializationSchema() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_SOURCE, SourceType.UNBOUNDED)}); KafkaDaggerSource daggerSource = new KafkaDaggerSource(streamConfig, configuration, daggerDeserializer);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(daggerSource.canBuild())
[-] pred: org. junit. Assert. assertTrue ( daggerSource. canBuild ( ) )
************************************
[+] input: testCompositeIdByComponent() { FixtureCompositeId_CardinalityOne id = BEANS.get(IdFactory.class).createInternal(FixtureCompositeId_CardinalityOne.class, "abc"); List<? extends IId> idComponents = id.unwrap(); "<AssertPlaceHolder>"; assertEquals("abc", idComponents.get(0).unwrap()); }
[*] target: assertEquals(1, idComponents.size())
[-] pred: org. junit. Assert. assertEquals ( 1, idComponents. size ( ) )
************************************
[+] input: testInvalidMap() { Map<String, Object> map = new HashMap<>(); map.put("id", "id"); map.put("networktaskid", "networktaskid"); map.put("success", "success"); map.put("timestamp", "timestamp"); map.put("message", null); LogEntry logEntry = new LogEntry(map); assertEquals(-1, logEntry.getId()); assertEquals(-1, logEntry.getNetworkTaskId()); assertEquals(-1, logEntry.getTimestamp()); assertFalse(logEntry.isSuccess()); "<AssertPlaceHolder>"; }
[*] target: assertNull(logEntry.getMessage())
[-] pred: org. junit. Assert. assertNull ( logEntry. getMessage() )
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMatch2WithSubjectAndResourceAndActionAndEnvironment() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "2."); subject.put("userId", "123457"); subject.put("verify_userId", "12345[6|7]");  Map<String, String> resource = new HashMap<>(); resource.put("aal", "10"); resource.put("verify_aal", ".0"); resource.put("userId", "1111"); resource.put("verify_userId", "1111");  Map<String, String> action = new HashMap<>(); resource.put("aal", "abcd"); resource.put("verify_aal", "[a][b][c][d]"); resource.put("userId", "1111"); resource.put("verify_userId", "1111");  Map<String, String> environment = new HashMap<>(); resource.put("aal", "abcd"); resource.put("verify_aal", "[a-z]*"); resource.put("userId", "1111"); resource.put("verify_userId", "1111"); Context context = new Context<>(subject, resource, action, environment, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
[+] input: shouldFetchUTF8EncodedByteStringForFieldOfTypeBinaryInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestMessageEnvelope.getDescriptor().findFieldByName("log_key"); String testString = "test-string"; ByteString expectedByteString = ByteString.copyFrom(testString.getBytes()); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(BINARY).named("log_key") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); simpleGroup.add("log_key", Binary.fromConstantByteArray(expectedByteString.toByteArray())); ByteStringHandler byteStringHandler = new ByteStringHandler(fieldDescriptor);  Object actualValue = byteStringHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedByteString, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedByteString, actualValue )
************************************
[+] input: shouldUseDefaultSecondsDuringTransformIfSimpleGroupDoesNotContainSecondsInGroupTypeTimestamp() { Instant currentInstant = Instant.now(); int nanos = currentInstant.getNano(); Row expectedRow = Row.of(0L, nanos);  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor);  /* only adding nanos field to the timestamp schema and initializing it */ GroupType timestampSchema = org.apache.parquet.schema.Types.optionalGroup() .optional(INT32).named("nanos") .named("event_timestamp"); SimpleGroup timestampMessage = new SimpleGroup(timestampSchema); timestampMessage.add("nanos", nanos);  MessageType parquetSchema = buildMessage() .addField(timestampSchema) .named("TestBookingLogMessage"); SimpleGroup mainMessage = new SimpleGroup(parquetSchema); mainMessage.add("event_timestamp", timestampMessage);  Row actualRow = (Row) timestampHandler.transformFromParquet(mainMessage);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
[+] input: testWriteString() { String expected = "0123"; StringWriter out = new StringWriter(); IOUtility.writeString(out, expected); String actual = out.toString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testDefaultEChartsSerializer() { EChartsSerializer serializer = new EChartsSerializer(); Object object = new MarkArea2DDataItem() .setStartPoint(new MarkArea2DDataItemDim().setName("start")) .setEndPoint(new MarkArea2DDataItemDim().setName("end")); JsonElement actual = serializer.toJsonTree(object); JsonElement expected = JsonParser.parseString("[{'name': 'start'}, {'name': 'end'}]"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { when(redisTemplate.execute(any(RedisCallback.class))).thenAnswer( invocation -> Boolean.TRUE ); Boolean result = redisCache.hdel("key", "field"); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(Boolean.TRUE, result)
[-] pred: org. junit. Assert. assertEquals ( Boolean.TRUE, result )
************************************
[+] input: testRangeMergeAbove() {  AckRangeSet set = new AckRangeSet(); set.add(0, 1); set.add(1, 101); set.add(201, 301); set.add(101, 201); set.add(401, 501);  List<AckRange> rangesList = convertToOrderedList(set.getRanges()); "<AssertPlaceHolder>"; assertRangeEquals(0, 301, rangesList.get(0)); assertRangeEquals(401, 501, rangesList.get(1));  }
[*] target: assertEquals(2, rangesList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, rangesList. size ( ) )
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForCollectionType() { String error = explicitNullableTypeChecker.checkValueForType(null, stringListType, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("List")); Assert.assertTrue(error.contains("String")); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: mp4TkhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x5C, 0x74, 0x6B, 0x68, 0x64, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5F, (byte) 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x07, (byte) 0x80, 0x00, 0x00, 0x04, 0x38, 0x00, 0x00, }; Mp4TkhdBox box = new Mp4TkhdBox(this.trackInfo); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: convertPolygon_NegativeCoordinates_ShouldConvert() { String wkt = "POLYGON ((-30 10, 40 40, 20 40, 10 20, -30 10))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Polygon", "coordinates": [[[-30,10],[40,40],[20,40],[10,20],[-30,10]]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.getAllSubscriptionGroup(anyString(), anyLong())).thenReturn(new SubscriptionGroupWrapper()); } SubscriptionGroupWrapper wrapper = mqAdminExtImpl.getAllSubscriptionGroup(brokerAddr, 5000L); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(wrapper)
[-] pred: org. junit. Assert. assertNotNull ( wrapper )
************************************
[+] input: createSsoToken() { when(httpServletRequestMock.getHeader("x-forwarded-for")).thenReturn("127.0.0.1"); when(httpServletRequestMock.getHeader("user-agent")).thenReturn("ua"); SSOToken ssoToken = JapSsoUtil.createSsoToken("userId", "userName", request); System.out.println(ssoToken); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(ssoToken)
[-] pred: org. junit. Assert. assertNotNull ( ssoToken )
************************************
[+] input: shouldReturnFalseIfFieldDescriptorOtherThanMapTypeIsPassed() { Descriptors.FieldDescriptor otherFieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("order_number"); MapHandler mapHandler = new MapHandler(otherFieldDescriptor);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(mapHandler.canHandle())
[-] pred: org. junit. Assert. assertFalse ( mapHandler. canHandle() )
************************************
[+] input: shouldNotBeEmptyWhenTransformConfigsExist() { transformConfigs.add(new TransformConfig("testClass", new HashMap<>())); defaultPostProcessorConfig = new PostProcessorConfig(null, transformConfigs, null);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(defaultPostProcessorConfig.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( defaultPostProcessorConfig. isEmpty() )
************************************
[+] input: updateByCategoryType() { int result = mapper.updateByCategoryType("清蒸", 7); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1,result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
[+] input: hasTypeShouldBeFalseWhenTypeIsEmpty() { HttpSourceConfig httpSourceConfig = new HttpSourceConfig("", "",  "", "", "", "", "", "", "", false, "", "", new HashMap<>(), new HashMap<>(), metricId, false); "<AssertPlaceHolder>"; }
[*] target: assertFalse(httpSourceConfig.hasType())
[-] pred: org. junit. Assert. assertFalse ( httpSourceConfig. hasType() )
************************************
[+] input: testHasNodesNoNodes() { ITree tree = mock(ITree.class); TreeEvent event = new TreeEvent(tree, TreeEvent.TYPE_NODE_ACTION); "<AssertPlaceHolder>"; }
[*] target: assertFalse(event.hasNodes())
[-] pred: org. junit. Assert. assertFalse ( event. hasNodes() )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.resetOffsetByTimestampOld(anyString(), anyString(), anyLong(), anyBoolean())).thenReturn(new ArrayList<RollbackStats>()); } List<RollbackStats> stats = mqAdminExtImpl.resetOffsetByTimestampOld("group_test", "topic_test", 1628495765398L, false); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(stats)
[-] pred: org. junit. Assert. assertNotNull ( stats )
************************************
[+] input: testUrlSafeEncryptDecrypt() { char[] password = "insecure".toCharArray(); int keyLength = 128;  Crypter crypter = BEANS.get(Crypter.class).init(password, keyLength); String clearTextData = "lorem ipsum dolor"; String encryptedData = crypter.encryptUrlSafe(clearTextData); String decryptedData = crypter.decryptUrlSafe(encryptedData); "<AssertPlaceHolder>"; }
[*] target: assertEquals(clearTextData, decryptedData)
[-] pred: org. junit. Assert. assertEquals ( clearTextData, decryptedData )
************************************
[+] input: testWithRealActivities() { testWorkflowRule.getWorker().registerActivitiesImplementations(new ContentLengthActivityImpl()); testWorkflowRule.getTestEnvironment().start();  ContentLengthWorkflow workflow = testWorkflowRule .getWorkflowClient() .newWorkflowStub( ContentLengthWorkflow.class, WorkflowOptions.newBuilder().setTaskQueue(testWorkflowRule.getTaskQueue()).build());  ContentLengthInfo info = workflow.execute();  "<AssertPlaceHolder>"; assertNotNull(info.getWebsiteMap()); assertEquals(1, info.getWebsiteMap().size());  }
[*] target: assertNotNull(info)
[-] pred: org. junit. Assert. assertNotNull ( info )
************************************
[+] input: toByteArray() { PlcControlParameter parameter = new PlcControlParameter(); parameter.setParameterBlock(new PlcControlStringParamBlock()); parameter.setPiService(PlcControlParameter.P_PROGRAM); byte[] actual = parameter.toByteArray(); byte[] expect = {(byte) 0x28, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFD, (byte) 0x00, (byte) 0x00, (byte) 0x09, (byte) 0x50, (byte) 0x5f, (byte) 0x50, (byte) 0x52, (byte) 0x4F, (byte) 0x47, (byte) 0x52, (byte) 0x41, (byte) 0x4D}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: onCreation_whenGreenplumVersionIsBelowSix_thenExecutionLocationIsNotSet() { withGreenplumVersionLessThan6(() -> { GreenplumFunction function = new GreenplumFunction(mockSchema); Assert."<AssertPlaceHolder>"; }); }
[*] target: assertNull(function.getExecutionLocation())
[-] pred: org. junit. Assert. assertNull ( function. getExecutionLocation() )
************************************
[+] input: shouldFetchDefaultValueIfFieldNotPresentInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("amount_paid_by_cash"); GroupType parquetSchema = requiredGroup() .required(FLOAT).named("some-other-field") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); FloatHandler floatHandler = new FloatHandler(fieldDescriptor);  Object actualValue = floatHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0.0F, actualValue)
[-] pred: org. junit. Assert. assertEquals ( 0.0F, actualValue )
************************************
[+] input: shouldNotBeEmptyWhenGrpcAndHttpConfigIsPresent() { ExternalSourceConfig externalSourceConfig = new ExternalSourceConfig(http, null, null, grpc);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(externalSourceConfig.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( externalSourceConfig. isEmpty() )
************************************
[+] input: testExtend() { final IDoEntity target = BEANS.get(DoEntityBuilder.class) .put("stringAttribute", "s") .putList("stringList", Arrays.asList("a", "b", "c")) .build();  final IDoEntity template = BEANS.get(DoEntityBuilder.class) .put("nullAttribute", null) .put("stringAttribute", "t") .put("otherAttribute", "t") .putList("nullList", (List<?>) null) .putList("stringList", Arrays.asList("x", "y", "z")) .putList("otherList", Arrays.asList("x", "y", "z")) .build();  final IDoEntity targetExtended = m_helper.extend(target, template); "<AssertPlaceHolder>";  // check JSON content final IDoEntity expected = BEANS.get(DoEntityBuilder.class) .put("stringAttribute", "s") .putList("stringList", Arrays.asList("a", "b", "c")) .put("nullAttribute", null) .put("otherAttribute", "t") .putList("nullList", (List<?>) null) .putList("otherList", Arrays.asList("x", "y", "z")) .build();  assertEquals(expected, target); assertEquals(expected, targetExtended); }
[*] target: assertSame(target, targetExtended)
[-] pred: org. junit. Assert. assertSame ( target, targetExtended )
************************************
[+] input: testInvalidMap() { Map<String, Object> map = new HashMap<>(); map.put("hour", "hour"); map.put("minute", "minute"); Time time = new Time(map); assertEquals(0, time.getHour()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, time.getMinute())
[-] pred: org. junit. Assert. assertEquals ( 0, time. getMinute() )
************************************
[+] input: testExecutionSkippedNetworkTaskDoesNotExist() { NetworkTask task = getNetworkTask(); Intent intent = new Intent(); intent.putExtras(task.toBundle()); broadcastReceiver.onReceive(TestRegistry.getContext(), intent); List<LogEntry> entries = logDAO.readAllLogsForNetworkTask(task.getId()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, entries.size())
[-] pred: org. junit. Assert. assertEquals ( 0, entries. size ( ) )
************************************
[+] input: shouldFetchTimeStampAsStringFromFieldForFieldDescriptorOfTypeTimeStampForTransformForPostProcessor() { String strValue = "2018-08-30T02:21:39.975107Z";  Descriptors.Descriptor descriptor = TestBookingLogMessage.getDescriptor(); Descriptors.FieldDescriptor fieldDescriptor = descriptor.findFieldByName("booking_creation_time");  TypeHandler typeHandler = TypeHandlerFactory.getTypeHandler(fieldDescriptor);  Object value = typeHandler.transformFromPostProcessor(strValue); "<AssertPlaceHolder>"; }
[*] target: assertEquals(strValue, value)
[-] pred: org. junit. Assert. assertEquals ( strValue, value )
************************************
[+] input: createResponse() { String expect = "Basic YWRtaW46MTIzNDU2"; UsernamePasswordCredential credential = new UsernamePasswordCredential("admin", "123456"); BasicAuthenticator authenticator = new BasicAuthenticator(credential); String actual = authenticator.createResponse(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: testAddInvalidNegativeWeight() { RandomCollection<Integer> rc = new RandomCollection<>(random);  boolean thrown = false; try { rc.add(-0.0001, 894); } catch (IllegalArgumentException e) { thrown = true; } "<AssertPlaceHolder>";  }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
[+] input: Exception { Properties props = new Properties(); MailHandler instance = new MailHandler(); InternalErrorManager em = new InternalErrorManager(); instance.setErrorManager(em);  assertNotNull(instance.getMailProperties()); assertEquals(Properties.class, instance.getMailProperties().getClass());   instance.setMailProperties((Properties) null); assertTrue(instance.getMailProperties().isEmpty());  instance.setMailProperties(props); Properties stored = instance.getMailProperties();  assertNotNull(stored); assertNotSame(props, stored); assertEquals(props.getClass(), stored.getClass());  assertEquals(true, em.exceptions.isEmpty()); instance.close();  instance = createHandlerWithRecords(); props = instance.getMailProperties(); em = new InternalErrorManager(); instance.setErrorManager(em);  props.setProperty("mail.from", "localhost@localdomain"); props.setProperty("mail.to", "localhost@localdomain"); instance.setMailProperties(props); instance.flush(); boolean failed = false; for (Exception exception : em.exceptions) { final Throwable t = exception; if (!isConnectOrTimeout(t)) { dump(t); failed = true; } } assertFalse(failed); assertFalse(em.exceptions.isEmpty());  props.setProperty("mail.from", "localhost@localdomain"); props.setProperty("mail.to", "::1@@"); instance.setMailProperties(props);  em = new InternalErrorManager(); instance.setErrorManager(em);  instance.publish(new LogRecord(Level.SEVERE, "test")); instance.close(); failed = false; for (Exception exception : em.exceptions) { final Throwable t = exception; if (t instanceof AddressException || isConnectOrTimeout(t)) { continue; } dump(t); failed = true; } "<AssertPlaceHolder>"; assertFalse(em.exceptions.isEmpty()); }
[*] target: assertFalse(failed)
[-] pred: org. junit. Assert. assertFalse ( failed )
************************************
[+] input: mp4TrafBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x6A, 0x74, 0x72, 0x61, 0x66,  0x00, 0x00, 0x00, 0x10, 0x74, 0x66, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  0x00, 0x00, 0x00, 0x10, 0x74, 0x66, 0x64, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x34, 0x74, 0x72, 0x75, 0x6E, 0x00, 0x00, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, (byte) 0x8A, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x15, 0x57, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x13, (byte) 0x86, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x0E, 0x73, 0x64, 0x74, 0x70, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10 }; Mp4TrafBox box = new Mp4TrafBox(0, this.trackInfo); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: testAssembleUrl() { String expectedUrl = "https://test.org/api/v1/res/id-1/%E8%8E%B7%E5%8F%96%E5%90%8D%E7%A7%B0" + "?nothing&from=from-there&to=%E8%BF%99%E9%87%8C"; HttpRequest request = createRequestWithFluentApi();  String actualUrl = request.assembleUrl();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedUrl, actualUrl)
[-] pred: org. junit. Assert. assertEquals ( expectedUrl, actualUrl )
************************************
[+] input: shouldNotProcessNullStringAsProperties() { Properties actualProperties = new ProtoIndexToFieldMapConverter().convert(null, null);  "<AssertPlaceHolder>"; }
[*] target: assertNull(actualProperties)
[-] pred: org. junit. Assert. assertNull ( actualProperties )
************************************
[+] input: should_ReturnError_When_GivenNullValue_ForMapType() { String error = explicitNullableTypeChecker.checkValueForType(null, Map.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Map")); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: testEmptyInput() { parser.parse(null); assertFalse(parser.isValidInput()); parser.parse(""); "<AssertPlaceHolder>"; }
[*] target: assertFalse(parser.isValidInput())
[-] pred: org. junit. Assert. assertFalse ( parser. isValidInput() )
************************************
[+] input: convertPoint_NegativeCoordinates_ShouldConvert() { String wkt = "POINT(-12.2 13)"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"Point", "coordinates": [-12.2,13]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: shouldNotProvideProtoDeserializerWhenSchemaTypeIsUnsupported() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_SOURCE, SourceType.UNBOUNDED)}); when(streamConfig.getDataType()).thenReturn("JSON");  ProtoDeserializerProvider provider = new ProtoDeserializerProvider(streamConfig, configuration, stencilClientOrchestrator);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(provider.canProvide())
[-] pred: org. junit. Assert. assertFalse ( provider. canProvide() )
************************************
[+] input: testFillTabWithSpace() { String sql = "   select sum(rate)      from                                                                          feed_receive_0117                                                            t             where       RATED_UID=?     and RATER_UID=?     and suspended=0 and validscore=1      and rater_type=?     and trade_closingdate>=?     and trade_closingdate<?     and id<>?        and (IFNULL(IMPORT_FROM, 0)&8) = 0        #@#mysql_feel_01#@#EXECUTE_A_SQL_TIMEOUT#@#1#@#484#@#484#@#484"; String assertSql = "select sum(rate) from feed_receive_0117 t where RATED_UID=? and RATER_UID=? and suspended=0 and validscore=1 and rater_type=? and trade_closingdate>=? and trade_closingdate<? and id<>? and (IFNULL(IMPORT_FROM, 0)&8) = 0 #@#mysql_feel_01#@#EXECUTE_A_SQL_TIMEOUT#@#1#@#484#@#484#@#484"; String acutulSql = null; acutulSql = TStringUtil.fillTabWithSpace(sql); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(assertSql, acutulSql)
[-] pred: org. junit. Assert. assertEquals ( assertSql, acutulSql )
************************************
[+] input: writeTimeOfDay() { LocalTime expect = LocalTime.of(20, 15, 11); s7PLC.writeTimeOfDay("DB4.298", expect); LocalTime actual = s7PLC.readTimeOfDay("DB4.298"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: shouldGetParentRow() { Row parentRow = Row.of(new Row(3), new Row(4)); RowManager rowManager = new RowManager(parentRow);  Row expected = Row.of(new Row(3), new Row(4)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, rowManager.getAll())
[-] pred: org. junit. Assert. assertEquals ( expected, rowManager. getAll() )
************************************
[+] input: Exception { when(redisTemplate.execute(any(RedisCallback.class))).thenAnswer( invocation -> a ); String result = redisCache.get("key", String.class); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(a, result)
[-] pred: org. junit. Assert. assertEquals ( a, result )
************************************
[+] input: testVerifyRequestEmptyRequest() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
[+] input: testRetainWithObjectField() { SearchHit hit = new SearchHit(1); hit.sourceRef(new BytesArray("{"a.id": {"serial": 3}}")); SearchHitRow row = new SearchHitRow(hit, ""); row.retain(ImmutableMap.of("a.id.serial", ""));  SearchHit expected = new SearchHit(1); expected.sourceRef(new BytesArray("{"a.id": {"serial": 3}}")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, row.data())
[-] pred: org. junit. Assert. assertEquals ( expected, row. data() )
************************************
[+] input: testDate() {  final DateType dataType = new DateType(TEST_SCALE); DateBlockBuilder dateBlockBuilder = new DateBlockBuilder(TEST_SIZE, dataType, new ExecutionContext());  // write List<String> values = IntStream.range(0, TEST_SIZE) .mapToObj( i -> RandomTimeGenerator.generateDatetimeString(1) ) .map( l -> R.nextInt() % 4 == 0 ? null : (String) l.get(0) ) .map(String.class::cast) .collect(Collectors.toList());  values.forEach(dateBlockBuilder::writeString); Block block = dateBlockBuilder.build();  // serialization & deserialization DateBlockEncoding encoding = new DateBlockEncoding(); SliceOutput sliceOutput = new DynamicSliceOutput(1 << 10); encoding.writeBlock(sliceOutput, block);  Slice slice = sliceOutput.slice(); Block block1 = encoding.readBlock(slice.getInput());  IntStream.range(0, TEST_SIZE) .forEach( i -> { boolean isEqual = block.equals(i, block1, i); "<AssertPlaceHolder>"; } ); }
[*] target: assertTrue(isEqual)
[-] pred: org. junit. Assert. assertTrue ( isEqual )
************************************
[+] input: testToAndFromString() { for (int i = 0; i < DEFAULT_LOOP_MAX; i++) { String string = getRandomString(); Ksuid ksuid2 = Ksuid.from(string); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(string, ksuid2.toString())
[-] pred: org. junit. Assert. assertEquals ( string, ksuid2. toString() )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineBrokerClusterInfo()).thenReturn(MockObjectUtil.createClusterInfo()); } ClusterInfo clusterInfo = mqAdminExtImpl.examineBrokerClusterInfo(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(clusterInfo.getBrokerAddrTable().size(), 1); Assert.assertEquals(clusterInfo.getClusterAddrTable().size(), 1); }
[*] target: assertNotNull(clusterInfo)
[-] pred: org. junit. Assert. assertNotNull ( clusterInfo )
************************************
[+] input: testGetMessageMessageConstructor() { VetoException vetoException = new VetoException("message"); "<AssertPlaceHolder>"; assertEquals("message [severity=ERROR]", vetoException.getMessage()); assertEquals("message", vetoException.getDisplayMessage()); }
[*] target: assertNull(vetoException.getHtmlMessage())
[-] pred: org. junit. Assert. assertNull ( vetoException. getHtmlMessage() )
************************************
[+] input: Exception { byte[] fullFileContent = createFileContent(3 * 1024 * 1024 + 987654); RandomAccessFile raf = createRaf(fullFileContent); DataSource rafDataSource = new FileChannelDataSource(raf.getChannel());  ByteArrayDataSink dataSink = new ByteArrayDataSink();  int offset = 23456; int bytesToFeed = 2 * 1024 * 1024 + 12345; rafDataSource.feed(offset, bytesToFeed, dataSink);  byte[] expectedBytes = Arrays.copyOfRange(fullFileContent, offset, offset + bytesToFeed);  byte[] resultBytes = getDataSinkBytes(dataSink);  "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expectedBytes, resultBytes)
[-] pred: org. junit. Assert. assertArrayEquals ( expectedBytes, resultBytes )
************************************
[+] input: Exception { TimeInterval actual = AsyncTaskUtils.parseTimeInterval("22:30:20-04:30:40"); TimeInterval expected = new TimeInterval( LocalTime.of(22, 30, 20), LocalTime.of(4, 30, 40) ); "<AssertPlaceHolder>"; assertEquals(3600 * 6 + 20, actual.getDuration()); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: grpcClientCloseShouldWork() {  grpcSourceConfig = mock(GrpcSourceConfig.class);  GrpcClient grpcClient = new GrpcClient(grpcSourceConfig);  when(grpcSourceConfig.getEndpoint()).thenReturn("localhost"); when(grpcSourceConfig.getServicePort()).thenReturn(8080);  grpcClient.addChannel();  Channel decoratedChannel = grpcClient.getDecoratedChannel(); assertNotNull(decoratedChannel);  grpcClient.close(); decoratedChannel = grpcClient.getDecoratedChannel(); "<AssertPlaceHolder>";  }
[*] target: assertNull(decoratedChannel)
[-] pred: org. junit. Assert. assertNull ( decoratedChannel )
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleRegexMisMatch2WithSubjectAndResourceAndActionAndEnvironment() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "2."); subject.put("userId", "123457"); subject.put("verify_userId", "12345[6|7]");  Map<String, String> resource = new HashMap<>(); resource.put("aal", "10"); resource.put("verify_aal", ".0"); resource.put("userId", "1111"); resource.put("verify_userId", "1111");  Map<String, String> action = new HashMap<>(); resource.put("aal", "abcd"); resource.put("verify_aal", "[a][b][c][d]"); resource.put("userId", "1111"); resource.put("verify_userId", "1111");  Map<String, String> environment = new HashMap<>(); resource.put("aal", "abcd"); resource.put("verify_aal", "[a-z]*"); resource.put("userId", "1111"); resource.put("verify_userId", "111"); Context context = new Context<>(subject, resource, action, environment, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(flag)
[-] pred: org. junit. Assert. assertFalse ( flag )
************************************
[+] input: testGetSetRemovePreferenceSuspensionEnabled() { assertTrue(preferenceManager.getPreferenceSuspensionEnabled()); preferenceManager.setPreferenceSuspensionEnabled(false); assertFalse(preferenceManager.getPreferenceSuspensionEnabled()); preferenceManager.removeAllPreferences(); assertTrue(preferenceManager.getPreferenceSuspensionEnabled()); preferenceManager.setPreferenceSuspensionEnabled(false); preferenceManager.removePreferenceSuspensionEnabled(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(preferenceManager.getPreferenceSuspensionEnabled())
[-] pred: org. junit. Assert. assertTrue ( preferenceManager. getPreferenceSuspensionEnabled ( ) )
************************************
[+] input: should_ReturnValidationError_When_NullAsEndpointNameGiven() { String validationResult = checker.check(null);  "<AssertPlaceHolder>"; assertTrue(validationResult.contains("blank")); }
[*] target: assertNotNull(validationResult)
[-] pred: org. junit. Assert. assertNotNull ( validationResult )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.fetchTopicsByCLuster(anyString())).thenReturn(new TopicList()); } TopicList topicList = mqAdminExtImpl.fetchTopicsByCLuster("DefaultCluster"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(topicList)
[-] pred: org. junit. Assert. assertNotNull ( topicList )
************************************
[+] input: createResponse() { String expect = "Digest username="Mufasa", realm="testrealm@host.com", nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093", uri="/dir/index.html", response="6629fae49393a05397450978507c4ef1", qop=auth, nc=00000001, cnonce="0a4f113b""; UsernamePasswordCredential credential = new UsernamePasswordCredential("Mufasa", "Circle Of Life"); DigestAuthenticator authenticator = new DigestAuthenticator(credential); authenticator.addServerInfoByString("Digest realm="testrealm@host.com", qop="auth", nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093""); authenticator.addClientInfo("/dir/index.html", "GET", "0a4f113b"); String actual = authenticator.createResponse(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndEmptyRule() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", ""); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
[+] input: testRandomTime() { Calendar calendar = new GregorianCalendar(); IntStream.range(0, 1 << 20) // we have 1/3 prob to get random invalid timestamp .mapToObj(i -> R.nextInt() % 3 == 0 ? generateRandomDatetime() : generateStandardDatetime()) .forEach( bs -> { Timestamp t1 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, false, true); Timestamp t2 = MySQLTimeTypeUtil.bytesToDatetime(bs, Types.TIMESTAMP, calendar, true, true); boolean eq = t1.toString().equals(t2.toString()); String errorMessage = "original = " + new String(bs) + ", t1 = " + t1.toString() + ", t2 = " + t2.toString(); if (!(t1 instanceof OriginalTimestamp)) { // If timestamp is not modified, they are equal to each other. Assert."<AssertPlaceHolder>"; } else { // If timestamp is modified, they are not equal to each other. Assert.assertTrue(errorMessage, !eq); } // anyway, we must ensure the consistency of timestamp and original bytes Assert.assertTrue( t1.getClass().getSimpleName() + ", actual = " + t1.toString() + ", original = " + new String( bs), Arrays.equals(t1.toString().getBytes(), bs)); } ); }
[*] target: assertTrue(errorMessage, eq)
[-] pred: org. junit. Assert. assertTrue ( errorMessage, eq )
************************************
[+] input: testToString() { DefaultClient client = DefaultClient.createDefault(secretId, secretKey);  String expectedStr = "DefaultClient(" + "defaultRegionCode=" + client.defaultRegionCode() + ", defaultProtocol=" + client.defaultProtocol() + ", maxAttemptCount=" + client.maxAttemptCount() + ")";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStr, client.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedStr, client. toString ( ) )
************************************
[+] input: testDisableAutoDetectClient() { OptionsMetadata options = new OptionsMetadata(new String[] {"-p p", "-i i"}); assertTrue(options.shouldAutoDetectClient());  options = new OptionsMetadata(new String[] {"-p p", "-i i", "-disable_auto_detect_client"}); "<AssertPlaceHolder>"; }
[*] target: assertFalse(options.shouldAutoDetectClient())
[-] pred: org. junit. Assert. assertFalse ( options. shouldAutoDetectClient() )
************************************
[+] input: InvalidProtocolBufferException { String protoClass = "org.raystack.dagger.consumer.TestMapMessage"; InternalSourceConfig internalSourceConfig = getInternalSourceConfigForProtoClass(protoClass); SchemaConfig schemaConfig = getSchemaConfigForProtoAndDescriptor(protoClass, TestMapMessage.getDescriptor());  JsonPayloadFunction jsonPayloadFunction = new JsonPayloadFunction(internalSourceConfig, schemaConfig);  TestMapMessage mapMessage = TestMapMessage.newBuilder() .putCurrentState("foo", "bar") .build();  DynamicMessage dynamicMessage = DynamicMessage.parseFrom(mapMessage.getDescriptor(), mapMessage.toByteArray()); RowManager rowManager = getRowManagerForMessage(dynamicMessage);  String expectedJsonPayload = "{"order_number":"","current_state":[{"key":"foo","value":"bar"}]}"; String actualJsonPayload = (String) jsonPayloadFunction.getResult(rowManager);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonPayload, actualJsonPayload)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonPayload, actualJsonPayload )
************************************
[+] input: testGenerate() { String generatedName = ChineseNameGenerator.getInstance().generate(); "<AssertPlaceHolder>"; System.err.println(generatedName); }
[*] target: assertNotNull(generatedName)
[-] pred: org. junit. Assert. assertNotNull ( generatedName )
************************************
[+] input: clearEmptyPaths_EmptyMap_ShouldReturnTrue() { Map<String, Object> map = new HashMap<>(); boolean result = Util.clearEmptyPaths(map); // Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: shouldDeleteValueAndReturnAsJsonString() { JsonDelete jsonDelete = new JsonDelete(); String jsonEvent = "{"k1":"v1","k2":"v2"}"; String expectedJsonEvent = "{"k1":"v1"}"; String jPath = "$.k2"; String actual = jsonDelete.eval(jsonEvent, jPath); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonEvent, actual)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonEvent, actual )
************************************
[+] input: hasTypeShouldBeFalseWhenTypeIsNull() { HttpSourceConfig httpSourceConfig = new HttpSourceConfig("", "", "", "", "", "", "", null, "", false, null, "", new HashMap<>(), new HashMap<>(), metricId, false); "<AssertPlaceHolder>"; }
[*] target: assertFalse(httpSourceConfig.hasType())
[-] pred: org. junit. Assert. assertFalse ( httpSourceConfig. hasType() )
************************************
[+] input: shouldReturnFalseIfEnumFieldDescriptorIsPassed() { Descriptors.FieldDescriptor enumFieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("service_type"); RepeatedEnumHandler repeatedEnumHandler = new RepeatedEnumHandler(enumFieldDescriptor);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(repeatedEnumHandler.canHandle())
[-] pred: org. junit. Assert. assertFalse ( repeatedEnumHandler. canHandle() )
************************************
[+] input: testRequestValidFrame() { int partNum = diskSpaceManager.allocPart(1);  byte[] expected = new byte[] { (byte) 0xDE, (byte) 0xAD, (byte) 0xBE, (byte) 0xEF }; byte[] actual = new byte[4];  BufferFrame frame1 = bufferManager.fetchNewPageFrame(partNum); frame1.writeBytes((short) 67, (short) 4, expected); frame1.unpin();  assertSame(frame1, frame1.requestValidFrame()); frame1.unpin();  // force a eviction bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin(); bufferManager.fetchNewPageFrame(partNum).unpin();  assertFalse(frame1.isValid());  BufferFrame frame2 = frame1.requestValidFrame(); assertNotSame(frame1, frame2); frame2.readBytes((short) 67, (short) 4, actual); frame2.unpin();  "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expected, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expected, actual )
************************************
[+] input: selectByPrimaryKey() { final MysqlUserEntity mysqlUserEntity = BraveSql.build(MysqlUserEntity.class).selectByPrimaryKey(1); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
[+] input: testInvalidSelectionViaButton() { m_group.selectButton(new AbstractRadioButton<Long>() { }); "<AssertPlaceHolder>"; }
[*] target: assertNull(m_group.getSelectedButton())
[-] pred: org. junit. Assert. assertNull ( m_group. getSelectedButton() )
************************************
[+] input: shouldReturnDefaultTimestampRowDuringTransformIfSimpleGroupDoesNotContainField() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(INT64).named("some-other-field") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema);  TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor); Row actualRow = (Row) timestampHandler.transformFromParquet(simpleGroup);  Row expectedRow = Row.of(0L, 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
[+] input: filteredListSizeIsCorrect2() { int k = 5; // instantiate random filter with parameter k KRandomFilter filter = new KRandomFilter(k); // call filter method to obtain filtered list List<MutationInstance> filteredList = filter.filterMutants(toFilter); // filtered list should be of size k "<AssertPlaceHolder>"; }
[*] target: assertEquals(k, filteredList.size())
[-] pred: org. junit. Assert. assertEquals ( k, filteredList. size ( ) )
************************************
[+] input: testToString() { String expectedStr = "BaseRequest(" + "regionCode=" + regionCode + ", protocol=" + protocol + ", domain=" + domain + ", productCode=" + productCode + ", uriPattern=" + uriPattern + ", method=" + method + ", fallbackHttp=null" + ")"; BaseRequest<?> request = createRequestWithFluentApi();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStr, request.toString())
[-] pred: org. junit. Assert. assertEquals ( expectedStr, request. toString ( ) )
************************************
[+] input: testCustomEChartsSerializer() { EChartsSerializer serializer = new EChartsSerializer(new CustomObjectAdapter()); Object object = new CustomObject("name"); JsonElement actual = serializer.toJsonTree(object); JsonElement expected = JsonParser.parseString("'name'"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldNotFilterUnfinishedFuture() { Future<Long> future = Mockito.mock(Future.class); LocalFileMetadata localFileMetadata = Mockito.mock(LocalFileMetadata.class); FirehoseInstrumentation firehoseInstrumentation = Mockito.mock(FirehoseInstrumentation.class); BlobStorageWriterFutureHandler handler = new BlobStorageWriterFutureHandler(future, localFileMetadata, firehoseInstrumentation); Mockito.when(future.isDone()).thenReturn(false); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(handler.isFinished())
[-] pred: org. junit. Assert. assertFalse ( handler. isFinished() )
************************************
[+] input: testAppendFetch() { LogRecord expected = new MasterLogRecord(1234);  logManager.appendToLog(expected); LogRecord record = logManager.fetchLogRecord(0);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, record)
[-] pred: org. junit. Assert. assertEquals ( expected, record )
************************************
[+] input: testExecutionSkippedNotValid() { NetworkTask task = getNetworkTask(); task = networkTaskDAO.insertNetworkTask(task); networkTaskDAO.updateNetworkTaskRunning(task.getId(), true); task.setSchedulerId(task.getSchedulerId() + 1); Intent intent = new Intent(); intent.putExtras(task.toBundle()); broadcastReceiver.onReceive(TestRegistry.getContext(), intent); List<LogEntry> entries = logDAO.readAllLogsForNetworkTask(task.getId()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, entries.size())
[-] pred: org. junit. Assert. assertEquals ( 0, entries. size ( ) )
************************************
[+] input: testNull() { Mask m = new Mask(); "<AssertPlaceHolder>"; }
[*] target: assertNull(m.convert(null))
[-] pred: org. junit. Assert. assertNull ( m. convert ( null ) )
************************************
[+] input: createEsJsonWebKeySetJson() { String jwkJson = JwkUtil.createEsJsonWebKeySetJson("jap-jwks-keyid", TokenSigningAlg.ES256); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(jwkJson)
[-] pred: org. junit. Assert. assertNotNull ( jwkJson )
************************************
[+] input: FileNotFoundException { IatClient iatClient = new IatClient.Builder() .signature("123456", apiKey, apiSecret) .build(); File file = new File(resourcePath + filePath); iatClient.send(file, new AbstractIatWebSocketListener() { @Override public void onSuccess(WebSocket webSocket, IatResponse iatResponse) { Assert."<AssertPlaceHolder>"; Assert.assertNotNull(iatResponse.getMessage());  Assert.assertNotEquals(iatResponse.getCode(), 101); Assert.assertEquals(iatResponse.getCode(), 10313); iatClient.closeWebsocket(); }  @Override public void onFail(WebSocket webSocket, Throwable t, Response response) { } }); try { Thread.sleep(5000); } catch (InterruptedException e) { System.out.println(e.getMessage()); } }
[*] target: assertNotNull(iatResponse)
[-] pred: org. junit. Assert. assertNotNull ( iatResponse )
************************************
[+] input: shouldNotBeAbleToBuildSourceIfSourceDetailsContainsMultipleBackToBackSources() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_CONSUMER, SourceType.UNBOUNDED), new SourceDetails(SourceName.KAFKA_CONSUMER, SourceType.UNBOUNDED)}); FlinkKafkaConsumerDaggerSource daggerSource = new FlinkKafkaConsumerDaggerSource(streamConfig, configuration, daggerDeserializer);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(daggerSource.canBuild())
[-] pred: org. junit. Assert. assertFalse ( daggerSource. canBuild ( ) )
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  m_transaction.registerMember(new TestTransactionMember(exception));  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); return "result"; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction); inOrder.verify(m_transaction, times(1)).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
[+] input: InterruptedException { int dataBlockSize = 677; int dataBlocks = 100; int bufferSize = 2 * 1024; //noinspection ConstantConditions assert bufferSize > dataBlockSize;  CommunicationPipe p = new CommunicationPipe(bufferSize); InputStream in = p.getInputStream(); OutputStream out = p.getOutputStream();  byte[] sourceBytes = new byte[dataBlockSize]; new Random().nextBytes(sourceBytes);  CountDownLatch completed = new CountDownLatch(2); new Thread(() -> { for (int i = 0; i < dataBlocks; i++) { try { out.write(sourceBytes); } catch (Exception e) { e.printStackTrace(); return; } completed.countDown(); } }).start();  new Thread(() -> { byte[] readBytes = new byte[dataBlockSize]; try { while (in.available() > dataBlockSize) { int read = in.read(readBytes); Assert."<AssertPlaceHolder>"; Assert.assertArrayEquals(sourceBytes, readBytes); } }catch (Exception e) { e.printStackTrace(); return; } completed.countDown();  }).start();  completed.await(); }
[*] target: assertEquals(dataBlockSize, read)
[-] pred: org. junit. Assert. assertEquals ( dataBlockSize, read )
************************************
[+] input: shouldFetchValueForFieldForFieldDescriptorOfTypeBool() { boolean actualValue = true;  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("customer_dynamic_surge_enabled"); BooleanHandler booleanHandler = new BooleanHandler(fieldDescriptor); Object value = booleanHandler.parseObject(actualValue);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
[+] input: getInstance() { IastClassDiagram instance = IastClassDiagram.getInstance(); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(instance)
[-] pred: org. junit. Assert. assertNotNull ( instance )
************************************
[+] input: mp4MvhdBox() { byte[] expect = new byte[]{ 0x00, 0x00, 0x00, 0x6C, 0x6D, 0x76, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x5F, (byte) 0x90, 0x00, 0x01, 0x5F, (byte) 0x90, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, }; Mp4MvhdBox box = new Mp4MvhdBox(this.trackInfo); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, box.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( expect, box. toByteArray ( ) )
************************************
[+] input: testDCFactoryClass() {  /* default constructor initializes to "" */ ReplicationNetworkConfig defRnc = ReplicationNetworkConfig.createDefault(); assertEmpty(defRnc.getChannelFactoryClass());  /* property constructor initializes to "" */ Properties props = new Properties(); ReplicationNetworkConfig empRnc = ReplicationNetworkConfig.create(props); assertEmpty(empRnc.getChannelFactoryClass());  final String dummyClass = "xyz";  /* Use property constructor to set to a value */ props.setProperty(ReplicationNetworkConfig.CHANNEL_FACTORY_CLASS, dummyClass); ReplicationNetworkConfig rnc = ReplicationNetworkConfig.create(props); assertEquals(rnc.getChannelFactoryClass(), dummyClass);  /* Make sure we can clear it */ rnc.setChannelFactoryClass(""); assertEmpty(rnc.getChannelFactoryClass());  /* Make sure we can set it */ rnc.setChannelFactoryClass(dummyClass); "<AssertPlaceHolder>";  }
[*] target: assertEquals(rnc.getChannelFactoryClass(), dummyClass)
[-] pred: org. junit. Assert. assertEquals ( rnc. getChannelFactoryClass(), dummyClass )
************************************
[+] input: testDCFactoryParams() {  /* default constructor initializes to "" */ ReplicationNetworkConfig defRnc = ReplicationNetworkConfig.createDefault(); assertEmpty(defRnc.getChannelFactoryParams());  /* property constructor initializes to "" */ Properties props = new Properties(); ReplicationNetworkConfig empRnc = ReplicationNetworkConfig.create(props); assertEmpty(empRnc.getChannelFactoryParams());  final String dummyParams = "xyz";  /* Use property constructor to set to a value */ props.setProperty(ReplicationNetworkConfig.CHANNEL_FACTORY_PARAMS, dummyParams); ReplicationNetworkConfig rnc = ReplicationNetworkConfig.create(props); assertEquals(rnc.getChannelFactoryParams(), dummyParams);  /* Make sure we can clear it */ rnc.setChannelFactoryParams(""); assertEmpty(rnc.getChannelFactoryParams());  /* Make sure we can set it */ rnc.setChannelFactoryParams(dummyParams); "<AssertPlaceHolder>";  }
[*] target: assertEquals(rnc.getChannelFactoryParams(), dummyParams)
[-] pred: org. junit. Assert. assertEquals ( rnc. getChannelFactoryParams ( ), dummyParams )
************************************
[+] input: SQLException { addUniqueKeys("order_number"); Message message = new Message("key".getBytes(), "msg".getBytes(), "topic1", 0, 100); QueryTemplate queryTemplate = new QueryTemplate(jdbcSinkConfig, protoToFieldMapper); String actualSql = queryTemplate.toQueryString(message);  String expectedSql = "INSERT INTO table ( feedback_rating,event_timestamp,order_number ) values ( '5', 'ts1', 'order_1' ) ON CONFLICT ( order_number ) DO UPDATE SET ( feedback_rating,event_timestamp ) = ('5', 'ts1')";  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(actualSql, expectedSql)
[-] pred: org. junit. Assert. assertEquals ( actualSql, expectedSql )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x06, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x03}; MbWriteSingleRegisterResponse mb = new MbWriteSingleRegisterResponse(); mb.setFunctionCode(EMbFunctionCode.WRITE_SINGLE_REGISTER); mb.setAddress(1); mb.setValue(new byte[]{(byte) 0x00, (byte) 0x03}); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: Exception { when(redisTemplate.execute(any(RedisCallback.class))).thenAnswer( invocation -> a ); String result = redisCache.hget("key", "field", String.class); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(a, result)
[-] pred: org. junit. Assert. assertEquals ( a, result )
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction);  inOrder.verify(m_transaction, never()).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
[+] input: testRequestAgain() {  RandomManager manager = new RandomManager(300); manager.getRandom("test"); boolean thrown = false; try { manager.getRandom("test"); } catch (IllegalArgumentException e) { thrown = true; } "<AssertPlaceHolder>";  }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
[+] input: tryLockUnlock_conditionNotMet() { final AttributeValue onboardingId = AttributeValue.builder().s(ONBOARDING_ID).build(); doReturn(ScanResponse.builder().items(List.of(Map.of("id", onboardingId))).build()) .when(mockDdb).scan(any(ScanRequest.class));  doThrow(ConditionalCheckFailedException.builder().build()).when(mockDdb).updateItem(any(UpdateItemRequest.class));  boolean success = testLock.tryLockUnlock(TEST_CONTEXT, true); "<AssertPlaceHolder>"; }
[*] target: assertFalse(success)
[-] pred: org. junit. Assert. assertFalse ( success )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x06, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x03}; MbWriteSingleRegisterRequest mb = new MbWriteSingleRegisterRequest(); mb.setFunctionCode(EMbFunctionCode.WRITE_SINGLE_REGISTER); mb.setAddress(1); mb.setValue(3); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: generateIdTokenTokenAuthorizationResponse() { String url = idsAuthorizationProvider.generateIdTokenTokenAuthorizationResponse(userInfo, idsRequestParam, clientDetail, issuer); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(2, obj.size()); Assert.assertTrue(obj.containsKey("access_token")); Assert.assertTrue(obj.containsKey("id_token")); }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
[+] input: testDecompress_umlauts() { String original = CHARACTERS.repeat(100000); String decompressed = StringUtility.decompress(StringUtility.compress(original));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(original, decompressed)
[-] pred: org. junit. Assert. assertEquals ( original, decompressed )
************************************
[+] input: canDeserializeSourceAsArray() { String json = "{"query":{"match_all":{}},"_source":["_id"],"size":1}";  SearchRequest searchRequest = fromJson(json, SearchRequest._DESERIALIZER);  SourceConfig _source = searchRequest.source(); assertNotNull(_source); assertTrue(_source.isFilter());  SourceFilter filter = _source.filter(); assertNotNull(filter);  List<String> includes = filter.includes(); "<AssertPlaceHolder>"; assertEquals("_id", includes.get(0));  assertTrue(filter.excludes().isEmpty()); }
[*] target: assertEquals(1, includes.size())
[-] pred: org. junit. Assert. assertEquals ( 1, includes. size ( ) )
************************************
[+] input: testDisablePgCatalogReplacements() { OptionsMetadata options = new OptionsMetadata(new String[] {"-p p", "-i i"}); assertTrue(options.replacePgCatalogTables());  options = new OptionsMetadata(new String[] {"-p p", "-i i", "-disable_pg_catalog_replacements"}); "<AssertPlaceHolder>"; }
[*] target: assertFalse(options.replacePgCatalogTables())
[-] pred: org. junit. Assert. assertFalse ( options. replacePgCatalogTables ( ) )
************************************
[+] input: testSha256() { String str = "a-string-to-hash"; String expectedValue = "47bd5d1c4ab68a55391f0b5304481eb11cb6a7a33066bb8d69c114a69254fdb2";  String actualValue = SignatureMethodEnum.SHA256.calcSign(str);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, actualValue )
************************************
[+] input: testEqualsHashCodeFixtureEntity() { EntityFixtureDo entity1 = BEANS.get(EntityFixtureDo.class) .withId("foo") .withOtherEntities(BEANS.get(OtherEntityFixtureDo.class).withId("other1"), BEANS.get(OtherEntityFixtureDo.class).withId("other2")); EntityFixtureDo entity2 = BEANS.get(EntityFixtureDo.class) .withId("foo") .withOtherEntities(BEANS.get(OtherEntityFixtureDo.class).withId("other1"), BEANS.get(OtherEntityFixtureDo.class).withId("other2"));  assertEquals(entity1, entity2); "<AssertPlaceHolder>";  entity2.getOtherEntities().get(0).withId("bar"); assertNotEquals(entity1, entity2); }
[*] target: assertEquals(entity1.hashCode(), entity2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( entity1. hashCode ( ), entity2. hashCode() )
************************************
[+] input: createRsaJsonWebKeyJson() { String jwkJson = JwkUtil.createRsaJsonWebKeyJson("jap-jwks-keyid", TokenSigningAlg.RS256); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(jwkJson)
[-] pred: org. junit. Assert. assertNotNull ( jwkJson )
************************************
[+] input: shouldNotBeEmptyWhenInternalSourceExist() { ArrayList<InternalSourceConfig> internalSourceConfigs = new ArrayList<>(); internalSourceConfigs.add(new InternalSourceConfig("outputField", "value", "type", null)); defaultPostProcessorConfig = new PostProcessorConfig(null, null, internalSourceConfigs);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(defaultPostProcessorConfig.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( defaultPostProcessorConfig. isEmpty() )
************************************
[+] input: testCheckAndSet_DisableCaching() { Mockito.when(req.getPathInfo()).thenReturn("/");  BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes(StandardCharsets.UTF_8)) .withCachingAllowed(false) .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = cc.checkAndSetCacheHeaders(req, resp, obj); Assert."<AssertPlaceHolder>";  Mockito.verify(req, ANY_TIMES).getPathInfo(); Mockito.verify(req, ANY_TIMES).getAttribute("jakarta.servlet.forward.path_info"); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.CACHE_CONTROL, "private, no-store, no-cache, max-age=0"); }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
[+] input: shouldNotReturnAnyError() { LateRecordDropError lateRecordDropError = new LateRecordDropError(initContext); "<AssertPlaceHolder>"; }
[*] target: assertNull(lateRecordDropError.getCurrentException())
[-] pred: org. junit. Assert. assertNull ( lateRecordDropError. getCurrentException() )
************************************
[+] input: testHealthyAndDead() { System.setProperty(DashboardConfig.CONFIG_UNHEALTHY_MACHINE_MILLIS, "60000"); System.setProperty(DashboardConfig.CONFIG_AUTO_REMOVE_MACHINE_MILLIS, "600000"); DashboardConfig.clearCache(); MachineInfo machineInfo = new MachineInfo(); machineInfo.setHeartbeatVersion(1); machineInfo.setLastHeartbeat(System.currentTimeMillis() - 10000); assertTrue(machineInfo.isHealthy()); assertFalse(machineInfo.isDead());  machineInfo.setLastHeartbeat(System.currentTimeMillis() - 100000); assertFalse(machineInfo.isHealthy()); assertFalse(machineInfo.isDead());  machineInfo.setLastHeartbeat(System.currentTimeMillis() - 1000000); assertFalse(machineInfo.isHealthy()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(machineInfo.isDead())
[-] pred: org. junit. Assert. assertTrue ( machineInfo. isDead() )
************************************
[+] input: rtspDescribeRequestTest() { String expect = "DESCRIBE rtsp://10.3.8.202:554 RTSP/1.0\r\n" + "CSeq: 0\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Accept: application/sdp\r\n" + "\r\n"; URI uri = URI.create("rtsp://10.3.8.202:554"); RtspDescribeRequest request = new RtspDescribeRequest(uri, Collections.singletonList(ERtspAcceptContent.SDP)); request.setCSeq(0); String actual = request.toObjectString(); assertEquals(expect, actual);  expect = "DESCRIBE rtsp://10.3.8.202:554 RTSP/1.0\r\n" + "CSeq: 1\r\n" + "Authorization: Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="56d55b92e8b41aa6cc1a68a5c2e2de15"\r\n" + "User-Agent: IOT-COMMUNICATION\r\n" + "Accept: application/sdp\r\n" + "\r\n"; request = new RtspDescribeRequest(uri, Collections.singletonList(ERtspAcceptContent.SDP), this.authenticator); request.setCSeq(1); actual = request.toObjectString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: should_ReturnNoErrors_When_ValidEndpointNameGiven() { String validationResult = checker.check("ordinaryName");  "<AssertPlaceHolder>"; }
[*] target: assertNull(validationResult)
[-] pred: org. junit. Assert. assertNull ( validationResult )
************************************
[+] input: getCartShouldReturnCart() { Cart cart = shoppingCart.getCart();  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(cart)
[-] pred: org. junit. Assert. assertNotNull ( cart )
************************************
[+] input: testSubstitute_nullSql() { PreparedStatementRequest psr = new PreparedStatementRequest(null, new JSONObject(), null);  Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(psr.getSql())
[-] pred: org. junit. Assert. assertNull ( psr. getSql() )
************************************
[+] input: shouldNotReturnAnyPostProcessor() { when(configuration.getString(Constants.FLINK_SQL_QUERY_KEY, Constants.FLINK_SQL_QUERY_DEFAULT)).thenReturn("test-sql"); when(configuration.getBoolean(Constants.PROCESSOR_POSTPROCESSOR_ENABLE_KEY, Constants.PROCESSOR_POSTPROCESSOR_ENABLE_DEFAULT)).thenReturn(false); List<PostProcessor> postProcessors = PostProcessorFactory.getPostProcessors(daggerContext, stencilClientOrchestrator, columnNames, metricsTelemetryExporter);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, postProcessors.size())
[-] pred: org. junit. Assert. assertEquals ( 0, postProcessors. size ( ) )
************************************
[+] input: IOException { JandexInventoryBuilder builder = new JandexInventoryBuilder(RebuildStrategy.ALWAYS); Index index1 = builder.scanModule(builder.findIndexUri(getClass().getResource("test repository/META-INF/scout.xml"))); Index index2 = builder.scanModule(builder.findIndexUri(new URL("jar:" + getClass().getResource("test repository/test.jar_").toExternalForm() + "!/META-INF/scout.xml"))); "<AssertPlaceHolder>"; assertNotNull(index2); }
[*] target: assertNotNull(index1)
[-] pred: org. junit. Assert. assertNotNull ( index1 )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.fetchAllTopicList()).thenReturn(new TopicList()); } TopicList topicList = mqAdminExtImpl.fetchAllTopicList(); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(topicList)
[-] pred: org. junit. Assert. assertNotNull ( topicList )
************************************
[+] input: shouldReturnDefaultTimestampRowDuringTransformIfNullIsPassedToTransformFromParquet() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("event_timestamp"); TimestampHandler timestampHandler = new TimestampHandler(fieldDescriptor);  Row actualRow = (Row) timestampHandler.transformFromParquet(null);  Row expectedRow = Row.of(0L, 0); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRow, actualRow)
[-] pred: org. junit. Assert. assertEquals ( expectedRow, actualRow )
************************************
[+] input: shouldReturnEmptyBlackListRetryStatusCodesAsEmptyList() { String inputRetryStatusCodeBlacklist = ""; List<Integer> statusCodesAsList = MongoSinkClientUtil.getStatusCodesAsList(inputRetryStatusCodeBlacklist); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, statusCodesAsList.size())
[-] pred: org. junit. Assert. assertEquals ( 0, statusCodesAsList. size ( ) )
************************************
[+] input: containsNullKey() { JapCache japCache = new JapLocalCache(); boolean containsKey = japCache.containsKey(null); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(containsKey)
[-] pred: org. junit. Assert. assertFalse ( containsKey )
************************************
[+] input: shouldNotBeAbleToBuildSourceIfSourceNameIsUnsupported() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.PARQUET_SOURCE, SourceType.UNBOUNDED)}); KafkaDaggerSource daggerSource = new KafkaDaggerSource(streamConfig, configuration, daggerDeserializer);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(daggerSource.canBuild())
[-] pred: org. junit. Assert. assertFalse ( daggerSource. canBuild ( ) )
************************************
[+] input: testVerifyRequestRequestWithSomeDataAndRuleMatch() { Response response = new Response(); Map<String, String> subject = new HashMap<>(); subject.put("aal", "25"); subject.put("verify_aal", "25"); Context context = new Context<>(subject, null, null, null, null, response, null, null);  boolean flag = context.verifyRequest();  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
[+] input: readSE() { byte[] data = new byte[]{0x0F, 0x00}; ExpGolomb expGolomb = new ExpGolomb(data); int actual = expGolomb.readSE(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(15, actual)
[-] pred: org. junit. Assert. assertEquals ( 15, actual )
************************************
[+] input: URISyntaxException { BatchRequestCreator batchRequestCreator = new BatchRequestCreator(firehoseInstrumentation, uriBuilder, headerBuilder, HttpSinkRequestMethodType.PATCH, jsonBody, httpSinkConfig); List<HttpEntityEnclosingRequestBase> requests = batchRequestCreator.create(messages, requestEntityBuilder);  "<AssertPlaceHolder>"; assertEquals(HttpSinkRequestMethodType.PATCH.toString(), requests.get(0).getMethod()); verify(firehoseInstrumentation, times(1)).logDebug("\nRequest URL: {}\nRequest headers: {}\nRequest content: {}\nRequest method: {}", uriBuilder.build(), headerBuilder.build(), jsonBody.serialize(messages), HttpSinkRequestMethodType.PATCH); }
[*] target: assertEquals(1, requests.size())
[-] pred: org. junit. Assert. assertEquals ( 1, requests. size ( ) )
************************************
[+] input: canDecorateShouldBeFalse() { InitializationDecorator initializationDecorator = new InitializationDecorator(new ColumnNameManager(new String[0], new ArrayList<>())); "<AssertPlaceHolder>"; }
[*] target: assertFalse(initializationDecorator.canDecorate())
[-] pred: org. junit. Assert. assertFalse ( initializationDecorator. canDecorate() )
************************************
[+] input: shouldReturnNullIfPythonFilesConfigIsNotGiven() { String pythonJsonConfig = "{"PYTHON_FN_EXECUTION_ARROW_BATCH_SIZE": "10000", "PYTHON_FN_EXECUTION_BUNDLE_SIZE": "100000", "PYTHON_FN_EXECUTION_BUNDLE_TIME": "1000"}";  when(configuration.getString(Constants.PYTHON_UDF_CONFIG, "")).thenReturn(pythonJsonConfig); PythonUdfConfig pythonUdfConfig = PythonUdfConfig.parse(configuration);  Assert.assertNull(pythonUdfConfig.getPythonFiles()); Assert."<AssertPlaceHolder>"; Assert.assertNull(pythonUdfConfig.getPythonRequirements()); }
[*] target: assertNull(pythonUdfConfig.getPythonArchives())
[-] pred: org. junit. Assert. assertNull ( pythonUdfConfig. getPythonArchives ( ) )
************************************
[+] input: testIsParallelizable_unique() { RegexStringGenerator regexStringGenerator = new RegexStringGenerator(); regexStringGenerator.setUnique(true); "<AssertPlaceHolder>"; }
[*] target: assertFalse(regexStringGenerator.isParallelizable())
[-] pred: org. junit. Assert. assertFalse ( regexStringGenerator. isParallelizable() )
************************************
[+] input: toByteArray() { RequestItem requestItem = new RequestItem(); requestItem.setSpecificationType((byte)0x12); requestItem.setLengthOfFollowing((byte)0x10); requestItem.setSyntaxId(ESyntaxID.S7ANY); requestItem.setVariableType(EParamVariableType.BYTE); requestItem.setCount(7); requestItem.setDbNumber(7); requestItem.setArea(EArea.DATA_BLOCKS); requestItem.setByteAddress(3); requestItem.setBitAddress(1); byte[] actual = requestItem.toByteArray(); byte[] expect = new byte[]{(byte) 0x12, (byte) 0x10, (byte) 0x10, (byte) 0x02, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x07, (byte) 0x84, (byte) 0x00, (byte) 0x00, (byte) 0x19}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: generateNoneAuthorizationResponse() { String url = idsAuthorizationProvider.generateNoneAuthorizationResponse(idsRequestParam); System.out.println(url); Assert."<AssertPlaceHolder>"; String params = url.substring(idsRequestParam.getRedirectUri().length() + 1); Map<String, String> obj = ObjectUtils.parseStringToMap(params); Assert.assertEquals(1, obj.size()); Assert.assertTrue(obj.containsKey("state")); }
[*] target: assertNotNull(url)
[-] pred: org. junit. Assert. assertNotNull ( url )
************************************
[+] input: SQLException { Mockito.when(mockResults.getString("urilocation")).thenReturn(""); GreenplumExternalTable table = new GreenplumExternalTable(mockSchema, mockResults); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(table.getUriLocations().isEmpty())
[-] pred: org. junit. Assert. assertTrue ( table. getUriLocations ( ). isEmpty ( ) )
************************************
[+] input: testSetState() { City city = new City(new State(), "Name", "Addition", new String[] {"foo", "foo", "foo"}, "Area Code"); city.setState(new State()); "<AssertPlaceHolder>"; }
[*] target: assertNull(city.getCountry())
[-] pred: org. junit. Assert. assertNull ( city. getCountry() )
************************************
[+] input: SQLException { VtResultSet input = TestResult.makeTestResult(TestResult.makeTestFields("col|count(*)", "varbinary|decimal"), "a|1", "a|0"); FakePrimitive fp = new FakePrimitive(Lists.newArrayList(input));  AbstractAggregateGen4.AggregateParams aggr1 = new AbstractAggregateGen4.AggregateParams(Engine.AggregateOpcodeG4.AggregateSum, 1); GroupByParams groupByParams = new GroupByParams(); groupByParams.setKeyCol(0); OrderedAggregateGen4Engine oa = new OrderedAggregateGen4Engine(false, Lists.newArrayList(aggr1), false, 0, Lists.newArrayList(groupByParams), null, fp);  Query.Field field1 = Query.Field.newBuilder().setName("col").setType(Query.Type.VARBINARY).build(); Query.Field field2 = Query.Field.newBuilder().setName("count(*)").setType(Query.Type.DECIMAL).build();  VtResultValue value1 = new VtResultValue("a", Query.Type.VARBINARY); VtResultValue value2 = new VtResultValue(BigDecimal.valueOf(1), Query.Type.DECIMAL); List<VtResultValue> vtResultValues = Lists.newArrayList(value1, value2); List<List<VtResultValue>> rows = new ArrayList<>(); rows.add(vtResultValues); VtResultSet result = new VtResultSet(new Query.Field[] {field1, field2}, rows);  VtResultSet res = (VtResultSet) oa.execute(VtContext.background(), null, null, false).getVtRowList();  Assert."<AssertPlaceHolder>";  fp.rewind(); }
[*] target: assertEquals(result, res)
[-] pred: org. junit. Assert. assertEquals ( result, res )
************************************
[+] input: shouldNotBeAbleToBuildSourceIfDeserializerTypeIsUnsupported() { DaggerDeserializer<Row> unsupportedDeserializer = Mockito.mock(SimpleGroupDeserializer.class); when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_CONSUMER, SourceType.UNBOUNDED)}); FlinkKafkaConsumerDaggerSource daggerSource = new FlinkKafkaConsumerDaggerSource(streamConfig, configuration, unsupportedDeserializer);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(daggerSource.canBuild())
[-] pred: org. junit. Assert. assertFalse ( daggerSource. canBuild ( ) )
************************************
[+] input: Exception { List<Entity> entities = AllSheetsXLSEntityIterator.parseAll(IMPORT_XLS, null, false); "<AssertPlaceHolder>"; assertProduct(PROD1, entities.get(0)); assertProduct(PROD2, entities.get(1)); assertPerson(PERSON1, entities.get(2)); }
[*] target: assertEquals(3, entities.size())
[-] pred: org. junit. Assert. assertEquals ( 3, entities. size ( ) )
************************************
[+] input: no_DoTable_No_DoDb_Hit_IgnoreDb_Hit_WildDoTable_Ignore() { ReplicaMeta replicaMeta = new ReplicaMeta(); replicaMeta.setDoDb(""); replicaMeta.setIgnoreDb("full_src_1, dutf8"); replicaMeta.setDoTable(""); replicaMeta.setIgnoreTable("full_src_1.t1, full_src_1.t2"); replicaMeta.setWildDoTable("d%.tb\\_charset%, d%.col\\_charset%"); replicaMeta.setWildIgnoreTable("d%.tb\\_charset%, d%.col\\_charset%"); replicaMeta.setRewriteDb(""); printChangeFilterSql(replicaMeta);  // init ReplicaFilter filter = new ReplicaFilter(replicaMeta); filter.init();  DefaultRowChange rowChange = new DefaultRowChange(); rowChange.setAction(DBMSAction.INSERT);  // Hit Replicate_Do_Table rowChange.setSchema("dutf8"); rowChange.setTable("tb_charset_gbk"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(filter.ignoreEvent(rowChange))
[-] pred: org. junit. Assert. assertTrue ( filter. ignoreEvent ( rowChange ) )
************************************
[+] input: checkTokenNullContext() { Map<String, Object> map = JapAuthentication.checkToken("aaa"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(map)
[-] pred: org. junit. Assert. assertNull ( map )
************************************
[+] input: TestPlugin() { Conversable conversable = new FakeConversable(); ConversationContext context = new ConversationContext(null, conversable, new HashMap<Object, Object>()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(null, context.getPlugin())
[-] pred: org. junit. Assert. assertEquals ( null, context. getPlugin() )
************************************
[+] input: shouldReturnParentPostProcessor() { when(configuration.getString(Constants.FLINK_SQL_QUERY_KEY, Constants.FLINK_SQL_QUERY_DEFAULT)).thenReturn("test-sql"); when(configuration.getBoolean(Constants.PROCESSOR_POSTPROCESSOR_ENABLE_KEY, Constants.PROCESSOR_POSTPROCESSOR_ENABLE_DEFAULT)).thenReturn(true);  List<PostProcessor> postProcessors = PostProcessorFactory.getPostProcessors(daggerContext, stencilClientOrchestrator, columnNames, metricsTelemetryExporter);  "<AssertPlaceHolder>"; assertEquals(ParentPostProcessor.class, postProcessors.get(0).getClass()); }
[*] target: assertEquals(1, postProcessors.size())
[-] pred: org. junit. Assert. assertEquals ( 1, postProcessors. size ( ) )
************************************
[+] input: testEmptyArrayList() { ArrayList<Integer> list = CollectionUtility.emptyArrayList(); "<AssertPlaceHolder>"; // Test that it is a mutable list. assertTrue(list.isEmpty()); list.add(1); assertFalse(list.isEmpty()); }
[*] target: assertNotNull(list)
[-] pred: org. junit. Assert. assertNotNull ( list )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x05, (byte) 0x00, (byte) 0xAC, (byte) 0xFF, (byte) 0x00}; MbWriteSingleCoilRequest mb = new MbWriteSingleCoilRequest(); mb.setFunctionCode(EMbFunctionCode.WRITE_SINGLE_COIL); mb.setAddress(172); mb.setValue(true); assertEquals(5, mb.byteArrayLength()); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: IOException { ClassLoader classLoader = this.getClass().getClassLoader(); URL resource = classLoader.getResource("test.json"); File f = new File(resource.getPath()); String s = readString(f); StructuredDataEncoder structuredData = new StructuredDataEncoder(s); byte[] msgHash = structuredData.hashStructuredData(); String ownerAddress = "0xE10AA6471B33845FaE88DD7bBeB63c250DA3a639"; String sig = "4f4e0dec5f1d6f99460fea04bc374d96a495d96c0c455d4731902cdbf95525fc77c66ee08346466fe188f521c196f0f06bebb8d1a8df44cb68792514ca24808e2a"; byte[] signatureBytes = Hex.decode(sig); byte v = signatureBytes[64]; Sign.SignatureData sd = new Sign.SignatureData( v, Arrays.copyOfRange(signatureBytes, 0, 32), Arrays.copyOfRange(signatureBytes, 32, 64));  boolean verified = false; for (int i = 0; i < 4; i++) { BigInteger publicKey = Sign.recoverFromSignature( (byte) i, new ECDSASignature( new BigInteger(1, sd.getR()), new BigInteger(1, sd.getS())), msgHash);  if (publicKey != null) { String addressRecovered = Keys.toChecksumAddress(Keys.getAddress(publicKey)); if (addressRecovered.equals(ownerAddress)) { verified = true; break; } } } "<AssertPlaceHolder>"; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
[+] input: lrcTest1() { byte[] src = new byte[]{0x01, 0x03, 0x00, 0x00, 0x00, 0x14}; boolean actual = LRCUtil.lrc(src, (byte) 0xE8); "<AssertPlaceHolder>"; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
[+] input: shouldBeTrueWhenTransformerSourceExists() { Map<String, Object> transformationArguments = new HashMap<>(); transformationArguments.put("keyValue", "key"); transformConfigs.add(new TransformConfig("test.postprocessor.XTransformer", transformationArguments)); defaultPostProcessorConfig = new PostProcessorConfig(null, transformConfigs, defaultInternalSource); "<AssertPlaceHolder>"; }
[*] target: assertTrue(defaultPostProcessorConfig.hasTransformConfigs())
[-] pred: org. junit. Assert. assertTrue ( defaultPostProcessorConfig. hasTransformConfigs ( ) )
************************************
[+] input: Exception { String name = "test_force"; FastKV kv1 = new FastKV.Builder(TestHelper.DIR, name).build(); long newTime = System.currentTimeMillis() ^ System.nanoTime();  kv1.putLong("time", newTime); kv1.force();  File aFile = new File(TestHelper.DIR, name + ".kva"); RandomAccessFile accessFile = new RandomAccessFile(aFile, "r"); ByteBuffer buffer = ByteBuffer.allocate(26); buffer.order(ByteOrder.LITTLE_ENDIAN); accessFile.read(buffer.array(), 0, 26); long t = buffer.getLong(18); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(newTime, t)
[-] pred: org. junit. Assert. assertEquals ( newTime, t )
************************************
[+] input: rangeQueryPointTest() { TreeIndex<Point> treeIndex = new STRTreeIndex<>(); treeIndex.insert(points);  List<Point> result = treeIndex.query(new Envelope(110, 120, 30, 40)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(2, result.size())
[-] pred: org. junit. Assert. assertEquals ( 2, result. size ( ) )
************************************
[+] input: should_ReturnError_When_GivenNull_BeanProperty() { // Property 'title' is null Bean bean = new Bean();  String error = explicitNullableTypeChecker.checkValueForType(bean, Bean.class, false);  Assert."<AssertPlaceHolder>"; Assert.assertTrue(error.contains("null")); Assert.assertTrue(error.contains("Bean")); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
[+] input: InterruptedException {  Field registedAppField = null; try { registedAppField = MeshRegistry.class.getDeclaredField("registedApp"); registedAppField.setAccessible(true); } catch (NoSuchFieldException e) { e.printStackTrace(); }  Boolean registedAppValue = null; // in case of effected by other case. try { registedAppValue = (Boolean) registedAppField.get(registry); registedAppField.set(registry, false); } catch (IllegalAccessException e) { e.printStackTrace(); }  ServerConfig serverConfig = new ServerConfig() .setProtocol("bolt") .setHost("0.0.0.0") .setPort(12200); ProviderConfig<?> provider = new ProviderConfig(); provider.setInterfaceId("com.alipay.xxx.TestService") .setUniqueId("unique123Id") .setApplication(new ApplicationConfig().setAppName("test-server")) .setProxy("javassist") .setRegister(true) .setRegistry(registryConfig) .setSerialization("hessian2") .setServer(serverConfig) .setWeight(222) .setTimeout(3000);  registry.register(provider); Thread.sleep(3000);  try { registedAppValue = (Boolean) registedAppField.get(registry); } catch (IllegalAccessException e) { e.printStackTrace(); }  LOGGER.info("final registedAppValue is " + registedAppValue);  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(registedAppValue)
[-] pred: org. junit. Assert. assertTrue ( registedAppValue )
************************************
[+] input: IOException { // 测试从某个指定的位置读取一次 long fileSize = localChannel.size(); ByteBuffer buffer1 = ByteBuffer.allocate(1024); ByteBuffer buffer2 = ByteBuffer.allocate(1024); int readLen1; int readLen2; CRC32 localCrc = new CRC32(); CRC32 ossCrc = new CRC32();  // 随机测试100次 for (int i = 0; i < 100; i++) { long pos = (long) (Math.random() * fileSize); readLen1 = localChannel.read(buffer1, pos); readLen2 = binlogFileReadChannel.read(buffer2, pos); Assert."<AssertPlaceHolder>"; buffer1.flip(); buffer2.flip(); localCrc.update(buffer1.array(), 0, buffer1.limit()); ossCrc.update(buffer2.array(), 0, buffer2.limit()); Assert.assertEquals(localCrc.getValue(), ossCrc.getValue()); } }
[*] target: assertEquals(readLen1, readLen2)
[-] pred: org. junit. Assert. assertEquals ( readLen1, readLen2 )
************************************
[+] input: testEqualsIgnoringDescriptor_false() { Entity alice = createAlice(); assertFalse(alice.equalsIgnoringDescriptor(null)); assertFalse(alice.equalsIgnoringDescriptor(new Entity("person", dp))); assertFalse(alice.equalsIgnoringDescriptor(createBob())); Entity otherAlice = new Entity(alice); otherAlice.set("age", 56); "<AssertPlaceHolder>"; }
[*] target: assertFalse(alice.equalsIgnoringDescriptor(otherAlice))
[-] pred: org. junit. Assert. assertFalse ( alice. equalsIgnoringDescriptor( otherAlice ) )
************************************
[+] input: testSuccessFinally() { DBConnection anotherDbConnection = mock(DBConnection.class); when(anotherDbConnection.getDatabaseName()).thenReturn("Another"); correctnessTest = new ComparisonTest( openSearchConnection, new DBConnection[] {otherDbConnection, anotherDbConnection});  DBResult openSearchResult = new DBResult( "OpenSearch", asList(new Type("firstname", "text")), asList(new Row(asList("John")))); DBResult otherDbResult = new DBResult( "Other DB", asList(new Type("firstname", "text")), asList(new Row(asList("JOHN")))); DBResult anotherDbResult = new DBResult( "Another DB", asList(new Type("firstname", "text")), asList(new Row(asList("John")))); when(openSearchConnection.select(anyString())).thenReturn(openSearchResult); when(anotherDbConnection.select(anyString())).thenReturn(anotherDbResult);  TestReport expected = new TestReport(); expected.addTestCase(new SuccessTestCase(1, "SELECT * FROM accounts")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: convertMultiLineString_NoRedundantSpaces_ShouldConvert() { String wkt = "MULTILINESTRING ((10 10, 20 20, 10 40),(40 40, 30 30, 40 20, 30 10))"; String geoJson = WktToGeoJsonConverter.toGeoJson(wkt); String expectedGeoJson = "{"type":"MultiLineString", "coordinates":" + " [[[10,10],[20,20],[10,40]],[[40,40],[30,30],[40,20],[30,10]]]}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedGeoJson, geoJson)
[-] pred: org. junit. Assert. assertEquals ( expectedGeoJson, geoJson )
************************************
[+] input: Exception { String prefix = LogManagerPropertiesTest.class.getName(); Properties parent = new Properties(); LogManagerProperties mp = new LogManagerProperties(parent, prefix); String key = "key"; Object value = TimeUnit.MILLISECONDS; assertNull(mp.put(key, value)); Object newValue = TimeUnit.NANOSECONDS; assertEquals(value, mp.put(key, newValue)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(newValue, mp.get(key))
[-] pred: org. junit. Assert. assertEquals ( newValue, mp. get( key ) )
************************************
[+] input: testIsReplacePgCatalogTables_defaultTrue() { OptionsMetadata optionsMetadata = mock(OptionsMetadata.class); when(optionsMetadata.replacePgCatalogTables()).thenReturn(true); SessionState state = new SessionState( ImmutableMap.of( "spanner.replace_pg_catalog_tables", new PGSetting("spanner", "replace_pg_catalog_tables")), optionsMetadata); "<AssertPlaceHolder>"; }
[*] target: assertTrue(state.isReplacePgCatalogTables())
[-] pred: org. junit. Assert. assertTrue ( state. isReplacePgCatalogTables ( ) )
************************************
[+] input: Exception { ConnectionPoolDataSource dataSource = dataSourceFactory.createConnectionPoolDataSource(null); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
[+] input: shouldHaveError() { ValidException validException = new ValidException(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(validException.hasException())
[-] pred: org. junit. Assert. assertTrue ( validException. hasException() )
************************************
[+] input: shouldNotProvideJsonDeserializerWhenSchemaTypeIsUnsupported() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.KAFKA_SOURCE, SourceType.UNBOUNDED)}); when(streamConfig.getDataType()).thenReturn("PROTO");  JsonDeserializerProvider provider = new JsonDeserializerProvider(streamConfig);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(provider.canProvide())
[-] pred: org. junit. Assert. assertFalse ( provider. canProvide() )
************************************
[+] input: interpolationFirst() { createCueFile("'\\(123)b'"); var literal = findTypedElement(CueStringLiteral.class); var ranges = CueMultiHostInjector.findInjectionRanges(literal);  var expected = Arrays.asList( new InjectionData(TextRange.create(1, 1), null, null), new InjectionData(TextRange.create(7, 8), "\\(123)", null)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, ranges)
[-] pred: org. junit. Assert. assertEquals ( expected, ranges )
************************************
[+] input: createResponse3() { String expect = "Digest username="admin", realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", uri="rtsp://10.3.8.202:554", response="876fcfac745c91bb7dd89faa660891ea""; UsernamePasswordCredential credential = new UsernamePasswordCredential("admin", "12345"); DigestAuthenticator authenticator = new DigestAuthenticator(credential); authenticator.addServerInfoByString("Digest realm="IP Camera(10789)", nonce="6b9a455aec675b8db81a9ceb802e4eb8", stale="FALSE""); authenticator.addClientInfo("rtsp://10.3.8.202:554", "DESCRIBE"); String actual = authenticator.createResponse(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: getValue() { boolean b = BooleanUtil.getValue((byte) 0x80, 7); assertTrue(b); b = BooleanUtil.getValue((byte) 0x80, 6); "<AssertPlaceHolder>"; }
[*] target: assertFalse(b)
[-] pred: org. junit. Assert. assertFalse ( b )
************************************
[+] input: dbResultWithSameRowsInDifferentOrderShouldEqual() { DBResult result1 = DBResult.result("DB 1"); result1.addColumn("name", "VARCHAR"); result1.addRow(new Row(ImmutableList.of("test-1"))); result1.addRow(new Row(ImmutableList.of("test-2")));  DBResult result2 = DBResult.result("DB 2"); result2.addColumn("name", "VARCHAR"); result2.addRow(new Row(ImmutableList.of("test-2"))); result2.addRow(new Row(ImmutableList.of("test-1")));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(result1, result2)
[-] pred: org. junit. Assert. assertEquals ( result1, result2 )
************************************
[+] input: testSetMobile() { PhoneNumber phoneNumber = new PhoneNumber(); phoneNumber.setMobile(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(phoneNumber.isMobile())
[-] pred: org. junit. Assert. assertTrue ( phoneNumber. isMobile() )
************************************
[+] input: Exception { ProductCategory productCategory = new ProductCategory("男生专享", 2); ProductCategory result = categoryService.save(productCategory); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: selectSingle() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andEqualTo(MysqlUserEntity::getId, 1); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
[+] input: filteredListSizeIsCorrect1() { int k = 3; // instantiate random filter with parameter k KRandomFilter filter = new KRandomFilter(k); // call filter method to obtain filtered list List<MutationInstance> filteredList = filter.filterMutants(toFilter); // filtered list should be of size k "<AssertPlaceHolder>"; }
[*] target: assertEquals(k, filteredList.size())
[-] pred: org. junit. Assert. assertEquals ( k, filteredList. size ( ) )
************************************
[+] input: testCheckAndSet_EnableCaching_IfNoneMatch_true() { Mockito.when(req.getPathInfo()).thenReturn("/"); Mockito.when(req.getHeader(HttpCacheControl.ETAG)).thenReturn(null); Mockito.when(req.getHeader(HttpCacheControl.IF_NONE_MATCH)).thenReturn("W/"FooBar", W/"13-535168142"");//matching E-Tag Mockito.when(req.getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE)).thenReturn(0L);  BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes(StandardCharsets.UTF_8)) .withCachingAllowed(true) .withLastModifiedNow() .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = cc.checkAndSetCacheHeaders(req, resp, obj); Assert."<AssertPlaceHolder>";  Mockito.verify(req, ANY_TIMES).getPathInfo(); Mockito.verify(req, ANY_TIMES).getAttribute("jakarta.servlet.forward.path_info"); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.ETAG); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.IF_NONE_MATCH); Mockito.verify(req, ANY_TIMES).getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.CACHE_CONTROL, "private, max-age=0, must-revalidate"); Mockito.verify(resp, ONCE).setStatus(HttpServletResponse.SC_NOT_MODIFIED); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: shouldFetchParsedValueForFieldForFieldDescriptorOfTypeFloat() { float actualValue = 5.1f;  Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("amount_paid_by_cash"); FloatHandler floatHandler = new FloatHandler(fieldDescriptor); Object value = floatHandler.parseObject(String.valueOf(actualValue));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualValue, value)
[-] pred: org. junit. Assert. assertEquals ( actualValue, value )
************************************
[+] input: shouldNotBeEmptyWhenGrpcConfigIsPresent() { ExternalSourceConfig externalSourceConfig = new ExternalSourceConfig(null, null, null, grpc);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(externalSourceConfig.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( externalSourceConfig. isEmpty() )
************************************
[+] input: testAllocateAndReleaseMemory() { MemoryPool root = new MemoryPool("root", maxLimit, MemoryType.OTHER); long allocatedSize = 0; long maxAllocatedSize = 0L; for (int i = 0; i < allocateCount; i++) { allocatedSize += testAllocateMemory(root, false); allocatedSize += testAllocateMemory(root, true); maxAllocatedSize = Math.max(maxAllocatedSize, allocatedSize); allocatedSize -= testReleaseMemory(root, false); allocatedSize -= testReleaseMemory(root, true); Assert.assertEquals(allocatedSize, root.getMemoryUsage()); } Assert.assertEquals(allocatedSize, root.getMemoryUsage()); root.destroy(); Assert.assertEquals(0L, root.getMemoryUsage()); Assert.assertEquals(maxAllocatedSize, root.getMaxMemoryUsage()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(root.isDestoryed())
[-] pred: org. junit. Assert. assertTrue ( root. isDestoryed() )
************************************
[+] input: rtspClientPortTransportToString1() { String expect = "RTP/AVP;unicast;client_port=60802-60803"; RtspClientPortTransport transport = new RtspClientPortTransport(); transport.setProtocol("RTP/AVP"); transport.setCastMode("unicast"); transport.setRtpClientPort(60802); transport.setRtcpClientPort(60803); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, transport.toString())
[-] pred: org. junit. Assert. assertEquals ( expect, transport. toString ( ) )
************************************
[+] input: shouldFetchDefaultValueIfFieldNotInitializedWithAValueInSimpleGroup() { Descriptors.FieldDescriptor fieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("cash_amount");  /* The field is added to the schema but not assigned a value */ GroupType parquetSchema = org.apache.parquet.schema.Types.requiredGroup() .required(DOUBLE).named("cash_amount") .named("TestGroupType"); SimpleGroup simpleGroup = new SimpleGroup(parquetSchema); DoubleHandler doubleHandler = new DoubleHandler(fieldDescriptor);  Object actualValue = doubleHandler.parseSimpleGroup(simpleGroup);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0.0D, actualValue)
[-] pred: org. junit. Assert. assertEquals ( 0.0D, actualValue )
************************************
[+] input: toByteArray() { byte[] actual = new byte[]{(byte) 0x0F, (byte) 0x00, (byte) 0x13, (byte) 0x00, (byte) 0x0A}; MbWriteMultipleCoilResponse mb = new MbWriteMultipleCoilResponse(); mb.setFunctionCode(EMbFunctionCode.WRITE_MULTIPLE_COIL); mb.setAddress(19); mb.setQuantity(10); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(actual, mb.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( actual, mb. toByteArray ( ) )
************************************
[+] input: createResponse6() { UsernamePasswordCredential credential = new UsernamePasswordCredential("admin", "kilox1234"); DigestAuthenticator authenticator = new DigestAuthenticator(credential); authenticator.addServerInfoByString("Digest realm="IP Camera(G5366)", nonce="2beea68cde935c964af4993f5535d15b", stale="FALSE""); authenticator.addClientInfo("rtsp://192.168.3.142:554/h264/ch1/main/av_stream", ERtspMethod.DESCRIBE.getCode()); String expect = "Digest username="admin", realm="IP Camera(G5366)", nonce="2beea68cde935c964af4993f5535d15b", uri="rtsp://192.168.3.142:554/h264/ch1/main/av_stream", response="e89e52ddba1f60572564db63c35612b2""; String actual = authenticator.createResponse(); assertEquals(expect, actual);  authenticator.setUri("rtsp://192.168.3.142:554/h264/ch1/main/av_stream/"); authenticator.setMethod(ERtspMethod.SETUP.getCode()); expect = "Digest username="admin", realm="IP Camera(G5366)", nonce="2beea68cde935c964af4993f5535d15b", uri="rtsp://192.168.3.142:554/h264/ch1/main/av_stream/", response="593dd32ac8986b39643c69ad41861d18""; actual = authenticator.createResponse(); assertEquals(expect, actual);  //        authenticator.setUri("rtsp://192.168.3.142:554/h264/ch1/main/av_stream/"); authenticator.setMethod(ERtspMethod.PLAY.getCode()); expect = "Digest username="admin", realm="IP Camera(G5366)", nonce="2beea68cde935c964af4993f5535d15b", uri="rtsp://192.168.3.142:554/h264/ch1/main/av_stream/", response="e7d858ae3f5d1c30bcfdfa1f022ff42e""; actual = authenticator.createResponse(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: readIntTest() { ByteBuf byteBuf = Unpooled.buffer(); for (int value = Integer.MIN_VALUE; value < Integer.MAX_VALUE; value++) { byteBuf.clear(); ByteBufUtils.writeInt(byteBuf, value); int result = ByteBufUtils.readInt(byteBuf); Assert."<AssertPlaceHolder>"; } }
[*] target: assertEquals(result, value)
[-] pred: org. junit. Assert. assertEquals ( result, value )
************************************
[+] input: testRunScript_error_warn() { TextFileLocation location = new TextFileLocation("file.js", 5, 7, 6, 8); Object result = EvaluateStatement.runScript("Hello ${name}", "ftl", "warn", context, location); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: shouldReturnFalseIfRepeatedEnumFieldDescriptorIsPassed() { Descriptors.FieldDescriptor repeatedEnumFieldDescriptor = TestRepeatedEnumMessage.getDescriptor().findFieldByName("test_enums"); EnumHandler enumHandler = new EnumHandler(repeatedEnumFieldDescriptor);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(enumHandler.canHandle())
[-] pred: org. junit. Assert. assertFalse ( enumHandler. canHandle() )
************************************
[+] input: shouldReturnTypeInformation() { Descriptors.FieldDescriptor repeatedFieldDescriptor = TestBookingLogMessage.getDescriptor().findFieldByName("meta_array"); RepeatedPrimitiveHandler repeatedPrimitiveHandler = new RepeatedPrimitiveHandler(repeatedFieldDescriptor); TypeInformation actualTypeInformation = repeatedPrimitiveHandler.getTypeInformation(); TypeInformation<String[]> expectedTypeInformation = ObjectArrayTypeInfo.getInfoFor(Types.STRING); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedTypeInformation, actualTypeInformation)
[-] pred: org. junit. Assert. assertEquals ( expectedTypeInformation, actualTypeInformation )
************************************
[+] input: Exception { assertNotNull(mqAdminExtImpl); { when(defaultMQAdminExt.examineProducerConnectionInfo(anyString(), anyString())).thenReturn(new ProducerConnection()); } ProducerConnection producerConnection = mqAdminExtImpl.examineProducerConnectionInfo("group_test", "topic_test"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(producerConnection)
[-] pred: org. junit. Assert. assertNotNull ( producerConnection )
************************************
[+] input: toByteArray() { COTPData cotpData = new COTPData(); cotpData.setLength((byte) 0x11); cotpData.setPduType(EPduType.CONNECT_REQUEST); cotpData.setTpduNumber((byte) 0x01); cotpData.setLastDataUnit(true); byte[] actual = cotpData.toByteArray(); byte[] expect = {(byte) 0x11, (byte)0xE0, (byte)0x81}; "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(expect, actual)
[-] pred: org. junit. Assert. assertArrayEquals ( expect, actual )
************************************
[+] input: selectSingle4() { final DynamicSql<MysqlUserEntity> dynamicSql = DynamicSql.createDynamicSql(); dynamicSql.andIn(MysqlUserEntity::getId, Arrays.asList(1, 1, 1, 1, 1, 1)); dynamicSql.andEqualTo(MysqlUserEntity::getId, 1); dynamicSql.andEqualTo(MysqlUserEntity::getGender, "未知"); final MysqlUserEntity mysqlUserEntity = BraveSql.build(dynamicSql, MysqlUserEntity.class).selectSingle(); Assert."<AssertPlaceHolder>"; log.info("mysqlUserEntity : {}", mysqlUserEntity); }
[*] target: assertNotNull(mysqlUserEntity)
[-] pred: org. junit. Assert. assertNotNull ( mysqlUserEntity )
************************************
[+] input: Exception { final RuntimeException exception = new RuntimeException("Expected JUnit exception");  final Holder<ITransaction> actualTransaction = new Holder<>();  CallableChain<Object> chain = new CallableChain<>(); chain.add(new TransactionProcessor<>() .withCallerTransaction(null) .withTransactionScope(TransactionScope.REQUIRES_NEW)); try { chain.call(() -> { actualTransaction.setValue(ITransaction.CURRENT.get()); throw exception; }); fail(); } catch (RuntimeException e) { "<AssertPlaceHolder>"; assertSame(m_transaction, actualTransaction.getValue());  verify(m_transaction, times(1)).release();  InOrder inOrder = Mockito.inOrder(m_transaction); inOrder.verify(m_transaction, never()).commitPhase1(); inOrder.verify(m_transaction, never()).commitPhase2(); inOrder.verify(m_transaction, times(1)).rollback(); inOrder.verify(m_transaction, times(1)).release(); } }
[*] target: assertSame(exception, e)
[-] pred: org. junit. Assert. assertSame ( exception, e )
************************************
[+] input: testCheckAndSet_EnableCaching_IfModifiedSince_NotModified() { Mockito.when(req.getPathInfo()).thenReturn("/"); Mockito.when(req.getHeader(HttpCacheControl.ETAG)).thenReturn(null); Mockito.when(req.getHeader(HttpCacheControl.IF_NONE_MATCH)).thenReturn(null); Mockito.when(req.getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE)).thenReturn(1000000L);  BinaryResource res = BinaryResources.create() .withFilename("a.html") .withContent("<html></html>".getBytes(StandardCharsets.UTF_8)) .withCachingAllowed(true) .withLastModified(900000L) .build(); HttpCacheObject obj = new HttpCacheObject(new HttpCacheKey("/"), res); boolean b = cc.checkAndSetCacheHeaders(req, resp, obj); Assert."<AssertPlaceHolder>";  Mockito.verify(req, ANY_TIMES).getPathInfo(); Mockito.verify(req, ANY_TIMES).getAttribute("jakarta.servlet.forward.path_info"); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.ETAG); Mockito.verify(req, ANY_TIMES).getHeader(HttpCacheControl.IF_NONE_MATCH); Mockito.verify(req, ANY_TIMES).getDateHeader(HttpCacheControl.IF_MODIFIED_SINCE); Mockito.verify(resp, ONCE).setHeader(HttpCacheControl.CACHE_CONTROL, "private, max-age=0, must-revalidate"); Mockito.verify(resp, ONCE).setStatus(HttpServletResponse.SC_NOT_MODIFIED); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: testApplicationInfo() { ApplicationInfoRequest request = new ApplicationInfoRequest(); request.setAppName("test"); boolean result = meshApiClient.registeApplication(request); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: shouldNotBeAbleToBuildSourceIfSourceNameIsUnsupported() { when(streamConfig.getSourceDetails()).thenReturn(new SourceDetails[]{new SourceDetails(SourceName.PARQUET_SOURCE, SourceType.UNBOUNDED)}); FlinkKafkaConsumerDaggerSource daggerSource = new FlinkKafkaConsumerDaggerSource(streamConfig, configuration, daggerDeserializer);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(daggerSource.canBuild())
[-] pred: org. junit. Assert. assertFalse ( daggerSource. canBuild ( ) )
************************************
[+] input: testInstNonExistingPort() { boolean thrown = false; try { ForwarderSwitch device = new ForwarderSwitch(0, null, 5, new IdentityFlowletIntermediary()); device.addConnection(topology.getPort(0, 1)); device.setDestinationToNextSwitch(1, 2); } catch (IllegalArgumentException e) { thrown = true; } "<AssertPlaceHolder>"; }
[*] target: assertTrue(thrown)
[-] pred: org. junit. Assert. assertTrue ( thrown )
************************************
[+] input: testBeanPropertiesAnnotation() { annotationMapper.parseClassAnnotations(ClassWithBeanProperties.class.getAnnotations(), context); Object bean = context.get("bean"); "<AssertPlaceHolder>"; assertEquals(Date.class, bean.getClass()); assertEquals(234, ((Date) bean).getTime()); }
[*] target: assertNotNull(bean)
[-] pred: org. junit. Assert. assertNotNull ( bean )
************************************
[+] input: shouldReturnTrueForHasSQLTransformerIfAnyOneTransformConfigContainsSQLTransformer() { String configuration = "{ "external_source": { "es": [ { "host": "localhost:9200", "output_mapping": { "customer_profile": { "path": "$._source" } }, "query_param_pattern": "/customers/customer/%s", "query_param_variables": "customer_id", "retry_timeout": "5000", "socket_timeout": "6000", "stream_timeout": "5000", "type": "TestLogMessage" } ], "http": [ { "body_column_from_sql": "request_body", "connect_timeout": "5000", "endpoint": "http://localhost:8000", "fail_on_errors": "true", "headers": { "content-type": "application/json" }, "output_mapping": { "surge_factor": { "path": "$.data.tensor.values[0]" } }, "stream_timeout": "5000", "verb": "post" } ] }, "internal_source":[ { "output_field": "event_timestamp", "value": "CURRENT_TIMESTAMP", "type": "function" }, { "output_field": "s2_id_level", "value": "7", "type": "constant" } ], "transformers": [ { "transformation_arguments": { "sqlQuery": "SELECT * from data_stream" }, "transformation_class": "SQLTransformer" }, { "transformation_arguments": { "arg1": "test" }, "transformation_class": "org.raystack.dagger.transformer.Test" } ] }"; defaultPostProcessorConfig = PostProcessorConfig.parse(configuration); "<AssertPlaceHolder>"; }
[*] target: assertTrue(defaultPostProcessorConfig.hasSQLTransformer())
[-] pred: org. junit. Assert. assertTrue ( defaultPostProcessorConfig. hasSQLTransformer ( ) )
************************************
[+] input: testEncodeDecode() { UUID uuid = UUID.randomUUID(); String encoded = s_helper.encodeUrlSafe(uuid); UUID decoded = s_helper.decodeUrlSafe(encoded); "<AssertPlaceHolder>"; }
[*] target: assertEquals(uuid, decoded)
[-] pred: org. junit. Assert. assertEquals ( uuid, decoded )
************************************
[+] input: testErrorDueToESException() { when(openSearchConnection.select(anyString())) .thenThrow(new RuntimeException("All shards failure"));  TestReport expected = new TestReport(); expected.addTestCase( new ErrorTestCase(1, "SELECT * FROM accounts", "RuntimeException: All shards failure")); TestReport actual = correctnessTest.verify(querySet("SELECT * FROM accounts")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testFormatSequence() { CompactFormatter cf = new CompactFormatter("%9$d"); LogRecord record = new LogRecord(Level.SEVERE, ""); String output = cf.format(record); String expect = Long.toString(record.getSequenceNumber()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, output)
[-] pred: org. junit. Assert. assertEquals ( expect, output )
************************************
[+] input: Exception { List<Long> tablets1 = new ArrayList<>(); tablets1.add(1L); tablets1.add(2L); List<Long> tablets2 = new ArrayList<>(); tablets2.add(3L); tablets2.add(4L); Map<String, List<Long>> beToTablets = new HashMap<>(); beToTablets.put("be1", tablets1); beToTablets.put("be2", tablets2);  Settings settings = new PropertiesSettings(); String opaquedQueryPlan = "query_plan"; String cluster = "c"; String database = "d"; String table = "t";  Set<Long> be1Tablet = new HashSet<>(); be1Tablet.add(1L); be1Tablet.add(2L); PartitionDefinition pd1 = new PartitionDefinition( database, table, settings, "be1", be1Tablet, opaquedQueryPlan);  Set<Long> be2Tablet = new HashSet<>(); be2Tablet.add(3L); be2Tablet.add(4L); PartitionDefinition pd2 = new PartitionDefinition( database, table, settings, "be2", be2Tablet, opaquedQueryPlan);  List<PartitionDefinition> expected = new ArrayList<>(); expected.add(pd1); expected.add(pd2); Collections.sort(expected);  List<PartitionDefinition> actual = RestService.tabletsMapToPartition( settings, beToTablets, opaquedQueryPlan, database, table, logger); Collections.sort(actual);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldNotBeEmptyWhenEsConfigIsPresent() { ExternalSourceConfig externalSourceConfig = new ExternalSourceConfig(null, es, null, null);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(externalSourceConfig.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( externalSourceConfig. isEmpty() )
************************************
[+] input: generateAuthorizationCodeResponseHasCache() { this.initParam(); String code = oauth2Service.createAuthorizationCode(idsRequestParam, new UserInfo(), 100000L); idsRequestParam.setCode(code); IdsResponse<String, Object> response = idsTokenProvider.generateAuthorizationCodeResponse(idsRequestParam, request); System.out.println(response); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testCoalesceEmptySet() { InvalidateCacheNotificationCoalescer coalescer = new InvalidateCacheNotificationCoalescer(); List<InvalidateCacheNotification> res = coalescer.coalesce(new ArrayList<>()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(res.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( res. isEmpty ( ) )
************************************
[+] input: FilterException { TestBookingLogMessage bookingLogMessage = TestBookingLogMessage.newBuilder().setCustomerId("customerId").build(); TestBookingLogKey bookingLogKey = TestBookingLogKey.newBuilder().build(); Message message = new Message(bookingLogKey.toByteArray(), bookingLogMessage.toByteArray(), "topic1", 0, 100); HashMap<String, String> bookingFilterConfigs = new HashMap<>(); bookingFilterConfigs.put("FILTER_DATA_SOURCE", "message"); bookingFilterConfigs.put("FILTER_JEXL_EXPRESSION", "testBookingLogMessage.getCustomerDynamicSurgeEnabled() == false"); bookingFilterConfigs.put("FILTER_SCHEMA_PROTO_CLASS", TestBookingLogMessage.class.getName()); FilterConfig bookingConsumerConfig = ConfigFactory.create(FilterConfig.class, bookingFilterConfigs); JexlFilter bookingFilter = new JexlFilter(bookingConsumerConfig, firehoseInstrumentation); FilteredMessages expectedMessages = new FilteredMessages(); expectedMessages.addToValidMessages(message); FilteredMessages filteredMessages = bookingFilter.filter(Arrays.asList(message)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMessages, filteredMessages)
[-] pred: org. junit. Assert. assertEquals ( expectedMessages, filteredMessages )
************************************
[+] input: logoutNullStore() { JapUserStore japUserStore = null; JapCache japCache = new JapLocalCache(); JapConfig japConfig = new JapConfig(); JapContext japContext = new JapContext(japUserStore, japCache, japConfig); JapAuthentication.setContext(japContext);  boolean result = JapAuthentication.logout(request, response); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testAppendScan() { LogRecord expected = new MasterLogRecord(1234);  logManager.appendToLog(expected); LogRecord record = logManager.scanFrom(0).next();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, record)
[-] pred: org. junit. Assert. assertEquals ( expected, record )
************************************
