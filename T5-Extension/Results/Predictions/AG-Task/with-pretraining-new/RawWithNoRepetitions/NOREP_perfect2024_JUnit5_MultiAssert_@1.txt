************************************
************************************
[+] input: testNoPoliciesButUpdateExists() { Map<String, String> props = new HashMap<>(); props.put("updated.openhouse.policy", "{"sharingEnabled": true}"); TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(props); OpenHouseTableOperations openHouseTableOperations = mock(OpenHouseTableOperations.class); when(openHouseTableOperations.buildUpdatedPolicies(metadata)).thenCallRealMethod(); Policies updatedPolicies = openHouseTableOperations.buildUpdatedPolicies(metadata); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(updatedPolicies.getSharingEnabled().booleanValue()); }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNotNull(updatedPolicies)
[-] pred: org. junit. Assert. assertNotNull ( updatedPolicies )
************************************
************************************
[+] input: getAllCertificatesBasedOnConditions() { CertSearchRequest request = new CertSearchRequest(); when(certificateServiceMock.searchAll(request, 1, 10)).thenReturn(getPageCertificates());  Page<Certificate> result = controllerMock.search(request, 1, 10);  verify(certificateServiceMock, times(1)).searchAll(any(CertSearchRequest.class), anyInt(), anyInt()); "<AssertPlaceHolder>"; assertEquals(1, result.getTotalPages()); assertEquals(2, result.getContent().size()); }
search(@RequestBody CertSearchRequest request, @RequestParam(name = "page", defaultValue = "0") int pageIndex, @RequestParam(name = "size", defaultValue = "30") int pageSize) { return certificateService.searchAll(request, pageIndex, pageSize); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testPoliciesInMetadataNoUpdate() { Map<String, String> props = new HashMap<>(); props.put("policies", "{"retention": {"count": "1", "granularity": "DAY"}}"); TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(props); OpenHouseTableOperations openHouseTableOperations = mock(OpenHouseTableOperations.class); when(openHouseTableOperations.buildUpdatedPolicies(metadata)).thenCallRealMethod(); Policies updatedPolicies = openHouseTableOperations.buildUpdatedPolicies(metadata); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, updatedPolicies.getRetention().getCount()); Assertions.assertEquals( Retention.GranularityEnum.DAY, updatedPolicies.getRetention().getGranularity()); }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNotNull(updatedPolicies)
[-] pred: org. junit. Assert. assertNotNull ( updatedPolicies )
************************************
************************************
[+] input: Exception { SslContext mockSslContext = Mockito.mock(SslContext.class); File tmpCert = File.createTempFile("tmpcacert", ".crt"); tmpCert.deleteOnExit(); ArgumentCaptor<String> truststoreLocationCapture = ArgumentCaptor.forClass(String.class); JobsApiClientFactory jobsApiClientFactorySpy = Mockito.spy(JobsApiClientFactory.getInstance()); Mockito.doReturn(mockSslContext).when(jobsApiClientFactorySpy).createSslContext(anyString());  ApiClient apiClient = jobsApiClientFactorySpy.createApiClient( "https://test.openhouse.com", "", tmpCert.getAbsolutePath()); Mockito.verify(jobsApiClientFactorySpy, Mockito.times(1)) .createSslContext(truststoreLocationCapture.capture()); "<AssertPlaceHolder>"; assertEquals(tmpCert.getAbsolutePath(), truststoreLocationCapture.getValue()); }
createApiClient(@NonNull String baseUrl, String token, String truststoreLocation) throws MalformedURLException, SSLException { WebClient webClient = createWebClient(baseUrl, token, truststoreLocation); ApiClient apiClient = new ApiClient(webClient); apiClient.setBasePath(baseUrl); return apiClient; }
[*] target: assertNotNull(apiClient)
[-] pred: org. junit. Assert. assertNotNull ( apiClient )
************************************
************************************
[+] input: Exception { ArgumentCaptor<String> truststoreLocationCapture = ArgumentCaptor.forClass(String.class);  ApiClient apiClient = tablesApiClientFactorySpy.createApiClient( "https://test.openhouse.com", "", tmpCert.getAbsolutePath());  Mockito.verify(tablesApiClientFactorySpy, Mockito.times(1)) .createSslContext(truststoreLocationCapture.capture()); "<AssertPlaceHolder>"; assertEquals(tmpCert.getAbsolutePath(), truststoreLocationCapture.getValue()); }
createApiClient(@NonNull String baseUrl, String token, String truststoreLocation) throws MalformedURLException, SSLException { WebClient webClient = createWebClient(baseUrl, token, truststoreLocation); ApiClient apiClient = new ApiClient(webClient); if (token != null && !token.isEmpty()) { apiClient.addDefaultHeader(HttpHeaders.AUTHORIZATION, String.format("Bearer %s", token)); } apiClient.setBasePath(baseUrl); return apiClient; }
[*] target: assertNotNull(apiClient)
[-] pred: org. junit. Assert. assertNotNull ( apiClient )
************************************
************************************
[+] input: testPoliciesSharingAndRetentionUpdate() { Map<String, String> props = new HashMap<>(); props.put( "policies", "{"retention": {"count": "1", "granularity": "DAY"}, "sharingEnabled": true}"); props.put( "updated.openhouse.policy", "{"retention": {"count": "5", "granularity": "HOUR"}, "sharingEnabled": false}"); TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(props); OpenHouseTableOperations openHouseTableOperations = mock(OpenHouseTableOperations.class); when(openHouseTableOperations.buildUpdatedPolicies(metadata)).thenCallRealMethod(); Policies updatedPolicies = openHouseTableOperations.buildUpdatedPolicies(metadata); Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(updatedPolicies.getSharingEnabled().booleanValue()); Assertions.assertEquals(5, updatedPolicies.getRetention().getCount()); Assertions.assertEquals( Retention.GranularityEnum.HOUR, updatedPolicies.getRetention().getGranularity()); }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNotNull(updatedPolicies)
[-] pred: org. junit. Assert. assertNotNull ( updatedPolicies )
************************************
************************************
[+] input: shouldHandleNullParameters() { ConfigurerContext context = new ConfigurerContext(null, null);  assertNull(context.namespace()); "<AssertPlaceHolder>"; }
configurers() { return this.configurers; }
[*] target: assertNull(context.configurers())
[-] pred: org. junit. Assert. assertNull ( context. configurers() )
************************************
************************************
[+] input: IOException { // given var request = new MockClientHttpRequest(); var body = new byte[0]; var execution = mock(ClientHttpRequestExecution.class); var response = new MockClientHttpResponse(); var authentication = new TestingAuthenticationToken("j.dewar", "password"); SecurityContextHolder.getContext().setAuthentication(authentication);  var authorizedClient = new OAuth2AuthorizedClient(mock(), "j.dewar", new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER, "token", Instant.now(), Instant.MAX)); doReturn(authorizedClient).when(this.authorizedClientManager) .authorize(argThat(authorizationRequest -> authorizationRequest.getPrincipal().equals(authentication) && authorizationRequest.getClientRegistrationId().equals("test")));  doReturn(response).when(execution).execute(request, body);  // when var result = this.interceptor.intercept(request, body, execution);  // then "<AssertPlaceHolder>"; assertEquals("Bearer token", request.getHeaders().getFirst(HttpHeaders.AUTHORIZATION));  verify(execution).execute(request, body); verifyNoMoreInteractions(execution); }
intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException { if (!request.getHeaders().containsKey(HttpHeaders.AUTHORIZATION)) { OAuth2AuthorizedClient authorizedClient = this.authorizedClientManager.authorize( OAuth2AuthorizeRequest.withClientRegistrationId(this.registrationId) .principal(this.securityContextHolderStrategy.getContext().getAuthentication()) .build()); request.getHeaders().setBearerAuth(authorizedClient.getAccessToken().getTokenValue()); }  return execution.execute(request, body); }
[*] target: assertEquals(response, result)
[-] pred: org. junit. Assert. assertEquals ( response, result )
************************************
************************************
[+] input: givenLoginRequest_WhenWhenAdminRole_ReturnSuccess() {  // Given LoginRequest request = LoginRequest.builder() .email("admin@parkinglot.com") .password("admin_password") .build();  UserEntity mockUserEntity = UserEntity.builder() .email(request.getEmail()) .fullName("Test User") .username("testuser") .password("hashedPassword") .role(Role.ROLE_ADMIN) .build();  Authentication mockAuthentication = new UsernamePasswordAuthenticationToken( request.getEmail(), request.getPassword());  // When Mockito.when(authenticationManager.authenticate(Mockito.any(UsernamePasswordAuthenticationToken.class))) .thenReturn(mockAuthentication); Mockito.when(jwtUtils.generateJwtToken(mockAuthentication)).thenReturn("mockedToken"); Mockito.when(userRepository.findByEmail(request.getEmail())).thenReturn(Optional.of(mockUserEntity)); Mockito.when(refreshTokenService.createRefreshToken(Mockito.any(UserEntity.class))) .thenReturn("actualRefreshToken");  // Then JWTResponse jwtResponse = authService.login(request);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(request.getEmail(), jwtResponse.getEmail()); Assertions.assertEquals("mockedToken", jwtResponse.getToken()); Assertions.assertEquals("actualRefreshToken", jwtResponse.getRefreshToken());  // Verify Mockito.verify(authenticationManager).authenticate(Mockito.any(UsernamePasswordAuthenticationToken.class)); Mockito.verify(jwtUtils).generateJwtToken(mockAuthentication); Mockito.verify(userRepository).findByEmail(request.getEmail()); Mockito.verify(refreshTokenService).createRefreshToken(Mockito.any(UserEntity.class));  }
login(LoginRequest request) {  UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword());  Authentication auth = authenticationManager.authenticate(authToken); SecurityContextHolder.getContext().setAuthentication(auth); String jwtToken = jwtUtils.generateJwtToken(auth);  UserEntity userEntity = userRepository.findByEmail(request.getEmail()).orElseThrow(UserNotFoundException::new);  return JWTResponse.builder() .email(request.getEmail()) .token(jwtToken) .refreshToken(refreshTokenService.createRefreshToken(userEntity)) .build(); }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
************************************
[+] input: Exception { SslContext mockSslContext = Mockito.mock(SslContext.class); File tmpCert = File.createTempFile("tmpcacert", ".crt"); tmpCert.deleteOnExit(); ArgumentCaptor<String> truststoreLocationCapture = ArgumentCaptor.forClass(String.class); HousetablesApiClientFactory housetablesApiClientFactorySpy = Mockito.spy(HousetablesApiClientFactory.getInstance()); Mockito.doReturn(mockSslContext) .when(housetablesApiClientFactorySpy) .createSslContext(anyString());  ApiClient apiClient = housetablesApiClientFactorySpy.createApiClient( "https://test.openhouse.com", "", tmpCert.getAbsolutePath()); Mockito.verify(housetablesApiClientFactorySpy, Mockito.times(1)) .createSslContext(truststoreLocationCapture.capture()); "<AssertPlaceHolder>"; assertEquals(tmpCert.getAbsolutePath(), truststoreLocationCapture.getValue()); }
createApiClient(@NonNull String baseUrl, String token, String truststoreLocation) throws MalformedURLException, SSLException { WebClient webClient = createWebClient(baseUrl, token, truststoreLocation); ApiClient apiClient = new ApiClient(webClient); apiClient.setBasePath(baseUrl); return apiClient; }
[*] target: assertNotNull(apiClient)
[-] pred: org. junit. Assert. assertNotNull ( apiClient )
************************************
************************************
[+] input: givenLoginRequest_WhenDriverRole_ReturnSuccess() {  // Given LoginRequest request = LoginRequest.builder() .email("driver_1@parkinglot.com") .password("driver_password") .build();  UserEntity mockUserEntity = UserEntity.builder() .email(request.getEmail()) .fullName("Test User") .username("testuser") .password("hashedPassword") .role(Role.ROLE_DRIVER) .build();  Authentication mockAuthentication = new UsernamePasswordAuthenticationToken( request.getEmail(), request.getPassword());  // When Mockito.when(authenticationManager.authenticate(Mockito.any(UsernamePasswordAuthenticationToken.class))) .thenReturn(mockAuthentication); Mockito.when(jwtUtils.generateJwtToken(mockAuthentication)).thenReturn("mockedToken"); Mockito.when(userRepository.findByEmail(request.getEmail())).thenReturn(Optional.of(mockUserEntity)); Mockito.when(refreshTokenService.createRefreshToken(Mockito.any(UserEntity.class))) .thenReturn("actualRefreshToken");  // Then JWTResponse jwtResponse = authService.login(request);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(request.getEmail(), jwtResponse.getEmail()); Assertions.assertEquals("mockedToken", jwtResponse.getToken()); Assertions.assertEquals("actualRefreshToken", jwtResponse.getRefreshToken());  // Verify Mockito.verify(authenticationManager).authenticate(Mockito.any(UsernamePasswordAuthenticationToken.class)); Mockito.verify(jwtUtils).generateJwtToken(mockAuthentication); Mockito.verify(userRepository).findByEmail(request.getEmail()); Mockito.verify(refreshTokenService).createRefreshToken(Mockito.any(UserEntity.class));  }
login(LoginRequest request) {  UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword());  Authentication auth = authenticationManager.authenticate(authToken); SecurityContextHolder.getContext().setAuthentication(auth); String jwtToken = jwtUtils.generateJwtToken(auth);  UserEntity userEntity = userRepository.findByEmail(request.getEmail()).orElseThrow(UserNotFoundException::new);  return JWTResponse.builder() .email(request.getEmail()) .token(jwtToken) .refreshToken(refreshTokenService.createRefreshToken(userEntity)) .build(); }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
************************************
[+] input: getAllCertificates() { when(certificateServiceMock.getAllCertificates(anyInt(), anyInt())).thenReturn(getPageCertificates());  Page<Certificate> result = controllerMock.getAll(anyInt(), anyInt());  verify(certificateServiceMock, times(1)).getAllCertificates(anyInt(), anyInt()); "<AssertPlaceHolder>"; assertEquals(1, result.getTotalPages()); assertEquals(2, result.getContent().size()); }
getAll(@RequestParam(name = "page", defaultValue = "0") int pageIndex, @RequestParam(name = "size", defaultValue = "30") int pageSize) { return certificateService.getAllCertificates(pageIndex, pageSize); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: AdException { AdSession adSession = new AdSession(); adSession.setSessionId("sessionId"); when(adClientMock.startAppSession(anyString())).thenReturn(adResponse);  Map<String, Object> result = authenticationAppToAppService.createAuthenticationParameters("relayState", authenticationRequest);  "<AssertPlaceHolder>"; assertEquals(6, result.size()); assertEquals("appSessionId", result.get("app_session_id")); assertEquals("artifact", result.get("SAMLart")); assertEquals(20, result.get("authentication_level")); assertEquals("appReturnUrl", result.get("image_domain")); assertEquals("relayState", result.get("RelayState")); }
createAuthenticationParameters(String relayState, AuthenticationRequest authenticationRequest) throws AdException {  HashMap<String, String> digidApp = new HashMap<>(); digidApp.put("name", authenticationRequest.getServiceName()); digidApp.put("url", authenticationRequest.getAppReturnUrl());  Map<String, Object> authenticationParameters = new HashMap<>(); authenticationParameters.put("app_session_id", retrieveAppSessionIdFromAd(authenticationRequest.getAppReturnUrl(), authenticationRequest)); authenticationParameters.put("SAMLart", authenticationRequest.getSamlSession().getArtifact()); authenticationParameters.put("apps", authenticationRequest.getAppActive() ? Arrays.asList(digidApp) : Collections.emptyList()); authenticationParameters.put("authentication_level", authenticationRequest.getSamlSession().getAuthenticationLevel()); authenticationParameters.put("image_domain", authenticationRequest.getAppReturnUrl()); authenticationParameters.put("RelayState", relayState);  return authenticationParameters; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testPoliciesExistUpdateExist() { Map<String, String> props = new HashMap<>(); props.put("policies", "{"retention": {"count": "1", "granularity": "DAY"}}"); props.put("updated.openhouse.policy", "{"sharingEnabled": true}"); TableMetadata metadata = mock(TableMetadata.class); when(metadata.properties()).thenReturn(props); OpenHouseTableOperations openHouseTableOperations = mock(OpenHouseTableOperations.class); when(openHouseTableOperations.buildUpdatedPolicies(metadata)).thenCallRealMethod(); Policies updatedPolicies = openHouseTableOperations.buildUpdatedPolicies(metadata); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(updatedPolicies.getSharingEnabled().booleanValue()); Assertions.assertEquals(1, updatedPolicies.getRetention().getCount()); Assertions.assertEquals( Retention.GranularityEnum.DAY, updatedPolicies.getRetention().getGranularity()); }
buildUpdatedPolicies(TableMetadata metadata) { Map<String, String> properties = metadata.properties(); Policies policies = properties.containsKey(POLICIES_KEY) ? toPoliciesObject(properties.get(POLICIES_KEY)) : null; if (!properties.containsKey(UPDATED_OPENHOUSE_POLICY_KEY)) { return policies; } Policies patchUpdatedPolicy = toPoliciesObject(properties.get(UPDATED_OPENHOUSE_POLICY_KEY));  // Nothing the patch, patchUpdatedPolicy is the new Policy. if (policies == null) { return patchUpdatedPolicy; }  // Update retention config if (patchUpdatedPolicy.getRetention() != null) { policies.setRetention(patchUpdatedPolicy.getRetention()); } // Update sharing config if (patchUpdatedPolicy.getSharingEnabled() != null) { policies.sharingEnabled(patchUpdatedPolicy.getSharingEnabled()); } // Update column policy tag config if (patchUpdatedPolicy.getColumnTags() != null) { if (policies.getColumnTags() != null) { policies .getColumnTags() .forEach( (k, v) -> patchUpdatedPolicy .getColumnTags() .merge(k, v, (updatedSet, oldSet) -> updatedSet)); } policies.setColumnTags(patchUpdatedPolicy.getColumnTags()); } return policies; }
[*] target: assertNotNull(updatedPolicies)
[-] pred: org. junit. Assert. assertNotNull ( updatedPolicies )
