[+] input: givenInstanceMethod() { String toVerify = methodReference() .withObjectPath("this") .withMethodName("toString") .generate();  String expected = "this::toString";  "<AssertPlaceHolder>"; }
generate() { return objectPathOrTypeGenerator.generate() + DOUBLE_COLON + methodName; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: givenTypeParameter() { String toVerify = toTest() .withType(T.extending(COMPARABLE.with(T))) .getObjectPathOrTypeGenerator() .generate();  String expected = "T";  "<AssertPlaceHolder>"; }
generate() { Optional<String> optionalObjectPathAsString = optionalObjectPathGenerator.map(ObjectPathGenerator::generate); Optional<String> optionalConcreteTypeAsString = optionalConcreteType.map(FullyQualifiedName::raw); Optional<String> optionalGenericTypeAsString = optionalGenericType.map(TypeParameterName::raw); return optionalObjectPathAsString .map(Optional::of).orElse(optionalConcreteTypeAsString) .map(Optional::of).orElse(optionalGenericTypeAsString) .orElseThrow(NullPointerException::new); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: IOException { final AgentPreparer agentPreparer = new AgentPreparer(); final String output = agentPreparer.loadAgentOnFileSystem("agents/agent.jar");  Assertions."<AssertPlaceHolder>";  Files.delete(Path.of(output)); // Verify file exists and clean up at same time }
loadAgentOnFileSystem(String agentResourcePath) { return tempAgentFiles.computeIfAbsent(agentResourcePath, k -> { try { final Path tempFile = Files.createTempFile("agent", ".jar"); tempFile.toFile().deleteOnExit(); final InputStream inputStream = AgentPreparer.class.getClassLoader() .getResourceAsStream(agentResourcePath); if (inputStream == null) { throw new IOException("Failed to find input stream for agent"); } final byte[] agentBytes = inputStream.readAllBytes(); Files.write(tempFile, agentBytes); final String localPath = tempFile.toAbsolutePath().toString(); log.debug("Loaded agent into temp file: {}", localPath); return localPath; } catch (IOException e) { log.warn("Failed to load agent into file", e); throw new UncheckedIOException(e); } });  }
[*] target: assertNotNull(output)
[-] pred: org. junit. Assert. assertNotNull ( output )
************************************
************************************
[+] input: testParseWithNull_ReturnNull() { AndroidBatteryInfoResultParser parser = new AndroidBatteryInfoResultParser(); PerformanceTestResult testResult = parser.parse(null, null); Assertions."<AssertPlaceHolder>"; }
parse(PerformanceTestResult performanceTestResult, Logger logger) { if (performanceTestResult == null || performanceTestResult.performanceInspectionResults == null || performanceTestResult.performanceInspectionResults.isEmpty()) { return null; }  List<PerformanceInspectionResult> inspectionResults = performanceTestResult.performanceInspectionResults; for (PerformanceInspectionResult inspectionResult : inspectionResults) { File logFile = inspectionResult.rawResultFile; AndroidBatteryInfo batteryInfo = parseRawResultFile(logFile, inspectionResult.inspection.appId, logger); if (batteryInfo != null) { batteryInfo.setAppPackageName(inspectionResult.inspection.appId); batteryInfo.setDescription(inspectionResult.inspection.description); batteryInfo.setTimeStamp(inspectionResult.timestamp); } inspectionResult.parsedData = batteryInfo; }  // Use the battery usage at the end of the test as a summary performanceTestResult.setResultSummary(getResultSummary(inspectionResults)); return performanceTestResult; }
[*] target: assertNull(testResult)
[-] pred: org. junit. Assert. assertNull ( testResult )
************************************
************************************
[+] input: concreteGivenFullyQualifiedNameAndTypeArguments() { ConcreteType expected = new ConcreteType(ERUDITE, asList(STRING_TYPE.invariant(), T_TYPE.covariant(), INTEGER_TYPE.contravariant())); ConcreteType toVerify = Type.concrete(ERUDITE, STRING_TYPE.invariant(), T_TYPE.covariant(), INTEGER_TYPE.contravariant());  "<AssertPlaceHolder>"; }
contravariant() { return TypeArgument.of(CONTRAVARIANT, this); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testSaveStatusPageOrg() {  StatusPageOrg inputOrg = new StatusPageOrg(); when(statusPageOrgDao.save(inputOrg)).thenReturn(inputOrg);  StatusPageOrg savedOrg = statusPageService.saveStatusPageOrg(inputOrg);  "<AssertPlaceHolder>"; }
saveStatusPageOrg(StatusPageOrg statusPageOrg);
[*] target: assertEquals(inputOrg, savedOrg)
[-] pred: org. junit. Assert. assertEquals ( inputOrg, savedOrg )
************************************
************************************
[+] input: SQLException { rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "jdbc:someprotocol://url");  final List<HostSpec> expected = hosts; RdsHostListProvider.topologyCache.put(rdsHostListProvider.clusterId, expected, defaultRefreshRateNano);  final List<HostSpec> result = rdsHostListProvider.getCachedTopology(); "<AssertPlaceHolder>"; }
getCachedTopology() { return topologyCache.get(this.clusterId); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: bind_withStandardInput() { BoundStatement result = targetInsertStatement.bind(originRow, targetRow, null,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size())).set(anyInt(), any(), any(Class.class)); }
bind(Row originRow, Row targetRow, Integer ttl, Long writeTime, Object explodeMapKey, Object explodeMapValue) { if (null == originRow) throw new RuntimeException("Origin row is null"); if (usingCounter) throw new RuntimeException("Cannot INSERT onto a counter table, use UPDATE instead");  checkBindInputs(ttl, writeTime, explodeMapKey, explodeMapValue); BoundStatement boundStatement = prepareStatement().bind();  int currentBindIndex = 0; Object bindValue = null;  if (logDebug) logger.debug("bind using conversions: {}",cqlTable.getOtherCqlTable().getConversions()); for (int targetIndex = 0; targetIndex < targetColumnTypes.size(); targetIndex++) { if (!bindColumnIndexes.contains(targetIndex)) { // this happens with constant columns, for example continue; } try { if (targetIndex== explodeMapKeyIndex) { bindValue = explodeMapKey; } else if (targetIndex== explodeMapValueIndex) { bindValue = explodeMapValue; } else { int originIndex = cqlTable.getCorrespondingIndex(targetIndex); if (originIndex < 0) // we don't have data to bind for this column; continue to the next targetIndex continue; bindValue = cqlTable.getOtherCqlTable().getAndConvertData(originIndex, originRow); }  boundStatement = boundStatement.set(currentBindIndex++, bindValue, cqlTable.getBindClass(targetIndex)); } catch (Exception e) { logger.error("Error trying to bind value:" + bindValue + " of class:" +(null==bindValue?"unknown":bindValue.getClass().getName())+ " to column:" + targetColumnNames.get(targetIndex) + " of targetDataType:" + targetColumnTypes.get(targetIndex)+ "/" + cqlTable.getBindClass(targetIndex).getName() + " at column index:" + targetIndex + " and bind index: "+ (currentBindIndex-1) + " of statement:" + this.getCQL()); throw e; } }  if (usingTTL) { boundStatement = boundStatement.set(currentBindIndex++, ttl, Integer.class); } if (usingWriteTime) { boundStatement = boundStatement.set(currentBindIndex++, writeTime, Long.class); }  return boundStatement .setConsistencyLevel(cqlTable.getWriteConsistencyLevel()) .setTimeout(Duration.ofSeconds(10)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: saveRole() { Mockito.when(roleEntityRepository.merge(roleEntity)).thenReturn(roleEntity);  Role storedRoleDetails = roleService.save(this.roleEntity); Assertions."<AssertPlaceHolder>"; }
save(final Role role);
[*] target: assertNotNull(storedRoleDetails)
[-] pred: org. junit. Assert. assertNotNull ( storedRoleDetails )
************************************
************************************
[+] input: testNormal() { GoogleAnalyticsPlatform platform = new GoogleAnalyticsPlatform(); CloseableHttpClient client = platform.getClient(); "<AssertPlaceHolder>"; try { client.close(); } catch (IOException e) { } }
getClient() { return client; }
[*] target: assertNotNull(client)
[-] pred: org. junit. Assert. assertNotNull ( client )
************************************
************************************
[+] input: testDeleteUserGroup_ClusterHostServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  when(mockUserGroupService.countGroupUserNum(0)).thenReturn(0); when(mockHostService.getHostListByClusterId(0)).thenReturn(Collections.emptyList());  // Run the test final Result result = clusterGroupServiceImplUnderTest.deleteUserGroup(0);  // Verify the results "<AssertPlaceHolder>"; }
deleteUserGroup(Integer id) { ClusterGroup clusterGroup = this.getById(id); Integer num = userGroupService.countGroupUserNum(id); if (num > 0) { return Result.error(Status.USER_GROUP_TIPS_ONE.getMsg()); } this.removeById(id); List<ClusterHostDO> hostList = hostService.getHostListByClusterId(clusterGroup.getClusterId()); for (ClusterHostDO clusterHost : hostList) { ActorRef unixGroupActor = ActorUtils.getRemoteActor(clusterHost.getHostname(), "unixGroupActor"); DelUnixGroupCommand delUnixGroupCommand = new DelUnixGroupCommand(); delUnixGroupCommand.setGroupName(clusterGroup.getGroupName()); Timeout timeout = new Timeout(Duration.create(180, TimeUnit.SECONDS)); Future<Object> execFuture = Patterns.ask(unixGroupActor, delUnixGroupCommand, timeout); ExecResult execResult = null; try { execResult = (ExecResult) Await.result(execFuture, timeout.duration()); if (execResult.getExecResult()) { logger.info("del unix group success at {}", clusterHost.getHostname()); } else { logger.info("del unix group failed at {}", clusterHost.getHostname()); } } catch (Exception e) { logger.info("del unix group failed at {}", clusterHost.getHostname()); } } return Result.success(); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: format_ShouldFormatNumberValueAsText() { Integer value = 10; String expected = TypeCodecs.INT.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
format(Integer value) { return TypeCodecs.INT.format(value); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: IOException { BilibiliResponse<UserNav> navResponse = client.nav(); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(navResponse.getData()); WbiImg wbiImg = navResponse.getData().getWbiImg(); Assertions.assertNotNull(wbiImg); BilibiliResponse<SpaceSearchResult> response = client.spaceSearch(1, 50, 423895, WbiUtil.getMixinKey(wbiImg.getImgKey(), wbiImg.getSubKey())); Assertions.assertNotNull(response); Assertions.assertEquals(response.getCode(), 0, response.getMessage()); Assertions.assertNotNull(response.getData()); Assertions.assertNotNull(response.getData().getList()); List<SearchVideoInfo> list = response.getData().getList().getVlist(); if (list != null) { for (SearchVideoInfo video : list) { String message = String.format("BV:%s, title:%s, author:%s", video.getBvId(), ApiUtil.removeSearchHighlight(video.getTitle()), ApiUtil.removeSearchHighlight(video.getAuthor())); logger.info(message); } } }
nav() throws IOException { checkBuVid3BuVid4(); return httpJsonClient.getJson(ApiUrlContainer.USER_NAV, new TypeReference<BilibiliResponse<UserNav>>() { }, requestHeader); }
[*] target: assertNotNull(navResponse)
[-] pred: org. junit. Assert. assertNotNull ( navResponse )
************************************
************************************
[+] input: testNormal() { Query query = scheduleUtil.whereForSettings(keys); Assertions."<AssertPlaceHolder>"; }
whereForSettings(String[] keys) { if (null == keys || keys.length == 0) return new Query(); return new Query(Criteria.where("key").in(keys)); }
[*] target: assertNotNull(query)
[-] pred: org. junit. Assert. assertNotNull ( query )
************************************
************************************
[+] input: Exception { ObjectMapper mapper = new ObjectMapper();  for (ProviderType type : ProviderType.publicValues()) { String s = mapper.writeValueAsString(type);  "<AssertPlaceHolder>"; } }
publicValues() { Collection<ProviderType> providerTypes = new ArrayList<>();  for (ProviderType p : registeredTypes.values()) { if (!p.isForInternalPurposes()) { providerTypes.add(p); } }  return providerTypes; }
[*] target: assertNotNull(s)
[-] pred: org. junit. Assert. assertNotNull ( s )
************************************
************************************
[+] input: format_ShouldFormatNumberValueAsText() { Long value = 9223372036854775807L; String expected = TypeCodecs.BIGINT.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
format(Long value) { return TypeCodecs.BIGINT.format(value); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testInsertSql() { User user = new User(); user.setName("张三"); user.setAge(18); user.setCreateTime(LocalDateTime.now().plusYears(-18)); Map<String, Object> params = BeanUtil.beanToMap(user); params.put("selfSQL", "insert into user(name, age, create_time) values(#{name}, #{age}, #{createTime})"); long insert = commonDao.insertSql(params); Assertions."<AssertPlaceHolder>"; }
insertSql(Map<String, Object> params);  /** * update * @param params 参数 * @return result */ @Delete(" ${selfSQL}
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
************************************
[+] input: test_When_getPaymentDetailsByOrderId_isSuccess() {  TransactionDetails transactionDetails = getMockTransactionDetails();  when(transactionDetailsRepository.findByOrderId(anyLong())).thenReturn(Optional.of(transactionDetails));  //Actual PaymentResponse paymentResponse = paymentService.getPaymentDetailsByOrderId(1);  //Verification verify(transactionDetailsRepository, times(1)).findByOrderId(anyLong());  //Assert "<AssertPlaceHolder>"; assertEquals(transactionDetails.getId(), paymentResponse.getPaymentId()); }
getPaymentDetailsByOrderId(long orderId) {  log.info("PaymentServiceImpl | getPaymentDetailsByOrderId is called");  log.info("PaymentServiceImpl | getPaymentDetailsByOrderId | Getting payment details for the Order Id: {}", orderId);  TransactionDetails transactionDetails = transactionDetailsRepository.findByOrderId(orderId) .orElseThrow(() -> new PaymentServiceCustomException( "TransactionDetails with given id not found", "TRANSACTION_NOT_FOUND"));  PaymentResponse paymentResponse = PaymentResponse.builder() .paymentId(transactionDetails.getId()) .paymentMode(PaymentMode.valueOf(transactionDetails.getPaymentMode())) .paymentDate(transactionDetails.getPaymentDate()) .orderId(transactionDetails.getOrderId()) .status(transactionDetails.getPaymentStatus()) .amount(transactionDetails.getAmount()) .build();  log.info("PaymentServiceImpl | getPaymentDetailsByOrderId | paymentResponse: {}", paymentResponse.toString());  return paymentResponse; }
[*] target: assertNotNull(paymentResponse)
[-] pred: org. junit. Assert. assertNotNull ( paymentResponse )
************************************
************************************
[+] input: testAddLoggingHandler() { Logger rootLogger = Logger.getLogger(""); loggingService.addLoggingHandler(); boolean handlerFound = false; for (Handler handler : rootLogger.getHandlers()) { if (handler instanceof HmcStreamHandler) { handlerFound = true; break; } } "<AssertPlaceHolder>"; }
addLoggingHandler() { Logger.getLogger("").addHandler(new HmcStreamHandler(streamFactory.get(), formatterFactory.get())); }
[*] target: assertTrue(handlerFound)
[-] pred: org. junit. Assert. assertTrue ( handlerFound )
************************************
************************************
[+] input: lambdaWithSingleExpressionAsMultipleLines() { List<String> toVerify = lambda() .withParameterNames("capacity", "hasPower") .withExpression("new Device(capacity, hasPower)") .multiline();  List<String> expected = asList( "(capacity, hasPower) ->", "        new Device(capacity, hasPower)" );  "<AssertPlaceHolder>"; }
multiline() { return asList( generateParameterList() + SPACE + ARROW, INDENT + INDENT + expression ); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("{"a": [{"b":1},{"b":2}]}"));  Iterable<String> nodes = record.generatePaths("/a/*/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(2)); }
generatePaths(String pattern) { List<String> pointers = Arrays.asList(pattern.split("/"));  return generatePaths(node, pointers.subList(1, pointers.size()), ""); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
************************************
[+] input: createShouldCreateLayoutBuilder() { FlexLayoutBuilder builder = FlexLayout.create(); "<AssertPlaceHolder>"; }
create() { return FlexLayout.create(new Component[0]); }
[*] target: assertNotNull(builder)
[-] pred: org. junit. Assert. assertNotNull ( builder )
************************************
************************************
[+] input: parseString() { final EditorHelper editorHelper = new EditorHelper(); final String newValue = "test";  final Object result = editorHelper.edit("java.lang.String", newValue); Assertions."<AssertPlaceHolder>"; }
edit(String type, String newValue) { try { final Class<?> klass = parseType(type); return new Gson().fromJson(newValue, klass); } catch (Exception e) { log.warn("Failed to edit value: {}, {}", type, newValue, e); return null; } }
[*] target: assertEquals(newValue, result)
[-] pred: org. junit. Assert. assertEquals ( newValue, result )
************************************
************************************
[+] input: Exception { final String json; try (Reader reader = new InputStreamReader(Objects.requireNonNull(TestDataBuilder.class .getResourceAsStream("/securityReport.json")))) { json = new BufferedReader(reader).lines().collect(Collectors.joining()); } catch (IOException e) { e.printStackTrace(); return; }  var mapper = new ObjectMapper(); var report = mapper.readValue(json, Report.class);  // Assertions to verify the parsed object assertNotNull(report); assertEquals("azure", report.getModuleNamespace()); assertEquals("foo", report.getModuleName()); assertEquals("1.0.0", report.getModuleVersion()); assertEquals("azurerm", report.getProvider());  var securityReport = report.getSecurityReport(); assertNotNull(securityReport); assertEquals(1, securityReport.get("main.tf").size()); SecurityFinding finding = securityReport.get("main.tf").get(0); assertEquals("AVD-AZU-0014", finding.getId());  TerraformDocumentation documentation = report.getDocumentation(); "<AssertPlaceHolder>"; assertEquals(1, documentation.getProviders().size()); assertEquals("azurerm", documentation.getProviders().get(0).getName()); assertEquals(1, documentation.getResources().size()); assertEquals("mykey", documentation.getResources().get(0).getName()); }
getDocumentation() { return documentation; }
[*] target: assertNotNull(documentation)
[-] pred: org. junit. Assert. assertNotNull ( documentation )
************************************
************************************
[+] input: testNormal() { user = mock(UserDetail.class); String newName = "test_name"; ObjectId id = mock(ObjectId.class); when(taskService.count(any(Query.class),any(UserDetail.class))).thenReturn(1L); doCallRealMethod().when(taskService).checkTaskNameNotError(newName,user,id); boolean actual = taskService.checkTaskNameNotError(newName, user, id); "<AssertPlaceHolder>"; }
checkTaskNameNotError(String newName, UserDetail user, ObjectId id) {  Criteria criteria = Criteria.where("name").is(newName).and(IS_DELETED).ne(true); if (id != null) { criteria.and("_id").ne(id); } Query query = new Query(criteria); long count = count(query, user); return count > 0; }
[*] target: assertEquals(true,actual)
[-] pred: org. junit. Assert. assertEquals ( true, actual )
************************************
************************************
[+] input: testEmpty() { when(webHookController.success(null)).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(true); when(webHookService.close(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.closeOneWebHookByHookId("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.closeOneWebHookByHookId("id"); Assertions."<AssertPlaceHolder>"; Assertions.assertNull(hook.getData()); verify(webHookController).success(null); verify(webHookService).close(any(String[].class), any(UserDetail.class)); }
closeOneWebHookByHookId(@PathVariable(value = "id") String hookId) { List<WebHookInfoVo> closed = webHookService.close(new String[]{hookId}, getLoginUser()); if (closed.isEmpty()) { return success(null); } return success(closed.get(0)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
************************************
[+] input: testGetByAddress() { Worker worker = workerDAO.getByAddress("127.0.0.1:25300");  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("xxx-service", worker.getAppName()); }
getByAddress(String address);
[*] target: assertNotNull(worker)
[-] pred: org. junit. Assert. assertNotNull ( worker )
************************************
************************************
[+] input: shouldAddRowDeselectListener() { table.onItemDeselect(event -> { });  List<EventListener<TableItemDeselectEvent>> listeners = table.getEventListeners(TableItemDeselectEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemDeselectEvent>); }
onItemDeselect( EventListener<TableItemDeselectEvent<T>> listener) { return addItemDeselectListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testGetServiceRoleDeployOverview() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Run the test final Result result = serviceInstallServiceImplUnderTest.getServiceRoleDeployOverview(0);  // Verify the results "<AssertPlaceHolder>"; }
getServiceRoleDeployOverview(Integer clusterId) { ClusterInfoEntity clusterInfo = clusterInfoService.getById(clusterId); HashMap<String, List<String>> map = (HashMap<String, List<String>>) CacheUtils.get( clusterInfo.getClusterCode() + Constants.UNDERLINE + Constants.SERVICE_ROLE_HOST_MAPPING); return Result.success(map); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: givenStaticMethodAndNoTypeArguments() { String toVerify = methodCall() .withType(BIG_DECIMAL) .withMethodName("valueOf") .withArguments("10") .generate();  String expected = "java.math.BigDecimal.valueOf(10)";  "<AssertPlaceHolder>"; }
generate() { return objectPathOrTypeGenerator.generate() + PERIOD + generateOptionalTypeArguments() + methodName + arguments.stream().collect(joining(SEPARATOR, OPEN_PARENTHESIS, CLOSE_PARENTHESIS)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testSaveServiceConfig() { // Setup final ServiceConfig serviceConfig = new ServiceConfig(); serviceConfig.setName("name"); serviceConfig.setValue("value"); serviceConfig.setLabel("label"); serviceConfig.setDescription("description"); serviceConfig.setRequired(false); serviceConfig.setType("type"); serviceConfig.setConfigurableInWizard(false); serviceConfig.setDefaultValue("defaultValue"); serviceConfig.setMinValue(0); serviceConfig.setMaxValue(0); serviceConfig.setUnit("unit"); serviceConfig.setHidden(false); serviceConfig.setSelectValue(Arrays.asList("value")); serviceConfig.setConfigType("configType"); final List<ServiceConfig> list = Arrays.asList(serviceConfig); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Configure FrameServiceService.getServiceByFrameCodeAndServiceName(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); when(mockFrameService.getServiceByFrameCodeAndServiceName("clusterFrame", "serviceName")).thenReturn( frameServiceEntity);  // Configure ClusterVariableService.getVariableByVariableName(...). final ClusterVariable clusterVariable = new ClusterVariable(); clusterVariable.setId(0); clusterVariable.setClusterId(0); clusterVariable.setVariableName("variableName"); clusterVariable.setVariableValue("variableValue"); when(mockVariableService.getVariableByVariableName("variableName", 0)).thenReturn(clusterVariable);  when(mockVariableService.updateById(new ClusterVariable())).thenReturn(false); when(mockVariableService.save(new ClusterVariable())).thenReturn(false);  // Configure ClusterHostService.list(...). final ClusterHostEntity clusterHostEntity = new ClusterHostEntity(); clusterHostEntity.setId(0); clusterHostEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setHostname("hostname"); clusterHostEntity.setIp("ip"); clusterHostEntity.setRack("rack"); clusterHostEntity.setCoreNum(0); clusterHostEntity.setTotalMem(0); clusterHostEntity.setTotalDisk(0); clusterHostEntity.setUsedMem(0); clusterHostEntity.setUsedDisk(0); clusterHostEntity.setAverageLoad("averageLoad"); clusterHostEntity.setCheckTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setClusterId(0); clusterHostEntity.setHostState(0); clusterHostEntity.setManaged(MANAGED.YES); final List<ClusterHostEntity> clusterHostEntities = Arrays.asList(clusterHostEntity); when(mockHostService.list(any(QueryWrapper.class))).thenReturn(clusterHostEntities);  // Configure ClusterServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); when(mockServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(0, "serviceName")).thenReturn( clusterServiceInstanceEntity);  when(mockServiceInstanceService.save(new ClusterServiceInstanceEntity())).thenReturn(false); when(mockRoleGroupService.save(new ClusterServiceInstanceRoleGroup())).thenReturn(false); when(mockGroupConfigService.save(new ClusterServiceRoleGroupConfig())).thenReturn(false);  // Configure ClusterServiceInstanceRoleGroupService.getRoleGroupByServiceInstanceId(...). final ClusterServiceInstanceRoleGroup clusterServiceInstanceRoleGroup = new ClusterServiceInstanceRoleGroup(); clusterServiceInstanceRoleGroup.setId(0); clusterServiceInstanceRoleGroup.setRoleGroupName("默认角色组"); clusterServiceInstanceRoleGroup.setServiceInstanceId(0); clusterServiceInstanceRoleGroup.setServiceName("serviceName"); clusterServiceInstanceRoleGroup.setClusterId(0); clusterServiceInstanceRoleGroup.setRoleGroupType("auto"); when(mockRoleGroupService.getRoleGroupByServiceInstanceId(0)).thenReturn(clusterServiceInstanceRoleGroup);  // Configure ClusterServiceRoleGroupConfigService.getConfigByRoleGroupId(...). final ClusterServiceRoleGroupConfig clusterServiceRoleGroupConfig = new ClusterServiceRoleGroupConfig(); clusterServiceRoleGroupConfig.setId(0); clusterServiceRoleGroupConfig.setRoleGroupId(0); clusterServiceRoleGroupConfig.setConfigJson("configJson"); clusterServiceRoleGroupConfig.setConfigJsonMd5("configJsonMd5"); clusterServiceRoleGroupConfig.setConfigVersion(0); clusterServiceRoleGroupConfig.setConfigFileJson("configFileJson"); clusterServiceRoleGroupConfig.setConfigFileJsonMd5("configFileJsonMd5"); clusterServiceRoleGroupConfig.setClusterId(0); clusterServiceRoleGroupConfig.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setServiceName("serviceName"); when(mockGroupConfigService.getConfigByRoleGroupId(0)).thenReturn(clusterServiceRoleGroupConfig);  when(mockRoleGroupService.count(any(QueryWrapper.class))).thenReturn(0); when(mockServiceInstanceService.updateById(new ClusterServiceInstanceEntity())).thenReturn(false);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveServiceConfig(0, "serviceName", list, 0);  // Verify the results "<AssertPlaceHolder>"; verify(mockVariableService).updateById(new ClusterVariable()); verify(mockVariableService).save(new ClusterVariable()); verify(mockServiceInstanceService).save(new ClusterServiceInstanceEntity()); verify(mockRoleGroupService).save(new ClusterServiceInstanceRoleGroup()); verify(mockGroupConfigService).save(new ClusterServiceRoleGroupConfig()); verify(mockRoleInstanceService).updateToNeedRestart(0); verify(mockServiceInstanceService).updateById(new ClusterServiceInstanceEntity()); }
saveServiceConfig( Integer clusterId, String serviceName, List<ServiceConfig> list, Integer roleGroupId) { ClusterInfoEntity clusterInfo = clusterInfoService.getById(clusterId); ServiceConfigMap.put( clusterInfo.getClusterCode() + Constants.UNDERLINE + serviceName + Constants.CONFIG, list); HashMap<String, ServiceConfig> map = new HashMap<>(); Map<String, String> globalVariables = GlobalVariables.get(clusterId); // handler config ServiceRoleStrategy serviceRoleHandler = ServiceRoleStrategyContext.getServiceRoleHandler(serviceName); if (Objects.nonNull(serviceRoleHandler)) { serviceRoleHandler.handlerConfig(clusterId, list, ServiceRoleStrategyContext.getServiceName(serviceName)); } // add variable FrameServiceEntity frameServiceEntity = frameService.getServiceByFrameCodeAndServiceName( clusterInfo.getClusterFrame(), serviceName); Boolean configUpdate = false; for (ServiceConfig serviceConfig : list) { String configName = serviceConfig.getName(); String variableName = "${" + configName + "}"; String variableValue = String.valueOf(serviceConfig.getValue()); // add to global variable if (Constants.INPUT.equals(serviceConfig.getType())) { addToGlobalVariable(clusterId, serviceName, variableName, variableValue); } globalVariables.put(variableName, variableValue); map.put(serviceConfig.getName(), serviceConfig); } // update config-file HashMap<Generators, List<ServiceConfig>> configFileMap = new HashMap<>(); buildConfigFileMap(serviceName, clusterInfo, map, configFileMap); if (PROMETHEUS.equals(serviceName.toLowerCase())) { logger.info("add worker and node to prometheus"); // add host node to prometheus addHostNodeToPrometheus(clusterId, configFileMap); } ClusterServiceInstanceEntity serviceInstanceEntity = serviceInstanceService.getServiceInstanceByClusterIdAndServiceName( clusterId, serviceName); if (Objects.isNull(serviceInstanceEntity)) { serviceInstanceEntity = saveServiceInstance(clusterId, serviceName, frameServiceEntity); ClusterServiceInstanceRoleGroup clusterServiceInstanceRoleGroup = saveServiceInstanceRoleGroup(clusterId, serviceName, serviceInstanceEntity); saveServiceRoleGroupConfig( clusterId, serviceName, list, configFileMap, clusterServiceInstanceRoleGroup); CacheUtils.put( "UseRoleGroup_" + serviceInstanceEntity.getId(), clusterServiceInstanceRoleGroup.getId()); } else { configUpdate = isConfigNeedUpdate(serviceInstanceEntity, list); ClusterServiceRoleGroupConfig roleGroupConfig; if (Objects.isNull(roleGroupId)) { ClusterServiceInstanceRoleGroup roleGroup = roleGroupService.getRoleGroupByServiceInstanceId( serviceInstanceEntity.getId()); roleGroupConfig = groupConfigService.getConfigByRoleGroupId(roleGroup.getId()); } else { roleGroupConfig = groupConfigService.getConfigByRoleGroupId(roleGroupId); } CacheUtils.put( "UseRoleGroup_" + serviceInstanceEntity.getId(), roleGroupConfig.getRoleGroupId()); if (configUpdate) { ClusterServiceRoleGroupConfig newRoleGroupConfig = new ClusterServiceRoleGroupConfig(); if (Objects.isNull(roleGroupId)) { ClusterServiceInstanceRoleGroup roleGroup = saveNewRoleGroup(serviceInstanceEntity); newRoleGroupConfig.setConfigVersion(1); newRoleGroupConfig.setRoleGroupId(roleGroup.getId()); CacheUtils.put( "UseRoleGroup_" + serviceInstanceEntity.getId(), roleGroup.getId()); } else { newRoleGroupConfig.setConfigVersion(roleGroupConfig.getConfigVersion() + 1); newRoleGroupConfig.setRoleGroupId(roleGroupConfig.getRoleGroupId()); roleInstanceService.updateToNeedRestart(roleGroupId); roleGroupService.updateToNeedRestart(roleGroupId); serviceInstanceEntity.setNeedRestart(NeedRestart.YES); } newRoleGroupConfig.setClusterId(clusterId); newRoleGroupConfig.setCreateTime(new Date()); newRoleGroupConfig.setUpdateTime(new Date()); newRoleGroupConfig.setServiceName(serviceInstanceEntity.getServiceName()); buildConfig(list, configFileMap, newRoleGroupConfig); groupConfigService.save(newRoleGroupConfig); } // update service instance serviceInstanceEntity.setUpdateTime(new Date()); serviceInstanceEntity.setLabel(frameServiceEntity.getLabel()); serviceInstanceService.updateById(serviceInstanceEntity); } return Result.success(); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testDecodeKey() {  String key = "testKey"; ByteBuffer buffer = ByteBuffer.wrap(key.getBytes(StandardCharsets.UTF_8)); String decodedKey = codec.decodeKey(buffer);  "<AssertPlaceHolder>"; }
decodeKey(ByteBuffer byteBuffer) { return StandardCharsets.UTF_8.decode(byteBuffer).toString(); }
[*] target: assertEquals(key, decodedKey)
[-] pred: org. junit. Assert. assertEquals ( key, decodedKey )
************************************
************************************
[+] input: shouldReturnEmptyJwtResponseWithNoUserDetails() { JwtResponseBuilder jwtResponse = JwtResponseBuilder.buildJwtResponse(JWT_TOKEN); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(StringUtils.isBlank(jwtResponse.getAccessToken())); }
buildJwtResponse(final String jwtToken) { return buildJwtResponse(jwtToken, null); }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
************************************
[+] input: whenObjectAreSame_ThenEqualsReturnsTrue() { GroupKey id1 = new GroupKey("group-1");  "<AssertPlaceHolder>"; }
equals(@Nullable Object o) { if (this == o) { return true; }  if (o == null || getClass() != o.getClass()) { return false; }  GroupKey other = (GroupKey) o; return this.id.equals(other.id); }
[*] target: assertTrue(id1.equals(id1))
[-] pred: org. junit. Assert. assertTrue ( id1. equals ( id1 ) )
************************************
************************************
[+] input: shouldReturnSalaryWithIncrement() { //given double percentualIncrement = 10; //when BigDecimal actual = this.employee.incremetSalary(percentualIncrement); //then BigDecimal expected = BigDecimal.valueOf(110.0); Assertions."<AssertPlaceHolder>"; }
incremetSalary(double percentageIncrease) { BigDecimal percentagemIncreaseBigDecimal = BigDecimal.valueOf(1 + (percentageIncrease / 100)); return this.salary.multiply(percentagemIncreaseBigDecimal); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: givenValidClassAndMethodsContainingValidAccumulatorAndValidFinalizer() { ContainingClass containingClass = getValidContainingClass();  Method accumulator = getAccumulator( withAnnotations(ACCUMULATOR_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withInputTypeConstructor(LIST.with(placeholder().covariant())), withPartiallyAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().covariant())), withAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().invariant())) );  Method finalizer = getFinalizer( withAnnotations(FINALIZER_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withToFinalizeTypeConstructor(ARRAY_LIST.with(placeholder().covariant())), withFinalizedTypeConstructor(LIST.with(placeholder().invariant())) );  Validated<Log, Validator.Result> expected = Validated.valid( Validator.Result.of( containingClass.getTypeParameters(), Optional.empty(), Accumulator.of( accumulator.getName(), LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().invariant()) ), Optional.of(Finalizer.of(finalizer.getName(), ARRAY_LIST.with(placeholder().covariant()), LIST.with(placeholder().invariant()))) ) );  Validated<Log, Validator.Result> toVerify = Validator.validate(containingClass, asList(accumulator, finalizer), new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
of(List<TypeParameter> classTypeParameters, Optional<Initializer> optionalInitializer, Accumulator accumulator, Optional<Finalizer> optionalFinalizer) { return new Result(classTypeParameters, optionalInitializer, accumulator, optionalFinalizer); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testGetDiscountAmount_withPercentageDiscountType() { given(couponCampaign.getDiscountType()).willReturn(DiscountType.PERCENTAGE); given(couponCampaign.getDiscountAmount()).willReturn(discountPercentage); given(couponCampaign.getMinimumCost()).willReturn(minimumCost);  Money supplyAmount = Money.wons(60000L); Money expectedDiscountAmount = Money.wons(18000L); Money actualDiscountAmount = issuedCoupon.getDiscountAmount(supplyAmount);  "<AssertPlaceHolder>"; }
getDiscountAmount(Money supplyAmount) { if (couponCampaign.getDiscountType().equals(DiscountType.AMOUNT)) { // 정액 할인 return checkSupplyAmount( supplyAmount, couponCampaign.getDiscountAmount(), couponCampaign.getMinimumCost()); } // 정률 할인 Long discountAmount = supplyAmount.getDiscountAmountByPercentage( supplyAmount, couponCampaign.getDiscountAmount()); return checkSupplyAmount(supplyAmount, discountAmount, couponCampaign.getMinimumCost()); }
[*] target: assertEquals(expectedDiscountAmount, actualDiscountAmount)
[-] pred: org. junit. Assert. assertEquals ( expectedDiscountAmount, actualDiscountAmount )
************************************
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsInstant() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Instant result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { String stringValue = TypeCodecs.TEXT.decode(bytes, protocolVersion); return LocalDateTime.parse(stringValue, formatter).toInstant(zoneOffset); }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "10"; Integer expected = TypeCodecs.INT.parse(valueAsString); Integer result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
parse(String value) { return value == null ? null : Integer.parseInt(value); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: test_error4() { Exception error = null; try { DefaultJSONParser parser = new DefaultJSONParser("]"); parser.parse(); } catch (Exception ex) { error = ex; } "<AssertPlaceHolder>"; }
parse() { return reader.readAny(); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: test_error11() { Exception error = null; try { DefaultJSONParser parser = new DefaultJSONParser("{]"); parser.parse(); } catch (Exception ex) { error = ex; } "<AssertPlaceHolder>"; } }
parse() { return reader.readAny(); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); String expected = TypeCodecs.TIMESTAMP.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
format(String value) { Instant instantValue = Instant.ofEpochMilli(Long.parseLong(value)); return TypeCodecs.TIMESTAMP.format(instantValue); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: withoutUpperBounds() { TypeParameter typeParameter = T.asTypeParameter(); String toVerify = generateFrom(typeParameter); String expected = "T"; "<AssertPlaceHolder>"; }
generateFrom(TypeParameter typeParameter) { return typeParameter(typeParameter).generate(); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: SQLException { RdsHostListProvider.clearAll();  RdsHostListProvider provider1 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doReturn(topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsHostListProvider.topologyCache.size());  final List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  RdsHostListProvider provider2 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://instance-a-3.xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertEquals(1, RdsHostListProvider.topologyCache.size()); }
refresh(final Connection connection) throws SQLException { init(); final Connection currentConnection = connection != null ? connection : this.hostListProviderService.getCurrentConnection();  final FetchTopologyResult results = getTopology(currentConnection, false); LOGGER.finest(() -> Utils.logTopology(results.hosts, results.isCachedData ? "[From cache] " : ""));  this.hostList = results.hosts; return Collections.unmodifiableList(hostList); }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
************************************
[+] input: getAclsEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByEnv(TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(TestConstants.ACLS_COUNT_BY_ENV_ID_INTEGERE); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when(manageDatabase.getEnvsOfTenantsMap()) .thenReturn(Map.of(TestConstants.TENANT_ID, List.of(TestConstants.ENV_ID))); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getAclsEnvOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
getAclsEnvOverview(Integer teamId, Integer tenantId) {  List<CommonUtilsService.ChartsOverviewItem<String, Integer>> aclsPerEnvList = manageDatabase.getHandleDbRequests().getAclsCountByEnv(teamId, tenantId); String title = ANALYTICS_106; if (teamId != null) { title += " (" + manageDatabase.getTeamNameFromTeamId(tenantId, teamId) + ")"; }  // tenant filtering try { List<String> allowedEnvIdList = manageDatabase.getEnvsOfTenantsMap().get(tenantId); if (aclsPerEnvList != null) { aclsPerEnvList = aclsPerEnvList.stream() .filter(mapObj -> allowedEnvIdList.contains(mapObj.getxValue())) .collect(Collectors.toList()); aclsPerEnvList = aclsPerEnvList.stream() .map(item -> item.transformX(x -> getEnvName(item.getxValue()))) .collect(Collectors.toList()); } } catch (Exception e) { log.error("No environments/clusters found.", e); aclsPerEnvList = new ArrayList<>(); }  return commonUtilsService.getChartsJsOverview( aclsPerEnvList, title, MapConstants.CLUSTER_KEY, "Clusters", "Acls", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldTriggerAutomaticSnapshot_ValidCronExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "0 */10 * * * ?", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
shouldTriggerAutomaticSnapshot( SnapshotType snapshotType, String automaticTriggerExpression, Instant lastTrigger) { if (StringUtils.isBlank(automaticTriggerExpression)) { return false; } // automaticTriggerExpression was configured by the user  Optional<Duration> interval = interpretAsInterval(automaticTriggerExpression); Optional<CronExpression> cron = interpretAsCron(automaticTriggerExpression);  // This should never happen. The string cannot be both a valid Duration and a cron // expression at the same time. if (interval.isPresent() && cron.isPresent()) { LOG.error( "Something went wrong with the automatic {} trigger expression {}. This setting cannot be simultaneously a valid Duration and a cron expression.", snapshotType, automaticTriggerExpression); return false; }  if (interval.isPresent()) { return shouldTriggerIntervalBasedSnapshot(snapshotType, interval.get(), lastTrigger); } else if (cron.isPresent()) { return shouldTriggerCronBasedSnapshot( snapshotType, cron.get(), lastTrigger, Instant.now()); } else { LOG.warn( "Automatic {} triggering is configured, but the trigger expression '{}' is neither a valid Duration, nor a cron expression.", snapshotType, automaticTriggerExpression); return false; } }
[*] target: assertTrue(shouldTrigger)
[-] pred: org. junit. Assert. assertTrue ( shouldTrigger )
************************************
************************************
[+] input: testUpdateSql() { User user = new User(); user.setName("张三"); user.setId(1L); Map<String, Object> params = BeanUtil.beanToMap(user); params.put("selfSQL", "update user set name = #{name} where id = #{id}"); long update = commonDao.updateSql(params); Assertions."<AssertPlaceHolder>"; }
updateSql(Map<String, Object> params);  /** * delete * @param params 参数 * @return result */ @Update(" ${selfSQL}
[*] target: assertEquals(1, update)
[-] pred: org. junit. Assert. assertEquals ( 1, update )
************************************
************************************
[+] input: testGetTableNameOnlyHaveMessageEntity() { when(tapdataEvent.getMessageEntity()).thenReturn(messageEntity); when(tapdataEvent.getTapEvent()).thenReturn(null); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); verify(tapdataEvent, new Times(1)).getMessageEntity(); "<AssertPlaceHolder>"; assertEquals(TABLE_NAME1, tableName); }
getTableName(TapdataEvent tapdataEvent) { if (null == tapdataEvent) return ""; MessageEntity messageEntity = tapdataEvent.getMessageEntity(); TapEvent tapEvent = tapdataEvent.getTapEvent(); if (null != messageEntity) { return messageEntity.getTableName(); } else { if (tapEvent instanceof TapBaseEvent) { return ((TapBaseEvent) tapEvent).getTableId(); } else { return ""; } } }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
************************************
[+] input: testFailWithErrorType() { Result result = Result.fail(SystemErrorType.GATEWAY_ERROR); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.GATEWAY_ERROR.getCode()); }
isFail() { return !isSuccess(); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
************************************
[+] input: withoutAnyTypeParameters() { String toVerify = toTest().getTypeParametersGenerator().generate(); String expected = ""; "<AssertPlaceHolder>"; }
generate() { if (isEmpty()) { return ""; } else { return typeParameters.stream().map(TypeParameterGenerator::typeParameter).map(TypeParameterGenerator::generate).collect(joining(SEPARATOR, OPEN_ANGULAR_BRACKET, CLOSE_ANGULAR_BRACKET)); } }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testGetLibPathNormal() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(urls); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(stream, libPath); Assertions.assertEquals(mockPath, ato.get()); verify((URLClassLoader)classLoader, times(1)).getURLs(); assertVerify(1, 1, 1); }
getLibPath(String jarName, AtomicReference<String> ato) throws IOException { InputStream pyJarPath = null; ClassLoader classLoader = getCurrentThreadContextClassLoader(); if (classLoader instanceof URLClassLoader) { URL[] urls = ((URLClassLoader) classLoader).getURLs(); for (URL url : urls) { String jarPath = url.getPath(); if (jarPath.contains(jarName)) { pyJarPath = url.openStream(); ato.set(jarPath); break; } } } return pyJarPath; }
[*] target: assertNotNull(libPath)
[-] pred: org. junit. Assert. assertNotNull ( libPath )
************************************
************************************
[+] input: parse_ShouldParseStringToBigDecimalValue() { String stringValue = "12345.6789"; BigDecimal expectedValue = TypeCodecs.DECIMAL.parse(stringValue); BigDecimal result = codec.parse(stringValue); Assertions."<AssertPlaceHolder>"; }
parse(String value) { return value == null ? null : new BigDecimal(value); }
[*] target: assertEquals(expectedValue, result)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, result )
************************************
************************************
[+] input: testTapEvent2MessageNullTapRecordEvent() { MessageEntity actual = hazelcastBaseNode.tapEvent2Message(null); "<AssertPlaceHolder>"; }
tapEvent2Message(TapRecordEvent dataEvent) { if (null == dataEvent) return null; MessageEntity messageEntity = new MessageEntity(); Map<String, Object> before = TapEventUtil.getBefore(dataEvent); messageEntity.setBefore(before); Map<String, Object> after = TapEventUtil.getAfter(dataEvent); messageEntity.setAfter(after); messageEntity.setOp(TapEventUtil.getOp(dataEvent)); messageEntity.setTableName(dataEvent.getTableId()); messageEntity.setTimestamp(dataEvent.getReferenceTime()); messageEntity.setTime(dataEvent.getTime()); messageEntity.setInfo(dataEvent.getInfo()); return messageEntity; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: format_ShouldFormatInstantValueAsString() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); String expected = TypeCodecs.TIMESTAMP.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
format(String value) { Instant instantValue = LocalDateTime.parse(value, formatter).toInstant(zoneOffset); return TypeCodecs.TIMESTAMP.format(instantValue); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testFilterConverge_RestoredAlert() {  testAlert.setStatus(CommonConstants.ALERT_STATUS_CODE_RESTORED); boolean result = alarmConvergeReduce.filterConverge(testAlert);  "<AssertPlaceHolder>"; }
filterConverge(Alert currentAlert) { // ignore monitor status auto recover notice if ((currentAlert.getTags() != null && currentAlert.getTags().containsKey(CommonConstants.IGNORE)) || currentAlert.getStatus() == CommonConstants.ALERT_STATUS_CODE_RESTORED) { // restored alert boolean isHasIgnore = false; Map<String, String> tags = currentAlert.getTags(); if (Objects.requireNonNull(tags).containsKey(CommonConstants.IGNORE)) { isHasIgnore = true; tags.remove(CommonConstants.IGNORE); } int alertHash = Objects.hash(CommonConstants.ALERT_PRIORITY_CODE_CRITICAL) + Arrays.hashCode(tags.keySet().toArray(new String[0])) + Arrays.hashCode(tags.values().toArray(new String[0])); converageAlertMap.remove(alertHash); alertHash = Objects.hash(CommonConstants.ALERT_PRIORITY_CODE_EMERGENCY) + Arrays.hashCode(tags.keySet().toArray(new String[0])) + Arrays.hashCode(tags.values().toArray(new String[0])); converageAlertMap.remove(alertHash); alertHash = Objects.hash(CommonConstants.ALERT_PRIORITY_CODE_WARNING) + Arrays.hashCode(tags.keySet().toArray(new String[0])) + Arrays.hashCode(tags.values().toArray(new String[0])); converageAlertMap.remove(alertHash); if (isHasIgnore) { tags.put(CommonConstants.IGNORE, CommonConstants.IGNORE); } return true; }  CommonCacheService<String, Object> convergeCache = CacheFactory.getAlertConvergeCache(); List<AlertConverge> alertConvergeList = (List<AlertConverge>) convergeCache.get(CommonConstants.CACHE_ALERT_CONVERGE); if (alertConvergeList == null) { alertConvergeList = alertConvergeDao.findAll(); // matchAll is in the last alertConvergeList.sort((item1, item2) -> { if (item1.isMatchAll()) { return 1; } else if (item2.isMatchAll()) { return -1; } else { return 0; } }); convergeCache.put(CommonConstants.CACHE_ALERT_CONVERGE, alertConvergeList); } for (AlertConverge alertConverge : alertConvergeList) { if (!alertConverge.isEnable()) { continue; } boolean match = alertConverge.isMatchAll(); if (!match) { List<TagItem> tags = alertConverge.getTags(); if (currentAlert.getTags() != null && !currentAlert.getTags().isEmpty()) { Map<String, String> alertTagMap = currentAlert.getTags(); match = tags.stream().anyMatch(item -> { if (alertTagMap.containsKey(item.getName())) { String tagValue = alertTagMap.get(item.getName()); if (tagValue == null && item.getValue() == null) { return true; } else { return tagValue != null && tagValue.equals(item.getValue()); } } else { return false; } }); } else { match = true; } if (match && alertConverge.getPriorities() != null && !alertConverge.getPriorities().isEmpty()) { match = alertConverge.getPriorities().stream().anyMatch(item -> item != null && item == currentAlert.getPriority()); } } if (match) { long evalInterval = alertConverge.getEvalInterval() * 1000L; long now = System.currentTimeMillis(); if (evalInterval <= 0) { return true; } int alertHash = Objects.hash(currentAlert.getPriority()) + Arrays.hashCode(currentAlert.getTags().keySet().toArray(new String[0])) + Arrays.hashCode(currentAlert.getTags().values().toArray(new String[0])); Alert preAlert = converageAlertMap.get(alertHash); if (preAlert == null) { currentAlert.setTimes(1); currentAlert.setFirstAlarmTime(now); currentAlert.setLastAlarmTime(now); converageAlertMap.put(alertHash, currentAlert.clone()); return true; } else { if (now - preAlert.getFirstAlarmTime() < evalInterval) { preAlert.setTimes(preAlert.getTimes() + 1); preAlert.setLastAlarmTime(now); return false; } else { currentAlert.setTimes(preAlert.getTimes()); if (preAlert.getTimes() == 1) { currentAlert.setFirstAlarmTime(now); } else { currentAlert.setFirstAlarmTime(preAlert.getFirstAlarmTime()); } currentAlert.setLastAlarmTime(now); preAlert.setFirstAlarmTime(now); preAlert.setLastAlarmTime(now); preAlert.setTimes(1); return true; } } } } return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: Exception { when(multipartFile.getBytes()).thenReturn("{"version":"1.2.0"}".getBytes()); try(MockedStatic<ParseRelMig> prm = Mockito.mockStatic(ParseRelMig.class)) { prm.when(() -> ParseRelMig.redirect(param)).thenCallRealMethod(); ParseRelMig redirect = ParseRelMig.redirect(param); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(ParseBaseVersionRelMigImpl.class.getName(), redirect.getClass().getName()); } }
redirect(ParseParam param) { try { MultipartFile multipartFile = param.getMultipartFile(); String relMig = new String(multipartFile.getBytes()); param.setRelMigStr(relMig); Map<String, Object> relMigInfo = (Map<String, Object>) new ObjectMapper().readValue(param.getRelMigStr(), Map.class); param.setRelMigInfo(relMigInfo); String version = String.valueOf(relMigInfo.get(KeyWords.VERSION)); Class<? extends ParseRelMig> instance = ParseRelMigFileVersionMapping.getInstance(version); Constructor<? extends ParseRelMig> declaredConstructor = instance.getDeclaredConstructor(ParseParam.class); return declaredConstructor.newInstance(param); } catch (Exception e) { throw new BizException("relMig.parse.failed", e.getMessage()); } }
[*] target: assertNotNull(redirect)
[-] pred: org. junit. Assert. assertNotNull ( redirect )
************************************
************************************
[+] input: BBjException { busyIndicator.setBackdropVisible(true);  verify(mockIndicator, atLeast(1)).setAttribute("no-backdrop", "false");  when(mockIndicator.getAttribute("no-backdrop")).thenReturn("false"); "<AssertPlaceHolder>"; }
isBackdropVisible() { String attribute = getAttribute(ATTR_NO_BACKDROP); return attribute == null || attribute.equals(FALSE); }
[*] target: assertTrue(busyIndicator.isBackdropVisible())
[-] pred: org. junit. Assert. assertTrue ( busyIndicator. isBackdropVisible ( ) )
************************************
************************************
[+] input: shouldMaskDate() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  LocalDate input = LocalDate.now(); String mask = "%Dz-%Mz-%Yl"; String expected = "12-06-2023";  int julian = new JulianLocaleDateTransformer().transformToComponent(input); when(bridge.maskDateTime(julian, null, mask)).thenReturn(expected);  String result = MaskDecorator.forDate(input, mask);  "<AssertPlaceHolder>"; } }
forDate(LocalDate input, String mask) { Objects.requireNonNull(input, INPUT_CANNOT_BE_NULL); Objects.requireNonNull(mask, MASK_CANNOT_BE_NULL);  Environment env = Environment.getCurrent(); JulianLocaleDateTransformer transformer = new JulianLocaleDateTransformer(); int julian = transformer.transformToComponent(input);  return env.getWebforjHelper().maskDateTime(julian, null, mask); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testDecodeValue() {  CollectRep.MetricsData metricsData = Mockito.mock(CollectRep.MetricsData.class); byte[] bytes = new byte[] {1, 2, 3};  ByteBuffer buffer = ByteBuffer.wrap(bytes);  try { Mockito.mockStatic(CollectRep.MetricsData.class); Mockito.when(CollectRep.MetricsData.parseFrom(buffer)).thenReturn(metricsData);  CollectRep.MetricsData decodedValue = codec.decodeValue(buffer);  "<AssertPlaceHolder>"; } catch (Exception e) { log.error(e.getMessage()); fail("Exception thrown during decodeValue test"); } finally { Mockito.clearAllCaches(); } }
decodeValue(ByteBuffer byteBuffer) { try { return CollectRep.MetricsData.parseFrom(byteBuffer); } catch (Exception e) { log.error(e.getMessage()); return null; } }
[*] target: assertEquals(metricsData, decodedValue)
[-] pred: org. junit. Assert. assertEquals ( metricsData, decodedValue )
************************************
************************************
[+] input: whenObjectAreSame_ThenEqualsReturnsTrue() { SampleEntitlementId id1 = new SampleEntitlementId("cat", "jit-1");  "<AssertPlaceHolder>"; }
equals(@Nullable Object o) { if (this == o) { return true; }  if (o == null || getClass() != o.getClass()) { return false; }  var that = (EntitlementId) o; return this.catalog().equals(that.catalog()) && this.id().equals(that.id()); }
[*] target: assertTrue(id1.equals(id1))
[-] pred: org. junit. Assert. assertTrue ( id1. equals ( id1 ) )
************************************
************************************
[+] input: testSaveServiceConfig_ClusterHostServiceReturnsNoItems() { // Setup final ServiceConfig serviceConfig = new ServiceConfig(); serviceConfig.setName("name"); serviceConfig.setValue("value"); serviceConfig.setLabel("label"); serviceConfig.setDescription("description"); serviceConfig.setRequired(false); serviceConfig.setType("type"); serviceConfig.setConfigurableInWizard(false); serviceConfig.setDefaultValue("defaultValue"); serviceConfig.setMinValue(0); serviceConfig.setMaxValue(0); serviceConfig.setUnit("unit"); serviceConfig.setHidden(false); serviceConfig.setSelectValue(Arrays.asList("value")); serviceConfig.setConfigType("configType"); final List<ServiceConfig> list = Arrays.asList(serviceConfig); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Configure FrameServiceService.getServiceByFrameCodeAndServiceName(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); when(mockFrameService.getServiceByFrameCodeAndServiceName("clusterFrame", "serviceName")).thenReturn( frameServiceEntity);  // Configure ClusterVariableService.getVariableByVariableName(...). final ClusterVariable clusterVariable = new ClusterVariable(); clusterVariable.setId(0); clusterVariable.setClusterId(0); clusterVariable.setVariableName("variableName"); clusterVariable.setVariableValue("variableValue"); when(mockVariableService.getVariableByVariableName("variableName", 0)).thenReturn(clusterVariable);  when(mockVariableService.updateById(new ClusterVariable())).thenReturn(false); when(mockVariableService.save(new ClusterVariable())).thenReturn(false); when(mockHostService.list(any(QueryWrapper.class))).thenReturn(Collections.emptyList());  // Configure ClusterServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); when(mockServiceInstanceService.getServiceInstanceByClusterIdAndServiceName(0, "serviceName")).thenReturn( clusterServiceInstanceEntity);  when(mockServiceInstanceService.save(new ClusterServiceInstanceEntity())).thenReturn(false); when(mockRoleGroupService.save(new ClusterServiceInstanceRoleGroup())).thenReturn(false); when(mockGroupConfigService.save(new ClusterServiceRoleGroupConfig())).thenReturn(false);  // Configure ClusterServiceInstanceRoleGroupService.getRoleGroupByServiceInstanceId(...). final ClusterServiceInstanceRoleGroup clusterServiceInstanceRoleGroup = new ClusterServiceInstanceRoleGroup(); clusterServiceInstanceRoleGroup.setId(0); clusterServiceInstanceRoleGroup.setRoleGroupName("默认角色组"); clusterServiceInstanceRoleGroup.setServiceInstanceId(0); clusterServiceInstanceRoleGroup.setServiceName("serviceName"); clusterServiceInstanceRoleGroup.setClusterId(0); clusterServiceInstanceRoleGroup.setRoleGroupType("auto"); when(mockRoleGroupService.getRoleGroupByServiceInstanceId(0)).thenReturn(clusterServiceInstanceRoleGroup);  // Configure ClusterServiceRoleGroupConfigService.getConfigByRoleGroupId(...). final ClusterServiceRoleGroupConfig clusterServiceRoleGroupConfig = new ClusterServiceRoleGroupConfig(); clusterServiceRoleGroupConfig.setId(0); clusterServiceRoleGroupConfig.setRoleGroupId(0); clusterServiceRoleGroupConfig.setConfigJson("configJson"); clusterServiceRoleGroupConfig.setConfigJsonMd5("configJsonMd5"); clusterServiceRoleGroupConfig.setConfigVersion(0); clusterServiceRoleGroupConfig.setConfigFileJson("configFileJson"); clusterServiceRoleGroupConfig.setConfigFileJsonMd5("configFileJsonMd5"); clusterServiceRoleGroupConfig.setClusterId(0); clusterServiceRoleGroupConfig.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceRoleGroupConfig.setServiceName("serviceName"); when(mockGroupConfigService.getConfigByRoleGroupId(0)).thenReturn(clusterServiceRoleGroupConfig);  when(mockRoleGroupService.count(any(QueryWrapper.class))).thenReturn(0); when(mockServiceInstanceService.updateById(new ClusterServiceInstanceEntity())).thenReturn(false);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveServiceConfig(0, "serviceName", list, 0);  // Verify the results "<AssertPlaceHolder>"; verify(mockVariableService).updateById(new ClusterVariable()); verify(mockVariableService).save(new ClusterVariable()); verify(mockServiceInstanceService).save(new ClusterServiceInstanceEntity()); verify(mockRoleGroupService).save(new ClusterServiceInstanceRoleGroup()); verify(mockGroupConfigService).save(new ClusterServiceRoleGroupConfig()); verify(mockRoleInstanceService).updateToNeedRestart(0); verify(mockServiceInstanceService).updateById(new ClusterServiceInstanceEntity()); }
saveServiceConfig( Integer clusterId, String serviceName, List<ServiceConfig> list, Integer roleGroupId) { ClusterInfoEntity clusterInfo = clusterInfoService.getById(clusterId); ServiceConfigMap.put( clusterInfo.getClusterCode() + Constants.UNDERLINE + serviceName + Constants.CONFIG, list); HashMap<String, ServiceConfig> map = new HashMap<>(); Map<String, String> globalVariables = GlobalVariables.get(clusterId); // handler config ServiceRoleStrategy serviceRoleHandler = ServiceRoleStrategyContext.getServiceRoleHandler(serviceName); if (Objects.nonNull(serviceRoleHandler)) { serviceRoleHandler.handlerConfig(clusterId, list, ServiceRoleStrategyContext.getServiceName(serviceName)); } // add variable FrameServiceEntity frameServiceEntity = frameService.getServiceByFrameCodeAndServiceName( clusterInfo.getClusterFrame(), serviceName); Boolean configUpdate = false; for (ServiceConfig serviceConfig : list) { String configName = serviceConfig.getName(); String variableName = "${" + configName + "}"; String variableValue = String.valueOf(serviceConfig.getValue()); // add to global variable if (Constants.INPUT.equals(serviceConfig.getType())) { addToGlobalVariable(clusterId, serviceName, variableName, variableValue); } globalVariables.put(variableName, variableValue); map.put(serviceConfig.getName(), serviceConfig); } // update config-file HashMap<Generators, List<ServiceConfig>> configFileMap = new HashMap<>(); buildConfigFileMap(serviceName, clusterInfo, map, configFileMap); if (PROMETHEUS.equals(serviceName.toLowerCase())) { logger.info("add worker and node to prometheus"); // add host node to prometheus addHostNodeToPrometheus(clusterId, configFileMap); } ClusterServiceInstanceEntity serviceInstanceEntity = serviceInstanceService.getServiceInstanceByClusterIdAndServiceName( clusterId, serviceName); if (Objects.isNull(serviceInstanceEntity)) { serviceInstanceEntity = saveServiceInstance(clusterId, serviceName, frameServiceEntity); ClusterServiceInstanceRoleGroup clusterServiceInstanceRoleGroup = saveServiceInstanceRoleGroup(clusterId, serviceName, serviceInstanceEntity); saveServiceRoleGroupConfig( clusterId, serviceName, list, configFileMap, clusterServiceInstanceRoleGroup); CacheUtils.put( "UseRoleGroup_" + serviceInstanceEntity.getId(), clusterServiceInstanceRoleGroup.getId()); } else { configUpdate = isConfigNeedUpdate(serviceInstanceEntity, list); ClusterServiceRoleGroupConfig roleGroupConfig; if (Objects.isNull(roleGroupId)) { ClusterServiceInstanceRoleGroup roleGroup = roleGroupService.getRoleGroupByServiceInstanceId( serviceInstanceEntity.getId()); roleGroupConfig = groupConfigService.getConfigByRoleGroupId(roleGroup.getId()); } else { roleGroupConfig = groupConfigService.getConfigByRoleGroupId(roleGroupId); } CacheUtils.put( "UseRoleGroup_" + serviceInstanceEntity.getId(), roleGroupConfig.getRoleGroupId()); if (configUpdate) { ClusterServiceRoleGroupConfig newRoleGroupConfig = new ClusterServiceRoleGroupConfig(); if (Objects.isNull(roleGroupId)) { ClusterServiceInstanceRoleGroup roleGroup = saveNewRoleGroup(serviceInstanceEntity); newRoleGroupConfig.setConfigVersion(1); newRoleGroupConfig.setRoleGroupId(roleGroup.getId()); CacheUtils.put( "UseRoleGroup_" + serviceInstanceEntity.getId(), roleGroup.getId()); } else { newRoleGroupConfig.setConfigVersion(roleGroupConfig.getConfigVersion() + 1); newRoleGroupConfig.setRoleGroupId(roleGroupConfig.getRoleGroupId()); roleInstanceService.updateToNeedRestart(roleGroupId); roleGroupService.updateToNeedRestart(roleGroupId); serviceInstanceEntity.setNeedRestart(NeedRestart.YES); } newRoleGroupConfig.setClusterId(clusterId); newRoleGroupConfig.setCreateTime(new Date()); newRoleGroupConfig.setUpdateTime(new Date()); newRoleGroupConfig.setServiceName(serviceInstanceEntity.getServiceName()); buildConfig(list, configFileMap, newRoleGroupConfig); groupConfigService.save(newRoleGroupConfig); } // update service instance serviceInstanceEntity.setUpdateTime(new Date()); serviceInstanceEntity.setLabel(frameServiceEntity.getLabel()); serviceInstanceService.updateById(serviceInstanceEntity); } return Result.success(); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testGetLibPathIsURLClassLoaderAndURLsNotEmptyButJarPathNotContainsJarName() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(urls); when(url.getPath()).thenReturn("any-path"); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 1, 0); }
getLibPath(String jarName, AtomicReference<String> ato) throws IOException { InputStream pyJarPath = null; ClassLoader classLoader = getCurrentThreadContextClassLoader(); if (classLoader instanceof URLClassLoader) { URL[] urls = ((URLClassLoader) classLoader).getURLs(); for (URL url : urls) { String jarPath = url.getPath(); if (jarPath.contains(jarName)) { pyJarPath = url.openStream(); ato.set(jarPath); break; } } } return pyJarPath; }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
************************************
[+] input: givenMultipleLinesToIndent() { List<String> toVerify = toTest() .withBody("Line 1", "Line 2") .getBodyGenerator() .indent() .indent() .lines();  List<String> expected = asList( "        Line 1", "        Line 2" );  "<AssertPlaceHolder>"; }
lines() { return lines; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testEncodeKey() {  String key = "testKey"; ByteBuffer encodedKey = codec.encodeKey(key); String decodedKey = StandardCharsets.UTF_8.decode(encodedKey).toString();  "<AssertPlaceHolder>"; }
encodeKey(String s) { return ByteBuffer.wrap(s.getBytes(StandardCharsets.UTF_8)); }
[*] target: assertEquals(key, decodedKey)
[-] pred: org. junit. Assert. assertEquals ( key, decodedKey )
************************************
************************************
[+] input: testRunningTaskNum() { long except = 5L; when(taskRepository.count(Query.query(Criteria.where("is_deleted").ne(true) .and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED,TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )),user)).thenReturn(except); long result = taskService.runningTaskNum(user); "<AssertPlaceHolder>"; }
runningTaskNum(UserDetail userDetail) { long workNum = count(Query.query(Criteria.where(IS_DELETED).ne(true) .and(SYNC_TYPE).in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and(STATUS).nin(TaskDto.STATUS_DELETE_FAILED,TaskDto.STATUS_DELETING) .orOperator(Criteria.where(STATUS).in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where(PLAN_START_DATE_FLAG).is(true), Criteria.where(CRONTAB_EXPRESSION_FLAG).is(true) )), userDetail); return (int) workNum; }
[*] target: assertEquals(except,result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
************************************
[+] input: testInterceptAspectTest0() { AspectInterceptResult aspect = observableAspectTask.onInterceptAspect(new Aspect() {}); Assertions."<AssertPlaceHolder>"; }
onInterceptAspect(Aspect aspect) { return null; }
[*] target: assertNull(aspect)
[-] pred: org. junit. Assert. assertNull ( aspect )
************************************
************************************
[+] input: closeSetsIsClosedToTrue() { cacheableS3Client.close(); "<AssertPlaceHolder>"; }
isClosed() { return closed; }
[*] target: assertTrue(cacheableS3Client.isClosed())
[-] pred: org. junit. Assert. assertTrue ( cacheableS3Client. isClosed() )
************************************
************************************
[+] input: BBjException { component.setLabelsVisible(true); "<AssertPlaceHolder>";  verify(control).setPaintLabels(true); }
isLabelsVisible() { return labelsVisible; }
[*] target: assertTrue(component.isLabelsVisible())
[-] pred: org. junit. Assert. assertTrue ( component. isLabelsVisible() )
************************************
************************************
[+] input: givenMultipleLines() { List<String> toVerify = toTest() .withBody("Line 1", "Line 2") .withBody(asList("Line 3", "Line 4")) .withBody("Line 5") .getBodyGenerator() .lines();  List<String> expected = asList( "Line 1", "Line 2", "Line 3", "Line 4", "Line 5" );  "<AssertPlaceHolder>"; }
lines() { return lines; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { UserId id1 = new UserId("bob@example.com");  "<AssertPlaceHolder>"; }
equals(@Nullable Object o) { if (this == o) { return true; }  if (o == null || getClass() != o.getClass()) { return false; }  UserId userId = (UserId) o; return email.equals(userId.email); }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
************************************
[+] input: of() { ContainingPackage expected = new ContainingPackage(packageName); ContainingPackage toVerify = ContainingPackage.of(packageName);  "<AssertPlaceHolder>"; }
of(PackageName packageName) { return new ContainingPackage(packageName); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testSaveServiceRoleHostMapping() { // Setup final ServiceRoleHostMapping serviceRoleHostMapping = new ServiceRoleHostMapping(); serviceRoleHostMapping.setServiceRole("serviceRole"); serviceRoleHostMapping.setHosts(Arrays.asList("value")); final List<ServiceRoleHostMapping> list = Arrays.asList(serviceRoleHostMapping); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveServiceRoleHostMapping(0, list);  // Verify the results "<AssertPlaceHolder>"; }
saveServiceRoleHostMapping(Integer clusterId, List<ServiceRoleHostMapping> list) {  checkOnSameNode(clusterId, list);  ClusterInfoEntity clusterInfo = clusterInfoService.getById(clusterId); String hostMapKey = clusterInfo.getClusterCode() + Constants.UNDERLINE + Constants.SERVICE_ROLE_HOST_MAPPING; HashMap<String, List<String>> map = new HashMap<>(); if (CacheUtils.constainsKey(hostMapKey)) { map = (HashMap<String, List<String>>) CacheUtils.get(hostMapKey); }  for (ServiceRoleHostMapping serviceRoleHostMapping : list) { serviceValidation(serviceRoleHostMapping);  map.put(serviceRoleHostMapping.getServiceRole(), serviceRoleHostMapping.getHosts());  ServiceRoleStrategy serviceRoleHandler = ServiceRoleStrategyContext.getServiceRoleHandler( serviceRoleHostMapping.getServiceRole()); String serviceName = ServiceRoleStrategyContext.getServiceName( serviceRoleHostMapping.getServiceRole()); if (Objects.nonNull(serviceRoleHandler)) { serviceRoleHandler.handler(clusterId, serviceRoleHostMapping.getHosts(), serviceName); } }  CacheUtils.put( clusterInfo.getClusterCode() + Constants.UNDERLINE + Constants.SERVICE_ROLE_HOST_MAPPING, map); return Result.success(); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testSerializeWithNullMetricsData() {  byte[] bytes = serializer.serialize("", null);  "<AssertPlaceHolder>"; }
serialize(String s, CollectRep.MetricsData metricsData) {  if (metricsData == null) { log.error("metricsData is null"); return null; }  return metricsData.toByteArray(); }
[*] target: assertNull(bytes)
[-] pred: org. junit. Assert. assertNull ( bytes )
************************************
************************************
[+] input: bind_withTTL() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasTTLColumns()).thenReturn(true); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession);  BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, 3600,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+1)).set(anyInt(), any(), any(Class.class)); }
bind(Row originRow, Row targetRow, Integer ttl, Long writeTime, Object explodeMapKey, Object explodeMapValue) { // We reference the originRow and convert it to the target type. // We need the targetRow if (null == originRow) throw new RuntimeException("originRow is null");  checkBindInputs(ttl, writeTime, explodeMapKey, explodeMapValue);  BoundStatement boundStatement = prepareStatement().bind();  int currentBindIndex = 0; if (usingTTL) { boundStatement = boundStatement.set(currentBindIndex++, ttl, Integer.class); } if (usingWriteTime) { boundStatement = boundStatement.set(currentBindIndex++, writeTime, Long.class); }  Object originValue, targetValue; Object bindValueTarget = null; for (int targetIndex : columnIndexesToBind) { int originIndex = cqlTable.getCorrespondingIndex(targetIndex);  try { if (usingCounter && counterIndexes.contains(targetIndex)) { originValue = cqlTable.getOtherCqlTable().getData(originIndex, originRow); if (null == originValue) { currentBindIndex++; continue; } targetValue = (null == targetRow ? 0L : cqlTable.getData(targetIndex, targetRow)); bindValueTarget = ((Long) originValue - (null == targetValue ? 0L : (Long) targetValue)); } else if (targetIndex== explodeMapKeyIndex) { bindValueTarget = explodeMapKey; } else if (targetIndex== explodeMapValueIndex) { bindValueTarget = explodeMapValue; } else { if (originIndex < 0) // we don't have data to bind for this column; continue to the next targetIndex continue; bindValueTarget = cqlTable.getOtherCqlTable().getAndConvertData(originIndex, originRow); }  boundStatement = boundStatement.set(currentBindIndex++, bindValueTarget, cqlTable.getBindClass(targetIndex)); } catch (Exception e) { logger.error("Error trying to bind value:" + bindValueTarget + " to column:" + targetColumnNames.get(targetIndex) + " of targetDataType:" + targetColumnTypes.get(targetIndex) + "/" + cqlTable.getBindClass(targetIndex).getName() + " at column index:" + targetIndex); throw e; } }  PKFactory pkFactory = session.getPKFactory(); EnhancedPK pk = pkFactory.getTargetPK(originRow); boundStatement = pkFactory.bindWhereClause(PKFactory.Side.TARGET, pk, boundStatement, currentBindIndex);  return boundStatement .setConsistencyLevel(cqlTable.getWriteConsistencyLevel()) .setTimeout(Duration.ofSeconds(10)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testInstantiation() { var user = new ContentDataUser<>() { public Object useContentData(Object contentData) throws InnerClassException { return null; } };  "<AssertPlaceHolder>"; }
useContentData(Object contentData) throws InnerClassException;  /** * Calling this method makes it possible to throw a checked exception from * within this class. * <p>To catch it you should surround the using method with a * {@code try-catch}
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
************************************
[+] input: applyGivenTypeConstructorWithoutPlaceholder() { ArrayType expected = new ArrayType(STRING_TYPE); ArrayType toVerify = new ArrayTypeConstructor(STRING_TYPE_CONSTRUCTOR).apply(INTEGER_TYPE);  "<AssertPlaceHolder>"; }
apply(Type toApplyTo) { return Type.array(type.apply(toApplyTo)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: shouldGetCardActivityAnalysis() {  List<CrdCreditCardActivityAnalysisDto> crdCreditCardActivityAnalysisDtoList = createDummyCrdCreditCardActivityAnalysisDtoList();  List<CrdCreditCardActivityAnalysisDto> expectedResult = createDummyCrdCreditCardActivityAnalysisDtoList();  when(crdCreditCardActivityEntityService.getCardActivityAnalysis(1L)).thenReturn(crdCreditCardActivityAnalysisDtoList);  List<CrdCreditCardActivityAnalysisDto> result = crdCreditCardActivityEntityService.getCardActivityAnalysis(1L);  "<AssertPlaceHolder>"; assertNotNull(result);  }
getCardActivityAnalysis(Long creditCardId) {  crdCreditCardActivityValidationService.controlIsCreditCardExist(creditCardId);  List<CrdCreditCardActivityAnalysisDto> crdCreditCardActivityAnalysisDtoList = crdCreditCardActivityEntityService.getCardActivityAnalysis(creditCardId);  return crdCreditCardActivityAnalysisDtoList; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "101"; Integer value = Integer.valueOf(valueAsString); String expected = TypeCodecs.INT.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
format(String value) { int intValue = Integer.parseInt(value); return TypeCodecs.INT.format(intValue); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: raw() { String expected = "String"; String toVerify = new ClassName("String").raw();  "<AssertPlaceHolder>"; }
raw() { return className; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: deleteEmployee() {  Employee employee = new Employee(); employee.setName("John"); employee.setSalary(20000); Employee savedEmployee = employeeOperationsService.createEmployee(employee);  employeeOperationsService.deleteEmployee(savedEmployee.getEmployeeId());  Employee fetchedEmployee = employeeOperationsService.getEmployee(savedEmployee.getEmployeeId()); "<AssertPlaceHolder>"; }
getEmployee(String employeeId) { return elasticsearchOperations.get(employeeId, Employee.class); }
[*] target: assertNull(fetchedEmployee)
[-] pred: org. junit. Assert. assertNull ( fetchedEmployee )
************************************
************************************
[+] input: testReturnSubstringWithCodon5() { String expectedResult = this.expectedCodon5; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon5); "<AssertPlaceHolder>"; }
returnSubstring(String dnaString, int index) { return dnaString.substring(index, index + 3).toUpperCase(); }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
************************************
[+] input: test_isCloudLimitNotReached() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id","agentId","agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(false); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask,mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(4); when(workerService.calculationEngine(mockTaskDto,user,null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId,user,true); "<AssertPlaceHolder>"; } }
checkCloudTaskLimit(ObjectId taskId,UserDetail user,boolean checkCurrentTask){ if (settingsService.isCloud()) { TaskDto task = findByTaskId(taskId,"id",AGENT_ID,"agentTags"); CalculationEngineVo calculationEngineVo = workerService.calculationEngine(task, user, null); int runningNum; if(checkCurrentTask){ runningNum  = subCronOrPlanNum(task, calculationEngineVo.getRunningNum()); }else{ runningNum = calculationEngineVo.getRunningNum(); } if (runningNum >= calculationEngineVo.getTaskLimit()) { return false; } } return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: fipeMarcasPass() { FipeMarca[] fipeMarcas = BrasilAPI.fipeMarcas("carros"); "<AssertPlaceHolder>"; }
fipeMarcas(String tipoVeiculo) { FipeMarca[] obj = (FipeMarca[]) api(FipeMarca[].class, "fipe/marcas/v1/", tipoVeiculo); return obj != null ? (FipeMarca[]) obj.clone() : null; }
[*] target: assertNotNull(fipeMarcas)
[-] pred: org. junit. Assert. assertNotNull ( fipeMarcas )
************************************
************************************
[+] input: bind_withTTLAndWritetime() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasTTLColumns()).thenReturn(true); when(writetimeTTLFeature.hasWritetimeColumns()).thenReturn(true); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession);  BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, 3600,10000L,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+2)).set(anyInt(), any(), any(Class.class)); }
bind(Row originRow, Row targetRow, Integer ttl, Long writeTime, Object explodeMapKey, Object explodeMapValue) { // We reference the originRow and convert it to the target type. // We need the targetRow if (null == originRow) throw new RuntimeException("originRow is null");  checkBindInputs(ttl, writeTime, explodeMapKey, explodeMapValue);  BoundStatement boundStatement = prepareStatement().bind();  int currentBindIndex = 0; if (usingTTL) { boundStatement = boundStatement.set(currentBindIndex++, ttl, Integer.class); } if (usingWriteTime) { boundStatement = boundStatement.set(currentBindIndex++, writeTime, Long.class); }  Object originValue, targetValue; Object bindValueTarget = null; for (int targetIndex : columnIndexesToBind) { int originIndex = cqlTable.getCorrespondingIndex(targetIndex);  try { if (usingCounter && counterIndexes.contains(targetIndex)) { originValue = cqlTable.getOtherCqlTable().getData(originIndex, originRow); if (null == originValue) { currentBindIndex++; continue; } targetValue = (null == targetRow ? 0L : cqlTable.getData(targetIndex, targetRow)); bindValueTarget = ((Long) originValue - (null == targetValue ? 0L : (Long) targetValue)); } else if (targetIndex== explodeMapKeyIndex) { bindValueTarget = explodeMapKey; } else if (targetIndex== explodeMapValueIndex) { bindValueTarget = explodeMapValue; } else { if (originIndex < 0) // we don't have data to bind for this column; continue to the next targetIndex continue; bindValueTarget = cqlTable.getOtherCqlTable().getAndConvertData(originIndex, originRow); }  boundStatement = boundStatement.set(currentBindIndex++, bindValueTarget, cqlTable.getBindClass(targetIndex)); } catch (Exception e) { logger.error("Error trying to bind value:" + bindValueTarget + " to column:" + targetColumnNames.get(targetIndex) + " of targetDataType:" + targetColumnTypes.get(targetIndex) + "/" + cqlTable.getBindClass(targetIndex).getName() + " at column index:" + targetIndex); throw e; } }  PKFactory pkFactory = session.getPKFactory(); EnhancedPK pk = pkFactory.getTargetPK(originRow); boundStatement = pkFactory.bindWhereClause(PKFactory.Side.TARGET, pk, boundStatement, currentBindIndex);  return boundStatement .setConsistencyLevel(cqlTable.getWriteConsistencyLevel()) .setTimeout(Duration.ofSeconds(10)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: resolveFileFormat_whenOnlyPathsSetOnFileFormat_retunsFormParametersWithPathsFormTable() { String sampleFileName = SampleCsvFileNames.continuous_days_one_row_per_day; TableSpec tableSpec = new TableSpec(new PhysicalTableName("schema_name_example", "table_name_example")); tableSpec.setFileFormat( new FileFormatSpec() {{ setFilePaths(new FilePathListSpec(){{ add(SampleDataFilesProvider.getFile(sampleFileName).toString()); }}); }});  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }});  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertFalse(fileFormatSpec.getCsv().getAutoDetect()); }
resolveFileFormat(DuckdbParametersSpec duckdbParametersSpec, TableSpec tableSpec) { DuckdbFilesFormatType filesType = duckdbParametersSpec.getFilesFormatType(); if (filesType == null) { throw new RuntimeException("The files format is unknown. Please set files format on the connection."); }  FileFormatSpec fileFormat = tableSpec.getFileFormat() == null ? new FileFormatSpec() : tableSpec.getFileFormat().deepClone(); if(fileFormat.getFilePaths().isEmpty()){ FilePathListSpec filePathListSpec = guessFilePaths(duckdbParametersSpec, tableSpec); fileFormat.setFilePaths(filePathListSpec); }  if (fileFormat.isFormatSetForType(filesType)) { return fileFormat; }  FileFormatSpec fileFormatCloned = fileFormat.deepClone(); if (duckdbParametersSpec.isFormatSetForType()) { switch (filesType) { case csv: fileFormatCloned.setCsv(duckdbParametersSpec.getCsv().deepClone()); break; case json: fileFormatCloned.setJson(duckdbParametersSpec.getJson().deepClone()); break; case parquet: fileFormatCloned.setParquet(duckdbParametersSpec.getParquet().deepClone()); break; case iceberg: fileFormatCloned.setIceberg(duckdbParametersSpec.getIceberg().deepClone()); break; } return fileFormatCloned; }  fillDefaultFileFormat(fileFormatCloned, filesType); return fileFormatCloned; }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
************************************
[+] input: SQLException { RdsHostListProvider.clearAll();  RdsHostListProvider provider1 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doReturn(topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsHostListProvider.topologyCache.size());  final List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  RdsHostListProvider provider2 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertEquals(1, RdsHostListProvider.topologyCache.size()); }
refresh(final Connection connection) throws SQLException { init(); final Connection currentConnection = connection != null ? connection : this.hostListProviderService.getCurrentConnection();  final FetchTopologyResult results = getTopology(currentConnection, false); LOGGER.finest(() -> Utils.logTopology(results.hosts, results.isCachedData ? "[From cache] " : ""));  this.hostList = results.hosts; return Collections.unmodifiableList(hostList); }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
************************************
[+] input: testClassPathFile() { Properties properties = ConfigUtil.loadProperties("classpath:openjob.properties"); Assertions."<AssertPlaceHolder>";  String value = properties.getProperty("openjob.worker.test", "none"); Assertions.assertEquals(value, "test"); }
loadProperties(String filename) { // Empty filename. if (StringUtils.isBlank(filename)) { return null; }  // Absolute file. if (isAbsoluteFile(filename)) { return loadPropertiesFromAbsoluteFile(filename); }  // Classpath file. if (filename.startsWith(CLASSPATH_PREFIX)) { return loadPropertiesFromClasspathFile(filename); }  // Relative file. return loadPropertiesFromRelativeFile(filename); }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
************************************
[+] input: testAgentIdsIsEmpty() { when(agentIds.isEmpty()).thenReturn(true); List<WorkerDto> allAgent = agentGroupService.findAllAgent(agentIds, userDetail); Assertions."<AssertPlaceHolder>"; verify(workerServiceImpl, times(0)).findAllDto(any(Query.class), any(UserDetail.class)); }
findAllAgent(Collection<String> agentIds, UserDetail loginUser) { if (CollectionUtils.isEmpty(agentIds)) { return Lists.newArrayList(); } Criteria criteria = Criteria.where(AgentGroupTag.TAG_PROCESS_ID).in(agentIds) .and(AgentGroupTag.TAG_WORKER_TYPE).is(AgentGroupTag.TAG_CONNECTOR); return workerServiceImpl.findAllDto(Query.query(criteria), loginUser); }
[*] target: assertNotNull(allAgent)
[-] pred: org. junit. Assert. assertNotNull ( allAgent )
************************************
************************************
[+] input: testAListSizeLessThanAbListSize() { List<String> mockA = mock(List.class); when(mockA.size()).thenReturn(1); List<String> mockB = mock(List.class); when(mockB.size()).thenReturn(2); when(b.getAgentIds()).thenReturn(mockB); when(a.getAgentIds()).thenReturn(mockA); int count = agentGroupUtil.sortAgentGroup(a, b); Assertions."<AssertPlaceHolder>"; }
sortAgentGroup(AgentGroupEntity a, AgentGroupEntity b) { List<String> agentIdsOfA = a.getAgentIds(); List<String> agentIdsOfB = b.getAgentIds(); if (null == agentIdsOfA && null == agentIdsOfB) { return 0; } if (null == agentIdsOfA) { return 1; } if (null == agentIdsOfB) { return -1; } return agentIdsOfB.size() - agentIdsOfA.size(); }
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
************************************
[+] input: shouldAddSubmitListener() { component.onSubmit(event -> { });  List<EventListener<LoginSubmitEvent>> listeners = component.getEventListeners(LoginSubmitEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<LoginSubmitEvent>); }
onSubmit(EventListener<LoginSubmitEvent> listener) { return addSubmitListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
encode(Double value, @NotNull ProtocolVersion protocolVersion) { if (value == null) { return null; } else { String stringValue = decimalFormat.format(value); return TypeCodecs.TEXT.encode(stringValue, protocolVersion); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: testPrepareSyncGetMemorySizeHandler() { SyncGetMemorySizeHandler handler = observableAspectTask.prepareSyncGetMemorySizeHandler(); Assertions."<AssertPlaceHolder>"; }
prepareSyncGetMemorySizeHandler() { return new SyncGetMemorySizeHandler(new AtomicLong(-1)); }
[*] target: assertNotNull(handler)
[-] pred: org. junit. Assert. assertNotNull ( handler )
************************************
************************************
[+] input: shouldCreateFieldWithLabelAndValue() { LocalDateTime dateTime = LocalDateTime.of(2020, 1, 1, 10, 0); component = new DateTimeField("label", dateTime); assertEquals("label", component.getLabel()); "<AssertPlaceHolder>"; assertEquals(Expanse.MEDIUM, component.getExpanse()); }
getValue() { String text = getText(); return text == null || text.isEmpty() ? null : LocalDateTime.parse(text).truncatedTo(ChronoUnit.SECONDS); }
[*] target: assertEquals(dateTime, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( dateTime, component. getValue ( ) )
************************************
************************************
[+] input: test_getLastCheckAvailableAgentCount() { try(MockedStatic<SettingUtil> mockedStatic = mockStatic(SettingUtil.class)){ mockedStatic.when(()->SettingUtil.getValue(anyString(),anyString())).thenReturn("300"); Long except = 100L; when(workerRepository.count(any(Query.class))).thenReturn(except); Long result = workerService.getLastCheckAvailableAgentCount(); "<AssertPlaceHolder>"; } }
getLastCheckAvailableAgentCount();
[*] target: assertEquals(except,result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
************************************
[+] input: generic() { GenericType expected = new GenericType(T); GenericType toVerify = Type.generic(T);  "<AssertPlaceHolder>"; }
generic(TypeParameterName name) { return GenericType.of(name); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: isSupported() { ComparableVersion current = ComparableVersion.of("0.9"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.11"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.12"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertFalse(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("0.8"); assertFalse(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertFalse(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.5.1.2"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("0.1"); final ModuleDescription emptyVersion = ModuleDescription.builder() .name("emptyVersion").supportFrom(ComparableVersion.of("")).build(); "<AssertPlaceHolder>"; }
isSupported(ComparableVersion current) { boolean isSupported = current.compareTo(from) >= 0; if (isSupported && to != null) { isSupported = current.compareTo(to) <= 0; } return isSupported; }
[*] target: assertTrue(emptyVersion.isSupported(current))
[-] pred: org. junit. Assert. assertTrue ( emptyVersion. isSupported ( current ) )
************************************
************************************
[+] input: shouldAddKeyListener() { component.onKey(event -> { });  List<EventListener<TerminalKeyEvent>> listeners = component.getEventListeners(TerminalKeyEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TerminalKeyEvent>); }
onKey(EventListener<TerminalKeyEvent> listener) { return addKeyListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testHostFailoverStrictReaderEnabled() {  final HostSpec writer = new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("writer").port(1234).role(HostRole.WRITER).build(); final HostSpec reader = new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("reader1").port(1234).role(HostRole.READER).build(); final List<HostSpec> hosts = Arrays.asList(writer, reader);  Dialect mockDialect = Mockito.mock(Dialect.class); when(mockDialect.getFailoverRestrictions()).thenReturn(EnumSet.noneOf(FailoverRestriction.class)); when(mockPluginService.getDialect()).thenReturn(mockDialect); final ClusterAwareReaderFailoverHandler target = new ClusterAwareReaderFailoverHandler( mockPluginService, properties, DEFAULT_FAILOVER_TIMEOUT, DEFAULT_READER_CONNECT_TIMEOUT, true);  // We expect only reader nodes to be chosen. List<HostSpec> expectedReaderHost = Collections.singletonList(reader);  List<HostSpec> hostsByPriority = target.getHostsByPriority(hosts); assertEquals(expectedReaderHost, hostsByPriority);  // Should pick the reader even if unavailable. reader.setAvailability(HostAvailability.NOT_AVAILABLE);  hostsByPriority = target.getHostsByPriority(hosts); assertEquals(expectedReaderHost, hostsByPriority);  // Writer node will only be picked if it is the only node in topology; List<HostSpec> expectedWriterHost = Collections.singletonList(writer);  hostsByPriority = target.getHostsByPriority(Collections.singletonList(writer)); "<AssertPlaceHolder>"; }
getHostsByPriority(final List<HostSpec> hosts) { final List<HostSpec> activeReaders = new ArrayList<>(); final List<HostSpec> downHostList = new ArrayList<>(); HostSpec writerHost = null;  for (final HostSpec host : hosts) { if (host.getRole() == HostRole.WRITER) { writerHost = host; continue; } if (host.getRawAvailability() == HostAvailability.AVAILABLE) { activeReaders.add(host); } else { downHostList.add(host); } } Collections.shuffle(activeReaders); Collections.shuffle(downHostList);  final List<HostSpec> hostsByPriority = new ArrayList<>(activeReaders); final int numOfReaders = activeReaders.size() + downHostList.size(); if (writerHost != null && (!this.enableFailoverStrictReader || numOfReaders == 0)) { hostsByPriority.add(writerHost); } hostsByPriority.addAll(downHostList);  return hostsByPriority; }
[*] target: assertEquals(expectedWriterHost, hostsByPriority)
[-] pred: org. junit. Assert. assertEquals ( expectedWriterHost, hostsByPriority )
************************************
************************************
[+] input: 옵션에_가격이_붙으면_결제가_필요한_오더라인이다() { // given given(orderItem.getPrice()).willReturn(money3000); Money optionAnswerPrice1 = Money.wons(1000L); given(orderOptionAnswer1.getAdditionalPrice()).willReturn(optionAnswerPrice1); Money optionAnswerPrice2 = Money.wons(2000L); given(orderOptionAnswer2.getAdditionalPrice()).willReturn(optionAnswerPrice2); // when Boolean needPayment = orderLineItem.isNeedPaid();  "<AssertPlaceHolder>"; }
isNeedPaid() { Money totalOrderLinePrice = getTotalOrderLinePrice(); // 0 < totalOrderLinePrice return Money.ZERO.isLessThan(totalOrderLinePrice); }
[*] target: assertTrue(needPayment)
[-] pred: org. junit. Assert. assertTrue ( needPayment )
************************************
************************************
[+] input: marshalNullDataPreserveNullsTrueTest() { fingerprintTransformer = new FingerprintTransformer(secretKey, salt, ClientSettings.lowAssuranceMode(), false); final byte[] hmacText = fingerprintTransformer.marshal(null, context); "<AssertPlaceHolder>"; }
marshal(final byte[] cleartext, final EncryptionContext encryptionContext) { if (encryptionContext == null) { throw new C3rIllegalArgumentException("An EncryptionContext must be provided when marshaling."); } if (encryptionContext.getClientDataType() == null) { throw new C3rIllegalArgumentException("EncryptionContext missing ClientDataType when encrypting data for column `" + encryptionContext.getColumnLabel() + "`."); } if (!encryptionContext.getClientDataType().supportsFingerprintColumns()) { throw new C3rIllegalArgumentException(encryptionContext.getClientDataType() + " is not a type supported by " + "fingerprint columns."); } if (!encryptionContext.getClientDataType().isEquivalenceClassRepresentativeType()) { throw new C3rIllegalArgumentException(encryptionContext.getClientDataType() + " is not the parent type of its equivalence " + "class. Expected parent type is " + encryptionContext.getClientDataType().getRepresentativeType() + "."); }  // Check if a plain null value should be used if (cleartext == null) { if (clientSettings.isPreserveNulls()) { return null; } }  final byte[] key; if (clientSettings.isAllowJoinsOnColumnsWithDifferentNames()) { key = hkdf.deriveKey(HKDF_INFO_BYTES, HMAC_KEY_SIZE); } else { final byte[] hkdfKeyInfo = (KeyUtil.HKDF_COLUMN_BASED_INFO + encryptionContext.getColumnLabel()) .getBytes(StandardCharsets.UTF_8); key = hkdf.deriveKey(hkdfKeyInfo, HMAC_KEY_SIZE); } final SecretKeySpec secretKeySpec = new SecretKeySpec(key, mac.getAlgorithm()); Arrays.fill(key, (byte) 0); // Safe to zero here. SecretKeySpec takes a clone on instantiation. try { mac.init(secretKeySpec); } catch (InvalidKeyException e) { throw new C3rRuntimeException("Initialization of hmac failed for target column `" + encryptionContext.getColumnLabel() + "`.", e); } final byte[] hmacBase64 = Base64.getEncoder().encode(mac.doFinal(cleartext)); final byte[] marshalledBytes = ByteBuffer.allocate(DESCRIPTOR_PREFIX.length + hmacBase64.length) .put(DESCRIPTOR_PREFIX) .put(hmacBase64) .array(); validateMarshalledByteLength(marshalledBytes); return marshalledBytes; }
[*] target: assertNull(hmacText)
[-] pred: org. junit. Assert. assertNull ( hmacText )
************************************
************************************
[+] input: testQueryMonitorMetricsData() {  Long monitorId = 1L; List<CollectRep.MetricsData> expectedData = Collections.emptyList();  when(realTimeDataStorage.isServerAvailable()).thenReturn(true); when(realTimeDataStorage.getCurrentMetricsData(monitorId)).thenReturn(expectedData);  List<CollectRep.MetricsData> result = warehouseService.queryMonitorMetricsData(monitorId);  "<AssertPlaceHolder>"; verify(realTimeDataStorage, never()).isServerAvailable(); }
queryMonitorMetricsData(Long monitorId);
[*] target: assertEquals(expectedData, result)
[-] pred: org. junit. Assert. assertEquals ( expectedData, result )
************************************
************************************
[+] input: testEraseUnknownSession() { var sessions = new MemorySessions(); sessions.setSessionDuration(1200000);  var auth_id = "unknown"; try { "<AssertPlaceHolder>"; } catch (SessionManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
eraseSession(String authId) throws SessionManagerException { if (null == authId || authId.isEmpty()) { return false; }  return sessions_.remove(authId) != null; }
[*] target: assertFalse(sessions.eraseSession(auth_id))
[-] pred: org. junit. Assert. assertFalse ( sessions. eraseSession ( auth_id ) )
************************************
************************************
[+] input: testDeserializeWithBytes() {  CollectRep.MetricsData expectedMetricsData = CollectRep.MetricsData.newBuilder() .setMetrics("someValue") .setApp("linux") .build(); byte[] bytes = expectedMetricsData.toByteArray();  CollectRep.MetricsData actualMetricsData = deserializer.deserialize("", bytes);  "<AssertPlaceHolder>"; }
deserialize(String s, byte[] bytes){ try { return CollectRep.MetricsData.parseFrom(bytes); } catch (InvalidProtocolBufferException e) { throw new RuntimeException(e); } }
[*] target: assertEquals(expectedMetricsData, actualMetricsData)
[-] pred: org. junit. Assert. assertEquals ( expectedMetricsData, actualMetricsData )
************************************
************************************
[+] input: validateGivenMethodWithAccumulatedTypeConstructorThatIsAssignableToPartiallyAccumulatedTypeConstructor() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(FUNCTION.with(P, V)), "myFunction", asList( Parameter.of(FUNCTION.with(P.asType().contravariant(), T.asType().covariant()), "left"), Parameter.of(FUNCTION.with(P.asType().contravariant(), U.asType().covariant()), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.valid( AccumulatorValidator.Result.of( "myFunction", FUNCTION.with(P.asTypeConstructor().contravariant(), placeholder().covariant()), FUNCTION.with(P.asTypeConstructor().contravariant(), placeholder().covariant()), FUNCTION.with(P.asTypeConstructor().invariant(), placeholder().invariant()), FUNCTION.with(P.asType().contravariant(), T.asType().covariant()), FUNCTION.with(P.asType().contravariant(), U.asType().covariant()), FUNCTION.with(P.asType().invariant(), V.asType().invariant()) ) ); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
validate(Method method, ParametersAndTypeParametersValidator parametersAndTypeParametersValidator) { List<String> errorMessages = new ArrayList<>();  verifyCanImplementAbstractMethod(method, errorMessages); verifyTypeParametersAreUnbounded(method, errorMessages); Type returnType = verifyHasReturnType(method, errorMessages); ParametersAndTypeParametersValidator.Result parametersAndTypeParameters = verifyParametersAndTypeParameters(method, parametersAndTypeParametersValidator, errorMessages);  if (!errorMessages.isEmpty()) { return Validated.invalid(errorMessages); }  // Assign a meaningful name to each of the (three) type parameters: TypeParameter leftInputTypeConstructorArgument = parametersAndTypeParameters.getLeftInputTypeConstructorArgument(); TypeParameter rightInputTypeConstructorArgument = parametersAndTypeParameters.getRightInputTypeConstructorArgument(); TypeParameter returnTypeConstructorArgument = parametersAndTypeParameters.getReturnTypeConstructorArgument();  // Assign a meaningful name to the left and right parameters: Type leftParameterType = parametersAndTypeParameters.getLeftParameterType(); Type rightParameterType = parametersAndTypeParameters.getRightParameterType();  String name = method.getName();  TypeConstructor accumulatedTypeConstructor = returnType.asTypeConstructorWithPlaceholderFor(returnTypeConstructorArgument.getName()); TypeConstructor partiallyAccumulatedTypeConstructor = leftParameterType.asTypeConstructorWithPlaceholderFor(leftInputTypeConstructorArgument.getName()); TypeConstructor inputTypeConstructor = rightParameterType.asTypeConstructorWithPlaceholderFor(rightInputTypeConstructorArgument.getName());  if (!partiallyAccumulatedTypeConstructor.canAccept(accumulatedTypeConstructor)) { // Tweak the error message to not confuse people using the simple case where // parameter types and result type should be identical: if (Objects.equals(partiallyAccumulatedTypeConstructor, inputTypeConstructor)) { return Validated.invalid("No shared type constructor between parameters (" + generateFrom(leftParameterType) + " and " + generateFrom(rightParameterType) + ") and result (" + generateFrom(returnType) + ")"); } else { return Validated.invalid("No shared type constructor between first parameter (" + generateFrom(leftParameterType) + ") and result (" + generateFrom(returnType) + ")"); } }  verifyNoCrossReferences(method.getTypeParameters(), leftParameterType, partiallyAccumulatedTypeConstructor, "type of the first parameter", errorMessages); verifyNoCrossReferences(method.getTypeParameters(), rightParameterType, inputTypeConstructor, "type of the second parameter", errorMessages); verifyNoCrossReferences(method.getTypeParameters(), returnType, accumulatedTypeConstructor, "return type", errorMessages);  if (!errorMessages.isEmpty()) { return Validated.invalid(errorMessages); }  return Validated.valid( AccumulatorValidator.Result.of( name, inputTypeConstructor, partiallyAccumulatedTypeConstructor, accumulatedTypeConstructor, leftParameterType, rightParameterType, returnType ) ); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testDeserializeWithHeaders() {  CollectRep.MetricsData expectedMetricsData = CollectRep.MetricsData.newBuilder() .setMetrics("someValue") .setApp("linux") .build(); byte[] bytes = expectedMetricsData.toByteArray();  CollectRep.MetricsData actualMetricsData = deserializer.deserialize("topic", headers, bytes);  "<AssertPlaceHolder>"; }
deserialize(String topic, Headers headers, byte[] data) { return Deserializer.super.deserialize(topic, headers, data); }
[*] target: assertEquals(expectedMetricsData, actualMetricsData)
[-] pred: org. junit. Assert. assertEquals ( expectedMetricsData, actualMetricsData )
************************************
************************************
[+] input: shouldMaskTime() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  LocalTime input = LocalTime.of(14, 30, 15); String mask = "%Hz:%mz:%sz"; String expected = "14:30:15";  double hms = new HoursLocalTimeTransformer().transformToComponent(input); when(bridge.maskDateTime(0, hms, mask)).thenReturn(expected);  String result = MaskDecorator.forTime(input, mask);  "<AssertPlaceHolder>"; } }
forTime(LocalTime input, String mask) { Objects.requireNonNull(input, INPUT_CANNOT_BE_NULL); Objects.requireNonNull(mask, MASK_CANNOT_BE_NULL);  Environment env = Environment.getCurrent(); HoursLocalTimeTransformer transformer = new HoursLocalTimeTransformer(); double hms = transformer.transformToComponent(input);  return env.getWebforjHelper().maskDateTime(0, hms, mask); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: registroBRPass() { RegistroBR registroBR = BrasilAPI.registroBR("savio.pw"); "<AssertPlaceHolder>"; }
registroBR(String domain) { RegistroBR obj = (RegistroBR) api(RegistroBR.class, "registrobr/v1/", domain); return obj != null ? (RegistroBR) obj.clone() : null; }
[*] target: assertNotNull(registroBR)
[-] pred: org. junit. Assert. assertNotNull ( registroBR )
************************************
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "21474836470.7"; Double value = Double.parseDouble(valueAsString); ByteBuffer byteBuffer = TypeCodecs.DOUBLE.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { Double doubleValue = TypeCodecs.DOUBLE.decode(bytes, protocolVersion); return doubleValue == null ? null : decimalFormat.format(doubleValue); }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
************************************
[+] input: 종목토론방_댓글_생성하기() { // given Discussion expected = Discussion.builder() .userId(MEMBER_ID) .webtoonId(WEBTOON_ID) .content(CONTENT) .build();  Mockito.when(discussionRepository.save(any())) .thenReturn(expected);  // when var actual = discussionService.save(MEMBER_ID, WEBTOON_ID, CONTENT);  // then "<AssertPlaceHolder>"; }
save(Long userId, Long webtoonId, String content) { return discussionRepository.save( Discussion.builder() .userId(userId) .webtoonId(webtoonId) .content(content) .build() ); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testInvalidNextDate() { try { var calendar = Calendar.getInstance(RifeConfig.tools().getDefaultTimeZone(), Localization.getLocale()); calendar.set(2002, Calendar.SEPTEMBER, 1, 10, 0); var calendar_time = calendar.getTimeInMillis(); Frequency frequency = null;  frequency = new Frequency("* * 31 2 *"); try { frequency.getNextTimestamp(calendar_time); fail(); } catch (FrequencyException e) { "<AssertPlaceHolder>"; } } catch (FrequencyException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
getNextTimestamp(long start) throws FrequencyException { if (start < 0) throw new IllegalArgumentException("start should be positive");  var calendar = RifeConfig.tools().getCalendarInstance(); calendar.setTimeInMillis(start);  var minute = calendar.get(Calendar.MINUTE); var hour = calendar.get(Calendar.HOUR_OF_DAY); var date = calendar.get(Calendar.DATE); var month = calendar.get(Calendar.MONTH) + 1; var year = calendar.get(Calendar.YEAR);  // got to next valid time minute++; if (-1 == (minute = getNextValidMinute(minute)) || -1 == hours_[hour] || -1 == months_[month - 1] || -1 == getDates(month, year)[date - 1]) { hour++; if (-1 == (hour = getNextValidHour(hour)) || -1 == months_[month - 1] || -1 == getDates(month, year)[date - 1]) { date++; hour = getFirstValidHour(); } minute = getFirstValidMinute(); }  // got to next valid date while (year < MAX_YEAR) { if (-1 == (date = getNextValidDate(date, month, year)) || -1 == months_[month - 1]) { month++; if (-1 == (month = getNextValidMonth(month))) { year++; month = getFirstValidMonth(); } date = getFirstValidDate(month, year); if (-1 == date) { date = 1; continue; } }  calendar.set(year, month - 1, date, hour, minute);  if (year == calendar.get(Calendar.YEAR) && month == calendar.get(Calendar.MONTH) + 1) { var weekday = calendar.get(Calendar.DAY_OF_WEEK) - 2; if (-1 == weekday) { weekday = 6; }  if (weekdays_[weekday] != -1) { return calendar.getTimeInMillis(); } }  date++; }  throw new FrequencyException("no valid next date available"); }
[*] target: assertTrue(true)
[-] pred: org. junit. Assert. assertTrue ( true )
************************************
************************************
[+] input: testFailWithBaseException() { Result result = Result.fail(new BaseException()); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.SYSTEM_ERROR.getCode()); }
isFail() { return !isSuccess(); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
************************************
[+] input: canAddKnight() { ChessBoard board = new ChessBoard(); Knight knight = new Knight(BLACK);  board.add(knight, "c1");  Knight foundKnight = (Knight) board.getPieceAtCoords("c1"); "<AssertPlaceHolder>"; }
getPieceAtCoords(String chessCoords) { Coordinates coords = new Coordinates(chessCoords); return internalBoard[coords.getX()][coords.getY()]; }
[*] target: assertEquals(knight, foundKnight)
[-] pred: org. junit. Assert. assertEquals ( knight, foundKnight )
************************************
************************************
[+] input: IOException { BilibiliResponse<DynamicFlow> response = client.dynamicNew(Collections.singletonList(8)); Assertions."<AssertPlaceHolder>"; // 需要Cookie }
dynamicNew(List<Integer> typeList) throws IOException { checkBuVid3BuVid4(); String mid = getCookie(BilibiliApiContainer.COOKIE_KEY_USER_ID); String url = ApiUtil.fillUrl(ApiUrlContainer.DYNAMIC_NEW, Long.parseLong(mid), typeList.stream() .map(Object::toString).collect(Collectors.joining(","))); return httpJsonClient.getJson(url, new TypeReference<BilibiliResponse<DynamicFlow>>() { }, requestHeader); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: testLoadFromStringSuccessComplete() { var loader = new SAXLoader(); Set<String> errors = new HashSet<>();  var xhtml = loader.loadFromString(""" <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> <html xmlns="http://www.w3.org/1999/xhtml"><head><title></title></head><body> <p>body</p> </body></html>""", false, errors);  "<AssertPlaceHolder>"; assertEquals(xhtml.originalMimeType(), MimeType.APPLICATION_XHTML); assertEquals(0, errors.size()); }
loadFromString(String data, boolean fragment, Set<String> errors) throws ContentManagerException { return new LoaderDelegate().load(data, fragment, errors); }
[*] target: assertNotNull(xhtml)
[-] pred: org. junit. Assert. assertNotNull ( xhtml )
************************************
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "21474836470.7"; Double expected = TypeCodecs.DOUBLE.parse(valueAsString); Double result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
parse(String value) { return value == null ? null : Double.parseDouble(value); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testCloseWebHookByHookIds() { List<WebHookInfoVo> mock = mock(List.class); when(webHookController.success(mock)).thenReturn(mock(ResponseMessage.class)); String[] ids = new String[]{"id"}; when(webHookService.close(ids, user)).thenReturn(mock); when(webHookController.closeWebHookByHookIds(ids)).thenCallRealMethod(); ResponseMessage<List<WebHookInfoVo>> hook = webHookController.closeWebHookByHookIds(ids); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(mock); verify(webHookService).close(ids, user); }
closeWebHookByHookIds(@RequestParam(value = "ids") String[] ids) { return success(webHookService.close(ids, getLoginUser())); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
************************************
[+] input: whenTaskDtoIsNull() { try (MockedStatic<BeanUtil> beanUtilMockedStatic = mockStatic(BeanUtil.class)) { String taskId = "testTaskId"; String nodeId = "testNodeId"; when(clientMongoOperator.findOne(any(Query.class), anyString(), eq(TaskDto.class))).thenReturn(null); beanUtilMockedStatic.when(() -> BeanUtil.getBean(ClientMongoOperator.class)).thenReturn(clientMongoOperator);  try (MockedStatic<CleanResult> cleanResultMockedStatic = mockStatic(CleanResult.class)) { CleanResult success = CleanResult.success(); cleanResultMockedStatic.when(CleanResult::success).thenReturn(success);  CleanResult result = mergeNodeCleaner.cleanTaskNode(taskId, nodeId); "<AssertPlaceHolder>"; } verify(clientMongoOperator, times(1)).findOne(any(Query.class), anyString(), eq(TaskDto.class)); } }
cleanTaskNode(String taskId, String nodeId) { TaskDto taskDto = findTaskById(taskId); if (null == taskDto) { return CleanResult.success(); } DAG dag = taskDto.getDag(); List<MergeTableNode> mergeTableNodes; if (StringUtils.isBlank(nodeId)) { List<Node> nodes = dag.getNodes(); mergeTableNodes = findNodes(nodes, MergeTableNode.class); } else { MergeTableNode mergeTableNode = getMergeTableNode(dag, nodeId); if (null == mergeTableNode) { return CleanResult.success(); } mergeTableNodes = new LinkedList<>(); mergeTableNodes.add(mergeTableNode); }  cleanTaskNodeByAppType(mergeTableNodes, dag);  return CleanResult.success(); }
[*] target: assertEquals(success, result)
[-] pred: org. junit. Assert. assertEquals ( success, result )
************************************
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "12345.6789"; BigDecimal expected = TypeCodecs.DECIMAL.parse(valueAsString); BigDecimal result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
parse(String value) { return value == null ? null : new BigDecimal(value); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: generateReport_AuthorizedUser() { TeamOverview teamOverview = UtilMethods.getDummyTeamOverview();  List<TeamOverview> listTeamsOverview = List.of(teamOverview); Topic topic = UtilMethods.getDummyTopic(); Acl acl = UtilMethods.getDummyAcl();  loginMock(); Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME)) .thenReturn(TestConstants.TENANT_ID); Mockito.when( manageDatabase.getKwPropertyValue( KwConstants.KW_REPORTS_TMP_LOCATION_KEY, TestConstants.TENANT_ID)) .thenReturn(TestConstants.KW_REPORTS_LOCATION); Mockito.doReturn(listTeamsOverview) .when(analyticsControllerService) .getTeamsOverview(null, NUMBER_OF_DAYS); Mockito.when(commonUtilsService.getEnvsFromUserId(any())) .thenReturn(Set.of(TestConstants.ENV_ID)); Mockito.doReturn(TestConstants.ENV_NAME) .when(analyticsControllerService) .getEnvName(TestConstants.ENV_ID); Mockito.when( commonUtilsService.isNotAuthorizedUser(any(), eq(PermissionType.ALL_TEAMS_REPORTS))) .thenReturn(false); Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(handleDbRequestsJdbc.getAllTopics(TestConstants.TENANT_ID)) .thenReturn(List.of(topic)); Mockito.when(handleDbRequestsJdbc.getAllConsumerGroups(TestConstants.TENANT_ID)) .thenReturn(List.of(acl));  File actual = analyticsControllerService.generateReport(NUMBER_OF_DAYS); Assertions."<AssertPlaceHolder>"; actual.deleteOnExit(); }
generateReport(int numberOfDays) { int tenantId = commonUtilsService.getTenantId(getCurrentUserName()); String kwReportsLocation = manageDatabase.getKwPropertyValue(KwConstants.KW_REPORTS_TMP_LOCATION_KEY, tenantId);  List<TeamOverview> totalOverviewList = getTeamsOverview(null, numberOfDays); final Map<String, List<String>> topicNames = getTopicNames(tenantId); final Map<String, List<String>> consumerGroups = getConsumerGroups(tenantId); File zipFile = new File( kwReportsLocation + "KwReport" + DATE_TIME_FORMATTER.format(Instant.now()) + ".zip"); ZipOutputStream zipOutputStream = null; try { zipOutputStream = new ZipOutputStream(new FileOutputStream(zipFile)); } catch (FileNotFoundException e) { log.error("Exception:", e); }  String actualFileName; List<File> reportFilesOfTenants = new ArrayList<>(); for (TeamOverview totalOverview : totalOverviewList) { if (totalOverview.getTenantName() != null) { actualFileName = "Klaw-" + totalOverview.getTenantName() + ".xlsx"; } else { actualFileName = "KlawReport" + ".xlsx"; }  String fileName = kwReportsLocation + actualFileName; File reportFile = new File(fileName); reportFilesOfTenants.add(reportFile);  XSSFWorkbook workbook = new XSSFWorkbook();  generateReportPerView(totalOverview.getTopicsPerEnvOverview(), workbook, reportFile); generateReportPerView(totalOverview.getPartitionsPerEnvOverview(), workbook, reportFile); generateReportPerView(totalOverview.getTopicsPerTeamsOverview(), workbook, reportFile); generateReportPerView(totalOverview.getAclsPerEnvOverview(), workbook, reportFile); generateReportPerView(totalOverview.getProducerAclsPerTeamsOverview(), workbook, reportFile); generateReportPerView(totalOverview.getConsumerAclsPerTeamsOverview(), workbook, reportFile); generateReportPerView(totalOverview.getActivityLogOverview(), workbook, reportFile);  addTopicNamesPerEnvToReport(topicNames, workbook, reportFile, "Topics"); addTopicNamesPerEnvToReport(consumerGroups, workbook, reportFile, "ConsumerGroups");  log.info("Report generated"); if (zipOutputStream != null) { writeToZipFile(zipOutputStream, fileName, actualFileName); } }  try { if (zipOutputStream != null) { zipOutputStream.close(); // delete xlsx report file after writing to zip file. for (File reportFilesOfTenant : reportFilesOfTenants) { reportFilesOfTenant.delete(); } } } catch (IOException e) { log.error("Exception:", e); }  return zipFile; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: parse_ShouldParseStringToInstantValueAndReturnAsString() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); String result = codec.parse(TypeCodecs.TIMESTAMP.format(value)); Assertions."<AssertPlaceHolder>"; }
format(String value) { Instant instantValue = Instant.ofEpochMilli(Long.parseLong(value)); return TypeCodecs.TIMESTAMP.format(instantValue); }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
************************************
[+] input: setProperty_Boolean() { Boolean value = true; Boolean setValue = (Boolean) helper.setProperty(KnownProperties.TEST_BOOLEAN, value); "<AssertPlaceHolder>"; }
setProperty(String propertyName, Object propertyValue) { if (null == propertyName || null == propertyValue) return null; PropertyType expectedType = getType(propertyName); if (null == expectedType) { return null; }  boolean typesMatch = validateType(expectedType, propertyValue); if (!typesMatch) return null;  synchronized (PropertyHelper.class) { propertyMap.put(propertyName, propertyValue); } return propertyValue; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
************************************
[+] input: testCascadeSelect() { List<Student> studentTree = studentTreeHelper.toTree(originStudentList); Long targetStudentId = 6L; List<Long> expectedPathIds = Arrays.asList(1L, 3L, 6L); List<Student> selectedPath = studentTreeHelper.cascadeSelect(studentTree, targetStudentId); List<Long> selectedPathIds = selectedPath.stream().map(Student::getId).collect(Collectors.toList()); Assertions."<AssertPlaceHolder>"; }
cascadeSelect(List<T> nodes, R selectedId) { return Steam.of(nodes) .map(rootNode -> findPath(rootNode, selectedId)) .filter(Optional::isPresent) .map(Optional::get) .findFirst() .orElseGet(Collections::emptyList); }
[*] target: assertEquals(expectedPathIds, selectedPathIds)
[-] pred: org. junit. Assert. assertEquals ( expectedPathIds, selectedPathIds )
************************************
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreDataParentNode() { when(nodeList.size()).thenReturn(2); JsProcessorNode node1 = mock(JsProcessorNode.class); when(nodeList.get(0)).thenReturn(node1);  DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); verify(node2, times(0)).getDatabaseType(); }
getTaskDtoIsomorphism(List<Node> nodes) { if (null == nodes || nodes.size() != 2) { return false; } Node node1 = nodes.get(0); if (!(node1 instanceof DataParentNode)) return false; Node node2 = nodes.get(1); if (!(node2 instanceof DataParentNode)) return false; DataParentNode dataParentNode1 = (DataParentNode)node1; DataParentNode dataParentNode2 = (DataParentNode)node2; String databaseType = String.valueOf(dataParentNode1.getDatabaseType()); return databaseType.equals(dataParentNode2.getDatabaseType()); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
************************************
[+] input: resolveFileFormat_whenAvailableOnTableAndParameters_retunsFormTable() {  TableSpec tableSpec = new TableSpec(new PhysicalTableName("schema_name_example", "table_name_example")); tableSpec.setFileFormat(FileFormatSpecObjectMother.createForCsvFile(SampleCsvFileNames.continuous_days_one_row_per_day));  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }});  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertTrue(fileFormatSpec.getCsv().getAutoDetect()); }
resolveFileFormat(DuckdbParametersSpec duckdbParametersSpec, TableSpec tableSpec) { DuckdbFilesFormatType filesType = duckdbParametersSpec.getFilesFormatType(); if (filesType == null) { throw new RuntimeException("The files format is unknown. Please set files format on the connection."); }  FileFormatSpec fileFormat = tableSpec.getFileFormat() == null ? new FileFormatSpec() : tableSpec.getFileFormat().deepClone(); if(fileFormat.getFilePaths().isEmpty()){ FilePathListSpec filePathListSpec = guessFilePaths(duckdbParametersSpec, tableSpec); fileFormat.setFilePaths(filePathListSpec); }  if (fileFormat.isFormatSetForType(filesType)) { return fileFormat; }  FileFormatSpec fileFormatCloned = fileFormat.deepClone(); if (duckdbParametersSpec.isFormatSetForType()) { switch (filesType) { case csv: fileFormatCloned.setCsv(duckdbParametersSpec.getCsv().deepClone()); break; case json: fileFormatCloned.setJson(duckdbParametersSpec.getJson().deepClone()); break; case parquet: fileFormatCloned.setParquet(duckdbParametersSpec.getParquet().deepClone()); break; case iceberg: fileFormatCloned.setIceberg(duckdbParametersSpec.getIceberg().deepClone()); break; } return fileFormatCloned; }  fillDefaultFileFormat(fileFormatCloned, filesType); return fileFormatCloned; }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
************************************
[+] input: testRunningTaskNumWithProcessId() { TaskRepository taskRepository = mock(TaskRepository.class); taskService = new TaskServiceImpl(taskRepository); long except = 5L; UserDetail userDetail = mock(UserDetail.class); when(taskRepository.count(Query.query(Criteria.where("agentId").is("111") .and("is_deleted").ne(true).and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED, TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )), userDetail)).thenReturn(except); long result = taskService.runningTaskNum("111", userDetail); "<AssertPlaceHolder>"; }
runningTaskNum(String processId, UserDetail userDetail);  public abstract TaskEntity convertToEntity(Class entityClass, BaseDto dto, String... ignoreProperties);  public <T extends BaseDto> T convertToDto(TaskEntity entity, Class<T> dtoClass, String... ignoreProperties){ return super.convertToDto(entity, dtoClass, ignoreProperties); }
[*] target: assertEquals(except, result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
************************************
[+] input: createAddress_validDate_Success() { generateTestData(); AddressPostVm addressPostVm = AddressPostVm.builder() .contactName("update-address") .districtId(district.getId()) .countryId(country.getId()) .stateOrProvinceId(stateOrProvince.getId()) .build(); AddressGetVm addressGetVm = addressService.createAddress(addressPostVm); "<AssertPlaceHolder>"; }
createAddress(AddressPostVm dto) { Address address = AddressPostVm.fromModel(dto); stateOrProvinceRepository.findById(dto.stateOrProvinceId()).ifPresent(address::setStateOrProvince); Country country = countryRepository.findById(dto.countryId()) .orElseThrow(() -> new NotFoundException(Constants.ErrorCode.COUNTRY_NOT_FOUND, dto.countryId())); address.setCountry(country); districtRepository.findById(dto.districtId()).ifPresent(address::setDistrict); return AddressGetVm.fromModel(addressRepository.save(address)); }
[*] target: assertNotNull(addressGetVm)
[-] pred: org. junit. Assert. assertNotNull ( addressGetVm )
************************************
************************************
[+] input: Exception { FlinkDeployment flinkApp = TestUtils.buildApplicationCluster(); ObjectMeta deployMeta = flinkApp.getMetadata(); FlinkDeploymentStatus status = flinkApp.getStatus(); FlinkDeploymentSpec spec = flinkApp.getSpec(); Configuration deployConfig = configManager.getDeployConfig(deployMeta, spec);  status.getJobStatus().setState(org.apache.flink.api.common.JobStatus.FINISHED.name()); status.setJobManagerDeploymentStatus(JobManagerDeploymentStatus.READY); reconciler .getReconciler() .deploy(getResourceContext(flinkApp), spec, deployConfig, Optional.empty(), false);  final List<Map<String, String>> expectedOwnerReferences = List.of(TestUtils.generateTestOwnerReferenceMap(flinkApp)); List<Map<String, String>> or = deployConfig.get(KubernetesConfigOptions.JOB_MANAGER_OWNER_REFERENCE); Assertions."<AssertPlaceHolder>"; }
deploy( FlinkResourceContext<FlinkDeployment> ctx, FlinkDeploymentSpec spec, Configuration deployConfig, Optional<String> savepoint, boolean requireHaMetadata) throws Exception {  var relatedResource = ctx.getResource(); var status = relatedResource.getStatus(); var flinkService = ctx.getFlinkService();  ClusterHealthEvaluator.removeLastValidClusterHealthInfo( relatedResource.getStatus().getClusterInfo());  if (savepoint.isPresent()) { // Savepoint deployment deployConfig.set(SavepointConfigOptions.SAVEPOINT_PATH, savepoint.get()); } else if (requireHaMetadata && flinkService.atLeastOneCheckpoint(deployConfig)) { // Last state deployment, explicitly set a dummy savepoint path to avoid accidental // incorrect state restore in case the HA metadata is deleted by the user deployConfig.set(SavepointConfigOptions.SAVEPOINT_PATH, LAST_STATE_DUMMY_SP_PATH); status.getJobStatus() .setUpgradeSnapshotReference( FlinkStateSnapshotReference.fromPath(LAST_STATE_DUMMY_SP_PATH)); } else { // Stateless deployment, remove any user configured savepoint path deployConfig.removeConfig(SavepointConfigOptions.SAVEPOINT_PATH); }  setOwnerReference(relatedResource, deployConfig); setRandomJobResultStorePath(deployConfig);  if (status.getJobManagerDeploymentStatus() != JobManagerDeploymentStatus.MISSING) { Preconditions.checkArgument(ReconciliationUtils.isJobInTerminalState(status)); LOG.info("Deleting cluster with terminated application before new deployment"); flinkService.deleteClusterDeployment( relatedResource.getMetadata(), status, deployConfig, !requireHaMetadata); statusRecorder.patchAndCacheStatus(relatedResource, ctx.getKubernetesClient()); }  setJobIdIfNecessary( relatedResource, deployConfig, ctx.getKubernetesClient(), requireHaMetadata);  eventRecorder.triggerEvent( relatedResource, EventRecorder.Type.Normal, EventRecorder.Reason.Submit, EventRecorder.Component.JobManagerDeployment, MSG_SUBMIT, ctx.getKubernetesClient()); flinkService.submitApplicationCluster(spec.getJob(), deployConfig, requireHaMetadata); status.getJobStatus().setState(org.apache.flink.api.common.JobStatus.RECONCILING.name()); status.setJobManagerDeploymentStatus(JobManagerDeploymentStatus.DEPLOYING);  IngressUtils.updateIngressRules( relatedResource.getMetadata(), spec, deployConfig, ctx.getKubernetesClient()); }
[*] target: assertEquals(expectedOwnerReferences, or)
[-] pred: org. junit. Assert. assertEquals ( expectedOwnerReferences, or )
************************************
************************************
[+] input: testResolveRelativePath() { URL resourceURL = ClassLoaderUtils.getClassResource(classLoader, Nonnull.class); String relativePath = resolveRelativePath(resourceURL); String expectedPath = "javax/annotation/Nonnull.class"; "<AssertPlaceHolder>"; }
resolveRelativePath(URL jarURL) throws NullPointerException, IllegalArgumentException { assertJarURLProtocol(jarURL); String form = jarURL.toExternalForm(); String relativePath = substringAfter(form, ARCHIVE_ENTRY_SEPARATOR); relativePath = normalizePath(relativePath); return decode(relativePath); }
[*] target: assertEquals(expectedPath, relativePath)
[-] pred: org. junit. Assert. assertEquals ( expectedPath, relativePath )
************************************
************************************
[+] input: givenTypeParameterName() { String toVerify = toTest() .withType(T) .getObjectPathOrTypeGenerator() .generate();  String expected = "T";  "<AssertPlaceHolder>"; }
generate() { Optional<String> optionalObjectPathAsString = optionalObjectPathGenerator.map(ObjectPathGenerator::generate); Optional<String> optionalConcreteTypeAsString = optionalConcreteType.map(FullyQualifiedName::raw); Optional<String> optionalGenericTypeAsString = optionalGenericType.map(TypeParameterName::raw); return optionalObjectPathAsString .map(Optional::of).orElse(optionalConcreteTypeAsString) .map(Optional::of).orElse(optionalGenericTypeAsString) .orElseThrow(NullPointerException::new); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(UNARY_OPERATOR.with(T), "left"), Parameter.of(UNARY_OPERATOR.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "combinator"), Parameter.of(FUNCTION.with(V.asType().contravariant(), I.asType().covariant()), "toIntermediate"), Parameter.of(FUNCTION.with(I.asType().contravariant(), T.asType().covariant()), "extractLeft"), Parameter.of(FUNCTION.with(I.asType().contravariant(), U.asType().covariant()), "extractRight") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), I.asTypeParameter(), V.asTypeParameter());  InvariantParametersAndTypeParametersValidator.Result result = new InvariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), UNARY_OPERATOR.with(T), UNARY_OPERATOR.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
validateTypeParametersAndParameters(List<TypeParameter> typeParameters, List<Parameter> parameters, List<String> errorMessages) { List<String> additionalErrorMessages = new ArrayList<>();  verifyParameterCount(parameters, 6, additionalErrorMessages); verifyTypeParameterCount(typeParameters, 4, additionalErrorMessages);  if (!additionalErrorMessages.isEmpty()) { errorMessages.addAll(additionalErrorMessages); return null; }  TypeParameter leftInputTypeConstructorArgument = typeParameters.get(0); TypeParameter rightInputTypeConstructorArgument = typeParameters.get(1); TypeParameter intermediateTypeConstructorArgument = typeParameters.get(2); TypeParameter returnTypeConstructorArgument = typeParameters.get(3);  Parameter leftParameter = parameters.get(0); Parameter rightParameter = parameters.get(1); Parameter combinatorParameter = parameters.get(2); Parameter toIntermediateParameter = parameters.get(3); Parameter extractLeftParameter = parameters.get(4); Parameter extractRightParameter = parameters.get(5);  // Check if the third parameter is as expected: Type expectedCombinatorType = BI_FUNCTION.with(leftInputTypeConstructorArgument.asType().contravariant(), rightInputTypeConstructorArgument.asType().contravariant(), returnTypeConstructorArgument.asType().covariant()); if (!Objects.equals(combinatorParameter.getType(), expectedCombinatorType)) { additionalErrorMessages.add("Expected third argument to be a " + generateFrom(expectedCombinatorType) + " but was " + generateFrom(combinatorParameter.getType())); }  // Check if the fourth parameter is as expected: Type expectedToIntermediateType = FUNCTION.with(returnTypeConstructorArgument.asType().contravariant(), intermediateTypeConstructorArgument.asType().covariant()); if (!Objects.equals(toIntermediateParameter.getType(), expectedToIntermediateType)) { additionalErrorMessages.add("Expected fourth argument to be a " + generateFrom(expectedToIntermediateType) + " but was " + generateFrom(toIntermediateParameter.getType())); }  // Check if the fifth parameter is as expected: Type expectedExtractLeftType = FUNCTION.with(intermediateTypeConstructorArgument.asType().contravariant(), leftInputTypeConstructorArgument.asType().covariant()); if (!Objects.equals(extractLeftParameter.getType(), expectedExtractLeftType)) { additionalErrorMessages.add("Expected fifth argument to be a " + generateFrom(expectedExtractLeftType) + " but was " + generateFrom(extractLeftParameter.getType())); }  // Check if the sixth parameter is as expected: Type expectedExtractRightType = FUNCTION.with(intermediateTypeConstructorArgument.asType().contravariant(), rightInputTypeConstructorArgument.asType().covariant()); if (!Objects.equals(extractRightParameter.getType(), expectedExtractRightType)) { additionalErrorMessages.add("Expected sixth argument to be a " + generateFrom(expectedExtractRightType) + " but was " + generateFrom(extractRightParameter.getType())); }  if (additionalErrorMessages.isEmpty()) { return Result.of( leftInputTypeConstructorArgument, rightInputTypeConstructorArgument, returnTypeConstructorArgument, leftParameter.getType(), rightParameter.getType() ); } else { errorMessages.addAll(additionalErrorMessages); return null; } }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: SQLException { when(mockHttpClient.execute(any(HttpUriRequest.class))).thenReturn( mockHttpGetSignInPageResponse, mockHttpPostSignInResponse); final String correctSamlAssertion = IOUtils.toString( Objects.requireNonNull( this.getClass().getClassLoader().getResourceAsStream("federated_auth/saml-assertion.txt")), "UTF-8") .replace("\n", "") .replace("\r", ""); final String samlAssertion = this.adfsCredentialsProviderFactory.getSamlAssertion(props); "<AssertPlaceHolder>";  final ArgumentCaptor<HttpUriRequest> httpPostArgumentCaptor = ArgumentCaptor.forClass(HttpUriRequest.class); verify(mockHttpClient, times(2)).execute(httpPostArgumentCaptor.capture()); final HttpEntityEnclosingRequest actualHttpPost = (HttpEntityEnclosingRequest) httpPostArgumentCaptor.getValue(); final String content = EntityUtils.toString(actualHttpPost.getEntity()); final String[] params = content.split("&"); assertEquals("UserName=" + USERNAME.replace("@", "%40"), params[0]); assertEquals("Password=" + PASSWORD, params[1]); assertEquals("Kmsi=true", params[2]); assertEquals("AuthMethod=FormsAuthentication", params[3]); }
getSamlAssertion(final @NonNull Properties props) throws SQLException { this.telemetryContext = telemetryFactory.openTelemetryContext(TELEMETRY_FETCH_SAML, TelemetryTraceLevel.NESTED);  try (final CloseableHttpClient httpClient = httpClientSupplier.get()) { String uri = getSignInPageUrl(props); final String signInPageBody = getSignInPageBody(httpClient, uri); final String action = getFormActionFromHtmlBody(signInPageBody);  if (!StringUtils.isNullOrEmpty(action) && action.startsWith("/")) { uri = getFormActionUrl(props, action); }  final List<NameValuePair> params = getParametersFromHtmlBody(signInPageBody, props); final String content = getFormActionBody(httpClient, uri, params);  final Matcher matcher = FederatedAuthPlugin.SAML_RESPONSE_PATTERN.matcher(content); if (!matcher.find()) { throw new IOException(Messages.get("AdfsCredentialsProviderFactory.failedLogin", new Object[] {content})); }  // return SAML Response value return matcher.group(FederatedAuthPlugin.SAML_RESPONSE_PATTERN_GROUP); } catch (final IOException e) { LOGGER.severe(Messages.get("SAMLCredentialsProviderFactory.getSamlAssertionFailed", new Object[] {e})); this.telemetryContext.setSuccess(false); this.telemetryContext.setException(e); throw new SQLException(e); } finally { this.telemetryContext.closeContext(); } }
[*] target: assertEquals(correctSamlAssertion, samlAssertion)
[-] pred: org. junit. Assert. assertEquals ( correctSamlAssertion, samlAssertion )
************************************
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "123.456"; BigDecimal value = new BigDecimal(valueAsString); ByteBuffer byteBuffer = TypeCodecs.DECIMAL.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { BigDecimal decimalValue = TypeCodecs.DECIMAL.decode(bytes, protocolVersion); return decimalValue.toString(); }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
************************************
[+] input: shouldSetGetOptionIndex() { int index = 1; component.setOptionIndex(index); verify(mockMixin).setOptionIndex(index);  when(mockMixin.getOptionIndex()).thenReturn(index); int result = component.getOptionIndex(); "<AssertPlaceHolder>"; }
getOptionIndex() { return hasOptionsMixin.getOptionIndex(); }
[*] target: assertEquals(index, result)
[-] pred: org. junit. Assert. assertEquals ( index, result )
************************************
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
encode(String value, @NotNull ProtocolVersion protocolVersion) { if (value == null) { return null; } else { Instant instantValue = Instant.ofEpochMilli(Long.parseLong(value)); return TypeCodecs.TIMESTAMP.encode(instantValue, protocolVersion); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: IOException { BilibiliResponse<UserWebListResult> response = client.liveUserWebList(1, 10); Assertions."<AssertPlaceHolder>"; // 需要Cookie }
liveUserWebList(int pageNum, int pageSize) throws IOException { checkBuVid3BuVid4(); String url = ApiUtil.fillUrl(ApiUrlContainer.LIVE_USER_WEB_LIST, pageNum, pageSize, System.currentTimeMillis()); return httpJsonClient.getJson(url, new TypeReference<BilibiliResponse<UserWebListResult>>() { }, requestHeader); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: testTransformFromTapValueNullTapEvent() { TapdataEvent tapdataEvent = new TapdataEvent(); HazelcastBaseNode.TapValueTransform actual = hazelcastBaseNode.transformFromTapValue(tapdataEvent); "<AssertPlaceHolder>"; }
transformFromTapValue(TapdataEvent tapdataEvent) { if (null == tapdataEvent) return null; if (null == tapdataEvent.getTapEvent()) return null; TapEvent tapEvent = tapdataEvent.getTapEvent(); TapValueTransform tapValueTransform = TapValueTransform.create(); Map<String, Object> before = TapEventUtil.getBefore(tapEvent); if (MapUtils.isNotEmpty(before)) { tapValueTransform.before(codecsFilterManager.transformFromTapValueMap(before)); } Map<String, Object> after = TapEventUtil.getAfter(tapEvent); if (MapUtils.isNotEmpty(after)) { tapValueTransform.after(codecsFilterManager.transformFromTapValueMap(after)); } return tapValueTransform; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("{"a": [{"b":1},{"b":2}]}"));  Iterable<String> nodes = record.generatePaths("/a/1/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(1)); }
generatePaths(String pattern) { List<String> pointers = Arrays.asList(pattern.split("/"));  return generatePaths(node, pointers.subList(1, pointers.size()), ""); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
************************************
[+] input: loadSchemaTest() { List<Schema> schemaList = migrateProcessorNode.loadSchema(null); "<AssertPlaceHolder>"; }
loadSchema(List<String> includes) { return null; }
[*] target: assertEquals(null,schemaList)
[-] pred: org. junit. Assert. assertEquals ( null, schemaList )
************************************
************************************
[+] input: testSaveClusterGroup() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterHostService.getHostListByClusterId(...). final ClusterHostEntity clusterHostEntity = new ClusterHostEntity(); clusterHostEntity.setId(0); clusterHostEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setHostname("hostname"); clusterHostEntity.setIp("ip"); clusterHostEntity.setRack("rack"); clusterHostEntity.setCoreNum(0); clusterHostEntity.setTotalMem(0); clusterHostEntity.setTotalDisk(0); clusterHostEntity.setUsedMem(0); clusterHostEntity.setUsedDisk(0); clusterHostEntity.setAverageLoad("averageLoad"); clusterHostEntity.setCheckTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setClusterId(0); clusterHostEntity.setHostState(0); clusterHostEntity.setManaged(MANAGED.YES); final List<ClusterHostEntity> clusterHostEntities = Arrays.asList(clusterHostEntity); when(mockHostService.getHostListByClusterId(0)).thenReturn(clusterHostEntities);  // Run the test final Result result = clusterGroupServiceImplUnderTest.saveClusterGroup(0, "groupName");  // Verify the results "<AssertPlaceHolder>"; }
saveClusterGroup(Integer clusterId, String groupName) { if (hasRepeatGroupName(clusterId, groupName)) { return Result.error(Status.GROUP_NAME_DUPLICATION.getMsg()); } ClusterGroup clusterGroup = new ClusterGroup(); clusterGroup.setClusterId(clusterId); clusterGroup.setGroupName(groupName); this.save(clusterGroup);  List<ClusterHostDO> hostList = hostService.getHostListByClusterId(clusterId); for (ClusterHostDO clusterHost : hostList) { ActorRef unixGroupActor = ActorUtils.getRemoteActor(clusterHost.getHostname(), "unixGroupActor"); CreateUnixGroupCommand createUnixGroupCommand = new CreateUnixGroupCommand(); createUnixGroupCommand.setGroupName(groupName); Timeout timeout = new Timeout(Duration.create(180, TimeUnit.SECONDS)); Future<Object> execFuture = Patterns.ask(unixGroupActor, createUnixGroupCommand, timeout); ExecResult execResult = null; try { execResult = (ExecResult) Await.result(execFuture, timeout.duration()); if (execResult.getExecResult()) { logger.info("create unix group success at {}", clusterHost.getHostname()); } else { logger.info(execResult.getExecOut()); throw new ServiceException(500, "create unix group " + groupName + " failed at " + clusterHost.getHostname()); } } catch (Exception e) { throw new ServiceException(500, "create unix group " + groupName + " failed at " + clusterHost.getHostname()); } }  return Result.success(); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testTryEmit() { when(mockOutBox.offer(any(TapdataEvent.class))).thenReturn(true); boolean actual = hazelcastBaseNode.tryEmit(tapdataEvent, 1); "<AssertPlaceHolder>"; }
tryEmit(TapdataEvent dataEvent, int bucketCount) { if (null == dataEvent) { return true; } if (bucketCount > 1) { for (bucketIndex = Math.min(bucketIndex, bucketCount); bucketIndex < bucketCount; bucketIndex++) { TapdataEvent cloneEvent = (TapdataEvent) dataEvent.clone(); if (!tryEmit(bucketIndex, cloneEvent)) { return false; } } } else { return tryEmit(dataEvent); } return true; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: of() { ArrayTypeConstructor expected = new ArrayTypeConstructor(new PlaceholderTypeConstructor()); ArrayTypeConstructor toVerify = ArrayTypeConstructor.of(new PlaceholderTypeConstructor());  "<AssertPlaceHolder>"; }
of(TypeConstructor type) { return new ArrayTypeConstructor(type); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: AuthenticationException {  String userId = "admin"; String refreshToken = JsonWebTokenUtil.issueJwt(userId, 3600L, Collections.singletonMap("refresh", true));  SurenessAccount account = DefaultAccount.builder("app1") .setPassword(Md5Util.md5(password + salt)) .setSalt(salt) .setOwnRoles(roles) .setDisabledAccount(Boolean.FALSE) .setExcessiveAttempts(Boolean.FALSE) .build(); when(accountProvider.loadAccount(userId)).thenReturn(account);  RefreshTokenResponse response = accountService.refreshToken(refreshToken);  "<AssertPlaceHolder>"; assertNotNull(response.getToken()); assertNotNull(response.getRefreshToken()); }
refreshToken(String refreshToken) throws AuthenticationException;
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: isEmptyTest() { // 这是jdk11 Optional中的新函数，直接照搬了过来 // 判断包裹内元素是否为空，注意并没有判断空字符串的情况 final boolean isEmpty = Opp.empty().isEmpty(); Assertions."<AssertPlaceHolder>"; }
isEmpty() { return value == null; }
[*] target: assertTrue(isEmpty)
[-] pred: org. junit. Assert. assertTrue ( isEmpty )
************************************
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
encode(Instant value, @NotNull ProtocolVersion protocolVersion) { if (value == null) { return null; } else { String stringValue = formatter.format(LocalDateTime.ofInstant(value, zoneOffset)); return TypeCodecs.TEXT.encode(stringValue, protocolVersion); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: setProperty_StringList() { List<String> value = Arrays.asList("a","b", "c"); List<String> setValue = (List<String>) helper.setProperty(KnownProperties.TEST_STRING_LIST, value); "<AssertPlaceHolder>"; }
setProperty(String propertyName, Object propertyValue) { if (null == propertyName || null == propertyValue) return null; PropertyType expectedType = getType(propertyName); if (null == expectedType) { return null; }  boolean typesMatch = validateType(expectedType, propertyValue); if (!typesMatch) return null;  synchronized (PropertyHelper.class) { propertyMap.put(propertyName, propertyValue); } return propertyValue; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
************************************
[+] input: Exception { KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("SM2", PROVIDER); KeyPair keyPair = keyPairGen.generateKeyPair(); ECPublicKey pubKey = (ECPublicKey) keyPair.getPublic(); ECPoint pubKeyPoint = pubKey.getW(); boolean onCurve = checkPointOnCurve(pubKeyPoint); Assertions."<AssertPlaceHolder>"; }
generateKeyPair() { if (random == null) { random = JCAUtil.getSecureRandom(); }  if (keyPairGen == null) { keyPairGen = new ECKeyPairGenerator();  try { keyPairGen.initialize(SM2ParameterSpec.instance(), random); } catch (InvalidAlgorithmParameterException e) { // Unlikely happen throw new IllegalArgumentException(e); } }  KeyPair keyPair = keyPairGen.generateKeyPair(); ECPublicKey pubKey = (ECPublicKey) keyPair.getPublic(); ECPrivateKey priKey = (ECPrivateKey) keyPair.getPrivate(); return new KeyPair( new SM2PublicKey(pubKey.getW()), new SM2PrivateKey(priKey.getS())); }
[*] target: assertTrue(onCurve)
[-] pred: org. junit. Assert. assertTrue ( onCurve )
************************************
************************************
[+] input: testGetClusterInfo() { // Setup final ClusterInfoEntity expectedResult = new ClusterInfoEntity(); expectedResult.setId(0); expectedResult.setCreateBy("createBy"); expectedResult.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); expectedResult.setClusterName("clusterName"); expectedResult.setClusterCode("clusterCode"); expectedResult.setClusterFrame("clusterFrame"); expectedResult.setFrameVersion("frameVersion"); expectedResult.setClusterState(ClusterState.RUNNING); expectedResult.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); expectedResult.setClusterManagerList(Arrays.asList(userInfoEntity));  // Run the test final ClusterInfoEntity result = ProcessUtils.getClusterInfo(0);  // Verify the results "<AssertPlaceHolder>"; }
getClusterInfo(Integer clusterId) { ClusterInfoService clusterInfoService = SpringTool.getApplicationContext().getBean(ClusterInfoService.class); return clusterInfoService.getById(clusterId); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: shouldAddOpenListener() { component.onOpen(event -> { });  List<EventListener<DialogOpenEvent>> listeners = component.getEventListeners(DialogOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DialogOpenEvent>); }
onOpen(EventListener<DialogOpenEvent> listener) { return addOpenListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: shouldReturnCurrentDateForZeroJulianDate() { LocalDate expectedDate = LocalDate.now(); LocalDate result = transformer.transformToModel(0); "<AssertPlaceHolder>"; }
transformToModel(Integer viewValue) { try { if (viewValue < 0) { return null; }  if (viewValue == 0) { return LocalDate.now(); }  int n = viewValue - 1721425; int year = n / 365;  int temp; while ((temp = year * 365 + year / 4 - year / 100 + year / 400) >= n) { --year; }  n -= temp; ++year;  if ((year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0))) { if (n > 60) { ++n; } } else { if (n > 59) { n += 2; } }  n += 91; int month = (n * 100) / 3055; int day = n - (month * 3055) / 100; month -= 2;  return LocalDate.of(year, month, day); } catch (Exception e) { throw new TransformationException("Error transforming component value to model value"); } }
[*] target: assertEquals(expectedDate, result)
[-] pred: org. junit. Assert. assertEquals ( expectedDate, result )
************************************
************************************
[+] input: should_not_mappe_movie_null() { // when final Movie result = MovieMapper.toDomain(null); // then "<AssertPlaceHolder>"; }
toDomain(final MovieDb movieDb) { if (movieDb == null) { return null; } return Movie.builder() .id(String.valueOf(movieDb.getId())) .title(movieDb.getTitle()) .synopsys(movieDb.getOverview()) .rate(new Rate(movieDb.getPopularity())) .releaseDate(DateTimeUtil.getFromISO(movieDb.getReleaseDate())) .build(); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: test() { String str = "abcdef1234567890中国©®£\uD83D\uDE0D\uD83D\uDC81\uD83D\uDC4C\uD83C\uDF8D\uD83D\uDE0D"; String json = JSON.toJSONString(str); byte[] bytes = json.getBytes(StandardCharsets.UTF_8); JSONReader jsonReader = JSONReader.of(bytes, 0, bytes.length, StandardCharsets.UTF_8); String parsed = jsonReader.readString(); "<AssertPlaceHolder>"; }
readString() { final byte[] bytes = this.bytes; if (ch == '"' || ch == ''') { char quote = this.ch; int valueLength; int offset = this.offset; final int start = offset, end = this.end; boolean ascii = true; valueEscape = false;  for (int i = 0; ; ++i) { if (offset >= end) { throw new JSONException("invalid escape character EOI"); }  int ch = bytes[offset]; if (ch == '\') { valueEscape = true; ch = bytes[offset + 1]; offset += (ch == 'u' ? 6 : (ch == 'x' ? 4 : 2)); continue; }  if (ch >= 0) { if (ch == quote) { valueLength = i; break; } offset++; } else { ascii = false; switch ((ch & 0xFF) >> 4) { case 12: case 13: { /* 110x xxxx   10xx xxxx*/ offset += 2; break; } case 14: { offset += 3; break; } default: { /* 10xx xxxx,  1111 xxxx */ if ((ch >> 3) == -2) { offset += 4; i++; break; }  throw new JSONException("malformed input around byte " + offset); } } } }  String str; if (valueEscape) { char[] chars = new char[valueLength]; offset = start; for (int i = 0; ; ++i) { int ch = bytes[offset]; if (ch == '\') { ch = bytes[++offset]; switch (ch) { case 'u': { ch = DIGITS2[bytes[offset + 1]] * 0x1000 + DIGITS2[bytes[offset + 2]] * 0x100 + DIGITS2[bytes[offset + 3]] * 0x10 + DIGITS2[bytes[offset + 4]]; offset += 4; break; } case 'x': { ch = DIGITS2[bytes[offset + 1]] * 0x10 + DIGITS2[bytes[offset + 2]]; offset += 2; break; } case '\': case '"': break; case 'b': ch = '\b'; break; case 't': ch = '\t'; break; case 'n': ch = '\n'; break; case 'f': ch = '\f'; break; case 'r': ch = '\r'; break; default: ch = char1(ch); break; } chars[i] = (char) ch; offset++; } else if (ch == quote) { break; } else { if (ch >= 0) { chars[i] = (char) ch; offset++; } else { switch ((ch & 0xFF) >> 4) { case 0b1100: case 0b1101: { /* 110x xxxx   10xx xxxx*/ int c2 = bytes[offset + 1]; chars[i] = (char) ( ((ch & 0x1F) << 6) | (c2 & 0x3F)); offset += 2; break; } case 0b1110: { chars[i] = (char) (((ch & 0x0F) << 12) | ((bytes[offset + 1] & 0x3F) << 6) | ((bytes[offset + 2] & 0x3F))); offset += 3; break; } default: { char2_utf8(bytes, offset, ch, chars, i); offset += 4; i++; } } } } }  str = new String(chars); } else if (ascii) { int strlen = offset - start; if (strlen == 1) { str = TypeUtils.toString((char) (bytes[start] & 0xff)); } else if (strlen == 2) { str = TypeUtils.toString( (char) (bytes[start] & 0xff), (char) (bytes[start + 1] & 0xff) ); } else if (STRING_CREATOR_JDK8 != null) { char[] chars = new char[strlen]; for (int i = 0; i < strlen; ++i) { chars[i] = (char) bytes[start + i]; }  str = STRING_CREATOR_JDK8.apply(chars, Boolean.TRUE); } else if (STRING_CREATOR_JDK11 != null) { byte[] buf = Arrays.copyOfRange(bytes, start, offset); str = STRING_CREATOR_JDK11.apply(buf, LATIN1); } else if (ANDROID) { str = getLatin1String(start, offset - start); } else { str = new String(bytes, start, offset - start, ISO_8859_1); } } else { str = new String(bytes, start, offset - start, UTF_8); }  if ((context.features & Feature.TrimString.mask) != 0) { str = str.trim(); } // empty string to null if (str.isEmpty() && (context.features & Feature.EmptyStringAsNull.mask) != 0) { str = null; }  int ch = ++offset == end ? EOI : bytes[offset++]; while (ch <= ' ' && (1L << ch & SPACE) != 0) { ch = offset == end ? EOI : bytes[offset++]; }  if (comma = ch == ',') { ch = offset == end ? EOI : bytes[offset++]; while (ch <= ' ' && (1L << ch & SPACE) != 0) { ch = offset == end ? EOI : bytes[offset++]; } }  this.ch = (char) ch; this.offset = offset; return str; }  return readStringNotMatch(); }
[*] target: assertEquals(str, parsed)
[-] pred: org. junit. Assert. assertEquals ( str, parsed )
************************************
************************************
[+] input: givenMultipleEmtpyAndNonEmptyLinesToIndent() { List<String> toVerify = toTest() .withBody("Line 1", "", "Line 2") .getBodyGenerator() .indent() .indent() .lines();  List<String> expected = asList( "        Line 1", "", "        Line 2" );  "<AssertPlaceHolder>"; }
lines() { return lines; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: SQLException { when(this.mockPluginService.getHosts()).thenReturn(Collections.singletonList(writerHostSpec));  final ReadWriteSplittingPlugin plugin = new ReadWriteSplittingPlugin( mockPluginService, defaultProps, mockHostListProviderService, mockWriterConn, null); plugin.switchConnectionIfRequired(true);  verify(mockPluginService, times(0)) .setCurrentConnection(any(Connection.class), any(HostSpec.class)); assertEquals(mockWriterConn, plugin.getWriterConnection()); "<AssertPlaceHolder>"; }
getReaderConnection() { return this.readerConnection; }
[*] target: assertNull(plugin.getReaderConnection())
[-] pred: org. junit. Assert. assertNull ( plugin. getReaderConnection() )
************************************
************************************
[+] input: MessagingException { doNothing().when(log).error(anyString(), any(Exception.class)); doCallRealMethod().when(mu).closeTransport(null); doNothing().when(mu).initMailConfig(); Session session = mock(Session.class); InternetAddress[] internetAddressList = new InternetAddress[0]; Address[] addresses = new Address[0]; doNothing().when(session).setDebug(true); try(MockedStatic<Session> s = mockStatic(Session.class); MockedConstruction<InternetAddress> i = mockConstruction(InternetAddress.class, (ic, c) -> {}); MockedConstruction<MimeMessage> m = mockConstruction(MimeMessage.class, (mk,c) -> { doNothing().when(mk).setFrom(any(InternetAddress.class)); doNothing().when(mk).setRecipients(Message.RecipientType.TO, internetAddressList); doNothing().when(mk).setContent(anyString(), anyString()); doNothing().when(mk).setSentDate(any(Date.class)); doAnswer(a -> { throw new MessagingException(""); }).when(mk).saveChanges(); when(mk.getAllRecipients()).thenReturn(addresses); })) { s.when(() -> Session.getDefaultInstance(any(Properties.class))).thenReturn(session); SendStatus sendStatus = mu.sendValidateCodeForResetPWD("", "", ""); Assertions."<AssertPlaceHolder>"; } }
sendValidateCodeForResetPWD(String to, String username, String validateCode) { SendStatus sendStatus = new SendStatus(SEND_STATUS_FALSE, ""); String html = readHtmlToString("resetPasswordTemplate.html"); Document doc = Jsoup.parse(html); doc.getElementById(USER_NAME).html(username); doc.getElementById("code").html(validateCode); doc.getElementById("account").html(to); doc.getElementById("validateTimes").html("5"); sendEmail(doc, sendStatus, Lists.newArrayList(to), "修改密码-验证码", "Send validate code email failed before reset password"); return sendStatus; }
[*] target: assertNotNull(sendStatus)
[-] pred: org. junit. Assert. assertNotNull ( sendStatus )
************************************
************************************
[+] input: testReturnSubstringWithCodon3() { String expectedResult = this.expectedCodon3; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon3); "<AssertPlaceHolder>"; }
returnSubstring(String dnaString, int index) { return dnaString.substring(index, index + 3).toUpperCase(); }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
************************************
[+] input: testReturnSubstringWithCodon7() { String expectedResult = this.expectedCodon7; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon7); "<AssertPlaceHolder>"; }
returnSubstring(String dnaString, int index) { return dnaString.substring(index, index + 3).toUpperCase(); }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
************************************
[+] input: testUpdate() { User user = new User(); user.setName("李四"); user.setAge(17); user.setId(1L); int update = commonDao.update(user); Assertions."<AssertPlaceHolder>"; }
update(T params);  /** * 根据主键选择一个对象 * * @param id  关键字 * @param cls 指定一个实体 * @return result */ @SelectProvider(type = SqlBuilder.class, method = "select") <T> Map<?,?> select(@Param("id") T id, Class<?> cls);  /** * 查询列表条数跟 selectList 配对使用 * * @param params param * @param <T> param type * @return count */ @SelectProvider(type = SqlBuilder.class, method = "selectCount") <T> long selectCount(T params);  /** * 查询列表 * * @param params param * @return result */ @SelectProvider(type = SqlBuilder.class, method = "selectList") <T> List<Map<?,?>> selectList(T params);   /** * 自定义查询列表结果 * * @param params param * @return result */ @Select(" ${selfSQL}
[*] target: assertEquals(1, update)
[-] pred: org. junit. Assert. assertEquals ( 1, update )
************************************
************************************
[+] input: testRunningTaskNum() { long except = 5L; when(taskRepository.count(Query.query(Criteria.where("is_deleted").ne(true) .and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED, TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )), user)).thenReturn(except); long result = taskService.runningTaskNum(user); "<AssertPlaceHolder>"; }
runningTaskNum(UserDetail userDetail);  public abstract boolean checkCloudTaskLimit(ObjectId taskId, UserDetail user, boolean checkCurrentTask); public abstract void updateDelayTime(ObjectId taskId, long delayTime); public abstract void refreshSchemas(TaskDto taskDto, String nodeIds, String keys, UserDetail userDetail); public abstract void checkSourceTimeDifference(TaskDto taskDto,UserDetail userDetail);  @Data @AllArgsConstructor @NoArgsConstructor public static class Char1Group { private String _id; private long count; }
[*] target: assertEquals(except, result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
************************************
[+] input: shouldTransformToModelWithValidJulianDate() { LocalDate expectedDate = LocalDate.of(2005, 3, 4); int julianDate = 2453434; LocalDate result = transformer.transformToModel(julianDate); "<AssertPlaceHolder>"; }
transformToModel(Integer viewValue) { try { if (viewValue < 0) { return null; }  if (viewValue == 0) { return LocalDate.now(); }  int n = viewValue - 1721425; int year = n / 365;  int temp; while ((temp = year * 365 + year / 4 - year / 100 + year / 400) >= n) { --year; }  n -= temp; ++year;  if ((year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0))) { if (n > 60) { ++n; } } else { if (n > 59) { n += 2; } }  n += 91; int month = (n * 100) / 3055; int day = n - (month * 3055) / 100; month -= 2;  return LocalDate.of(year, month, day); } catch (Exception e) { throw new TransformationException("Error transforming component value to model value"); } }
[*] target: assertEquals(expectedDate, result)
[-] pred: org. junit. Assert. assertEquals ( expectedDate, result )
************************************
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
encode(String value, @NotNull ProtocolVersion protocolVersion) { if (value == null) { return null; } else { long longValue = Long.parseLong(value); return TypeCodecs.BIGINT.encode(longValue, protocolVersion); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("" + "{"a": [{"b":[{"a": 1},{"a": 1}]},{"b":[{"a": 1}]}]}" + ""));  Iterable<String> nodes = record.generatePaths("/a/*/b/*/a");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(3)); }
generatePaths(String pattern) { List<String> pointers = Arrays.asList(pattern.split("/"));  return generatePaths(node, pointers.subList(1, pointers.size()), ""); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
************************************
[+] input: shouldTriggerAutomaticSnapshot_EmptyExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
shouldTriggerAutomaticSnapshot( SnapshotType snapshotType, String automaticTriggerExpression, Instant lastTrigger) { if (StringUtils.isBlank(automaticTriggerExpression)) { return false; } // automaticTriggerExpression was configured by the user  Optional<Duration> interval = interpretAsInterval(automaticTriggerExpression); Optional<CronExpression> cron = interpretAsCron(automaticTriggerExpression);  // This should never happen. The string cannot be both a valid Duration and a cron // expression at the same time. if (interval.isPresent() && cron.isPresent()) { LOG.error( "Something went wrong with the automatic {} trigger expression {}. This setting cannot be simultaneously a valid Duration and a cron expression.", snapshotType, automaticTriggerExpression); return false; }  if (interval.isPresent()) { return shouldTriggerIntervalBasedSnapshot(snapshotType, interval.get(), lastTrigger); } else if (cron.isPresent()) { return shouldTriggerCronBasedSnapshot( snapshotType, cron.get(), lastTrigger, Instant.now()); } else { LOG.warn( "Automatic {} triggering is configured, but the trigger expression '{}' is neither a valid Duration, nor a cron expression.", snapshotType, automaticTriggerExpression); return false; } }
[*] target: assertFalse(shouldTrigger)
[-] pred: org. junit. Assert. assertFalse ( shouldTrigger )
************************************
************************************
[+] input: testStripQuotesAtStartAndEndSingleQuoteEnd() { String input = "/home/user/file.txt""; String expected = input; String result = PathUtil.stripQuotesAtStartAndEnd(input);  "<AssertPlaceHolder>"; }
stripQuotesAtStartAndEnd(String path) { if (path.startsWith(""") && path.endsWith(""")) { return path.substring(1, path.length() - 1); }  return path; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(COMPARATOR.with(T), "left"), Parameter.of(COMPARATOR.with(U), "right"), Parameter.of(FUNCTION.with(V.asType().contravariant(), I.asType().covariant()), "toIntermediate"), Parameter.of(FUNCTION.with(I.asType().contravariant(), T.asType().covariant()), "extractLeft"), Parameter.of(FUNCTION.with(I.asType().contravariant(), U.asType().covariant()), "extractRight") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), I.asTypeParameter(), V.asTypeParameter());  ContravariantParametersAndTypeParametersValidator.Result result = new ContravariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), COMPARATOR.with(T), COMPARATOR.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
validateTypeParametersAndParameters(List<TypeParameter> typeParameters, List<Parameter> parameters, List<String> errorMessages) {  List<String> additionalErrorMessages = new ArrayList<>();  verifyParameterCount(parameters, 5, additionalErrorMessages); verifyTypeParameterCount(typeParameters, 4, additionalErrorMessages);  if (!additionalErrorMessages.isEmpty()) { errorMessages.addAll(additionalErrorMessages); return null; }  TypeParameter leftInputTypeConstructorArgument = typeParameters.get(0); TypeParameter rightInputTypeConstructorArgument = typeParameters.get(1); TypeParameter intermediateTypeConstructorArgument = typeParameters.get(2); TypeParameter returnTypeConstructorArgument = typeParameters.get(3);  Parameter leftParameter = parameters.get(0); Parameter rightParameter = parameters.get(1); Parameter toIntermediateParameter = parameters.get(2); Parameter extractLeftParameter = parameters.get(3); Parameter extractRightParameter = parameters.get(4);  // Check if the third parameter is as expected: Type expectedToIntermediateType = FUNCTION.with(returnTypeConstructorArgument.asType().contravariant(), intermediateTypeConstructorArgument.asType().covariant()); if (!Objects.equals(toIntermediateParameter.getType(), expectedToIntermediateType)) { additionalErrorMessages.add("Expected third argument to be a " + generateFrom(expectedToIntermediateType) + " but was " + generateFrom(toIntermediateParameter.getType())); }  // Check if the fourth parameter is as expected: Type expectedExtractLeftType = FUNCTION.with(intermediateTypeConstructorArgument.asType().contravariant(), leftInputTypeConstructorArgument.asType().covariant()); if (!Objects.equals(extractLeftParameter.getType(), expectedExtractLeftType)) { additionalErrorMessages.add("Expected fourth argument to be a " + generateFrom(expectedExtractLeftType) + " but was " + generateFrom(extractLeftParameter.getType())); }  // Check if the fourth parameter is as expected: Type expectedExtractRightType = FUNCTION.with(intermediateTypeConstructorArgument.asType().contravariant(), rightInputTypeConstructorArgument.asType().covariant()); if (!Objects.equals(extractRightParameter.getType(), expectedExtractRightType)) { additionalErrorMessages.add("Expected fifth argument to be a " + generateFrom(expectedExtractRightType) + " but was " + generateFrom(extractRightParameter.getType())); }  if (additionalErrorMessages.isEmpty()) { return Result.of( leftInputTypeConstructorArgument, rightInputTypeConstructorArgument, returnTypeConstructorArgument, leftParameter.getType(), rightParameter.getType() ); } else { errorMessages.addAll(additionalErrorMessages); return null; } }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: shouldFindCustomerById() {  CusCustomer cusCustomer = createDummyCusCustomer(); Long cusCustomerId = cusCustomer.getId(); CusCustomerDto expectedResult = createDummyCusCustomerDto();  when(cusCustomerEntityService.getByIdWithControl(cusCustomerId)).thenReturn(cusCustomer);  CusCustomerDto result = cusCustomerService.findCustomerById(cusCustomerId);  "<AssertPlaceHolder>"; assertNotNull(result); }
findCustomerById(Long id) {  CusCustomer cusCustomer = cusCustomerEntityService.getByIdWithControl(id);  CusCustomerDto cusCustomerDto = CusCustomerMapper.INSTANCE.convertToCusCustomerDto(cusCustomer);  return cusCustomerDto; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: test_When_GetProductById_isSuccess() { Product product = getMockProductDetails(); when(productRepository.findById(product.getProductId())).thenReturn(Optional.of(product));  ProductResponse productResponse = productService.getProductById(1); //Verification verify(productRepository, times(1)).findById(anyLong());  //Assert "<AssertPlaceHolder>"; assertEquals(product.getProductId(), productResponse.getProductId());  }
getProductById(long productId) {  log.info("ProductServiceImpl | getProductById is called"); log.info("ProductServiceImpl | getProductById | Get the product for productId: {}", productId);  Product product = productRepository.findById(productId) .orElseThrow( () -> new ProductServiceCustomException("Product with given Id not found","PRODUCT_NOT_FOUND"));  ProductResponse productResponse = new ProductResponse();  copyProperties(product, productResponse);  log.info("ProductServiceImpl | getProductById | productResponse :" + productResponse.toString());  return productResponse; }
[*] target: assertNotNull(productResponse)
[-] pred: org. junit. Assert. assertNotNull ( productResponse )
************************************
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
encode(String value, @NotNull ProtocolVersion protocolVersion) { if (value == null) { return null; } Instant instantValue = LocalDateTime.parse(value, formatter).toInstant(zoneOffset); return TypeCodecs.TIMESTAMP.encode(instantValue, protocolVersion); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: testLoadUnsupportedType() { var loader = new SAXLoader(); Set<String> errors = new HashSet<>();  var xhtml = loader.load(new Object(), true, errors);  "<AssertPlaceHolder>"; assertEquals(0, errors.size()); }
load(String data, boolean fragment, Set<String> errors) throws ContentManagerException { var complete_page = data;  if (fragment) { var t = TemplateFactory.HTML.get("cmf.container.template"); t.setValue("fragment", data); complete_page = t.getContent(); }  Reader reader = new StringReader(complete_page);  var sax_parse_exception = false; try { var inputsource = new InputSource(reader);  SAXParser parser = null;  try { parser = SAXParserFactory.newInstance().newSAXParser(); } catch (ParserConfigurationException | SAXException e) { throw new XmlErrorException(e); }  try { parser.getXMLReader().setFeature("http://xml.org/sax/features/validation", true); } catch (SAXException e) { throw new XmlErrorException("The parser '" + parser.getClass().getName() + "' doesn't support validation.", e); }  try { parser.parse(inputsource, this); } catch (SAXParseException e) { sax_parse_exception = true; if (errors != null) { errors.add(formatException(fragment, e)); } } catch (SAXException e) { if (e.getException() != null && e.getException() instanceof RuntimeException) { throw (RuntimeException) e.getException(); } else { throw new XmlErrorException(e); } } catch (IOException e) { throw new XmlErrorException(e); }  if (errors != null) { if (errorRedirector_.hasErrors()) { errors.addAll(formatExceptions(fragment, errorRedirector_.getErrors())); } if (errorRedirector_.hasFatalErrors()) { errors.addAll(formatExceptions(fragment, errorRedirector_.getFatalErrors())); } } } catch (RuntimeException e) { if (errors != null) { errors.add(e.getMessage()); } return null; }  if (sax_parse_exception || (errors != null && !errors.isEmpty()) || (errorRedirector_.hasErrors() || errorRedirector_.hasFatalErrors())) { return null; }  return new LoadedContent<>(MimeType.APPLICATION_XHTML, data); }
[*] target: assertNull(xhtml)
[-] pred: org. junit. Assert. assertNull ( xhtml )
************************************
************************************
[+] input: AuthenticationException {  SurenessAccount account = DefaultAccount.builder("app1") .setPassword(Md5Util.md5(password + salt)) .setSalt(salt) .setOwnRoles(roles) .setDisabledAccount(Boolean.FALSE) .setExcessiveAttempts(Boolean.FALSE) .build(); LoginDto loginDto = LoginDto.builder() .credential(password) .identifier(identifier) .build();  when(accountProvider.loadAccount(identifier)).thenReturn(account);  Map<String, String> response = accountService.authGetToken(loginDto);  "<AssertPlaceHolder>"; assertNotNull(response.get("token")); assertNotNull(response.get("refreshToken")); assertNotNull(response.get("role")); assertEquals(JsonUtil.toJson(roles), response.get("role"));  }
authGetToken(LoginDto loginDto) throws AuthenticationException;
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: testOfferWhenTryEmitReturnFalse() { when(mockHazelcastBaseNode.tryEmit(tapdataEvent, 1)).thenReturn(false); boolean actual = mockHazelcastBaseNode.offer(tapdataEvent); "<AssertPlaceHolder>"; }
offer(TapdataEvent dataEvent) { if (dataEvent != null) { if (processorBaseContext.getNode() != null) { dataEvent.addNodeId(processorBaseContext.getNode().getId()); } Outbox outbox = getOutboxAndCheckNullable(); int bucketCount = outbox.bucketCount(); if (!tryEmit(dataEvent, bucketCount)) return false; } bucketIndex = 0; // reset to 0 of return true return true; }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
************************************
[+] input: validateGivenNonStaticInnerClassAsContainingClass() { ContainingClass toValidate = PackageName.of("nl.wernerdegroot.applicatives") .asPackage() .containingClass(modifiers(), ClassName.of("Outer"), A, B) .containingClass(modifiers(), ClassName.of("Inner"), C, D);  Validated<String, ClassValidator.Result> expected = Validated.invalid("Only outer classes and static inner classes are currently supported"); Validated<String, ClassValidator.Result> toVerify = ClassValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
validate(ContainingClass containingClass) {  // We check whether we're dealing with an outer class or a static inner class. // Why is this required? Consider the following scenario: // //   class Outer<A extends B, B> { //     class Inner<B> { //       ... //     } //   } // // It is impossible to collapse these three type parameters of these two classes into a // single list of type parameters without carefully renaming some of them to avoid shadowing. // Instead of going through all that effort for this extreme edge-case, I'm just going avoid // it completely. If we'd like to be more sophisticated we could try: // //  * To support only a single class with type parameters in the hierarchy //  * Only support multiple classes with type parameters if their names don't conflict //  * Only support conflicts if the type parameter that is shadowed can be removed //    completely (isn't used as upper bound for any of the other type parameters) if (!containingClass.isOuterClass() && !containingClass.isStaticInnerClass()) { return Validated.invalid("Only outer classes and static inner classes are currently supported"); } List<TypeParameter> typeParameters = containingClass.getTypeParameters();  return Validated.valid(Result.of(typeParameters)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: shouldReturnJwtResponseWithMatchingToken() { JwtResponseBuilder jwtResponse = JwtResponseBuilder.buildJwtResponse(JWT_TOKEN, userDetailsBuilder); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(JWT_TOKEN, jwtResponse.getAccessToken()); }
buildJwtResponse( String jwToken, UserDetailsBuilder userDetails) {  var localUserDetails = userDetails; if (Objects.isNull(localUserDetails)) { localUserDetails = SecurityUtils.getAuthenticatedUserDetails(); }  if (Objects.nonNull(localUserDetails)) { List<String> roleList = new ArrayList<>(); for (GrantedAuthority authority : localUserDetails.getAuthorities()) { roleList.add(authority.getAuthority()); } return JwtResponseBuilder.builder() .accessToken(jwToken) .email(localUserDetails.getEmail()) .username(localUserDetails.getUsername()) .publicId(localUserDetails.getPublicId()) .type(SecurityConstants.BEARER) .roles(roleList) .build(); } return JwtResponseBuilder.builder().build(); }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
************************************
[+] input: sholudCalculateLengthOfCGAsZero() { String testEmptyString = ""; int expected = 0; int actual = Properties.calculateLengthOfCG(testEmptyString); "<AssertPlaceHolder>"; }
calculateLengthOfCG(String dna) { int gcLength = 0; char[] dnaCharArray = dna.toCharArray();  for (char letter : dnaCharArray) { if (letterIsCorG(letter)) { gcLength++; } }  return gcLength; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: getPartitionsEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getPartitionsCountByEnv( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(TestConstants.TOPICS_COUNT_STRING_BY_ENV_ID_INT); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when(manageDatabase.getEnvsOfTenantsMap()) .thenReturn(Map.of(TestConstants.TENANT_ID, List.of(TestConstants.ENV_ID))); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getPartitionsEnvOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
getPartitionsEnvOverview(Integer teamId, Integer tenantId) {  List<CommonUtilsService.ChartsOverviewItem<String, Integer>> partitionsCountList = manageDatabase.getHandleDbRequests().getPartitionsCountByEnv(teamId, tenantId); String title = ANALYTICS_105; if (teamId != null) { title += " (" + manageDatabase.getTeamNameFromTeamId(tenantId, teamId) + ")"; }  // tenant filtering try { List<String> allowedEnvIdList = manageDatabase.getEnvsOfTenantsMap().get(tenantId); if (partitionsCountList != null) { partitionsCountList = partitionsCountList.stream() .filter(mapObj -> allowedEnvIdList.contains(mapObj.getxValue())) .collect(Collectors.toList()); partitionsCountList = partitionsCountList.stream() .map(item -> item.transformX(x -> getEnvName(item.getxValue()))) .collect(Collectors.toList()); } } catch (Exception e) { log.error("No environments/clusters found.", e); partitionsCountList = new ArrayList<>(); }  return commonUtilsService.getChartsJsOverview( partitionsCountList, title, MapConstants.CLUSTER_KEY, "Clusters", "Partitions", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: deleteEmployee() { Employee employee = new Employee(); employee.setName("John"); employee.setSalary(20000); Employee savedEmployee = employeeRepositoryService.createEmployee(employee);  employeeRepositoryService.deleteEmployee(savedEmployee.getEmployeeId());  Employee fetchedEmployee = employeeRepositoryService.getEmployee(savedEmployee.getEmployeeId()); "<AssertPlaceHolder>"; }
getEmployee(String employeeId) { Optional<Employee> employeeOptional = employeeRepository.findById(employeeId); return employeeOptional.orElse(null); }
[*] target: assertNull(fetchedEmployee)
[-] pred: org. junit. Assert. assertNull ( fetchedEmployee )
************************************
************************************
[+] input: validateGivenMethodWithNoSharedTypeConstructorBetweenInputParametersAndReturnType() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(COMPLETABLE_FUTURE.with(V)), "myFunction", asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid("No shared type constructor between parameters (java.util.Optional<T> and java.util.Optional<U>) and result (java.util.concurrent.CompletableFuture<V>)"); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
validate(Method method, ParametersAndTypeParametersValidator parametersAndTypeParametersValidator) { List<String> errorMessages = new ArrayList<>();  verifyCanImplementAbstractMethod(method, errorMessages); verifyTypeParametersAreUnbounded(method, errorMessages); Type returnType = verifyHasReturnType(method, errorMessages); ParametersAndTypeParametersValidator.Result parametersAndTypeParameters = verifyParametersAndTypeParameters(method, parametersAndTypeParametersValidator, errorMessages);  if (!errorMessages.isEmpty()) { return Validated.invalid(errorMessages); }  // Assign a meaningful name to each of the (three) type parameters: TypeParameter leftInputTypeConstructorArgument = parametersAndTypeParameters.getLeftInputTypeConstructorArgument(); TypeParameter rightInputTypeConstructorArgument = parametersAndTypeParameters.getRightInputTypeConstructorArgument(); TypeParameter returnTypeConstructorArgument = parametersAndTypeParameters.getReturnTypeConstructorArgument();  // Assign a meaningful name to the left and right parameters: Type leftParameterType = parametersAndTypeParameters.getLeftParameterType(); Type rightParameterType = parametersAndTypeParameters.getRightParameterType();  String name = method.getName();  TypeConstructor accumulatedTypeConstructor = returnType.asTypeConstructorWithPlaceholderFor(returnTypeConstructorArgument.getName()); TypeConstructor partiallyAccumulatedTypeConstructor = leftParameterType.asTypeConstructorWithPlaceholderFor(leftInputTypeConstructorArgument.getName()); TypeConstructor inputTypeConstructor = rightParameterType.asTypeConstructorWithPlaceholderFor(rightInputTypeConstructorArgument.getName());  if (!partiallyAccumulatedTypeConstructor.canAccept(accumulatedTypeConstructor)) { // Tweak the error message to not confuse people using the simple case where // parameter types and result type should be identical: if (Objects.equals(partiallyAccumulatedTypeConstructor, inputTypeConstructor)) { return Validated.invalid("No shared type constructor between parameters (" + generateFrom(leftParameterType) + " and " + generateFrom(rightParameterType) + ") and result (" + generateFrom(returnType) + ")"); } else { return Validated.invalid("No shared type constructor between first parameter (" + generateFrom(leftParameterType) + ") and result (" + generateFrom(returnType) + ")"); } }  verifyNoCrossReferences(method.getTypeParameters(), leftParameterType, partiallyAccumulatedTypeConstructor, "type of the first parameter", errorMessages); verifyNoCrossReferences(method.getTypeParameters(), rightParameterType, inputTypeConstructor, "type of the second parameter", errorMessages); verifyNoCrossReferences(method.getTypeParameters(), returnType, accumulatedTypeConstructor, "return type", errorMessages);  if (!errorMessages.isEmpty()) { return Validated.invalid(errorMessages); }  return Validated.valid( AccumulatorValidator.Result.of( name, inputTypeConstructor, partiallyAccumulatedTypeConstructor, accumulatedTypeConstructor, leftParameterType, rightParameterType, returnType ) ); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
encode(Integer value, @NotNull ProtocolVersion protocolVersion) { if (value == null) { return null; } else { String stringValue = value.toString(); return TypeCodecs.TEXT.encode(stringValue, protocolVersion); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: getProducerAclsTeamsOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.PRODUCER.value, null, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getProducerAclsTeamsOverview(null, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
getProducerAclsTeamsOverview(Integer teamId, Integer tenantId) { List<CommonUtilsService.ChartsOverviewItem<Integer, Integer>> producerAclsPerTeamList = manageDatabase .getHandleDbRequests() .getAclsCountByTeams(AclType.PRODUCER.value, teamId, tenantId);  String title = ANALYTICS_101; if (teamId != null) { title += " (" + manageDatabase.getTeamNameFromTeamId(tenantId, teamId) + ")"; } else { title += " (all teams)"; }  return commonUtilsService.getChartsJsOverview( producerAclsPerTeamList, title, "teamid", "Teams", "Producer Acls", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testInspectEvent_ReturnNull() { PerformanceInspection eventStartInspection = PerformanceInspection.createEventStartInspection("event start"); PerformanceInspectionResult eventStartResult = performanceTestManagementService.inspect(eventStartInspection); Assertions.assertNull(eventStartResult);  PerformanceInspection eventEndInspection = PerformanceInspection.createEventEndInspection("event end"); PerformanceInspectionResult eventEndResult = performanceTestManagementService.inspect(eventEndInspection); Assertions."<AssertPlaceHolder>";  }
inspect(PerformanceInspection performanceInspection) { ITestRun testRun = getTestRun(); return inspect(performanceInspection, testRun); }
[*] target: assertNull(eventEndResult)
[-] pred: org. junit. Assert. assertNull ( eventEndResult )
************************************
************************************
[+] input: testGetTaskDtoIsomorphismNormal() { DataParentNode node1 = mock(DataParentNode.class); when(node1.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(0)).thenReturn(node1);  DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node2);  boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(1)).get(1);  verify(node1, times(1)).getDatabaseType(); verify(node2, times(1)).getDatabaseType(); }
getTaskDtoIsomorphism(List<Node> nodes) { if (null == nodes || nodes.size() != 2) { return false; } Node node1 = nodes.get(0); if (!(node1 instanceof DataParentNode)) return false; Node node2 = nodes.get(1); if (!(node2 instanceof DataParentNode)) return false; DataParentNode dataParentNode1 = (DataParentNode)node1; DataParentNode dataParentNode2 = (DataParentNode)node2; String databaseType = String.valueOf(dataParentNode1.getDatabaseType()); return databaseType.equals(dataParentNode2.getDatabaseType()); }
[*] target: assertTrue(isomorphism)
[-] pred: org. junit. Assert. assertTrue ( isomorphism )
************************************
************************************
[+] input: of() { GenericType expected = new GenericType(T); GenericType toVerify = GenericType.of(T);  "<AssertPlaceHolder>"; }
of(TypeParameterName name) { return new GenericType(name); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testCheckWhenDifferentUserId() { OnlySelfDataPermissionChecker checker = new OnlySelfDataPermissionChecker(deptService); SystemLoginUser loginUser = new SystemLoginUser(); loginUser.setUserId(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
check(SystemLoginUser loginUser, DataCondition condition) { if (condition == null || loginUser == null) { return false; }  if (loginUser.getUserId() == null || condition.getTargetUserId() == null) { return false; }  Long currentUserId = loginUser.getUserId(); Long targetUserId = condition.getTargetUserId(); return Objects.equals(currentUserId, targetUserId); }
[*] target: assertFalse(check)
[-] pred: org. junit. Assert. assertFalse ( check )
************************************
************************************
[+] input: withoutTypeParameters() { ContainingClass expected = new ContainingClass( containingPackage, modifiers(PUBLIC), new ClassName("Erudite"), emptyList() );  ContainingClass toVerify = ContainingClass.of( packageName, new ClassName("Erudite") );  "<AssertPlaceHolder>"; }
of(PackageName packageName, ClassName className) { return ContainingClass.of(packageName, className, emptyList()); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testNullList() { final List<Object> list = new ArrayList<>(); list.add(null); String expectedName = "java.util.ArrayList-"; final String actualName = TypeUtil.getName(list); "<AssertPlaceHolder>"; }
getName(Object result) { if (result == null) { return null; }  if (result instanceof Map) { return mapToString((Map<?, ?>) result); }  // Optional GSON if (result instanceof Optional) { return optionalToString((Optional<?>) result); }  if (result instanceof Collection<?>) { return collectionToString((Collection<?>) result); }  if (result instanceof ParameterizedType) { return parameterizedTypeToString((ParameterizedType) result); }  if (result instanceof Class) { return ((Class<?>) result).getTypeName(); }  if (isGenericType(result)) { return genericTypeToString(result); }  return result.getClass().getName(); }
[*] target: assertEquals(expectedName, actualName)
[-] pred: org. junit. Assert. assertEquals ( expectedName, actualName )
************************************
************************************
[+] input: testConvertWhenConversionTypeIsCodec() { //        CqlConversion.Type conversionType = CqlConversion.Type.CODEC; //        List<CqlConversion.Type> conversionTypeList = Collections.singletonList(conversionType); // //        CqlConversion cqlConversion = spy(new CqlConversion(fromDataType, toDataType, codecRegistry)); //        doReturn(conversionTypeList).when(cqlConversion).getConversionTypeList(); //        doReturn(Collections.singletonList(fromDataType)).when(cqlConversion).getFromDataTypeList(); //        doReturn(Collections.singletonList(toDataType)).when(cqlConversion).getToDataTypeList(); // //        Object inputData = new Object(); //        Object expectedResult = new Object(); // //        // Stub the convert_ONE() method to return expectedResult when called with specific arguments //        doReturn(expectedResult).when(cqlConversion).convert_ONE(conversionType, inputData, fromDataType, toDataType, codecRegistry); // //        Object result = cqlConversion.convert(inputData); // //        // Verify that convert_ONE() was called with the expected arguments //        verify(cqlConversion).convert_ONE(conversionType, inputData, fromDataType, toDataType, codecRegistry); // //        "<AssertPlaceHolder>"; //    }
convert_ONE(Type conversionType, Object inputData, DataType fromDataType, DataType toDataType, CodecRegistry codecRegistry) { if (logger.isDebugEnabled()) logger.debug("convert_ONE conversionType {} inputData {} fromDataType {} toDataType {}",conversionType,inputData,fromDataType,toDataType); switch (conversionType) { case NONE: case UNSUPPORTED: return inputData; case CODEC: return convert_CODEC(inputData, fromDataType, toDataType, codecRegistry); case UDT: return convert_UDT((UdtValue) inputData, (UserDefinedType) fromDataType, (UserDefinedType) toDataType); } return inputData; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testLoadFromBytesErrorNoList() { var loader = new ImageIOLoader();  var image_bytes = new byte[]{2, 9, 7, 12, 45}; // just random values var image = loader.loadFromBytes(image_bytes, null);  "<AssertPlaceHolder>"; }
loadFromBytes(byte[] data, Set<String> errors) throws ContentManagerException { var input = new ByteArrayInputStream(data); Image image; MimeType mime_type = null;  try { var stream = ImageIO.createImageInputStream(input); if (stream == null) { throw new IIOException("Can't create an ImageInputStream"); }  var iter = ImageIO.getImageReaders(stream); if (!iter.hasNext()) { return null; }  var reader = iter.next();  // detect if any of the reader mimetypes corresponds to a CMF supported one var reader_mime_types = reader.getOriginatingProvider().getMIMETypes(); if (reader_mime_types != null) { for (var reader_mime : reader_mime_types) { mime_type = MimeType.getMimeType(reader_mime); if (mime_type != null) { break; } } }  // create an awt image var param = reader.getDefaultReadParam(); reader.setInput(stream, true, true); try { image = reader.read(0, param); } finally { reader.dispose(); stream.close(); }  if (image == null) { stream.close(); }  // wait until the image is fully loaded ImageWaiter.wait(image); } catch (Throwable e) { if (errors != null) { errors.add(ExceptionUtils.getExceptionStackTrace(e)); }  image = null; }  return new LoadedContent<>(mime_type, image); }
[*] target: assertNull(image)
[-] pred: org. junit. Assert. assertNull ( image )
************************************
************************************
[+] input: testReturnSubstringWithCodon2() { String expectedResult = this.expectedCodon2; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon2); "<AssertPlaceHolder>"; }
returnSubstring(String dnaString, int index) { return dnaString.substring(index, index + 3).toUpperCase(); }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
************************************
[+] input: givenManyModifiers() { String toVerify = toTest() .withModifiers(PUBLIC, STATIC, ABSTRACT) .withModifiers(PRIVATE, DEFAULT) .getModifiersGenerator() .generate();  String expected = "public private abstract default static";  "<AssertPlaceHolder>"; }
generate() { return modifiers .stream() .sorted(comparing(Modifier::ordinal)) .map(Modifier::toString) .collect(joining(SPACE)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testReturnSubstringWithCodon6() { String expectedResult = this.expectedCodon6; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon6); "<AssertPlaceHolder>"; }
returnSubstring(String dnaString, int index) { return dnaString.substring(index, index + 3).toUpperCase(); }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
************************************
[+] input: perform() { Concert concert = new Concert(new MockElvis()); concert.perform();  assertTrue(concert.isLightsOn()); "<AssertPlaceHolder>"; }
isMainStateOpen() { return mainStateOpen; }
[*] target: assertTrue(concert.isMainStateOpen())
[-] pred: org. junit. Assert. assertTrue ( concert. isMainStateOpen() )
************************************
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreNull() { when(nodeList.size()).thenReturn(2); when(nodeList.get(0)).thenReturn(null);  JsProcessorNode node2 = mock(JsProcessorNode.class); when(nodeList.get(1)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); }
getTaskDtoIsomorphism(List<Node> nodes) { if (null == nodes || nodes.size() != 2) { return false; } Node node1 = nodes.get(0); if (!(node1 instanceof DataParentNode)) return false; Node node2 = nodes.get(1); if (!(node2 instanceof DataParentNode)) return false; DataParentNode dataParentNode1 = (DataParentNode)node1; DataParentNode dataParentNode2 = (DataParentNode)node2; String databaseType = String.valueOf(dataParentNode1.getDatabaseType()); return databaseType.equals(dataParentNode2.getDatabaseType()); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { GroupKey id1 = new GroupKey("group-1");  "<AssertPlaceHolder>"; }
equals(@Nullable Object o) { if (this == o) { return true; }  if (o == null || getClass() != o.getClass()) { return false; }  GroupKey other = (GroupKey) o; return this.id.equals(other.id); }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
************************************
[+] input: testSuccess() { Result success = Result.success(); "<AssertPlaceHolder>"; assertEquals(success.getCode(), "000000"); assertEquals(success.getMesg(), "处理成功"); }
isSuccess() { return SUCCESSFUL_CODE.equals(this.code); }
[*] target: assertTrue(success.isSuccess())
[-] pred: org. junit. Assert. assertTrue ( success. isSuccess ( ) )
************************************
************************************
[+] input: shouldCalculateLoan() {  LoaCalculateLoanResponseDto result = loaLoanService.calculateLoan(24, BigDecimal.valueOf(3000));  "<AssertPlaceHolder>"; }
calculateLoan(Integer installment, BigDecimal principalLoanAmount) {  loaLoanValidationService.controlIsParameterNotNull(installment,principalLoanAmount);  BigDecimal installmentCount = BigDecimal.valueOf(installment);  BigDecimal totalInterestRate = INTEREST_RATE.add(TAX_RATE);  BigDecimal maturity = (installmentCount .multiply(BigDecimal.valueOf(30))).divide(BigDecimal.valueOf(36500),RoundingMode.CEILING);  BigDecimal totalInterest = (principalLoanAmount.multiply(totalInterestRate)).multiply(maturity).multiply(installmentCount); BigDecimal totalPayment = principalLoanAmount.add(totalInterest).add(ALLOCATION_FEE);  BigDecimal monthlyInstallmentAmount = totalPayment.divide(installmentCount,RoundingMode.CEILING);  BigDecimal annualCostRate = totalInterestRate.multiply(BigDecimal.valueOf(12));  loaLoanValidationService.controlIsInterestRateNotNegative(INTEREST_RATE); loaLoanValidationService.controlIsTaxRateNotNegative(TAX_RATE); loaLoanValidationService.controlIsInstallmentAmountPositive(monthlyInstallmentAmount); loaLoanValidationService.controlIsTotalPaymentPositive(totalPayment);  LoaCalculateLoanResponseDto loaCalculateLoanResponseDto = new LoaCalculateLoanResponseDto();  loaCalculateLoanResponseDto.setInterestRate(INTEREST_RATE); loaCalculateLoanResponseDto.setTotalInterest(totalInterest); loaCalculateLoanResponseDto.setMonthlyInstallmentAmount(monthlyInstallmentAmount); loaCalculateLoanResponseDto.setTotalPayment(totalPayment); loaCalculateLoanResponseDto.setAnnualCostRate(annualCostRate); loaCalculateLoanResponseDto.setAllocationFee(ALLOCATION_FEE);  return loaCalculateLoanResponseDto; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: 인물_관계_단일_조회() { // given var expected = Character.builder() .name("디프만 1번 출구") .type(CharacterType.PERSONA) .webtoonId(1L) .build();  Mockito.when(characterRepository.findById(anyLong())) .thenReturn(Optional.of(expected)); // when Character actual = characterService.findById(JOINED_ITEM_ID); // then "<AssertPlaceHolder>"; }
findById(Long characterId) { return characterRepository.findById(characterId) .orElseThrow(NotExistsCharacterException::new); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: execute() { Executor executor = DirectExecutor.INSTANCE; final boolean[] ran = {false}; executor.execute(() -> ran[0] = true); "<AssertPlaceHolder>"; }
execute(Runnable command) { command.run(); }
[*] target: assertTrue(ran[0])
[-] pred: org. junit. Assert. assertTrue ( ran[0] )
************************************
************************************
[+] input: testTrim() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("trim-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testTrim"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testTrim");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  OR price = 200";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), null)); }
parse() {  Map<String, SqlSource> sqlSourceMap = new HashMap<>();  XNode context = this.parser.evalNode("/mapper");  String namespace = context.getStringAttribute("namespace");  sqlElement(context.evalNodes("/mapper/sql"));  List<XNode> statements = context.evalNodes("select|insert|update|delete");  for (XNode node : statements) {  XMLStatementBuilder statementBuilder = new XMLStatementBuilder(node, sqlFragments); SqlSource sqlSource = statementBuilder.parseStatementNode();  String id = node.getStringAttribute("id"); String methodName = (namespace == null || namespace.length() == 0) ? id : String.format("%s.%s", namespace, id);  sqlSourceMap.put(methodName, sqlSource); }  return sqlSourceMap;  }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
************************************
[+] input: testGetAppByName() { App app = appDAO.getAppByName("xxx-service"); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(app.getName(), "xxx-service"); }
getAppByName(String appName);
[*] target: assertNotNull(app)
[-] pred: org. junit. Assert. assertNotNull ( app )
************************************
************************************
[+] input: testEmpty() { list.clear(); Map<String, Integer> actual = taskService.inspectChart(user); Assertions."<AssertPlaceHolder>"; assertEquals(list.size(), actual.get("total")); assertEquals(0, actual.get("error")); assertEquals(0, actual.get("running")); assertEquals(0, actual.get("done")); assertEquals(0, actual.get("waiting")); assertEquals(0, actual.get("scheduling")); assertEquals(0, actual.get("stopping")); }
inspectChart(UserDetail user) { int error = 0; int running = 0; int done = 0; int waiting = 0; int scheduling = 0; int stopping = 0; int total = 0; List<InspectDto> inspectDtoList = inspectTaskList(new Filter(), user); if (CollectionUtils.isNotEmpty(inspectDtoList)) { total = inspectDtoList.size(); for (InspectDto taskDto : inspectDtoList) { String status = String.valueOf(taskDto.getStatus()).toLowerCase(); if (ERROR.getValue().equals(status)) { error++; } else if(RUNNING.getValue().equals(status)) { running++; } else if (DONE.getValue().equals(status)) { done++; } else if (WAITING.getValue().equals(status)) { waiting++; }else if (SCHEDULING.getValue().equals(status)) { scheduling++; }else if (STOPPING.getValue().equals(status)) { stopping++; } } }  Map<String, Integer> chart5 = new HashMap<>(); chart5.put(TOTAL, total); chart5.put("error", error); chart5.put("running", running); chart5.put("done", done); chart5.put("waiting", waiting); chart5.put("scheduling", scheduling); chart5.put("stopping", stopping); return chart5; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testGetTableNameWithNullTapdataEvent() { String tableName = hazelcastBaseNode.getTableName(null); "<AssertPlaceHolder>"; assertEquals("", tableName); }
getTableName(TapdataEvent tapdataEvent) { if (null == tapdataEvent) return ""; MessageEntity messageEntity = tapdataEvent.getMessageEntity(); TapEvent tapEvent = tapdataEvent.getTapEvent(); if (null != messageEntity) { return messageEntity.getTableName(); } else { if (tapEvent instanceof TapBaseEvent) { return ((TapBaseEvent) tapEvent).getTableId(); } else { return ""; } } }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
************************************
[+] input: testConcatToFileNormal() { File file = utils.concatToFile("mock-path", new String[]{"sub-path"}); Assertions."<AssertPlaceHolder>"; }
concatToFile(String path, String ...paths) { return new File(concat(path, paths)); }
[*] target: assertNotNull(file)
[-] pred: org. junit. Assert. assertNotNull ( file )
************************************
************************************
[+] input: byArguments() {  final String[] args = { "--window-type", "HOPPING", "--name", "bar" };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.HOPPING); assertEquals(options.getName(), "bar"); }
parse(final Class<T> optionsClass, final String[] args) {  final T options = create(optionsClass);  JCommander jCommander = JCommander.newBuilder() .addObject(options) .build();  //easiest way to set configuration through docker. //similar to how Confluent does this in their Docker images. OptionsUtil.populateByEnvironment(options);  jCommander.parse(args);  if (options.isHelp()) { jCommander.usage(); return null; }  return options; }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
************************************
[+] input: testIsUnwindProcess() { hazelcastTargetPdkBaseNode.unwindProcess = true; TapTable tapTable = mock(TapTable.class); AtomicBoolean atomicBoolean = new AtomicBoolean(false); doCallRealMethod().when(hazelcastTargetPdkBaseNode).createTable(tapTable, atomicBoolean,true); TableNode node = new TableNode(); node.setDisabled(false); when(hazelcastTargetPdkBaseNode.getNode()).thenReturn((Node) node); ConnectorNode connectorNode = mock(ConnectorNode.class); when(hazelcastTargetPdkBaseNode.getConnectorNode()).thenReturn(connectorNode); ConnectorFunctions connectorFunctions = mock(ConnectorFunctions.class); when(connectorNode.getConnectorFunctions()).thenReturn(connectorFunctions); when(connectorFunctions.getCreateTableFunction()).thenReturn(null); when(connectorFunctions.getCreateTableV2Function()).thenReturn(mock(CreateTableV2Function.class)); Connections connections = new Connections(); connections.setId("test"); when(dataProcessorContext.getTargetConn()).thenReturn(connections); boolean result = hazelcastTargetPdkBaseNode.createTable(tapTable, atomicBoolean,true); Assertions."<AssertPlaceHolder>"; }
createTable(TapTable tapTable, AtomicBoolean succeed,boolean init) { if (getNode().disabledNode()) { obsLogger.info("Target node has been disabled, task will skip: create table"); return false; } AtomicReference<TapCreateTableEvent> tapCreateTableEvent = new AtomicReference<>(); boolean createdTable; try { CreateTableFunction createTableFunction = getConnectorNode().getConnectorFunctions().getCreateTableFunction(); CreateTableV2Function createTableV2Function = getConnectorNode().getConnectorFunctions().getCreateTableV2Function(); createdTable = createTableV2Function != null || createTableFunction != null; TapTable finalTapTable = new TapTable(); if (createdTable) { handleTapTablePrimaryKeys(tapTable); BeanUtil.copyProperties(tapTable,finalTapTable); if(unwindProcess){ ignorePksAndIndices(finalTapTable, null); } tapCreateTableEvent.set(createTableEvent(finalTapTable)); executeDataFuncAspect(CreateTableFuncAspect.class, () -> new CreateTableFuncAspect() .createTableEvent(tapCreateTableEvent.get()) .setInit(init) .connectorContext(getConnectorNode().getConnectorContext()) .dataProcessorContext(dataProcessorContext) .start(), (createTableFuncAspect -> PDKInvocationMonitor.invoke(getConnectorNode(), PDKMethod.TARGET_CREATE_TABLE, () -> { if (createTableV2Function != null) { CreateTableOptions createTableOptions = createTableV2Function.createTable(getConnectorNode().getConnectorContext(), tapCreateTableEvent.get()); succeed.set(!createTableOptions.getTableExists()); if (createTableFuncAspect != null) createTableFuncAspect.createTableOptions(createTableOptions); } else { createTableFunction.createTable(getConnectorNode().getConnectorContext(), tapCreateTableEvent.get()); } }, TAG,buildErrorConsumer(tapCreateTableEvent.get().getTableId())))); clientMongoOperator.insertOne(Collections.singletonList(finalTapTable), ConnectorConstant.CONNECTION_COLLECTION + "/load/part/tables/" + dataProcessorContext.getTargetConn().getId()); } else { // only execute start function aspect so that it would be cheated as input AspectUtils.executeAspect(new CreateTableFuncAspect() .createTableEvent(tapCreateTableEvent.get()) .setInit(init) .connectorContext(getConnectorNode().getConnectorContext()) .dataProcessorContext(dataProcessorContext).state(NewFieldFuncAspect.STATE_START)); clientMongoOperator.insertOne(Collections.singletonList(tapTable), ConnectorConstant.CONNECTION_COLLECTION + "/load/part/tables/" + dataProcessorContext.getTargetConn().getId()); }  } catch (Throwable throwable) { Throwable matched = CommonUtils.matchThrowable(throwable, TapCodeException.class); if (null != matched) { throw (TapCodeException) matched; }else { throw new TapEventException(TaskTargetProcessorExCode_15.CREATE_TABLE_FAILED, "Table model: " + tapTable, throwable) .addEvent(tapCreateTableEvent.get()); } } return createdTable; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: test_isDass() { when(settingsService.isCloud()).thenReturn(false); ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); boolean result = taskService.checkCloudTaskLimit(taskId, user, true); "<AssertPlaceHolder>"; }
checkCloudTaskLimit(ObjectId taskId, UserDetail user, boolean checkCurrentTask); public abstract void updateDelayTime(ObjectId taskId, long delayTime); public abstract void refreshSchemas(TaskDto taskDto, String nodeIds, String keys, UserDetail userDetail); public abstract void checkSourceTimeDifference(TaskDto taskDto,UserDetail userDetail);  @Data @AllArgsConstructor @NoArgsConstructor public static class Char1Group { private String _id; private long count; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: byDefault() {  final String[] args = { };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.TUMBLING); assertEquals(options.getName(), "foo"); }
parse(final Class<T> optionsClass, final String[] args) {  final T options = create(optionsClass);  JCommander jCommander = JCommander.newBuilder() .addObject(options) .build();  //easiest way to set configuration through docker. //similar to how Confluent does this in their Docker images. OptionsUtil.populateByEnvironment(options);  jCommander.parse(args);  if (options.isHelp()) { jCommander.usage(); return null; }  return options; }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
************************************
[+] input: Exception { final PatchHelper patchHelper = new PatchHelper();  final File jarFile = JarTestHelper.buildJar(Startup.class); final AtomicInteger patchedClasses = new AtomicInteger();  Mockito.when(clientHandler.replaceClass(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any())) .thenReturn(PatchResult.builder().success(true).build());  final boolean success = patchHelper.patch(jarFile, JVM, clientHandler, null, patchedClasses::set);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, patchedClasses.get());  Mockito.verify(clientHandler, Mockito.times(patchedClasses.get())) .replaceClass(ArgumentMatchers.eq(JVM), ArgumentMatchers.any(), ArgumentMatchers.any()); }
patch(File jarFile, RunningJvm runningJvm, ClientHandler clientHandler, ClassLoaderDescriptor classLoaderDescriptor, Consumer<Integer> patchedClasses) { log.debug("Attempting to patch {} with {}", runningJvm, jarFile); final AtomicInteger patchedClassCount = new AtomicInteger(); try (final JarFile jar = new JarFile(jarFile)) { jar.stream().parallel().filter(j -> j.getName().endsWith(".class")).forEach(classFile -> { try { final String name = classFile.getName().replace('/', '.').replace(".class", ""); log.debug("Patching {}", name); final byte[] classContents = jar.getInputStream(classFile).readAllBytes(); // Note - we may not always want to pass in the class loader. It could be in a child classloader. final LoadedClass loadedClass = new LoadedClass(name, classLoaderDescriptor, null); final PatchResult result = clientHandler.replaceClass(runningJvm, loadedClass, classContents); if (!result.isSuccess()) { throw new IllegalStateException( "Failed to replace class on jvm: " + name + " because " + result.getMessage()); } } catch (IOException e) { log.warn("Failed to process {}", classFile.getName()); throw new UncheckedIOException(e); } synchronized (patchedClassCount) { patchedClasses.accept(patchedClassCount.incrementAndGet()); } }); return true; } catch (IOException | UncheckedIOException | IllegalStateException e) { log.warn("Failed to patch {} with {}", runningJvm, jarFile, e); return false; } }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
************************************
[+] input: arrayGivenElementType() { ArrayType expected = new ArrayType(STRING_TYPE); ArrayType toVerify = Type.array(STRING_TYPE);  "<AssertPlaceHolder>"; }
array(Type type) { return ArrayType.of(type); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
encode(String value, @NotNull ProtocolVersion protocolVersion) { if (value == null) { return null; } else { double doubleValue = Double.parseDouble(value); return TypeCodecs.DOUBLE.encode(doubleValue, protocolVersion); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: shouldReturnInvoiceAmount() { //given //when BigDecimal actual = this.invoice.getInvoiceAmount(); //then BigDecimal expected = BigDecimal.valueOf(30); Assertions."<AssertPlaceHolder>"; }
getInvoiceAmount() { return this.getItemPrice().multiply(BigDecimal.valueOf(this.quantityItem)); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testUpdate() { User user = new User(); user.setName("李四"); user.setAge(17); user.setId(1L); int update = commonDaoWrap.update(user); Assertions."<AssertPlaceHolder>"; }
update(T params) { return dao.update(params); }
[*] target: assertEquals(1, update)
[-] pred: org. junit. Assert. assertEquals ( 1, update )
************************************
************************************
[+] input: testCategorization2SectionsWithoutLayout() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  builder.addCategory("Cat-1"). // // missing Layout addElements("color", "rule"). // addCategory("Cat-2"). // addLayout(Layout.HORIZONTAL). // addElements("firstName", "lastName", "role");  String json = builder.build();  "<AssertPlaceHolder>"; logger.info(json); assertTrue(json.contains("VerticalLayout"));  }
build() {  // close current controllsBuilder.... if (controlsArrayBuilder != null && layoutContext != null) { layoutContext.add("elements", controlsArrayBuilder.build()); }  if (groupArrayBuilder != null) {  // close current layoutContext.... if (layoutsArrayBuilder != null && layoutContext != null) { this.layoutsArrayBuilder.add(layoutContext.build()); }  // close current gourpContext if (groupContext != null) { groupContext.add("elements", layoutsArrayBuilder.build()); groupArrayBuilder.add(groupContext); }  rootLayoutBuilder.add("elements", groupArrayBuilder.build()); }  // write result JsonObject jsonObject = rootLayoutBuilder.build(); String result = null; try (Writer writer = new StringWriter()) { Json.createWriter(writer).write(jsonObject); result = writer.toString(); } catch (IOException e) { result = "{}"; e.printStackTrace(); } return result; }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
************************************
[+] input: testRemoveUsersByLogin() { var users = new MemoryUsers();  try { users .addRole("role1") .addRole("role2") .addRole("role3") .addUser("login1", new RoleUserAttributes("thepassword")) .addUser("login2", new RoleUserAttributes("thepassword2", new String[]{"role1", "role2"})) .addUser("login3", new RoleUserAttributes("thepassword3", new String[]{"role1", "role2", "role3"})) .addUser("login4", new RoleUserAttributes(174, "thepassword4", new String[]{"role2", "role3"}));  assertEquals(4, users.countUsers()); assertFalse(users.removeUser("login5")); assertEquals(4, users.countUsers()); assertTrue(users.removeUser("login4")); assertEquals(3, users.countUsers()); assertTrue(users.removeUser("login1")); assertEquals(2, users.countUsers()); assertTrue(users.removeUser("login2")); assertEquals(1, users.countUsers()); assertTrue(users.removeUser("login3")); "<AssertPlaceHolder>"; } catch (CredentialsManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
countUsers() { readLock_.lock(); try { return users_.size(); } finally { readLock_.unlock(); } }
[*] target: assertEquals(0, users.countUsers())
[-] pred: org. junit. Assert. assertEquals ( 0, users. countUsers ( ) )
************************************
************************************
[+] input: testCheckWhenDifferentDeptId() { SingleDeptDataPermissionChecker checker = new SingleDeptDataPermissionChecker(deptService); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetUserId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
check(SystemLoginUser loginUser, DataCondition condition) { if (condition == null || loginUser == null) { return false; }  if (loginUser.getDeptId() == null || condition.getTargetDeptId() == null) { return false; }  Long currentDeptId = loginUser.getDeptId(); Long targetDeptId = condition.getTargetDeptId();  return Objects.equals(currentDeptId, targetDeptId); }
[*] target: assertFalse(check)
[-] pred: org. junit. Assert. assertFalse ( check )
************************************
************************************
[+] input: shouldAddRowSelectListener() { table.onItemSelect(event -> { });  List<EventListener<TableItemSelectEvent>> listeners = table.getEventListeners(TableItemSelectEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemSelectEvent>); }
onItemSelect( EventListener<TableItemSelectEvent<T>> listener) { return addItemSelectListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: generateReport_UnauthorizedUser() { TeamOverview teamOverview = UtilMethods.getDummyTeamOverview();  List<TeamOverview> listTeamsOverview = List.of(teamOverview); Topic topic = UtilMethods.getDummyTopic(); Acl acl = UtilMethods.getDummyAcl();  loginMock(); Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME)) .thenReturn(TestConstants.TENANT_ID); Mockito.when( manageDatabase.getKwPropertyValue( KwConstants.KW_REPORTS_TMP_LOCATION_KEY, TestConstants.TENANT_ID)) .thenReturn(TestConstants.KW_REPORTS_LOCATION); Mockito.doReturn(listTeamsOverview) .when(analyticsControllerService) .getTeamsOverview(null, NUMBER_OF_DAYS); Mockito.when(commonUtilsService.getEnvsFromUserId(any())) .thenReturn(Set.of(TestConstants.ENV_ID)); Mockito.doReturn(TestConstants.ENV_NAME) .when(analyticsControllerService) .getEnvName(TestConstants.ENV_ID); Mockito.when( commonUtilsService.isNotAuthorizedUser(any(), eq(PermissionType.ALL_TEAMS_REPORTS))) .thenReturn(true); Mockito.when(commonUtilsService.getTeamId(TestConstants.USERNAME)) .thenReturn(TestConstants.TEAM_ID); Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getTopicsforTeam(TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(List.of(topic)); Mockito.when( handleDbRequestsJdbc.getConsumerGroupsforTeam( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(List.of(acl));  File actual = analyticsControllerService.generateReport(NUMBER_OF_DAYS); Assertions."<AssertPlaceHolder>"; actual.deleteOnExit(); }
generateReport(int numberOfDays) { int tenantId = commonUtilsService.getTenantId(getCurrentUserName()); String kwReportsLocation = manageDatabase.getKwPropertyValue(KwConstants.KW_REPORTS_TMP_LOCATION_KEY, tenantId);  List<TeamOverview> totalOverviewList = getTeamsOverview(null, numberOfDays); final Map<String, List<String>> topicNames = getTopicNames(tenantId); final Map<String, List<String>> consumerGroups = getConsumerGroups(tenantId); File zipFile = new File( kwReportsLocation + "KwReport" + DATE_TIME_FORMATTER.format(Instant.now()) + ".zip"); ZipOutputStream zipOutputStream = null; try { zipOutputStream = new ZipOutputStream(new FileOutputStream(zipFile)); } catch (FileNotFoundException e) { log.error("Exception:", e); }  String actualFileName; List<File> reportFilesOfTenants = new ArrayList<>(); for (TeamOverview totalOverview : totalOverviewList) { if (totalOverview.getTenantName() != null) { actualFileName = "Klaw-" + totalOverview.getTenantName() + ".xlsx"; } else { actualFileName = "KlawReport" + ".xlsx"; }  String fileName = kwReportsLocation + actualFileName; File reportFile = new File(fileName); reportFilesOfTenants.add(reportFile);  XSSFWorkbook workbook = new XSSFWorkbook();  generateReportPerView(totalOverview.getTopicsPerEnvOverview(), workbook, reportFile); generateReportPerView(totalOverview.getPartitionsPerEnvOverview(), workbook, reportFile); generateReportPerView(totalOverview.getTopicsPerTeamsOverview(), workbook, reportFile); generateReportPerView(totalOverview.getAclsPerEnvOverview(), workbook, reportFile); generateReportPerView(totalOverview.getProducerAclsPerTeamsOverview(), workbook, reportFile); generateReportPerView(totalOverview.getConsumerAclsPerTeamsOverview(), workbook, reportFile); generateReportPerView(totalOverview.getActivityLogOverview(), workbook, reportFile);  addTopicNamesPerEnvToReport(topicNames, workbook, reportFile, "Topics"); addTopicNamesPerEnvToReport(consumerGroups, workbook, reportFile, "ConsumerGroups");  log.info("Report generated"); if (zipOutputStream != null) { writeToZipFile(zipOutputStream, fileName, actualFileName); } }  try { if (zipOutputStream != null) { zipOutputStream.close(); // delete xlsx report file after writing to zip file. for (File reportFilesOfTenant : reportFilesOfTenants) { reportFilesOfTenant.delete(); } } } catch (IOException e) { log.error("Exception:", e); }  return zipFile; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testForEach() { long[] keys = new long[]{1, 17, 33, 2, 18, 3};  LongObjMap<String> m = setupForEach(keys); int size = m.size(); m.forEach((k, v) -> false); assertEquals(0, m.size());  for (long key : keys) { m = setupForEach(keys); // remove the key from map though forEach m.forEach((k, v) -> k != key); assertEquals(size - 1, m.size()); assertNull(m.get(key)); for (long k : keys) { if (k != key) { assertEquals(String.valueOf(k), m.get(k)); } }  // re-put m.put(key, String.valueOf(key)); for (long k : keys) { assertEquals(String.valueOf(k), m.get(k)); } "<AssertPlaceHolder>"; } }
size() { return size; }
[*] target: assertEquals(size, m.size())
[-] pred: org. junit. Assert. assertEquals ( size, m. size() )
************************************
************************************
[+] input: testChoose() {  XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("choose-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testChoose"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testChoose");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  name = 'testChoose'";   Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testChoose"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  name = 'testBind'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind"}"));  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind", "category": "apple"}"));  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind", "category": "banana"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'banana'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"category": "banana"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'banana'\n" + "  AND price = 10.00";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"category": "banana", "price": 10.00}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'"; Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), null)); }
parse() {  Map<String, SqlSource> sqlSourceMap = new HashMap<>();  XNode context = this.parser.evalNode("/mapper");  String namespace = context.getStringAttribute("namespace");  sqlElement(context.evalNodes("/mapper/sql"));  List<XNode> statements = context.evalNodes("select|insert|update|delete");  for (XNode node : statements) {  XMLStatementBuilder statementBuilder = new XMLStatementBuilder(node, sqlFragments); SqlSource sqlSource = statementBuilder.parseStatementNode();  String id = node.getStringAttribute("id"); String methodName = (namespace == null || namespace.length() == 0) ? id : String.format("%s.%s", namespace, id);  sqlSourceMap.put(methodName, sqlSource); }  return sqlSourceMap;  }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
encode(Instant value, @NotNull ProtocolVersion protocolVersion) { if (value == null) { return null; } else { String stringValue = String.valueOf(value.toEpochMilli()); return TypeCodecs.TEXT.encode(stringValue, protocolVersion); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: shouldFindCreditCardActivityByAmountInterval() {  BigDecimal min = BigDecimal.ONE; BigDecimal max = BigDecimal.valueOf(10000);  List<CrdCreditCardActivity> crdCreditCardActivityList = createDummyCrdCreditCardActivityList();  List<CrdCreditCardActivity> expectedResult = createDummyCrdCreditCardActivityList();  when(crdCreditCardActivityEntityService.findCreditCardActivityByAmountInterval(min,max)).thenReturn(crdCreditCardActivityList);  List<CrdCreditCardActivity> result = crdCreditCardActivityEntityService.findCreditCardActivityByAmountInterval(min,max);  "<AssertPlaceHolder>"; assertNotNull(result); }
findCreditCardActivityByAmountInterval(BigDecimal min, BigDecimal max) {  crdCreditCardActivityValidationService.controlIsParameterMinLargerThanMax(min,max);  List<CrdCreditCardActivity> crdCreditCardActivityList = crdCreditCardActivityEntityService.findCreditCardActivityByAmountInterval(min,max);  List<CrdCreditCardActivityDto> convertToCrdCreditCardDtoList = CrdCreditCardMapper.INSTANCE.convertToCrdCreditCardActivityDtoList(crdCreditCardActivityList);  return convertToCrdCreditCardDtoList; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: getCountries_Pagination_Success() { generateTestData(); int pageNo = 1; int pageSize = 2; CountryListGetVm countryListGetVm = countryService.getPageableCountries(pageNo, pageSize); "<AssertPlaceHolder>"; assertEquals(countryListGetVm.pageNo(), pageNo); assertEquals(countryListGetVm.pageSize(), pageSize); assertTrue(countryListGetVm.isLast()); assertEquals(2, countryListGetVm.totalElements()); assertEquals(1, countryListGetVm.totalPages()); }
getPageableCountries(final int pageNo, final int pageSize) { final Pageable pageable = PageRequest.of(pageNo, pageSize); final Page<Country> countryPage = countryRepository.findAll(pageable); final List<Country> countryList = countryPage.getContent();  final List<CountryVm> countryVms = countryList.stream() .map(CountryVm::fromModel) .toList();  return new CountryListGetVm( countryVms, countryPage.getNumber(), countryPage.getSize(), (int) countryPage.getTotalElements(), countryPage.getTotalPages(), countryPage.isLast() ); }
[*] target: assertNotNull(countryListGetVm)
[-] pred: org. junit. Assert. assertNotNull ( countryListGetVm )
************************************
************************************
[+] input: givenColor() { // See https://benjiweber.co.uk/blog/2020/09/19/fun-with-java-records/ Color color = new Color(1, 2, 3); Town expected = new Town(1, 2, 3); Town toVerify = color.decomposeTo(Town::new); "<AssertPlaceHolder>"; }
decomposeTo(Function3<? super First, ? super Second, ? super Third, ? extends T> fn) { var components = this.getClass().getRecordComponents(); try { return fn.apply( (First) components[0].getAccessor().invoke(this), (Second) components[1].getAccessor().invoke(this), (Third) components[2].getAccessor().invoke(this) ); } catch (ReflectiveOperationException e) { throw new RuntimeException(e); } }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testGenerateJarDir() { var sessionJob = TestUtils.buildSessionJob(); String baseDir = artifactManager.generateJarDir(sessionJob.getMetadata(), sessionJob.getSpec()); String expected = tempDir.toString() + File.separator + TestUtils.TEST_NAMESPACE + File.separator + TestUtils.TEST_DEPLOYMENT_NAME + File.separator + TestUtils.TEST_SESSION_JOB_NAME; Assertions."<AssertPlaceHolder>"; }
generateJarDir(ObjectMeta meta, FlinkSessionJobSpec spec) { return String.join( File.separator, new String[] { new File(configManager.getOperatorConfiguration().getArtifactsBaseDir()) .getAbsolutePath(), meta.getNamespace(), spec.getDeploymentName(), meta.getName() }); }
[*] target: assertEquals(expected, baseDir)
[-] pred: org. junit. Assert. assertEquals ( expected, baseDir )
************************************
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsInstant() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Instant result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { String stringValue = TypeCodecs.TEXT.decode(bytes, protocolVersion); return Instant.ofEpochMilli(Long.parseLong(stringValue)); }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
************************************
[+] input: testTransformFromTapValueNullTapdataEvent() { HazelcastBaseNode.TapValueTransform actual = hazelcastBaseNode.transformFromTapValue(null); "<AssertPlaceHolder>"; }
transformFromTapValue(TapdataEvent tapdataEvent) { if (null == tapdataEvent) return null; if (null == tapdataEvent.getTapEvent()) return null; TapEvent tapEvent = tapdataEvent.getTapEvent(); TapValueTransform tapValueTransform = TapValueTransform.create(); Map<String, Object> before = TapEventUtil.getBefore(tapEvent); if (MapUtils.isNotEmpty(before)) { tapValueTransform.before(codecsFilterManager.transformFromTapValueMap(before)); } Map<String, Object> after = TapEventUtil.getAfter(tapEvent); if (MapUtils.isNotEmpty(after)) { tapValueTransform.after(codecsFilterManager.transformFromTapValueMap(after)); } return tapValueTransform; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: generic() { GenericTypeConstructor expected = new GenericTypeConstructor(T); GenericTypeConstructor toVerify = TypeConstructor.generic(T);  "<AssertPlaceHolder>"; }
generic(TypeParameterName name) { return new GenericTypeConstructor(name); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testDeleteFileOfFile() { //            File file = new File("temp.txt"); //            try { //                if (file.createNewFile() && file.exists()) { //                    utils.deleteFile(file, new TapLog()); //                    Assertions."<AssertPlaceHolder>"; //                } //            } catch (IOException ignore) { } //        }
deleteFile(File file, Log logger) { if (file.exists()) { try { if (file.isDirectory()) { FileUtils.deleteDirectory(file); } else { FileUtils.delete(file); } } catch (Exception e){ logger.info("file not be delete, file: {}, message: {}", file.getAbsolutePath(), e.getMessage()); } } }
[*] target: assertFalse(file.exists())
[-] pred: org. junit. Assert. assertFalse ( file. exists ( ) )
************************************
************************************
[+] input: lambdaWithSingleExpressionAsSingleLine() { String toVerify = lambda() .withParameterNames("capacity", "hasPower") .withExpression("new Device(capacity, hasPower)") .generate();  String expected = "(capacity, hasPower) -> new Device(capacity, hasPower)";  "<AssertPlaceHolder>"; }
generate() { return generateParameterList() + SPACE + ARROW + SPACE + expression; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: shouldMaskDateTime() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  LocalDateTime input = LocalDateTime.of(2023, 6, 12, 14, 30, 15); String mask = "%Dz-%Mz-%Yl %Hz:%mz:%s"; String expected = "12-06-2023 14:30:15";  JulianLocaleDateTransformer dateTransformer = new JulianLocaleDateTransformer(); HoursLocalTimeTransformer timeTransformer = new HoursLocalTimeTransformer(); int julian = dateTransformer.transformToComponent(input.toLocalDate()); double hms = timeTransformer.transformToComponent(input.toLocalTime()); when(bridge.maskDateTime(julian, hms, mask)).thenReturn(expected);  String result = MaskDecorator.forDateTime(input, mask);  "<AssertPlaceHolder>"; } }
forDateTime(LocalDateTime input, String mask) { Objects.requireNonNull(input, INPUT_CANNOT_BE_NULL); Objects.requireNonNull(mask, MASK_CANNOT_BE_NULL);  Environment env = Environment.getCurrent(); JulianLocaleDateTransformer dateTransformer = new JulianLocaleDateTransformer(); HoursLocalTimeTransformer timeTransformer = new HoursLocalTimeTransformer(); int julian = dateTransformer.transformToComponent(input.toLocalDate()); double hms = timeTransformer.transformToComponent(input.toLocalTime());  return env.getWebforjHelper().maskDateTime(julian, hms, mask); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testSetRoundRobinHostWeightPairsProperty() { final String expectedPropertyValue = "instance-1:2,instance-2:1,instance-3:0";  final List<HostSpec> hosts = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-1") .weight(2) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-2") .weight(1) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-3") .weight(0) .build() ); final Properties properties = new Properties(); RoundRobinHostSelector.setRoundRobinHostWeightPairsProperty(properties, hosts);  final String actualPropertyValue = properties.getProperty( RoundRobinHostSelector.ROUND_ROBIN_HOST_WEIGHT_PAIRS.name);  "<AssertPlaceHolder>"; }
setRoundRobinHostWeightPairsProperty(final @NonNull Properties properties, final @NonNull List<HostSpec> hosts) { final StringBuilder builder = new StringBuilder(); for (int i = 0; i < hosts.size(); i++) { builder .append(hosts.get(i).getHost()) .append(":") .append(hosts.get(i).getWeight()); if (i < hosts.size() - 1) { builder.append(","); } } final String roundRobinHostWeightPairsString = builder.toString(); properties.setProperty(ROUND_ROBIN_HOST_WEIGHT_PAIRS.name, roundRobinHostWeightPairsString); }
[*] target: assertEquals(expectedPropertyValue, actualPropertyValue)
[-] pred: org. junit. Assert. assertEquals ( expectedPropertyValue, actualPropertyValue )
************************************
************************************
[+] input: IOException { JarFile tempJarFile = new JarFile(CreateFileCommon.getJarInJarFile()); JarEntry jarEntry = tempJarFile.getJarEntry("internal-test.jar"); File extractNestedJar = JarUtils.extractNestedJar(tempJarFile, jarEntry, jarEntry.getName()); "<AssertPlaceHolder>"; assertTrue(extractNestedJar.getName().endsWith("internal-test.jar")); }
extractNestedJar(JarFile file, JarEntry entry, String entryName) throws IOException { File outputFile = createFile(AREX_TEMP_DIR + File.separator + entryName); try(InputStream inputStream = file.getInputStream(entry); FileOutputStream outputStream = new FileOutputStream(outputFile)) { byte[] buffer = new byte[1024]; int length; while ((length = inputStream.read(buffer)) > 0) { outputStream.write(buffer, 0, length); } } return outputFile; }
[*] target: assertNotNull(extractNestedJar)
[-] pred: org. junit. Assert. assertNotNull ( extractNestedJar )
************************************
************************************
[+] input: buildCodonMapBrcaMethodsFrame2Tests() { Path projectPath = Path.of(""); Path brcaPath = projectPath.resolve("assets/dna/real/brca1.fa");  String brcaDnaString = readFile(brcaPath.toFile()); Map<String, Integer> expectedResults = brca1ExpectedFrame2CodonCounts; CodonFrame testCodonFrame = new CodonFrame(brcaDnaString, (short) 2, 1, 20000); ReadingFrames testReadingFrame = new ReadingFrames(testCodonFrame); Map<String, Integer> actualResults = testReadingFrame.getCodonCounts();  "<AssertPlaceHolder>"; }
getCodonCounts() { if (this.codonCounts == null || this.codonCounts.isEmpty()) { this.buildCodonMap(codonFrame.getDna()); } return codonCounts; }
[*] target: assertEquals(expectedResults, actualResults)
[-] pred: org. junit. Assert. assertEquals ( expectedResults, actualResults )
************************************
************************************
[+] input: Exception { initHadoopSecurityContext();  // write file by proxy user. String fileContent = "hello world"; Path filePath = new Path("/alex/HadoopFilesystemProviderTest-testWriteAndReadBySecuredFilesystem.file"); FileSystem writeFs = HadoopFilesystemProvider.getFilesystem("alex", filePath, kerberizedHadoop.getConf());  boolean ok = writeFs.exists(new org.apache.hadoop.fs.Path("/alex")); "<AssertPlaceHolder>"; assertEquals("alex", writeFs.getFileStatus(new org.apache.hadoop.fs.Path("/alex")).getOwner());  FSDataOutputStream fsDataOutputStream = writeFs.create(filePath); BufferedWriter br = new BufferedWriter(new OutputStreamWriter(fsDataOutputStream, "UTF-8")); br.write(fileContent); br.close();  assertTrue(writeFs.exists(filePath)); assertEquals("alex", writeFs.getFileStatus(filePath).getOwner());  // Read content from HDFS by alex user directly UserGroupInformation readerUGI = UserGroupInformation.loginUserFromKeytabAndReturnUGI( kerberizedHadoop.getAlexPrincipal() + "@" + kerberizedHadoop.getKdc().getRealm(), kerberizedHadoop.getAlexKeytab()); readerUGI.doAs( (PrivilegedExceptionAction<Object>) () -> { FileSystem fs = FileSystem.get(kerberizedHadoop.getConf()); FSDataInputStream inputStream = fs.open(filePath); String fetchedResult = IOUtils.toString(inputStream); assertEquals(fileContent, fetchedResult); return null; }); }
getFilesystem(String user, Path path, Configuration configuration) throws Exception { UserGroupInformation.AuthenticationMethod authenticationMethod = SecurityUtil.getAuthenticationMethod(configuration); boolean needSecurity = authenticationMethod != UserGroupInformation.AuthenticationMethod.SIMPLE;  Callable<FileSystem> callable = () -> FileSystem.get(path.toUri(), configuration);  FileSystem fileSystem; if (needSecurity) { fileSystem = SecurityContextFactory.get().getSecurityContext().runSecured(user, callable); } else { fileSystem = callable.call(); }  if (fileSystem instanceof LocalFileSystem) { if (LOGGER.isDebugEnabled()) { LOGGER.debug("{} is local file system", path); } return ((LocalFileSystem) fileSystem).getRawFileSystem(); }  return fileSystem; }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "10"; Integer value = Integer.valueOf(valueAsString); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Integer result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { String stringValue = TypeCodecs.TEXT.decode(bytes, protocolVersion); return Integer.parseInt(stringValue); }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
************************************
[+] input: testEquals() { WorkspaceMeta w1 = new WorkspaceMeta("/nonexist"); WorkspaceMeta w2 = new WorkspaceMeta("/nonexist"); WorkspaceMeta w3 = new WorkspaceMeta("/nonexist/"); Assertions.assertTrue(w1.equals(w2)); Assertions."<AssertPlaceHolder>"; }
equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; WorkspaceMeta that = (WorkspaceMeta) o; return Objects.equals(new File(baseDirPath), new File(that.baseDirPath)); }
[*] target: assertTrue(w1.equals(w3))
[-] pred: org. junit. Assert. assertTrue ( w1. equals ( w3 ) )
************************************
************************************
[+] input: testGetLibPathIsURLClassLoaderButURLsIsEmpty() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(new URL[]{}); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 0, 0); }
getLibPath(String jarName, AtomicReference<String> ato) throws IOException { InputStream pyJarPath = null; ClassLoader classLoader = getCurrentThreadContextClassLoader(); if (classLoader instanceof URLClassLoader) { URL[] urls = ((URLClassLoader) classLoader).getURLs(); for (URL url : urls) { String jarPath = url.getPath(); if (jarPath.contains(jarName)) { pyJarPath = url.openStream(); ato.set(jarPath); break; } } } return pyJarPath; }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
************************************
[+] input: arrayGivenElementTypeConstructor() { ArrayTypeConstructor expected = new ArrayTypeConstructor(STRING_TYPE_CONSTRUCTOR); ArrayTypeConstructor toVerify = TypeConstructor.array(STRING_TYPE_CONSTRUCTOR);  "<AssertPlaceHolder>"; }
array(TypeConstructor type) { return new ArrayTypeConstructor(type); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: isParentOf() { NodeData parent = new NodeData(new File("/test/foobar")); NodeData child = new NodeData(new File("/test/foobar.txt")); Assertions."<AssertPlaceHolder>"; }
isParentOf(NodeData nodeData) { return PathUtils.isParentFolder(this.getFile(), nodeData.getFile()); }
[*] target: assertFalse(parent.isParentOf(child))
[-] pred: org. junit. Assert. assertFalse ( parent. isParentOf ( child ) )
************************************
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "21474836470.7"; Double value = Double.valueOf(valueAsString); // encoding could be from user input, so may not be in Java Double.toString() format ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Double result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { String stringValue = TypeCodecs.TEXT.decode(bytes, protocolVersion); return Double.valueOf(stringValue); }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
************************************
[+] input: shouldAddSelectionChangeListener() { table.onItemSelectionChange(event -> { });  List<EventListener<TableItemSelectionChange>> listeners = table.getEventListeners(TableItemSelectionChange.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemSelectionChange>); }
onItemSelectionChange( EventListener<TableItemSelectionChange<T>> listener) { return addItemSelectionChangeListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: of() { ArrayType expected = new ArrayType(STRING); ArrayType toVerify = ArrayType.of(STRING);  "<AssertPlaceHolder>"; }
of(Type type) { return new ArrayType(type); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: SQLException { final List<HostSpec> expectedMySQL = Collections.singletonList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()).host("mysql").port(HostSpec.NO_PORT) .role(HostRole.WRITER).availability(HostAvailability.AVAILABLE).weight(0).build()); final List<HostSpec> expectedPostgres = Collections.singletonList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()).host("postgresql").port(HostSpec.NO_PORT) .role(HostRole.WRITER).availability(HostAvailability.AVAILABLE).weight(0).build()); when(mockResultSet.next()).thenReturn(true, false); when(mockResultSet.getBoolean(eq(2))).thenReturn(true); when(mockResultSet.getString(eq(1))).thenReturn("mysql");   rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "mysql://url/");  List<HostSpec> hosts = rdsHostListProvider.queryForTopology(mockConnection); assertEquals(expectedMySQL, hosts);  when(mockResultSet.next()).thenReturn(true, false); when(mockResultSet.getString(eq(1))).thenReturn("postgresql");  rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "postgresql://url/"); hosts = rdsHostListProvider.queryForTopology(mockConnection); "<AssertPlaceHolder>"; }
queryForTopology(final Connection conn) throws SQLException { int networkTimeout = -1; try { networkTimeout = conn.getNetworkTimeout(); // The topology query is not monitored by the EFM plugin, so it needs a socket timeout if (networkTimeout == 0) { conn.setNetworkTimeout(networkTimeoutExecutor, defaultTopologyQueryTimeoutMs); } } catch (SQLException e) { LOGGER.warning(() -> Messages.get("RdsHostListProvider.errorGettingNetworkTimeout", new Object[] {e.getMessage()})); }  try (final Statement stmt = conn.createStatement(); final ResultSet resultSet = stmt.executeQuery(this.topologyQuery)) { return processQueryResults(resultSet); } catch (final SQLSyntaxErrorException e) { throw new SQLException(Messages.get("RdsHostListProvider.invalidQuery"), e); } finally { if (networkTimeout == 0 && !conn.isClosed()) { conn.setNetworkTimeout(networkTimeoutExecutor, networkTimeout); } } }
[*] target: assertEquals(expectedPostgres, hosts)
[-] pred: org. junit. Assert. assertEquals ( expectedPostgres, hosts )
************************************
************************************
[+] input: shouldParseTime() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  String input = "9pm"; String mask = "%Hz:%Mz:%S"; Locale locale = Locale.US; LocalTime expected = LocalTime.of(21, 0, 0); double hms = new HoursLocalTimeTransformer().transformToComponent(expected);  when(bridge.parseTime(input, mask, locale)).thenReturn(hms);  LocalTime result = MaskDecorator.parseTime(input, mask, locale);  "<AssertPlaceHolder>"; } }
parseTime(String input, String mask, Locale locale) { Objects.requireNonNull(input, INPUT_CANNOT_BE_NULL); Objects.requireNonNull(mask, MASK_CANNOT_BE_NULL);  Environment env = Environment.getCurrent(); double hms = env.getWebforjHelper().parseTime(input, mask, locale == null ? App.getLocale() : locale); HoursLocalTimeTransformer transformer = new HoursLocalTimeTransformer();  return transformer.transformToModel(hms); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: MalformedURLException { ClassLoader classLoader = ClassLoader.getSystemClassLoader(); URL resourceURL = ClassLoaderUtils.getClassResource(classLoader, Nonnull.class); String expectedPath = "javax/annotation/Nonnull.class"; String relativePath = resolveArchiveEntryPath(resourceURL); "<AssertPlaceHolder>"; }
resolveArchiveEntryPath(URL archiveFileURL) throws NullPointerException { // NPE check return doResolveArchiveEntryPath(archiveFileURL.getPath()); }
[*] target: assertEquals(expectedPath, relativePath)
[-] pred: org. junit. Assert. assertEquals ( expectedPath, relativePath )
************************************
************************************
[+] input: parse_ShouldReturnNull_WhenValueIsNull() { String value = null; String result = codec.parse(value); Assertions."<AssertPlaceHolder>"; }
parse(String value) { Double doubleValue = TypeCodecs.DOUBLE.parse(value); return doubleValue == null ? null : decimalFormat.format(doubleValue); }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: getConsumerAclsTeamsOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.CONSUMER.value, TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getConsumerAclsTeamsOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
getConsumerAclsTeamsOverview(Integer teamId, Integer tenantId) { List<CommonUtilsService.ChartsOverviewItem<Integer, Integer>> consumerAclsPerTeamList = manageDatabase .getHandleDbRequests() .getAclsCountByTeams(AclType.CONSUMER.value, teamId, tenantId);  String title = ANALYTICS_102; if (teamId != null) { title += " (" + manageDatabase.getTeamNameFromTeamId(tenantId, teamId) + ")"; } else { title += " (all teams)"; }  return commonUtilsService.getChartsJsOverview( consumerAclsPerTeamList, title, "teamid", "Teams", "Consumer Acls", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testTaskNullEndTime() { task.setStatus(MilestoneStatus.FINISH); node.setStatus(MilestoneStatus.FINISH); task.setEnd(null); String taskSyncStatus = milestoneAspectTask.getTaskSyncStatus(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(MilestoneAspectTask.KPI_DATA_NODE_INIT, taskSyncStatus); }
getTaskSyncStatus() { Collection<MilestoneEntity> values = new ArrayList<>(milestones.values()); List<MilestoneEntity> sorted = values.stream() .filter(m -> Objects.nonNull(m) && !MilestoneStatus.WAITING.equals(m.getStatus())) .sorted((m1, m2) -> { MilestoneStatus s1 = m1.getStatus(); MilestoneStatus s2 = m2.getStatus(); if (KPI_CDC.equals(m1.getCode())) return -1; if (KPI_CDC.equals(m2.getCode())) return 1; if (MilestoneStatus.RUNNING.equals(s1)) return -1; if (MilestoneStatus.RUNNING.equals(s2)) return 1; Long e1 = m1.getEnd(); Long e2 = m2.getEnd(); if (null == e1) e1 = 0L; if (null == e2) e2 = 0L; return e2.intValue() - e1.intValue(); }).collect(Collectors.toList()); if (sorted.isEmpty()) return KPI_TASK; return sorted.get(0).getCode(); }
[*] target: assertNotNull(taskSyncStatus)
[-] pred: org. junit. Assert. assertNotNull ( taskSyncStatus )
************************************
************************************
[+] input: testToJSONBBytes() { JSONObject object = JSONObject.of("id", null); byte[] jsonbBytes = object.toJSONBBytes(JSONWriter.Feature.WriteNulls); JSONObject object2 = JSONB.parseObject(jsonbBytes); "<AssertPlaceHolder>"; }
parseObject(String text) { return JSON.parseObject(text); }
[*] target: assertEquals(object, object2)
[-] pred: org. junit. Assert. assertEquals ( object, object2 )
************************************
************************************
[+] input: testEncryptInvalidKeyLength() { ReflectionTestUtils.setField( converter, ENCRYPTION_KEY_FIELD, RandomStringUtils.randomAlphabetic(INVALID_KEY_LENGTH)); String plainText = RandomStringUtils.randomAlphanumeric(10); String converted = converter.convertToDatabaseColumn(plainText); "<AssertPlaceHolder>"; }
convertToDatabaseColumn(String plainText) { Cipher cipher = getCipher(); SecretKey key = getSecretKey(); GCMParameterSpec paramSpec = getNewRandomParamSpec(); try { cipher.init(Cipher.ENCRYPT_MODE, key, paramSpec); byte[] cipherText = cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8)); ByteBuffer byteBuffer = ByteBuffer.allocate(paramSpec.getIV().length + cipherText.length); byteBuffer.put(paramSpec.getIV()); byteBuffer.put(cipherText); return Base64.getEncoder().encodeToString(byteBuffer.array()); } catch (IllegalBlockSizeException | BadPaddingException | InvalidKeyException | InvalidAlgorithmParameterException e) { log.error("Failed to convert to database column, writing in cleartext...", e); return plainText; } }
[*] target: assertEquals(plainText, converted)
[-] pred: org. junit. Assert. assertEquals ( plainText, converted )
************************************
************************************
[+] input: test_isCloudLimitScheduling() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id", "agentId", "agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(true); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask, mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(5); when(workerService.calculationEngine(mockTaskDto, user, null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId, user, true); "<AssertPlaceHolder>"; } }
checkCloudTaskLimit(ObjectId taskId, UserDetail user, boolean checkCurrentTask); public abstract void updateDelayTime(ObjectId taskId, long delayTime); public abstract void refreshSchemas(TaskDto taskDto, String nodeIds, String keys, UserDetail userDetail); public abstract void checkSourceTimeDifference(TaskDto taskDto,UserDetail userDetail);  @Data @AllArgsConstructor @NoArgsConstructor public static class Char1Group { private String _id; private long count; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { GroupId id1 = new GroupId("group@example.com");  "<AssertPlaceHolder>"; }
equals(@Nullable Object o) { if (this == o) { return true; }  if (o == null || getClass() != o.getClass()) { return false; }  GroupId groupId = (GroupId) o; return email.equals(groupId.email); }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
************************************
[+] input: ncmPass() { NCM[] ncm = BrasilAPI.ncm(); "<AssertPlaceHolder>"; }
ncm() { NCM[] obj = (NCM[]) api(NCM[].class, "ncm/v1", ""); return obj != null ? (NCM[]) obj.clone() : null; }
[*] target: assertNotNull(ncm)
[-] pred: org. junit. Assert. assertNotNull ( ncm )
************************************
************************************
[+] input: givenConcreteMethod() { List<String> toVerify = method() .withModifiers(PRIVATE, STATIC) .withName("notify") .withBody("System.out.println("Consider yourself notified!");") .lines();  List<String> expected = asList( "private static void notify() {", "    System.out.println("Consider yourself notified!");", "}" );  "<AssertPlaceHolder>"; }
lines() { List<String> components = new ArrayList<>(); if (!modifiersGenerator.isEmpty()) { components.add(modifiersGenerator.generate()); } if (!typeParametersGenerator.isEmpty()) { components.add(typeParametersGenerator.generate()); } components.add(optionalReturnType.map(TypeGenerator::generateFrom).orElse(VOID)); components.add(name + parametersGenerator.generate()); String methodDeclaration = components.stream().collect(joining(SPACE));  return optionalBodyGenerator .map(bodyGenerator -> { List<String> result = new ArrayList<>(); result.add(methodDeclaration + SPACE + OPEN_BRACE); result.addAll(bodyGenerator.indent().lines()); result.add(CLOSE_BRACE); return result; }) .orElse(asList(methodDeclaration + SEMICOLON)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: xssf1() { WorkbookParameter workbookParameter = WorkbookParameter.builder().build(); Assertions."<AssertPlaceHolder>"; }
isXssf() { return xssf == null || xssf; }
[*] target: assertTrue(workbookParameter.isXssf())
[-] pred: org. junit. Assert. assertTrue ( workbookParameter. isXssf() )
************************************
************************************
[+] input: testDefaultPublisher() { NotificationPublisher publisher = new NotificationPublisher(); publisher.setDefaultPublisher(true); Assertions."<AssertPlaceHolder>"; }
isDefaultPublisher() { return defaultPublisher; }
[*] target: assertTrue(publisher.isDefaultPublisher())
[-] pred: org. junit. Assert. assertTrue ( publisher. isDefaultPublisher() )
************************************
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "9223372036854775807"; Long value = Long.parseLong(valueAsString); ByteBuffer byteBuffer = TypeCodecs.BIGINT.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { Long longValue = TypeCodecs.BIGINT.decode(bytes, protocolVersion); return longValue.toString(); }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
************************************
[+] input: attemptTaskIdTest() { String tezTaskAttemptId = "attempt_1677051234358_0091_1_00_000000_0"; TezTaskAttemptID originalTezTaskAttemptID = TezTaskAttemptID.fromString(tezTaskAttemptId); String uniqueIdentifier = String.format("%s_%05d", tezTaskAttemptId, 3); String uniqueIdentifierToAttemptId = RssTezUtils.uniqueIdentifierToAttemptId(uniqueIdentifier); "<AssertPlaceHolder>"; TezTaskAttemptID tezTaskAttemptID = TezTaskAttemptID.fromString(uniqueIdentifierToAttemptId); assertEquals(originalTezTaskAttemptID, tezTaskAttemptID); }
uniqueIdentifierToAttemptId(String uniqueIdentifier) { if (uniqueIdentifier == null) { throw new RssException("uniqueIdentifier should not be null"); } String[] ids = uniqueIdentifier.split("_"); return StringUtils.join(ids, "_", 0, 7); }
[*] target: assertEquals(tezTaskAttemptId, uniqueIdentifierToAttemptId)
[-] pred: org. junit. Assert. assertEquals ( tezTaskAttemptId, uniqueIdentifierToAttemptId )
************************************
************************************
[+] input: testRunningTaskNumWithProcessId() { TaskRepository taskRepository = mock(TaskRepository.class); taskService = new TaskServiceImpl(taskRepository); long except = 5L; UserDetail userDetail = mock(UserDetail.class); when(taskRepository.count(Query.query(Criteria.where("agentId").is("111") .and("is_deleted").ne(true).and("syncType").in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and("status").nin(TaskDto.STATUS_DELETE_FAILED,TaskDto.STATUS_DELETING) .orOperator(Criteria.where("status").in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where("planStartDateFlag").is(true), Criteria.where("crontabExpressionFlag").is(true) )), userDetail)).thenReturn(except); long result = taskService.runningTaskNum("111", userDetail); "<AssertPlaceHolder>"; }
runningTaskNum(String processId, UserDetail userDetail) { long workNum = count(Query.query(Criteria.where(AGENT_ID).is(processId) .and(IS_DELETED).ne(true).and(SYNC_TYPE).in(TaskDto.SYNC_TYPE_SYNC, TaskDto.SYNC_TYPE_MIGRATE) .and(STATUS).nin(TaskDto.STATUS_DELETE_FAILED,TaskDto.STATUS_DELETING) .orOperator(Criteria.where(STATUS).in(TaskDto.STATUS_RUNNING, TaskDto.STATUS_SCHEDULING, TaskDto.STATUS_WAIT_RUN), Criteria.where(PLAN_START_DATE_FLAG).is(true), Criteria.where(CRONTAB_EXPRESSION_FLAG).is(true) )), userDetail); return (int) workNum; }
[*] target: assertEquals(except,result)
[-] pred: org. junit. Assert. assertEquals ( except, result )
************************************
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); ByteBuffer byteBuffer = TypeCodecs.TIMESTAMP.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { Instant instantValue = TypeCodecs.TIMESTAMP.decode(bytes, protocolVersion); return instantValue == null ? null : String.valueOf(instantValue.toEpochMilli()); }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
************************************
[+] input: test_isCloudLimitNotReached() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id", "agentId", "agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(false); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask, mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(4); when(workerService.calculationEngine(mockTaskDto, user, null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId, user, true); "<AssertPlaceHolder>"; } }
checkCloudTaskLimit(ObjectId taskId, UserDetail user, boolean checkCurrentTask); public abstract void updateDelayTime(ObjectId taskId, long delayTime); public abstract void refreshSchemas(TaskDto taskDto, String nodeIds, String keys, UserDetail userDetail); public abstract void checkSourceTimeDifference(TaskDto taskDto,UserDetail userDetail);  @Data @AllArgsConstructor @NoArgsConstructor public static class Char1Group { private String _id; private long count; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: shouldTriggerAutomaticSnapshot_InvalidExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "-1", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
shouldTriggerAutomaticSnapshot( SnapshotType snapshotType, String automaticTriggerExpression, Instant lastTrigger) { if (StringUtils.isBlank(automaticTriggerExpression)) { return false; } // automaticTriggerExpression was configured by the user  Optional<Duration> interval = interpretAsInterval(automaticTriggerExpression); Optional<CronExpression> cron = interpretAsCron(automaticTriggerExpression);  // This should never happen. The string cannot be both a valid Duration and a cron // expression at the same time. if (interval.isPresent() && cron.isPresent()) { LOG.error( "Something went wrong with the automatic {} trigger expression {}. This setting cannot be simultaneously a valid Duration and a cron expression.", snapshotType, automaticTriggerExpression); return false; }  if (interval.isPresent()) { return shouldTriggerIntervalBasedSnapshot(snapshotType, interval.get(), lastTrigger); } else if (cron.isPresent()) { return shouldTriggerCronBasedSnapshot( snapshotType, cron.get(), lastTrigger, Instant.now()); } else { LOG.warn( "Automatic {} triggering is configured, but the trigger expression '{}' is neither a valid Duration, nor a cron expression.", snapshotType, automaticTriggerExpression); return false; } }
[*] target: assertFalse(shouldTrigger)
[-] pred: org. junit. Assert. assertFalse ( shouldTrigger )
************************************
************************************
[+] input: givenConcreteTypeWithTypeParameters() { Type type = FUNCTION.with( STRING.contravariant(), OBJECT.covariant() ); String toVerify = type(type).generate(); String expected = "java.util.function.Function<? super java.lang.String, ? extends java.lang.Object>"; "<AssertPlaceHolder>"; }
generate() { return type.match( generic -> generic.getName().raw(),  concrete -> { List<TypeArgument> typeArguments = concrete.getTypeArguments(); if (typeArguments.isEmpty()) { return concrete.getFullyQualifiedName().raw(); } else { return concrete.getFullyQualifiedName().raw() + OPEN_ANGULAR_BRACKET + typeArguments.stream().map(TypeArgumentGenerator::generateFrom).collect(joining(SEPARATOR)) + CLOSE_ANGULAR_BRACKET; } },  array -> type(array.getType()).generate() + OPEN_SQUARE_BRACKET + CLOSE_SQUARE_BRACKET ); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: sholudCalculateLengthOfCG() { int expected = 50001033; int actual = Properties.calculateLengthOfCG(dnaString); "<AssertPlaceHolder>"; }
calculateLengthOfCG(String dna) { int gcLength = 0; char[] dnaCharArray = dna.toCharArray();  for (char letter : dnaCharArray) { if (letterIsCorG(letter)) { gcLength++; } }  return gcLength; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetDiscountAmount_withAmountDiscountType() { given(couponCampaign.getDiscountType()).willReturn(DiscountType.AMOUNT); given(couponCampaign.getDiscountAmount()).willReturn(discountAmount); given(couponCampaign.getMinimumCost()).willReturn(minimumCost);  Money supplyAmount = Money.wons(60000L); Money expectedDiscountAmount = Money.wons(10000L); Money actualDiscountAmount = issuedCoupon.getDiscountAmount(supplyAmount);  "<AssertPlaceHolder>"; }
getDiscountAmount(Money supplyAmount) { if (couponCampaign.getDiscountType().equals(DiscountType.AMOUNT)) { // 정액 할인 return checkSupplyAmount( supplyAmount, couponCampaign.getDiscountAmount(), couponCampaign.getMinimumCost()); } // 정률 할인 Long discountAmount = supplyAmount.getDiscountAmountByPercentage( supplyAmount, couponCampaign.getDiscountAmount()); return checkSupplyAmount(supplyAmount, discountAmount, couponCampaign.getMinimumCost()); }
[*] target: assertEquals(expectedDiscountAmount, actualDiscountAmount)
[-] pred: org. junit. Assert. assertEquals ( expectedDiscountAmount, actualDiscountAmount )
************************************
************************************
[+] input: testDelete() { int delete = commonDaoWrap.delete(1L, User.class); Assertions."<AssertPlaceHolder>"; }
delete(@Param("id") T id, Class<?> cls) { return dao.delete(id, cls); }
[*] target: assertEquals(1, delete)
[-] pred: org. junit. Assert. assertEquals ( 1, delete )
************************************
************************************
[+] input: IOException { BilibiliResponse<FlowItems<DynamicItem>> response = client.dynamicFeedAll("", 1, "video"); Assertions."<AssertPlaceHolder>"; // 需要Cookie }
dynamicFeedAll(String offset, int page, String type) throws IOException { checkBuVid3BuVid4(); String url = ApiUtil.fillUrl(ApiUrlContainer.DYNAMIC_FEED_ALL, offset, page, type); return httpJsonClient.getJson(url, new TypeReference<BilibiliResponse<FlowItems<DynamicItem>>>() { }, requestHeader); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: setProperty_Number() { Integer value = 1234; Integer setValue = (Integer) helper.setProperty(KnownProperties.TEST_NUMBER, value); "<AssertPlaceHolder>"; }
setProperty(String propertyName, Object propertyValue) { if (null == propertyName || null == propertyValue) return null; PropertyType expectedType = getType(propertyName); if (null == expectedType) { return null; }  boolean typesMatch = validateType(expectedType, propertyValue); if (!typesMatch) return null;  synchronized (PropertyHelper.class) { propertyMap.put(propertyName, propertyValue); } return propertyValue; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
************************************
[+] input: parse_ShouldParseTextAndReturnAsNumber() { String valueAsString = "9223372036854775807"; Long expected = TypeCodecs.BIGINT.parse(valueAsString); Long result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
parse(String value) { return value == null ? null : Long.parseLong(value); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testMilestoneEntityIsNull() { milestones.put("code", null); milestoneAspectTask.taskMilestone("code", consumer); MilestoneEntity code = milestones.get("code"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("code", code.getCode()); Assertions.assertEquals(MilestoneStatus.WAITING, code.getStatus()); verify(consumer).accept(any(MilestoneEntity.class)); }
taskMilestone(String code, Consumer<MilestoneEntity> consumer) { MilestoneEntity entity = milestones.get(code); if (null == entity) { synchronized (milestones) { entity = milestones.computeIfAbsent(code, s -> new MilestoneEntity(code, MilestoneStatus.WAITING)); } } if (null != consumer) { consumer.accept(entity); } }
[*] target: assertNotNull(code)
[-] pred: org. junit. Assert. assertNotNull ( code )
************************************
************************************
[+] input: 카트라인_결제금액_있을때_결제필요_여부_조회() { // given Money won2000 = Money.wons(2000L); given(cartOptionAnswer.getAdditionalPrice()).willReturn(won2000); // when Boolean needPaid = hasPriceCartLineItem.isNeedPaid(); // then "<AssertPlaceHolder>"; }
isNeedPaid() { // 0 < totalCartLinePrice return Money.ZERO.isLessThan(getTotalCartLinePrice()); }
[*] target: assertTrue(needPaid)
[-] pred: org. junit. Assert. assertTrue ( needPaid )
************************************
************************************
[+] input: Exception { String greekHospital = "ΠΕΠΑΓΝΗ";  Collection<ResourceEntry> entryCollection = LocalizationManager.getInstance().getResources(Resource.HOSPITAL_NAMES, Collections.singletonList("gr")); Set<String> greekHospitals = new HashSet<>();  for(ResourceEntry entry: entryCollection) { InputStream inputStream = entry.createStream(); try (CSVParser reader = Readers.createCSVReaderFromStream(inputStream)) { for (CSVRecord line : reader) { String name = line.get(0); greekHospitals.add(name.toUpperCase()); } inputStream.close(); } }  MaskingProvider maskingProvider = new HospitalMaskingProvider();  int randomizationOK = 0; for(int i = 0; i < 100; i++) { String maskedHospital = maskingProvider.mask(greekHospital); if (!maskedHospital.equalsIgnoreCase(greekHospital)) { randomizationOK++; }  boolean isMatch = greekHospitals.contains(maskedHospital.toUpperCase());  if (!isMatch) { System.out.println(maskedHospital); }  "<AssertPlaceHolder>"; }  assertTrue(randomizationOK > 0); }
mask(String identifier) { if (!this.preserveCountry) { return hospitalManager.getRandomKey(); }  Hospital hospital = hospitalManager.getKey(identifier); if (hospital == null) { return hospitalManager.getRandomKey(); }  return hospitalManager.getRandomKey(hospital.getNameCountryCode()); }
[*] target: assertTrue(isMatch)
[-] pred: org. junit. Assert. assertTrue ( isMatch )
************************************
************************************
[+] input: IOException { OkHttpClient client = createHttpClient(Boolean.TRUE, Boolean.TRUE, Integer.valueOf(5)); "<AssertPlaceHolder>"; }
createHttpClient(Boolean useInternalTestProxy, Boolean ignoreSslErrors, Integer timeout) throws IOException { OkHttpClient client; OkHttpClient.Builder newBuilder = new OkHttpClient.Builder();  if (isTrue(ignoreSslErrors) || isTrue(useInternalTestProxy)) { TrustManager[] trustAllCerts = new TrustManager[]{ new X509TrustManager() { @Override public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) { // we want to ignore the server certificate on purpose, as self-signed certificates are used by some users }  @Override public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) { // we want to ignore the server certificate on purpose, as self-signed certificates are used by some users }   @Override public java.security.cert.X509Certificate[] getAcceptedIssuers() { return new java.security.cert.X509Certificate[]{}; } } }; SSLContext sslContext; try { sslContext = SSLContext.getInstance("TLSv1.2"); sslContext.init(null, trustAllCerts, new java.security.SecureRandom()); newBuilder.sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustAllCerts[0]); newBuilder.hostnameVerifier((host, session) -> true); } catch (KeyManagementException | NoSuchAlgorithmException e) { throw new IOException("problem setting up SSL http client configuration"); } }  if (isTrue(useInternalTestProxy)) { String hostname = "localhost"/*127.0.0.1*/; int port = 18080; Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(hostname, port)); client = newBuilder .connectTimeout(timeout, TimeUnit.SECONDS) .readTimeout(timeout, TimeUnit.SECONDS) .writeTimeout(timeout, TimeUnit.SECONDS) .callTimeout(timeout, TimeUnit.SECONDS) .proxy(proxy) .build(); } else { client = newBuilder .connectTimeout(timeout, TimeUnit.SECONDS) .readTimeout(timeout, TimeUnit.SECONDS) .writeTimeout(timeout, TimeUnit.SECONDS) .callTimeout(timeout, TimeUnit.SECONDS) .build(); } return client; }
[*] target: assertNotNull(client)
[-] pred: org. junit. Assert. assertNotNull ( client )
************************************
************************************
[+] input: testCategorization2Sections() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  builder.addCategory("Cat-1"). // addLayout(Layout.HORIZONTAL). // addElements("color", "rule"). // addCategory("Cat-2"). // addLayout(Layout.HORIZONTAL). // addElements("firstName", "lastName", "role");  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
build() {  // close current controllsBuilder.... if (controlsArrayBuilder != null && layoutContext != null) { layoutContext.add("elements", controlsArrayBuilder.build()); }  if (groupArrayBuilder != null) {  // close current layoutContext.... if (layoutsArrayBuilder != null && layoutContext != null) { this.layoutsArrayBuilder.add(layoutContext.build()); }  // close current gourpContext if (groupContext != null) { groupContext.add("elements", layoutsArrayBuilder.build()); groupArrayBuilder.add(groupContext); }  rootLayoutBuilder.add("elements", groupArrayBuilder.build()); }  // write result JsonObject jsonObject = rootLayoutBuilder.build(); String result = null; try (Writer writer = new StringWriter()) { Json.createWriter(writer).write(jsonObject); result = writer.toString(); } catch (IOException e) { result = "{}"; e.printStackTrace(); } return result; }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
************************************
[+] input: getTopicsTeamsOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(handleDbRequestsJdbc.getTopicsCountByTeams(null, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsTeamsOverview(null, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
getTopicsTeamsOverview(Integer teamId, Integer tenantId) {  List<CommonUtilsService.ChartsOverviewItem<Integer, Integer>> teamCountList = manageDatabase.getHandleDbRequests().getTopicsCountByTeams(teamId, tenantId); String title = ANALYTICS_103; if (teamId != null) { title += " (" + manageDatabase.getTeamNameFromTeamId(tenantId, teamId) + ")"; } else { title += " (all teams)"; }  return commonUtilsService.getChartsJsOverview( teamCountList, title, "teamid", "Teams", "Topics", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testAddAll() { // Setup final ServiceConfig serviceConfig = new ServiceConfig(); serviceConfig.setName("configName"); serviceConfig.setValue("configValue"); serviceConfig.setLabel("label"); serviceConfig.setDescription("description"); serviceConfig.setRequired(false); serviceConfig.setType("input"); serviceConfig.setConfigurableInWizard(false); serviceConfig.setDefaultValue("defaultValue"); serviceConfig.setMinValue(0); serviceConfig.setMaxValue(0); serviceConfig.setUnit("unit"); serviceConfig.setHidden(false); serviceConfig.setSelectValue(Arrays.asList("value")); serviceConfig.setConfigType("configType"); final List<ServiceConfig> left = Arrays.asList(serviceConfig); final ServiceConfig serviceConfig1 = new ServiceConfig(); serviceConfig1.setName("configName"); serviceConfig1.setValue("configValue"); serviceConfig1.setLabel("label"); serviceConfig1.setDescription("description"); serviceConfig1.setRequired(false); serviceConfig1.setType("input"); serviceConfig1.setConfigurableInWizard(false); serviceConfig1.setDefaultValue("defaultValue"); serviceConfig1.setMinValue(0); serviceConfig1.setMaxValue(0); serviceConfig1.setUnit("unit"); serviceConfig1.setHidden(false); serviceConfig1.setSelectValue(Arrays.asList("value")); serviceConfig1.setConfigType("configType"); final List<ServiceConfig> right = Arrays.asList(serviceConfig1); final ServiceConfig serviceConfig2 = new ServiceConfig(); serviceConfig2.setName("configName"); serviceConfig2.setValue("configValue"); serviceConfig2.setLabel("label"); serviceConfig2.setDescription("description"); serviceConfig2.setRequired(false); serviceConfig2.setType("input"); serviceConfig2.setConfigurableInWizard(false); serviceConfig2.setDefaultValue("defaultValue"); serviceConfig2.setMinValue(0); serviceConfig2.setMaxValue(0); serviceConfig2.setUnit("unit"); serviceConfig2.setHidden(false); serviceConfig2.setSelectValue(Arrays.asList("value")); serviceConfig2.setConfigType("configType"); final List<ServiceConfig> expectedResult = Arrays.asList(serviceConfig2);  // Run the test final List<ServiceConfig> result = ProcessUtils.addAll(left, right);  // Verify the results "<AssertPlaceHolder>"; }
addAll(List<ServiceConfig> left, List<ServiceConfig> right) { if (left == null) { return null; } if (right == null) { return left; } // 使用LinkedList方便插入和删除 List<ServiceConfig> res = new LinkedList<>(right); Set<String> set = new HashSet<>(); // for (ServiceConfig item : left) { set.add(item.getName()); } // 迭代器遍历listA for (ServiceConfig item : res) { // 如果set中包含id则remove if (!set.contains(item.getName())) { left.add(item); } } return left; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testReturnSubstringWithCodon1() { String expectedResult = this.expectedCodon1; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon1); "<AssertPlaceHolder>"; }
returnSubstring(String dnaString, int index) { return dnaString.substring(index, index + 3).toUpperCase(); }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
************************************
[+] input: concreteGivenFullyQualifiedNameAndTypeArguments() { ConcreteTypeConstructor expected = new ConcreteTypeConstructor(ERUDITE, asList(STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant())); ConcreteTypeConstructor toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant());  "<AssertPlaceHolder>"; }
contravariant() { return TypeConstructorArgument.of(CONTRAVARIANT, this); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testConstructErrorType() { Result result = new Result(SystemErrorType.SYSTEM_BUSY); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.SYSTEM_BUSY.getCode()); assertEquals(result.getMesg(), SystemErrorType.SYSTEM_BUSY.getMesg()); }
isFail() { return !isSuccess(); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
************************************
[+] input: testCategorization2SectionsMixed() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  Map<String, String> multilineOption = new HashMap<>(); multilineOption.put("multi", "true"); builder. // addCategory("General"). // addLayout(Layout.HORIZONTAL). // addElements("name"). // addElement("documentation", "Documentation", multilineOption). //  addLayout(Layout.VERTICAL). // addElements(new String[] { "age", "city" }). //  addCategory("Event"). // addLayout(Layout.VERTICAL). // addElements(new String[] { "a", "b" }). //  addCategory("Workflow"). // addLayout(Layout.HORIZONTAL);  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
build() {  // close current controllsBuilder.... if (controlsArrayBuilder != null && layoutContext != null) { layoutContext.add("elements", controlsArrayBuilder.build()); }  if (groupArrayBuilder != null) {  // close current layoutContext.... if (layoutsArrayBuilder != null && layoutContext != null) { this.layoutsArrayBuilder.add(layoutContext.build()); }  // close current gourpContext if (groupContext != null) { groupContext.add("elements", layoutsArrayBuilder.build()); groupArrayBuilder.add(groupContext); }  rootLayoutBuilder.add("elements", groupArrayBuilder.build()); }  // write result JsonObject jsonObject = rootLayoutBuilder.build(); String result = null; try (Writer writer = new StringWriter()) { Json.createWriter(writer).write(jsonObject); result = writer.toString(); } catch (IOException e) { result = "{}"; e.printStackTrace(); } return result; }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
************************************
[+] input: withTypeParameters() { TypeParameterName A = TypeParameterName.of("A"); TypeParameterName B = TypeParameterName.of("B"); TypeParameterName C = TypeParameterName.of("C"); String toVerify = toTest() .withTypeParameters(A.asTypeParameter(), B.extending(COMPARABLE.with(B))) .withTypeParameters(C.asTypeParameter()) .getTypeParametersGenerator() .generate(); String expected = "<A, B extends java.lang.Comparable<B>, C>"; "<AssertPlaceHolder>"; }
generate() { if (isEmpty()) { return ""; } else { return typeParameters.stream().map(TypeParameterGenerator::typeParameter).map(TypeParameterGenerator::generate).collect(joining(SEPARATOR, OPEN_ANGULAR_BRACKET, CLOSE_ANGULAR_BRACKET)); } }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: asTypeConstructorWithPlaceHolderForGivenNeedleThatMatchesElementType() { TypeConstructor expected = new ArrayTypeConstructor(new PlaceholderTypeConstructor()); TypeConstructor toVerify = new ArrayType(new GenericType(T)).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
asTypeConstructorWithPlaceholderFor(TypeParameterName needle) { return TypeConstructor.array(type.asTypeConstructorWithPlaceholderFor(needle)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: ParseException { SchedJob job = new SchedJob(); job.setJobId(idGenerator.generateId()); job.setGroup("default"); job.setJobName(RandomStringUtils.randomAlphanumeric(5)); job.setJobExecutor("cn.ponfee.disjob.test.executor.NoopJobExecutor"); job.setJobState(JobState.DISABLED.value());  job.setJobParam("test"); job.setJobType(JobType.GENERAL.value());  job.setRetryType(RetryType.NONE.value()); job.setRetryCount(0); job.setRetryInterval(0); job.setStartTime(null); job.setEndTime(null); job.setTriggerType(TriggerType.ONCE.value());  String date = "2022-06-17 18:02:00"; job.setTriggerValue(date); job.setNextTriggerTime(JavaUtilDateFormat.DEFAULT.parse(date).getTime()); job.setExecuteTimeout(3600000); job.setMisfireStrategy(MisfireStrategy.LAST.value()); job.setCollidedStrategy(CollidedStrategy.CONCURRENT.value()); job.setRouteStrategy(RouteStrategy.ROUND_ROBIN.value()); job.setRedeployStrategy(RedeployStrategy.RESUME.value()); job.setRemark("test remark"); job.setLastTriggerTime(null); job.setNextTriggerTime(TriggerTimeUtils.computeNextTriggerTime(job, new Date())); job.setUpdatedBy("0"); job.setCreatedBy("0"); job.setUpdatedAt(new Date()); job.setCreatedAt(new Date());  int insert = bean.insert(job); Assertions."<AssertPlaceHolder>"; }
insert(SchedJob job);
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
************************************
[+] input: testSelectCount() { User user = new User(); user.setAge(18); long count = commonDao.selectCount(user); Assertions."<AssertPlaceHolder>"; }
selectCount(T params);  /** * 查询列表 * * @param params param * @return result */ @SelectProvider(type = SqlBuilder.class, method = "selectList") <T> List<Map<?,?>> selectList(T params);   /** * 自定义查询列表结果 * * @param params param * @return result */ @Select(" ${selfSQL}
[*] target: assertEquals(2, count)
[-] pred: org. junit. Assert. assertEquals ( 2, count )
************************************
************************************
[+] input: testSkipNullCreateSourceInField() { when(field.getCreateSource()).thenReturn(null); boolean skip = skipDetector.skip(field); Assertions."<AssertPlaceHolder>"; verify(field, times(0)).getCreateSource(); }
skip(TapField field) { return false; //是否同构，不是同构就就返回false继续执行codec, 是同构就继续下面的判断 //        if (!isomorphism) return false; //是同构，如果这个字段是手动修改改过表结构的结果就返回false需要走codec, 否则不走codec //        return !(null != field && null != field.getCreateSource() && Field.SOURCE_MANUAL.equalsIgnoreCase(field.getCreateSource())); }
[*] target: assertFalse(skip)
[-] pred: org. junit. Assert. assertFalse ( skip )
************************************
************************************
[+] input: givenParameters() { String toVerify = toTest() .withParameter(STRING, "s") .withParameters(Parameter.of(BIG_DECIMAL, "bd"), Parameter.of(INTEGER, "i")) .withParameterTypes(OPTIONAL.with(T), OPTIONAL.with(U)) .andParameterNames("t", "u") .getParametersGenerator() .generate();  String expected = "(java.lang.String s, java.math.BigDecimal bd, java.lang.Integer i, java.util.Optional<T> t, java.util.Optional<U> u)";  "<AssertPlaceHolder>"; }
generate() { return parameters .stream() .map(ParameterGenerator::generateFrom) .collect(joining(SEPARATOR, OPEN_PARENTHESIS, CLOSE_PARENTHESIS)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testInsertBatch() { List<User> userList = new ArrayList<>(); { User user = new User(); user.setName("张三") .setAge(18) .setCreateTime(LocalDateTime.now()); userList.add(user); } { User user = new User(); user.setName("李四") .setAge(17) .setCreateTime(LocalDateTime.now()); userList.add(user); } int insert = commonDaoWrap.insertBatch(userList); Assertions."<AssertPlaceHolder>"; }
insertBatch(List<E> list) {  if (CollectionUtils.isEmpty(list)) { throw new NonTransientDataAccessResourceException("The list cannot be empty !!!"); } return dao.insertBatch(list); }
[*] target: assertEquals(2, insert)
[-] pred: org. junit. Assert. assertEquals ( 2, insert )
************************************
************************************
[+] input: Exception { when(multipartFile.getBytes()).thenReturn("{"version":"1.3.0"}".getBytes()); try(MockedStatic<ParseRelMig> prm = Mockito.mockStatic(ParseRelMig.class)) { prm.when(() -> ParseRelMig.redirect(param)).thenCallRealMethod(); ParseRelMig redirect = ParseRelMig.redirect(param); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(ParseRelMig13OrMoreImpl.class.getName(), redirect.getClass().getName()); } }
redirect(ParseParam param) { try { MultipartFile multipartFile = param.getMultipartFile(); String relMig = new String(multipartFile.getBytes()); param.setRelMigStr(relMig); Map<String, Object> relMigInfo = (Map<String, Object>) new ObjectMapper().readValue(param.getRelMigStr(), Map.class); param.setRelMigInfo(relMigInfo); String version = String.valueOf(relMigInfo.get(KeyWords.VERSION)); Class<? extends ParseRelMig> instance = ParseRelMigFileVersionMapping.getInstance(version); Constructor<? extends ParseRelMig> declaredConstructor = instance.getDeclaredConstructor(ParseParam.class); return declaredConstructor.newInstance(param); } catch (Exception e) { throw new BizException("relMig.parse.failed", e.getMessage()); } }
[*] target: assertNotNull(redirect)
[-] pred: org. junit. Assert. assertNotNull ( redirect )
************************************
************************************
[+] input: 피드백_생성() { FeedbackRequest request = new FeedbackRequest("피드백 본문", 1); Long useerId = 1L;  var expected = Feedback.builder() .content("피드백 본문") .score(Score.ONE_STAR) .userId(1L) .build();  Mockito.when(feedbackRepository.save(any())) .thenReturn(expected);  Feedback actual = feedbackService.create(request, useerId);  "<AssertPlaceHolder>"; }
create(FeedbackRequest request, Long userId) { var feedback = Feedback.builder() .content(request.content()) .score(Score.of(request.score())) .userId(userId) .build();  return feedbackRepository.save(feedback); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test_sqrt_5_meta() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.MESSAGE_METADATA, "result", 3, false, false, null), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString());  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("2.236", result); }
onMsg(TbContext ctx, TbMsg msg) { locks.computeIfAbsent(msg.getOriginator(), SemaphoreWithTbMsgQueue::new) .addToQueueAndTryProcess(msg, ctx, this::processMsgAsync); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
************************************
[+] input: 인물_관계_탑승하기() { // given var expected = new CharacterHistory( CHARACTER_ID, USER_ID );  Mockito.when(characterHistoryRepository.save(any())) .thenReturn(expected); // when var actual = characterHistoryService.save(CHARACTER_ID, USER_ID); // then "<AssertPlaceHolder>"; }
save(Long characterId, Long userId) { var characterHistory = new CharacterHistory(characterId, userId); return characterHistoryRepository.save(characterHistory); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: Exception { /* we test that if we turn the flag off the user information is preserved */ MaskingConfiguration configuration = new DefaultMaskingConfiguration(); configuration.setValue("url.mask.usernamePassword", false); configuration.setValue("url.mask.port", true); configuration.setValue("url.preserve.domains", 0); MaskingProvider urlMaskingProvider = new URLMaskingProvider(configuration, new MaskingProviderFactory(new ConfigurationManager(), Collections.emptyMap())); String url = "http://user1:pass1@www.nba.com"; String maskedResult = urlMaskingProvider.mask(url); String originalUserInfo = new URL(url).getUserInfo(); String maskedUserInfo = new URL(maskedResult).getUserInfo(); "<AssertPlaceHolder>"; }
mask(String identifier) { try { URL url = new URL(identifier); return maskURL(url); } catch (MalformedURLException e) { return RandomGenerators.generateRandomURL(); } }
[*] target: assertEquals(originalUserInfo, maskedUserInfo)
[-] pred: org. junit. Assert. assertEquals ( originalUserInfo, maskedUserInfo )
************************************
************************************
[+] input: givenConcreteTypeWithoutTypeParameters() { Type type = STRING; String toVerify = type(type).generate(); String expected = "java.lang.String"; "<AssertPlaceHolder>"; }
generate() { return type.match( generic -> generic.getName().raw(),  concrete -> { List<TypeArgument> typeArguments = concrete.getTypeArguments(); if (typeArguments.isEmpty()) { return concrete.getFullyQualifiedName().raw(); } else { return concrete.getFullyQualifiedName().raw() + OPEN_ANGULAR_BRACKET + typeArguments.stream().map(TypeArgumentGenerator::generateFrom).collect(joining(SEPARATOR)) + CLOSE_ANGULAR_BRACKET; } },  array -> type(array.getType()).generate() + OPEN_SQUARE_BRACKET + CLOSE_SQUARE_BRACKET ); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testForEach() { int[] keys = new int[]{1, 17, 33, 2, 18, 3};  IntObjMap<String> m = setupForEach(keys); int size = m.size(); m.forEach((k, v) -> false); assertEquals(0, m.size());  for (int key : keys) { m = setupForEach(keys); // remove the key from map though forEach m.forEach((k, v) -> k != key); assertEquals(size - 1, m.size()); assertNull(m.get(key)); for (int k : keys) { if (k != key) { assertEquals(String.valueOf(k), m.get(k)); } }  // re-put m.put(key, String.valueOf(key)); for (int k : keys) { assertEquals(String.valueOf(k), m.get(k)); } "<AssertPlaceHolder>"; } }
size() { return size; }
[*] target: assertEquals(size, m.size())
[-] pred: org. junit. Assert. assertEquals ( size, m. size() )
************************************
************************************
[+] input: Exception { String clientId = "22334455"; String clientSecret = "998877665544"; String cloudApiBaseUrl = "https://xray.cloud.getxray.app/api/v2"; String authenticationPayload = "{ "client_id": "" + clientId +"", "client_secret": "" + clientSecret +"" }"; String expectedToken = "00000000000000000000000000111111111111111111111111222222222222222222222223333333333333";  Log log = Mockito.mock(Log.class); OkHttpClient client = Mockito.mock(OkHttpClient.class); Builder responseBuilder = new Response.Builder(); responseBuilder.protocol(okhttp3.Protocol.HTTP_1_1); responseBuilder.request(new Request.Builder().url(cloudApiBaseUrl + "/authenticate").build()); responseBuilder.code(200); responseBuilder.message("OK"); responseBuilder.header("Content-Type", "application/json"); responseBuilder.body(okhttp3.ResponseBody.create("""+expectedToken+""", okhttp3.MediaType.parse("application/json"))); Response response = responseBuilder.build();  final Call remoteCall = Mockito.mock(Call.class); when(remoteCall.execute()).thenReturn(response); when(client.newCall(any())).thenReturn(remoteCall);  // OkHttpClient client2 = mockHttpClient("""+expectedToken+"""); String authToken = CommonCloud.authenticateXrayAPIKeyCredentials(log, true, client, clientId, clientSecret, cloudApiBaseUrl); "<AssertPlaceHolder>";  ArgumentCaptor<Request> req = ArgumentCaptor.forClass(Request.class); verify(client).newCall(req.capture()); assertEquals(cloudApiBaseUrl + "/authenticate", req.getValue().url().toString()); assertEquals("POST", req.getValue().method()); assertEquals("application/json; charset=utf-8", req.getValue().body().contentType().toString()); final Buffer buffer = new Buffer(); req.getValue().body().writeTo(buffer); assertEquals(authenticationPayload,  buffer.readUtf8()); }
authenticateXrayAPIKeyCredentials(Log logger,boolean verbose, OkHttpClient client, String clientId, String clientSecret, String cloudApiBaseUrl) throws IOException { String authenticationPayload = "{ "client_id": "" + clientId +"", "client_secret": "" + clientSecret +"" }"; RequestBody body = RequestBody.create(authenticationPayload, MEDIA_TYPE_JSON); String xrayCloudAuthenticateUrl = cloudApiBaseUrl + "/authenticate"; Request request = new Request.Builder().url(xrayCloudAuthenticateUrl).post(body).build(); CommonUtils.logRequest(logger, request, verbose); try (Response response = client.newCall(request).execute()) { CommonUtils.logResponse(logger, response, false); String responseBody = response.body().string(); if (response.isSuccessful()) { return responseBody.replace(""", ""); } else { throw new IOException("failed to authenticate " + response); } } }
[*] target: assertEquals(expectedToken, authToken)
[-] pred: org. junit. Assert. assertEquals ( expectedToken, authToken )
************************************
************************************
[+] input: testAListIsNull() { when(a.getAgentIds()).thenReturn(null); when(b.getAgentIds()).thenReturn(mock(List.class)); int count = agentGroupUtil.sortAgentGroup(a, b); Assertions."<AssertPlaceHolder>"; }
sortAgentGroup(AgentGroupEntity a, AgentGroupEntity b) { List<String> agentIdsOfA = a.getAgentIds(); List<String> agentIdsOfB = b.getAgentIds(); if (null == agentIdsOfA && null == agentIdsOfB) { return 0; } if (null == agentIdsOfA) { return 1; } if (null == agentIdsOfB) { return -1; } return agentIdsOfB.size() - agentIdsOfA.size(); }
[*] target: assertEquals(1, count)
[-] pred: org. junit. Assert. assertEquals ( 1, count )
************************************
************************************
[+] input: SQLException { initTable(); final Statement statement = mock(Statement.class); when(statement.enquoteIdentifier(anyString(), anyBoolean())).thenAnswer((Answer<String>) invocation -> { final Object[] args = invocation.getArguments(); return """ + args[0] + """; // enquote the column names }); final String insertStatement = SqlRowWriter.getInsertStatementSql(statement, columnStatementPositions); final StringBuilder expectedInsertStatement = new StringBuilder("INSERT INTO ").append(TableGenerator.DEFAULT_TABLE_NAME) .append(" ("); for (ColumnInsight column : columnInsights) { expectedInsertStatement.append(""").append(column.getInternalHeader()).append("","); } expectedInsertStatement.append(""").append(NONCE_HEADER_DEFAULT).append("")\nVALUES (?,?,?,?,?,?,?,?,?,?)"); "<AssertPlaceHolder>"; }
getInsertStatementSql(final Statement statement, final Map<ColumnHeader, Integer> columnStatementPositions) { final StringBuilder sb = new StringBuilder(); sb.append("INSERT INTO ").append(TableGenerator.DEFAULT_TABLE_NAME).append(" ("); // Ensure columns in insert statement are properly ordered final List<ColumnHeader> columnNames = columnStatementPositions.entrySet().stream() .sorted(Map.Entry.comparingByValue()) .map(Map.Entry::getKey) .collect(Collectors.toList()); // Append all the escaped column names sb.append(columnNames.stream() .map(column -> { try { return statement.enquoteIdentifier(column.toString(), true); } catch (SQLException e) { throw new C3rRuntimeException("Could not prepare internal statement for temporary database. Failed to " + "escape column header: " + column, e); } }) .collect(Collectors.joining(","))); sb.append(")\n").append("VALUES ("); sb.append("?,".repeat(columnNames.size() - 1)); sb.append("?)"); return sb.toString(); }
[*] target: assertEquals(expectedInsertStatement.toString(), insertStatement)
[-] pred: org. junit. Assert. assertEquals ( expectedInsertStatement. toString ( ), insertStatement )
************************************
************************************
[+] input: testInspectChartNormal() { Map<String, Integer> actual = taskService.inspectChart(user); Assertions."<AssertPlaceHolder>"; assertEquals(list.size(), actual.get("total")); assertEquals(1, actual.get("error")); assertEquals(1, actual.get("running")); assertEquals(1, actual.get("done")); assertEquals(1, actual.get("waiting")); assertEquals(1, actual.get("scheduling")); assertEquals(1, actual.get("stopping")); }
inspectChart(UserDetail user) { int error = 0; int running = 0; int done = 0; int waiting = 0; int scheduling = 0; int stopping = 0; int total = 0; List<InspectDto> inspectDtoList = inspectTaskList(new Filter(), user); if (CollectionUtils.isNotEmpty(inspectDtoList)) { total = inspectDtoList.size(); for (InspectDto taskDto : inspectDtoList) { String status = String.valueOf(taskDto.getStatus()).toLowerCase(); if (ERROR.getValue().equals(status)) { error++; } else if(RUNNING.getValue().equals(status)) { running++; } else if (DONE.getValue().equals(status)) { done++; } else if (WAITING.getValue().equals(status)) { waiting++; }else if (SCHEDULING.getValue().equals(status)) { scheduling++; }else if (STOPPING.getValue().equals(status)) { stopping++; } } }  Map<String, Integer> chart5 = new HashMap<>(); chart5.put(TOTAL, total); chart5.put("error", error); chart5.put("running", running); chart5.put("done", done); chart5.put("waiting", waiting); chart5.put("scheduling", scheduling); chart5.put("stopping", stopping); return chart5; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testSkipNullField() { when(field.getCreateSource()).thenReturn(Field.SOURCE_JOB_ANALYZE); boolean skip = skipDetector.skip(null); Assertions."<AssertPlaceHolder>"; verify(field, times(0)).getCreateSource(); }
skip(TapField field) { return false; //是否同构，不是同构就就返回false继续执行codec, 是同构就继续下面的判断 //        if (!isomorphism) return false; //是同构，如果这个字段是手动修改改过表结构的结果就返回false需要走codec, 否则不走codec //        return !(null != field && null != field.getCreateSource() && Field.SOURCE_MANUAL.equalsIgnoreCase(field.getCreateSource())); }
[*] target: assertFalse(skip)
[-] pred: org. junit. Assert. assertFalse ( skip )
************************************
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "9223372036854775807"; Long value = Long.parseLong(valueAsString); String expected = TypeCodecs.BIGINT.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
format(String value) { long longValue = Long.parseLong(value); return TypeCodecs.BIGINT.format(longValue); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testNewControl() { SortedMap<String, Charset> charsetsSortedMap = Charset.availableCharsets(); for (String encoding : charsetsSortedMap.keySet()) { ResourceBundle.Control control = PropertyResourceBundleControl.newControl(encoding); "<AssertPlaceHolder>"; } }
newControl(final String encoding) throws UnsupportedCharsetException { // check encoding Charset.forName(encoding); final ResourceBundle.Control existedControl = getControl(encoding); ResourceBundle.Control control = existedControl; if (existedControl == null) { control = new PropertyResourceBundleControl(encoding); encodingControlMap.put(encoding, control); } return control; }
[*] target: assertNotNull(control)
[-] pred: org. junit. Assert. assertNotNull ( control )
************************************
************************************
[+] input: applyGivenTypeConstructorWithoutPlaceholder() { ConcreteType expected = Type.concrete(ERUDITE, STRING_TYPE.invariant(), BOOLEAN_TYPE.contravariant(), INTEGER_TYPE.covariant()); ConcreteType toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), BOOLEAN_TYPE_CONSTRUCTOR.contravariant(), INTEGER_TYPE_CONSTRUCTOR.covariant()).apply(BOOLEAN_TYPE);  "<AssertPlaceHolder>"; }
apply(Type toApplyTo) { List<TypeArgument> typeArguments = typeConstructorArguments .stream() .map(typeArgument -> typeArgument.apply(toApplyTo)) .collect(toList());  return Type.concrete(fullyQualifiedName, typeArguments); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testShouldTriggerCronBasedSnapshot_NextValidTimeBeforeCurrent() { String cronExpressionString = "0 */10 * * * ?"; // Every 10th minute CronExpression cronExpression = SnapshotUtils.interpretAsCron(cronExpressionString).get();  Calendar calendar = Calendar.getInstance(); calendar.set(2022, Calendar.JUNE, 5, 11, 5); // 11:05  Instant now = calendar.getTime().toInstant(); Instant lastTrigger = now.minus(Duration.ofMinutes(10)); // 10:05, should have fired at 11:00  boolean result = SnapshotUtils.shouldTriggerCronBasedSnapshot( CHECKPOINT, cronExpression, lastTrigger, now);  "<AssertPlaceHolder>"; }
shouldTriggerCronBasedSnapshot( SnapshotType snapshotType, CronExpression cronExpression, Instant lastTriggerDateInstant, Instant nowInstant) { Date now = Date.from(nowInstant); Date lastTrigger = Date.from(lastTriggerDateInstant);  Date nextValidTimeAfterLastTrigger = cronExpression.getNextValidTimeAfter(lastTrigger);  if (nextValidTimeAfterLastTrigger != null && nextValidTimeAfterLastTrigger.before(now)) { LOG.info( "Triggering new automatic {} based on cron schedule '{}' due at {}", snapshotType.toString().toLowerCase(), cronExpression.toString(), nextValidTimeAfterLastTrigger); return true; } else { return false; } }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testGetNextSibling() { Node function = root.getChild(0); Node def = function.getChild(0); Node identifier = function.getChild(1); Assertions.assertNull(root.getNextSibling()); Assertions."<AssertPlaceHolder>"; }
getNextSibling() { return getNextSibling(false); }
[*] target: assertEquals(identifier, def.getNextSibling())
[-] pred: org. junit. Assert. assertEquals ( identifier, def. getNextSibling() )
************************************
************************************
[+] input: isEnabled_initialized_returnsFalse() { testFeature.loadProperties(propertyHelper); "<AssertPlaceHolder>"; }
isEnabled() { if (!isLoaded) throw new RuntimeException("Feature not initialized"); return isEnabled; }
[*] target: assertFalse(testFeature.isEnabled())
[-] pred: org. junit. Assert. assertFalse ( testFeature. isEnabled() )
************************************
************************************
[+] input: testSerializeWithMetricsData() {  CollectRep.MetricsData metricsData = CollectRep.MetricsData.newBuilder() .setMetrics("someValue") .setApp("linux") .build(); byte[] bytes = serializer.serialize("", metricsData);  "<AssertPlaceHolder>"; assertArrayEquals(metricsData.toByteArray(), bytes); }
serialize(String s, CollectRep.MetricsData metricsData) {  if (metricsData == null) { log.error("metricsData is null"); return null; }  return metricsData.toByteArray(); }
[*] target: assertNotNull(bytes)
[-] pred: org. junit. Assert. assertNotNull ( bytes )
************************************
************************************
[+] input: shouldLetterIsCorGReturnTrue() { boolean actual = Properties.letterIsCorG('c'); "<AssertPlaceHolder>"; }
letterIsCorG(char aLetter) { return (aLetter == 'c') || (aLetter == 'g'); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: shouldAddOpenListener() { component.onOpen(event -> { });  List<EventListener<DrawerOpenEvent>> listeners = component.getEventListeners(DrawerOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DrawerOpenEvent>); }
onOpen(EventListener<DrawerOpenEvent> listener) { return addOpenListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: IOException { final ExportHelper exportHelper = new ExportHelper(clientHandler); final ClassLoaderDescriptor classLoaderDescriptor = ClassLoaderDescriptor.builder().build(); final List<LoadedClass> classesToExport = List.of(new LoadedClass("org.test.MyClass", null, null), new LoadedClass("org.othertest.SomeClass", classLoaderDescriptor, null), new LoadedClass("testing.Export", classLoaderDescriptor, null));  final Map<String, byte[]> classData = classesToExport.stream() .collect(Collectors.toMap(LoadedClass::getName, l -> generateClassBytes()));  Mockito.when(clientHandler.getClassBytes(ArgumentMatchers.eq(JVM), ArgumentMatchers.any())) .thenAnswer(ctx -> classData.get(ctx.getArgument(1, LoadedClass.class).getName()));  final File outputFile = File.createTempFile("export", ".jar"); final AtomicInteger exportCount = new AtomicInteger();  final boolean success = exportHelper.export(JVM, classesToExport, outputFile, exportCount::set);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(classesToExport.size(), exportCount.get());  final JarFile jarFile = new JarFile(outputFile); final List<JarEntry> jarEntries = jarFile.stream() .filter(entry -> entry.getName().endsWith(".class")) .collect(Collectors.toList()); Assertions.assertEquals(jarEntries.size(), classesToExport.size());  for (JarEntry jarEntry : jarEntries) { final byte[] jarClassFile = jarFile.getInputStream(jarEntry).readAllBytes(); final byte[] baseClassFile = classData.get(jarEntry.getName().replace('/', '.').replace(".class", "")); Assertions.assertArrayEquals(baseClassFile, jarClassFile); } }
export(RunningJvm jvm, List<LoadedClass> loadedClasses, File outputJar, Consumer<Integer> currentProgress) { log.debug("Exporting {} files in {} to {}", loadedClasses.size(), jvm, outputJar); try { Files.deleteIfExists(outputJar.toPath()); Files.createFile(outputJar.toPath()); } catch (IOException e) { log.warn("Failed to create initial file for export", e); return false; } final AtomicInteger count = new AtomicInteger(); try (JarOutputStream jarOutputStream = new JarOutputStream(Files.newOutputStream(outputJar.toPath()))) { // Note - parallel stream runs in common fork join pool despite these being io bound tasks loadedClasses.stream() .parallel() .map(loadedClass -> new Pair<>(loadedClass, clientHandler.getClassBytes(jvm, loadedClass))) .forEach(pair -> { log.debug("Exporting: {}", loadedClasses); synchronized (count) { // Possible race condition - count could be incremented before another thread, but the // other thread could run currentProgress first. Therefore, we synchronize. currentProgress.accept(count.incrementAndGet()); } final String name = pair.getKey().getName().replace('.', '/') + ".class"; final byte[] content = pair.getValue(); write(name, content, jarOutputStream); }); log.debug("Jar created: {} with {} classes", outputJar, count.get()); return true; } catch (IOException | UncheckedIOException e) { log.warn("Failed to export", e); return false; } }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
************************************
[+] input: concreteGivenFullyQualifiedNameAndListOfTypeArguments() { ConcreteTypeConstructor expected = new ConcreteTypeConstructor(ERUDITE, asList(STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant())); ConcreteTypeConstructor toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant());  "<AssertPlaceHolder>"; }
contravariant() { return TypeConstructorArgument.of(CONTRAVARIANT, this); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: shouldAddCancelListener() { component.onCancel(event -> { });  List<EventListener<LoginCancelEvent>> listeners = component.getEventListeners(LoginCancelEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<LoginCancelEvent>); }
onCancel(EventListener<LoginCancelEvent> listener) { return addCancelListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testLoopByConfigNormal() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Map.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1, 1); } }
loopByConfig(File config, Log logger, final String loopPath, final String pythonJarPath) { //按照配置文件来编译第三方Python包 Map<String, Object> configMap = getPythonConfig(config); Object sitePackages = configMap.get(PYTHON_THREAD_SITE_PACKAGES_PATH); if (sitePackages instanceof Collection) { Collection<String> packages = (Collection<String>) sitePackages; if (!packages.isEmpty()) { logger.info("Configuration files will be used for package compilation： {}", toJson(configMap)); List<File> path = new ArrayList<>(); for (Object name : packages) { if (null == name) continue; path.add(new File(concat(loopPath, String.valueOf(name)))); } if (!path.isEmpty()) { loopFiles(path, logger, pythonJarPath); return true; } } } return false; }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
************************************
[+] input: testNormal() { when(scheduleUtil.criteria(anyString())).thenCallRealMethod(); Criteria mockId = scheduleUtil.criteria("mockId"); Assertions."<AssertPlaceHolder>"; Document criteriaObject = mockId.getCriteriaObject(); Assertions.assertNotNull(criteriaObject); Assertions.assertEquals(5, criteriaObject.size()); Assertions.assertTrue(criteriaObject.containsKey("is_deleted")); Assertions.assertTrue(criteriaObject.containsKey("source._id")); Assertions.assertTrue(criteriaObject.containsKey("sourceType")); Assertions.assertTrue(criteriaObject.containsKey("meta_type")); Assertions.assertTrue(criteriaObject.containsKey("taskId")); }
criteria(String dataSourceId) { return Criteria.where("is_deleted").ne(true) .and("source._id").is(dataSourceId) .and("sourceType").is(SourceTypeEnum.SOURCE.name()) .and("meta_type").ne("database") .and("taskId").exists(false); }
[*] target: assertNotNull(mockId)
[-] pred: org. junit. Assert. assertNotNull ( mockId )
************************************
************************************
[+] input: asTypeConstructorWithPlaceholderForGivenNeedleThatDoesNotMatch() { TypeConstructor expected = new GenericTypeConstructor(U); TypeConstructor toVerify = new GenericType(U).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
asTypeConstructorWithPlaceholderFor(TypeParameterName needle) { if (Objects.equals(name, needle)) { return TypeConstructor.placeholder(); } else { return TypeConstructor.generic(name); } }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testHorizontalLayoutWithLabel() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.HORIZONTAL); builder.addElement("firstName", "First Name", null). // addElements("lastName", "role");  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
build() {  // close current controllsBuilder.... if (controlsArrayBuilder != null && layoutContext != null) { layoutContext.add("elements", controlsArrayBuilder.build()); }  if (groupArrayBuilder != null) {  // close current layoutContext.... if (layoutsArrayBuilder != null && layoutContext != null) { this.layoutsArrayBuilder.add(layoutContext.build()); }  // close current gourpContext if (groupContext != null) { groupContext.add("elements", layoutsArrayBuilder.build()); groupArrayBuilder.add(groupContext); }  rootLayoutBuilder.add("elements", groupArrayBuilder.build()); }  // write result JsonObject jsonObject = rootLayoutBuilder.build(); String result = null; try (Writer writer = new StringWriter()) { Json.createWriter(writer).write(jsonObject); result = writer.toString(); } catch (IOException e) { result = "{}"; e.printStackTrace(); } return result; }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
************************************
[+] input: testInitLoader() { ExtensionLoader<DemoExtension> extensionLoader = ExtensionLoader.getExtensionLoader(DemoExtension.class); Assertions."<AssertPlaceHolder>"; }
getExtensionLoader(Class<T> type) { if (type == null) { throw new IllegalArgumentException("Extension type == null"); }  if (!type.isInterface()) { throw new IllegalArgumentException("Extension type (" + type + ") is not an interface!"); }  if (!withExtensionAnnotation(type)) { throw new IllegalArgumentException( "Extension type (" + type + ") is not an extension, because it is not annotated with @" + SPI.class.getSimpleName() + "!"); }  ExtensionLoader<T> loader = (ExtensionLoader)EXTENSION_LOADERS.get(type); if (loader == null) { EXTENSION_LOADERS.putIfAbsent(type, new ExtensionLoader(type)); loader = (ExtensionLoader)EXTENSION_LOADERS.get(type); }  return loader; }
[*] target: assertNotNull(extensionLoader)
[-] pred: org. junit. Assert. assertNotNull ( extensionLoader )
************************************
************************************
[+] input: test_getJSONArray2() { JSONObject object = new JSONObject().fluentPut("values", new ArrayList<>()); JSONArray array = object.getJSONArray("values"); "<AssertPlaceHolder>"; }
size() { return map.size(); }
[*] target: assertEquals(0, array.size())
[-] pred: org. junit. Assert. assertEquals ( 0, array. size ( ) )
************************************
************************************
[+] input: testHashCode() { ConcurrentHashSet<String> set1 = new ConcurrentHashSet<>();  ConcurrentHashSet<String> set2 = new ConcurrentHashSet<>();  "<AssertPlaceHolder>"; }
hashCode() { int result = super.hashCode(); result = 31 * result + delegate.hashCode(); return result; }
[*] target: assertEquals(set1.hashCode(), set2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( set1. hashCode ( ), set2. hashCode ( ) )
************************************
************************************
[+] input: getConsumerAclsTeamsOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.CONSUMER.value, null, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getConsumerAclsTeamsOverview(null, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
getConsumerAclsTeamsOverview(Integer teamId, Integer tenantId) { List<CommonUtilsService.ChartsOverviewItem<Integer, Integer>> consumerAclsPerTeamList = manageDatabase .getHandleDbRequests() .getAclsCountByTeams(AclType.CONSUMER.value, teamId, tenantId);  String title = ANALYTICS_102; if (teamId != null) { title += " (" + manageDatabase.getTeamNameFromTeamId(tenantId, teamId) + ")"; } else { title += " (all teams)"; }  return commonUtilsService.getChartsJsOverview( consumerAclsPerTeamList, title, "teamid", "Teams", "Consumer Acls", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetMessage() { String message = "Another Message"; MessageAction action = new MessageAction(message); String retrievedMessage = action.getMessage();  "<AssertPlaceHolder>"; }
getMessage() { return message; }
[*] target: assertEquals(message, retrievedMessage)
[-] pred: org. junit. Assert. assertEquals ( message, retrievedMessage )
************************************
************************************
[+] input: 인물_TOP30_조회() { // given var characters = new ArrayList<Character>(); var responses = new ArrayList<CharacterResponse.CharacterDetailResponse>(); for(int i = 0; i < 30; i++) { var character = Character.builder() .name("디프만 1번 출구") .type(CharacterType.PERSONA) .webtoonId(1L) .build(); characters.add(character); responses.add(new CharacterResponse.CharacterDetailResponse( character, "테스트.png", "테스트", false )); }  var webtoon = Webtoon.builder() .title("테스트") .content("테스트") .webtoonUrl("http://테스트") .thumbnail("테스트.png") .platform(Platform.KAKAO) .build();  var mockCharacterImage = CharacterImage.builder() .characterId(1L) .type(CharacterImageType.PERSONA) .imageUrl("테스트.png") .build();  AuthInfo mockInfo = new AuthInfo(USER_ID, List.of(Role.USER));  Mockito.when(characterService.getCharactersByTopUpper(any())) .thenReturn(characters);  Mockito.when(webtoonService.findById(anyLong())) .thenReturn(webtoon);  Mockito.when(characterImageService.findByCharacterIdAndType(any(), any())) .thenReturn(mockCharacterImage);  Mockito.when(characterHistoryService.isUserJoin(any(), any())) .thenReturn(false);  var expected = new CharacterResponse(responses); // when var actual = characterFacade.getTopUpper("PERSONA", mockInfo); // then "<AssertPlaceHolder>"; }
getTopUpper(String type, AuthInfo info) { var responses = characterService.getCharactersByTopUpper(CharacterType.valueOf(type)) .stream() .map(character -> { var webtoon = webtoonService.findById(character.getWebtoonId()); var characterImage = characterImageService.findByCharacterIdAndType( character.getId(), CharacterImageType.valueOf(type) );  return new CharacterResponse.CharacterDetailResponse( character, characterImage.getImageUrl(), webtoon.getTitle(), characterHistoryService.isUserJoin(character.getId(), info) ); }).toList();  return new CharacterResponse(responses); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "12345.6789"; BigDecimal value = new BigDecimal(valueAsString); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  BigDecimal result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { String stringValue = TypeCodecs.TEXT.decode(bytes, protocolVersion); return new BigDecimal(stringValue); }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
************************************
[+] input: oneSourceToMultipleTargetsTest() { final String tableSchema = TableGenerator.getTableSchemaFromConfig( statement, schema, new ColumnHeader("nonce")); final StringBuilder expectedSchema = new StringBuilder("CREATE TABLE c3rTmp (\n"nonce" TEXT"); for (ColumnSchema column : schema.getColumns()) { expectedSchema.append(",\n"").append(column.getInternalHeader()).append("" TEXT"); } expectedSchema.append(")"); "<AssertPlaceHolder>"; }
getTableSchemaFromConfig(final Statement stmt, final TableSchema schema, final ColumnHeader nonceHeader) { try { final StringBuilder sb = new StringBuilder(); // NOTE: we do not declare the nonce column to be a PRIMARY KEY up front to increase performance // for large numbers of inserts, and instead we later make a UNIQUE INDEX on the nonce // _after_ all the data is loaded. (See `getIndexStatement` in this file). sb.append("CREATE TABLE ").append(DEFAULT_TABLE_NAME) .append(" (\n") .append(stmt.enquoteIdentifier(nonceHeader.toString(), false)) .append(" TEXT"); for (ColumnSchema columnSchema : schema.getColumns()) { sb.append(",\n").append(stmt.enquoteIdentifier(columnSchema.getInternalHeader().toString(), true)).append(" TEXT"); } sb.append(")"); return sb.toString(); } catch (SQLException e) { throw new C3rRuntimeException("Invalid SQL identifier encountered.", e); } }
[*] target: assertEquals(expectedSchema.toString(), tableSchema)
[-] pred: org. junit. Assert. assertEquals ( expectedSchema. toString ( ), tableSchema )
************************************
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
encode(BigDecimal value, @NotNull ProtocolVersion protocolVersion) { if (value == null) { return null; } else { String stringValue = value.toString(); return TypeCodecs.TEXT.encode(stringValue, protocolVersion); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: testSave() { String ip = "127.0.0.2"; String akkaAddress = "127.0.0.2:25520"; Server server = new Server(); server.setIp(ip); server.setAkkaAddress(akkaAddress); Long id = serverDAO.save(server);  Assertions."<AssertPlaceHolder>"; Optional<Server> optionalServer = serverRepository.findById(id); Assertions.assertTrue(optionalServer.isPresent());  optionalServer.ifPresent((s) -> { Assertions.assertEquals(s.getIp(), server.getIp()); Assertions.assertEquals(s.getAkkaAddress(), server.getAkkaAddress()); }); }
save(Server server);
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
************************************
[+] input: testLoopByConfigConfigValueIsCollectionButAllElementNotString() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); when(utils.getPythonConfig(any(File.class))).thenReturn(configMap); packages = new ArrayList<>(); packages.add("mock"); packages.add(100); when(configMap.get(PythonUtils.PYTHON_THREAD_SITE_PACKAGES_PATH)).thenReturn(packages); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Map.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1, 1); } }
loopByConfig(File config, Log logger, final String loopPath, final String pythonJarPath) { //按照配置文件来编译第三方Python包 Map<String, Object> configMap = getPythonConfig(config); Object sitePackages = configMap.get(PYTHON_THREAD_SITE_PACKAGES_PATH); if (sitePackages instanceof Collection) { Collection<String> packages = (Collection<String>) sitePackages; if (!packages.isEmpty()) { logger.info("Configuration files will be used for package compilation： {}", toJson(configMap)); List<File> path = new ArrayList<>(); for (Object name : packages) { if (null == name) continue; path.add(new File(concat(loopPath, String.valueOf(name)))); } if (!path.isEmpty()) { loopFiles(path, logger, pythonJarPath); return true; } } } return false; }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
************************************
[+] input: try { Object innerValue = 1; Value value = new Value(innerValue); "<AssertPlaceHolder>"; } catch (Exception e) { fail("No exception expected."); }
asInteger() { if (this.isNumber() && !this.isNull()) { return ((Number)this.innerObject).intValue(); } return null; }
[*] target: assertEquals(innerValue, value.asInteger())
[-] pred: org. junit. Assert. assertEquals ( innerValue, value. asInteger ( ) )
************************************
************************************
[+] input: Exception {  String alertJson = "{"id":"1","content":"Test Alert"}"; Alert expectedAlert = Alert.builder().id(1L).content("Test Alert").build();  when(syncCommands.rpop(anyString())).thenReturn(alertJson); Alert actualAlert = redisCommonDataQueue.pollAlertsData(); "<AssertPlaceHolder>"; }
pollAlertsData() {  try { String alertJson = syncCommands.rpop(alertsDataQueueName); if (alertJson != null) { return JsonUtil.fromJson(alertJson, Alert.class); } } catch (Exception e) { log.error("please config common.queue.redis props correctly", e); throw new RuntimeException(e); } return null; }
[*] target: assertEquals(expectedAlert, actualAlert)
[-] pred: org. junit. Assert. assertEquals ( expectedAlert, actualAlert )
************************************
************************************
[+] input: prepareText_fromMessageParametersWithIssueUrl_generatesValidMessage() { ((DefaultTimeZoneProviderStub)defaultTimeZoneProvider).setTimeZone(ZoneId.of("+02:00"));  Instant instant = LocalDateTime .of(2023, 9, 1, 12, 30, 20) .toInstant(ZoneOffset.UTC);  IncidentNotificationMessage notificationMessage = SampleIncidentMessages.createSampleIncidentMessage(instant, IncidentStatus.acknowledged); notificationMessage.setIssueUrl("https://www.google.com");  String message = sut.prepareText(notificationMessage);  "<AssertPlaceHolder>"; assertEquals(""" > The incident in <http://localhost:8888/sources/connection/connection_name/schema/schema_here/table/table_name_here/detail | schema_here.table_name_here> table has been acknowledged.\s > \s > First seen: 2023-09-01 14:30:20 (GMT+2)\s > Last seen: 2023-09-01 14:30:20 (GMT+2)\s > Quality dimension: Reasonableness\s > Check category: volume\s > Highest severity: fatal\s > Total data quality issues: 10\s > Table priority: 2\s > Issue url: <https://www.google.com | LINK>\s > \s > <http://localhost:8888/incidents/connection_name/2023/9/1 | View in DQOps>\s """.replaceAll("\\s+", ""), message.replaceAll("\\s+", "") ); }
prepareText(IncidentNotificationMessage notificationMessage){  String fullTableNameWithLink = formatToLink( prepareUrlToTable(notificationMessage), notificationMessage.getSchema() + "." + notificationMessage.getTable() );  StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(getBlockQuotedLine(prepareHeader(notificationMessage.getStatus(), fullTableNameWithLink ))); stringBuilder.append(getBlockQuotedLine(""));  stringBuilder.append(extractInstantWithFormatting(notificationMessage.getFirstSeen(), IncidentsColumnNames.FIRST_SEEN_COLUMN_NAME)); if(!notificationMessage.getStatus().equals(IncidentStatus.open)){ stringBuilder.append(extractInstantWithFormatting(notificationMessage.getLastSeen(), IncidentsColumnNames.LAST_SEEN_COLUMN_NAME)); } stringBuilder.append(extractStringWithFormatting(notificationMessage.getQualityDimension(), IncidentsColumnNames.QUALITY_DIMENSION_COLUMN_NAME)); stringBuilder.append(extractStringWithFormatting(notificationMessage.getCheckCategory(), IncidentsColumnNames.CHECK_CATEGORY_COLUMN_NAME)); stringBuilder.append(String.format(getBlockQuotedLine(KEY_VALUE_FORMAT), readableColumnName(IncidentsColumnNames.HIGHEST_SEVERITY_COLUMN_NAME), RuleSeverityLevel.fromSeverityLevel(notificationMessage.getHighestSeverity()).name())); stringBuilder.append( String.format(getBlockQuotedLine(KEY_VALUE_FORMAT), "Total data quality issues", notificationMessage.getFailedChecksCount())); stringBuilder.append(extractIntWithFormatting(notificationMessage.getTablePriority(), IncidentsColumnNames.TABLE_PRIORITY_COLUMN_NAME));  if (notificationMessage.getIssueUrl() != null && !notificationMessage.getIssueUrl().isEmpty()) { stringBuilder.append( String.format(getBlockQuotedLine(KEY_VALUE_FORMAT), readableColumnName(IncidentsColumnNames.ISSUE_URL_COLUMN_NAME), formatToLink(notificationMessage.getIssueUrl(), "LINK"))); }  stringBuilder.append(extractStringWithFormatting(notificationMessage.getDataGroupName(), IncidentsColumnNames.DATA_GROUP_NAME_COLUMN_NAME)); stringBuilder.append(extractStringWithFormatting(notificationMessage.getCheckType(), IncidentsColumnNames.CHECK_TYPE_COLUMN_NAME)); stringBuilder.append(extractStringWithFormatting(notificationMessage.getCheckName(), IncidentsColumnNames.CHECK_NAME_COLUMN_NAME));  if (notificationMessage.getMessage() != null) { stringBuilder.append(extractStringWithFormatting(notificationMessage.getMessage(), "Message")); }  stringBuilder.append(getBlockQuotedLine(""));  stringBuilder.append(getBlockQuotedLine(formatToLink( prepareUrlToIncident(notificationMessage), "View in DQOps" )));  return stringBuilder.toString(); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: test_error2() { Exception error = null; try { DefaultJSONParser parser = new DefaultJSONParser("ttr"); parser.parse(); } catch (Exception ex) { error = ex; } "<AssertPlaceHolder>"; }
parse() { return reader.readAny(); }
[*] target: assertNotNull(error)
[-] pred: org. junit. Assert. assertNotNull ( error )
************************************
************************************
[+] input: shouldTriggerAutomaticSnapshot_ValidIntervalExpression() { boolean shouldTrigger = shouldTriggerAutomaticSnapshot( CHECKPOINT, "10m", Instant.now().minus(Duration.ofDays(365))); "<AssertPlaceHolder>"; }
shouldTriggerAutomaticSnapshot( SnapshotType snapshotType, String automaticTriggerExpression, Instant lastTrigger) { if (StringUtils.isBlank(automaticTriggerExpression)) { return false; } // automaticTriggerExpression was configured by the user  Optional<Duration> interval = interpretAsInterval(automaticTriggerExpression); Optional<CronExpression> cron = interpretAsCron(automaticTriggerExpression);  // This should never happen. The string cannot be both a valid Duration and a cron // expression at the same time. if (interval.isPresent() && cron.isPresent()) { LOG.error( "Something went wrong with the automatic {} trigger expression {}. This setting cannot be simultaneously a valid Duration and a cron expression.", snapshotType, automaticTriggerExpression); return false; }  if (interval.isPresent()) { return shouldTriggerIntervalBasedSnapshot(snapshotType, interval.get(), lastTrigger); } else if (cron.isPresent()) { return shouldTriggerCronBasedSnapshot( snapshotType, cron.get(), lastTrigger, Instant.now()); } else { LOG.warn( "Automatic {} triggering is configured, but the trigger expression '{}' is neither a valid Duration, nor a cron expression.", snapshotType, automaticTriggerExpression); return false; } }
[*] target: assertTrue(shouldTrigger)
[-] pred: org. junit. Assert. assertTrue ( shouldTrigger )
************************************
************************************
[+] input: testGetIsomorphism() { when(mockHazelcastBaseNode.getIsomorphism()).thenCallRealMethod(); boolean isomorphism = mockHazelcastBaseNode.getIsomorphism(); Assertions."<AssertPlaceHolder>"; }
getIsomorphism() { return Optional.ofNullable(this.processorBaseContext.getTaskDto().getIsomorphism()).orElse(false); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
************************************
[+] input: applyGivenTypeConstructorWithPlaceholder() { ConcreteType expected = Type.concrete(ERUDITE, STRING_TYPE.invariant(), BOOLEAN_TYPE.covariant(), INTEGER_TYPE.contravariant()); ConcreteType toVerify = TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant()).apply(BOOLEAN_TYPE);  "<AssertPlaceHolder>"; }
apply(Type toApplyTo) { List<TypeArgument> typeArguments = typeConstructorArguments .stream() .map(typeArgument -> typeArgument.apply(toApplyTo)) .collect(toList());  return Type.concrete(fullyQualifiedName, typeArguments); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: format_ShouldFormatValueAsString() { String valueAsString = "123.456"; BigDecimal value = new BigDecimal(valueAsString); String expected = TypeCodecs.DECIMAL.format(value);  String result = codec.format(valueAsString); Assertions."<AssertPlaceHolder>"; }
format(String value) { BigDecimal decimalValue = new BigDecimal(value); return TypeCodecs.DECIMAL.format(decimalValue); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testGetBundle() { ResourceBundle resourceBundle = PropertyResourceBundleUtils.getBundle("META-INF.test", "UTF-8"); String expected = "测试名称"; String value = resourceBundle.getString("name"); "<AssertPlaceHolder>"; }
getBundle(String baseName, String encoding) { return getBundle(baseName, Locale.getDefault(), encoding); }
[*] target: assertEquals(expected, value)
[-] pred: org. junit. Assert. assertEquals ( expected, value )
************************************
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter());  ContravariantParametersAndTypeParametersValidator.Result result = new CovariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), OPTIONAL.with(T), OPTIONAL.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
validateTypeParametersAndParameters(List<TypeParameter> typeParameters, List<Parameter> parameters, List<String> errorMessages) { List<String> additionalErrorMessages = new ArrayList<>();  verifyParameterCount(parameters, 3, additionalErrorMessages); verifyTypeParameterCount(typeParameters, 3, additionalErrorMessages);  if (!additionalErrorMessages.isEmpty()) { errorMessages.addAll(additionalErrorMessages); return null; }  TypeParameter leftInputTypeConstructorArgument = typeParameters.get(0); TypeParameter rightInputTypeConstructorArgument = typeParameters.get(1); TypeParameter returnTypeConstructorArgument = typeParameters.get(2);  Parameter leftParameter = parameters.get(0); Parameter rightParameter = parameters.get(1); Parameter combinatorParameter = parameters.get(2);  // Check if the third parameter is as expected: Type expectedCombinatorType = BI_FUNCTION.with(leftInputTypeConstructorArgument.asType().contravariant(), rightInputTypeConstructorArgument.asType().contravariant(), returnTypeConstructorArgument.asType().covariant()); if (!Objects.equals(combinatorParameter.getType(), expectedCombinatorType)) { additionalErrorMessages.add("Expected third argument to be a " + generateFrom(expectedCombinatorType) + " but was " + generateFrom(combinatorParameter.getType())); }  if (additionalErrorMessages.isEmpty()) { return Result.of( leftInputTypeConstructorArgument, rightInputTypeConstructorArgument, returnTypeConstructorArgument, leftParameter.getType(), rightParameter.getType() ); } else { errorMessages.addAll(additionalErrorMessages); return null; } }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testLoopByConfigConfigValueIsCollectionButElementsContainsNullString() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); packages = new ArrayList<>(); packages.add("mock"); packages.add(null); when(configMap.get(PythonUtils.PYTHON_THREAD_SITE_PACKAGES_PATH)).thenReturn(packages); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Object.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1,  1); } }
loopByConfig(File config, Log logger, final String loopPath, final String pythonJarPath) { //按照配置文件来编译第三方Python包 Map<String, Object> configMap = getPythonConfig(config); Object sitePackages = configMap.get(PYTHON_THREAD_SITE_PACKAGES_PATH); if (sitePackages instanceof Collection) { Collection<String> packages = (Collection<String>) sitePackages; if (!packages.isEmpty()) { logger.info("Configuration files will be used for package compilation： {}", toJson(configMap)); List<File> path = new ArrayList<>(); for (Object name : packages) { if (null == name) continue; path.add(new File(concat(loopPath, String.valueOf(name)))); } if (!path.isEmpty()) { loopFiles(path, logger, pythonJarPath); return true; } } } return false; }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
************************************
[+] input: setProperty_String() { String value = "test_value"; String setValue = (String) helper.setProperty(KnownProperties.TEST_STRING, value); "<AssertPlaceHolder>"; }
setProperty(String propertyName, Object propertyValue) { if (null == propertyName || null == propertyValue) return null; PropertyType expectedType = getType(propertyName); if (null == expectedType) { return null; }  boolean typesMatch = validateType(expectedType, propertyValue); if (!typesMatch) return null;  synchronized (PropertyHelper.class) { propertyMap.put(propertyName, propertyValue); } return propertyValue; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
************************************
[+] input: format_ShouldFormatInstantValueAsText() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
format(Instant value) { LocalDateTime localDateTime = LocalDateTime.ofInstant(value, zoneOffset); return formatter.format(localDateTime); }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
************************************
[+] input: TypeParserTest {  @ParameterizedTest @MethodSource("me.darknet.assembler.TypeParserTest#provideMemberInfo") public void testParseMemberInfo(String input) { String[] args = input.split(" "); String name = args[0]; String descriptor = args[1]; MemberInfo memberInfo = TypeParser.parseMemberInfo(name, descriptor); Assertions."<AssertPlaceHolder>"; }  public String[] provideMemberInfo() { return new String[] { "java/lang/String.toString ()Ljava/lang/String;", "java/lang/String.value [C", "name Ljava/lang/String;" }; }  }
parseMemberInfo(String name, String descriptor) { String owner = null; if (name.contains(".")) { String[] split = name.split("\\."); owner = split[0]; name = split[1]; } if (descriptor.startsWith("(")) { return new MethodInfo(owner, name, descriptor); } else { return new FieldInfo(owner, name, descriptor); } }
[*] target: assertNotNull(memberInfo)
[-] pred: org. junit. Assert. assertNotNull ( memberInfo )
************************************
************************************
[+] input: 아이템에_가격이_있으면_결제가_필요한_오더라인이다() { // given given(orderItem.getPrice()).willReturn(money3000); given(orderOptionAnswer1.getAdditionalPrice()).willReturn(Money.ZERO); given(orderOptionAnswer2.getAdditionalPrice()).willReturn(Money.ZERO); // when Boolean needPayment = orderLineItem.isNeedPaid();  "<AssertPlaceHolder>"; }
isNeedPaid() { Money totalOrderLinePrice = getTotalOrderLinePrice(); // 0 < totalOrderLinePrice return Money.ZERO.isLessThan(totalOrderLinePrice); }
[*] target: assertTrue(needPayment)
[-] pred: org. junit. Assert. assertTrue ( needPayment )
************************************
************************************
[+] input: fipeTabelasPass() { FipeTabela[] fipeTabelas = BrasilAPI.fipeTabelas(); "<AssertPlaceHolder>"; }
fipeTabelas() { FipeTabela[] obj = (FipeTabela[]) api(FipeTabela[].class, "fipe/tabelas/v1", ""); return obj != null ? (FipeTabela[]) obj.clone() : null; }
[*] target: assertNotNull(fipeTabelas)
[-] pred: org. junit. Assert. assertNotNull ( fipeTabelas )
************************************
************************************
[+] input: shouldAddOpenListener() { component.onDrawerOpen(event -> { });  List<EventListener<AppLayoutDrawerOpenEvent>> listeners = component.getEventListeners(AppLayoutDrawerOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<AppLayoutDrawerOpenEvent>); }
onDrawerOpen( EventListener<AppLayoutDrawerOpenEvent> listener) { return addDrawerOpenListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: givenInterfaceWithoutModifiersButWithTypeParameters() { List<String> toVerify = classOrInterface() .asInterface() .withName("Pair") .withTypeParameters(A.extending(OBJECT)) .withTypeParameters(B) .withBody( "A getLeft();", "B getRight();" ) .lines();  List<String> expected = asList( "interface Pair<A, B> {", "", "    A getLeft();", "    B getRight();", "", "}" );  "<AssertPlaceHolder>"; }
lines() { List<String> result = new ArrayList<>(); result.add( String.join( SPACE, modifiersGenerator.isEmpty() ? type.toString() : modifiersGenerator.generate() + SPACE + type.toString(), name + typeParametersGenerator.generate(), OPEN_BRACE ) ); result.add(EMPTY_LINE); result.addAll(bodyGenerator.indent().lines()); result.add(EMPTY_LINE); result.add(CLOSE_BRACE); return result; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testNormal() { TablePathInfo tablePathInfo = parseRelMig13OrMore.getTablePathInfo(contentMapping); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("table", tablePathInfo.getTable()); Assertions.assertEquals("schema", tablePathInfo.getSchema()); Assertions.assertEquals("database", tablePathInfo.getDatabase()); verify(parseRelMig13OrMore).getFromMap(contentMapping, KeyWords.TABLE); verify(parseRelMig13OrMore).getFromMap(parseRelMig13OrMore.project, KeyWords.CONTENT); verify(parseRelMig13OrMore).getFromMap(content, KeyWords.TABLES); verify(parseRelMig13OrMore).getFromMap(tables, "tableId"); verify(parseRelMig13OrMore).getFromMap(tablePath, KeyWords.PATH); verify(tableInfo).get(KeyWords.DATABASE); verify(tableInfo).get(KeyWords.SCHEMA); verify(tableInfo).get(KeyWords.TABLE); verify(parseRelMig13OrMore, times(4)).parseMap(any()); }
getTablePathInfo(Map<String, Object> contentMapping) { String tableId = String.valueOf(getFromMap(contentMapping, KeyWords.TABLE)); Map<String, Object> content = parseMap(getFromMap(project, KeyWords.CONTENT)); Map<String, Object> tables = parseMap(getFromMap(content, KeyWords.TABLES)); Map<String, Object> tablePath = parseMap(getFromMap(tables, tableId)); Map<String, Object> tableInfo = parseMap(getFromMap(tablePath, KeyWords.PATH)); return new TablePathInfo(String.valueOf(tableInfo.get(KeyWords.DATABASE)), String.valueOf(tableInfo.get(KeyWords.SCHEMA)), String.valueOf(tableInfo.get(KeyWords.TABLE))); }
[*] target: assertNotNull(tablePathInfo)
[-] pred: org. junit. Assert. assertNotNull ( tablePathInfo )
************************************
************************************
[+] input: testGetTaskDtoIsomorphismEmptyNodeList() { when(nodeList.size()).thenReturn(0); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(0)).get(0); verify(nodeList, times(0)).get(1); }
getTaskDtoIsomorphism(List<Node> nodes) { if (null == nodes || nodes.size() != 2) { return false; } Node node1 = nodes.get(0); if (!(node1 instanceof DataParentNode)) return false; Node node2 = nodes.get(1); if (!(node2 instanceof DataParentNode)) return false; DataParentNode dataParentNode1 = (DataParentNode)node1; DataParentNode dataParentNode2 = (DataParentNode)node2; String databaseType = String.valueOf(dataParentNode1.getDatabaseType()); return databaseType.equals(dataParentNode2.getDatabaseType()); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
************************************
[+] input: test() { JSONReader.Context ctx = JSONFactory.createReadContext(); String str = "abcdef1234567890中国©®£\uD83D\uDE0D\uD83D\uDC81\uD83D\uDC4C\uD83C\uDF8D\uD83D\uDE0D"; String json = JSON.toJSONString(str); byte[] bytes = json.getBytes(StandardCharsets.UTF_8); JSONReaderUTF8Vector jsonReader = new JSONReaderUTF8Vector(ctx, json, bytes, 0, bytes.length); String parsed = jsonReader.readString(); "<AssertPlaceHolder>"; }
readString() { if (ch == '"' || ch == ''') { final byte[] bytes = this.bytes; char quote = this.ch; int valueLength; int offset = this.offset; final int start = offset, end = this.end; boolean ascii = true; valueEscape = false;  { int i = 0; Vector<Byte> v_quote = quote == '"' ? V_BYTE_64_DOUBLE_QUOTE : V_BYTE_64_SINGLE_QUOTE; for (; offset + 8 < end; offset += 8, i += 8) { ByteVector v = (ByteVector) ByteVector.SPECIES_64.fromArray(bytes, offset); if (v.eq(V_BYTE_64_SLASH).or(v.eq(v_quote).or(v.lt(V_BYTE_64_ZERO))).anyTrue()) { break; } }  for (; ; ++i) { if (offset >= end) { throw new JSONException("invalid escape character EOI"); }  int c = bytes[offset]; if (c == '\') { valueEscape = true; c = bytes[offset + 1]; offset += (c == 'u' ? 6 : (c == 'x' ? 4 : 2)); continue; }  if (c >= 0) { if (c == quote) { valueLength = i; break; } offset++; } else { ascii = false; switch ((c & 0xFF) >> 4) { case 12: case 13: { /* 110x xxxx   10xx xxxx*/ offset += 2; break; } case 14: { offset += 3; break; } default: { /* 10xx xxxx,  1111 xxxx */ if ((c >> 3) == -2) { offset += 4; i++; break; }  throw new JSONException("malformed input around byte " + offset); } } } } }  String str; if (valueEscape) { char[] chars = new char[valueLength]; offset = start; for (int i = 0; ; ++i) { int ch = bytes[offset]; if (ch == '\') { ch = bytes[++offset]; switch (ch) { case 'u': { ch = char4(bytes[offset + 1], bytes[offset + 2], bytes[offset + 3], bytes[offset + 4]); offset += 4; break; } case 'x': { ch = char2(bytes[offset + 1], bytes[offset + 2]); offset += 2; break; } case '\': case '"': break; default: ch = char1(ch); break; } chars[i] = (char) ch; offset++; } else if (ch == '"') { break; } else { if (ch >= 0) { chars[i] = (char) ch; offset++; } else { switch ((ch & 0xFF) >> 4) { case 12: case 13: { /* 110x xxxx   10xx xxxx*/ chars[i] = (char) (((ch & 0x1F) << 6) | (bytes[offset + 1] & 0x3F)); offset += 2; break; } case 14: { chars[i] = (char) (((ch & 0x0F) << 12) | ((bytes[offset + 1] & 0x3F) << 6) | ((bytes[offset + 2] & 0x3F) << 0)); offset += 3; break; } default: { /* 10xx xxxx,  1111 xxxx */ char2_utf8(bytes, offset, ch, chars, i); offset += 4; i++; } } } } }  str = new String(chars); } else if (ascii) { int strlen = offset - start; if (strlen == 1) { str = TypeUtils.toString((char) (bytes[start] & 0xff)); } else if (strlen == 2) { str = TypeUtils.toString( (char) (bytes[start] & 0xff), (char) (bytes[start + 1] & 0xff) ); } else if (STRING_CREATOR_JDK11 != null) { str = STRING_CREATOR_JDK11.apply( Arrays.copyOfRange(this.bytes, this.offset, offset), LATIN1); } else { str = new String(bytes, start, offset - start, StandardCharsets.US_ASCII); } } else { str = new String(bytes, start, offset - start, StandardCharsets.UTF_8); }  if ((context.features & Feature.TrimString.mask) != 0) { str = str.trim(); }  int ch = ++offset == end ? EOI : bytes[offset++]; while (ch <= ' ' && (1L << ch & SPACE) != 0) { ch = offset == end ? EOI : bytes[offset++]; }  if (comma = ch == ',') { ch = offset == end ? EOI : bytes[offset++]; while (ch <= ' ' && (1L << ch & SPACE) != 0) { ch = offset == end ? EOI : bytes[offset++]; } }  this.ch = (char) ch; this.offset = offset; return str; }  switch (ch) { case '[': return toString( readArray()); case '{': return toString( readObject()); case '-': case '+': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': readNumber0(); Number number = getNumber(); return number.toString(); case 't': case 'f': boolValue = readBoolValue(); return boolValue ? "true" : "false"; case 'n': { readNull(); return null; } default: throw new JSONException("TODO : " + ch); } }  public static class Factory implements JSONFactory.JSONReaderUTF8Creator { @Override public JSONReader create(Context ctx, String str, byte[] bytes, int offset, int length) { return new JSONReaderUTF8Vector(ctx, str, bytes, offset, length); } } }
[*] target: assertEquals(str, parsed)
[-] pred: org. junit. Assert. assertEquals ( str, parsed )
************************************
************************************
[+] input: ibgeMunicipiosPass() { IBGEMunicipio[] ibgeMunicipios1 = BrasilAPI.ibgeMunicipios("SE"); IBGEMunicipio[] ibgeMunicipios2 = BrasilAPI.ibgeMunicipios("SE", new String[] { "dados-abertos-br" }); "<AssertPlaceHolder>"; assertNotNull(ibgeMunicipios2); }
ibgeMunicipios(String siglaUF, String[] providers) { String providesParameter = "?providers=dados-abertos-br,gov,wikipedia"; if (providers != null) { providesParameter = "?providers="; for (String provider : providers) { providesParameter += provider + ","; } providesParameter = providesParameter.substring(0, providesParameter.length() - 1); }  IBGEMunicipio[] obj = (IBGEMunicipio[]) api(IBGEMunicipio[].class, "ibge/municipios/v1/", siglaUF + providesParameter); return obj != null ? (IBGEMunicipio[]) obj.clone() : null; }
[*] target: assertNotNull(ibgeMunicipios1)
[-] pred: org. junit. Assert. assertNotNull ( ibgeMunicipios1 )
************************************
************************************
[+] input: liveMirror() { Project project = ProjectBuilder.builder().build(); project.getPlugins().apply("com.gtnewhorizons.retrofuturagradle"); ModUtils modUtils = project.getExtensions().getByType(ModUtils.class); "<AssertPlaceHolder>"; assertNotNull( modUtils.getLiveMirrorURL(10000, "https://example.com", "https://www.iana.org/help/example-domains")); }
apply(Project project) { project.getPluginManager().apply(JavaLibraryPlugin.class);  if (GradleVersion.current().compareTo(GradleVersion.version("7.6")) < 0) { throw new IllegalStateException("Using RetroFuturaGradle requires at least Gradle 7.6."); }  RfgCacheService.register(project.getGradle());  // Register the obfuscation status attribute ObfuscationAttribute.configureProject(project);  // Register the `minecraft {...}` block final MinecraftExtension mcExt = project.getExtensions().create("minecraft", MinecraftExtension.class, project);  final MinecraftTasks mcTasks = new MinecraftTasks(project, mcExt); project.getExtensions().add("minecraftTasks", mcTasks); final MCPTasks mcpTasks = new MCPTasks(project, mcExt, mcTasks); project.getExtensions().add("mcpTasks", mcpTasks); final ModUtils modUtils = new ModUtils(project, mcExt, mcTasks, mcpTasks); project.getExtensions().add("modUtils", modUtils); }
[*] target: assertNotNull(modUtils)
[-] pred: org. junit. Assert. assertNotNull ( modUtils )
************************************
************************************
[+] input: bind_withWritetime() { when(writetimeTTLFeature.isEnabled()).thenReturn(true); when(writetimeTTLFeature.hasWritetimeColumns()).thenReturn(true); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession);  BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, null,10000L,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size()+1)).set(anyInt(), any(), any(Class.class)); }
bind(Row originRow, Row targetRow, Integer ttl, Long writeTime, Object explodeMapKey, Object explodeMapValue) { // We reference the originRow and convert it to the target type. // We need the targetRow if (null == originRow) throw new RuntimeException("originRow is null");  checkBindInputs(ttl, writeTime, explodeMapKey, explodeMapValue);  BoundStatement boundStatement = prepareStatement().bind();  int currentBindIndex = 0; if (usingTTL) { boundStatement = boundStatement.set(currentBindIndex++, ttl, Integer.class); } if (usingWriteTime) { boundStatement = boundStatement.set(currentBindIndex++, writeTime, Long.class); }  Object originValue, targetValue; Object bindValueTarget = null; for (int targetIndex : columnIndexesToBind) { int originIndex = cqlTable.getCorrespondingIndex(targetIndex);  try { if (usingCounter && counterIndexes.contains(targetIndex)) { originValue = cqlTable.getOtherCqlTable().getData(originIndex, originRow); if (null == originValue) { currentBindIndex++; continue; } targetValue = (null == targetRow ? 0L : cqlTable.getData(targetIndex, targetRow)); bindValueTarget = ((Long) originValue - (null == targetValue ? 0L : (Long) targetValue)); } else if (targetIndex== explodeMapKeyIndex) { bindValueTarget = explodeMapKey; } else if (targetIndex== explodeMapValueIndex) { bindValueTarget = explodeMapValue; } else { if (originIndex < 0) // we don't have data to bind for this column; continue to the next targetIndex continue; bindValueTarget = cqlTable.getOtherCqlTable().getAndConvertData(originIndex, originRow); }  boundStatement = boundStatement.set(currentBindIndex++, bindValueTarget, cqlTable.getBindClass(targetIndex)); } catch (Exception e) { logger.error("Error trying to bind value:" + bindValueTarget + " to column:" + targetColumnNames.get(targetIndex) + " of targetDataType:" + targetColumnTypes.get(targetIndex) + "/" + cqlTable.getBindClass(targetIndex).getName() + " at column index:" + targetIndex); throw e; } }  PKFactory pkFactory = session.getPKFactory(); EnhancedPK pk = pkFactory.getTargetPK(originRow); boundStatement = pkFactory.bindWhereClause(PKFactory.Side.TARGET, pk, boundStatement, currentBindIndex);  return boundStatement .setConsistencyLevel(cqlTable.getWriteConsistencyLevel()) .setTimeout(Duration.ofSeconds(10)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: of() { ClassName expected = new ClassName("String"); ClassName toVerify = ClassName.of("String");  "<AssertPlaceHolder>"; }
of(String className) { return new ClassName(className); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: shouldAddOpenListener() { component.onSelect(event -> { });  List<EventListener<GoogleChartSelectedEvent>> listeners = component.getEventListeners(GoogleChartSelectedEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<GoogleChartSelectedEvent>); }
onSelect( EventListener<GoogleChartSelectedEvent> listener) { return addSelectedListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testMultipleRows() { AsciiTable tablePrinter = new AsciiTable(Arrays.asList("TYPE", "NAME", "STATUS", "URL")); tablePrinter.addRow("Type1", "Name1", "Status1", "http://url1.com"); tablePrinter.addRow("Type2", "Name2", "Status2", "http://url2.com"); tablePrinter.addRow("Type3", "Name3", "Status3", "http://url3.com"); String expected = "+-------+-------+---------+-----------------+\n" + "| TYPE  | NAME  | STATUS  | URL             |\n" + "+-------+-------+---------+-----------------+\n" + "| Type1 | Name1 | Status1 | http://url1.com |\n" + "| Type2 | Name2 | Status2 | http://url2.com |\n" + "| Type3 | Name3 | Status3 | http://url3.com |\n" + "+-------+-------+---------+-----------------+\n"; "<AssertPlaceHolder>"; }
printTable() { StringBuilder table = new StringBuilder(); int[] columnWidths = new int[headers.size()];  // Calculate the width of each column for (int i = 0; i < headers.size(); i++) { columnWidths[i] = headers.get(i).length(); }  for (List<String> row : rows) { for (int i = 0; i < row.size(); i++) { columnWidths[i] = Math.max(columnWidths[i], row.get(i).length()); } }  // Append the headers table.append(printSeparator(columnWidths)); table.append(printRow(headers, columnWidths)); table.append(printSeparator(columnWidths));  // Append the rows for (List<String> row : rows) { table.append(printRow(row, columnWidths)); } table.append(printSeparator(columnWidths));  return table.toString(); }
[*] target: assertEquals(expected, tablePrinter.printTable())
[-] pred: org. junit. Assert. assertEquals ( expected, tablePrinter. printTable ( ) )
************************************
************************************
[+] input: testSkipNotIsomorphism() { skipDetector.setIsomorphism(false); //when(skipDetector.isomorphism).thenReturn(false); when(field.getCreateSource()).thenReturn(Field.SOURCE_JOB_ANALYZE); boolean skip = skipDetector.skip(field); Assertions."<AssertPlaceHolder>"; verify(field, times(0)).getCreateSource(); }
skip(TapField field) { return false; //是否同构，不是同构就就返回false继续执行codec, 是同构就继续下面的判断 //        if (!isomorphism) return false; //是同构，如果这个字段是手动修改改过表结构的结果就返回false需要走codec, 否则不走codec //        return !(null != field && null != field.getCreateSource() && Field.SOURCE_MANUAL.equalsIgnoreCase(field.getCreateSource())); }
[*] target: assertFalse(skip)
[-] pred: org. junit. Assert. assertFalse ( skip )
************************************
************************************
[+] input: testReOpenAll() { List<WebHookInfoVo> mock = mock(List.class); when(webHookController.success(mock)).thenReturn(mock(ResponseMessage.class)); String[] ids = new String[]{"id"}; when(webHookService.reOpen(ids, user)).thenReturn(mock); when(webHookController.reOpenAll(ids)).thenCallRealMethod(); ResponseMessage<List<WebHookInfoVo>> hook = webHookController.reOpenAll(ids); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(mock); verify(webHookService).reOpen(ids, user); }
reOpenAll(@RequestParam(value = "ids") String[] ids) { return success(webHookService.reOpen(ids, getLoginUser())); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
************************************
[+] input: givenGenericType() { String toVerify = toTest() .withType(T.asType()) .getObjectPathOrTypeGenerator() .generate();  String expected = "T";  "<AssertPlaceHolder>"; }
generate() { Optional<String> optionalObjectPathAsString = optionalObjectPathGenerator.map(ObjectPathGenerator::generate); Optional<String> optionalConcreteTypeAsString = optionalConcreteType.map(FullyQualifiedName::raw); Optional<String> optionalGenericTypeAsString = optionalGenericType.map(TypeParameterName::raw); return optionalObjectPathAsString .map(Optional::of).orElse(optionalConcreteTypeAsString) .map(Optional::of).orElse(optionalGenericTypeAsString) .orElseThrow(NullPointerException::new); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: Exception { SlackWebhookProperties props = new SlackWebhookProperties( "slackTest", SLACK_SIGNING_KEY, CHALLENGE_RESPONSE_VERIFICATION_FUNCTION); SlackConnectorPropertiesWrapper wrapper = new SlackConnectorPropertiesWrapper(props); when(ctx.bindProperties(SlackConnectorPropertiesWrapper.class)).thenReturn(wrapper); testObject = new SlackInboundWebhookExecutable(); final var requestTimeStamp = String.valueOf(now().toInstant().toEpochMilli()); Map<String, String> headers = Map.of( HEADER_SLACK_SIGNATURE, slackCurrentSignature(requestTimeStamp, URL_VERIFICATION_REQUEST), HEADER_SLACK_REQUEST_TIMESTAMP, requestTimeStamp); final var payload = mock(WebhookProcessingPayload.class); when(payload.method()).thenReturn("POST"); when(payload.headers()).thenReturn(headers); when(payload.rawBody()).thenReturn(URL_VERIFICATION_REQUEST.getBytes(UTF_8));  testObject.activate(ctx); final var result = testObject.verify(payload);  "<AssertPlaceHolder>"; assertThat(result.body()).isInstanceOf(Map.class); assertThat((Map) result.body()).containsEntry(FIELD_CHALLENGE, "aAaAaAaAaAaAaAaAaAaA"); }
verify(WebhookProcessingPayload payload) { verifySlackRequestAuthentic(payload); return Optional.ofNullable(props.verificationExpression()) .orElse(stringObjectMap -> null) .apply( Map.of( "body", bodyAsMap(payload.headers(), payload.rawBody()), "headers", payload.headers(), "params", payload.params())); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testCloseOneWebHookByHookId() { WebHookInfoVo vo = new WebHookInfoVo(); when(webHookController.success(vo)).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(false); when(mock.get(0)).thenReturn(vo); when(webHookService.reOpen(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.reOpenOne("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.reOpenOne("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(vo); verify(webHookService).reOpen(any(String[].class), any(UserDetail.class)); }
reOpenOne(@PathVariable(value = "id") String hookId) { List<WebHookInfoVo> closed = webHookService.reOpen(new String[]{hookId}, getLoginUser()); if (closed.isEmpty()) { return failed("webhook.reOpen.failed"); } return success(closed.get(0)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
************************************
[+] input: corretorasPass() { Corretora[] corretoras = BrasilAPI.corretoras(); "<AssertPlaceHolder>"; }
corretoras() { Corretora[] obj = (Corretora[]) api(Corretora[].class, "cvm/corretoras/v1", ""); return obj != null ? (Corretora[]) obj.clone() : null; }
[*] target: assertNotNull(corretoras)
[-] pred: org. junit. Assert. assertNotNull ( corretoras )
************************************
************************************
[+] input: 인물_관계_TOP30_조회() { // given var expected = new ArrayList<Character>(); for(int i = 0; i < 30; i++) { expected.add(Character.builder() .name("디프만 1번 출구") .type(CharacterType.PERSONA) .webtoonId(1L) .build() ); }  Mockito.when(characterRepository.findTop30ByTypeOrderByCoinAmountDesc(any())) .thenReturn(expected);  // when List<Character> actual = characterService.getCharactersByTopUpper(CharacterType.PERSONA); // then "<AssertPlaceHolder>"; }
getCharactersByTopUpper(CharacterType type) { return characterRepository.findTop30ByTypeOrderByCoinAmountDesc(type); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: whenObjectAreEquivalentButDifferInCasing_ThenEqualsReturnsTrue() { UserId id1 = new UserId("Bob@Example.Com"); UserId id2 = new UserId("bob@example.com");  assertTrue(id1.equals(id2)); assertEquals(id1.hashCode(), id2.hashCode()); "<AssertPlaceHolder>"; }
compareTo(@NotNull UserId o) { return this.email.compareTo(o.email); }
[*] target: assertEquals(0, id1.compareTo(id2))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id2 ) )
************************************
************************************
[+] input: whenObjectIsNull_ThenEqualsReturnsFalse() { SampleEntitlementId id1 = new SampleEntitlementId("cat", "jit-1");  "<AssertPlaceHolder>"; }
equals(@Nullable Object o) { if (this == o) { return true; }  if (o == null || getClass() != o.getClass()) { return false; }  var that = (EntitlementId) o; return this.catalog().equals(that.catalog()) && this.id().equals(that.id()); }
[*] target: assertFalse(id1.equals(null))
[-] pred: org. junit. Assert. assertFalse ( id1. equals ( null ) )
************************************
************************************
[+] input: test_sqrt_5_to_attribute_and_metadata() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.ATTRIBUTE, "result", 3, false, true, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString());  when(telemetryService.saveAttrAndNotify(any(), any(), any(AttributeScope.class), anyString(), anyDouble())) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAttrAndNotify(any(), any(), any(AttributeScope.class), anyString(), anyDouble());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("2.236", result); }
onMsg(TbContext ctx, TbMsg msg) { locks.computeIfAbsent(msg.getOriginator(), SemaphoreWithTbMsgQueue::new) .addToQueueAndTryProcess(msg, ctx, this::processMsgAsync); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
************************************
[+] input: shouldExtractConfirmAccountLinkWhenHtmlContainsConfirmationLink() { String htmlString = "<html><body><a href='http://localhost/sign-up/verify?token=123'>Confirm Account</a></body></html>"; String expectedLink = "http://localhost/sign-up/verify?token=123"; String actualLink = SignUpUtils.extractConfirmAccountLink(htmlString);  "<AssertPlaceHolder>"; }
extractConfirmAccountLink(String htmlString) { ValidationUtils.validateInputs(htmlString);  // Parse the HTML string using Jsoup Document document = Jsoup.parse(htmlString);  // Select the confirm button link using CSS selector Element confirmButton = document.select("a[href^='http://localhost/sign-up/verify?token=']").first();  if (Objects.nonNull(confirmButton)) { // Retrieve the href attribute from the confirm button link return confirmButton.attr("href"); } else { // Handle the case where the confirm button link is not found return null; } }
[*] target: assertEquals(expectedLink, actualLink)
[-] pred: org. junit. Assert. assertEquals ( expectedLink, actualLink )
************************************
************************************
[+] input: testDecryptInvalidKeyLength() { ReflectionTestUtils.setField( converter, ENCRYPTION_KEY_FIELD, RandomStringUtils.randomAlphabetic(INVALID_KEY_LENGTH)); String encryptedText = RandomStringUtils.randomAlphanumeric(10); String converted = converter.convertToEntityAttribute(encryptedText); "<AssertPlaceHolder>"; }
convertToEntityAttribute(String cipherMessage) { Cipher cipher = getCipher(); Key key = getSecretKey(); byte[] cipherMessageBytes = Base64.getDecoder().decode(cipherMessage); try { AlgorithmParameterSpec paramSpec = new GCMParameterSpec(AUTH_TAG_LENGTH, cipherMessageBytes, 0, GCM_IV_LENGTH); cipher.init(Cipher.DECRYPT_MODE, key, paramSpec); byte[] plainText = cipher.doFinal(cipherMessageBytes, GCM_IV_LENGTH, cipherMessageBytes.length - GCM_IV_LENGTH); return new String(plainText, StandardCharsets.UTF_8); } catch (InvalidKeyException | InvalidAlgorithmParameterException | IllegalBlockSizeException | IllegalArgumentException | BadPaddingException e) { log.error("Failed to convert to entity attribute, reading encrypted value...", e); return cipherMessage; } }
[*] target: assertEquals(encryptedText, converted)
[-] pred: org. junit. Assert. assertEquals ( encryptedText, converted )
************************************
************************************
[+] input: JobException { String taskParam = "taskParam"; when(workerRpcService.splitJob(any())).thenReturn(new SplitJobResult(Collections.singletonList(taskParam)));  SplitJobResult result = workerRpcService.splitJob(new SplitJobParam("group", null, null, null, null)); "<AssertPlaceHolder>"; assertNotNull(result.getTaskParams()); assertEquals(1, result.getTaskParams().size()); assertEquals(taskParam, result.getTaskParams().get(0)); }
splitJob(SplitJobParam param) throws JobException;
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testCheckWhenSameUserId() { OnlySelfDataPermissionChecker checker = new OnlySelfDataPermissionChecker(deptService); SystemLoginUser loginUser = new SystemLoginUser(); loginUser.setUserId(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetUserId(1L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
check(SystemLoginUser loginUser, DataCondition condition) { if (condition == null || loginUser == null) { return false; }  if (loginUser.getUserId() == null || condition.getTargetUserId() == null) { return false; }  Long currentUserId = loginUser.getUserId(); Long targetUserId = condition.getTargetUserId(); return Objects.equals(currentUserId, targetUserId); }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
************************************
[+] input: testCityNeighbors() { CityManager manager = CityManager.getInstance(); System.out.println("++++ " + manager.getClosestCity("Boston", 1)); List<String> expected = Arrays.asList("Boston", "South Boston", "Worcester", "Providence", "Springfield"); List<String> found = manager.getKey("Boston").getNeighbors().stream().limit(5).map(City::getName).collect(Collectors.toList()); System.out.println("++++ Found: " + found); System.out.println("++++ Expected: " + expected); "<AssertPlaceHolder>"; }
getClosestCity(String city, int k) { String key = city.toUpperCase(); City lookup = getKey(key);  if (lookup == null) { return getRandomKey(); }  List<City> neighbors = lookup.getNeighbors(); if (neighbors == null) { return getRandomKey(lookup.getNameCountryCode()); }  if (k > neighbors.size()) { k = neighbors.size(); }  return (neighbors.get(random.nextInt(k))).getName(); }
[*] target: assertEquals(expected, found)
[-] pred: org. junit. Assert. assertEquals ( expected, found )
************************************
************************************
[+] input: getProducerAclsTeamsOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAclsCountByTeams( AclType.PRODUCER.value, TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getProducerAclsTeamsOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
getProducerAclsTeamsOverview(Integer teamId, Integer tenantId) { List<CommonUtilsService.ChartsOverviewItem<Integer, Integer>> producerAclsPerTeamList = manageDatabase .getHandleDbRequests() .getAclsCountByTeams(AclType.PRODUCER.value, teamId, tenantId);  String title = ANALYTICS_101; if (teamId != null) { title += " (" + manageDatabase.getTeamNameFromTeamId(tenantId, teamId) + ")"; } else { title += " (all teams)"; }  return commonUtilsService.getChartsJsOverview( producerAclsPerTeamList, title, "teamid", "Teams", "Producer Acls", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test11() { String str = "中国"; byte[] utf16 = str.getBytes(StandardCharsets.UTF_16LE); JSONWriter jsonWriter = JSONWriter.ofJSONB(); jsonWriter.writeStringUTF16(utf16); byte[] jsonb = jsonWriter.getBytes(); Object parsed = JSONB.parse(jsonb); "<AssertPlaceHolder>"; }
getBytes();  public abstract byte[] getBytes(Charset charset);  public void flushTo(java.io.Writer to) { try { String json = this.toString(); to.write(json); off = 0; } catch (IOException e) { throw new JSONException("flushTo error", e); } }
[*] target: assertEquals(str, parsed)
[-] pred: org. junit. Assert. assertEquals ( str, parsed )
************************************
************************************
[+] input: getActivityLogOverview_TeamIdNotNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getActivityLogByTeam( TestConstants.TEAM_ID, NUMBER_OF_DAYS, TestConstants.TENANT_ID)) .thenReturn(TestConstants.ACLS_COUNT_BY_ENV_ID_INTEGERE); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getActivityLogOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID, NUMBER_OF_DAYS);  Assertions."<AssertPlaceHolder>"; }
getActivityLogOverview( Integer teamId, Integer tenantId, int numberOfDays) {  List<CommonUtilsService.ChartsOverviewItem<String, Integer>> activityCountList; String title = ANALYTICS_107;  if (teamId != null) { activityCountList = manageDatabase.getHandleDbRequests().getActivityLogByTeam(teamId, numberOfDays, tenantId); title = title + " (" + manageDatabase.getTeamNameFromTeamId(tenantId, teamId) + ")"; } else { // tenant filtering List<String> allowedEnvIdList = manageDatabase.getEnvsOfTenantsMap().get(tenantId);  try { activityCountList = manageDatabase .getHandleDbRequests() .getActivityLogForLastDays( numberOfDays, allowedEnvIdList.toArray(new String[0]), tenantId); } catch (Exception e) { log.error("No environments/clusters found.", e); activityCountList = new ArrayList<>(); } }  return commonUtilsService.getChartsJsOverview( activityCountList, title, "dateofactivity", "Days", "Activities", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreNull1() { when(nodeList.size()).thenReturn(2); when(nodeList.get(1)).thenReturn(null);  JsProcessorNode node2 = mock(JsProcessorNode.class); when(nodeList.get(0)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); }
getTaskDtoIsomorphism(List<Node> nodes) { if (null == nodes || nodes.size() != 2) { return false; } Node node1 = nodes.get(0); if (!(node1 instanceof DataParentNode)) return false; Node node2 = nodes.get(1); if (!(node2 instanceof DataParentNode)) return false; DataParentNode dataParentNode1 = (DataParentNode)node1; DataParentNode dataParentNode2 = (DataParentNode)node2; String databaseType = String.valueOf(dataParentNode1.getDatabaseType()); return databaseType.equals(dataParentNode2.getDatabaseType()); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
************************************
[+] input: testCheckServiceDependency_ClusterServiceInstanceServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  when(mockServiceInstanceService.listRunningServiceInstance(0)).thenReturn(Collections.emptyList());  // Configure FrameServiceService.listServices(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); final List<FrameServiceEntity> frameServiceEntities = Arrays.asList(frameServiceEntity); when(mockFrameService.listServices("serviceIds")).thenReturn(frameServiceEntities);  // Run the test final Result result = serviceInstallServiceImplUnderTest.checkServiceDependency(0, "serviceIds");  // Verify the results "<AssertPlaceHolder>"; }
checkServiceDependency(Integer clusterId, String serviceIds) { // List<ClusterServiceInstanceEntity> serviceInstanceList = serviceInstanceService.listRunningServiceInstance(clusterId); Map<String, ClusterServiceInstanceEntity> instanceMap = serviceInstanceList.stream() .collect( Collectors.toMap( ClusterServiceInstanceEntity::getServiceName, e -> e, (v1, v2) -> v1));  List<FrameServiceEntity> list = frameService.listServices(serviceIds); Map<String, FrameServiceEntity> serviceMap = list.stream() .collect( Collectors.toMap( FrameServiceEntity::getServiceName, e -> e, (v1, v2) -> v1)); if (!instanceMap.containsKey("ALERTMANAGER") && !serviceMap.containsKey("ALERTMANAGER")) { return Result.error( "service install depends on alertmanager ,please make sure you have selected it or that alertmanager is normal and running"); } if (!instanceMap.containsKey("GRAFANA") && !serviceMap.containsKey("GRAFANA")) { return Result.error( "service install depends on grafana ,please make sure you have selected it or that grafana is normal and running"); } if (!instanceMap.containsKey("PROMETHEUS") && !serviceMap.containsKey("PROMETHEUS")) { return Result.error( "service install depends on prometheus ,please make sure you have selected it or that prometheus is normal and running"); }  for (FrameServiceEntity frameServiceEntity : list) { for (String dependService : frameServiceEntity.getDependencies().split(",")) { if (StringUtils.isNotBlank(dependService) && !instanceMap.containsKey(dependService) && !serviceMap.containsKey(dependService)) { return Result.error( "" + frameServiceEntity.getServiceName() + " install depends on " + dependService + ",please make sure that you have selected it or that " + dependService + " is normal and running"); } } } return Result.success(); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
encode(String value, @NotNull ProtocolVersion protocolVersion) { if (value == null) { return null; } else { int intValue = Integer.parseInt(value); return TypeCodecs.INT.encode(intValue, protocolVersion); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: validateGivenStaticMethod() { Method toValidate = Method.of( emptySet(), modifiers(PUBLIC, STATIC), asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter()), Optional.of(OPTIONAL.with(V)), "myFunction", asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") ) );  Validated<String, AccumulatorValidator.Result> expected = Validated.invalid("Method is static and cannot implement an abstract method"); Validated<String, AccumulatorValidator.Result> toVerify = AccumulatorValidator.validate(toValidate, new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
validate(Method method, ParametersAndTypeParametersValidator parametersAndTypeParametersValidator) { List<String> errorMessages = new ArrayList<>();  verifyCanImplementAbstractMethod(method, errorMessages); verifyTypeParametersAreUnbounded(method, errorMessages); Type returnType = verifyHasReturnType(method, errorMessages); ParametersAndTypeParametersValidator.Result parametersAndTypeParameters = verifyParametersAndTypeParameters(method, parametersAndTypeParametersValidator, errorMessages);  if (!errorMessages.isEmpty()) { return Validated.invalid(errorMessages); }  // Assign a meaningful name to each of the (three) type parameters: TypeParameter leftInputTypeConstructorArgument = parametersAndTypeParameters.getLeftInputTypeConstructorArgument(); TypeParameter rightInputTypeConstructorArgument = parametersAndTypeParameters.getRightInputTypeConstructorArgument(); TypeParameter returnTypeConstructorArgument = parametersAndTypeParameters.getReturnTypeConstructorArgument();  // Assign a meaningful name to the left and right parameters: Type leftParameterType = parametersAndTypeParameters.getLeftParameterType(); Type rightParameterType = parametersAndTypeParameters.getRightParameterType();  String name = method.getName();  TypeConstructor accumulatedTypeConstructor = returnType.asTypeConstructorWithPlaceholderFor(returnTypeConstructorArgument.getName()); TypeConstructor partiallyAccumulatedTypeConstructor = leftParameterType.asTypeConstructorWithPlaceholderFor(leftInputTypeConstructorArgument.getName()); TypeConstructor inputTypeConstructor = rightParameterType.asTypeConstructorWithPlaceholderFor(rightInputTypeConstructorArgument.getName());  if (!partiallyAccumulatedTypeConstructor.canAccept(accumulatedTypeConstructor)) { // Tweak the error message to not confuse people using the simple case where // parameter types and result type should be identical: if (Objects.equals(partiallyAccumulatedTypeConstructor, inputTypeConstructor)) { return Validated.invalid("No shared type constructor between parameters (" + generateFrom(leftParameterType) + " and " + generateFrom(rightParameterType) + ") and result (" + generateFrom(returnType) + ")"); } else { return Validated.invalid("No shared type constructor between first parameter (" + generateFrom(leftParameterType) + ") and result (" + generateFrom(returnType) + ")"); } }  verifyNoCrossReferences(method.getTypeParameters(), leftParameterType, partiallyAccumulatedTypeConstructor, "type of the first parameter", errorMessages); verifyNoCrossReferences(method.getTypeParameters(), rightParameterType, inputTypeConstructor, "type of the second parameter", errorMessages); verifyNoCrossReferences(method.getTypeParameters(), returnType, accumulatedTypeConstructor, "return type", errorMessages);  if (!errorMessages.isEmpty()) { return Validated.invalid(errorMessages); }  return Validated.valid( AccumulatorValidator.Result.of( name, inputTypeConstructor, partiallyAccumulatedTypeConstructor, accumulatedTypeConstructor, leftParameterType, rightParameterType, returnType ) ); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testCloseOneWebHookByHookId() { WebHookInfoVo vo = new WebHookInfoVo(); when(webHookController.success(vo)).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(false); when(mock.get(0)).thenReturn(vo); when(webHookService.close(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.closeOneWebHookByHookId("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.closeOneWebHookByHookId("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(vo); verify(webHookService).close(any(String[].class), any(UserDetail.class)); }
closeOneWebHookByHookId(@PathVariable(value = "id") String hookId) { List<WebHookInfoVo> closed = webHookService.close(new String[]{hookId}, getLoginUser()); if (closed.isEmpty()) { return success(null); } return success(closed.get(0)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
************************************
[+] input: getScanMetadataCronSchedule_whenRetrieved_thenReturnsDefaultScheduleAt5MinutesPastHour() { String sensorResultsStoragePath = this.sut.getSynchronizeCronSchedule(); String expected = "5 * * * *"; Assertions."<AssertPlaceHolder>"; }
getSynchronizeCronSchedule() { return synchronizeCronSchedule; }
[*] target: assertEquals(expected, sensorResultsStoragePath)
[-] pred: org. junit. Assert. assertEquals ( expected, sensorResultsStoragePath )
************************************
************************************
[+] input: Exception { URL resourceURL = ClassLoaderUtils.getClassResource(classLoader, Nonnull.class); JarFile jarFile = toJarFile(resourceURL); "<AssertPlaceHolder>"; }
toJarFile(URL jarURL) throws IOException { JarFile jarFile = null; final String jarAbsolutePath = resolveJarAbsolutePath(jarURL); if (jarAbsolutePath == null) return null; jarFile = new JarFile(jarAbsolutePath); return jarFile; }
[*] target: assertNotNull(jarFile)
[-] pred: org. junit. Assert. assertNotNull ( jarFile )
************************************
************************************
[+] input: Exception { MaskingConfiguration maskingConfiguration = new DefaultMaskingConfiguration(); maskingConfiguration.setValue("hashing.normalize", true);  HashMaskingProvider hashMaskingProvider = new HashMaskingProvider(maskingConfiguration);  String value = "Joe"; String maskedValue1 = hashMaskingProvider.mask(value);  String value2 = "JOE"; String maskedValue2 = hashMaskingProvider.mask(value2);  "<AssertPlaceHolder>"; }
mask(String identifier) { return maskWithKey(identifier, this.salt); }
[*] target: assertEquals(maskedValue1, maskedValue2)
[-] pred: org. junit. Assert. assertEquals ( maskedValue1, maskedValue2 )
************************************
************************************
[+] input: buildCodonMapBrcaMethodsFrame3Tests() { Path projectPath = Path.of(""); Path brcaPath = projectPath.resolve("assets/dna/real/brca1.fa");  String brcaDnaString = readFile(brcaPath.toFile()); Map<String, Integer> expectedResults = brca1ExpectedFrame3CodonCounts; CodonFrame testCodonFrame = new CodonFrame(brcaDnaString, (short) 3, 1, 20000); ReadingFrames testReadingFrame = new ReadingFrames(testCodonFrame); Map<String, Integer> actualResults = testReadingFrame.getCodonCounts();  "<AssertPlaceHolder>"; }
getCodonCounts() { if (this.codonCounts == null || this.codonCounts.isEmpty()) { this.buildCodonMap(codonFrame.getDna()); } return codonCounts; }
[*] target: assertEquals(expectedResults, actualResults)
[-] pred: org. junit. Assert. assertEquals ( expectedResults, actualResults )
************************************
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("[{"b":1},{"b":2}]"));  Iterable<String> nodes = record.generatePaths("/*/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(2)); }
generatePaths(String pattern) { List<String> pointers = Arrays.asList(pattern.split("/"));  return generatePaths(node, pointers.subList(1, pointers.size()), ""); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
************************************
[+] input: 피드백_생성() { AuthInfo authInfo = new AuthInfo(1L, List.of(Role.USER));  FeedbackRequest request = new FeedbackRequest("피드백 본문", 1); Long useerId = 1L;  UserDetailResponse user = new UserDetailResponse( 1L, "테스트", "test@gmail.com", "aslkdjalsdj", 1 );  Feedback feedback = Feedback.builder() .content("피드백 본문") .score(Score.ONE_STAR) .userId(1L) .build();  Mockito.when(userService.findById(authInfo.userId())) .thenReturn(user);  Mockito.when(feedbackService.create(request, useerId)) .thenReturn(feedback);  FeedbackResponse expected = new FeedbackResponse(feedback, user);  FeedbackResponse actual = feedbackFacade.create(request, authInfo);  "<AssertPlaceHolder>"; }
create(FeedbackRequest request, AuthInfo info) { var user = userService.findById(info.userId());  var feedback = feedbackService.create(request, info.userId());  var feedbackResponse = new FeedbackResponse(feedback, user);  var response = new SlackCruiserResponse.FeedbackStaticsResponse(feedbackResponse);  cruiser.send(new CruiserRequest(response.message()));  return feedbackResponse; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testCheckWhenSameDeptId() { SingleDeptDataPermissionChecker checker = new SingleDeptDataPermissionChecker(deptService); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(1L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
check(SystemLoginUser loginUser, DataCondition condition) { if (condition == null || loginUser == null) { return false; }  if (loginUser.getDeptId() == null || condition.getTargetDeptId() == null) { return false; }  Long currentDeptId = loginUser.getDeptId(); Long targetDeptId = condition.getTargetDeptId();  return Objects.equals(currentDeptId, targetDeptId); }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
************************************
[+] input: parse_ShouldParseTextAndReturnAsInstant() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); Instant result = codec.parse(valueAsString); Assertions."<AssertPlaceHolder>"; }
parse(String value) { return Instant.ofEpochMilli(Long.parseLong(value)); }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
************************************
[+] input: testRemoveLast2() { deque.addFirst(1); deque.addFirst(2); assertEquals(Integer.valueOf(1), deque.removeLast()); assertEquals(Integer.valueOf(2), deque.get(0)); assertEquals(Integer.valueOf(2), deque.removeLast()); deque.removeLast(); assertNull(deque.removeLast()); "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(0, deque.size())
[-] pred: org. junit. Assert. assertEquals ( 0, deque. size() )
************************************
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreDataParentNode1() { when(nodeList.size()).thenReturn(2); DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(0)).thenReturn(node2);  JsProcessorNode node1 = mock(JsProcessorNode.class); when(nodeList.get(1)).thenReturn(node1); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(1)).get(1); verify(node2, times(0)).getDatabaseType(); }
getTaskDtoIsomorphism(List<Node> nodes) { if (null == nodes || nodes.size() != 2) { return false; } Node node1 = nodes.get(0); if (!(node1 instanceof DataParentNode)) return false; Node node2 = nodes.get(1); if (!(node2 instanceof DataParentNode)) return false; DataParentNode dataParentNode1 = (DataParentNode)node1; DataParentNode dataParentNode2 = (DataParentNode)node2; String databaseType = String.valueOf(dataParentNode1.getDatabaseType()); return databaseType.equals(dataParentNode2.getDatabaseType()); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
************************************
[+] input: topBit() { final int i = Integer.MAX_VALUE - 1; final int ret = set.previousClearBit(i);  "<AssertPlaceHolder>"; }
previousClearBit(int fromIndex);  // ------------------------------------------------------------------------ // bulk operations // ------------------------------------------------------------------------  /** * Returns {@code true}
[*] target: assertEquals(i, ret)
[-] pred: org. junit. Assert. assertEquals ( i, ret )
************************************
************************************
[+] input: of() { GenericTypeConstructor expected = new GenericTypeConstructor(T); GenericTypeConstructor toVerify = GenericTypeConstructor.of(T);  "<AssertPlaceHolder>"; }
of(TypeParameterName name) { return new GenericTypeConstructor(name); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: banksPass() { Bank[] bank = BrasilAPI.banks(); "<AssertPlaceHolder>"; }
banks() { Bank[] obj = (Bank[]) api(Bank[].class, "banks/v1", ""); return obj != null ? (Bank[]) obj.clone() : null; }
[*] target: assertNotNull(bank)
[-] pred: org. junit. Assert. assertNotNull ( bank )
************************************
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "10"; Integer value = Integer.valueOf(valueAsString); ByteBuffer byteBuffer = TypeCodecs.INT.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { Integer intValue = TypeCodecs.INT.decode(bytes, protocolVersion); return intValue.toString(); }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
************************************
[+] input: apply() { Type expected = STRING_TYPE; Type toVerify = new PlaceholderTypeConstructor().apply(STRING_TYPE);  "<AssertPlaceHolder>"; }
apply(Type toApplyTo) { return toApplyTo; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: format_ShouldFormatInstantValueAsText() { String valueAsString = "1681333035000"; Instant value = Instant.ofEpochMilli(Long.parseLong(valueAsString)); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
format(Instant value) { return String.valueOf(value.toEpochMilli()); }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
************************************
[+] input: testShouldTriggerCronBasedSnapshot_NoNextValidTime() { String cronExpressionString = "0 0 0 29 2 ? 1999"; // An impossible time (Feb 29, 1999 was not a leap year) CronExpression cronExpression = SnapshotUtils.interpretAsCron(cronExpressionString).get();  Instant now = Instant.now(); Instant lastTrigger = now.minus(Duration.ofDays(365));  boolean result = SnapshotUtils.shouldTriggerCronBasedSnapshot( CHECKPOINT, cronExpression, lastTrigger, now);  "<AssertPlaceHolder>"; }
shouldTriggerCronBasedSnapshot( SnapshotType snapshotType, CronExpression cronExpression, Instant lastTriggerDateInstant, Instant nowInstant) { Date now = Date.from(nowInstant); Date lastTrigger = Date.from(lastTriggerDateInstant);  Date nextValidTimeAfterLastTrigger = cronExpression.getNextValidTimeAfter(lastTrigger);  if (nextValidTimeAfterLastTrigger != null && nextValidTimeAfterLastTrigger.before(now)) { LOG.info( "Triggering new automatic {} based on cron schedule '{}' due at {}", snapshotType.toString().toLowerCase(), cronExpression.toString(), nextValidTimeAfterLastTrigger); return true; } else { return false; } }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: testHorizontalLayout() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.HORIZONTAL); builder.addElements(new String[] { "firstName", "lastName", "role" });  String json = builder.build();  "<AssertPlaceHolder>";  logger.info(json);  }
build() {  // close current controllsBuilder.... if (controlsArrayBuilder != null && layoutContext != null) { layoutContext.add("elements", controlsArrayBuilder.build()); }  if (groupArrayBuilder != null) {  // close current layoutContext.... if (layoutsArrayBuilder != null && layoutContext != null) { this.layoutsArrayBuilder.add(layoutContext.build()); }  // close current gourpContext if (groupContext != null) { groupContext.add("elements", layoutsArrayBuilder.build()); groupArrayBuilder.add(groupContext); }  rootLayoutBuilder.add("elements", groupArrayBuilder.build()); }  // write result JsonObject jsonObject = rootLayoutBuilder.build(); String result = null; try (Writer writer = new StringWriter()) { Json.createWriter(writer).write(jsonObject); result = writer.toString(); } catch (IOException e) { result = "{}"; e.printStackTrace(); } return result; }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
************************************
[+] input: testGetLibPathNotURLClassLoader() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(AbstractClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 0, 0); }
getLibPath(String jarName, AtomicReference<String> ato) throws IOException { InputStream pyJarPath = null; ClassLoader classLoader = getCurrentThreadContextClassLoader(); if (classLoader instanceof URLClassLoader) { URL[] urls = ((URLClassLoader) classLoader).getURLs(); for (URL url : urls) { String jarPath = url.getPath(); if (jarPath.contains(jarName)) { pyJarPath = url.openStream(); ato.set(jarPath); break; } } } return pyJarPath; }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
************************************
[+] input: testCheckWhenIsChildOfDept() { DeptTreeDataPermissionChecker checker = new DeptTreeDataPermissionChecker(deptService);  when(deptService.isChildOfTheDept(any(), any())).thenReturn(true); when(loginUser.getDeptId()).thenReturn(1L);  DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
check(SystemLoginUser loginUser, DataCondition condition) { if (condition == null || loginUser == null) { return false; }  if (loginUser.getDeptId() == null || condition.getTargetDeptId() == null) { return false; }  Long currentDeptId = loginUser.getDeptId(); Long targetDeptId = condition.getTargetDeptId();  boolean isContainsTargetDept = deptService.isChildOfTheDept(loginUser.getDeptId(), targetDeptId); boolean isSameDept = Objects.equals(currentDeptId, targetDeptId);  return isContainsTargetDept || isSameDept; }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
************************************
[+] input: testGenerateCommandHostEntity() { // Setup final ClusterServiceCommandHostEntity expectedResult = new ClusterServiceCommandHostEntity(); expectedResult.setCommandHostId("commandHostId"); expectedResult.setHostname("hostname"); expectedResult.setCommandState(CommandState.WAIT); expectedResult.setCommandStateCode(0); expectedResult.setCommandProgress(0); expectedResult.setCommandId("commandId"); expectedResult.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime());  // Run the test final ClusterServiceCommandHostEntity result = ProcessUtils.generateCommandHostEntity("commandId", "hostname");  // Verify the results "<AssertPlaceHolder>"; }
generateCommandHostEntity(String commandId, String hostname) { ClusterServiceCommandHostEntity commandHost = new ClusterServiceCommandHostEntity(); String commandHostId = IdUtil.simpleUUID(); commandHost.setCommandHostId(commandHostId); commandHost.setCommandId(commandId); commandHost.setHostname(hostname); commandHost.setCommandState(CommandState.RUNNING); commandHost.setCommandProgress(0); commandHost.setCreateTime(new Date());  return commandHost; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testGetTaskDtoIsomorphismNullNodeList() { when(nodeList.size()).thenReturn(0); boolean isomorphism = dag.getTaskDtoIsomorphism(null); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(0)).size(); verify(nodeList, times(0)).get(0); verify(nodeList, times(0)).get(1); }
getTaskDtoIsomorphism(List<Node> nodes) { if (null == nodes || nodes.size() != 2) { return false; } Node node1 = nodes.get(0); if (!(node1 instanceof DataParentNode)) return false; Node node2 = nodes.get(1); if (!(node2 instanceof DataParentNode)) return false; DataParentNode dataParentNode1 = (DataParentNode)node1; DataParentNode dataParentNode2 = (DataParentNode)node2; String databaseType = String.valueOf(dataParentNode1.getDatabaseType()); return databaseType.equals(dataParentNode2.getDatabaseType()); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
************************************
[+] input: shouldAddRowDoubleClickListener() { table.onItemDoubleClick(event -> { });  List<EventListener<TableItemDoubleClickEvent>> listeners = table.getEventListeners(TableItemDoubleClickEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemDoubleClickEvent>); }
onItemDoubleClick( EventListener<TableItemDoubleClickEvent<T>> listener) { return addItemDoubleClickListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: apply() { GenericType expected = new GenericType(T); GenericType toVerify = new GenericTypeConstructor(T).apply(STRING_TYPE);  "<AssertPlaceHolder>"; }
apply(Type toApplyTo) { return Type.generic(name); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: asTypeConstructorWithPlaceholderForGivenNeedleThatMatches() { TypeConstructor expected = new PlaceholderTypeConstructor(); TypeConstructor toVerify = new GenericType(T).asTypeConstructorWithPlaceholderFor(T);  "<AssertPlaceHolder>"; }
asTypeConstructorWithPlaceholderFor(TypeParameterName needle) { if (Objects.equals(name, needle)) { return TypeConstructor.placeholder(); } else { return TypeConstructor.generic(name); } }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testReconstructsDictionaryWithValueInsertedWithDeleteTwoTerms() { String term = "foo"; String term2 = "foo2";  ChainRetrieval chainRetrieval = new ChainRetrieval() { @Override public List<DictionaryEntry> retrieveChain() { return Arrays.asList( new DictionaryEntry("A", DictionaryEntryType.INSERT), new DictionaryEntry("B", DictionaryEntryType.INSERT), new DictionaryEntry("B", DictionaryEntryType.DELETE), new DictionaryEntry(CausalOrderingConsistentMaskingProvider.privateHash(term), DictionaryEntryType.VALUE), new DictionaryEntry("C", DictionaryEntryType.INSERT), new DictionaryEntry("D", DictionaryEntryType.INSERT), new DictionaryEntry(CausalOrderingConsistentMaskingProvider.privateHash(term2), DictionaryEntryType.VALUE) ); }  @Override public void append(String hashedTerm) throws Exception {  }  @Override public void shutDown() {  } };  List<DictionaryEntry> dictionaryEntries = CausalOrderingConsistentMaskingProvider.reconstructDictionary(chainRetrieval, term);  assertEquals(1, dictionaryEntries.size()); assertEquals("A", dictionaryEntries.get(0).getValue());  dictionaryEntries = CausalOrderingConsistentMaskingProvider.reconstructDictionary(chainRetrieval, term2);  "<AssertPlaceHolder>"; assertEquals("A", dictionaryEntries.get(0).getValue()); assertEquals("C", dictionaryEntries.get(1).getValue()); assertEquals("D", dictionaryEntries.get(2).getValue()); }
reconstructDictionary(ChainRetrieval chainRetrieval, String term) { List<DictionaryEntry> entries = new ArrayList<>(); Set<String> entriesToRemove = new HashSet<>();  String hashedTerm = privateHash(term);  List<DictionaryEntry> chainEntries; try { chainEntries = chainRetrieval.retrieveChain(); } catch (IOException e) { throw new RuntimeException("unable to retrieve entries from chain"); }  boolean valueFound = false;  for (DictionaryEntry entry : chainEntries) { if (entry.getType() == DictionaryEntryType.VALUE && entry.getValue().equals(hashedTerm)) { valueFound = true; break; }  if (entry.getType() == DictionaryEntryType.INSERT) { entries.add(entry); } else if (entry.getType() == DictionaryEntryType.DELETE) { entriesToRemove.add(entry.getValue()); } }   if (!valueFound) { try { chainRetrieval.append(hashedTerm); } catch (Exception e) { throw new RuntimeException("unable to append entry to chain"); } }  if (!entriesToRemove.isEmpty()) { int totalEntries = entries.size();  for (int i = (totalEntries - 1); i >= 0; i--) { DictionaryEntry entry = entries.get(i); if (entry.getType() != DictionaryEntryType.INSERT) { continue; }  if (entriesToRemove.contains(entry.getValue())) { entries.remove(i); } } }  return entries;  }
[*] target: assertEquals(3, dictionaryEntries.size())
[-] pred: org. junit. Assert. assertEquals ( 3, dictionaryEntries. size ( ) )
************************************
************************************
[+] input: getUnknownTypeAsString() { final EditorHelper editorHelper = new EditorHelper();  final String result = editorHelper.getObjectString("unknown-type", true); Assertions."<AssertPlaceHolder>"; }
getObjectString(String type, Object object) { try { final Class<?> klass = parseType(type); return new Gson().toJson(object, klass); } catch (Exception e) { log.warn("Failed to get value: {}, {}", type, object, e); return null; } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: testPseudorandom() {  MaskingConfiguration maskingConfiguration = new DefaultMaskingConfiguration(); maskingConfiguration.setValue("county.mask.pseudorandom", true);  MaskingProvider maskingProvider = new CountyMaskingProvider(maskingConfiguration);  String originalCity = "Italy"; String firstMask = maskingProvider.mask(originalCity);  for(int i = 0; i < 100; i++) { String maskedCity = maskingProvider.mask(originalCity); "<AssertPlaceHolder>"; }  }
mask(String identifier) {  if (this.getPseudorandom) { return countyManager.getPseudorandom(identifier); }  County county = countyManager.getKey(identifier); if (county == null) { return countyManager.getRandomKey(); }  return countyManager.getRandomKey(county.getNameCountryCode()); }
[*] target: assertEquals(firstMask, maskedCity)
[-] pred: org. junit. Assert. assertEquals ( firstMask, maskedCity )
************************************
************************************
[+] input: testFilterConvergeNoConverge() {  when(convergeCache.get(CommonConstants.CACHE_ALERT_CONVERGE)).thenReturn(null); when(alertConvergeDao.findAll()).thenReturn(Collections.emptyList());  boolean result = alarmConvergeReduce.filterConverge(testAlert);  "<AssertPlaceHolder>"; verify(convergeCache).get(CommonConstants.CACHE_ALERT_CONVERGE); verify(alertConvergeDao).findAll(); verify(convergeCache).put(CommonConstants.CACHE_ALERT_CONVERGE, Collections.emptyList()); }
filterConverge(Alert currentAlert) { // ignore monitor status auto recover notice if ((currentAlert.getTags() != null && currentAlert.getTags().containsKey(CommonConstants.IGNORE)) || currentAlert.getStatus() == CommonConstants.ALERT_STATUS_CODE_RESTORED) { // restored alert boolean isHasIgnore = false; Map<String, String> tags = currentAlert.getTags(); if (Objects.requireNonNull(tags).containsKey(CommonConstants.IGNORE)) { isHasIgnore = true; tags.remove(CommonConstants.IGNORE); } int alertHash = Objects.hash(CommonConstants.ALERT_PRIORITY_CODE_CRITICAL) + Arrays.hashCode(tags.keySet().toArray(new String[0])) + Arrays.hashCode(tags.values().toArray(new String[0])); converageAlertMap.remove(alertHash); alertHash = Objects.hash(CommonConstants.ALERT_PRIORITY_CODE_EMERGENCY) + Arrays.hashCode(tags.keySet().toArray(new String[0])) + Arrays.hashCode(tags.values().toArray(new String[0])); converageAlertMap.remove(alertHash); alertHash = Objects.hash(CommonConstants.ALERT_PRIORITY_CODE_WARNING) + Arrays.hashCode(tags.keySet().toArray(new String[0])) + Arrays.hashCode(tags.values().toArray(new String[0])); converageAlertMap.remove(alertHash); if (isHasIgnore) { tags.put(CommonConstants.IGNORE, CommonConstants.IGNORE); } return true; }  CommonCacheService<String, Object> convergeCache = CacheFactory.getAlertConvergeCache(); List<AlertConverge> alertConvergeList = (List<AlertConverge>) convergeCache.get(CommonConstants.CACHE_ALERT_CONVERGE); if (alertConvergeList == null) { alertConvergeList = alertConvergeDao.findAll(); // matchAll is in the last alertConvergeList.sort((item1, item2) -> { if (item1.isMatchAll()) { return 1; } else if (item2.isMatchAll()) { return -1; } else { return 0; } }); convergeCache.put(CommonConstants.CACHE_ALERT_CONVERGE, alertConvergeList); } for (AlertConverge alertConverge : alertConvergeList) { if (!alertConverge.isEnable()) { continue; } boolean match = alertConverge.isMatchAll(); if (!match) { List<TagItem> tags = alertConverge.getTags(); if (currentAlert.getTags() != null && !currentAlert.getTags().isEmpty()) { Map<String, String> alertTagMap = currentAlert.getTags(); match = tags.stream().anyMatch(item -> { if (alertTagMap.containsKey(item.getName())) { String tagValue = alertTagMap.get(item.getName()); if (tagValue == null && item.getValue() == null) { return true; } else { return tagValue != null && tagValue.equals(item.getValue()); } } else { return false; } }); } else { match = true; } if (match && alertConverge.getPriorities() != null && !alertConverge.getPriorities().isEmpty()) { match = alertConverge.getPriorities().stream().anyMatch(item -> item != null && item == currentAlert.getPriority()); } } if (match) { long evalInterval = alertConverge.getEvalInterval() * 1000L; long now = System.currentTimeMillis(); if (evalInterval <= 0) { return true; } int alertHash = Objects.hash(currentAlert.getPriority()) + Arrays.hashCode(currentAlert.getTags().keySet().toArray(new String[0])) + Arrays.hashCode(currentAlert.getTags().values().toArray(new String[0])); Alert preAlert = converageAlertMap.get(alertHash); if (preAlert == null) { currentAlert.setTimes(1); currentAlert.setFirstAlarmTime(now); currentAlert.setLastAlarmTime(now); converageAlertMap.put(alertHash, currentAlert.clone()); return true; } else { if (now - preAlert.getFirstAlarmTime() < evalInterval) { preAlert.setTimes(preAlert.getTimes() + 1); preAlert.setLastAlarmTime(now); return false; } else { currentAlert.setTimes(preAlert.getTimes()); if (preAlert.getTimes() == 1) { currentAlert.setFirstAlarmTime(now); } else { currentAlert.setFirstAlarmTime(preAlert.getFirstAlarmTime()); } currentAlert.setLastAlarmTime(now); preAlert.setFirstAlarmTime(now); preAlert.setLastAlarmTime(now); preAlert.setTimes(1); return true; } } } } return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testGetClassesInPackage() { final ClassTreeHelper classTreeHelper = new ClassTreeHelper();  final FilterableTreeItem<ClassTreeNode> root = buildClassTree();  final List<LoadedClass> classesInPackage = classTreeHelper.getClassesInPackage(root, "org", null);  Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(classesInPackage.stream().allMatch(c -> c.getName().startsWith("org"))); }
getClassesInPackage(FilterableTreeItem<ClassTreeNode> classesTreeRoot, String fullPackageName, ClassLoaderDescriptor packageClassLoader) { return classesTreeRoot.streamVisible() .filter(p -> p.getType() == ClassTreeNode.Type.CLASS) .map(ClassTreeNode::getLoadedClass) .filter(c -> c.getName().startsWith(fullPackageName)) .filter(c -> (packageClassLoader == null) || packageClassLoader.equals(c.getClassLoaderDescriptor())) .collect(Collectors.toList()); }
[*] target: assertEquals(2, classesInPackage.size())
[-] pred: org. junit. Assert. assertEquals ( 2, classesInPackage. size ( ) )
************************************
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { UserId id1 = new UserId("bob@example.com"); UserId id2 = new UserId("bob@example.com");  assertTrue(id1.equals(id2)); assertEquals(id1.hashCode(), id2.hashCode()); "<AssertPlaceHolder>"; }
compareTo(@NotNull UserId o) { return this.email.compareTo(o.email); }
[*] target: assertEquals(0, id1.compareTo(id2))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id2 ) )
************************************
************************************
[+] input: testResolveMatrixParameters() { String url = "https://www.google.com.hk/search;q=java;oq=java;sourceid=chrome;es_sm=122;ie=UTF-8"; Map<String, List<String>> parametersMap = resolveMatrixParameters(url); Map<String, List<String>> expectedParametersMap = new LinkedHashMap<>(); expectedParametersMap.put("q", Arrays.asList("java")); expectedParametersMap.put("oq", Arrays.asList("java")); expectedParametersMap.put("sourceid", Arrays.asList("chrome")); expectedParametersMap.put("es_sm", Arrays.asList("122")); expectedParametersMap.put("ie", Arrays.asList("UTF-8"));  assertEquals(expectedParametersMap, parametersMap);  url = "https://www.google.com.hk/search"; parametersMap = resolveMatrixParameters(url); expectedParametersMap = emptyMap(); assertEquals(expectedParametersMap, parametersMap);  url = "https://www.google.com.hk/search;"; parametersMap = resolveMatrixParameters(url); expectedParametersMap = emptyMap(); "<AssertPlaceHolder>"; }
resolveMatrixParameters(String url) { int startIndex = url.indexOf(SEMICOLON_CHAR); if (startIndex == -1) { // The matrix separator ";" was not found return emptyMap(); }  int endIndex = url.indexOf(QUERY_STRING_CHAR); if (endIndex == -1) { // The query string separator "?" was not found endIndex = url.indexOf(SHARP_CHAR); } if (endIndex == -1) { // The fragment separator "#" was not found endIndex = url.length(); }  String matrixString = url.substring(startIndex, endIndex);  return resolveParameters(matrixString, SEMICOLON_CHAR); }
[*] target: assertEquals(expectedParametersMap, parametersMap)
[-] pred: org. junit. Assert. assertEquals ( expectedParametersMap, parametersMap )
************************************
************************************
[+] input: test() { //when this.registerPage.insertEmailToRegister();  //then String expected = "camila002@email.com"; String actual = this.registerPage.getEmailNewAccount(); Assertions."<AssertPlaceHolder>"; }
getEmailNewAccount() { super.waitVisibilityOfElementLocated(alertAdditionalInformationLocator); return super.getTextByAttribute(this.emailLocator, "value"); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test() { SortedMap<PartitionRange, List<ServerNode>> sortedMap = new TreeMap<>(); for (int i = 0; i < 9; i = i + 3) { PartitionRange range = new PartitionRange(i, i + 2); List<ServerNode> nodes = Collections.singletonList( new ServerNode( String.valueOf(i), "127.0.0." + i, i / 3, 0, 0, 0, 0, Sets.newHashSet("test"))); sortedMap.put(range, nodes); }  PartitionRangeAssignment partitionRangeAssignment = new PartitionRangeAssignment(sortedMap); List<RssProtos.PartitionRangeAssignment> res = partitionRangeAssignment.convertToGrpcProto(); assertEquals(3, res.size());  for (int i = 0; i < 3; ++i) { RssProtos.PartitionRangeAssignment pra = res.get(i); assertEquals(1, pra.getServerCount()); assertEquals(i, pra.getServer(0).getPort()); assertEquals(3 * i, pra.getStartPartition()); assertEquals(3 * i + 2, pra.getEndPartition()); }  partitionRangeAssignment = new PartitionRangeAssignment(null); res = partitionRangeAssignment.convertToGrpcProto(); "<AssertPlaceHolder>"; }
isEmpty() { return assignments == null || assignments.isEmpty(); }
[*] target: assertTrue(res.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( res. isEmpty() )
************************************
************************************
[+] input: ibgeUfsPass() { IBGEUF[] ibgeUfs = BrasilAPI.ibgeUf(); "<AssertPlaceHolder>"; }
ibgeUf() { IBGEUF[] obj = (IBGEUF[]) api(IBGEUF[].class, "ibge/uf/v1", ""); return obj != null ? (IBGEUF[]) obj.clone() : null; }
[*] target: assertNotNull(ibgeUfs)
[-] pred: org. junit. Assert. assertNotNull ( ibgeUfs )
************************************
************************************
[+] input: decode_ShouldDecodeTextByteBufferAndReturnAsNumber() { String valueAsString = "9223372036854775807"; Long value = Long.valueOf(valueAsString); ByteBuffer byteBuffer = TypeCodecs.TEXT.encode(valueAsString, CqlConversion.PROTOCOL_VERSION);  Long result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { String stringValue = TypeCodecs.TEXT.decode(bytes, protocolVersion); return Long.parseLong(stringValue); }
[*] target: assertEquals(value, result)
[-] pred: org. junit. Assert. assertEquals ( value, result )
************************************
************************************
[+] input: format_ShouldFormatNumberValueAsText() { Double value = 21474836470.7; String expected = TypeCodecs.DOUBLE.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
format(Double value) { return TypeCodecs.DOUBLE.format(value); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testIsAvailableTerm() { //        //given //        given(couponCampaign.getValidTerm()).willReturn(validTerm); //        //LocalDateTime localDateTime = Mockito.mock(new // TypeToken<IssuedCoupon>(){}.getCreatedAt()); //        given(issuedCoupon.getCreatedAt()).willReturn(createdAt); //        //when //        Boolean result = issuedCoupon.isAvailableTerm(); //        //then //        "<AssertPlaceHolder>"; //    }
isAvailableTerm() { return !LocalDateTime.now() .isAfter(this.getCreatedAt().plusDays(this.getCouponCampaign().getValidTerm())); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: givenObjectPath() { String toVerify = toTest() .withObjectPath("this") .withObjectPath("property") .withObjectPath("current") .getObjectPathOrTypeGenerator() .generate();  String expected = "this.property.current";  "<AssertPlaceHolder>"; }
generate() { Optional<String> optionalObjectPathAsString = optionalObjectPathGenerator.map(ObjectPathGenerator::generate); Optional<String> optionalConcreteTypeAsString = optionalConcreteType.map(FullyQualifiedName::raw); Optional<String> optionalGenericTypeAsString = optionalGenericType.map(TypeParameterName::raw); return optionalObjectPathAsString .map(Optional::of).orElse(optionalConcreteTypeAsString) .map(Optional::of).orElse(optionalGenericTypeAsString) .orElseThrow(NullPointerException::new); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: setOneBelow() { set.set(1); final int ret = set.previousSetBit(2);  "<AssertPlaceHolder>"; }
previousSetBit(int fromIndex);  /** * Returns the index of the nearest bit that is set to {@code false}
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
************************************
[+] input: CleanRoomsException { final ClientSettings expectedClientSettings = ClientSettings.builder() .allowCleartext(true) .allowDuplicates(true) .allowJoinsOnColumnsWithDifferentNames(false) .preserveNulls(false) .build(); final DataEncryptionMetadata metadata = DataEncryptionMetadata.builder() .allowCleartext(expectedClientSettings.isAllowCleartext()) .allowDuplicates(expectedClientSettings.isAllowDuplicates()) .allowJoinsOnColumnsWithDifferentNames(expectedClientSettings.isAllowJoinsOnColumnsWithDifferentNames()) .preserveNulls(expectedClientSettings.isPreserveNulls()) .build(); final Collaboration collaboration = Collaboration.builder() .dataEncryptionMetadata(metadata) .build(); final GetCollaborationResponse response = GetCollaborationResponse.builder() .collaboration(collaboration) .build(); final var client = mock(CleanRoomsClient.class); when(client.getCollaboration(any(GetCollaborationRequest.class))).thenReturn(response);  final var dao = spy(CleanRoomsDao.class); when(dao.getClient()).thenReturn(client); final var actualClientSettings = dao.getCollaborationDataEncryptionMetadata(GeneralTestUtility.EXAMPLE_SALT .toString()); "<AssertPlaceHolder>"; }
getCollaborationDataEncryptionMetadata(final String collaborationId) { final AwsRequestOverrideConfiguration overrideConfiguration = AwsRequestOverrideConfiguration.builder() .addApiName(apiName) .build(); final GetCollaborationRequest request = GetCollaborationRequest.builder() .collaborationIdentifier(collaborationId) .overrideConfiguration(overrideConfiguration) .build(); final String baseError = "Unable to retrieve the collaboration configuration for CollaborationID: `" + collaborationId + "`."; final String endError = "Please verify that the CollaborationID is correct and try again."; final GetCollaborationResponse response; try { response = getClient().getCollaboration(request); } catch (ResourceNotFoundException e) { throw new C3rRuntimeException(baseError + " No collaboration found. " + endError, e); } catch (AccessDeniedException e) { throw new C3rRuntimeException(baseError + " Access denied. " + endError, e); } catch (ThrottlingException e) { throw new C3rRuntimeException(baseError + " Throttling. Please wait a moment before trying again.", e); } catch (ValidationException e) { throw new C3rRuntimeException(baseError + " CollaborationID could not be validated. " + endError, e); } catch (SdkException e) { throw new C3rRuntimeException(baseError + " Unknown error: " + e.getMessage(), e); } final DataEncryptionMetadata metadata = response.collaboration().dataEncryptionMetadata(); if (metadata == null) { throw new C3rRuntimeException( "The collaboration with CollaborationID `" + collaborationId + "` was not created for use with " + "C3R! C3R must be enabled on the collaboration when it's created in order to continue."); } final var settings = ClientSettings.builder() .allowJoinsOnColumnsWithDifferentNames(metadata.allowJoinsOnColumnsWithDifferentNames()) .allowCleartext(metadata.allowCleartext()) .allowDuplicates(metadata.allowDuplicates()) .preserveNulls(metadata.preserveNulls()) .build();  final Function<Boolean, String> boolToYesOrNo = (b) -> b ? "yes" : "no";  log.debug("Cryptographic computing parameters found for collaboration {}:", collaborationId); log.debug("  * Allow cleartext columns = {}", boolToYesOrNo.apply(settings.isAllowCleartext())); log.debug("  * Allow duplicates = {}", boolToYesOrNo.apply(settings.isAllowDuplicates())); log.debug("  * Allow JOIN of columns with different names = {}", boolToYesOrNo.apply(settings.isAllowJoinsOnColumnsWithDifferentNames())); log.debug("  * Preserve NULL values = {}", boolToYesOrNo.apply(settings.isPreserveNulls()));  return settings; }
[*] target: assertEquals(expectedClientSettings, actualClientSettings)
[-] pred: org. junit. Assert. assertEquals ( expectedClientSettings, actualClientSettings )
************************************
************************************
[+] input: shouldLetterIsCorGReturnFalse() { boolean actual = Properties.letterIsCorG('b'); "<AssertPlaceHolder>"; }
letterIsCorG(char aLetter) { return (aLetter == 'c') || (aLetter == 'g'); }
[*] target: assertFalse(actual)
[-] pred: org. junit. Assert. assertFalse ( actual )
************************************
************************************
[+] input: shouldIsRandomDNAReturnTrue() { boolean actual = Properties.isRandomDNA(dnaString); "<AssertPlaceHolder>"; }
isRandomDNA(final String dna) { long[] nucleotideCount = countBasePairs(dna); int[] percentages = Arrays.stream(nucleotideCount).mapToInt(c -> nucleotidePercentage(c, dna)).toArray();  int a = percentages[BasePairIndex.ADENINE]; int t = percentages[BasePairIndex.THYMINE]; int g = percentages[BasePairIndex.GUANINE]; int c = percentages[BasePairIndex.CYTOSINE];  IntStream diffs = IntStream.of( Math.abs(a - t), Math.abs(a - g), Math.abs(a - c), Math.abs(t - g), Math.abs(t - c), Math.abs(g - c));  return diffs.allMatch(diff -> diff <= 2); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: testEmpty() { when(webHookController.failed("webhook.reOpen.failed")).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(true); when(webHookService.reOpen(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.reOpenOne("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.reOpenOne("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).failed("webhook.reOpen.failed"); verify(webHookService).reOpen(any(String[].class), any(UserDetail.class)); }
reOpenOne(@PathVariable(value = "id") String hookId) { List<WebHookInfoVo> closed = webHookService.reOpen(new String[]{hookId}, getLoginUser()); if (closed.isEmpty()) { return failed("webhook.reOpen.failed"); } return success(closed.get(0)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
************************************
[+] input: testFilterConverge_IgnoreTag() {  testAlert.getTags().put(CommonConstants.IGNORE, "true"); boolean result = alarmConvergeReduce.filterConverge(testAlert);  "<AssertPlaceHolder>"; }
filterConverge(Alert currentAlert) { // ignore monitor status auto recover notice if ((currentAlert.getTags() != null && currentAlert.getTags().containsKey(CommonConstants.IGNORE)) || currentAlert.getStatus() == CommonConstants.ALERT_STATUS_CODE_RESTORED) { // restored alert boolean isHasIgnore = false; Map<String, String> tags = currentAlert.getTags(); if (Objects.requireNonNull(tags).containsKey(CommonConstants.IGNORE)) { isHasIgnore = true; tags.remove(CommonConstants.IGNORE); } int alertHash = Objects.hash(CommonConstants.ALERT_PRIORITY_CODE_CRITICAL) + Arrays.hashCode(tags.keySet().toArray(new String[0])) + Arrays.hashCode(tags.values().toArray(new String[0])); converageAlertMap.remove(alertHash); alertHash = Objects.hash(CommonConstants.ALERT_PRIORITY_CODE_EMERGENCY) + Arrays.hashCode(tags.keySet().toArray(new String[0])) + Arrays.hashCode(tags.values().toArray(new String[0])); converageAlertMap.remove(alertHash); alertHash = Objects.hash(CommonConstants.ALERT_PRIORITY_CODE_WARNING) + Arrays.hashCode(tags.keySet().toArray(new String[0])) + Arrays.hashCode(tags.values().toArray(new String[0])); converageAlertMap.remove(alertHash); if (isHasIgnore) { tags.put(CommonConstants.IGNORE, CommonConstants.IGNORE); } return true; }  CommonCacheService<String, Object> convergeCache = CacheFactory.getAlertConvergeCache(); List<AlertConverge> alertConvergeList = (List<AlertConverge>) convergeCache.get(CommonConstants.CACHE_ALERT_CONVERGE); if (alertConvergeList == null) { alertConvergeList = alertConvergeDao.findAll(); // matchAll is in the last alertConvergeList.sort((item1, item2) -> { if (item1.isMatchAll()) { return 1; } else if (item2.isMatchAll()) { return -1; } else { return 0; } }); convergeCache.put(CommonConstants.CACHE_ALERT_CONVERGE, alertConvergeList); } for (AlertConverge alertConverge : alertConvergeList) { if (!alertConverge.isEnable()) { continue; } boolean match = alertConverge.isMatchAll(); if (!match) { List<TagItem> tags = alertConverge.getTags(); if (currentAlert.getTags() != null && !currentAlert.getTags().isEmpty()) { Map<String, String> alertTagMap = currentAlert.getTags(); match = tags.stream().anyMatch(item -> { if (alertTagMap.containsKey(item.getName())) { String tagValue = alertTagMap.get(item.getName()); if (tagValue == null && item.getValue() == null) { return true; } else { return tagValue != null && tagValue.equals(item.getValue()); } } else { return false; } }); } else { match = true; } if (match && alertConverge.getPriorities() != null && !alertConverge.getPriorities().isEmpty()) { match = alertConverge.getPriorities().stream().anyMatch(item -> item != null && item == currentAlert.getPriority()); } } if (match) { long evalInterval = alertConverge.getEvalInterval() * 1000L; long now = System.currentTimeMillis(); if (evalInterval <= 0) { return true; } int alertHash = Objects.hash(currentAlert.getPriority()) + Arrays.hashCode(currentAlert.getTags().keySet().toArray(new String[0])) + Arrays.hashCode(currentAlert.getTags().values().toArray(new String[0])); Alert preAlert = converageAlertMap.get(alertHash); if (preAlert == null) { currentAlert.setTimes(1); currentAlert.setFirstAlarmTime(now); currentAlert.setLastAlarmTime(now); converageAlertMap.put(alertHash, currentAlert.clone()); return true; } else { if (now - preAlert.getFirstAlarmTime() < evalInterval) { preAlert.setTimes(preAlert.getTimes() + 1); preAlert.setLastAlarmTime(now); return false; } else { currentAlert.setTimes(preAlert.getTimes()); if (preAlert.getTimes() == 1) { currentAlert.setFirstAlarmTime(now); } else { currentAlert.setFirstAlarmTime(preAlert.getFirstAlarmTime()); } currentAlert.setLastAlarmTime(now); preAlert.setFirstAlarmTime(now); preAlert.setLastAlarmTime(now); preAlert.setTimes(1); return true; } } } } return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: shouldMaskNumber() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge); float input = 12345; String mask = "##,###,###.00"; String expected = "12,345.00";  when(bridge.maskNumber(input, mask)).thenReturn(expected);  String result = MaskDecorator.forNumber(input, mask);  "<AssertPlaceHolder>"; } }
forNumber(double input, String mask) { Objects.requireNonNull(mask, MASK_CANNOT_BE_NULL);  Environment env = Environment.getCurrent(); return env.getWebforjHelper().maskNumber(input, mask); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testInsert() { User user = new User(); user.setName("张三"); user.setAge(18); user.setCreateTime(LocalDateTime.now().plusYears(-18)); int insert = commonDao.insert(user); Assertions."<AssertPlaceHolder>"; }
insert(T params);  /** * 删除一个对象 * * @param id  主键 * @param cls 指定一个实体类型 * @return delete line count */ @DeleteProvider(type = SqlBuilder.class, method = "delete") <T> int delete(@Param("id") T id, Class<?> cls);  /** * 修改对象，必须有主键 * * @param params param * @param <T> type * @return update line count */ @UpdateProvider(type = SqlBuilder.class, method = "update") <T> int update(T params);  /** * 根据主键选择一个对象 * * @param id  关键字 * @param cls 指定一个实体 * @return result */ @SelectProvider(type = SqlBuilder.class, method = "select") <T> Map<?,?> select(@Param("id") T id, Class<?> cls);  /** * 查询列表条数跟 selectList 配对使用 * * @param params param * @param <T> param type * @return count */ @SelectProvider(type = SqlBuilder.class, method = "selectCount") <T> long selectCount(T params);  /** * 查询列表 * * @param params param * @return result */ @SelectProvider(type = SqlBuilder.class, method = "selectList") <T> List<Map<?,?>> selectList(T params);   /** * 自定义查询列表结果 * * @param params param * @return result */ @Select(" ${selfSQL}
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
************************************
[+] input: givenInstanceMethodAndExplicitTypeArguments() { String toVerify = methodCall() .withObjectPath("objects") .withTypeArguments(CHAR_SEQUENCE) .withMethodName("map") .withArguments("java.lang.Object::toString") .generate();  String expected = "objects.<java.lang.CharSequence>map(java.lang.Object::toString)";  "<AssertPlaceHolder>"; }
generate() { return objectPathOrTypeGenerator.generate() + PERIOD + generateOptionalTypeArguments() + methodName + arguments.stream().collect(joining(SEPARATOR, OPEN_PARENTHESIS, CLOSE_PARENTHESIS)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: getTopicsEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(handleDbRequestsJdbc.getTopicsCountByEnv(TestConstants.TENANT_ID)) .thenReturn(TestConstants.TOPICS_COUNT_STRING_BY_ENV_ID_INT); Mockito.when(commonUtilsService.getEnvsFromUserId(any())) .thenReturn(Set.of(TestConstants.ENV_ID)); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsEnvOverview( TestConstants.TENANT_ID, Mockito.mock(PermissionType.class));  Assertions."<AssertPlaceHolder>"; }
getTopicsEnvOverview(Integer tenantId, PermissionType permissionType) { List<CommonUtilsService.ChartsOverviewItem<String, Integer>> teamCountList = manageDatabase.getHandleDbRequests().getTopicsCountByEnv(tenantId);  // tenant filtering try { final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(getCurrentUserName()); if (teamCountList != null) { teamCountList = teamCountList.stream() .filter(mapObj -> allowedEnvIdSet.contains(mapObj.getxValue())) .collect(Collectors.toList()); teamCountList = teamCountList.stream() .map(item -> item.transformX(this::getEnvName)) .collect(Collectors.toList()); } } catch (Exception e) { log.error("No environments/clusters found.", e); teamCountList = new ArrayList<>(); }  return commonUtilsService.getChartsJsOverview( teamCountList, ANALYTICS_104, MapConstants.CLUSTER_KEY, "Clusters", "Topics", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: SQLException { RdsMultiAzDbClusterListProvider.clearAll();  RdsMultiAzDbClusterListProvider provider1 = Mockito.spy( getRdsMazDbClusterHostListProvider(mockHostListProviderService, "jdbc:something://instance-a-2.xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doAnswer(a -> topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsMultiAzDbClusterListProvider.topologyCache.size());  List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  // RdsMultiAzDbClusterListProvider.logCache();  RdsMultiAzDbClusterListProvider provider2 = Mockito.spy( getRdsMazDbClusterHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  doAnswer(a -> topologyClusterA).when(provider2).queryForTopology(any(Connection.class));  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertNotEquals(provider1.clusterId, provider2.clusterId); assertFalse(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId); assertEquals(2, RdsMultiAzDbClusterListProvider.topologyCache.size()); assertEquals("cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com", RdsMultiAzDbClusterListProvider.suggestedPrimaryClusterIdCache.get(provider1.clusterId));  // RdsMultiAzDbClusterListProvider.logCache();  topologyProvider1 = provider1.forceRefresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1); assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  // RdsMultiAzDbClusterListProvider.logCache(); }
queryForTopology(final Connection conn) throws SQLException { int networkTimeout = -1; try { networkTimeout = conn.getNetworkTimeout(); // The topology query is not monitored by the EFM plugin, so it needs a socket timeout if (networkTimeout == 0) { conn.setNetworkTimeout(networkTimeoutExecutor, defaultTopologyQueryTimeoutMs); } } catch (SQLException e) { LOGGER.warning(() -> Messages.get("RdsHostListProvider.errorGettingNetworkTimeout", new Object[] {e.getMessage()})); }  try { final Statement stmt = conn.createStatement(); String writerNodeId = processWriterNodeId(stmt.executeQuery(this.fetchWriterNodeQuery)); if (writerNodeId == null) { final ResultSet nodeIdResultSet = stmt.executeQuery(this.nodeIdQuery); while (nodeIdResultSet.next()) { writerNodeId = nodeIdResultSet.getString(1); } } final ResultSet topologyResultSet = stmt.executeQuery(this.topologyQuery); return processTopologyQueryResults(topologyResultSet, writerNodeId); } catch (final SQLSyntaxErrorException e) { throw new SQLException(Messages.get("RdsHostListProvider.invalidQuery"), e); } finally { if (networkTimeout == 0 && !conn.isClosed()) { conn.setNetworkTimeout(networkTimeoutExecutor, networkTimeout); } } }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
************************************
[+] input: givenStaticMethod() { String toVerify = methodReference() .withType(STRING) .withMethodName("toString") .generate();  String expected = "java.lang.String::toString";  "<AssertPlaceHolder>"; }
generate() { return objectPathOrTypeGenerator.generate() + DOUBLE_COLON + methodName; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: shouldGetSelectedIndex() { MultipleSelectableComponentMock component = new MultipleSelectableComponentMock(); component.selectIndex(1); Map<String, Object> eventMap = new HashMap<>(); eventMap.put("index", 1); SelectEventMock<MultipleSelectableComponentMock, String> event = new SelectEventMock<>(component, eventMap);  "<AssertPlaceHolder>"; }
getSelectedIndex() { Object selectedIndex = getEventMap().get("index"); if (selectedIndex == null) { return -1; }  return Integer.parseInt(String.valueOf(selectedIndex)); }
[*] target: assertEquals(1, event.getSelectedIndex())
[-] pred: org. junit. Assert. assertEquals ( 1, event. getSelectedIndex() )
************************************
************************************
[+] input: getInstance() { SparkConf sc = new SparkConf(); PropertyHelper helper = PropertyHelper.getInstance(sc); "<AssertPlaceHolder>"; }
getInstance(SparkConf sc) { instance = getInstance(); instance.initializeSparkConf(sc); return instance; }
[*] target: assertNotNull(helper)
[-] pred: org. junit. Assert. assertNotNull ( helper )
************************************
************************************
[+] input: readHex() { byte[] bytes = new byte[32]; new Random().nextBytes(bytes); Bean bean = new Bean(); bean.value = bytes;  String str = JSON.toJSONString(bean); String str1 = JSON.toJSONString(bean, JSONWriter.Feature.OptimizedForAscii); "<AssertPlaceHolder>"; assertEquals( str, new String( JSON.toJSONBytes(bean) ) ); String str2 = JSON.toJSONString(bean, JSONWriter.Feature.PrettyFormat); assertArrayEquals( JSON.parseObject(str).getBytes("value"), JSON.parseObject(str2).getBytes("value") );  JSONWriter jsonWriter = JSONWriter.ofUTF8(); jsonWriter.writeAny(bean); assertEquals(str, new String(jsonWriter.getBytes(StandardCharsets.UTF_8))); assertEquals(str, new String(jsonWriter.getBytes(StandardCharsets.US_ASCII))); assertEquals(str.length(), jsonWriter.size());  Bean bean1 = JSON.parseObject(str, Bean.class); assertArrayEquals(bean.value, bean1.value);  Bean bean2 = JSON.parseObject(str.getBytes(), Bean.class); assertArrayEquals(bean.value, bean2.value);  Bean bean3 = JSON.parseObject(str.toCharArray(), Bean.class); assertArrayEquals(bean.value, bean3.value); }
readHex();  public byte[] readBinary() { if (ch == 'x') { return readHex(); }  if (isString()) { String str = readString(); if (str.isEmpty()) { return null; }  if ((context.features & Feature.Base64StringAsByteArray.mask) != 0) { return Base64.getDecoder().decode(str); }  throw new JSONException(info("not support input " + str)); }  if (nextIfArrayStart()) { int index = 0; byte[] bytes = new byte[64]; while (true) { if (ch == ']') { next(); break; } if (index == bytes.length) { int oldCapacity = bytes.length; int newCapacity = oldCapacity + (oldCapacity >> 1); bytes = Arrays.copyOf(bytes, newCapacity); } bytes[index++] = (byte) readInt32Value(); } nextIfComma(); return Arrays.copyOf(bytes, index); }  throw new JSONException(info("not support read binary")); }
[*] target: assertEquals(str, str1)
[-] pred: org. junit. Assert. assertEquals ( str, str1 )
************************************
************************************
[+] input: testCreateServiceConfig() { // Setup final ServiceConfig expectedResult = new ServiceConfig(); expectedResult.setName("configName"); expectedResult.setValue("configValue"); expectedResult.setLabel("label"); expectedResult.setDescription("description"); expectedResult.setRequired(false); expectedResult.setType("input"); expectedResult.setConfigurableInWizard(false); expectedResult.setDefaultValue("defaultValue"); expectedResult.setMinValue(0); expectedResult.setMaxValue(0); expectedResult.setUnit("unit"); expectedResult.setHidden(false); expectedResult.setSelectValue(Arrays.asList("value")); expectedResult.setConfigType("configType");  // Run the test final ServiceConfig result = ProcessUtils.createServiceConfig("configName", "configValue", "type");  // Verify the results "<AssertPlaceHolder>"; }
createServiceConfig(String configName, Object configValue, String type) { ServiceConfig serviceConfig = new ServiceConfig(); serviceConfig.setName(configName); serviceConfig.setLabel(configName); serviceConfig.setValue(configValue); serviceConfig.setRequired(true); serviceConfig.setHidden(false); serviceConfig.setType(type); return serviceConfig; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: using() { Type expected = Type.concrete(ERUDITE, STRING_TYPE.invariant(), T_TYPE.covariant(), INTEGER_TYPE.contravariant()); Type toVerify = Type.generic(T).using(TypeConstructor.concrete(ERUDITE, STRING_TYPE_CONSTRUCTOR.invariant(), TypeConstructor.placeholder().covariant(), INTEGER_TYPE_CONSTRUCTOR.contravariant()));  "<AssertPlaceHolder>"; }
contravariant() { return TypeArgument.of(CONTRAVARIANT, this); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: taxasPass() { Taxa[] taxas = BrasilAPI.taxas(); "<AssertPlaceHolder>"; }
taxas() { Taxa[] obj = (Taxa[]) api(Taxa[].class, "taxas/v1", ""); return obj != null ? (Taxa[]) obj.clone() : null; }
[*] target: assertNotNull(taxas)
[-] pred: org. junit. Assert. assertNotNull ( taxas )
************************************
************************************
[+] input: test_2_plus_2_meta() { var node = initNode(TbRuleNodeMathFunctionType.ADD, new TbMathResult(TbMathArgumentType.MESSAGE_METADATA, "result", 0, false, false, null), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a"), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "b") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 2).put("b", 2).toString());  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); assertNotNull(resultMsg.getMetaData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("4", result); }
onMsg(TbContext ctx, TbMsg msg) { locks.computeIfAbsent(msg.getOriginator(), SemaphoreWithTbMsgQueue::new) .addToQueueAndTryProcess(msg, ctx, this::processMsgAsync); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
************************************
[+] input: testDetailBuilder() { //  detail : { //      "type": "HorizontalLayout", //      "elements": [ //          { //              "type": "Control", //              "scope": "#/properties/name" //          }, //          { //              "type": "Control", //              "scope": "#/properties/documentation", //              "label": "Documentation", //              "options": { //                  "multi": true //              } //          } //      ] //    }  JsonObjectBuilder layoutBuilder = Json.createObjectBuilder().add("type", "HorizontalLayout");  JsonArrayBuilder controlsArrayBuilder = Json.createArrayBuilder();  JsonObjectBuilder controlBuilder = Json.createObjectBuilder(). // add("type", "Control"). // add("scope", "#/properties/");  controlsArrayBuilder.add(controlBuilder);  layoutBuilder.add("elements", controlsArrayBuilder);  JsonObjectBuilder detailBuilder = Json.createObjectBuilder(). // add("detail", layoutBuilder.build());  JsonObject jsonObject = detailBuilder.build();  "<AssertPlaceHolder>"; logger.info("" + jsonObject);  }
build() {  // close current controllsBuilder.... if (controlsArrayBuilder != null && layoutContext != null) { layoutContext.add("elements", controlsArrayBuilder.build()); }  if (groupArrayBuilder != null) {  // close current layoutContext.... if (layoutsArrayBuilder != null && layoutContext != null) { this.layoutsArrayBuilder.add(layoutContext.build()); }  // close current gourpContext if (groupContext != null) { groupContext.add("elements", layoutsArrayBuilder.build()); groupArrayBuilder.add(groupContext); }  rootLayoutBuilder.add("elements", groupArrayBuilder.build()); }  // write result JsonObject jsonObject = rootLayoutBuilder.build(); String result = null; try (Writer writer = new StringWriter()) { Json.createWriter(writer).write(jsonObject); result = writer.toString(); } catch (IOException e) { result = "{}"; e.printStackTrace(); } return result; }
[*] target: assertNotNull(jsonObject)
[-] pred: org. junit. Assert. assertNotNull ( jsonObject )
************************************
************************************
[+] input: testBuildTaskRetryConfigNormal() { TaskConfig taskConfig = mock(TaskConfig.class); doCallRealMethod().when(tapTableMap).buildTaskRetryConfig(taskConfig); tapTableMap.buildTaskRetryConfig(taskConfig); Object actual = ReflectionTestUtils.getField(tapTableMap, "taskConfig"); "<AssertPlaceHolder>"; }
buildTaskRetryConfig(TaskConfig taskConfig){ this.taskConfig = taskConfig; }
[*] target: assertEquals(taskConfig,actual)
[-] pred: org. junit. Assert. assertEquals ( taskConfig, actual )
************************************
************************************
[+] input: testTrue() { InspectDto inspectDto = new InspectDto(); inspectDto.setInspectMethod(InspectMethod.FIELD.getValue()); inspectDto.setStatus(InspectStatusEnum.DONE.getValue()); inspectDto.setResult("failed"); inspectDto.setFlowId("test-flow-id");  List<String> errors = AutoRecoveryUtils.checkCanRecovery(inspectDto); Assertions.assertTrue(errors.isEmpty());  inspectDto.setInspectMethod(InspectMethod.JOINTFIELD.getValue()); errors = AutoRecoveryUtils.checkCanRecovery(inspectDto); Assertions."<AssertPlaceHolder>"; }
checkCanRecovery(InspectDto inspectDto) { List<String> errorCodes = new ArrayList<>(); if (!( InspectMethod.FIELD.getValue().equals(inspectDto.getInspectMethod()) || InspectMethod.JOINTFIELD.getValue().equals(inspectDto.getInspectMethod()) )) { errorCodes.add("Inspect.Recovery.NotFieldMethod"); } if (!InspectStatusEnum.DONE.getValue().equals(inspectDto.getStatus())) { errorCodes.add("Inspect.Recovery.StatusNotDone"); } if (!InspectResultEnum.FAILED.getValue().equals(inspectDto.getResult())) { errorCodes.add("Inspect.Recovery.ResultNotFound"); } if (null == inspectDto.getFlowId() || inspectDto.getFlowId().isEmpty()) { errorCodes.add("Inspect.Recovery.IsNotWithTask"); } return errorCodes; }
[*] target: assertTrue(errors.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( errors. isEmpty ( ) )
************************************
************************************
[+] input: testTryEmitTwoBucketSuccess() { when(mockOutBox.offer(anyInt(), any(TapdataEvent.class))).thenReturn(true); boolean actual = hazelcastBaseNode.tryEmit(tapdataEvent, 2); "<AssertPlaceHolder>"; }
tryEmit(TapdataEvent dataEvent, int bucketCount) { if (null == dataEvent) { return true; } if (bucketCount > 1) { for (bucketIndex = Math.min(bucketIndex, bucketCount); bucketIndex < bucketCount; bucketIndex++) { TapdataEvent cloneEvent = (TapdataEvent) dataEvent.clone(); if (!tryEmit(bucketIndex, cloneEvent)) { return false; } } } else { return tryEmit(dataEvent); } return true; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: getTopicsTeamsOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getTopicsCountByTeams( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(Collections.emptyList()); Mockito.when( manageDatabase.getTeamNameFromTeamId(TestConstants.TENANT_ID, TestConstants.TEAM_ID)) .thenReturn(TestConstants.TEAM_NAME); Mockito.when( commonUtilsService.getChartsJsOverview( eq(Collections.emptyList()), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsTeamsOverview( TestConstants.TEAM_ID, TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
getTopicsTeamsOverview(Integer teamId, Integer tenantId) {  List<CommonUtilsService.ChartsOverviewItem<Integer, Integer>> teamCountList = manageDatabase.getHandleDbRequests().getTopicsCountByTeams(teamId, tenantId); String title = ANALYTICS_103; if (teamId != null) { title += " (" + manageDatabase.getTeamNameFromTeamId(tenantId, teamId) + ")"; } else { title += " (all teams)"; }  return commonUtilsService.getChartsJsOverview( teamCountList, title, "teamid", "Teams", "Topics", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testLookupSuccessful() { VINManager vinManager = new VINManager(); String wmi = "1C3"; assertTrue(vinManager.isValidWMI(wmi));  //check that the lowercase version is also matched wmi = "1c3"; "<AssertPlaceHolder>"; }
isValidWMI(String wmi) { if (wmi.length() != 3) { return false; }  return wmiMap.containsKey(wmi.toUpperCase()); }
[*] target: assertTrue(vinManager.isValidWMI(wmi))
[-] pred: org. junit. Assert. assertTrue ( vinManager. isValidWMI(wmi ) )
************************************
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeButNotAllNodeAreDataParentNode0() { when(nodeList.size()).thenReturn(2); JsProcessorNode node2 = mock(JsProcessorNode.class); when(nodeList.get(0)).thenReturn(node2);  DataParentNode node1 = mock(DataParentNode.class); when(node1.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node1); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(0)).get(1); verify(node1, times(0)).getDatabaseType(); }
getTaskDtoIsomorphism(List<Node> nodes) { if (null == nodes || nodes.size() != 2) { return false; } Node node1 = nodes.get(0); if (!(node1 instanceof DataParentNode)) return false; Node node2 = nodes.get(1); if (!(node2 instanceof DataParentNode)) return false; DataParentNode dataParentNode1 = (DataParentNode)node1; DataParentNode dataParentNode2 = (DataParentNode)node2; String databaseType = String.valueOf(dataParentNode1.getDatabaseType()); return databaseType.equals(dataParentNode2.getDatabaseType()); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
************************************
[+] input: givenNestedClass() { ContainingClass containingClass = ContainingClass.of( ContainingClass.of( ContainingClass.of( ContainingPackage.of(PackageName.of("nl.wernerdegroot")), modifiers(PUBLIC), ClassName.of("OuterClass"), asList(A.asTypeParameter()) ), modifiers(PRIVATE, STATIC), ClassName.of("StaticInnerClass"), asList(B.asTypeParameter(), C.extending(SERIALIZABLE)) ), modifiers(), ClassName.of("InnerClass"), emptyList() );  String expected = "nl.wernerdegroot.OuterClass<A>.StaticInnerClass<B, C extends java.io.Serializable>.InnerClass"; String toVerify = ContainingClassGenerator.generateFrom(containingClass);  "<AssertPlaceHolder>"; }
generateFrom(ContainingClass containingClass) { return new ContainingClassGenerator(containingClass).generate(); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: shouldSetAndGetMacOptionClickForcesSelection() { options.setMacOptionClickForcesSelection(true); "<AssertPlaceHolder>"; }
isMacOptionClickForcesSelection() { return macOptionClickForcesSelection; }
[*] target: assertTrue(options.isMacOptionClickForcesSelection())
[-] pred: org. junit. Assert. assertTrue ( options. isMacOptionClickForcesSelection() )
************************************
************************************
[+] input: pixParticipantesPass() { PIX[] pix = BrasilAPI.pixParticipantes(); "<AssertPlaceHolder>"; }
pixParticipantes() { PIX[] obj = (PIX[]) api(PIX[].class, "pix/v1/participants", ""); return obj != null ? (PIX[]) obj.clone() : null; }
[*] target: assertNotNull(pix)
[-] pred: org. junit. Assert. assertNotNull ( pix )
************************************
************************************
[+] input: Exception {  CollectRep.MetricsData metricsData = CollectRep.MetricsData.newBuilder().setMetrics("test metrics").build(); String metricsDataJson = "{"metrics":"test metrics"}";  when(syncCommands.rpop("metricsDataQueueToAlerter")).thenReturn(metricsDataJson);  CollectRep.MetricsData actualMetricsData = redisCommonDataQueue.pollMetricsDataToAlerter(); "<AssertPlaceHolder>"; }
pollMetricsDataToAlerter() {  try { String metricsDataJson = syncCommands.rpop(metricsDataQueueNameToAlerter); if (metricsDataJson != null) { return (CollectRep.MetricsData) ProtoJsonUtil.toProtobuf(metricsDataJson, CollectRep.MetricsData.newBuilder()); } } catch (Exception e) { log.error(e.getMessage()); throw new RuntimeException(e); } return null; }
[*] target: assertEquals(metricsData, actualMetricsData)
[-] pred: org. junit. Assert. assertEquals ( metricsData, actualMetricsData )
************************************
************************************
[+] input: testNormal() { List<WorkerDto> allAgent = agentGroupService.findAllAgent(agentIds, userDetail); Assertions."<AssertPlaceHolder>"; verify(workerServiceImpl, times(1)).findAllDto(any(Query.class), any(UserDetail.class)); }
findAllAgent(Collection<String> agentIds, UserDetail loginUser) { if (CollectionUtils.isEmpty(agentIds)) { return Lists.newArrayList(); } Criteria criteria = Criteria.where(AgentGroupTag.TAG_PROCESS_ID).in(agentIds) .and(AgentGroupTag.TAG_WORKER_TYPE).is(AgentGroupTag.TAG_CONNECTOR); return workerServiceImpl.findAllDto(Query.query(criteria), loginUser); }
[*] target: assertNotNull(allAgent)
[-] pred: org. junit. Assert. assertNotNull ( allAgent )
************************************
************************************
[+] input: testNormal() { milestoneAspectTask.taskMilestone("code", consumer); MilestoneEntity code = milestones.get("code"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("code", code.getCode()); Assertions.assertEquals(MilestoneStatus.FINISH, code.getStatus()); verify(consumer).accept(any(MilestoneEntity.class)); }
taskMilestone(String code, Consumer<MilestoneEntity> consumer) { MilestoneEntity entity = milestones.get(code); if (null == entity) { synchronized (milestones) { entity = milestones.computeIfAbsent(code, s -> new MilestoneEntity(code, MilestoneStatus.WAITING)); } } if (null != consumer) { consumer.accept(entity); } }
[*] target: assertNotNull(code)
[-] pred: org. junit. Assert. assertNotNull ( code )
************************************
************************************
[+] input: givenConcreteMethodWithTwoLineBody() { List<String> toVerify = method() .withModifiers(PUBLIC) .withReturnType(STRING) .withName("toString") .withBody("String result = "Helpful description";") .withReturnStatement("result") .lines();  List<String> expected = asList( "public java.lang.String toString() {", "    String result = "Helpful description";", "    return result;", "}" );  "<AssertPlaceHolder>"; }
lines() { List<String> components = new ArrayList<>(); if (!modifiersGenerator.isEmpty()) { components.add(modifiersGenerator.generate()); } if (!typeParametersGenerator.isEmpty()) { components.add(typeParametersGenerator.generate()); } components.add(optionalReturnType.map(TypeGenerator::generateFrom).orElse(VOID)); components.add(name + parametersGenerator.generate()); String methodDeclaration = components.stream().collect(joining(SPACE));  return optionalBodyGenerator .map(bodyGenerator -> { List<String> result = new ArrayList<>(); result.add(methodDeclaration + SPACE + OPEN_BRACE); result.addAll(bodyGenerator.indent().lines()); result.add(CLOSE_BRACE); return result; }) .orElse(asList(methodDeclaration + SEMICOLON)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: shouldAddNewPhysicalAssessmentToClient() { //given Client client = new Client(); this.physicalAssessment.setClient(client); //when physicalAssessment.addPhysicalAssessment(); int actual = client.getPhysicalAssessmentList().size(); //then int expected = 1; Assertions."<AssertPlaceHolder>"; }
addPhysicalAssessment() { this.client.getPhysicalAssessmentList().add(this); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldTurnUpVolume() { //given //when this.tv.turnUpVolume(); this.tv.turnUpVolume(); this.tv.turnUpVolume(); int actual = this.tv.getVolume(); //then int expected = 8; Assertions."<AssertPlaceHolder>"; }
getVolume() { return volume; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldAddResizeListener() { component.onResize(event -> { });  List<EventListener<SplitterResizeEvent>> listeners = component.getEventListeners(SplitterResizeEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<SplitterResizeEvent>); }
onResize( EventListener<SplitterResizeEvent> listener) { return addResizeListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: givenValidVideoId_whenCallsGetResource_shouldReturnIt() { // given final var videoOne = VideoID.unique(); final var expectedType = VideoMediaType.VIDEO; final var expectedResource = resource(expectedType);  storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), expectedType), expectedResource); storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), VideoMediaType.TRAILER.name()), resource(mediaType())); storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), VideoMediaType.BANNER.name()), resource(mediaType()));  Assertions.assertEquals(3, storageService().storage().size());  // when final var actualResult = this.mediaResourceGateway.getResource(videoOne, expectedType).get();  // then Assertions."<AssertPlaceHolder>"; }
getResource(final VideoID anId, final VideoMediaType type) { return this.storageService.get(filepath(anId, type)); }
[*] target: assertEquals(expectedResource, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResource, actualResult )
************************************
************************************
[+] input: setProperty_NumberList() { List<Integer> value = Arrays.asList(1,2,3,4); List<Integer> setValue = (List<Integer>) helper.setProperty(KnownProperties.TEST_NUMBER_LIST, value); "<AssertPlaceHolder>"; }
setProperty(String propertyName, Object propertyValue) { if (null == propertyName || null == propertyValue) return null; PropertyType expectedType = getType(propertyName); if (null == expectedType) { return null; }  boolean typesMatch = validateType(expectedType, propertyValue); if (!typesMatch) return null;  synchronized (PropertyHelper.class) { propertyMap.put(propertyName, propertyValue); } return propertyValue; }
[*] target: assertEquals(value, setValue)
[-] pred: org. junit. Assert. assertEquals ( value, setValue )
************************************
************************************
[+] input: resolveFileFormat_whenNotSetOnTable_guessesFormConnectionParameters() { String schemaName = "schema_name_example"; String tableName = "a/file/path.csv"; String pathPrefix = "prefix_example"; TableSpec tableSpec = new TableSpec(new PhysicalTableName(schemaName, tableName));  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }}); duckdbParametersSpec.getDirectories().put(schemaName, pathPrefix);  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertEquals(fileFormatSpec.getFilePaths().get(0), Path.of(pathPrefix,tableName).toString()); Assertions.assertFalse(fileFormatSpec.getCsv().getAutoDetect()); }
resolveFileFormat(DuckdbParametersSpec duckdbParametersSpec, TableSpec tableSpec) { DuckdbFilesFormatType filesType = duckdbParametersSpec.getFilesFormatType(); if (filesType == null) { throw new RuntimeException("The files format is unknown. Please set files format on the connection."); }  FileFormatSpec fileFormat = tableSpec.getFileFormat() == null ? new FileFormatSpec() : tableSpec.getFileFormat().deepClone(); if(fileFormat.getFilePaths().isEmpty()){ FilePathListSpec filePathListSpec = guessFilePaths(duckdbParametersSpec, tableSpec); fileFormat.setFilePaths(filePathListSpec); }  if (fileFormat.isFormatSetForType(filesType)) { return fileFormat; }  FileFormatSpec fileFormatCloned = fileFormat.deepClone(); if (duckdbParametersSpec.isFormatSetForType()) { switch (filesType) { case csv: fileFormatCloned.setCsv(duckdbParametersSpec.getCsv().deepClone()); break; case json: fileFormatCloned.setJson(duckdbParametersSpec.getJson().deepClone()); break; case parquet: fileFormatCloned.setParquet(duckdbParametersSpec.getParquet().deepClone()); break; case iceberg: fileFormatCloned.setIceberg(duckdbParametersSpec.getIceberg().deepClone()); break; } return fileFormatCloned; }  fillDefaultFileFormat(fileFormatCloned, filesType); return fileFormatCloned; }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
************************************
[+] input: testSendNoticeMsgReceiverTypeNull() {  NoticeReceiver receiver = mock(NoticeReceiver.class); Alert alert = mock(Alert.class); when(receiver.getType()).thenReturn(null);  boolean result = dispatcherAlarm.sendNoticeMsg(receiver, null, alert); "<AssertPlaceHolder>"; }
sendNoticeMsg(NoticeReceiver receiver, NoticeTemplate noticeTemplate, Alert alert) { if (receiver == null || receiver.getType() == null) { log.warn("DispatcherAlarm-sendNoticeMsg params is empty alert:[{}], receiver:[{}]", alert, receiver); return false; } byte type = receiver.getType(); if (alertNotifyHandlerMap.containsKey(type)) { AlertNotifyHandler alertNotifyHandler = alertNotifyHandlerMap.get(type); if (noticeTemplate == null) { noticeTemplate = noticeConfigService.getDefaultNoticeTemplateByType(alertNotifyHandler.type()); } if (noticeTemplate == null) { log.error("alert does not have mapping default notice template. type: {}.", alertNotifyHandler.type()); throw new NullPointerException(alertNotifyHandler.type() + " does not have mapping default notice template"); } alertNotifyHandler.send(receiver, noticeTemplate, alert); return true; } return false; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: getActivityLogOverview_TeamIdNull() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when(manageDatabase.getEnvsOfTenantsMap()) .thenReturn(Map.of(TestConstants.TENANT_ID, List.of(TestConstants.ENV_ID))); Mockito.when( handleDbRequestsJdbc.getActivityLogForLastDays( eq(NUMBER_OF_DAYS), any(), eq(TestConstants.TENANT_ID))) .thenReturn(List.of()); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getActivityLogOverview( null, TestConstants.TENANT_ID, NUMBER_OF_DAYS);  Assertions."<AssertPlaceHolder>"; }
getActivityLogOverview( Integer teamId, Integer tenantId, int numberOfDays) {  List<CommonUtilsService.ChartsOverviewItem<String, Integer>> activityCountList; String title = ANALYTICS_107;  if (teamId != null) { activityCountList = manageDatabase.getHandleDbRequests().getActivityLogByTeam(teamId, numberOfDays, tenantId); title = title + " (" + manageDatabase.getTeamNameFromTeamId(tenantId, teamId) + ")"; } else { // tenant filtering List<String> allowedEnvIdList = manageDatabase.getEnvsOfTenantsMap().get(tenantId);  try { activityCountList = manageDatabase .getHandleDbRequests() .getActivityLogForLastDays( numberOfDays, allowedEnvIdList.toArray(new String[0]), tenantId); } catch (Exception e) { log.error("No environments/clusters found.", e); activityCountList = new ArrayList<>(); } }  return commonUtilsService.getChartsJsOverview( activityCountList, title, "dateofactivity", "Days", "Activities", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: shouldAddDataListener() { component.onData(event -> { });  List<EventListener<TerminalDataEvent>> listeners = component.getEventListeners(TerminalDataEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TerminalDataEvent>); }
onData(EventListener<TerminalDataEvent> listener) { return addDataListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testIsOfThisType() { SSNUKIdentifier identifier = new SSNUKIdentifier();  String ssn = "AB123456C"; assertTrue(identifier.isOfThisType(ssn));  //ignores spaces ssn = "AB 12 34 56 C"; assertTrue(identifier.isOfThisType(ssn));  //check for not allowed characters ssn = "DB123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "AD123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "AO123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA12A456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA1234567"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA123456Z"; assertFalse(identifier.isOfThisType(ssn));  //'O' is allowed on the first character ssn = "OA123456C"; "<AssertPlaceHolder>"; }
isOfThisType(String data) { String ssn = data.replace(" ", "").toUpperCase(); if (ssn.length() != 9) { return false; }  char first = ssn.charAt(0); char second = ssn.charAt(1); if (!Character.isAlphabetic(first) || !Character.isAlphabetic(second)) { return false; }  if (first == 'D' || first == 'F' || first == 'I' || first == 'Q' || first == 'U' || first == 'V') { return false; }  if (second == 'D' || second == 'F' || second == 'I' || second == 'Q' || second == 'U' || second == 'V' || second == 'O') { return false; }  for (int i = 2; i < 8; i++) { if (!Character.isDigit(ssn.charAt(i))) { return false; } }  char last = ssn.charAt(8); return last >= 'A' && last <= 'D'; }
[*] target: assertTrue(identifier.isOfThisType(ssn))
[-] pred: org. junit. Assert. assertTrue ( identifier. isOfThisType ( ssn ) )
************************************
************************************
[+] input: shouldAddCloseListener() { component.onClose(event -> { });  List<EventListener<DrawerCloseEvent>> listeners = component.getEventListeners(DrawerCloseEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DrawerCloseEvent>); }
onClose(EventListener<DrawerCloseEvent> listener) { return addCloseListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testRemove() { future.addWaiter(f1); future.addWaiter(f2); future.addWaiter(f3); future.addWaiter(f4); future.removeWaiter(f2);//mid future.removeWaiter(f1);//head future.removeWaiter(f4);//tail future.removeWaiter(f3);//last one Assertions.assertNull(future.popHeadWaiter()); Assertions."<AssertPlaceHolder>"; }
popTailWaiter() { Fiber result = lastWaiter; if (result != null) { if (result == firstWaiter) { firstWaiter = null; lastWaiter = null; } else { lastWaiter = result.previousWaiter; lastWaiter.nextWaiter = null; result.previousWaiter = null; } } return result; }
[*] target: assertNull(future.popTailWaiter())
[-] pred: org. junit. Assert. assertNull ( future. popTailWaiter() )
************************************
************************************
[+] input: initialization() { final var s3ClientProvider = new S3ClientProvider(null);  assertNotNull(s3ClientProvider.configuration);  S3AsyncClient t = s3ClientProvider.universalClient(); "<AssertPlaceHolder>";  var config = new S3NioSpiConfiguration(); assertSame(config, new S3ClientProvider(config).configuration); }
universalClient() { return universalClient; }
[*] target: assertNotNull(t)
[-] pred: org. junit. Assert. assertNotNull ( t )
************************************
************************************
[+] input: test2() { //when this.registerPage.fillOutForm();  //then String expected = "Welcome to your account. Here you can manage all of your personal information and orders."; String actual = this.registerPage.getWelcomeMessage(); Assertions."<AssertPlaceHolder>";  String actualUrl = this.registerPage.getCurrentUrl(); Assertions.assertFalse(this.URL.equals(actualUrl)); }
getWelcomeMessage() { super.waitVisibilityOfElementLocated(welcomeMessageLocator); return super.getText(welcomeMessageLocator); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testCheckWhenFailed() { DeptTreeDataPermissionChecker checker = new DeptTreeDataPermissionChecker(deptService);  when(deptService.isChildOfTheDept(any(), any())).thenReturn(false); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(2L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
check(SystemLoginUser loginUser, DataCondition condition) { if (condition == null || loginUser == null) { return false; }  if (loginUser.getDeptId() == null || condition.getTargetDeptId() == null) { return false; }  Long currentDeptId = loginUser.getDeptId(); Long targetDeptId = condition.getTargetDeptId();  boolean isContainsTargetDept = deptService.isChildOfTheDept(loginUser.getDeptId(), targetDeptId); boolean isSameDept = Objects.equals(currentDeptId, targetDeptId);  return isContainsTargetDept || isSameDept; }
[*] target: assertFalse(check)
[-] pred: org. junit. Assert. assertFalse ( check )
************************************
************************************
[+] input: shouldFindAllCustomers() {  List<CusCustomer> cusCustomerList = createDummyCusCustomerList();  List<CusCustomerDto> expectedResult = createDummyCusCustomerDtoList();  when(cusCustomerEntityService.findAllCustomers()).thenReturn(cusCustomerList);  List<CusCustomerDto> result = cusCustomerService.findAllCustomers();  "<AssertPlaceHolder>"; assertNotNull(result); }
findAllCustomers(){  List<CusCustomer> cusCustomerList = cusCustomerEntityService.findAllCustomers();  List<CusCustomerDto> cusCustomerDtoList = CusCustomerMapper.INSTANCE.convertToCusCustomerDtoList(cusCustomerList);  return cusCustomerDtoList; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { SampleEntitlementId id1 = new SampleEntitlementId("cat", "jit-1"); SampleEntitlementId id2 = new SampleEntitlementId("cat", "jit-1");  assertTrue(id1.equals(id2)); "<AssertPlaceHolder>"; }
hashCode() { return id().hashCode(); }
[*] target: assertEquals(id1.hashCode(), id2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( id1. hashCode ( ), id2. hashCode ( ) )
************************************
************************************
[+] input: testDeleteOneWebHookByHookId() { when(webHookController.success()).thenReturn(mock(ResponseMessage.class)); doNothing().when(webHookService).delete(any(String[].class), any(UserDetail.class)); when(webHookController.deleteOneWebHookByHookId("id")).thenCallRealMethod(); ResponseMessage<Void> hook = webHookController.deleteOneWebHookByHookId("id"); Assertions."<AssertPlaceHolder>"; verify(webHookController).success(); verify(webHookService).delete(any(String[].class), any(UserDetail.class)); }
deleteOneWebHookByHookId(@PathVariable(value = "id") String hookId) { webHookService.delete(new String[]{hookId}, getLoginUser()); return success(); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
************************************
[+] input: testAddAndDeleteScope() { String scopeName = "newScope4"; ScopeSetManager manager = new ScopeSetManager(); ScopeSet newScope = new ScopeSet(scopeName); manager.add(newScope); manager.save();  manager = new ScopeSetManager(); ScopeSet set = manager.findSet(scopeName); assertNotNull(set); assertEquals(scopeName, set.getName()); manager.remove(set);  manager = new ScopeSetManager(); set = manager.findSet(scopeName); "<AssertPlaceHolder>"; }
findSet(String name) { return findSet(name, false); }
[*] target: assertNull(set)
[-] pred: org. junit. Assert. assertNull ( set )
************************************
************************************
[+] input: testGetTableNameNotTapBaseEvent() { when(tapdataEvent.getMessageEntity()).thenReturn(null); when(tapdataEvent.getTapEvent()).thenReturn(heartbeatEvent); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); "<AssertPlaceHolder>"; assertEquals("", tableName); }
getTableName(TapdataEvent tapdataEvent) { if (null == tapdataEvent) return ""; MessageEntity messageEntity = tapdataEvent.getMessageEntity(); TapEvent tapEvent = tapdataEvent.getTapEvent(); if (null != messageEntity) { return messageEntity.getTableName(); } else { if (tapEvent instanceof TapBaseEvent) { return ((TapBaseEvent) tapEvent).getTableId(); } else { return ""; } } }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
************************************
[+] input: testReduceStock() { long goodsId = 1L; SeckillGoods seckillGoods = new SeckillGoods(); seckillGoods.setStockCount(5);  // 使用 any() 来匹配任何 LambdaQueryWrapper 参数 when(seckillGoodsManager.getOne(any())).thenReturn(seckillGoods);  when(redisService.get(SeckillGoodsKey.seckillCount, String.valueOf(goodsId), Integer.class)) .thenReturn(4); when(seckillGoodsManager.update(eq(seckillGoods), any())).thenReturn(true);  int result = seckillGoodsService.reduceStock(goodsId);  "<AssertPlaceHolder>"; verify(redisService, times(1)).get(SeckillGoodsKey.seckillCount, String.valueOf(goodsId), Integer.class); verify(seckillGoodsManager, times(1)).update(eq(seckillGoods), any()); }
reduceStock(long goodsId) { SeckillGoods seckillGoods = seckillGoodsManager.getOne( Wrappers.<SeckillGoods>lambdaQuery().eq(SeckillGoods::getGoodsId, goodsId) );  // 多线程并发写的时候，有并发问题，这里只读redis的库存，然后写入库中，避免并发问题。 reduceStockCount(goodsId, seckillGoods); boolean flag = seckillGoodsManager.update(seckillGoods, Wrappers.<SeckillGoods>lambdaUpdate().eq(SeckillGoods::getGoodsId, goodsId)); return (flag) ? 1 : 0; }
[*] target: assertEquals(1, result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
************************************
[+] input: IOException { BilibiliResponse<BilibiliPageInfo<VideoData>> response = client.popular(1, 50); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(response.getCode()); Assertions.assertEquals(response.getCode(), ErrorCode.SUCCESS); Assertions.assertNotNull(response.getData()); List<VideoData> list = response.getData().getList(); Assertions.assertNotNull(list); Assertions.assertFalse(list.isEmpty()); for (VideoData videoData : list) { Assertions.assertNotNull(videoData); Assertions.assertNotNull(videoData.getOwner()); logger.info("推荐视频:" + videoData.getTitle() + "[" + videoData.getBvid() + "]" + " " + videoData.getOwner().getName()); } }
popular(int pageNum, int pageSize) throws IOException { checkBuVid3BuVid4(); String url = ApiUtil.fillUrl(ApiUrlContainer.POPULAR, pageNum, pageSize); return httpJsonClient.getJson(url, new TypeReference<BilibiliResponse<BilibiliPageInfo<VideoData>>>() { }, requestHeader); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: testDeleteUserGroup() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  when(mockUserGroupService.countGroupUserNum(0)).thenReturn(0);  // Configure ClusterHostService.getHostListByClusterId(...). final ClusterHostEntity clusterHostEntity = new ClusterHostEntity(); clusterHostEntity.setId(0); clusterHostEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setHostname("hostname"); clusterHostEntity.setIp("ip"); clusterHostEntity.setRack("rack"); clusterHostEntity.setCoreNum(0); clusterHostEntity.setTotalMem(0); clusterHostEntity.setTotalDisk(0); clusterHostEntity.setUsedMem(0); clusterHostEntity.setUsedDisk(0); clusterHostEntity.setAverageLoad("averageLoad"); clusterHostEntity.setCheckTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterHostEntity.setClusterId(0); clusterHostEntity.setHostState(0); clusterHostEntity.setManaged(MANAGED.YES); final List<ClusterHostEntity> clusterHostEntities = Arrays.asList(clusterHostEntity); when(mockHostService.getHostListByClusterId(0)).thenReturn(clusterHostEntities);  // Run the test final Result result = clusterGroupServiceImplUnderTest.deleteUserGroup(0);  // Verify the results "<AssertPlaceHolder>"; }
deleteUserGroup(Integer id) { ClusterGroup clusterGroup = this.getById(id); Integer num = userGroupService.countGroupUserNum(id); if (num > 0) { return Result.error(Status.USER_GROUP_TIPS_ONE.getMsg()); } this.removeById(id); List<ClusterHostDO> hostList = hostService.getHostListByClusterId(clusterGroup.getClusterId()); for (ClusterHostDO clusterHost : hostList) { ActorRef unixGroupActor = ActorUtils.getRemoteActor(clusterHost.getHostname(), "unixGroupActor"); DelUnixGroupCommand delUnixGroupCommand = new DelUnixGroupCommand(); delUnixGroupCommand.setGroupName(clusterGroup.getGroupName()); Timeout timeout = new Timeout(Duration.create(180, TimeUnit.SECONDS)); Future<Object> execFuture = Patterns.ask(unixGroupActor, delUnixGroupCommand, timeout); ExecResult execResult = null; try { execResult = (ExecResult) Await.result(execFuture, timeout.duration()); if (execResult.getExecResult()) { logger.info("del unix group success at {}", clusterHost.getHostname()); } else { logger.info("del unix group failed at {}", clusterHost.getHostname()); } } catch (Exception e) { logger.info("del unix group failed at {}", clusterHost.getHostname()); } } return Result.success(); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testCheckServiceDependency_FrameServiceServiceReturnsNoItems() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterServiceInstanceService.listRunningServiceInstance(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); final List<ClusterServiceInstanceEntity> serviceInstanceEntityList = Arrays.asList( clusterServiceInstanceEntity); when(mockServiceInstanceService.listRunningServiceInstance(0)).thenReturn(serviceInstanceEntityList);  when(mockFrameService.listServices("serviceIds")).thenReturn(Collections.emptyList());  // Run the test final Result result = serviceInstallServiceImplUnderTest.checkServiceDependency(0, "serviceIds");  // Verify the results "<AssertPlaceHolder>"; }
checkServiceDependency(Integer clusterId, String serviceIds) { // List<ClusterServiceInstanceEntity> serviceInstanceList = serviceInstanceService.listRunningServiceInstance(clusterId); Map<String, ClusterServiceInstanceEntity> instanceMap = serviceInstanceList.stream() .collect( Collectors.toMap( ClusterServiceInstanceEntity::getServiceName, e -> e, (v1, v2) -> v1));  List<FrameServiceEntity> list = frameService.listServices(serviceIds); Map<String, FrameServiceEntity> serviceMap = list.stream() .collect( Collectors.toMap( FrameServiceEntity::getServiceName, e -> e, (v1, v2) -> v1)); if (!instanceMap.containsKey("ALERTMANAGER") && !serviceMap.containsKey("ALERTMANAGER")) { return Result.error( "service install depends on alertmanager ,please make sure you have selected it or that alertmanager is normal and running"); } if (!instanceMap.containsKey("GRAFANA") && !serviceMap.containsKey("GRAFANA")) { return Result.error( "service install depends on grafana ,please make sure you have selected it or that grafana is normal and running"); } if (!instanceMap.containsKey("PROMETHEUS") && !serviceMap.containsKey("PROMETHEUS")) { return Result.error( "service install depends on prometheus ,please make sure you have selected it or that prometheus is normal and running"); }  for (FrameServiceEntity frameServiceEntity : list) { for (String dependService : frameServiceEntity.getDependencies().split(",")) { if (StringUtils.isNotBlank(dependService) && !instanceMap.containsKey(dependService) && !serviceMap.containsKey(dependService)) { return Result.error( "" + frameServiceEntity.getServiceName() + " install depends on " + dependService + ",please make sure that you have selected it or that " + dependService + " is normal and running"); } } } return Result.success(); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: test_isCloudLimitScheduling() { ObjectId taskId = MongoUtils.toObjectId("632454d5287a904778c40f8d"); Query query = new Query(Criteria.where("_id").is(taskId)); query.fields().include("id","agentId","agentTags"); TaskEntity mockTask = new TaskEntity(); mockTask.setCrontabExpressionFlag(true); mockTask.setId(MongoUtils.toObjectId("632454d5287a904778c40f8d")); try (MockedStatic<DataPermissionService> serviceMockedStatic = Mockito.mockStatic(DataPermissionService.class)) { serviceMockedStatic.when(DataPermissionService::isCloud).thenReturn(true); when(settingsService.isCloud()).thenReturn(true); when(taskRepository.findOne(query)).thenReturn(Optional.of(mockTask)); TaskDto mockTaskDto = new TaskDto(); BeanUtils.copyProperties(mockTask,mockTaskDto); CalculationEngineVo mockEngineVo = new CalculationEngineVo(); mockEngineVo.setTaskLimit(5); mockEngineVo.setRunningNum(5); when(workerService.calculationEngine(mockTaskDto,user,null)).thenReturn(mockEngineVo); Query mockQuery = new Query(Criteria.where("_id").is(taskId)); mockQuery.fields().include("planStartDateFlag", "crontabExpressionFlag"); when(taskRepository.findOne(mockQuery)).thenReturn(Optional.of(mockTask)); boolean result = taskService.checkCloudTaskLimit(taskId,user,true); "<AssertPlaceHolder>"; } }
checkCloudTaskLimit(ObjectId taskId,UserDetail user,boolean checkCurrentTask){ if (settingsService.isCloud()) { TaskDto task = findByTaskId(taskId,"id",AGENT_ID,"agentTags"); CalculationEngineVo calculationEngineVo = workerService.calculationEngine(task, user, null); int runningNum; if(checkCurrentTask){ runningNum  = subCronOrPlanNum(task, calculationEngineVo.getRunningNum()); }else{ runningNum = calculationEngineVo.getRunningNum(); } if (runningNum >= calculationEngineVo.getTaskLimit()) { return false; } } return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testDeleteSql() { Map<String, Object> params = new HashMap<>(2); params.put("id", 1); long delete = commonDaoWrap.deleteSql("delete from user where id = #{id}", params); Assertions."<AssertPlaceHolder>"; }
deleteSql(String sql, Map<String, Object> params) { return dao.deleteSql(setSQL(sql, params)); }
[*] target: assertEquals(1, delete)
[-] pred: org. junit. Assert. assertEquals ( 1, delete )
************************************
************************************
[+] input: testSaveHostServiceRoleMapping() { // Setup final HostServiceRoleMapping hostServiceRoleMapping = new HostServiceRoleMapping(); hostServiceRoleMapping.setHost("host"); hostServiceRoleMapping.setServiceRoles(Arrays.asList("value")); final List<HostServiceRoleMapping> list = Arrays.asList(hostServiceRoleMapping); final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterInfoService.getById(...). final ClusterInfoEntity clusterInfoEntity = new ClusterInfoEntity(); clusterInfoEntity.setId(0); clusterInfoEntity.setCreateBy("createBy"); clusterInfoEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterInfoEntity.setClusterName("clusterName"); clusterInfoEntity.setClusterCode("clusterCode"); clusterInfoEntity.setClusterFrame("clusterFrame"); clusterInfoEntity.setFrameVersion("frameVersion"); clusterInfoEntity.setClusterState(ClusterState.RUNNING); clusterInfoEntity.setFrameId(0); final UserInfoEntity userInfoEntity = new UserInfoEntity(); userInfoEntity.setId(0); userInfoEntity.setUsername("username"); userInfoEntity.setPassword("password"); userInfoEntity.setEmail("email"); userInfoEntity.setPhone("phone"); clusterInfoEntity.setClusterManagerList(Arrays.asList(userInfoEntity)); when(mockClusterInfoService.getById(0)).thenReturn(clusterInfoEntity);  // Run the test final Result result = serviceInstallServiceImplUnderTest.saveHostServiceRoleMapping(0, list);  // Verify the results "<AssertPlaceHolder>"; }
saveHostServiceRoleMapping(Integer clusterId, List<HostServiceRoleMapping> list) { ClusterInfoEntity clusterInfo = clusterInfoService.getById(clusterId); HashMap<String, List<String>> map = new HashMap<>(); for (HostServiceRoleMapping hostServiceRoleMapping : list) { map.put(hostServiceRoleMapping.getHost(), hostServiceRoleMapping.getServiceRoles()); } CacheUtils.put( clusterInfo.getClusterCode() + Constants.UNDERLINE + Constants.HOST_SERVICE_ROLE_MAPPING, map); return Result.success(); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: test_sqrt_5_to_timeseries_and_metadata_and_data() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.TIME_SERIES, "result", 3, true, true, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString()); when(telemetryService.saveAndNotify(any(), any(), any(TsKvEntry.class))) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAndNotify(any(), any(), any(TsKvEntry.class));  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var resultMetadata = resultMsg.getMetaData().getValue("result"); var resultData = JacksonUtil.toJsonNode(resultMsg.getData());  assertTrue(resultData.has("result")); assertEquals(2.236, resultData.get("result").asDouble(), 0.0);  assertNotNull(resultMetadata); assertEquals("2.236", resultMetadata); }
onMsg(TbContext ctx, TbMsg msg) { locks.computeIfAbsent(msg.getOriginator(), SemaphoreWithTbMsgQueue::new) .addToQueueAndTryProcess(msg, ctx, this::processMsgAsync); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
************************************
[+] input: testGetTableNameOnlyHaveTapEvent() { when(tapdataEvent.getMessageEntity()).thenReturn(null); when(tapdataEvent.getTapEvent()).thenReturn(tapInsertRecordEvent); tapdataEvent.setTapEvent(tapInsertRecordEvent); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); verify(tapdataEvent, new Times(1)).getTapEvent(); "<AssertPlaceHolder>"; assertEquals(TABLE_NAME2, tableName); }
getTableName(TapdataEvent tapdataEvent) { if (null == tapdataEvent) return ""; MessageEntity messageEntity = tapdataEvent.getMessageEntity(); TapEvent tapEvent = tapdataEvent.getTapEvent(); if (null != messageEntity) { return messageEntity.getTableName(); } else { if (tapEvent instanceof TapBaseEvent) { return ((TapBaseEvent) tapEvent).getTableId(); } else { return ""; } } }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
************************************
[+] input: IOException { VideoDetail videoDetail = client.getVideoDetail("BV1Jx411o7aW"); Assertions."<AssertPlaceHolder>"; VideoInfo videoInfo = videoDetail.getVideoInfo(); Assertions.assertNotNull(videoInfo); VideoData videoData = videoInfo.getVideoData(); Assertions.assertNotNull(videoData); BilibiliResponse<PlayInfo> playInfoResponse = videoDetail.getPlayInfoResponse(); Assertions.assertNotNull(playInfoResponse); Assertions.assertNotNull(playInfoResponse.getCode()); if (ErrorCode.SUCCESS == playInfoResponse.getCode()) { PlayInfo playInfo = playInfoResponse.getData(); Assertions.assertNotNull(playInfo); PlayDash dash = playInfo.getDash(); Assertions.assertNotNull(dash); List<PlayDashInfo> videoList = dash.getVideo(); List<PlayDashInfo> audioList = dash.getAudio(); Assertions.assertNotNull(videoList); Assertions.assertFalse(videoList.isEmpty()); Assertions.assertNotNull(audioList); Assertions.assertFalse(audioList.isEmpty()); String videoDataMessage = String.format("BV:%s, title:%s, desc:%s", videoInfo.getBvid(), videoData.getTitle(), videoData.getDesc()); logger.info(videoDataMessage); Season season = videoData.getUgcSeason(); if (Objects.nonNull(season)) { String seasonMessage = String.format("Season title:%s, intro:%s, cover:%s", season.getTitle(), season.getIntro(), season.getCover()); logger.info(seasonMessage); if (Objects.nonNull(season.getSections())) { for (SeasonSection section : season.getSections()) { String sectionMessage = String.format("Section title:%s, type:%d, isActive:%b", section.getTitle(), section.getType(), section.getActive()); logger.info(sectionMessage); if (Objects.nonNull(section.getEpisodes())) { for (SectionEpisode episode : section.getEpisodes()) { String episodeMessage = String.format("Episode title:%s, bv:%s", episode.getTitle(), episode.getBvId()); if (Objects.nonNull(episode.getArc())) { episodeMessage += String.format(", arc.pic:%s", episode.getArc().getPic()); } logger.info(episodeMessage); } } } } } for (PlayDashInfo video : videoList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", video.getMimeType(), video.getCodecs(), video.getId(), video.getBaseUrl()); logger.info(message); } for (PlayDashInfo audio : audioList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", audio.getMimeType(), audio.getCodecs(), audio.getId(), audio.getBaseUrl()); logger.info(message); } } else { logger.info("get play info fail:" + playInfoResponse.getMessage()); } }
getVideoDetail(String bv) throws IOException { checkBuVid3BuVid4(); return getVideoDetail(bv, 1); }
[*] target: assertNotNull(videoDetail)
[-] pred: org. junit. Assert. assertNotNull ( videoDetail )
************************************
************************************
[+] input: bind_nonCounter_withStandardInput() { commonSetup(false,false,false); targetUpdateStatement = new TargetUpdateStatement(propertyHelper, targetSession); BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, null,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size())).set(anyInt(), any(), any(Class.class)); }
bind(Row originRow, Row targetRow, Integer ttl, Long writeTime, Object explodeMapKey, Object explodeMapValue) { // We reference the originRow and convert it to the target type. // We need the targetRow if (null == originRow) throw new RuntimeException("originRow is null");  checkBindInputs(ttl, writeTime, explodeMapKey, explodeMapValue);  BoundStatement boundStatement = prepareStatement().bind();  int currentBindIndex = 0; if (usingTTL) { boundStatement = boundStatement.set(currentBindIndex++, ttl, Integer.class); } if (usingWriteTime) { boundStatement = boundStatement.set(currentBindIndex++, writeTime, Long.class); }  Object originValue, targetValue; Object bindValueTarget = null; for (int targetIndex : columnIndexesToBind) { int originIndex = cqlTable.getCorrespondingIndex(targetIndex);  try { if (usingCounter && counterIndexes.contains(targetIndex)) { originValue = cqlTable.getOtherCqlTable().getData(originIndex, originRow); if (null == originValue) { currentBindIndex++; continue; } targetValue = (null == targetRow ? 0L : cqlTable.getData(targetIndex, targetRow)); bindValueTarget = ((Long) originValue - (null == targetValue ? 0L : (Long) targetValue)); } else if (targetIndex== explodeMapKeyIndex) { bindValueTarget = explodeMapKey; } else if (targetIndex== explodeMapValueIndex) { bindValueTarget = explodeMapValue; } else { if (originIndex < 0) // we don't have data to bind for this column; continue to the next targetIndex continue; bindValueTarget = cqlTable.getOtherCqlTable().getAndConvertData(originIndex, originRow); }  boundStatement = boundStatement.set(currentBindIndex++, bindValueTarget, cqlTable.getBindClass(targetIndex)); } catch (Exception e) { logger.error("Error trying to bind value:" + bindValueTarget + " to column:" + targetColumnNames.get(targetIndex) + " of targetDataType:" + targetColumnTypes.get(targetIndex) + "/" + cqlTable.getBindClass(targetIndex).getName() + " at column index:" + targetIndex); throw e; } }  PKFactory pkFactory = session.getPKFactory(); EnhancedPK pk = pkFactory.getTargetPK(originRow); boundStatement = pkFactory.bindWhereClause(PKFactory.Side.TARGET, pk, boundStatement, currentBindIndex);  return boundStatement .setConsistencyLevel(cqlTable.getWriteConsistencyLevel()) .setTimeout(Duration.ofSeconds(10)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: collectingWithSingleLines() { List<String> expected = asList("1", "1"); List<String> toVerify = Stream.of(1).collect(collectingIntegers());  "<AssertPlaceHolder>"; }
of(List<String> initialLines) { return new Lines(initialLines); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testInsert() { User user = new User(); user.setName("张三"); user.setAge(18); user.setCreateTime(LocalDateTime.now().plusYears(-18)); int insert = commonDaoWrap.insert(user); Assertions."<AssertPlaceHolder>"; }
insert(T params) { int insert = dao.insert(params); if(insert > 0){ ReflectionUtils.doWithFields(params.getClass(), field -> { field.setAccessible(true); try { if (field.get(params) == null) { if (field.getType() == Long.class) { field.set(params, selectCountBySQL("select LAST_INSERT_ID()", null)); } if (field.getType() == Integer.class) { field.set(params, (int) selectCountBySQL("select LAST_INSERT_ID()", null)); } } } catch (IllegalAccessException e) { log.error(e.getMessage(), e); } }, field -> field.isAnnotationPresent(TableId.class)); } return insert; }
[*] target: assertEquals(1, insert)
[-] pred: org. junit. Assert. assertEquals ( 1, insert )
************************************
************************************
[+] input: testDeleteSql() { Map<String, Object> params = new HashMap<>(2); params.put("id", 1); params.put("selfSQL", "delete from user where id = #{id}"); long delete = commonDao.deleteSql(params); Assertions."<AssertPlaceHolder>"; }
deleteSql(Map<String, Object> params);
[*] target: assertEquals(1, delete)
[-] pred: org. junit. Assert. assertEquals ( 1, delete )
************************************
************************************
[+] input: format_ShouldFormatNumberValueAsText() { BigDecimal value = new BigDecimal("12345.6789");; String expectedValue = TypeCodecs.DECIMAL.format(value); String result = codec.format(value); Assertions."<AssertPlaceHolder>"; }
format(BigDecimal value) { return TypeCodecs.DECIMAL.format(value); }
[*] target: assertEquals(expectedValue, result)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, result )
************************************
************************************
[+] input: testRemoveLast() { deque.addLast(1); deque.addLast(2); assertEquals(Integer.valueOf(2), deque.removeLast()); assertEquals(Integer.valueOf(1), deque.get(0)); assertEquals(Integer.valueOf(1), deque.removeLast()); assertNull(deque.removeLast()); "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(0, deque.size())
[-] pred: org. junit. Assert. assertEquals ( 0, deque. size() )
************************************
************************************
[+] input: bind_withStandardInput() { BoundStatement result = targetUpdateStatement.bind(originRow, targetRow, null,null,null,null); "<AssertPlaceHolder>"; verify(boundStatement, times(targetColumnNames.size())).set(anyInt(), any(), any(Class.class)); }
bind(Row originRow, Row targetRow, Integer ttl, Long writeTime, Object explodeMapKey, Object explodeMapValue) { // We reference the originRow and convert it to the target type. // We need the targetRow if (null == originRow) throw new RuntimeException("originRow is null");  checkBindInputs(ttl, writeTime, explodeMapKey, explodeMapValue);  BoundStatement boundStatement = prepareStatement().bind();  int currentBindIndex = 0; if (usingTTL) { boundStatement = boundStatement.set(currentBindIndex++, ttl, Integer.class); } if (usingWriteTime) { boundStatement = boundStatement.set(currentBindIndex++, writeTime, Long.class); }  Object originValue, targetValue; Object bindValueTarget = null; for (int targetIndex : columnIndexesToBind) { int originIndex = cqlTable.getCorrespondingIndex(targetIndex);  try { if (usingCounter && counterIndexes.contains(targetIndex)) { originValue = cqlTable.getOtherCqlTable().getData(originIndex, originRow); if (null == originValue) { currentBindIndex++; continue; } targetValue = (null == targetRow ? 0L : cqlTable.getData(targetIndex, targetRow)); bindValueTarget = ((Long) originValue - (null == targetValue ? 0L : (Long) targetValue)); } else if (targetIndex== explodeMapKeyIndex) { bindValueTarget = explodeMapKey; } else if (targetIndex== explodeMapValueIndex) { bindValueTarget = explodeMapValue; } else { if (originIndex < 0) // we don't have data to bind for this column; continue to the next targetIndex continue; bindValueTarget = cqlTable.getOtherCqlTable().getAndConvertData(originIndex, originRow); }  boundStatement = boundStatement.set(currentBindIndex++, bindValueTarget, cqlTable.getBindClass(targetIndex)); } catch (Exception e) { logger.error("Error trying to bind value:" + bindValueTarget + " to column:" + targetColumnNames.get(targetIndex) + " of targetDataType:" + targetColumnTypes.get(targetIndex) + "/" + cqlTable.getBindClass(targetIndex).getName() + " at column index:" + targetIndex); throw e; } }  PKFactory pkFactory = session.getPKFactory(); EnhancedPK pk = pkFactory.getTargetPK(originRow); boundStatement = pkFactory.bindWhereClause(PKFactory.Side.TARGET, pk, boundStatement, currentBindIndex);  return boundStatement .setConsistencyLevel(cqlTable.getWriteConsistencyLevel()) .setTimeout(Duration.ofSeconds(10)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: 커플_TOP30_조회() { // given var couples = new ArrayList<Character>(); var responses = new ArrayList<CharacterResponse.CharacterDetailResponse>(); for(int i = 0; i < 30; i++) { var couple = Character.builder() .name("디프만 1번 출구") .type(CharacterType.COUPLE) .webtoonId(1L) .build(); couples.add(couple); responses.add(new CharacterResponse.CharacterDetailResponse( couple, "테스트1.png,테스트2.png", "테스트", false )); }  var webtoon = Webtoon.builder() .title("테스트") .content("테스트") .webtoonUrl("http://테스트") .thumbnail("테스트.png") .platform(Platform.KAKAO) .build();  var mockCharacterImage = CharacterImage.builder() .characterId(1L) .type(CharacterImageType.COUPLE) .imageUrl("테스트1.png,테스트2.png") .build();  AuthInfo mockInfo = new AuthInfo(USER_ID, List.of(Role.USER));  Mockito.when(characterService.getCharactersByTopUpper(any())) .thenReturn(couples);  Mockito.when(webtoonService.findById(anyLong())) .thenReturn(webtoon);  Mockito.when(characterImageService.findByCharacterIdAndType(any(), any())) .thenReturn(mockCharacterImage);  Mockito.when(characterHistoryService.isUserJoin(any(), any())) .thenReturn(false);  var expected = new CharacterResponse(responses); // when var actual = characterFacade.getTopUpper("COUPLE",mockInfo); // then "<AssertPlaceHolder>"; }
getTopUpper(String type, AuthInfo info) { var responses = characterService.getCharactersByTopUpper(CharacterType.valueOf(type)) .stream() .map(character -> { var webtoon = webtoonService.findById(character.getWebtoonId()); var characterImage = characterImageService.findByCharacterIdAndType( character.getId(), CharacterImageType.valueOf(type) );  return new CharacterResponse.CharacterDetailResponse( character, characterImage.getImageUrl(), webtoon.getTitle(), characterHistoryService.isUserJoin(character.getId(), info) ); }).toList();  return new CharacterResponse(responses); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testOfferWhenTryEmitReturnTrue() { when(mockHazelcastBaseNode.tryEmit(tapdataEvent, 1)).thenReturn(true); boolean actual = mockHazelcastBaseNode.offer(tapdataEvent); "<AssertPlaceHolder>"; }
offer(TapdataEvent dataEvent) { if (dataEvent != null) { if (processorBaseContext.getNode() != null) { dataEvent.addNodeId(processorBaseContext.getNode().getId()); } Outbox outbox = getOutboxAndCheckNullable(); int bucketCount = outbox.bucketCount(); if (!tryEmit(dataEvent, bucketCount)) return false; } bucketIndex = 0; // reset to 0 of return true return true; }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: shouldSetAndGetScreenReaderMode() {  options.setScreenReaderMode(true); "<AssertPlaceHolder>"; }
isScreenReaderMode() { return screenReaderMode; }
[*] target: assertTrue(options.isScreenReaderMode())
[-] pred: org. junit. Assert. assertTrue ( options. isScreenReaderMode() )
************************************
************************************
[+] input: testClearUsers() { var users = new MemoryUsers();  try { users .addRole("role1") .addRole("role2") .addRole("role3") .addUser("login1", new RoleUserAttributes("thepassword")) .addUser("login2", new RoleUserAttributes("thepassword2", new String[]{"role1", "role2"})) .addUser("login3", new RoleUserAttributes("thepassword3", new String[]{"role1", "role2", "role3"})) .addUser("login4", new RoleUserAttributes(174, "thepassword4", new String[]{"role2", "role3"}));  assertEquals(4, users.countUsers()); users.clearUsers(); "<AssertPlaceHolder>"; } catch (CredentialsManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
countUsers() { readLock_.lock(); try { return users_.size(); } finally { readLock_.unlock(); } }
[*] target: assertEquals(0, users.countUsers())
[-] pred: org. junit. Assert. assertEquals ( 0, users. countUsers ( ) )
************************************
************************************
[+] input: IOException { DmWebViewReply dmWebViewReply = client.videoDanmakuView(885244431); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(dmWebViewReply.hasDmSge()); Assertions.assertTrue(dmWebViewReply.getDmSge().hasTotal()); logger.info("count:" + dmWebViewReply.getCount()); for (CommandDm commandDm : dmWebViewReply.getCommandDmsList()) { logger.info(commandDm.getMtime() + ">" + commandDm.getContent()); } }
videoDanmakuView(long oid) throws IOException { checkBuVid3BuVid4(); String url = ApiUtil.fillUrl(ApiUrlContainer.VIDEO_DANMAKU_VIEW, oid); byte[] data = httpJsonClient.getByteArray(url, requestHeader); return DmWebViewReply.parseFrom(data); }
[*] target: assertNotNull(dmWebViewReply)
[-] pred: org. junit. Assert. assertNotNull ( dmWebViewReply )
************************************
************************************
[+] input: asTypeConstructor() { GenericTypeConstructor expected = new GenericTypeConstructor(T); GenericTypeConstructor toVerify = new GenericType(T).asTypeConstructor();  "<AssertPlaceHolder>"; }
asTypeConstructor() { return TypeConstructor.generic(name); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: generateGivenContravariant() { String expected = "? super java.lang.Boolean"; String toVerify = new TypeArgumentGenerator(BOOLEAN.contravariant()).generate();  "<AssertPlaceHolder>"; }
generate() { String generatedType = TypeGenerator.generateFrom(typeArgument.getType()); switch (typeArgument.getVariance()) { case INVARIANT: return generatedType; case COVARIANT: return String.join(SPACE, QUESTION_MARK, EXTENDS, generatedType); case CONTRAVARIANT: return String.join(SPACE, QUESTION_MARK, SUPER, generatedType); default: throw new RuntimeException("Not implemented"); } }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: shouldTurnDownVolume() { //given //when this.tv.turnDownVolume(); this.tv.turnDownVolume(); this.tv.turnDownVolume(); int actual = this.tv.getVolume(); //then int expected = 2; Assertions."<AssertPlaceHolder>"; }
getVolume() { return volume; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testSingleRow() { AsciiTable tablePrinter = new AsciiTable(Arrays.asList("TYPE", "NAME", "STATUS", "URL")); tablePrinter.addRow("Type1", "Name1", "Status1", "http://url1.com"); String expected = "+-------+-------+---------+-----------------+\n" + "| TYPE  | NAME  | STATUS  | URL             |\n" + "+-------+-------+---------+-----------------+\n" + "| Type1 | Name1 | Status1 | http://url1.com |\n" + "+-------+-------+---------+-----------------+\n"; "<AssertPlaceHolder>"; }
printTable() { StringBuilder table = new StringBuilder(); int[] columnWidths = new int[headers.size()];  // Calculate the width of each column for (int i = 0; i < headers.size(); i++) { columnWidths[i] = headers.get(i).length(); }  for (List<String> row : rows) { for (int i = 0; i < row.size(); i++) { columnWidths[i] = Math.max(columnWidths[i], row.get(i).length()); } }  // Append the headers table.append(printSeparator(columnWidths)); table.append(printRow(headers, columnWidths)); table.append(printSeparator(columnWidths));  // Append the rows for (List<String> row : rows) { table.append(printRow(row, columnWidths)); } table.append(printSeparator(columnWidths));  return table.toString(); }
[*] target: assertEquals(expected, tablePrinter.printTable())
[-] pred: org. junit. Assert. assertEquals ( expected, tablePrinter. printTable ( ) )
************************************
************************************
[+] input: NoSuchMethodException { Method test1 = TestArexMock.class.getDeclaredMethod("testWithCacheableAnnotation", String.class, int.class); try(MockedConstruction ignored = Mockito.mockConstruction(DynamicClassExtractor.class, ((extractor, context) -> { Mockito.when(extractor.replayOrRealCall()).thenReturn(MockResult.success("test")); }))) { Method testReturnVoid = TestArexMock.class.getDeclaredMethod("testReturnVoid"); boolean actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(testReturnVoid, null, null, null); assertFalse(actualResult);  // not record Mockito.when(CacheLoaderUtil.needRecordOrReplay(any())).thenReturn(false); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, null, null); assertFalse(actualResult);  // record Mockito.when(CacheLoaderUtil.needRecordOrReplay(any())).thenReturn(true); Mockito.when(ContextManager.needRecord()).thenReturn(true); DynamicClassExtractor extractor = new DynamicClassExtractor(test1, new Object[]{"mock"}, "#val", null); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, extractor, null); assertFalse(actualResult);  // replay Mockito.when(ContextManager.needRecord()).thenReturn(false); Mockito.when(ContextManager.needReplay()).thenReturn(true); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, extractor, null); "<AssertPlaceHolder>"; } }
onEnter(@Advice.Argument(2) Method method, @Advice.Argument(3) Object[] args, @Advice.Local("extractor") DynamicClassExtractor extractor, @Advice.Local("mockResult") MockResult mockResult) { // only record and replay non-void method if (Void.TYPE.equals(method.getReturnType())) { return false; }  if (ContextManager.needRecordOrReplay() && CacheLoaderUtil.needRecordOrReplay(method)) { Cacheable cacheable = method.getDeclaredAnnotation(Cacheable.class); String keyExpression = cacheable != null ? cacheable.key() : null; extractor = new DynamicClassExtractor(method, args, keyExpression, null); } if (extractor != null && ContextManager.needReplay()) { mockResult = extractor.replayOrRealCall(); return mockResult != null && mockResult.notIgnoreMockResult(); } if (ContextManager.needRecord()) { RepeatedCollectManager.enter(); } return false; }
[*] target: assertTrue(actualResult)
[-] pred: org. junit. Assert. assertTrue ( actualResult )
************************************
************************************
[+] input: testReturnSubstringWithCodon4() { String expectedResult = this.expectedCodon4; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon4); "<AssertPlaceHolder>"; }
returnSubstring(String dnaString, int index) { return dnaString.substring(index, index + 3).toUpperCase(); }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
************************************
[+] input: testCheckServiceDependency() { // Setup final Result expectedResult = new Result(); expectedResult.setCode(0); expectedResult.setMsg("msg"); expectedResult.setData("data");  // Configure ClusterServiceInstanceService.listRunningServiceInstance(...). final ClusterServiceInstanceEntity clusterServiceInstanceEntity = new ClusterServiceInstanceEntity(); clusterServiceInstanceEntity.setId(0); clusterServiceInstanceEntity.setClusterId(0); clusterServiceInstanceEntity.setServiceName("serviceName"); clusterServiceInstanceEntity.setLabel("label"); clusterServiceInstanceEntity.setServiceState(ServiceState.WAIT_INSTALL); clusterServiceInstanceEntity.setServiceStateCode(0); clusterServiceInstanceEntity.setUpdateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setCreateTime(new GregorianCalendar(2020, Calendar.JANUARY, 1).getTime()); clusterServiceInstanceEntity.setNeedRestart(NeedRestart.NO); clusterServiceInstanceEntity.setFrameServiceId(0); clusterServiceInstanceEntity.setDashboardUrl("dashboardUrl"); clusterServiceInstanceEntity.setAlertNum(0); clusterServiceInstanceEntity.setSortNum(0); final List<ClusterServiceInstanceEntity> serviceInstanceEntityList = Arrays.asList( clusterServiceInstanceEntity); when(mockServiceInstanceService.listRunningServiceInstance(0)).thenReturn(serviceInstanceEntityList);  // Configure FrameServiceService.listServices(...). final FrameServiceEntity frameServiceEntity = new FrameServiceEntity(); frameServiceEntity.setId(0); frameServiceEntity.setFrameId(0); frameServiceEntity.setServiceName("serviceName"); frameServiceEntity.setLabel("label"); frameServiceEntity.setServiceVersion("serviceVersion"); frameServiceEntity.setServiceDesc("serviceDesc"); frameServiceEntity.setPackageName("packageName"); frameServiceEntity.setDependencies("dependencies"); frameServiceEntity.setServiceJson("serviceJson"); frameServiceEntity.setServiceJsonMd5("serviceJsonMd5"); frameServiceEntity.setServiceConfig("serviceConfig"); frameServiceEntity.setFrameCode("frameCode"); frameServiceEntity.setConfigFileJson("configFileJson"); frameServiceEntity.setConfigFileJsonMd5("configFileJsonMd5"); frameServiceEntity.setSortNum(0); final List<FrameServiceEntity> frameServiceEntities = Arrays.asList(frameServiceEntity); when(mockFrameService.listServices("serviceIds")).thenReturn(frameServiceEntities);  // Run the test final Result result = serviceInstallServiceImplUnderTest.checkServiceDependency(0, "serviceIds");  // Verify the results "<AssertPlaceHolder>"; }
checkServiceDependency(Integer clusterId, String serviceIds) { // List<ClusterServiceInstanceEntity> serviceInstanceList = serviceInstanceService.listRunningServiceInstance(clusterId); Map<String, ClusterServiceInstanceEntity> instanceMap = serviceInstanceList.stream() .collect( Collectors.toMap( ClusterServiceInstanceEntity::getServiceName, e -> e, (v1, v2) -> v1));  List<FrameServiceEntity> list = frameService.listServices(serviceIds); Map<String, FrameServiceEntity> serviceMap = list.stream() .collect( Collectors.toMap( FrameServiceEntity::getServiceName, e -> e, (v1, v2) -> v1)); if (!instanceMap.containsKey("ALERTMANAGER") && !serviceMap.containsKey("ALERTMANAGER")) { return Result.error( "service install depends on alertmanager ,please make sure you have selected it or that alertmanager is normal and running"); } if (!instanceMap.containsKey("GRAFANA") && !serviceMap.containsKey("GRAFANA")) { return Result.error( "service install depends on grafana ,please make sure you have selected it or that grafana is normal and running"); } if (!instanceMap.containsKey("PROMETHEUS") && !serviceMap.containsKey("PROMETHEUS")) { return Result.error( "service install depends on prometheus ,please make sure you have selected it or that prometheus is normal and running"); }  for (FrameServiceEntity frameServiceEntity : list) { for (String dependService : frameServiceEntity.getDependencies().split(",")) { if (StringUtils.isNotBlank(dependService) && !instanceMap.containsKey(dependService) && !serviceMap.containsKey(dependService)) { return Result.error( "" + frameServiceEntity.getServiceName() + " install depends on " + dependService + ",please make sure that you have selected it or that " + dependService + " is normal and running"); } } } return Result.success(); }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: Exception { final RunningJvmLoader runningJvmLoader = new RunningJvmLoader(); try (final TestJvm testJvm = TestJvm.of(SleepForeverProgram.class)) { final RunningJvm runningJvm = TestHelper.waitFor(() -> runningJvmLoader.list() .stream() .filter(r -> r.getId() .equals(String.valueOf( testJvm.getProcess() .pid()))) .findFirst() .orElse(null), 5000); final Properties properties = runningJvm.getSystemProperties(); Assertions."<AssertPlaceHolder>"; } }
getSystemProperties() throws AgentException { try { final VirtualMachine vm = VirtualMachine.attach(id); try { return vm.getSystemProperties(); } finally { vm.detach(); } } catch (AttachNotSupportedException | IOException e) { log.debug("Failed to load system properties", e); throw new AgentException(e.getMessage(), e); } }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
************************************
[+] input: configProperty() {  entityManager.createNativeQuery(""" INSERT INTO "REPOSITORY" ("ID", "ENABLED", "IDENTIFIER", "INTERNAL", "PASSWORD", "RESOLUTION_ORDER", "TYPE", "URL") VALUES (1, 'true', 'central', 'false', 'null', 2, 'MAVEN', 'https://repo1.maven.org/maven2/'); """).executeUpdate(); entityManager.createNativeQuery(""" INSERT INTO "REPOSITORY" ("ID", "ENABLED", "IDENTIFIER", "INTERNAL", "PASSWORD", "RESOLUTION_ORDER", "TYPE", "URL") VALUES (2, 'true', 'central2', 'false', 'null', 1, 'MAVEN', 'https://repo1.maven.org/maven2/123'); """).executeUpdate(); final List<Repository> config= repository .findEnabledRepositoriesByType(RepositoryType.MAVEN); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, config.get(0).getResolutionOrder()); Assertions.assertEquals(2, config.get(1).getResolutionOrder()); }
findEnabledRepositoriesByType(final RepositoryType type) { return find("type = :type AND enabled = :enabled ORDER BY resolutionOrder ASC", Parameters.with("type", type).and("enabled", true)) .withHint(HINT_READ_ONLY, true) .list(); }
[*] target: assertEquals(2, config.size())
[-] pred: org. junit. Assert. assertEquals ( 2, config. size ( ) )
************************************
************************************
[+] input: getActivityLogForTeamOverview() { ChartsJsOverview chartsJsOverview = new ChartsJsOverview(); TeamOverview expected = new TeamOverview(); expected.setTopicsPerTeamPerEnvOverview(chartsJsOverview); expected.setActivityLogOverview(chartsJsOverview);  Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME)) .thenReturn(TestConstants.TENANT_ID); Mockito.when(commonUtilsService.getTeamId(TestConstants.USERNAME)) .thenReturn(TestConstants.TEAM_ID); Mockito.doReturn(chartsJsOverview) .when(analyticsControllerService) .getTopicsPerTeamEnvOverview(TestConstants.TENANT_ID); Mockito.doReturn(chartsJsOverview) .when(analyticsControllerService) .getActivityLogOverview(TestConstants.TEAM_ID, 101, NUMBER_OF_DAYS);  TeamOverview actual = analyticsControllerService.getActivityLogForTeamOverview("true", NUMBER_OF_DAYS); Assertions."<AssertPlaceHolder>"; }
getActivityLogForTeamOverview(String forTeam, int numberOfDays) { TeamOverview teamOverview = new TeamOverview(); final String currentUserName = getCurrentUserName(); Integer userTeamId = commonUtilsService.getTeamId(currentUserName);  teamOverview.setTopicsPerTeamPerEnvOverview( getTopicsPerTeamEnvOverview(commonUtilsService.getTenantId(currentUserName))); if (forTeam != null && forTeam.equals("true")) { teamOverview.setActivityLogOverview(getActivityLogOverview(userTeamId, 101, numberOfDays)); }  return teamOverview; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testQueryWorkerByProcessIdWithId() { String processId = "111"; WorkerDto workerDto = mock(WorkerDto.class); Query query = Query.query(Criteria.where("process_id").is(processId).and("worker_type").is("connector")); doReturn(workerDto).when(workerService).findOne(query); WorkerDto actual = workerService.queryWorkerByProcessId(processId); "<AssertPlaceHolder>"; }
queryWorkerByProcessId(String processId);
[*] target: assertEquals(workerDto,actual)
[-] pred: org. junit. Assert. assertEquals ( workerDto, actual )
************************************
************************************
[+] input: testGetTaskDtoIsomorphismTwoNodeAndAllNodeAreDataParentNodeButDataTypeNotEquals() { when(nodeList.size()).thenReturn(2); DataParentNode node1 = mock(DataParentNode.class); when(node1.getDatabaseType()).thenReturn("mock-type-cache"); when(nodeList.get(0)).thenReturn(node1);  DataParentNode node2 = mock(DataParentNode.class); when(node2.getDatabaseType()).thenReturn("mock-type"); when(nodeList.get(1)).thenReturn(node2); boolean isomorphism = dag.getTaskDtoIsomorphism(nodeList); Assertions."<AssertPlaceHolder>"; verify(nodeList, times(1)).size(); verify(nodeList, times(1)).get(0); verify(nodeList, times(1)).get(1); verify(node2, times(1)).getDatabaseType(); verify(node2, times(1)).getDatabaseType(); }
getTaskDtoIsomorphism(List<Node> nodes) { if (null == nodes || nodes.size() != 2) { return false; } Node node1 = nodes.get(0); if (!(node1 instanceof DataParentNode)) return false; Node node2 = nodes.get(1); if (!(node2 instanceof DataParentNode)) return false; DataParentNode dataParentNode1 = (DataParentNode)node1; DataParentNode dataParentNode2 = (DataParentNode)node2; String databaseType = String.valueOf(dataParentNode1.getDatabaseType()); return databaseType.equals(dataParentNode2.getDatabaseType()); }
[*] target: assertFalse(isomorphism)
[-] pred: org. junit. Assert. assertFalse ( isomorphism )
************************************
************************************
[+] input: shouldMaskString() { try (MockedStatic<Environment> mockedEnvironment = mockStatic(Environment.class)) { mockedEnvironment.when(Environment::getCurrent).thenReturn(env); when(env.getWebforjHelper()).thenReturn(bridge);  String input = "qw12"; String mask = "AA-00"; String expected = "QW-12";  when(bridge.maskString(input, mask)).thenReturn(expected);  String result = MaskDecorator.forString(input, mask);  "<AssertPlaceHolder>"; } }
forString(String input, String mask) { Objects.requireNonNull(input, INPUT_CANNOT_BE_NULL); Objects.requireNonNull(mask, MASK_CANNOT_BE_NULL);  Environment env = Environment.getCurrent(); return env.getWebforjHelper().maskString(input, mask); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testBasicForeach() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("foreach-basic-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testForeach"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testForeach");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND (name = 'Jonathan')";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Jonathan", "Mcintosh"]}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND (\n" + "    name = 'Jonathan'\n" + "    OR name = 'Fuji'\n" + "  )";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Jonathan","Mcintosh", "Fuji"]}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND ()";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Mcintosh"]}")); }
parse() {  Map<String, SqlSource> sqlSourceMap = new HashMap<>();  XNode context = this.parser.evalNode("/mapper");  String namespace = context.getStringAttribute("namespace");  sqlElement(context.evalNodes("/mapper/sql"));  List<XNode> statements = context.evalNodes("select|insert|update|delete");  for (XNode node : statements) {  XMLStatementBuilder statementBuilder = new XMLStatementBuilder(node, sqlFragments); SqlSource sqlSource = statementBuilder.parseStatementNode();  String id = node.getStringAttribute("id"); String methodName = (namespace == null || namespace.length() == 0) ? id : String.format("%s.%s", namespace, id);  sqlSourceMap.put(methodName, sqlSource); }  return sqlSourceMap;  }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
************************************
[+] input: IOException { DynamicKafkaSourceSplitSerializer serializer = new DynamicKafkaSourceSplitSerializer(); DynamicKafkaSourceSplit dynamicKafkaSourceSplit = new DynamicKafkaSourceSplit( "test-cluster", new KafkaPartitionSplit(new TopicPartition("test-topic", 3), 1)); DynamicKafkaSourceSplit dynamicKafkaSourceSplitAfterSerde = serializer.deserialize(1, serializer.serialize(dynamicKafkaSourceSplit)); "<AssertPlaceHolder>"; }
serialize(DynamicKafkaSourceSplit split) throws IOException { try (ByteArrayOutputStream baos = new ByteArrayOutputStream(); DataOutputStream out = new DataOutputStream(baos)) { out.writeUTF(split.getKafkaClusterId()); out.writeInt(kafkaPartitionSplitSerializer.getVersion()); out.write(kafkaPartitionSplitSerializer.serialize(split.getKafkaPartitionSplit())); out.flush(); return baos.toByteArray(); } }
[*] target: assertEquals(dynamicKafkaSourceSplit, dynamicKafkaSourceSplitAfterSerde)
[-] pred: org. junit. Assert. assertEquals ( dynamicKafkaSourceSplit, dynamicKafkaSourceSplitAfterSerde )
************************************
************************************
[+] input: Exception { FlinkDeployment flinkApp = TestUtils.buildApplicationCluster(); ObjectMeta deployMeta = flinkApp.getMetadata(); FlinkDeploymentStatus status = flinkApp.getStatus(); FlinkDeploymentSpec spec = flinkApp.getSpec(); Configuration deployConfig = configManager.getDeployConfig(deployMeta, spec);  status.getJobStatus().setState(org.apache.flink.api.common.JobStatus.FINISHED.name()); status.setJobManagerDeploymentStatus(JobManagerDeploymentStatus.READY); reconciler .getReconciler() .deploy(getResourceContext(flinkApp), spec, deployConfig, Optional.empty(), false);  final List<Map<String, String>> expectedOwnerReferences = List.of(TestUtils.generateTestOwnerReferenceMap(flinkApp)); List<Map<String, String>> or = deployConfig.get(KubernetesConfigOptions.JOB_MANAGER_OWNER_REFERENCE); Assertions."<AssertPlaceHolder>"; }
deploy( FlinkResourceContext<FlinkDeployment> ctx, FlinkDeploymentSpec spec, Configuration deployConfig, Optional<String> savepoint, boolean requireHaMetadata) throws Exception { var cr = ctx.getResource(); setOwnerReference(cr, deployConfig); ctx.getFlinkService().submitSessionCluster(deployConfig); cr.getStatus().setJobManagerDeploymentStatus(JobManagerDeploymentStatus.DEPLOYING); IngressUtils.updateIngressRules( cr.getMetadata(), spec, deployConfig, ctx.getKubernetesClient()); }
[*] target: assertEquals(expectedOwnerReferences, or)
[-] pred: org. junit. Assert. assertEquals ( expectedOwnerReferences, or )
************************************
************************************
[+] input: testCheckWhenIsSameDept() { DeptTreeDataPermissionChecker checker = new DeptTreeDataPermissionChecker(deptService);  when(deptService.isChildOfTheDept(any(), any())).thenReturn(false); when(loginUser.getDeptId()).thenReturn(1L); DataCondition dataCondition = new DataCondition(); dataCondition.setTargetDeptId(1L);  boolean check = checker.check(loginUser, dataCondition);  "<AssertPlaceHolder>"; }
check(SystemLoginUser loginUser, DataCondition condition) { if (condition == null || loginUser == null) { return false; }  if (loginUser.getDeptId() == null || condition.getTargetDeptId() == null) { return false; }  Long currentDeptId = loginUser.getDeptId(); Long targetDeptId = condition.getTargetDeptId();  boolean isContainsTargetDept = deptService.isChildOfTheDept(loginUser.getDeptId(), targetDeptId); boolean isSameDept = Objects.equals(currentDeptId, targetDeptId);  return isContainsTargetDept || isSameDept; }
[*] target: assertTrue(check)
[-] pred: org. junit. Assert. assertTrue ( check )
************************************
************************************
[+] input: parseDateTime6() { LocalDateTime localDateTime = LocalDateTime.of(2022, 1, 1, 0, 0, 0); String str1 = "2022 ";  LocalDateTime localDateTime1 = ExcelDateParseUtils.parseDateTime(str1);  Assertions."<AssertPlaceHolder>";  }
parseDateTime(String str) { return parseDateTimeWithPosition(str.replaceAll("\\s+", " ").trim()); }
[*] target: assertEquals(localDateTime, localDateTime1)
[-] pred: org. junit. Assert. assertEquals ( localDateTime, localDateTime1 )
************************************
************************************
[+] input: testGetProperties() { Properties properties = ConfigLoader.getProperties(); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(properties.getProperty("openjob.worker.test"), "test"); }
getProperties() { return PROPERTIES; }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
************************************
[+] input: shouldTransformToComponentWithValidLocalDate() { LocalDate date = LocalDate.of(2005, 3, 4); int expectedJulianDate = 2453434; int result = transformer.transformToComponent(date); "<AssertPlaceHolder>"; }
transformToComponent(LocalDate modelValue) { try { if (modelValue == null) { return -1; }  int year = modelValue.getYear(); int month = modelValue.getMonthValue(); int day = modelValue.getDayOfMonth();  boolean leap = isLeapYear(year);  int num = year - 1; num = (num * 365) + (num / 4) - (num / 100) + (num / 400);  day += ((3055 * (month + 2)) / 100) - 91; if (month > 2) { if (leap) { day--; } else { day -= 2; } }  return num + day + 1721425; } catch (Exception e) { throw new TransformationException("Error transforming model value to component value"); } }
[*] target: assertEquals(expectedJulianDate, result)
[-] pred: org. junit. Assert. assertEquals ( expectedJulianDate, result )
************************************
************************************
[+] input: givenClassWithModifiersButWithoutTypeParameters() { List<String> toVerify = classOrInterface() .asClass() .withModifiers(PUBLIC, ABSTRACT) .withName("Device") .withBody( "public int capacity = 34;", "public boolean hasPower = true;" ) .lines();  List<String> expected = asList( "public abstract class Device {", "", "    public int capacity = 34;", "    public boolean hasPower = true;", "", "}" );  "<AssertPlaceHolder>"; }
lines() { List<String> result = new ArrayList<>(); result.add( String.join( SPACE, modifiersGenerator.isEmpty() ? type.toString() : modifiersGenerator.generate() + SPACE + type.toString(), name + typeParametersGenerator.generate(), OPEN_BRACE ) ); result.add(EMPTY_LINE); result.addAll(bodyGenerator.indent().lines()); result.add(EMPTY_LINE); result.add(CLOSE_BRACE); return result; }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testCheckSupplyAmount_withValidSupply() { Money supply = Money.wons(60000L); Long discount = discountAmount; Long minimum = minimumCost;  Money expectedDiscountAmount = Money.wons(10000L); Money actualDiscountAmount = issuedCoupon.checkSupplyAmount(supply, discount, minimum);  "<AssertPlaceHolder>"; }
checkSupplyAmount(Money supply, Long discount, Long minimum) { if (supply.isLessThan(Money.wons(discount))) { throw SupplyLessThenDiscountException.EXCEPTION; } if (supply.isLessThan(Money.wons(minimum))) { throw SupplyLessThenMinimumException.EXCEPTION; } return Money.wons(discount); }
[*] target: assertEquals(expectedDiscountAmount, actualDiscountAmount)
[-] pred: org. junit. Assert. assertEquals ( expectedDiscountAmount, actualDiscountAmount )
************************************
************************************
[+] input: givenAbstractMethodWithReturnType() { List<String> toVerify = method() .withModifiers(PUBLIC, ABSTRACT) .withTypeParameters(T.extending(OBJECT), U.asTypeParameter()) .withReturnType(OPTIONAL.with(U)) .withName("map") .withParameter(OPTIONAL.with(T), "optional") .withParameter(FUNCTION.with(T, U), "fn") .lines();  List<String> expected = singletonList( "public abstract <T, U> java.util.Optional<U> map(java.util.Optional<T> optional, java.util.function.Function<T, U> fn);" );  "<AssertPlaceHolder>"; }
lines() { List<String> components = new ArrayList<>(); if (!modifiersGenerator.isEmpty()) { components.add(modifiersGenerator.generate()); } if (!typeParametersGenerator.isEmpty()) { components.add(typeParametersGenerator.generate()); } components.add(optionalReturnType.map(TypeGenerator::generateFrom).orElse(VOID)); components.add(name + parametersGenerator.generate()); String methodDeclaration = components.stream().collect(joining(SPACE));  return optionalBodyGenerator .map(bodyGenerator -> { List<String> result = new ArrayList<>(); result.add(methodDeclaration + SPACE + OPEN_BRACE); result.addAll(bodyGenerator.indent().lines()); result.add(CLOSE_BRACE); return result; }) .orElse(asList(methodDeclaration + SEMICOLON)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: test_sqrt_5_to_timeseries_and_data() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.TIME_SERIES, "result", 3, true, false, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString()); when(telemetryService.saveAndNotify(any(), any(), any(TsKvEntry.class))) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAndNotify(any(), any(), any(TsKvEntry.class));  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var resultJson = JacksonUtil.toJsonNode(resultMsg.getData()); assertTrue(resultJson.has("result")); assertEquals(2.236, resultJson.get("result").asDouble(), 0.0); }
onMsg(TbContext ctx, TbMsg msg) { locks.computeIfAbsent(msg.getOriginator(), SemaphoreWithTbMsgQueue::new) .addToQueueAndTryProcess(msg, ctx, this::processMsgAsync); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
************************************
[+] input: testQueryStatusPageOrg() {  StatusPageOrg expectedOrg = new StatusPageOrg(); when(statusPageOrgDao.findAll()).thenReturn(List.of(expectedOrg));  StatusPageOrg actualOrg = statusPageService.queryStatusPageOrg();  "<AssertPlaceHolder>"; }
queryStatusPageOrg();
[*] target: assertEquals(expectedOrg, actualOrg)
[-] pred: org. junit. Assert. assertEquals ( expectedOrg, actualOrg )
************************************
************************************
[+] input: testIsNotUnwindProcess() { hazelcastTargetPdkBaseNode.unwindProcess = false; TapTable tapTable = mock(TapTable.class); AtomicBoolean atomicBoolean = new AtomicBoolean(false); doCallRealMethod().when(hazelcastTargetPdkBaseNode).createTable(tapTable, atomicBoolean,true); TableNode node = new TableNode(); node.setDisabled(false); when(hazelcastTargetPdkBaseNode.getNode()).thenReturn((Node) node); ConnectorNode connectorNode = mock(ConnectorNode.class); when(hazelcastTargetPdkBaseNode.getConnectorNode()).thenReturn(connectorNode); ConnectorFunctions connectorFunctions = mock(ConnectorFunctions.class); when(connectorNode.getConnectorFunctions()).thenReturn(connectorFunctions); when(connectorFunctions.getCreateTableFunction()).thenReturn(null); when(connectorFunctions.getCreateTableV2Function()).thenReturn(mock(CreateTableV2Function.class)); Connections connections = new Connections(); connections.setId("test"); when(dataProcessorContext.getTargetConn()).thenReturn(connections); boolean result = hazelcastTargetPdkBaseNode.createTable(tapTable, atomicBoolean,true); Assertions."<AssertPlaceHolder>"; }
createTable(TapTable tapTable, AtomicBoolean succeed,boolean init) { if (getNode().disabledNode()) { obsLogger.info("Target node has been disabled, task will skip: create table"); return false; } AtomicReference<TapCreateTableEvent> tapCreateTableEvent = new AtomicReference<>(); boolean createdTable; try { CreateTableFunction createTableFunction = getConnectorNode().getConnectorFunctions().getCreateTableFunction(); CreateTableV2Function createTableV2Function = getConnectorNode().getConnectorFunctions().getCreateTableV2Function(); createdTable = createTableV2Function != null || createTableFunction != null; TapTable finalTapTable = new TapTable(); if (createdTable) { handleTapTablePrimaryKeys(tapTable); BeanUtil.copyProperties(tapTable,finalTapTable); if(unwindProcess){ ignorePksAndIndices(finalTapTable, null); } tapCreateTableEvent.set(createTableEvent(finalTapTable)); executeDataFuncAspect(CreateTableFuncAspect.class, () -> new CreateTableFuncAspect() .createTableEvent(tapCreateTableEvent.get()) .setInit(init) .connectorContext(getConnectorNode().getConnectorContext()) .dataProcessorContext(dataProcessorContext) .start(), (createTableFuncAspect -> PDKInvocationMonitor.invoke(getConnectorNode(), PDKMethod.TARGET_CREATE_TABLE, () -> { if (createTableV2Function != null) { CreateTableOptions createTableOptions = createTableV2Function.createTable(getConnectorNode().getConnectorContext(), tapCreateTableEvent.get()); succeed.set(!createTableOptions.getTableExists()); if (createTableFuncAspect != null) createTableFuncAspect.createTableOptions(createTableOptions); } else { createTableFunction.createTable(getConnectorNode().getConnectorContext(), tapCreateTableEvent.get()); } }, TAG,buildErrorConsumer(tapCreateTableEvent.get().getTableId())))); clientMongoOperator.insertOne(Collections.singletonList(finalTapTable), ConnectorConstant.CONNECTION_COLLECTION + "/load/part/tables/" + dataProcessorContext.getTargetConn().getId()); } else { // only execute start function aspect so that it would be cheated as input AspectUtils.executeAspect(new CreateTableFuncAspect() .createTableEvent(tapCreateTableEvent.get()) .setInit(init) .connectorContext(getConnectorNode().getConnectorContext()) .dataProcessorContext(dataProcessorContext).state(NewFieldFuncAspect.STATE_START)); clientMongoOperator.insertOne(Collections.singletonList(tapTable), ConnectorConstant.CONNECTION_COLLECTION + "/load/part/tables/" + dataProcessorContext.getTargetConn().getId()); }  } catch (Throwable throwable) { Throwable matched = CommonUtils.matchThrowable(throwable, TapCodeException.class); if (null != matched) { throw (TapCodeException) matched; }else { throw new TapEventException(TaskTargetProcessorExCode_15.CREATE_TABLE_FAILED, "Table model: " + tapTable, throwable) .addEvent(tapCreateTableEvent.get()); } } return createdTable; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testEncryptDecrypt() { ReflectionTestUtils.setField( converter, ENCRYPTION_KEY_FIELD, RandomStringUtils.randomAlphabetic(VALID_KEY_LENGTH)); List<String> plaintextStrings = new ArrayList<>(); for (int index = 0; index < 10; index++) { plaintextStrings.add(RandomStringUtils.randomAlphanumeric(RandomUtils.nextInt(5, 30))); }  List<String> encryptedStrings = new ArrayList<>(); for (String plainText : plaintextStrings) { encryptedStrings.add(converter.convertToDatabaseColumn(plainText)); }  for (int index = 0; index < 10; index++) { String plaintext = plaintextStrings.get(index); String decryptedText = converter.convertToEntityAttribute(encryptedStrings.get(index)); "<AssertPlaceHolder>"; } }
convertToEntityAttribute(String cipherMessage) { Cipher cipher = getCipher(); Key key = getSecretKey(); byte[] cipherMessageBytes = Base64.getDecoder().decode(cipherMessage); try { AlgorithmParameterSpec paramSpec = new GCMParameterSpec(AUTH_TAG_LENGTH, cipherMessageBytes, 0, GCM_IV_LENGTH); cipher.init(Cipher.DECRYPT_MODE, key, paramSpec); byte[] plainText = cipher.doFinal(cipherMessageBytes, GCM_IV_LENGTH, cipherMessageBytes.length - GCM_IV_LENGTH); return new String(plainText, StandardCharsets.UTF_8); } catch (InvalidKeyException | InvalidAlgorithmParameterException | IllegalBlockSizeException | IllegalArgumentException | BadPaddingException e) { log.error("Failed to convert to entity attribute, reading encrypted value...", e); return cipherMessage; } }
[*] target: assertEquals(plaintext, decryptedText)
[-] pred: org. junit. Assert. assertEquals ( plaintext, decryptedText )
************************************
************************************
[+] input: testResolvePath() { String path = null; String expectedPath = null; String resolvedPath = null;  resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = ""; expectedPath = ""; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = "/abc/"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = "//abc///"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);   path = "//\\abc///"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); "<AssertPlaceHolder>"; }
normalizePath(final String path) {  if (isBlank(path)) { return path; }  String resolvedPath = path.trim();  while (resolvedPath.contains(BACK_SLASH)) { resolvedPath = replace(resolvedPath, BACK_SLASH, SLASH); }  while (resolvedPath.contains(DOUBLE_SLASH)) { resolvedPath = replace(resolvedPath, DOUBLE_SLASH, SLASH); } return resolvedPath; }
[*] target: assertEquals(expectedPath, resolvedPath)
[-] pred: org. junit. Assert. assertEquals ( expectedPath, resolvedPath )
************************************
************************************
[+] input: encode_ShouldReturnNull_WhenValueIsNull() { ByteBuffer result = codec.encode(null, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
encode(String value, @NotNull ProtocolVersion protocolVersion) { if (value == null) { return null; } else { BigDecimal decimalValue = new BigDecimal(value); return TypeCodecs.DECIMAL.encode(decimalValue, protocolVersion); } }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
************************************
[+] input: parse_ShouldParseStringToValueAndReturnAsString() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); String result = codec.parse(TypeCodecs.TIMESTAMP.format(value)); Assertions."<AssertPlaceHolder>"; }
format(String value) { Instant instantValue = LocalDateTime.parse(value, formatter).toInstant(zoneOffset); return TypeCodecs.TIMESTAMP.format(instantValue); }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
************************************
[+] input: testMessage2TapEventNullMessageEntity() { TapRecordEvent actual = hazelcastBaseNode.message2TapEvent(null); "<AssertPlaceHolder>"; }
message2TapEvent(MessageEntity messageEntity) { if (null == messageEntity) return null; TapRecordEvent tapRecordEvent; String op = messageEntity.getOp(); OperationType operationType = OperationType.fromOp(op); if (operationType == null) { throw new IllegalArgumentException(String.format("Unrecognized op type: %s", op)); } switch (operationType) { case INSERT: tapRecordEvent = new TapInsertRecordEvent(); ((TapInsertRecordEvent) tapRecordEvent).setAfter(messageEntity.getAfter()); break; case UPDATE: tapRecordEvent = new TapUpdateRecordEvent(); ((TapUpdateRecordEvent) tapRecordEvent).setBefore(messageEntity.getBefore()); ((TapUpdateRecordEvent) tapRecordEvent).setAfter(messageEntity.getAfter()); break; case DELETE: tapRecordEvent = new TapDeleteRecordEvent(); ((TapDeleteRecordEvent) tapRecordEvent).setBefore(messageEntity.getBefore()); break; default: tapRecordEvent = null; break; } if (null != tapRecordEvent) { tapRecordEvent.setTableId(messageEntity.getTableName()); tapRecordEvent.setReferenceTime(messageEntity.getTimestamp()); tapRecordEvent.setTime(messageEntity.getTime()); tapRecordEvent.setInfo(messageEntity.getInfo()); } return tapRecordEvent; }
[*] target: assertNull(actual)
[-] pred: org. junit. Assert. assertNull ( actual )
************************************
************************************
[+] input: validateGivenStaticInnerClassAsContainingClass() { ContainingClass toValidate = PackageName.of("nl.wernerdegroot.applicatives") .asPackage() .containingClass(modifiers(), ClassName.of("Outer"), A, B) .containingClass(modifiers(STATIC), ClassName.of("Inner"), C, D);  Validated<String, ClassValidator.Result> expected = Validated.valid(ClassValidator.Result.of(asList(C, D))); Validated<String, ClassValidator.Result> toVerify = ClassValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
validate(ContainingClass containingClass) {  // We check whether we're dealing with an outer class or a static inner class. // Why is this required? Consider the following scenario: // //   class Outer<A extends B, B> { //     class Inner<B> { //       ... //     } //   } // // It is impossible to collapse these three type parameters of these two classes into a // single list of type parameters without carefully renaming some of them to avoid shadowing. // Instead of going through all that effort for this extreme edge-case, I'm just going avoid // it completely. If we'd like to be more sophisticated we could try: // //  * To support only a single class with type parameters in the hierarchy //  * Only support multiple classes with type parameters if their names don't conflict //  * Only support conflicts if the type parameter that is shadowed can be removed //    completely (isn't used as upper bound for any of the other type parameters) if (!containingClass.isOuterClass() && !containingClass.isStaticInnerClass()) { return Validated.invalid("Only outer classes and static inner classes are currently supported"); } List<TypeParameter> typeParameters = containingClass.getTypeParameters();  return Validated.valid(Result.of(typeParameters)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: validateGivenOuterClassAsContainingClass() { ContainingClass toValidate = PackageName.of("nl.wernerdegroot.applicatives") .asPackage() .containingClass(modifiers(), ClassName.of("Outer"), A, B);  Validated<String, ClassValidator.Result> expected = Validated.valid(ClassValidator.Result.of(asList(A, B))); Validated<String, ClassValidator.Result> toVerify = ClassValidator.validate(toValidate);  "<AssertPlaceHolder>"; }
validate(ContainingClass containingClass) {  // We check whether we're dealing with an outer class or a static inner class. // Why is this required? Consider the following scenario: // //   class Outer<A extends B, B> { //     class Inner<B> { //       ... //     } //   } // // It is impossible to collapse these three type parameters of these two classes into a // single list of type parameters without carefully renaming some of them to avoid shadowing. // Instead of going through all that effort for this extreme edge-case, I'm just going avoid // it completely. If we'd like to be more sophisticated we could try: // //  * To support only a single class with type parameters in the hierarchy //  * Only support multiple classes with type parameters if their names don't conflict //  * Only support conflicts if the type parameter that is shadowed can be removed //    completely (isn't used as upper bound for any of the other type parameters) if (!containingClass.isOuterClass() && !containingClass.isStaticInnerClass()) { return Validated.invalid("Only outer classes and static inner classes are currently supported"); } List<TypeParameter> typeParameters = containingClass.getTypeParameters();  return Validated.valid(Result.of(typeParameters)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: givenObjectPath() { String toVerify = toTest() .withObjectPath("this", "value") .withObjectPath("selection") .withObjectPath("current") .getObjectPathGenerator() .generate();  String expected = "this.value.selection.current";  "<AssertPlaceHolder>"; }
generate() { return String.join(PERIOD, components); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testForDateTime() { Long expect = 1718953878000L; Object value = new DateTime(expect); Object actual = FieldProcessUtil.handleDateTime(value); "<AssertPlaceHolder>"; }
handleDateTime(Object value) { if (value instanceof DateTime) { value = ((DateTime) value).toEpochMilli(); } return value; }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
************************************
[+] input: decode_ShouldDecodeByteBufferToValueAndReturnAsString() { String valueAsString = "220412215715"; Instant value = LocalDateTime.parse(valueAsString, formatter).toInstant(zoneOffset); ByteBuffer byteBuffer = TypeCodecs.TIMESTAMP.encode(value, CqlConversion.PROTOCOL_VERSION);  String result = codec.decode(byteBuffer, CqlConversion.PROTOCOL_VERSION); Assertions."<AssertPlaceHolder>"; }
decode(ByteBuffer bytes, @NotNull ProtocolVersion protocolVersion) { Instant instantValue = TypeCodecs.TIMESTAMP.decode(bytes, protocolVersion); LocalDateTime localDateTime = LocalDateTime.ofInstant(instantValue, zoneOffset); return formatter.format(localDateTime); }
[*] target: assertEquals(valueAsString, result)
[-] pred: org. junit. Assert. assertEquals ( valueAsString, result )
************************************
************************************
[+] input: testReturnSubstringWithCodon8() { String expectedResult = this.expectedCodon8; String actualSubstringResult = returnSubstring(this.testInput, this.testCodon8); "<AssertPlaceHolder>"; }
returnSubstring(String dnaString, int index) { return dnaString.substring(index, index + 3).toUpperCase(); }
[*] target: assertEquals(expectedResult, actualSubstringResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualSubstringResult )
************************************
************************************
[+] input: IllegalAccessException { final List<ColumnSchema> columnSchemas = List.of( GeneralTestUtility.cleartextColumn("s1", "t1"), GeneralTestUtility.cleartextColumn("s1", "t2"), GeneralTestUtility.cleartextColumn("s2", "t3") ); final var tableSchema = generateMockTableSchema(false, columnSchemas); doCallRealMethod().when(tableSchema).getSourceAndTargetHeaders();  final Set<ColumnHeader> knownValid = Set.of( new ColumnHeader("s1"), new ColumnHeader("s2"), new ColumnHeader("t1"), new ColumnHeader("t2"), new ColumnHeader("t3") ); final var results = tableSchema.getSourceAndTargetHeaders(); "<AssertPlaceHolder>"; }
getSourceAndTargetHeaders() { return getColumns().stream() .flatMap(c -> Stream.of(c.getSourceHeader(), c.getTargetHeader())) .collect(Collectors.toSet()); }
[*] target: assertEquals(knownValid, results)
[-] pred: org. junit. Assert. assertEquals ( knownValid, results )
************************************
************************************
[+] input: testStripQuotesAtStartAndEndNoQuotes() { String input = "/home/user/file.txt"; String expected = input; String result = PathUtil.stripQuotesAtStartAndEnd(input);  "<AssertPlaceHolder>"; }
stripQuotesAtStartAndEnd(String path) { if (path.startsWith(""") && path.endsWith(""")) { return path.substring(1, path.length() - 1); }  return path; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testCollectFilteredFiles() { List<Path> collectedFiles = new ArrayList<>(); MavenProjectInput.walkDirectoryFiles( Paths.get("src/test/resources/test-folder"), collectedFiles, DEFAULT_GLOB, it -> it.getFileName() .toString() .endsWith("pom.xml")); "<AssertPlaceHolder>"; // pom is filtered out by the "mustBeSkipped" predicate }
walkDirectoryFiles(Path dir, List<Path> collectedFiles, String glob, Predicate<Path> mustBeSkipped) { if (!Files.isDirectory(dir)) { return; }  try { try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, glob)) { for (Path entry : stream) { if (mustBeSkipped.test(entry)) { continue; } File file = entry.toFile(); if (file.isFile() && !isHidden(entry) && isReadable(entry)) { collectedFiles.add(entry); } } } } catch (IOException e) { throw new RuntimeException("Cannot process directory: " + dir, e); } }
[*] target: assertEquals(0, collectedFiles.size())
[-] pred: org. junit. Assert. assertEquals ( 0, collectedFiles. size ( ) )
************************************
************************************
[+] input: givenValidClassAndMethodsContainingValidAccumulatorAndValidInitializer() { ContainingClass containingClass = getValidContainingClass();  Method initializer = getInitializer( withAnnotations(INITIALIZER_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withToInitializeTypeConstructor(LIST.with(placeholder().covariant())), withToInitializeTypeConstructor(ARRAY_LIST.with(placeholder().invariant())) );  Method accumulator = getAccumulator( withAnnotations(ACCUMULATOR_FULLY_QUALIFIED_NAME), withModifiers(PUBLIC), withInputTypeConstructor(LIST.with(placeholder().covariant())), withPartiallyAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().covariant())), withAccumulatedTypeConstructor(ARRAY_LIST.with(placeholder().invariant())) );  Validated<Log, Validator.Result> expected = Validated.valid( Validator.Result.of( containingClass.getTypeParameters(), Optional.of(Initializer.of(initializer.getName(), LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().invariant()))), Accumulator.of( accumulator.getName(), LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().covariant()), ARRAY_LIST.with(placeholder().invariant()) ), Optional.empty() ) );  Validated<Log, Validator.Result> toVerify = Validator.validate(containingClass, asList(accumulator, initializer), new CovariantParametersAndTypeParametersValidator());  "<AssertPlaceHolder>"; }
of(List<TypeParameter> classTypeParameters, Optional<Initializer> optionalInitializer, Accumulator accumulator, Optional<Finalizer> optionalFinalizer) { return new Result(classTypeParameters, optionalInitializer, accumulator, optionalFinalizer); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: applyGivenTypeConstructorWithPlaceholder() { ArrayType expected = new ArrayType(STRING_TYPE); ArrayType toVerify = new ArrayTypeConstructor(new PlaceholderTypeConstructor()).apply(STRING_TYPE);  "<AssertPlaceHolder>"; }
apply(Type toApplyTo) { return Type.array(type.apply(toApplyTo)); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { GroupKey id1 = new GroupKey("group-1"); GroupKey id2 = new GroupKey("group-1");  assertTrue(id1.equals(id2)); "<AssertPlaceHolder>"; }
hashCode() { return Objects.hash(this.id); }
[*] target: assertEquals(id1.hashCode(), id2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( id1. hashCode ( ), id2. hashCode ( ) )
************************************
************************************
[+] input: testStripQuotesAtStartAndEndSingleQuoteStart() { String input = ""/home/user/file.txt"; String expected = input; String result = PathUtil.stripQuotesAtStartAndEnd(input);  "<AssertPlaceHolder>"; }
stripQuotesAtStartAndEnd(String path) { if (path.startsWith(""") && path.endsWith(""")) { return path.substring(1, path.length() - 1); }  return path; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: testOnChannelActive() {  RemotingClient remotingClient = mock(RemotingClient.class); ReflectionTestUtils.setField(collectServer, "remotingClient", remotingClient);  Channel channel = mock(Channel.class); when(collectJobService.getCollectorIdentity()).thenReturn("collector1"); when(collectJobService.getCollectorMode()).thenReturn("mode1"); when(infoProperties.getIp()).thenReturn("127.0.0.1"); when(infoProperties.getVersion()).thenReturn("1.0");  collectNettyEventListener.onChannelActive(channel);  verify(timerDispatch, times(1)).goOnline(); verify(remotingClient, times(1)).sendMsg(any(ClusterMsg.Message.class));  ScheduledExecutorService scheduledExecutor = (ScheduledExecutorService) ReflectionTestUtils.getField(collectServer, "scheduledExecutor"); "<AssertPlaceHolder>"; }
sendMsg(final ClusterMsg.Message message) { this.remotingClient.sendMsg(message); }
[*] target: assertNotNull(scheduledExecutor)
[-] pred: org. junit. Assert. assertNotNull ( scheduledExecutor )
************************************
************************************
[+] input: testForLong() { Object value = 1L; Object actual = FieldProcessUtil.handleDateTime(value); "<AssertPlaceHolder>"; }
handleDateTime(Object value) { if (value instanceof DateTime) { value = ((DateTime) value).toEpochMilli(); } return value; }
[*] target: assertEquals(value, actual)
[-] pred: org. junit. Assert. assertEquals ( value, actual )
************************************
************************************
[+] input: testDeleteFileOfDirectory() { //            File file = new File("temp"); //            if (file.mkdir() && file.exists()) { //                utils.deleteFile(file, new TapLog()); //            } //            Assertions."<AssertPlaceHolder>"; //        }
deleteFile(File file, Log logger) { if (file.exists()) { try { if (file.isDirectory()) { FileUtils.deleteDirectory(file); } else { FileUtils.delete(file); } } catch (Exception e){ logger.info("file not be delete, file: {}, message: {}", file.getAbsolutePath(), e.getMessage()); } } }
[*] target: assertFalse(file.exists())
[-] pred: org. junit. Assert. assertFalse ( file. exists ( ) )
************************************
************************************
[+] input: combine() { Map<Integer, String> left = new HashMap<>(); left.put(1, "One"); left.put(2, "Two"); left.put(3, "Three");  Map<Integer, String> right = new HashMap<>(); right.put(2, "Twee"); right.put(3, "Drie"); right.put(4, "Vier");  Map<Integer, String> expected = new HashMap<>(); expected.put(2, "TwoTwee"); expected.put(3, "ThreeDrie"); Map<Integer, String> toVerify = Maps.<Integer>instance().compose(left, right, String::concat);  "<AssertPlaceHolder>"; }
compose(MergeMap<K, ? extends A> left, Map<K, ? extends B> right, BiFunction<? super A, ? super B, ? extends C> fn) { return MergeMap.of(left, right, fn); }
[*] target: assertEquals(expected, toVerify)
[-] pred: org. junit. Assert. assertEquals ( expected, toVerify )
************************************
************************************
[+] input: testLocalNode() { DiscoveryExtensionNode expectedLocalNode = extensionsRunner.getExtensionNode(); DiscoveryExtensionNode localNode = sdkClusterService.localNode(); "<AssertPlaceHolder>"; }
localNode() { return extensionsRunner.getExtensionNode(); }
[*] target: assertEquals(expectedLocalNode, localNode)
[-] pred: org. junit. Assert. assertEquals ( expectedLocalNode, localNode )
************************************
************************************
[+] input: createCustomer() { //given Customer customer = new Customer(); customer.setId("1"); customer.setCustomerFullName("John"); customer.setCustomerType("ACTIVE");  CustomerEntity customerEntity = new CustomerEntity(); customerEntity.setId("1"); customerEntity.setCustomerType("ACTIVE"); customerEntity.setCustomerFullName("John");  //when when(customerMapper.toEntity(customer)).thenReturn(customerEntity); when(customerRepository.save(any())).thenReturn(customerEntity); when(customerMapper.toDto(customerEntity)).thenReturn(customer);  Customer customer2 = customerService.createCustomer(customer);  //then verify(customerRepository, times(1)).save(any()); "<AssertPlaceHolder>"; }
createCustomer(Customer customer);  /** * return all customer ref instances in the database * * @return List<CustomerRef>. Please, see the {@link evrentan.examples.springbootprojectexample.dto.CustomerRef}
[*] target: assertEquals(customer, customer2)
[-] pred: org. junit. Assert. assertEquals ( customer, customer2 )
************************************
************************************
[+] input: getTopicsPerTeamEnvOverview() { ChartsJsOverview expected = new ChartsJsOverview();  Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME); Mockito.when(commonUtilsService.getTeamId(TestConstants.USERNAME)) .thenReturn(TestConstants.TEAM_ID); Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc); Mockito.when( handleDbRequestsJdbc.getAllTopicsForTeamGroupByEnv( TestConstants.TEAM_ID, TestConstants.TENANT_ID)) .thenReturn(TestConstants.TOPICS_COUNT_STRING_BY_ENV_ID_INT); Mockito.when( commonUtilsService.getChartsJsOverview( anyList(), anyString(), anyString(), anyString(), anyString(), eq(TestConstants.TENANT_ID))) .thenReturn(expected);  ChartsJsOverview actual = analyticsControllerService.getTopicsPerTeamEnvOverview(TestConstants.TENANT_ID);  Assertions."<AssertPlaceHolder>"; }
getTopicsPerTeamEnvOverview(int tenantId) { final String currentUserName = getCurrentUserName(); Integer userTeamId = commonUtilsService.getTeamId(currentUserName); List<CommonUtilsService.ChartsOverviewItem<String, Integer>> teamCountList = null; if (currentUserName != null) { teamCountList = manageDatabase.getHandleDbRequests().getAllTopicsForTeamGroupByEnv(userTeamId, tenantId); }  String title = "Topics per cluster (" + manageDatabase.getTeamNameFromTeamId(tenantId, userTeamId) + ")";  return commonUtilsService.getChartsJsOverview( teamCountList, title, MapConstants.CLUSTER_KEY, "Clusters", "Topics", tenantId); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: MessagingException { doNothing().when(log).error(anyString(), any(Exception.class)); when(mu.connectSMTP(any(Session.class))).thenCallRealMethod(); doCallRealMethod().when(mu).closeTransport(any(Transport.class)); doNothing().when(transport).connect(anyString(), anyInt(), anyString(), anyString()); doNothing().when(mu).initMailConfig(); doNothing().when(transport).close(); Session session = mock(Session.class); InternetAddress[] internetAddressList = new InternetAddress[0]; Address[] addresses = new Address[0];  doAnswer(a -> { throw new IOException(""); }).when(transport).sendMessage(any(MimeMessage.class), any(Address[].class));  doNothing().when(session).setDebug(true); when(session.getTransport("smtp")).thenReturn(transport); try(MockedStatic<Session> s = mockStatic(Session.class); MockedConstruction<InternetAddress> i = mockConstruction(InternetAddress.class, (ic, c) -> {}); MockedConstruction<MimeMessage> m = mockConstruction(MimeMessage.class, (mk,c) -> { doNothing().when(mk).setFrom(any(InternetAddress.class)); doNothing().when(mk).setRecipients(Message.RecipientType.TO, internetAddressList); doNothing().when(mk).setContent(anyString(), anyString()); doNothing().when(mk).setSentDate(any(Date.class)); doNothing().when(mk).saveChanges(); when(mk.getAllRecipients()).thenReturn(addresses); })) { s.when(() -> Session.getDefaultInstance(any(Properties.class))).thenReturn(session); SendStatus sendStatus = mu.sendValidateCodeForResetPWD("", "", ""); Assertions."<AssertPlaceHolder>"; } }
sendValidateCodeForResetPWD(String to, String username, String validateCode) { SendStatus sendStatus = new SendStatus(SEND_STATUS_FALSE, ""); String html = readHtmlToString("resetPasswordTemplate.html"); Document doc = Jsoup.parse(html); doc.getElementById(USER_NAME).html(username); doc.getElementById("code").html(validateCode); doc.getElementById("account").html(to); doc.getElementById("validateTimes").html("5"); sendEmail(doc, sendStatus, Lists.newArrayList(to), "修改密码-验证码", "Send validate code email failed before reset password"); return sendStatus; }
[*] target: assertNotNull(sendStatus)
[-] pred: org. junit. Assert. assertNotNull ( sendStatus )
************************************
************************************
[+] input: IOException { VideoDetail videoDetail = client.getVideoDetail("BV1Jx411o7aW", 19); Assertions."<AssertPlaceHolder>"; VideoInfo videoInfo = videoDetail.getVideoInfo(); Assertions.assertNotNull(videoInfo); VideoData videoData = videoInfo.getVideoData(); Assertions.assertNotNull(videoData); BilibiliResponse<PlayInfo> playInfoResponse = videoDetail.getPlayInfoResponse(); Assertions.assertNotNull(playInfoResponse); Assertions.assertNotNull(playInfoResponse.getCode()); if (ErrorCode.SUCCESS == playInfoResponse.getCode()) { PlayInfo playInfo = playInfoResponse.getData(); Assertions.assertNotNull(playInfo); PlayDash dash = playInfo.getDash(); Assertions.assertNotNull(dash); List<PlayDashInfo> videoList = dash.getVideo(); List<PlayDashInfo> audioList = dash.getAudio(); Assertions.assertNotNull(videoList); Assertions.assertFalse(videoList.isEmpty()); Assertions.assertNotNull(audioList); Assertions.assertFalse(audioList.isEmpty()); String videoDataMessage = String.format("BV:%s, title:%s, desc:%s", videoInfo.getBvid(), videoData.getTitle(), videoData.getDesc()); logger.info(videoDataMessage); Season season = videoData.getUgcSeason(); if (Objects.nonNull(season)) { String seasonMessage = String.format("Season title:%s, intro:%s, cover:%s", season.getTitle(), season.getIntro(), season.getCover()); logger.info(seasonMessage); if (Objects.nonNull(season.getSections())) { for (SeasonSection section : season.getSections()) { String sectionMessage = String.format("Section title:%s, type:%d, isActive:%b", section.getTitle(), section.getType(), section.getActive()); logger.info(sectionMessage); if (Objects.nonNull(section.getEpisodes())) { for (SectionEpisode episode : section.getEpisodes()) { String episodeMessage = String.format("Episode title:%s, bv:%s", episode.getTitle(), episode.getBvId()); if (Objects.nonNull(episode.getArc())) { episodeMessage += String.format(", arc.pic:%s", episode.getArc().getPic()); } logger.info(episodeMessage); } } } } } for (PlayDashInfo video : videoList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", video.getMimeType(), video.getCodecs(), video.getId(), video.getBaseUrl()); logger.info(message); } for (PlayDashInfo audio : audioList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", audio.getMimeType(), audio.getCodecs(), audio.getId(), audio.getBaseUrl()); logger.info(message); } } else { logger.info("get play info fail:" + playInfoResponse.getMessage()); } }
getVideoDetail(String bv, int page) throws IOException { // todo get subtitle_url from https://api.bilibili.com/x/player/wbi/v2?aid=xxxx&cid=xxx String url = ApiUtil.fillUrl(ApiUrlContainer.VIDEO_URL, bv, page); String html = httpJsonClient.get(url, requestHeader); VideoInfo videoInfo = parseVideoInfo(html); BilibiliResponse<PlayInfo> playInfo = parsePlayInfo(html); VideoDetail videoDetail = new VideoDetail(); videoDetail.setVideoInfo(videoInfo); videoDetail.setPlayInfoResponse(playInfo); videoDetail.setUrl(url); return videoDetail; }
[*] target: assertNotNull(videoDetail)
[-] pred: org. junit. Assert. assertNotNull ( videoDetail )
************************************
************************************
