[+] input: SQLException { pstmt_insert.setTimestamp(1, new Timestamp(System.currentTimeMillis())); pstmt_insert.setInt(2, 10086); int ret = pstmt_insert.executeUpdate(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: InterruptedException { AtomicBoolean hasEx = new AtomicBoolean(false); TaskKit.runOnce(new OnceTaskListener() { @Override public void onUpdate() { throw new RuntimeException("hello exception"); }  @Override public void onException(Throwable e) { hasEx.set(true); } }, 10, TimeUnit.MILLISECONDS);  TimeUnit.MILLISECONDS.sleep(200); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(hasEx.get())
[-] pred: org. junit. Assert. assertTrue ( hasEx. get ( ) )
************************************
[+] input: testHandlerMerge_MergeSame() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(0, 15, new ImmutableExceptionHandler(null, 6)); tlb.addHandler(10, 20, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(20, 30, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(25, 40, new ImmutableExceptionHandler(null, 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 10, ImmutableList.of( new ImmutableExceptionHandler(null, 6))), new ImmutableTryBlock(10, 5, ImmutableList.of( new ImmutableExceptionHandler(null, 6), new ImmutableExceptionHandler("LException1;", 5))), new ImmutableTryBlock(15, 10, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5))), new ImmutableTryBlock(25, 5, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5), new ImmutableExceptionHandler(null, 6))), new ImmutableTryBlock(30, 10, ImmutableList.of( new ImmutableExceptionHandler(null, 6))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testExtractDefaultValueQuotes() { String expectDefault = "100"; List<String> columnSpecs = Arrays.asList("default", ""100"", "comment", ""); String actualDefault = schemaManager.extractDefaultValue(DorisType.BIGINT, columnSpecs); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectDefault, actualDefault)
[-] pred: org. junit. Assert. assertEquals ( expectDefault, actualDefault )
************************************
[+] input: testGetOldContextRegister() { Register reg = trans12.getOldContextRegister(); "<AssertPlaceHolder>"; assert (reg.isProcessorContext()); assertEquals(0x2000, reg.getAddress().getOffset()); }
[*] target: assertNotNull(reg)
[-] pred: org. junit. Assert. assertNotNull ( reg )
************************************
[+] input: testGetAllAuiStr() { // TODO: by catching Exception, the test succedes even if the umlsDao.getAllAuiStr fails try { List<Object[]> auis = umlsDao.getAllAuiStr(""); // TODO: not a sufficient integration test Assert."<AssertPlaceHolder>"; log.debug("testGetAllAuiStr()" + auis.size()); } catch (Exception e) { log.warn("sql exception - mrconso probably doesn't exist, check error", e); } }
[*] target: assertNotNull(auis)
[-] pred: org. junit. Assert. assertNotNull ( auis )
************************************
[+] input: lowerCase() { // given String nativeSql = "insert into ?.? (ts, temperature, humidity) using ?.? tags(?,?) values(now, ?, ?)"; Object[] parameters = Stream.of("test", "t1", "test", "weather", "beijing", 1, 12.2, 4).toArray();  // when String actual = Utils.getNativeSql(nativeSql, parameters);  // then String expected = "insert into test.t1 (ts, temperature, humidity) using test.weather tags('beijing',1) values(now, 12.2, 4)"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: hasIndeterminatePrefixShouldReturnExpectedBoolean() { assertFalse(state.hasIndeterminatePrefix()); state.setIndeterminatePrefix(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(state.hasIndeterminatePrefix())
[-] pred: org. junit. Assert. assertTrue ( state. hasIndeterminatePrefix() )
************************************
[+] input: testTrimStart() { AddressSet set = set(0x10, 0x20, 0x30, 0x40); set.add(space2.getAddress(0x10), space2.getAddress(0x20)); set.add(space2.getAddress(0x30), space2.getAddress(0x40));  AddressSetView trimSet = AddressSetView.trimStart(set, addr(0x15));  AddressSet expectedSet = set(0x16, 0x20, 0x30, 0x40); expectedSet.add(space2.getAddress(0x10), space2.getAddress(0x20)); expectedSet.add(space2.getAddress(0x30), space2.getAddress(0x40)); assertEquals(expectedSet, trimSet);  trimSet = AddressSetView.trimStart(set, space2.getAddress(0x15));  expectedSet = new AddressSet(space2.getAddress(0x16), space2.getAddress(0x20)); expectedSet.add(space2.getAddress(0x30), space2.getAddress(0x40)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSet, trimSet)
[-] pred: org. junit. Assert. assertEquals ( expectedSet, trimSet )
************************************
[+] input: testParseLastParsed() { // given String stdout = liteClient.executeLast(); "<AssertPlaceHolder>"; // when ResultLastBlock blockId = LiteClientParser.parseLast(stdout); // then assertNotNull(blockId); assertNotNull(blockId.getFileHash()); assertNotNull(blockId.getRootHash()); assertEquals(-1L, blockId.getWc().longValue()); assertNotEquals(0L, blockId.getShard()); assertNotEquals(0L, blockId.getSeqno().longValue()); }
[*] target: assertNotNull(stdout)
[-] pred: org. junit. Assert. assertNotNull ( stdout )
************************************
[+] input: testIsInvalidColor() { String color = "randomString";  boolean result = Format.isValidColor(color); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: shouldCountWorkflows() { int counts = 1100; for (int i = 0; i < counts; i++) { WorkflowSummary workflowSummary = TestUtils.loadWorkflowSnapshot(objectMapper, "workflow_summary"); indexDAO.indexWorkflow(workflowSummary); }  // wait for workflow to be indexed long result = tryGetCount(() -> getWorkflowCount("template_workflow", "RUNNING"), counts); "<AssertPlaceHolder>"; }
[*] target: assertEquals(counts, result)
[-] pred: org. junit. Assert. assertEquals ( counts, result )
************************************
[+] input: testConstantAddNegSub() { BigInteger zero = bigIntegerRing.createZero(); BigInteger p; BigInteger t; // 0 + 0 = 0 p = bigIntegerRing.createZero(); t = bigIntegerRing.add(p, zero); Assert.assertEquals(zero, t); // -0 = 0 p = bigIntegerRing.createZero(); t = bigIntegerRing.neg(p); Assert.assertEquals(zero, t); // 0 - 0 = 0 p = bigIntegerRing.createZero(); t = bigIntegerRing.sub(p, zero); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(zero, t)
[-] pred: org. junit. Assert. assertEquals ( zero, t )
************************************
[+] input: Exception { Enum enumm = new EnumDataType("Color", 1); enumm.add("Red", 10); enumm.add("Green", 15); enumm.add("Blue", 20); Category root = dataMgr.getRootCategory(); Category c = root.createCategory("enumms"); Enum enummDT = (Enum) c.addDataType(enumm, DataTypeConflictHandler.DEFAULT_HANDLER);  Enum copyDT = (Enum) enummDT.copy(null); "<AssertPlaceHolder>";  Enum c2 = (Enum) root.addDataType(copyDT, DataTypeConflictHandler.DEFAULT_HANDLER); assertNotNull(c2); assertTrue(copyDT.isEquivalent(c2)); }
[*] target: assertNotNull(copyDT)
[-] pred: org. junit. Assert. assertNotNull ( copyDT )
************************************
[+] input: SQLException { Driver driver = new RestfulDriver(); final String url = ""; DriverPropertyInfo[] propertyInfo = driver.getPropertyInfo(url, null); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(propertyInfo)
[-] pred: org. junit. Assert. assertNotNull ( propertyInfo )
************************************
[+] input: testGetColor_StateUnavailable_ReturnUnavailableColor() { final int color = mTileColorPicker.getColor(Tile.STATE_UNAVAILABLE); final int expectedColor = mTintColorStateList.getColorForState( TileColorPicker.DISABLE_STATE_SET, DEFAULT_COLOR);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedColor, color)
[-] pred: org. junit. Assert. assertEquals ( expectedColor, color )
************************************
[+] input: testVisitINT_SEXT() { Address instructionAddress = Utils.getDefaultAddress(0x1010); SequenceNumber seq = new SequenceNumber(instructionAddress, 0); AbsEnv tmpEnv = new AbsEnv(); ConstraintSolver constraintSolver = new ConstraintSolver();  Varnode[] in1 = {new Varnode(Utils.getConstantAddress(0xFFFFFFFFL), GlobalState.arch.getDefaultPointerSize())}; Varnode out1 = new Varnode(Utils.getRegisterAddress(8), GlobalState.arch.getDefaultPointerSize()); PcodeOp pcode = new PcodeOp(seq, PcodeOp.COPY, in1, out1); constraintSolver.visit_COPY(pcode, tmpEnv);  Varnode[] in2 = { new Varnode(Utils.getRegisterAddress(8), GlobalState.arch.getDefaultPointerSize()), };  Varnode out2 = new Varnode(Utils.getUniqueAddress(0x10), 8); pcode = new PcodeOp(seq, PcodeOp.INT_ZEXT, in2, out2);  constraintSolver.visit_INT_SEXT(pcode, tmpEnv); optimize = constraintSolver.getOptimize();  optimize.Push(); Assert.assertEquals( optimize.Check(), Status.SATISFIABLE ); Expr res = optimize.getModel() .eval(constraintSolver.getALocExprHashMap().get(ALoc.getALoc(out2)), false); BitVecExpr bitVecExpr = (BitVecExpr) res; BigInteger expect = new BigInteger("FFFFFFFFFFFFFFFF", 16); BigInteger actual = new BigInteger(bitVecExpr.toString()); Assert."<AssertPlaceHolder>"; Assert.assertEquals(bitVecExpr.getSortSize(), 64); optimize.Pop(); }
[*] target: assertEquals(expect, actual)
[-] pred: org. junit. Assert. assertEquals ( expect, actual )
************************************
[+] input: UnmodifiableClassException { final byte[] classBytes = new byte[10]; final ClassFileSaveTransformer[] classFileSaveTransformer = new ClassFileSaveTransformer[1]; final Class<?> targetClass = String.class; Mockito.doAnswer(new Answer<Void>() { @Override public Void answer(final InvocationOnMock invocation) { classFileSaveTransformer[0] = invocation.getArgument(0, ClassFileSaveTransformer.class); return null; } }) .when(instrumentation) .addTransformer(ArgumentMatchers.any(ClassFileTransformer.class), ArgumentMatchers.anyBoolean()); Mockito.doAnswer(new Answer<Void>() { @Override public Void answer(final InvocationOnMock invocation) { classFileSaveTransformer[0].transform(targetClass.getClassLoader(), targetClass.getName(), targetClass, targetClass.getProtectionDomain(), classBytes); return null; } }).when(instrumentation).retransformClasses(ArgumentMatchers.any(Class.class));  final byte[] classBytesResult = instrumentationHelper.getClassBytes(targetClass);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(classBytes, classBytesResult)
[-] pred: org. junit. Assert. assertEquals ( classBytes, classBytesResult )
************************************
[+] input: testIsAvailable_notIfNoChannelDesc() { NotificationBackend.AppRow appRow = new NotificationBackend.AppRow(); NotificationChannel channel = mock(NotificationChannel.class); when(channel.getImportance()).thenReturn(IMPORTANCE_LOW); mController.onResume(appRow, channel, null, null, null, null); "<AssertPlaceHolder>"; }
[*] target: assertFalse(mController.isAvailable())
[-] pred: org. junit. Assert. assertFalse ( mController. isAvailable() )
************************************
[+] input: testParseOracleDuplicateTableStatement() { String dorisTable = "doris.auto_tab"; String ddl = "CREATE TABLE orders (\n" + "    order_id NUMBER(10) NOT NULL,\n" + "    customer_id NUMBER(10) NOT NULL,\n" + "    order_date DATE DEFAULT SYSDATE NOT NULL,\n" + "    status VARCHAR2(20) CHECK (status IN ('PENDING', 'SHIPPED', 'DELIVERED', 'CANCELLED')),\n" + "    total_amount NUMBER(12, 2) NOT NULL,\n" + "    shipping_address VARCHAR2(255),\n" + "    delivery_date DATE,\n" + "    CONSTRAINT fk_customer FOREIGN KEY (customer_id)\n" + "        REFERENCES customers(customer_id),\n" + "    CONSTRAINT chk_total_amount CHECK (total_amount >= 0)\n" + ");"; TableSchema tableSchema = schemaManager.parseCreateTableStatement( SourceConnector.ORACLE, ddl, dorisTable, new DorisTableConfig(new HashMap<>())); String expected = "TableSchema{database='doris', table='auto_tab', tableComment='null', fields={order_id=FieldSchema{name='order_id', typeString='BIGINT', defaultValue='null', comment='null'}, customer_id=FieldSchema{name='customer_id', typeString='BIGINT', defaultValue='null', comment='null'}, order_date=FieldSchema{name='order_date', typeString='DATETIMEV2', defaultValue='CURRENT_TIMESTAMP', comment='null'}, status=FieldSchema{name='status', typeString='VARCHAR(60)', defaultValue='null', comment='null'}, total_amount=FieldSchema{name='total_amount', typeString='DECIMALV3(12,2)', defaultValue='null', comment='null'}, shipping_address=FieldSchema{name='shipping_address', typeString='VARCHAR(765)', defaultValue='null', comment='null'}, delivery_date=FieldSchema{name='delivery_date', typeString='DATETIMEV2', defaultValue='null', comment='null'}}, keys=order_id, model=DUPLICATE, distributeKeys=order_id, properties={light_schema_change=true}, tableBuckets=null}"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tableSchema.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, tableSchema. toString ( ) )
************************************
[+] input: testIgnoreOtherClasses() { final ClassFileSaveTransformer classFileSaveTransformer = new ClassFileSaveTransformer(Integer.class.getName()); final byte[] classBytes = new byte[10];  classFileSaveTransformer.transform(String.class.getClassLoader(), String.class.getName(), String.class, null, classBytes);  final byte[] bytes = classFileSaveTransformer.getBytes();  Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(bytes)
[-] pred: org. junit. Assert. assertNull ( bytes )
************************************
[+] input: testAsSet_Collection_FromNull() {  Collection<String> c = null; Set<String> set = CollectionUtils.asSet(c); assertNotNull(set); "<AssertPlaceHolder>"; }
[*] target: assertTrue(set.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( set. isEmpty ( ) )
************************************
[+] input: testRandomUint64() { UniformRandomGenerator generator = UniformRandomGeneratorFactory.defaultFactory().create(prngType); TLongSet values = new TLongHashSet(); int count = 100; for (int i = 0; i < count; i++) { values.add(generator.nextLong()); } Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(count, values.size())
[-] pred: org. junit. Assert. assertEquals ( count, values. size ( ) )
************************************
[+] input: testGetOsInfo() { OsDomain osVo = OsUtils.getOsInfo(); "<AssertPlaceHolder>"; log.info(osVo.toJsonString()); }
[*] target: assertNotNull(osVo)
[-] pred: org. junit. Assert. assertNotNull ( osVo )
************************************
[+] input: testReset() {  final String defaultValue = Properties.TARGET_CLASS;  final String aString = "foo_foo_foo"; Assert.assertNotEquals(defaultValue, aString);  Properties.TARGET_CLASS = aString; Assert.assertEquals(aString,Properties.TARGET_CLASS);  Properties.getInstance().resetToDefaults(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(defaultValue,Properties.TARGET_CLASS)
[-] pred: org. junit. Assert. assertEquals ( defaultValue, Properties.TARGET_CLASS )
************************************
[+] input: testZeroDouble() { PhePlaintext zero = plaintextEncoder.encode(0.0); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(0, zero.getExponent())
[-] pred: org. junit. Assert. assertEquals ( 0, zero. getExponent() )
************************************
[+] input: testIterator2() { for (int i = 0; i < 10000; i++) { ps.putObject(i, new SaveableInt(i)); } LongIterator it = ps.getPropertyIterator(); int i = 0; while (it.hasNext()) { long l = it.next(); "<AssertPlaceHolder>"; i++; } assertEquals(i, 10000); }
[*] target: assertEquals(i, l)
[-] pred: org. junit. Assert. assertEquals ( i, l )
************************************
[+] input: testDoRegister() { distroClientComponentRegistry.doRegister();  DistroDataStorage dataStorage = componentHolder.findDataStorage(DistroClientDataProcessor.TYPE); Assert."<AssertPlaceHolder>";  DistroDataProcessor dataProcessor = componentHolder.findDataProcessor(DistroClientDataProcessor.TYPE); Assert.assertNotNull(dataProcessor);  DistroFailedTaskHandler failedTaskHandler = componentHolder.findFailedTaskHandler(DistroClientDataProcessor.TYPE); Assert.assertNotNull(failedTaskHandler);  DistroTransportAgent transportAgent = componentHolder.findTransportAgent(DistroClientDataProcessor.TYPE); Assert.assertNotNull(transportAgent);  }
[*] target: assertNotNull(dataStorage)
[-] pred: org. junit. Assert. assertNotNull ( dataStorage )
************************************
[+] input: testUpdateApiDestination() { Mockito.when(apiDestinationRepository.getApiDestination(any(), any())).thenReturn(new ApiDestinationDTO()); ApiDestinationDTO apiDestinationDTO = new ApiDestinationDTO(); apiDestinationDTO.setName(UUID.randomUUID().toString()); apiDestinationDTO.setAccountId(UUID.randomUUID().toString()); HttpApiParameters httpApiParameters = new HttpApiParameters(); httpApiParameters.setMethod("POST"); httpApiParameters.setEndpoint("http://127.0.0.1:8001"); apiDestinationDTO.setApiParams(httpApiParameters); final Boolean aBoolean = apiDestinationService.updateApiDestination(apiDestinationDTO); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(aBoolean)
[-] pred: org. junit. Assert. assertTrue ( aBoolean )
************************************
[+] input: testShouldNotPutInCacheRolledbackDeviceProfile() { DeviceProfile deviceProfile = createDeviceProfile(tenantId, "New device Profile" + StringUtils.randomAlphabetic(5));   Device device = new Device(); device.setType(deviceProfile.getName()); device.setTenantId(tenantId); device.setName("My device" + StringUtils.randomAlphabetic(5));  DefaultTransactionDefinition def = new DefaultTransactionDefinition(); TransactionStatus status = platformTransactionManager.getTransaction(def); try { deviceProfileService.saveDeviceProfile(deviceProfile); deviceService.saveDevice(device); } finally { platformTransactionManager.rollback(status); } DeviceProfile deviceProfileByName = deviceProfileService.findDeviceProfileByName(tenantId, deviceProfile.getName()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(deviceProfileByName)
[-] pred: org. junit. Assert. assertNull ( deviceProfileByName )
************************************
[+] input: noDoubleUpdateOnOpNoted() { mController.setBGHandler(mMockHandler);  mController.onOpNoted(AppOpsManager.OP_FINE_LOCATION, TEST_UID, TEST_PACKAGE_NAME, AppOpsManager.MODE_ALLOWED); mController.onOpNoted(AppOpsManager.OP_FINE_LOCATION, TEST_UID, TEST_PACKAGE_NAME, AppOpsManager.MODE_ALLOWED);  // Only one post to notify subscribers verify(mMockHandler, times(1)).post(any());  List<AppOpItem> list = mController.getActiveAppOps(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, list.size())
[-] pred: org. junit. Assert. assertEquals ( 1, list. size ( ) )
************************************
[+] input: Exception {  DockingAction copySpecialAction = getAction(codeBrowserClipboardProvider, COPY_SPECIAL_ACTION_NAME); waitForSwing(); assertFalse(copySpecialAction.isEnabled());  codeBrowserPlugin.goTo(new MnemonicFieldLocation(program, addr("1001050"))); assertTrue(copySpecialAction.isEnabled());  makeSelection(codeViewerWrapper); assertTrue(copySpecialAction.isEnabled());  copySpecial(codeViewerWrapper, copySpecialAction); String clipboardContents = getClipboardContents(); String expectedBytes = "f4 77 33 58 f4 77 91 45"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedBytes, clipboardContents)
[-] pred: org. junit. Assert. assertEquals ( expectedBytes, clipboardContents )
************************************
[+] input: SQLException { pstmt_insert.setTimestamp(1, new Timestamp(System.currentTimeMillis())); pstmt_insert.setFloat(4, 3.14f); int result = pstmt_insert.executeUpdate(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
[+] input: Exception { for (int i = 0; i < 20; i++) { block.setByte(BigInteger.valueOf(i), (byte) (10 + i)); } File f = createTempFile("updated", ".bin"); blockSet.save(f.getAbsolutePath());  "<AssertPlaceHolder>";  assertEquals(100, f.length());  FileInputStream fis = new FileInputStream(f); byte[] b = new byte[100]; fis.read(b); fis.close(); f.delete();  for (int i = 0; i < 20; i++) { assertEquals((byte) (10 + i), b[i]); assertTrue(!blockSet.isChanged(block, BigInteger.valueOf(i), 1)); } }
[*] target: assertTrue(f.exists())
[-] pred: org. junit. Assert. assertTrue ( f. exists ( ) )
************************************
[+] input: ProtocolException { BAOStreamBuilder builder = new BAOStreamBuilder(); builder.addByte(4); // 4 is invalid ByteArrayInputStream istream = builder.getStream(); MockConnection connection = new MockConnection(istream); Proto proto = ProtocolSelector.getProto(connection, null, null); "<AssertPlaceHolder>"; }
[*] target: assertNull(proto)
[-] pred: org. junit. Assert. assertNull ( proto )
************************************
[+] input: testSetLongValue() { field.setValue(100L); assertEquals(100L, field.getLongValue()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(100, field.getIntValue())
[-] pred: org. junit. Assert. assertEquals ( 100, field. getIntValue() )
************************************
[+] input: testSetFieldsForBitBlock() { model.setBlockName(".test"); assertTrue(!model.isValidInfo());  model.setStartAddress(getAddr(0x200)); assertTrue(!model.isValidInfo());  model.setLength(100); assertTrue(model.isValidInfo());  model.setBlockType(MemoryBlockType.BIT_MAPPED); assertTrue(!model.isValidInfo());  model.setBaseAddress(getAddr(0x2000)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(model.isValidInfo())
[-] pred: org. junit. Assert. assertTrue ( model. isValidInfo() )
************************************
[+] input: testOnRequest() { Response response = serviceMetadataProcessor.onRequest(ReadRequest.getDefaultInstance());  Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(response)
[-] pred: org. junit. Assert. assertNull ( response )
************************************
[+] input: testGetLastCodeColorAfterFormat() { String input = BUKKIT_COLOR_CODE_PREFIX + "o" + BUKKIT_COLOR_CODE_PREFIX + "cHello"; String expectedResult = BUKKIT_COLOR_CODE_PREFIX + "c";  String result = Format.getLastCode(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testMulParallel() { BigInteger p = bigIntegerRing.createNonZeroRandom(SECURE_RANDOM); BigInteger q = bigIntegerRing.createNonZeroRandom(SECURE_RANDOM); long mulCount = IntStream.range(0, MAX_PARALLEL) .mapToObj(index -> bigIntegerRing.mul(p, q)) .distinct() .count(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, mulCount)
[-] pred: org. junit. Assert. assertEquals ( 1, mulCount )
************************************
[+] input: IllegalAccessException { final int beforeSize = ((Queue<?>) reconnectionSignalField.get(rpcClient)).size(); rpcClient.serverListFactory(serverListFactory); rpcClient.currentConnection = new GrpcConnection(new RpcClient.ServerInfo("10.10.10.10", 8848), null); doReturn(Collections.singletonList("http://10.10.10.10:8848")).when(serverListFactory).getServerList();  rpcClient.onServerListChange();  int afterSize = ((Queue<?>) reconnectionSignalField.get(rpcClient)).size(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(beforeSize, afterSize)
[-] pred: org. junit. Assert. assertEquals ( beforeSize, afterSize )
************************************
[+] input: testCreateAndFindParams() { OAuth2Info oAuth2Info = createDefaultOAuth2Info(); oAuth2Service.saveOAuth2Info(oAuth2Info); OAuth2Info foundOAuth2Info = oAuth2Service.findOAuth2Info(); Assert."<AssertPlaceHolder>"; // TODO ask if it's safe to check equality on AdditionalProperties Assert.assertEquals(oAuth2Info, foundOAuth2Info); }
[*] target: assertNotNull(foundOAuth2Info)
[-] pred: org. junit. Assert. assertNotNull ( foundOAuth2Info )
************************************
[+] input: nodesDiffering() { Map<String, Object> result = db.executeTransactionally( "MATCH (leftNode:Node2), (rightNode:Node3) RETURN apoc.diff.nodes(leftNode, rightNode) as diff", new HashMap<>(), r -> Iterators.single(r.columnAs("diff"))); "<AssertPlaceHolder>";  HashMap<String, Object> leftOnly = (HashMap<String, Object>) result.get("leftOnly"); assertEquals(1, leftOnly.size()); assertEquals(2L, leftOnly.get("prop2"));  HashMap<String, Object> rightOnly = (HashMap<String, Object>) result.get("rightOnly"); assertEquals(1, rightOnly.size()); assertEquals("3", rightOnly.get("prop3"));  HashMap<String, HashMap<String, Object>> different = (HashMap<String, HashMap<String, Object>>) result.get("different"); assertEquals(1, different.size()); HashMap<String, Object> pairs = different.get("prop4"); assertEquals("four", pairs.get("left")); assertEquals("for", pairs.get("right"));  HashMap<String, Object> inCommon = (HashMap<String, Object>) result.get("inCommon"); assertEquals(1, inCommon.size()); assertEquals("val1", inCommon.get("prop1")); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testLoadSnapshot() { ConcurrentMap<Service, ServiceMetadata> map = new ConcurrentHashMap<>(); Service service = Service.newService("namespace", "group", "name"); map.put(service, new ServiceMetadata());  Serializer aDefault = SerializeFactory.getDefault(); serviceMetadataSnapshotOperation.loadSnapshot(aDefault.serialize(map));  Map<Service, ServiceMetadata> serviceMetadataSnapshot = namingMetadataManager.getServiceMetadataSnapshot(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(serviceMetadataSnapshot.size(), 1); }
[*] target: assertNotNull(serviceMetadataSnapshot)
[-] pred: org. junit. Assert. assertNotNull ( serviceMetadataSnapshot )
************************************
[+] input: testGetSensorsInfo() { SensorsDomain sensorsDomain = SensorsUtils.getSensorsInfo(); "<AssertPlaceHolder>"; log.info(sensorsDomain.toJsonString()); }
[*] target: assertNotNull(sensorsDomain)
[-] pred: org. junit. Assert. assertNotNull ( sensorsDomain )
************************************
[+] input: testFindByResetToken() { UserCredentials foundedUserCredentials = userCredentialsDao.findByResetToken(SYSTEM_TENANT_ID, RESET_TOKEN); "<AssertPlaceHolder>"; assertEquals(neededUserCredentials.getId(), foundedUserCredentials.getId()); }
[*] target: assertNotNull(foundedUserCredentials)
[-] pred: org. junit. Assert. assertNotNull ( foundedUserCredentials )
************************************
[+] input: testcreateTransientPlanNotNull() { AutoFixPlan plan = new AutoFixPlanManager().createPlan( "ruleId", "issueId", "resourceId","docId","resourcetype", numberOfNotifications, 48); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(plan)
[-] pred: org. junit. Assert. assertNotNull ( plan )
************************************
[+] input: testSmallThetaNegativeInput() { IntegralLdpConfig ldpConfig = new LocalExpMapIntegralLdpConfig .Builder(DEFAULT_BASE_EPSILON, SMALL_THETA, BIASED_LOWER_BOUND, BIASED_UPPER_BOUND) .build(); IntegralLdp mechanism = IntegralLdpFactory.createInstance(ldpConfig); int value = -1; // 输入-1，输出[-1, 0) IntStream.range(0, ROUND).forEach(index -> { int noiseValue = mechanism.randomize(value); Assert."<AssertPlaceHolder>"; }); }
[*] target: assertEquals(value, noiseValue)
[-] pred: org. junit. Assert. assertEquals ( value, noiseValue )
************************************
[+] input: testSetExpanded_Metrics() { mQsPanel.setExpanded(true); verify(mMetricsLogger).visibility(eq(MetricsEvent.QS_PANEL), eq(true)); verify(mQSLogger).logPanelExpanded(true, mQsPanel.getDumpableTag()); assertEquals(1, mUiEventLogger.numLogs()); assertEquals(QSEvent.QS_PANEL_EXPANDED.getId(), mUiEventLogger.eventId(0)); mUiEventLogger.getLogs().clear();  mQsPanel.setExpanded(false); verify(mMetricsLogger).visibility(eq(MetricsEvent.QS_PANEL), eq(false)); verify(mQSLogger).logPanelExpanded(false, mQsPanel.getDumpableTag()); "<AssertPlaceHolder>"; assertEquals(QSEvent.QS_PANEL_COLLAPSED.getId(), mUiEventLogger.eventId(0)); mUiEventLogger.getLogs().clear();  }
[*] target: assertEquals(1, mUiEventLogger.numLogs())
[-] pred: org. junit. Assert. assertEquals ( 1, mUiEventLogger.numLogs ( ) )
************************************
[+] input: Throwable { createTestModel(); mb.createTestProcessesAndThreads();  TraceRecorder recorder = modelService.recordTarget(mb.testProcess1, new TestDebuggerTargetTraceMapper(mb.testProcess1)); "<AssertPlaceHolder>"; waitOn(recorder.init()); // Already initializing, just wait for it to complete  waitOn(mb.testModel.close()); waitForPass(() -> { assertFalse("Still recording", recorder.isRecording()); }); }
[*] target: assertNotNull(recorder)
[-] pred: org. junit. Assert. assertNotNull ( recorder )
************************************
[+] input: testFindDefaultDeviceProfileInfo() { DeviceProfileInfo foundDefaultDeviceProfileInfo = deviceProfileService.findDefaultDeviceProfileInfo(tenantId); Assert."<AssertPlaceHolder>"; Assert.assertNotNull(foundDefaultDeviceProfileInfo.getId()); Assert.assertNotNull(foundDefaultDeviceProfileInfo.getName()); Assert.assertNotNull(foundDefaultDeviceProfileInfo.getType()); }
[*] target: assertNotNull(foundDefaultDeviceProfileInfo)
[-] pred: org. junit. Assert. assertNotNull ( foundDefaultDeviceProfileInfo )
************************************
[+] input: testFilter() { Mockito.when(authConfigs.isAuthEnabled()).thenReturn(true);  Request healthCheckRequest = new HealthCheckRequest();  try { Response healthCheckResponse = remoteRequestAuthFilter .filter(healthCheckRequest, new RequestMeta(), MockRequestHandler.class); Assert."<AssertPlaceHolder>"; } catch (NacosException e) { e.printStackTrace(); Assert.fail(e.getMessage()); } }
[*] target: assertNull(healthCheckResponse)
[-] pred: org. junit. Assert. assertNull ( healthCheckResponse )
************************************
[+] input: simpleLineReaderWithEscapedCR() { SimpleLineReader simpleLineReader = new SimpleLineReader(new Document("a\nb\\rc\r")); assertEquals("a\n", simpleLineReader.readLine()); assertEquals("b\\rc\r", simpleLineReader.readLine()); "<AssertPlaceHolder>"; }
[*] target: assertNull(simpleLineReader.readLine())
[-] pred: org. junit. Assert. assertNull ( simpleLineReader. readLine() )
************************************
[+] input: testNorthNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.linearFive(population, 5);  TestSuiteChromosome exepcted_individual = population.get(1); TestSuiteChromosome returned_individual = neighbors.get(0);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: Exception {  List<String> names = functionManager.getCallingConventionNames(); assertTrue(names.size() >= 1);  for (String name : names) { if (Function.UNKNOWN_CALLING_CONVENTION_STRING.equals(name)) { assertNull(functionManager.getCallingConvention(name)); } else { "<AssertPlaceHolder>"; } } }
[*] target: assertNotNull(functionManager.getCallingConvention(name))
[-] pred: org. junit. Assert. assertNotNull ( functionManager. getCallingConvention(name) )
************************************
[+] input: testDeleteDevice() { Device device = new Device(); device.setTenantId(tenantId); device.setName("My device"); device.setType("default"); Device savedDevice = deviceService.saveDevice(device); Device foundDevice = deviceService.findDeviceById(tenantId, savedDevice.getId()); Assert.assertNotNull(foundDevice); deviceService.deleteDevice(tenantId, savedDevice.getId()); foundDevice = deviceService.findDeviceById(tenantId, savedDevice.getId()); Assert."<AssertPlaceHolder>"; DeviceCredentials foundDeviceCredentials = deviceCredentialsService.findDeviceCredentialsByDeviceId(tenantId, savedDevice.getId()); Assert.assertNull(foundDeviceCredentials); }
[*] target: assertNull(foundDevice)
[-] pred: org. junit. Assert. assertNull ( foundDevice )
************************************
[+] input: Exception { String text = "Hello World!"; SmartUtURL url = new SmartUtURL("http://smartut.org/hello.txt");  NetworkHandling.createRemoteTextFile(url,text);  URL mock = MockURL.URL(url.getUrl()); URLConnection connection = mock.openConnection(); Scanner in = new Scanner(connection.getInputStream()); String res = in.nextLine(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(text,res)
[-] pred: org. junit. Assert. assertEquals ( text, res )
************************************
[+] input: oneMemberProtobuf() { StructValue value = StructValue.of("a", PrimitiveValue.newUint32(1)); StructType type = value.getType();  ValueProtos.Value valuePb = value.toPb(); Assert.assertEquals(ValueProtos.Value.newBuilder() .addItems(ProtoValue.fromUint32(1)) .build(), valuePb);  Value<?> valueX = ProtoValue.fromPb(type, valuePb); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(value.equals(valueX))
[-] pred: org. junit. Assert. assertTrue ( value. equals ( valueX ) )
************************************
[+] input: sharedInfo_withDebugModeEnabled() { SharedInfo.Builder sharedInfoBuilder = SharedInfo.builder() .setVersion(VERSION_0_1) .setApi(ATTRIBUTION_REPORTING_API) .setScheduledReportTime(FIXED_TIME) .setReportingOrigin(REPORTING_ORIGIN) .setDestination(DESTINATION) .setSourceRegistrationTime(FIXED_TIME) .setReportId(RANDOM_UUID) .setReportDebugMode(true);  SharedInfo si = sharedInfoBuilder.build();  assertEquals(si.reportDebugModeString().get(), "enabled"); "<AssertPlaceHolder>"; }
[*] target: assertTrue(si.getReportDebugMode())
[-] pred: org. junit. Assert. assertTrue ( si. getReportDebugMode ( ) )
************************************
[+] input: testOverlap_Middle_End() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(0, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(5, 10, new ImmutableExceptionHandler("LException2;", 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 5, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5))), new ImmutableTryBlock(5, 5, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5), new ImmutableExceptionHandler("LException2;", 6))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: failure_search_test_0() { String pattern = "xyz"; String text = "abcdef ghijkl"; String exceptedOutput = "No Pattern Found\n"; String actual = CaptureOutput.captureStandardOutput(() -> Question1.search(pattern, text)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(exceptedOutput, actual)
[-] pred: org. junit. Assert. assertEquals ( exceptedOutput, actual )
************************************
[+] input: testFindUserCredentials() { User user = userService.findUserByEmail(SYSTEM_TENANT_ID,"sysadmin@thingsboard.org"); Assert.assertNotNull(user); UserCredentials userCredentials = userService.findUserCredentialsByUserId(SYSTEM_TENANT_ID, user.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(userCredentials)
[-] pred: org. junit. Assert. assertNotNull ( userCredentials )
************************************
[+] input: testConstructorInjectionBasic() { IEclipseContext context = EclipseContextFactory.create(); // add an extra argument for the inner class constructors context.set(ContextInjectionFactoryTest.class.getName(), this);  Object basicResult = ContextInjectionFactory .make(TestConstructorObjectBasic.class, context); "<AssertPlaceHolder>"; assertTrue(basicResult instanceof TestConstructorObjectBasic); assertTrue(((TestConstructorObjectBasic) basicResult).defaultConstructorCalled); }
[*] target: assertNotNull(basicResult)
[-] pred: org. junit. Assert. assertNotNull ( basicResult )
************************************
[+] input: replaceNothing() { // given String nativeSql = "insert into test.t1 (ts, temperature, humidity) using test.weather tags('beijing',1) values(now, 12.2, 4)";  // when String actual = Utils.getNativeSql(nativeSql, null);  // then Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(nativeSql, actual)
[-] pred: org. junit. Assert. assertEquals ( nativeSql, actual )
************************************
[+] input: testExtractCommentValue() { String expectComment = ""; List<String> columnSpecs = Arrays.asList("default", "'100'", "COMMENT", "''"); String actualComment = schemaManager.extractComment(columnSpecs); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectComment, actualComment)
[-] pred: org. junit. Assert. assertEquals ( expectComment, actualComment )
************************************
[+] input: Throwable { AtomicInteger count = new AtomicInteger(0); List<Integer> res = new ArrayList<>(); long result = loop(TypeSpec.LONG, (loop) -> { if (count.getAndIncrement() < 5) { add(count.get(), 10).handle(loop::consume); } else { loop.exit(0xdeadbeeff00dL, null); } }, TypeSpec.INT, (cur, loop) -> { res.add(cur); loop.repeat(); }).get(1000, TimeUnit.MILLISECONDS);  List<Integer> exp = Arrays.asList(new Integer[] { 11, 12, 13, 14, 15 }); "<AssertPlaceHolder>"; assertEquals(0xdeadbeeff00dL, result); }
[*] target: assertEquals(exp, res)
[-] pred: org. junit. Assert. assertEquals ( exp, res )
************************************
[+] input: Exception { final String expectedVersion = "0.6"; JsonObject json = WycheproofTestUtil.readJson("../wycheproof/testvectors/kwp_test.json"); Set<String> exceptions = new TreeSet<String>(); String generatorVersion = json.get("generatorVersion").getAsString(); if (!generatorVersion.equals(expectedVersion)) { System.out.printf("Expecting test vectors with version %s found version %s.\n", expectedVersion, generatorVersion); } int errors = 0; JsonArray testGroups = json.getAsJsonArray("testGroups"); for (int i = 0; i < testGroups.size(); i++) { JsonObject group = testGroups.get(i).getAsJsonObject(); JsonArray tests = group.getAsJsonArray("tests"); for (int j = 0; j < tests.size(); j++) { JsonObject testcase = tests.get(j).getAsJsonObject(); int tcid = testcase.get("tcId").getAsInt(); String tc = "tcId: " + tcid + " " + testcase.get("comment").getAsString(); byte[] key = Hex.decode(testcase.get("key").getAsString()); byte[] data = Hex.decode(testcase.get("msg").getAsString()); byte[] expected = Hex.decode(testcase.get("ct").getAsString()); // Result is one of "valid", "invalid", "acceptable". // "valid" are test vectors with matching plaintext, ciphertext and tag. // "invalid" are test vectors with invalid parameters or invalid ciphertext and tag. // "acceptable" are test vectors with weak parameters or legacy formats. String result = testcase.get("result").getAsString();  // Test wrapping KeyWrap wrapper; try { wrapper = new Kwp(key); } catch (GeneralSecurityException ex) { // tink restrict the key sizes to 128 or 256 bits. if (key.length == 16 || key.length == 32) { System.out.printf("Rejected valid key:%s\n", tc); System.out.println(ex.toString()); errors++; } continue; } try { byte[] wrapped = wrapper.wrap(data); boolean eq = TestUtil.arrayEquals(expected, wrapped); if (result.equals("invalid")) { if (eq) { // Some test vectors use invalid parameters that should be rejected. System.out.printf("Wrapped test case:%s\n", tc); errors++; } } else { if (!eq) { System.out.printf("Incorrect wrapping for test case:%s wrapped bytes:%s\n", tc, Hex.encode(wrapped)); errors++; } } } catch (GeneralSecurityException ex) { if (result.equals("valid")) { System.out.printf("Failed to wrap test case:%s\n", tc); errors++; } } catch (Exception ex) { // Other exceptions are violating the interface. System.out.printf("Test case %s throws %s.\n", tc, ex); errors++; }  // Test unwrapping // The algorithms tested in this class are typically malleable. Hence, it is in possible // that modifying ciphertext randomly results in some other valid ciphertext. // However, all the test vectors in Wycheproof are constructed such that they have // invalid padding. If this changes then the test below is too strict. try { byte[] unwrapped = wrapper.unwrap(expected); boolean eq = TestUtil.arrayEquals(data, unwrapped); if (result.equals("invalid")) { System.out.printf("Unwrapped invalid test case:%s unwrapped:%s\n", tc, Hex.encode(unwrapped)); errors++; } else { if (!eq) { System.out.printf("Incorrect unwrap. Excepted:%s actual:%s\n", Hex.encode(data), Hex.encode(unwrapped)); errors++; } } } catch (GeneralSecurityException ex) { // Trying to unwrap an invalid key should always result in a GeneralSecurityException // or a subclass of it. exceptions.add(ex.toString()); if (result.equals("valid")) { System.out.printf("Failed to unwrap:%s\n", tc); errors++; } } catch (Exception ex) { // Other exceptions indicate a programming error. System.out.printf("Test case:%s throws %s\n", tc, ex); exceptions.add(ex.toString()); errors++; } } } // Even though strong pseudorandomness implies that information about incorrectly formatted // ciphertexts is not helpful to an attacker, we still don't want to do this and expect // exceptions that do not carry information about the unwrapped data. System.out.printf("Number of distinct exceptions:%d\n", exceptions.size()); for (String ex : exceptions) { System.out.println(ex); } "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors)
[-] pred: org. junit. Assert. assertEquals ( 0, errors )
************************************
[+] input: testOverlap_Middle_Middle() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(0, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(2, 7, new ImmutableExceptionHandler("LException2;", 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 2, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5))), new ImmutableTryBlock(2, 5, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5), new ImmutableExceptionHandler("LException2;", 6))), new ImmutableTryBlock(7, 3, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testHandle() { final Map<String, String> event = new HashMap<>(); event.put("fileId", "656d7741e7cf041007e6fb8a"); event.put("packageName", "packageName"); GridFSBucket gridFSBucket = mock(GridFSBucket.class); when(mockClientMongoOperator.getGridFSBucket()).thenReturn(gridFSBucket); WebSocketEventResult webSocketEventResult = loadJarLibEventHandlerUnderTest.handle(event); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(webSocketEventResult)
[-] pred: org. junit. Assert. assertNotNull ( webSocketEventResult )
************************************
[+] input: testIssue18() { String template = """ bugged "here" """;  assertEquals("bugged "here"\n", template);  String actual = CodeAppendable.stringConcat(template); String expected = "\n" + "    "bugged \\"here\\"\\n"";  "<AssertPlaceHolder>";  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: SerializationException { File file = tempFolder.newFile("output.json"); serializerToTest.write(new FileOutputStream(file), Examples.EXAMPLE_SIMPLE.getModel()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(file.exists())
[-] pred: org. junit. Assert. assertTrue ( file. exists ( ) )
************************************
[+] input: Exception {  // // Mangled: _ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev // // Demangled: __gnu_cxx //            :: //            __stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) //            :: //            _Save_errno //            :: //            _Save_errno() // // This is _Save_errno struct's constructor inside of the stoa templated function, in the // __gnu_cxx namespace. //  String mangled = "_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev"; String demangled = process.demangle(mangled);  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  String signature = object.getSignature(false); assertEquals("undefined __gnu_cxx" + "::" + "__stoa<long,int,char,int>(long(*)(char_const*,char**,int),char_const*,char_const*,unsigned_long*,int)" + "::" + "_Save_errno::_Save_errno(void)", signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: testGetNewAddressSpace() { AddressSpace space = trans13.getNewAddressSpace("ram"); "<AssertPlaceHolder>"; assertEquals("ram", space.getName()); }
[*] target: assertNotNull(space)
[-] pred: org. junit. Assert. assertNotNull ( space )
************************************
[+] input: testConvertHexColorCodeToBukkitColorCode() { String hexColor = "#ff00ff"; String expectedResult = BUKKIT_COLOR_CODE_PREFIX + "x" + BUKKIT_COLOR_CODE_PREFIX + "f" + BUKKIT_COLOR_CODE_PREFIX + "f" + BUKKIT_COLOR_CODE_PREFIX + "0" + BUKKIT_COLOR_CODE_PREFIX + "0" + BUKKIT_COLOR_CODE_PREFIX + "f" + BUKKIT_COLOR_CODE_PREFIX + "f";  String result = Format.convertHexColorCodeToBukkitColorCode(hexColor); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testGetRemoteExecutorTimesOfProcessors() { int defaultExpectVal = 1 << 4; int defaultVal = RemoteUtils.getRemoteExecutorTimesOfProcessors(); Assert.assertEquals(defaultExpectVal, defaultVal);  System.setProperty("remote.executor.times.of.processors", "10"); int val1 = RemoteUtils.getRemoteExecutorTimesOfProcessors(); Assert.assertEquals(10, val1);  System.setProperty("remote.executor.times.of.processors", "-1"); int val2 = RemoteUtils.getRemoteExecutorTimesOfProcessors(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(defaultExpectVal, val2)
[-] pred: org. junit. Assert. assertEquals ( defaultExpectVal, val2 )
************************************
[+] input: testExtractCommentValueNull() { List<String> columnSpecs = Arrays.asList("default", null, "CommenT", null); String actualComment = schemaManager.extractComment(columnSpecs); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actualComment)
[-] pred: org. junit. Assert. assertNull ( actualComment )
************************************
[+] input: sharedInfo_withDebugModeDisabled() { SharedInfo.Builder sharedInfoBuilder = SharedInfo.builder() .setVersion(VERSION_0_1) .setApi(ATTRIBUTION_REPORTING_API) .setScheduledReportTime(FIXED_TIME) .setReportingOrigin(REPORTING_ORIGIN) .setDestination(DESTINATION) .setSourceRegistrationTime(FIXED_TIME) .setReportId(RANDOM_UUID) .setReportDebugMode(false);  SharedInfo si = sharedInfoBuilder.build();  assertEquals(si.reportDebugModeString(), Optional.empty()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(si.getReportDebugMode())
[-] pred: org. junit. Assert. assertFalse ( si. getReportDebugMode ( ) )
************************************
[+] input: testReorderingAllowedChanges_Pulsing() { mVisualStabilityManager.setPulsing(true); assertFalse(mVisualStabilityManager.isReorderingAllowed()); mVisualStabilityManager.setPulsing(false); "<AssertPlaceHolder>"; }
[*] target: assertTrue(mVisualStabilityManager.isReorderingAllowed())
[-] pred: org. junit. Assert. assertTrue ( mVisualStabilityManager. isReorderingAllowed() )
************************************
[+] input: importHdfsFileTest() { log.debug("Get import hdfs file test."); String db = "db"; String table = "table";  HdfsImportReq importReq = new HdfsImportReq(); // Request body exception // name empty try { buildDriver.importHdfsFile(db, table, importReq); } catch (Exception e) { Assert.assertEquals(e.getMessage(), RequestFieldNullException.MESSAGE); } // field empty importReq.setName("task1"); try { buildDriver.importHdfsFile(db, table, importReq); } catch (Exception e) { Assert.assertEquals(e.getMessage(), RequestFieldNullException.MESSAGE); } // column empty HdfsFilePreviewReq.FileInfo fileInfo = new HdfsFilePreviewReq.FileInfo(); fileInfo.setColumnSeparator(","); fileInfo.setFileUrl("/test/file1"); fileInfo.setFormat("CSV"); importReq.setFileInfo(fileInfo); try { buildDriver.importHdfsFile(db, table, importReq); } catch (Exception e) { Assert.assertEquals(e.getMessage(), RequestFieldNullException.MESSAGE); } List<String> columnNames = new ArrayList<>(); importReq.setColumnNames(columnNames); try { buildDriver.importHdfsFile(db, table, importReq); } catch (Exception e) { Assert.assertEquals(e.getMessage(), RequestFieldNullException.MESSAGE); } // connection information empty columnNames.add("field1"); importReq.setColumnNames(columnNames); try { buildDriver.importHdfsFile(db, table, importReq); } catch (Exception e) { Assert.assertEquals(e.getMessage(), RequestFieldNullException.MESSAGE); }  // request HdfsFilePreviewReq.ConnectInfo connectInfo = new HdfsFilePreviewReq.ConnectInfo(); connectInfo.setBrokerName("broker1"); Map<String, String> brokerProps = new HashMap<>(); brokerProps.put("test", "test"); connectInfo.setBrokerProps(brokerProps);  importReq.setConnectInfo(connectInfo);  try { String result = buildDriver.importHdfsFile(db, table, importReq); String sql = "LOAD LABEL db.task1\n" + "(\n" + "DATA INFILE("/test/file1")\n" + "INTO TABLE table\n" + "COLUMNS TERMINATED BY ","\n" + "FORMAT AS "csv"\n" + "(field1)\n" + ")WITH BROKER 'broker1'\n" + "(\n" + ""test"="test"\n" + ")\n"; Assert."<AssertPlaceHolder>"; } catch (Exception e) { log.error("get create table sql error."); e.printStackTrace(); } }
[*] target: assertEquals(sql, result)
[-] pred: org. junit. Assert. assertEquals ( sql, result )
************************************
[+] input: Exception { //given String stdoutLast = liteClient.executeLast(); // when assertNotNull(stdoutLast); ResultLastBlock blockIdLast = LiteClientParser.parseLast(stdoutLast); String stdoutAllShards = liteClient.executeAllshards(blockIdLast); log.info(stdoutAllShards); //then "<AssertPlaceHolder>"; List<ResultLastBlock> shards = LiteClientParser.parseAllShards(stdoutAllShards);  shards.forEach(System.out::println); assertTrue(shards.get(0).getSeqno().longValue() > 0); }
[*] target: assertNotNull(stdoutAllShards)
[-] pred: org. junit. Assert. assertNotNull ( stdoutAllShards )
************************************
[+] input: testWildcardAddTwiceDeleteOnceMixed() { ByteMachine cut = new ByteMachine(); for (int i = 0; i < 2; i ++){ cut.addPattern(Patterns.wildcardMatch("h*llo")); cut.addPattern(Patterns.wildcardMatch("*")); cut.addPattern(Patterns.wildcardMatch("*hello")); cut.addPattern(Patterns.wildcardMatch("hello*")); cut.addPattern(Patterns.wildcardMatch("hell*o")); cut.addPattern(Patterns.wildcardMatch("h*l*o")); cut.addPattern(Patterns.wildcardMatch("he*l*")); } cut.deletePattern(Patterns.wildcardMatch("h*llo")); cut.deletePattern(Patterns.wildcardMatch("*")); cut.deletePattern(Patterns.wildcardMatch("*hello")); cut.deletePattern(Patterns.wildcardMatch("hello*")); cut.deletePattern(Patterns.wildcardMatch("hell*o")); cut.deletePattern(Patterns.wildcardMatch("h*l*o")); cut.deletePattern(Patterns.wildcardMatch("he*l*")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cut.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cut. isEmpty() )
************************************
[+] input: testCombine_combinesEmptyAndNonEmptySummary() { // Arrange ZonedInterval expectedInterval = new ZonedInterval(SEVEN_DAYS_AGO, ONE_DAY_AGO); Summary s1 = new Summary(10); Summary s2 = new Summary(12).withInterval(expectedInterval); Summary expectedSummary = new Summary(22).withInterval(expectedInterval);  // Act Summary resultingSummary = Summary.COMBINER.apply(s1, s2);  //  Assert Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSummary, resultingSummary)
[-] pred: org. junit. Assert. assertEquals ( expectedSummary, resultingSummary )
************************************
[+] input: testSplitWithMaxAtMaxWithSpacesAtEnd() { // The word is long enough to force a hard split on the first 'n' characters.  The // space at the end allows the remaining 'word' to be kept intact. List<String> lines = HtmlLineSplitter.split("abc        ", 3); "<AssertPlaceHolder>"; assertEquals("abc", lines.get(0)); }
[*] target: assertEquals(1, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 1, lines. size ( ) )
************************************
[+] input: Exception { Enum enumm = new EnumDataType("Color", 1); enumm.add("Red", 10); enumm.add("Green", 15); enumm.add("Blue", 20); Category root = dataMgr.getRootCategory(); Category c = root.createCategory("enumms"); Enum enummDT = (Enum) c.addDataType(enumm, DataTypeConflictHandler.DEFAULT_HANDLER); "<AssertPlaceHolder>";  c.remove(enummDT, TaskMonitor.DUMMY); assertNull(c.getDataType("Color"));  assertTrue(enummDT.isDeleted());  }
[*] target: assertNotNull(enummDT)
[-] pred: org. junit. Assert. assertNotNull ( enummDT )
************************************
[+] input: testExecutionException() { KafkaProducerManager manager = new KafkaProducerManager( Duration.ofMillis(150), Duration.ofMillis(500), 10, Duration.ofMillis(120000)); KafkaPublishTask.Input input = getInput(); Producer producer = manager.getProducer(input); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(producer)
[-] pred: org. junit. Assert. assertNotNull ( producer )
************************************
[+] input: testRemoveAfterHasNextCheck() { // This is an odd test List<String> a = new ArrayList<>(List.of("T1", "T2")); List<String> b = new ArrayList<>(List.of("T3", "T4")); List<List<String>> listList = new ArrayList<>(List.of(a, b));  Iterator<String> it = NestedIterator.start(listList.iterator(), l -> l.iterator()); assertEquals("T1", it.next()); assertEquals("T2", it.next()); assertTrue(it.hasNext()); // Odd to do this right before a remove, but.... it.remove(); assertEquals("T3", it.next()); assertEquals("T4", it.next()); "<AssertPlaceHolder>";  assertEquals(List.of("T1"), a); assertEquals(List.of("T3", "T4"), b); }
[*] target: assertFalse(it.hasNext())
[-] pred: org. junit. Assert. assertFalse ( it. hasNext() )
************************************
[+] input: testSingleCatchAll_Middle() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(5, 10, new ImmutableExceptionHandler(null, 15));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of(new ImmutableTryBlock(5, 5, ImmutableList.of(new ImmutableExceptionHandler(null, 15))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testEastEastNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.CompactThirteen(population, 10);  TestSuiteChromosome exepcted_individual = population.get(8); TestSuiteChromosome returned_individual = neighbors.get(10);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: SAXException { XmlSerializer serializer = new XmlSerializer(); XmlDeserializer deserializer = new XmlDeserializer();  // This is the only way to make the serialization to work. Set<Class<?>> subtypes = ReflectionHelper.SUBTYPES.get(DataSpecificationContent.class); subtypes.add(DefaultDummyDataSpecification.class);  String xmlString = serializer.write(Examples.ENVIRONMENT_WITH_DUMMYDATASPEC); "<AssertPlaceHolder>";  validateAgainstXsdSchema(xmlString);  Environment copy = deserializer.read(xmlString); assertNotNull(copy);  assertTrue(Examples.ENVIRONMENT_WITH_DUMMYDATASPEC.equals(copy)); }
[*] target: assertNotNull(xmlString)
[-] pred: org. junit. Assert. assertNotNull ( xmlString )
************************************
[+] input: testNorthWestNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.compactNine(population, 5);  TestSuiteChromosome exepcted_individual = population.get(0); TestSuiteChromosome returned_individual = neighbors.get(4);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testGetNonTerminalPatterns() { NameState nameState = new NameState(); nameState.addSubRule("rule1", 1.0, Patterns.exactMatch("a"), false); nameState.addSubRule("rule1", 2.0, Patterns.exactMatch("b"), true); nameState.addSubRule("rule2", 3.0, Patterns.exactMatch("a"), true); nameState.addSubRule("rule3", 4.0, Patterns.exactMatch("c"), false);  Set<Patterns> expectedPatterns = new HashSet<>(Arrays.asList( Patterns.exactMatch("a"), Patterns.exactMatch("c"))); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPatterns, nameState.getNonTerminalPatterns())
[-] pred: org. junit. Assert. assertEquals ( expectedPatterns, nameState. getNonTerminalPatterns ( ) )
************************************
[+] input: testLocallyFrequentItemsBasic() { List<SequenceItem> prefixSequence = new ArrayList<SequenceItem>(); prefixSequence.add(new SequenceItem("A", 0)); prefixSequence.add(new SequenceItem("A", 1)); ProjectedDatabase projDatabase = new ProjectedDatabase(database, prefixSequence); Set<FrequentSequenceItem> globallyFrequent = database.getGloballyFrequentItems(4); Set<FrequentSequenceItem> locallyFrequent = projDatabase.getLocallyFrequentItems(globallyFrequent, 4); "<AssertPlaceHolder>"; assertTrue(locallyFrequent.contains(new FrequentSequenceItem(4, new SequenceItem("B", 3)))); assertTrue(locallyFrequent.contains(new FrequentSequenceItem(4, new SequenceItem("A", 2)))); }
[*] target: assertEquals(2, locallyFrequent.size())
[-] pred: org. junit. Assert. assertEquals ( 2, locallyFrequent. size ( ) )
************************************
[+] input: notificationDataEntry_testIsLastMessageFromReply() { Person.Builder person = new Person.Builder() .setName("name") .setKey("abc") .setUri("uri") .setBot(true);  // EXTRA_MESSAGING_PERSON is the same Person as the sender in last message in EXTRA_MESSAGES Bundle bundle = new Bundle(); bundle.putParcelable(Notification.EXTRA_MESSAGING_PERSON, person.build()); Bundle[] messagesBundle = new Bundle[]{new Notification.MessagingStyle.Message( "text", 0, person.build()).toBundle()}; bundle.putParcelableArray(Notification.EXTRA_MESSAGES, messagesBundle);  Notification notification = new Notification.Builder(mContext, "test") .addExtras(bundle) .build();  NotificationEntry entry = new NotificationEntryBuilder() .setPkg("pkg") .setOpPkg("pkg") .setTag("tag") .setNotification(notification) .setUser(mContext.getUser()) .setOverrideGroupKey("") .build(); entry.setHasSentReply();  "<AssertPlaceHolder>"; }
[*] target: assertTrue(entry.isLastMessageFromReply())
[-] pred: org. junit. Assert. assertTrue ( entry. isLastMessageFromReply ( ) )
************************************
[+] input: testTryHttpConnection() { backendUtilMockedStatic.when(() -> BackendUtil.tryHttpConnection(any())).thenReturn(true); boolean flag = BackendUtil.tryHttpConnection("127.0.0.1:8040"); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(flag)
[-] pred: org. junit. Assert. assertTrue ( flag )
************************************
[+] input: testContainInstanceMetadata() { boolean result = namingMetadataManager.containInstanceMetadata(service, METADATA_ID);  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testPowPm5d8() { CafeFieldElement a = CafeFieldElement.decode(A_BYTES); CafeFieldElement ap58 = CafeFieldElement.decode(A_POWER_P_MINUS_5_DIV_8_BYTES); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(ap58, a.powPm5d8())
[-] pred: org. junit. Assert. assertEquals ( ap58, a. powPm5d8() )
************************************
[+] input: Exception {  Symbol s = createLabel(addr(100), "fred"); assertFalse(s.isDeleted());  AddressSet set = new AddressSet(); set.addRange(addr(100), addr(150)); set.addRange(addr(300), addr(310)); set.addRange(addr(320), addr(330)); Function f = listing.createFunction("fredFunc", addr(100), set, SourceType.USER_DEFINED);  Parameter p = f.addParameter(new ParameterImpl(null, ByteDataType.dataType, program), SourceType.DEFAULT); Symbol paramSym = p.getSymbol(); assertFalse(paramSym.isDeleted());  listing.removeFunction(addr(100));  assertTrue(paramSym.isDeleted());  Symbol s1 = st.getPrimarySymbol(addr(100)); assertNotNull(s1); assertEquals("fredFunc", s1.getName());  f = listing.createFunction("fredFuncX", addr(100), set, SourceType.USER_DEFINED); assertEquals("fredFuncX", f.getName());  assertTrue(!s1.isPrimary()); assertTrue(!s.isPrimary()); s1.delete(); s.delete();  program.getReferenceManager();  refMgr.addMemoryReference(addr(0), addr(100), RefType.READ_WRITE, SourceType.USER_DEFINED, 0); listing.removeFunction(addr(100));  s = st.getPrimarySymbol(addr(100)); assertNotNull(s); assertEquals("fredFuncX", s.getName());  s.delete();  s = st.getPrimarySymbol(addr(100)); "<AssertPlaceHolder>"; assertTrue(s.getSource() == SourceType.DEFAULT); }
[*] target: assertNotNull(s)
[-] pred: org. junit. Assert. assertNotNull ( s )
************************************
[+] input: SQLException { PreparedStatement pstmt = conn.prepareStatement("select server_status()"); ResultSet rs = pstmt.executeQuery(); rs.next(); int status = rs.getInt("server_status()"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, status)
[-] pred: org. junit. Assert. assertEquals ( 1, status )
************************************
[+] input: SQLException { pstmt_insert.setTimestamp(1, new Timestamp(System.currentTimeMillis())); int ret = pstmt_insert.executeUpdate(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: lineTerminator() { // given String nativeSql = "INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,\r\n?,?),(?,?,?,?)"; Object[] parameters = Stream.of("d1", 1, 100, 3.14, "abc", 4, 200, 3.1415, "xyz", 5).toArray();  // when String actual = Utils.getNativeSql(nativeSql, parameters);  // then String expected = "INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (100,3.14,\r\n'abc',4),(200,3.1415,'xyz',5)"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: multiValues() { // given String nativeSql = "INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,?,?),(?,?,?,?)"; Object[] parameters = Stream.of("d1", 1, 100, 3.14, "abc", 4, 200, 3.1415, "xyz", 5).toArray();  // when String actual = Utils.getNativeSql(nativeSql, parameters);  // then String expected = "INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (100,3.14,'abc',4),(200,3.1415,'xyz',5)"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testParseToApiInstance() { Instance instance = InstanceUtil.parseToApiInstance(service, instancePublishInfo); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(instance)
[-] pred: org. junit. Assert. assertNotNull ( instance )
************************************
[+] input: whenResolve_withElementWithinSubmodelElementList_success() { String submodelId = "http://example.org/submodel"; String submodelElementIdShort = "foo"; SubmodelElement expected = new DefaultProperty.Builder() .value("bar") .build(); Environment environment = new DefaultEnvironment.Builder() .submodels(new DefaultSubmodel.Builder() .id(submodelId) .submodelElements(new DefaultSubmodelElementList.Builder() .idShort(submodelElementIdShort) .value(expected) .build()) .build()) .build(); Reference reference = new DefaultReference.Builder() .keys(new DefaultKey.Builder() .type(KeyTypes.SUBMODEL) .value(submodelId) .build()) .keys(new DefaultKey.Builder() .type(KeyTypes.SUBMODEL_ELEMENT) .value(submodelElementIdShort) .build()) .keys(new DefaultKey.Builder() .type(KeyTypes.SUBMODEL_ELEMENT) .value("0") .build()) .build(); Referable actual = AasUtils.resolve(reference, environment); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testTimeout_Callback() { int timeout = 100; TimeoutTaskMonitor monitor = TimeoutTaskMonitor.timeoutIn(100, TimeUnit.MILLISECONDS);  AtomicBoolean called = new AtomicBoolean(); monitor.setTimeoutListener(() -> called.set(true));  sleep(timeout * 2);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(called.get())
[-] pred: org. junit. Assert. assertTrue ( called. get ( ) )
************************************
[+] input: testGetComponent() { Structure struct = createStructure("struct_1", 0); struct.add(new ByteDataType()); struct.add(new StringDataType(), 10); DataTypeComponent newdtc = union.add(struct, "field5", "comments"); DataTypeComponent dtc = union.getComponent(4); "<AssertPlaceHolder>"; assertEquals("field5", dtc.getFieldName()); assertEquals("comments", dtc.getComment());  }
[*] target: assertEquals(newdtc, dtc)
[-] pred: org. junit. Assert. assertEquals ( newdtc, dtc )
************************************
[+] input: testConstructorRoot2() { CategoryPath c = new CategoryPath(null); assertEquals("/", c.getPath()); assertEquals("", c.getName()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(c.isRoot())
[-] pred: org. junit. Assert. assertTrue ( c. isRoot() )
************************************
[+] input: Exception { selectRow(2);  JButton downButton = findButtonByIcon(pathManager.getComponent(), ResourceManager.loadImage("images/down.png")); "<AssertPlaceHolder>"; pressButton(downButton, true); waitForSwing();  int row = table.getSelectedRow(); assertEquals(3, row); assertEquals(new Path("c:\\path_three"), table.getModel().getValueAt(row, 1));  pressButton(downButton, true); waitForSwing(); row = table.getSelectedRow(); assertEquals(0, row); assertEquals(new Path("c:\\path_three"), table.getModel().getValueAt(row, 1));  pressButton(downButton, true); waitForSwing(); row = table.getSelectedRow(); assertEquals(1, row); assertEquals(new Path("c:\\path_three"), table.getModel().getValueAt(row, 1));  pressButton(downButton, true); waitForSwing(); row = table.getSelectedRow(); assertEquals(2, row); assertEquals(new Path("c:\\path_three"), table.getModel().getValueAt(row, 1)); }
[*] target: assertNotNull(downButton)
[-] pred: org. junit. Assert. assertNotNull ( downButton )
************************************
[+] input: ProcessingException { StringBuilder sb = new StringBuilder(); CatalogClassWriter w = new CatalogClassWriter("com.company", "MyCatalog"); w.addTemplateClasses(List.of("com.company.tmp.MyTemplate")); w.addTemplateClasses(List.of("com.company.tmp.MyTemplate")); w.addTemplateClasses(List.of("com.company.tmp.AnotherTemplate")); w.write(sb);  String expected = """ package com.company;  /** * Generated template catalog. */ public class MyCatalog implements io.jstach.jstachio.spi.TemplateProvider.GeneratedTemplateProvider {  /** * Generated template catalog constructor for ServiceLoader. */ public MyCatalog() { }  @Override public java.util.List<io.jstach.jstachio.Template<?>> provideTemplates(io.jstach.jstachio.TemplateConfig templateConfig) { return java.util.List.of(// new com.company.tmp.AnotherTemplate(templateConfig), // new com.company.tmp.MyTemplate(templateConfig)); } } """; String actual = sb.toString();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testLoadX509FromString() { X509Certificate certificate = PemUtil.loadX509FromString(MERCHANT_CERTIFICATE_STRING); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(certificate)
[-] pred: org. junit. Assert. assertNotNull ( certificate )
************************************
[+] input: Exception { model.setBlockName(".test"); model.setStartAddress(getAddr(0x100)); model.setLength(100); model.setBlockType(MemoryBlockType.BIT_MAPPED); assertEquals(InitializedType.UNITIALIZED, model.getInitializedType()); model.setBaseAddress(getAddr(0x2000));  "<AssertPlaceHolder>"; MemoryBlock block = program.getMemory().getBlock(getAddr(0x100)); assertNotNull(block); assertEquals(MemoryBlockType.BIT_MAPPED, block.getType()); }
[*] target: assertTrue(model.execute())
[-] pred: org. junit. Assert. assertTrue ( model. execute ( ) )
************************************
[+] input: WHEN_MembershipsAreCompared_THEN_TheyAreMergedProperly() {  ArrayMembership empty = new ArrayMembership();  int[][] sofar = { {0, 0}, {2, 1}, {4, 2}, {6, 8} };  int[][] fieldWithNoConflict = { {3, 33} }; int[][] fieldConflictingWithPreviousField = { {3, 44} }; int[][] wanted1 = { {0, 0}, {2, 1}, {3, 33}, {4, 2}, {6, 8} }; int[][] fieldWithConflict = { {2, 2} };  ArrayMembership result;  result = ArrayMembership.checkArrayConsistency(empty, fromPairs(fieldWithNoConflict)); checkWanted(fieldWithNoConflict, result);  result = ArrayMembership.checkArrayConsistency(fromPairs(sofar), empty); checkWanted(sofar, result);  result = ArrayMembership.checkArrayConsistency(fromPairs(sofar), fromPairs(fieldWithNoConflict)); checkWanted(wanted1, result);  result = ArrayMembership.checkArrayConsistency(fromPairs(fieldWithNoConflict), fromPairs(sofar)); checkWanted(wanted1, result);  result = ArrayMembership.checkArrayConsistency(fromPairs(sofar), fromPairs(fieldWithConflict)); assertNull(result);  result = ArrayMembership.checkArrayConsistency(fromPairs(fieldWithConflict), fromPairs(sofar)); assertNull(result);  result = ArrayMembership.checkArrayConsistency(fromPairs(sofar), fromPairs(sofar)); checkWanted(sofar, result);  result = ArrayMembership.checkArrayConsistency(fromPairs(sofar), fromPairs(fieldWithNoConflict)); assert result != null; result = ArrayMembership.checkArrayConsistency(result, fromPairs(fieldConflictingWithPreviousField)); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: manyMembersProtobuf() { StructValue value = StructValue.of( "a", PrimitiveValue.newUint32(1), "b", PrimitiveValue.newBool(true), "c", PrimitiveValue.newText("yes")); StructType type = value.getType();  ValueProtos.Value valuePb = value.toPb(); Assert.assertEquals(ValueProtos.Value.newBuilder() .addItems(ProtoValue.fromUint32(1)) .addItems(ProtoValue.fromBool(true)) .addItems(ProtoValue.fromText("yes")) .build(), valuePb);  Value<?> valueX = ProtoValue.fromPb(type, valuePb); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(valueX.equals(value))
[-] pred: org. junit. Assert. assertTrue ( valueX. equals ( value ) )
************************************
[+] input: Exception { ConfigChangeListener someListener = mock(ConfigChangeListener.class); ConfigChangeListener anotherListener = mock(ConfigChangeListener.class);  final List<ConfigChangeListener> listeners = Lists.newArrayList();  doAnswer(new Answer() { @Override public Object answer(InvocationOnMock invocation) throws Throwable { listeners.add(invocation.getArgument(0, ConfigChangeListener.class));  return Void.class; } }).when(someConfig).addChangeListener(any(ConfigChangeListener.class));  configPropertySource.addChangeListener(someListener); configPropertySource.addChangeListener(anotherListener);  "<AssertPlaceHolder>"; assertTrue(listeners.containsAll(Lists.newArrayList(someListener, anotherListener))); }
[*] target: assertEquals(2, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 2, listeners. size ( ) )
************************************
[+] input: testContainServiceMetadata() { boolean result = namingMetadataManager.containServiceMetadata(service);  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testStackAddressNegative() { AddressSpace stackSpace = p.getAddressFactory().getStackSpace(); Address a = stackSpace.getAddress(-1); long key = addrMap.getKey(a, false); assertEquals(0x40000000ffffffffl, key); Address b = addrMap.decodeAddress(key); "<AssertPlaceHolder>";  }
[*] target: assertEquals(a, b)
[-] pred: org. junit. Assert. assertEquals ( a, b )
************************************
[+] input: shouldManageBigNumbersCorrectly() { db.executeTransactionally("MATCH (n) DETACH DELETE n"); db.executeTransactionally("CREATE (:Bar{name:'Foo', var1:1.416785E32}), (:Bar{name:'Bar', var1:12E4});"); final String expected = "UNWIND [{name:"Foo", properties:{var1:1.416785E32}}, {name:"Bar", properties:{var1:120000.0}}] AS row\n" + "CREATE (n:Bar{name: row.name}) SET n += row.properties"; TestUtil.testCall( db, "CALL apoc.export.cypher.all($file, $config)", map("file", null, "config", map("format", "plain", "stream", true)), (r) -> { final String cypherStatements = (String) r.get("cypherStatements"); String unwind = Stream.of(cypherStatements.split(";")) .map(String::trim) .filter(s -> s.startsWith("UNWIND")) .findFirst() .orElse(null); "<AssertPlaceHolder>"; }); }
[*] target: assertEquals(expected, unwind)
[-] pred: org. junit. Assert. assertEquals ( expected, unwind )
************************************
[+] input: testIterator2() { for (int i = 0; i < 10000; i++) { ps.putString(i, "" + i); } LongIterator it = ps.getPropertyIterator(); int i = 0; while (it.hasNext()) { long l = it.next(); "<AssertPlaceHolder>"; i++; } assertEquals(i, 10000); }
[*] target: assertEquals(i, l)
[-] pred: org. junit. Assert. assertEquals ( i, l )
************************************
[+] input: Exception {  List<Map<String, Object>> tTypeList = new ArrayList<>(); Map<String, Object> tTypeMap = new HashMap<>(); tTypeMap.put("name", "aws-all"); tTypeList.add(tTypeMap);  when(service.getAllAssetGroups()).thenReturn(tTypeList);  new Util().setassetService(service); boolean valid = Util.isValidAssetGroup("aws-all");  "<AssertPlaceHolder>";  }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
[+] input: testFindDefaultDeviceProfile() { DeviceProfile foundDefaultDeviceProfile = deviceProfileService.findDefaultDeviceProfile(tenantId); Assert."<AssertPlaceHolder>"; Assert.assertNotNull(foundDefaultDeviceProfile.getId()); Assert.assertNotNull(foundDefaultDeviceProfile.getName()); }
[*] target: assertNotNull(foundDefaultDeviceProfile)
[-] pred: org. junit. Assert. assertNotNull ( foundDefaultDeviceProfile )
************************************
[+] input: InterruptedException { AtomicBoolean result = new AtomicBoolean(false); NamingSnapshotOperation operation = new NamingSnapshotOperation(storage, lock); final Writer writer = new Writer(snapshotDir); final CountDownLatch latch = new CountDownLatch(1);  operation.onSnapshotSave(writer, (isOk, throwable) -> { result.set(isOk && throwable == null); latch.countDown(); }); latch.await(10, TimeUnit.SECONDS); Assert.assertTrue(isSnapshoted); Assert.assertTrue(result.get());  final Reader reader = new Reader(snapshotDir, writer.listFiles()); boolean res = operation.onSnapshotLoad(reader); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(res)
[-] pred: org. junit. Assert. assertTrue ( res )
************************************
[+] input: testSplitWithMaxNewlineAtBeginningAndMiddleAndEndOnly() { // newlines at begin and end do not create lines; no whitespace--max is below // MAX_WORD_LENGTH, so single line only List<String> lines = HtmlLineSplitter.split("\nabcd\nefghi\n", 6); "<AssertPlaceHolder>"; assertEquals("", lines.get(0)); assertEquals("abcd", lines.get(1)); assertEquals("efghi", lines.get(2)); assertEquals("", lines.get(3)); }
[*] target: assertEquals(4, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 4, lines. size ( ) )
************************************
[+] input: testDeleteQueue() { Queue queue = new Queue(); queue.setTenantId(tenantId); queue.setName("Test"); queue.setTopic("tb_rule_engine.test"); queue.setPollInterval(25); queue.setPartitions(1); queue.setPackProcessingTimeout(2000); queue.setSubmitStrategy(createTestSubmitStrategy()); queue.setProcessingStrategy(createTestProcessingStrategy()); Queue savedQueue = queueService.saveQueue(queue); Queue foundQueue = queueService.findQueueById(tenantId, savedQueue.getId()); Assert.assertNotNull(foundQueue); queueService.deleteQueue(tenantId, savedQueue.getId()); foundQueue = queueService.findQueueById(tenantId, savedQueue.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(foundQueue)
[-] pred: org. junit. Assert. assertNull ( foundQueue )
************************************
[+] input: testAckAlarmProcedure() { UUID tenantId = UUID.randomUUID(); UUID originator1Id = UUID.fromString("d4b68f41-3e96-11e7-a884-898080180d6b"); UUID alarm1Id = UUID.fromString("d4b68f43-3e96-11e7-a884-898080180d6b"); Alarm alarm = saveAlarm(alarm1Id, tenantId, originator1Id, "TEST_ALARM"); long ackTs = System.currentTimeMillis(); AlarmApiCallResult result = alarmDao.acknowledgeAlarm(alarm.getTenantId(), alarm.getId(), ackTs); AlarmInfo afterSave = alarmDao.findAlarmInfoById(alarm.getTenantId(), alarm.getUuidId()); assertNotNull(result); assertTrue(result.isSuccessful()); assertTrue(result.isModified()); assertNotNull(result.getAlarm()); assertEquals(afterSave, result.getAlarm()); assertEquals(ackTs, result.getAlarm().getAckTs()); assertTrue(result.getAlarm().isAcknowledged()); result = alarmDao.acknowledgeAlarm(alarm.getTenantId(), alarm.getId(), ackTs + 1); "<AssertPlaceHolder>"; assertNotNull(result.getAlarm()); assertEquals(afterSave, result.getAlarm()); assertTrue(result.isSuccessful()); assertFalse(result.isModified()); assertEquals(ackTs, result.getAlarm().getAckTs()); assertTrue(result.getAlarm().isAcknowledged()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { Memory memory = program.getMemory(); MemoryBlock block = memory.createInitializedBlock(".test", getAddr(5), 0x20, (byte) 0xa, TaskMonitorAdapter.DUMMY_MONITOR, false);  AddressSet set = new AddressSet(); set.addRange(getAddr(0), getAddr(0x10)); set.addRange(getAddr(0x20), getAddr(0x25)); set.addRange(getAddr(0x26), getAddr(0x30)); AddressSetPropertyMap pm = program.createAddressSetPropertyMap("MyMap"); pm.add(set); // remove the block memory.removeBlock(block, TaskMonitorAdapter.DUMMY_MONITOR);  // [0,4], [25,30] should still exist // [5,24] should have been removed AddressSet s = new AddressSet(); s.addRange(getAddr(0), getAddr(0x4)); s.addRange(getAddr(0x25), getAddr(0x30)); AddressSet pmSet = pm.getAddressSet(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(s, pmSet)
[-] pred: org. junit. Assert. assertEquals ( s, pmSet )
************************************
[+] input: testFormatStringLegacyColor_SpigotHexCodeOnly() { String input = "&x&f&f&f&f&f&fHello There Austin"; String expectedResult = "&x&f&f&f&f&f&fHello There Austin";  String result = Format.FormatStringLegacyColor(input); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testFindDeviceProfileInfoById() { DeviceProfile deviceProfile = this.createDeviceProfile(tenantId, "Device Profile"); DeviceProfile savedDeviceProfile = deviceProfileService.saveDeviceProfile(deviceProfile); DeviceProfileInfo foundDeviceProfileInfo = deviceProfileService.findDeviceProfileInfoById(tenantId, savedDeviceProfile.getId()); Assert."<AssertPlaceHolder>"; Assert.assertEquals(savedDeviceProfile.getId(), foundDeviceProfileInfo.getId()); Assert.assertEquals(savedDeviceProfile.getName(), foundDeviceProfileInfo.getName()); Assert.assertEquals(savedDeviceProfile.getType(), foundDeviceProfileInfo.getType()); }
[*] target: assertNotNull(foundDeviceProfileInfo)
[-] pred: org. junit. Assert. assertNotNull ( foundDeviceProfileInfo )
************************************
[+] input: Exception { //given NacosRestTemplate nacosRestTemplate = mock(NacosRestTemplate.class); HttpRestResult<Object> result = new HttpRestResult<>(); result.setData("{"accessToken":"ttttttttttttttttt","tokenTtl":1000}"); result.setCode(200); when(nacosRestTemplate.postForm(any(), (Header) any(), any(), any(), any())).thenReturn(result); Properties properties = new Properties(); properties.setProperty(PropertyKeyConst.USERNAME, "aaa"); properties.setProperty(PropertyKeyConst.PASSWORD, "123456"); List<String> serverList = new ArrayList<>(); serverList.add("localhost");  NacosClientAuthServiceImpl nacosClientAuthService = new NacosClientAuthServiceImpl(); nacosClientAuthService.setServerList(serverList); nacosClientAuthService.setNacosRestTemplate(nacosRestTemplate); //when nacosClientAuthService.login(properties); //then boolean ret = nacosClientAuthService.login(properties); Assert."<AssertPlaceHolder>";  }
[*] target: assertTrue(ret)
[-] pred: org. junit. Assert. assertTrue ( ret )
************************************
[+] input: testIsAvailable_notIfNull() { mController.onResume(null, null, null, null, null, null); "<AssertPlaceHolder>"; }
[*] target: assertFalse(mController.isAvailable())
[-] pred: org. junit. Assert. assertFalse ( mController. isAvailable() )
************************************
[+] input: testConstructorRoot1() { CategoryPath c = CategoryPath.ROOT; assertEquals("/", c.getPath()); assertEquals("", c.getName()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(c.isRoot())
[-] pred: org. junit. Assert. assertTrue ( c. isRoot() )
************************************
[+] input: IOException { // prepare File src = temporaryFolder.newFolder("src"); File dest = temporaryFolder.newFolder("dest");  // act contributor.copyToDir(src, dest); log.debug("Destination folder {}: {}", dest, dest.list()); log.debug("Source folder {}: {}", src, src.list());  // check "<AssertPlaceHolder>"; assertTrue(src.exists()); }
[*] target: assertTrue(dest.exists())
[-] pred: org. junit. Assert. assertTrue ( dest. exists ( ) )
************************************
[+] input: testCreateDisabledSymbolServer() { SymbolServer symbolServer = symbolServerInstanceCreatorRegistry .newSymbolServer("disabled://.", symbolServerInstanceCreatorContext); "<AssertPlaceHolder>"; assertTrue(symbolServer instanceof DisabledSymbolServer); assertTrue( ((DisabledSymbolServer) symbolServer).getSymbolServer() instanceof SameDirSymbolStore); }
[*] target: assertNotNull(symbolServer)
[-] pred: org. junit. Assert. assertNotNull ( symbolServer )
************************************
[+] input: testMaxRegisterAddress() { AddressSpace regSpace = p.getAddressFactory().getRegisterSpace(); Address a = regSpace.getAddress(-1); long key = addrMap.getKey(a, false); assertEquals(0x300000000000ffffl, key); Address b = addrMap.decodeAddress(key); "<AssertPlaceHolder>"; assertEquals(regSpace.getAddress(0xffffL), b);  }
[*] target: assertEquals(a, b)
[-] pred: org. junit. Assert. assertEquals ( a, b )
************************************
[+] input: Exception { QueryServiceResponse res = new QueryServiceResponse(); ServiceInfo info = new ServiceInfo(GROUP_NAME + "@@" + SERVICE_NAME + "@@" + CLUSTERS); res.setServiceInfo(info); when(this.rpcClient.request(any())).thenReturn(res); ServiceInfo actual = client.queryInstancesOfService(SERVICE_NAME, GROUP_NAME, CLUSTERS, 0, false); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(info, actual)
[-] pred: org. junit. Assert. assertEquals ( info, actual )
************************************
[+] input: Exception { NacosRestTemplate nacosRestTemplate = mock(NacosRestTemplate.class); HttpRestResult<Object> result = new HttpRestResult<>(); result.setCode(400); when(nacosRestTemplate.postForm(any(), (Header) any(), any(), any(), any())).thenReturn(result); Properties properties = new Properties(); properties.setProperty(PropertyKeyConst.USERNAME, "aaa"); properties.setProperty(PropertyKeyConst.PASSWORD, "123456"); List<String> serverList = new ArrayList<>(); serverList.add("localhost");  NacosClientAuthServiceImpl nacosClientAuthService = new NacosClientAuthServiceImpl(); nacosClientAuthService.setServerList(serverList); nacosClientAuthService.setNacosRestTemplate(nacosRestTemplate); boolean ret = nacosClientAuthService.login(properties); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(ret)
[-] pred: org. junit. Assert. assertFalse ( ret )
************************************
[+] input: Exception { boolean someAutoUpdateInjectedSpringProperties = false; System.setProperty("apollo.autoUpdateInjectedSpringProperties", String.valueOf(someAutoUpdateInjectedSpringProperties));  ConfigUtil configUtil = new ConfigUtil();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(someAutoUpdateInjectedSpringProperties, configUtil.isAutoUpdateInjectedSpringPropertiesEnabled())
[-] pred: org. junit. Assert. assertEquals ( someAutoUpdateInjectedSpringProperties, configUtil. isAutoUpdateInjectedSpringPropertiesEnabled() )
************************************
[+] input: testGetColor_StateInactive_ReturnInactiveColor() { final int color = mTileColorPicker.getColor(Tile.STATE_INACTIVE); final int expectedColor = mTintColorStateList.getColorForState( TileColorPicker.INACTIVE_STATE_SET, DEFAULT_COLOR);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedColor, color)
[-] pred: org. junit. Assert. assertEquals ( expectedColor, color )
************************************
[+] input: testCreateHttpSymbolServer() { SymbolServer symbolServer = symbolServerInstanceCreatorRegistry .newSymbolServer("http://localhost/blah", symbolServerInstanceCreatorContext); "<AssertPlaceHolder>"; assertTrue(symbolServer instanceof HttpSymbolServer); }
[*] target: assertNotNull(symbolServer)
[-] pred: org. junit. Assert. assertNotNull ( symbolServer )
************************************
[+] input: lineTerminatorAndMultiValues() { String nativeSql = "INSERT Into ? TAGS(?) VALUES(?,?,\r\n?,?),(?,? ,\r\n?,?) t? tags (?) Values (?,?,?\r\n,?),(?,?,?,?) t? Tags(?) values  (?,?,?,?) , (?,?,?,?)"; Object[] parameters = Stream.of("t1", "abc", 100, 1.1, "xxx", "xxx", 200, 2.2, "xxx", "xxx", 2, "bcd", 300, 3.3, "xxx", "xxx", 400, 4.4, "xxx", "xxx", 3, "cde", 500, 5.5, "xxx", "xxx", 600, 6.6, "xxx", "xxx").toArray();  // when String actual = Utils.getNativeSql(nativeSql, parameters);  // then String expected = "INSERT Into t1 TAGS('abc') VALUES(100,1.1,\r\n'xxx','xxx'),(200,2.2 ,\r\n'xxx','xxx') t2 tags ('bcd') Values (300,3.3,'xxx'\r\n,'xxx'),(400,4.4,'xxx','xxx') t3 Tags('cde') values  (500,5.5,'xxx','xxx') , (600,6.6,'xxx','xxx')"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: InterruptedException { String p2pClientTopic = "tm/p2p/test"; when(serviceConf.getClientRetryTopic()).thenReturn(null); when(serviceConf.getClientP2pTopic()).thenReturn(p2pClientTopic); when(metaPersistManager.getAllFirstTopics()).thenReturn(new HashSet<>()); when(defaultMQAdminExt.examineTopicRouteInfo(p2pClientTopic)).thenReturn(null); FirstTopicManager spyFirstTopicManger = spy(firstTopicManager); doNothing().when(spyFirstTopicManger).initMQAdminExt();  spyFirstTopicManger.init(); Thread.sleep(100);  Assert.assertTrue(spyFirstTopicManger.getBrokerAddressMap(p2pClientTopic).isEmpty()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(spyFirstTopicManger.getReadableBrokers(p2pClientTopic).isEmpty())
[-] pred: org. junit. Assert. assertTrue ( spyFirstTopicManger. getReadableBrokers(p2pClientTopic ). isEmpty ( ) )
************************************
[+] input: Exception { String[][] records = {{"flink", "1", "true"}, {"doris", "2", "false"}}; SimpleCollector collector = new SimpleCollector(); RowDataDeserializationSchema deserializationSchema = new RowDataDeserializationSchema(PHYSICAL_TYPE); for (String[] record : records) { deserializationSchema.deserialize(Arrays.asList(record), collector); }  List<String> expected = Arrays.asList("+I(flink,1,true)", "+I(doris,2,false)");  List<String> actual = collector.list.stream().map(Object::toString).collect(Collectors.toList()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { ProgramBuilder builder = build64BitX86(); ProgramDB program = builder.getProgram(); boolean result = PEUtil.isVisualStudioOrClangPe(program); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testFindByActivateToken() { UserCredentials foundedUserCredentials = userCredentialsDao.findByActivateToken(SYSTEM_TENANT_ID, ACTIVATE_TOKEN); "<AssertPlaceHolder>"; assertEquals(neededUserCredentials.getId(), foundedUserCredentials.getId()); }
[*] target: assertNotNull(foundedUserCredentials)
[-] pred: org. junit. Assert. assertNotNull ( foundedUserCredentials )
************************************
[+] input: when_timeout_a_vote_than_it_has_a_timeout_signature() { Vote vote = mock(Vote.class); Vote voteWithTimeout = mock(Vote.class); when(vote.getRound()).thenReturn(Round.of(1)); when(vote.getEpoch()).thenReturn(1L); when(vote.withTimeoutSignature(any())).thenReturn(voteWithTimeout); when(vote.isTimeout()).thenReturn(false);  Builder builder = mock(Builder.class); when(builder.lastVote(any())).thenReturn(builder); when(builder.build()).thenReturn(this.safetyState); when(safetyState.toBuilder()).thenReturn(builder);  Vote resultVote = safetyRules.timeoutVote(vote); verify(vote, times(1)).withTimeoutSignature(any()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(voteWithTimeout, resultVote)
[-] pred: org. junit. Assert. assertEquals ( voteWithTimeout, resultVote )
************************************
[+] input: testEscapeString2() { String orig = "//"; String escaped = CategoryPath.escapeString(orig); String unescaped = CategoryPath.unescapeString(escaped); "<AssertPlaceHolder>"; assertEquals("\\/\\/", escaped); }
[*] target: assertEquals(orig, unescaped)
[-] pred: org. junit. Assert. assertEquals ( orig, unescaped )
************************************
[+] input: Exception { ViewConfigurationContext result = testObj.generateForTable("medias", ctx); Assert."<AssertPlaceHolder>";  }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testIterator2() { for (int i = 0; i < 10000; i++) { ps.putInt(i, i); } LongIterator it = ps.getPropertyIterator(); int i = 0; while (it.hasNext()) { long l = it.next(); "<AssertPlaceHolder>"; i++; } assertEquals(i, 10000); }
[*] target: assertEquals(i, l)
[-] pred: org. junit. Assert. assertEquals ( i, l )
************************************
[+] input: testFin() { lista.comenzar(); assertTrue(lista.fin());  lista.agregarFinal(0); lista.comenzar(); assertFalse(lista.fin()); lista.proximo(); assertTrue(lista.fin());  lista.agregarEn(1, 1); lista.comenzar(); assertFalse(lista.fin()); lista.proximo(); assertFalse(lista.fin()); lista.proximo(); "<AssertPlaceHolder>";  }
[*] target: assertTrue(lista.fin())
[-] pred: org. junit. Assert. assertTrue ( lista. fin() )
************************************
[+] input: testEquals() { ServiceMetadata serviceMetadata1 = new ServiceMetadata(); ServiceMetadata serviceMetadata2 = new ServiceMetadata();  boolean equals = serviceMetadata1.equals(serviceMetadata2); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(equals)
[-] pred: org. junit. Assert. assertFalse ( equals )
************************************
[+] input: testFindDeviceInfoByTenantIdAndDeviceProfileId() { Customer customer = new Customer(); customer.setTitle("Customer X"); customer.setTenantId(tenantId); Customer savedCustomer = customerService.saveCustomer(customer);  Device device = new Device(); device.setTenantId(tenantId); device.setName("default"); device.setLabel("label"); device.setCustomerId(savedCustomer.getId()); Device savedDevice = deviceService.saveDevice(device);  PageLink pageLinkWithLabel = new PageLink(100, 0, "label"); List<DeviceInfo> deviceInfosWithLabel = deviceService .findDeviceInfosByFilter(DeviceInfoFilter.builder().tenantId(tenantId).deviceProfileId(savedDevice.getDeviceProfileId()).build(), pageLinkWithLabel).getData();  Assert.assertFalse(deviceInfosWithLabel.isEmpty()); Assert.assertTrue( deviceInfosWithLabel.stream() .anyMatch( d -> d.getId().equals(savedDevice.getId()) && d.getTenantId().equals(tenantId) && d.getDeviceProfileId().equals(savedDevice.getDeviceProfileId()) && d.getLabel().equals(savedDevice.getLabel()) ) );  PageLink pageLinkWithCustomer = new PageLink(100, 0, savedCustomer.getTitle()); List<DeviceInfo> deviceInfosWithCustomer = deviceService .findDeviceInfosByFilter(DeviceInfoFilter.builder().tenantId(tenantId).deviceProfileId(savedDevice.getDeviceProfileId()).build(), pageLinkWithCustomer).getData();  Assert."<AssertPlaceHolder>"; Assert.assertTrue( deviceInfosWithCustomer.stream() .anyMatch( d -> d.getId().equals(savedDevice.getId()) && d.getTenantId().equals(tenantId) && d.getDeviceProfileId().equals(savedDevice.getDeviceProfileId()) && d.getCustomerId().equals(savedCustomer.getId()) && d.getCustomerTitle().equals(savedCustomer.getTitle()) ) ); }
[*] target: assertFalse(deviceInfosWithCustomer.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( deviceInfosWithCustomer. isEmpty ( ) )
************************************
[+] input: IOException { Proto proto = ProtocolSelector.getProto(null, null, null); "<AssertPlaceHolder>"; }
[*] target: assertNull(proto)
[-] pred: org. junit. Assert. assertNull ( proto )
************************************
[+] input: SonicRespException { WindowSize size = iosDriver.getWindowSize(); Assert."<AssertPlaceHolder>"; Assert.assertTrue(size.getHeight() > 0); Assert.assertTrue(size.getWidth() > 0); }
[*] target: assertNotNull(size)
[-] pred: org. junit. Assert. assertNotNull ( size )
************************************
[+] input: Exception { int someQPS = 1; System.setProperty("apollo.longPollQPS", String.valueOf(someQPS));  ConfigUtil configUtil = new ConfigUtil();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(someQPS, configUtil.getLongPollQPS())
[-] pred: org. junit. Assert. assertEquals ( someQPS, configUtil. getLongPollQPS() )
************************************
[+] input: testMoveUpDownEnablement() { model.addParameter(); model.addParameter(); model.addParameter();  // no selection, both buttons disabled model.setSelectedParameterRow(new int[0]); assertTrue(!model.canMoveParameterUp()); assertTrue(!model.canMoveParameterDown());  // multiple selection, both buttons disabled model.setSelectedParameterRow(new int[] { 1, 2 }); assertTrue(!model.canMoveParameterUp()); assertTrue(!model.canMoveParameterDown());  // select the first param, up button disabled, down button enabled model.setSelectedParameterRow(new int[] { 1 }); assertTrue(!model.canMoveParameterUp()); assertTrue(model.canMoveParameterDown());  // select the middle row, both buttons enabled model.setSelectedParameterRow(new int[] { 2 }); assertTrue(model.canMoveParameterUp()); "<AssertPlaceHolder>";  }
[*] target: assertTrue(model.canMoveParameterDown())
[-] pred: org. junit. Assert. assertTrue ( model. canMoveParameterDown ( ) )
************************************
[+] input: testFindAssetProfileInfoById() { AssetProfile assetProfile = this.createAssetProfile(tenantId, "Asset Profile"); AssetProfile savedAssetProfile = assetProfileService.saveAssetProfile(assetProfile); AssetProfileInfo foundAssetProfileInfo = assetProfileService.findAssetProfileInfoById(tenantId, savedAssetProfile.getId()); Assert."<AssertPlaceHolder>"; Assert.assertEquals(savedAssetProfile.getId(), foundAssetProfileInfo.getId()); Assert.assertEquals(savedAssetProfile.getName(), foundAssetProfileInfo.getName()); }
[*] target: assertNotNull(foundAssetProfileInfo)
[-] pred: org. junit. Assert. assertNotNull ( foundAssetProfileInfo )
************************************
[+] input: testExtractDefaultValueNULL() { List<String> columnSpecs = Collections.singletonList("default"); String actualDefault = schemaManager.extractDefaultValue(DorisType.STRING, columnSpecs); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actualDefault)
[-] pred: org. junit. Assert. assertNull ( actualDefault )
************************************
[+] input: testLoadX509FromPath() { X509Certificate certificate = PemUtil.loadX509FromPath(MERCHANT_CERTIFICATE_PATH); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(certificate)
[-] pred: org. junit. Assert. assertNotNull ( certificate )
************************************
[+] input: Exception { Symbol symbol = getUniqueSymbol(program, "entry"); Address addr = symbol.getAddress(); String originalText = "this is a plate comment that is meant to be longer than the available " + "width, as to trigger clipping"; int transactionID = program.startTransaction("test"); try { CodeUnit cu = program.getListing().getCodeUnitAt(addr); cu.setCommentAsArray(CodeUnit.PLATE_COMMENT, new String[] { originalText }); // create a reference to addr program.getReferenceManager() .addMemoryReference(getAddr(0x010023ee), addr, RefType.DATA, SourceType.USER_DEFINED, 0); } finally { program.endTransaction(transactionID, true); }  program.flushEvents(); waitForPostedSwingRunnables(); cb.updateNow();  goToService.goTo(addr);  setBooleanOption(PlateFieldFactory.SHOW_FUNCTION_PLATES_OPTION, true);  assertTrue(cb.goToField(addr, PlateFieldFactory.FIELD_NAME, 1, 1)); ListingTextField tf = (ListingTextField) cb.getCurrentField(); assertEquals(3, tf.getNumRows()); String text = tf.getText(); assertTrue("Text does not have ellipses: " + text, text.indexOf("... *") != -1);  // check tooltip String fullText = tf.getTextWithLineSeparators(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(originalText, fullText)
[-] pred: org. junit. Assert. assertEquals ( originalText, fullText )
************************************
[+] input: testGetEventTypeRecorderSyncTapDataEvent() { List<TapdataEvent> list = new ArrayList<>(); TapdataEvent event = new TapdataEvent(); event.setTapEvent(tapEvent); event.setSourceTime(System.nanoTime()); list.add(event); HandlerUtil.EventTypeRecorder recorder = handler.getEventTypeRecorderSyncTapDataEvent(list); Assert."<AssertPlaceHolder>"; Assert.assertTrue(recorder.getMemorySize() > 0); }
[*] target: assertNotNull(recorder)
[-] pred: org. junit. Assert. assertNotNull ( recorder )
************************************
[+] input: testIsEnabled() { CustomConsoleAppender<Object> appender = new CustomConsoleAppender<>(); assertFalse(appender.isEnabled());  System.setProperty(CustomConsoleAppender.ENABLE_CONSOLE_APPENDER_KEY, "true"); appender = new CustomConsoleAppender<>(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(appender.isEnabled())
[-] pred: org. junit. Assert. assertTrue ( appender. isEnabled() )
************************************
[+] input: JsonProcessingException { ServerNamingAbility expected = new ServerNamingAbility(); expected.setSupportJraft(true); String serializeJson = jacksonMapper.writeValueAsString(expected); ServerNamingAbility actual = jacksonMapper.readValue(serializeJson, ServerNamingAbility.class); assertEquals(expected, actual); actual = new ServerNamingAbility(); assertNotEquals(expected, actual); actual.setSupportJraft(true); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { Assume.assumeFalse(TinkFips.useOnlyFips()); Assume.assumeTrue(ChaCha20Poly1305Jce.isSupported());  JsonObject json = WycheproofTestUtil.readJson( "../wycheproof/testvectors/chacha20_poly1305_test.json"); int errors = 0; JsonArray testGroups = json.getAsJsonArray("testGroups"); for (int i = 0; i < testGroups.size(); i++) { JsonObject group = testGroups.get(i).getAsJsonObject(); JsonArray tests = group.getAsJsonArray("tests"); for (int j = 0; j < tests.size(); j++) { JsonObject testcase = tests.get(j).getAsJsonObject(); String tcId = String.format( "testcase %d (%s)", testcase.get("tcId").getAsInt(), testcase.get("comment").getAsString()); byte[] iv = Hex.decode(testcase.get("iv").getAsString()); byte[] key = Hex.decode(testcase.get("key").getAsString()); byte[] msg = Hex.decode(testcase.get("msg").getAsString()); byte[] aad = Hex.decode(testcase.get("aad").getAsString()); byte[] ct = Hex.decode(testcase.get("ct").getAsString()); byte[] tag = Hex.decode(testcase.get("tag").getAsString()); byte[] ciphertext = Bytes.concat(iv, ct, tag); // Result is one of "valid", "invalid", "acceptable". // "valid" are test vectors with matching plaintext, ciphertext and tag. // "invalid" are test vectors with invalid parameters or invalid ciphertext and tag. // "acceptable" are test vectors with weak parameters or legacy formats. String result = testcase.get("result").getAsString(); try { Aead aead = createInstance(key); byte[] decrypted = aead.decrypt(ciphertext, aad); boolean eq = TestUtil.arrayEquals(decrypted, msg); if (result.equals("invalid")) { System.out.printf( "FAIL %s: accepting invalid ciphertext, cleartext: %s, decrypted: %s%n", tcId, Hex.encode(msg), Hex.encode(decrypted)); errors++; } else { if (!eq) { System.out.printf( "FAIL %s: incorrect decryption, result: %s, expected: %s%n", tcId, Hex.encode(decrypted), Hex.encode(msg)); errors++; } } } catch (GeneralSecurityException ex) { if (result.equals("valid")) { System.out.printf("FAIL %s: cannot decrypt, exception %s%n", tcId, ex); errors++; } } } } "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors)
[-] pred: org. junit. Assert. assertEquals ( 0, errors )
************************************
[+] input: whenResolve_insideSubmodelElementCollection_success() { String submodelId = "http://example.org/submodel"; String submodelElementIdShort = "foo"; String submodelElementListIdShort = "list"; SubmodelElement expected = new DefaultProperty.Builder() .idShort(submodelElementIdShort) .value("bar") .build(); SubmodelElementCollection list = new DefaultSubmodelElementCollection.Builder() .idShort(submodelElementListIdShort) .value(expected) .build(); Environment environment = new DefaultEnvironment.Builder() .submodels(new DefaultSubmodel.Builder() .id(submodelId) .submodelElements(list) .build()) .build(); Reference reference = new DefaultReference.Builder() .keys(new DefaultKey.Builder() .type(KeyTypes.SUBMODEL) .value(submodelId) .build()) .keys(new DefaultKey.Builder() .type(KeyTypes.SUBMODEL_ELEMENT_LIST) .value(submodelElementListIdShort) .build()) .keys(new DefaultKey.Builder() .type(KeyTypes.SUBMODEL_ELEMENT) .value(submodelElementIdShort) .build()) .build(); Referable actual = AasUtils.resolve(reference, environment); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testLoadSnapshotOperate() { List<SnapshotOperation> snapshotOperations = serviceMetadataProcessor.loadSnapshotOperate();  Assert."<AssertPlaceHolder>"; Assert.assertEquals(snapshotOperations.size(), 1); }
[*] target: assertNotNull(snapshotOperations)
[-] pred: org. junit. Assert. assertNotNull ( snapshotOperations )
************************************
[+] input: testSetGroup() { String group = "default"; metadataOperation.setGroup(group);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(metadataOperation.getGroup(), group)
[-] pred: org. junit. Assert. assertEquals ( metadataOperation. getGroup(), group )
************************************
[+] input: testConstructorRoot4() { CategoryPath c = new CategoryPath("/"); assertEquals("/", c.getPath()); assertEquals("", c.getName()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(c.isRoot())
[-] pred: org. junit. Assert. assertTrue ( c. isRoot() )
************************************
[+] input: testGetEventTypeRecorderSyncTapDataEvent3() { List<TapdataEvent> list = new ArrayList<>(); TapdataEvent event = new TapdataEvent(); event.setTapEvent(tapEvent); event.setSourceTime(System.nanoTime()); list.add(event); handler = new SyncGetMemorySizeHandler(new AtomicLong(100)); HandlerUtil.EventTypeRecorder recorder = handler.getEventTypeRecorderSyncTapDataEvent(list); Assert."<AssertPlaceHolder>"; Assert.assertEquals(100, recorder.getMemorySize()); }
[*] target: assertNotNull(recorder)
[-] pred: org. junit. Assert. assertNotNull ( recorder )
************************************
[+] input: Throwable { List<Integer> list = Arrays.asList(new Integer[] { 1, 2, 4, 3 }); List<String> res = new ArrayList<>(); each(TypeSpec.VOID, list.iterator(), (e, seq) -> { append("" + e, res).handle(seq::repeat); }).get(1000, TimeUnit.MILLISECONDS);  List<String> exp = Arrays.asList(new String[] { "1", "2", "4", "3" }); "<AssertPlaceHolder>"; }
[*] target: assertEquals(exp, res)
[-] pred: org. junit. Assert. assertEquals ( exp, res )
************************************
[+] input: Exception { createTestModel(); mb.createTestProcessesAndThreads();  modelService.recordTarget(mb.testProcess1, new TestDebuggerTargetTraceMapper(mb.testProcess1));  // The most complicated case, lest I want another dimension in a cross product mb.createTestThreadStacksAndFramesHaveRegisterBanks();  waitForPass(() -> { TraceThread traceThread = modelService.getTraceThread(mb.testProcess1, mb.testThread1); "<AssertPlaceHolder>"; assertEquals("Processes[1].Threads[1]", traceThread.getPath()); }); }
[*] target: assertNotNull(traceThread)
[-] pred: org. junit. Assert. assertNotNull ( traceThread )
************************************
[+] input: testRingTopology_mostRightNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.ringTopology(population, 15);  TestSuiteChromosome exepcted_individual = population.get(0); TestSuiteChromosome returned_individual = neighbors.get(2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testEmptyList() { SetBackedList list = new SetBackedList(EMPTY_SET); assertEquals(0, list.size()); assertEquals(true, list.isEmpty()); assertEquals(false, list.contains(1)); assertEquals(false, list.iterator().hasNext()); ListIterator it = list.listIterator(); assertEquals(false, it.hasNext()); assertEquals(-1, it.previousIndex()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, it.nextIndex())
[-] pred: org. junit. Assert. assertEquals ( 0, it. nextIndex() )
************************************
[+] input: Exception {  Program testProgram = buildProgram("libopencoreplayer.so", false);  Listing listing = testProgram.getListing(); AddressSpace space = testProgram.getLanguage().getAddressFactory().getDefaultAddressSpace();  // Offsets where there shouldn't be strings because existing refs were "in the way" int[] nonExpectedOffsets = new int[] { 0xa7195fd4, 0xa7196ee8 }; Data dataHere;  // Verify these aren't here before running Strings Analyzer for (int nonExpectedOffset : nonExpectedOffsets) { dataHere = listing.getDefinedDataAt(addr(space, nonExpectedOffset)); assertNull(dataHere); }  // Create references ReferenceManager refMgr = testProgram.getReferenceManager(); refMgr.addMemoryReference(addr(space, 0xa7197898), addr(space, 0xa7195fda), RefType.DATA, SourceType.USER_DEFINED, 1);  refMgr.addMemoryReference(addr(space, 0xa7196f62), addr(space, 0xa7196efc), RefType.DATA, SourceType.USER_DEFINED, 1);  AutoAnalysisManager manager = AutoAnalysisManager.getAnalysisManager(testProgram);  // Run strings analyzer StringsAnalyzer analyzer = new StringsAnalyzer(); analyzer.setCreateStringOverExistingReference(false);// Option is unchecked analyzer.setStringEndAlignment(1); analyzer.added(testProgram, null, monitor, manager.getMessageLog());  for (int nonExpectedOffset : nonExpectedOffsets) { dataHere = listing.getDefinedDataAt(addr(space, nonExpectedOffset)); assertNull(dataHere); }  // String that would have been created if parameter is checked String[] largerStrs = new String[] { "PVFMVideoMIO", "set to invalid mode (%d)" }; String[] nullBits = new String[] { "00", "00" };  // Now run again with parameter enabled and verify strings are there analyzer.setCreateStringOverExistingReference(true);// Option is checked analyzer.added(testProgram, null, monitor, manager.getMessageLog());  String stringHere; for (int i = 0; i < nonExpectedOffsets.length; i++) { dataHere = listing.getDefinedDataAt(addr(space, nonExpectedOffsets[i])); "<AssertPlaceHolder>"; stringHere = dataHere.getDefaultValueRepresentation(); assertEquals(""" + largerStrs[i] + """, stringHere); } }
[*] target: assertNotNull(dataHere)
[-] pred: org. junit. Assert. assertNotNull ( dataHere )
************************************
[+] input: testSetNotAllowNegativeModeWhileCurrentValueIsNegative() { field.setValue(-10); field.setAllowNegativeValues(false); assertEquals("", field.getText()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, field.getIntValue())
[-] pred: org. junit. Assert. assertEquals ( 0, field. getIntValue() )
************************************
[+] input: testBuilderHeader() { Header header = NamingHttpUtil.builderHeader(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(header.getValue(HttpHeaderConsts.CLIENT_VERSION_HEADER), VersionUtils.version); Assert.assertEquals(header.getValue(HttpHeaderConsts.USER_AGENT_HEADER), VersionUtils.getFullClientVersion()); Assert.assertEquals(header.getValue(HttpHeaderConsts.ACCEPT_ENCODING), "gzip,deflate,sdch"); Assert.assertEquals(header.getValue(HttpHeaderConsts.CONNECTION), "Keep-Alive"); Assert.assertNotNull(header.getValue(HttpHeaderConsts.REQUEST_ID)); Assert.assertEquals(header.getValue(HttpHeaderConsts.REQUEST_MODULE), "Naming"); }
[*] target: assertNotNull(header)
[-] pred: org. junit. Assert. assertNotNull ( header )
************************************
[+] input: testConfirmNumber() { String foo = "foo"; Number number = mock(Number.class); when(number.toString()).thenReturn(foo);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(foo, number.toString())
[-] pred: org. junit. Assert. assertEquals ( foo, number. toString ( ) )
************************************
[+] input: test() { List<QueryOperator> result = hazelcastSourcePdkDataNode.constructQueryOperator(null,new QueryOperator()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(0,result.size())
[-] pred: org. junit. Assert. assertEquals ( 0, result. size ( ) )
************************************
[+] input: testGetThreadInfo() { ThreadDomain threadDomain = JvmUtils.getThreadInfo(); "<AssertPlaceHolder>"; log.info(threadDomain.toJsonString()); }
[*] target: assertNotNull(threadDomain)
[-] pred: org. junit. Assert. assertNotNull ( threadDomain )
************************************
[+] input: isAvailable_NOTIFICATION_BUBBLESisOn_shouldReturnTrue() { Settings.Global.putInt(mContext.getContentResolver(), NOTIFICATION_BUBBLES, SYSTEM_WIDE_ON); mController.onResume(mAppRow, null, null, null, null, null);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(mController.isAvailable())
[-] pred: org. junit. Assert. assertTrue ( mController. isAvailable() )
************************************
[+] input: Exception { createPropertyMap("TEST"); Table propertyTable = null;  TestSaveable[] objs = new TestSaveable[20]; for (int i = 0; i < 20; i++) { objs[i] = createSaveableObject(); propertyMap.add(addr(i * 100), objs[i]); if (i == 0) { propertyTable = db.getTable(propertyMap.getTableName()); "<AssertPlaceHolder>"; } } propertyTable = db.getTable(propertyMap.getTableName()); assertEquals(propertyTable.getRecordCount(), 20); }
[*] target: assertNotNull(propertyTable)
[-] pred: org. junit. Assert. assertNotNull ( propertyTable )
************************************
[+] input: NacosException { String dataId = "1"; String group = "2"; String content = "123"; String namespace = ""; String casMd5 = "96147704e3cb8be8597d55d75d244a02"; String type = ConfigType.PROPERTIES.getType();  Mockito.when(mockWoker.publishConfig(dataId, group, namespace, null, null, null, content, "", casMd5, type)) .thenReturn(true);  final boolean b = nacosConfigService.publishConfigCas(dataId, group, content, casMd5, type); Assert."<AssertPlaceHolder>";  Mockito.verify(mockWoker, Mockito.times(1)) .publishConfig(dataId, group, namespace, null, null, null, content, "", casMd5, type); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: testGetInstance() { AuthPluginManager instance = AuthPluginManager.getInstance();  Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(instance)
[-] pred: org. junit. Assert. assertNotNull ( instance )
************************************
[+] input: multiValuesAndWhitespace() { // given String nativeSql = "INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,?,?)  (?,?,?,?) (?,?,?,?)"; Object[] parameters = Stream.of("d1", 1, 100, 3.14, "abc", 4, 200, 3.1415, "xyz", 5, 300, 3.141592, "uvw", 6).toArray();  // when String actual = Utils.getNativeSql(nativeSql, parameters);  // then String expected = "INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (100,3.14,'abc',4)  (200,3.1415,'xyz',5) (300,3.141592,'uvw',6)"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testConstructorParentAndVarargsArray() { CategoryPath parent = new CategoryPath("/apple/peaches"); CategoryPath c = new CategoryPath(parent, new String[] { "pumpkin", "pie" }); assertEquals("pie", c.getName()); c = c.getParent(); assertEquals("pumpkin", c.getName()); c = c.getParent(); assertEquals("peaches", c.getName()); c = c.getParent(); assertEquals("apple", c.getName()); c = c.getParent(); assertEquals("", c.getName()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(c.isRoot())
[-] pred: org. junit. Assert. assertTrue ( c. isRoot() )
************************************
[+] input: testBogusLocation() { SymbolServer symbolServer = symbolServerInstanceCreatorRegistry.newSymbolServer("blah://", symbolServerInstanceCreatorContext); "<AssertPlaceHolder>"; }
[*] target: assertNull(symbolServer)
[-] pred: org. junit. Assert. assertNull ( symbolServer )
************************************
[+] input: Exception { int someQPS = 1; System.setProperty("apollo.loadConfigQPS", String.valueOf(someQPS));  ConfigUtil configUtil = new ConfigUtil();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(someQPS, configUtil.getLoadConfigQPS())
[-] pred: org. junit. Assert. assertEquals ( someQPS, configUtil. getLoadConfigQPS ( ) )
************************************
[+] input: testOverlap_Before_Start() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(5, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(0, 5, new ImmutableExceptionHandler("LException2;", 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 5, ImmutableList.of(new ImmutableExceptionHandler("LException2;", 6))), new ImmutableTryBlock(5, 5, ImmutableList.of(new ImmutableExceptionHandler("LException1;", 5))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: SQLException { DatabaseMetaData meta = conn.getMetaData(); Assert."<AssertPlaceHolder>"; assertEquals("com.taosdata.jdbc.rs.RestfulDriver", meta.getDriverName()); }
[*] target: assertNotNull(meta)
[-] pred: org. junit. Assert. assertNotNull ( meta )
************************************
[+] input: testFoo() { String targetClassName = Foo.class.getCanonicalName(); GetStaticGraph graph = GetStaticGraphGenerator .generate(targetClassName);  Set<String> expectedClasses = new HashSet<>(Arrays.asList( Foo.class.getCanonicalName(), Bar1.class.getCanonicalName(), Bar2.class.getCanonicalName(), Bar3.class.getCanonicalName(), Bar4.class.getCanonicalName(), Bar5.class.getCanonicalName(), Bar6.class.getCanonicalName(), Bar7.class.getCanonicalName(), BarBar1.class.getCanonicalName()));  Set<String> allClasses = new HashSet<>(); allClasses.addAll(graph.getSourceClasses()); allClasses.addAll(graph.getTargetClasses());  assertEquals(expectedClasses, allClasses);  Map<String, Set<String>> expectedStaticFields = new HashMap<>(); expectedStaticFields.put(Bar2.class.getCanonicalName(), new HashSet<>(Arrays.asList("fieldBar2"))); expectedStaticFields.put(Bar6.class.getCanonicalName(), new HashSet<>(Arrays.asList("fieldBar6"))); expectedStaticFields.put(Bar7.class.getCanonicalName(), new HashSet<>(Arrays.asList("fieldBar7")));  Map<String, Set<String>> staticFields = graph.getStaticFields(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedStaticFields, staticFields)
[-] pred: org. junit. Assert. assertEquals ( expectedStaticFields, staticFields )
************************************
[+] input: Exception {  /*  Note: the empty template type: '<, std...' <, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>   std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::_Bind<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (EduAppConfigs::*(EduAppConfigs const*))() const>::operator()<, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()  */ String mangled = "_ZNSt5_BindIFM13EduAppConfigsKFNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEPKS0_EEclIJES6_EET0_DpOT_";  String demangled = process.demangle(mangled);  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  String signature = object.getSignature(false); assertEquals( "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> std::_Bind<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(EduAppConfigs::*(EduAppConfigs_const*))()const>::operator()<missing_argument,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(void)", signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: setMatchShouldReturnGivenMatchWhenGivenMatchIsNotNull() { ByteMatch newMatch = new ByteMatch(Patterns.exactMatch("xyz"), new NameState()); ByteTransition transition = match.setMatch(newMatch); "<AssertPlaceHolder>"; }
[*] target: assertSame(newMatch, transition)
[-] pred: org. junit. Assert. assertSame ( newMatch, transition )
************************************
[+] input: gameObjectFindByName() { SceneGraph sceneGraph = new SceneGraph(null);  // The GO to search for String searchName = "SearchName"; GameObject searchObject = new GameObject(sceneGraph, searchName, -1);  // Parent GO GameObject parent = new GameObject(sceneGraph, "Parent", -1); parent.addChild(searchObject);  sceneGraph.addGameObject(parent);  GameObject result = sceneGraph.findByName(searchName); Assert."<AssertPlaceHolder>"; Assert.assertEquals(searchName, result.name); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testFindAssetInfoByTenantIdAndType() { Customer customer = new Customer(); customer.setTitle("Customer X"); customer.setTenantId(tenantId); Customer savedCustomer = customerService.saveCustomer(customer);  Asset asset = new Asset(); asset.setTenantId(tenantId); asset.setName("default"); asset.setType("default"); asset.setLabel("label"); asset.setCustomerId(savedCustomer.getId()); Asset savedAsset = assetService.saveAsset(asset);  PageLink pageLinkWithLabel = new PageLink(100, 0, "label"); List<AssetInfo> assetInfosWithLabel = assetService .findAssetInfosByTenantIdAndType(tenantId, asset.getType(), pageLinkWithLabel).getData();  Assert.assertFalse(assetInfosWithLabel.isEmpty()); Assert.assertTrue( assetInfosWithLabel.stream() .anyMatch( d -> d.getId().equals(savedAsset.getId()) && d.getTenantId().equals(tenantId) && d.getAssetProfileName().equals(savedAsset.getType()) && d.getLabel().equals(savedAsset.getLabel()) ) );  PageLink pageLinkWithCustomer = new PageLink(100, 0, savedCustomer.getTitle()); List<AssetInfo> assetInfosWithCustomer = assetService .findAssetInfosByTenantIdAndType(tenantId, asset.getType(), pageLinkWithCustomer).getData();  Assert."<AssertPlaceHolder>"; Assert.assertTrue( assetInfosWithCustomer.stream() .anyMatch( d -> d.getId().equals(savedAsset.getId()) && d.getTenantId().equals(tenantId) && d.getAssetProfileName().equals(savedAsset.getType()) && d.getCustomerId().equals(savedCustomer.getId()) && d.getCustomerTitle().equals(savedCustomer.getTitle()) ) ); }
[*] target: assertFalse(assetInfosWithCustomer.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( assetInfosWithCustomer. isEmpty ( ) )
************************************
[+] input: simpleLineReaderWithLineContinue1() { SimpleLineReader simpleLineReader = new SimpleLineReader(new Document("aaa\\\nbbb\nccc\n")); assertEquals("aaa\\\nbbb\n", simpleLineReader.readLine()); assertEquals("ccc\n", simpleLineReader.readLine()); "<AssertPlaceHolder>"; }
[*] target: assertNull(simpleLineReader.readLine())
[-] pred: org. junit. Assert. assertNull ( simpleLineReader. readLine() )
************************************
[+] input: testGetEventTypeRecorderSyncTapEvent1() { List<TapEvent> list = null; HandlerUtil.EventTypeRecorder recorder = handler.getEventTypeRecorderSyncTapEvent(list); Assert."<AssertPlaceHolder>"; Assert.assertEquals(0, recorder.getMemorySize()); }
[*] target: assertNotNull(recorder)
[-] pred: org. junit. Assert. assertNotNull ( recorder )
************************************
[+] input: testGetEventTypeRecorderSyncTapDataEvent1() { List<TapdataEvent> list = null; HandlerUtil.EventTypeRecorder recorder = handler.getEventTypeRecorderSyncTapDataEvent(list); Assert."<AssertPlaceHolder>"; Assert.assertEquals(0, recorder.getMemorySize()); }
[*] target: assertNotNull(recorder)
[-] pred: org. junit. Assert. assertNotNull ( recorder )
************************************
[+] input: testFindDefaultAssetProfileInfo() { AssetProfileInfo foundDefaultAssetProfileInfo = assetProfileService.findDefaultAssetProfileInfo(tenantId); Assert."<AssertPlaceHolder>"; Assert.assertNotNull(foundDefaultAssetProfileInfo.getId()); Assert.assertNotNull(foundDefaultAssetProfileInfo.getName()); }
[*] target: assertNotNull(foundDefaultAssetProfileInfo)
[-] pred: org. junit. Assert. assertNotNull ( foundDefaultAssetProfileInfo )
************************************
[+] input: testDeleteCustomer() { Customer customer = new Customer(); customer.setTitle("My customer"); customer.setTenantId(tenantId); Customer savedCustomer = customerService.saveCustomer(customer); customerService.deleteCustomer(tenantId, savedCustomer.getId()); Customer foundCustomer = customerService.findCustomerById(tenantId, savedCustomer.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(foundCustomer)
[-] pred: org. junit. Assert. assertNull ( foundCustomer )
************************************
[+] input: isAvailable_NOTIFICATION_BUBBLESisOff_shouldReturnFalse() { Settings.Global.putInt(mContext.getContentResolver(), NOTIFICATION_BUBBLES, SYSTEM_WIDE_OFF); mController.onResume(mAppRow, null, null, null, null, null);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(mController.isAvailable())
[-] pred: org. junit. Assert. assertFalse ( mController. isAvailable() )
************************************
[+] input: testIsScreencast() { boolean isScreencast = customVideoCapturer.isScreencast(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(isScreencast)
[-] pred: org. junit. Assert. assertFalse ( isScreencast )
************************************
[+] input: testStartsWith() { String prefix = "test"; String str = "blahtestchen"; int result = StringHelper.StringStartsWith(str, prefix, 4); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result > 0)
[-] pred: org. junit. Assert. assertTrue ( result > 0 )
************************************
[+] input: testGetGarbageCollectorInfo() { GarbageCollectorDomain garbageCollectorDomain = JvmUtils.getGarbageCollectorInfo(); "<AssertPlaceHolder>"; log.info(garbageCollectorDomain.toJsonString()); }
[*] target: assertNotNull(garbageCollectorDomain)
[-] pred: org. junit. Assert. assertNotNull ( garbageCollectorDomain )
************************************
[+] input: test_getGraynessValue_fixedG() { // given int red = 67, green = 255, blue = 184;  // when FixedGrayingStrategy strategy = new FixedGrayingStrategy(FixedGrayingStrategy.FixedOption.G); int graynessValue = strategy.getGraynessValue(red, green, blue);  // then Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(green, graynessValue)
[-] pred: org. junit. Assert. assertEquals ( green, graynessValue )
************************************
[+] input: IOException { pstmt_insert.setTimestamp(1, new Timestamp(System.currentTimeMillis()));  //        ByteArrayOutputStream baos = new ByteArrayOutputStream(); //        ObjectOutputStream oos = new ObjectOutputStream(baos); //        oos.writeObject(new Person("john", 33, true)); //        oos.flush(); //        byte[] bytes = baos.toByteArray(); //        pstmt_insert.setBytes(9, bytes);  pstmt_insert.setBytes(9, new Person("john", 33, true).toString().getBytes()); int ret = pstmt_insert.executeUpdate(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: testSplitWithMaxWithoutNewlines() { // single string--no whitespace or newlines upon which to split List<String> lines = HtmlLineSplitter.split("abcdefghi", 3); "<AssertPlaceHolder>"; assertEquals("abcdefghi", lines.get(0)); }
[*] target: assertEquals(1, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 1, lines. size ( ) )
************************************
[+] input: simpleLineReaderWithEscapedLF() { SimpleLineReader simpleLineReader = new SimpleLineReader(new Document("a\nb\\nc\n")); assertEquals("a\n", simpleLineReader.readLine()); assertEquals("b\\nc\n", simpleLineReader.readLine()); "<AssertPlaceHolder>"; }
[*] target: assertNull(simpleLineReader.readLine())
[-] pred: org. junit. Assert. assertNull ( simpleLineReader. readLine() )
************************************
[+] input: testMazeSolution() { char[] solution = "ssssddddwwaawwddddssssddwwww".toCharArray(); int ret_val = Maze.walk(solution); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret_val)
[-] pred: org. junit. Assert. assertEquals ( 1, ret_val )
************************************
[+] input: testDeleteTenant() { Tenant tenant = new Tenant(); tenant.setTitle("My tenant"); Tenant savedTenant = tenantService.saveTenant(tenant); tenantService.deleteTenant(savedTenant.getId()); Tenant foundTenant = tenantService.findTenantById(savedTenant.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(foundTenant)
[-] pred: org. junit. Assert. assertNull ( foundTenant )
************************************
[+] input: Exception {  String mangled = "_ZZNK4entt14basic_registryI8EntityIdE6assureI32FilteredTransformationAttributesI26PreHillsEdgeTransformationEEERKNS2_12pool_handlerIT_EEvENKUlRNS_10sparse_setIS1_EERS2_S1_E_cvPFvSE_SF_S1_EEv"; String demangled = process.demangle(mangled);  /*  Full demangled:  Operator Text  entt:: basic_registry<EntityId>:: assure<FilteredTransformationAttributes<PreHillsEdgeTransformation> >() const:: {lambda(entt::sparse_set<EntityId>&, entt::basic_registry<EntityId>&, EntityId)#1}:: operator void (*)(entt::sparse_set<EntityId>&, entt::basic_registry<EntityId>&, EntityId)() const  Operartor Without Namespace  operator void (*)(entt::sparse_set<EntityId>&, entt::basic_registry<EntityId>&, EntityId)()  Simplified Cast Operator Construct  operator void (*)(A,B,C)()  */  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  //@formatter:off String expected = "void (* " + "entt::" + "basic_registry::" + "assure() const::" + "{lambda(entt::sparse_set&,entt::basic_registry&,EntityId)#1}::" + "operator.cast.to.function.pointer(void)" + ")(entt::sparse_set<EntityId> &,entt::basic_registry<EntityId> &,EntityId)"; //@formatter:on String signature = object.getSignature(false); assertEquals(expected, signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: testTemporarilyAllowReorderingExpires() { // GIVEN having the panel open (which would block reordering) mVisualStabilityManager.setScreenOn(true); mVisualStabilityManager.setPanelExpanded(true); mVisualStabilityManager.addReorderingAllowedCallback(mCallback, false  /* persistent */);  // WHEN we temprarily allow reordering and then wait until the window expires mVisualStabilityManager.temporarilyAllowReordering(); assertTrue(mVisualStabilityManager.isReorderingAllowed()); mTestableLooper.processMessages(1);  // THEN reordering is no longer allowed "<AssertPlaceHolder>"; }
[*] target: assertFalse(mVisualStabilityManager.isReorderingAllowed())
[-] pred: org. junit. Assert. assertFalse ( mVisualStabilityManager. isReorderingAllowed() )
************************************
[+] input: testSplitNoMaxWithoutNewlines() { List<String> lines = HtmlLineSplitter.split("abcdef", 0); "<AssertPlaceHolder>"; assertEquals("abcdef", lines.get(0)); }
[*] target: assertEquals(1, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 1, lines. size ( ) )
************************************
[+] input: testAddSubtractWrap() { Address a1 = new GenericAddress(space, 10); long offset = 0x7fffffffffL; Address a2 = a1.addWrap(offset); Address a3 = a2.subtractWrap(offset); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(a1, a3)
[-] pred: org. junit. Assert. assertEquals ( a1, a3 )
************************************
[+] input: testImplicit() { DijkstraShortestPathsAlgorithm<Integer, CollatzEdge> dijkstra = new DijkstraShortestPathsAlgorithm<>(new CollatzGraph(), 10d, GEdgeWeightMetric.unitMetric()); Collection<Deque<CollatzEdge>> opt = dijkstra.computeOptimalPaths(1, 10); Collection<Deque<CollatzEdge>> exp = makeCollatzPaths(1, // new CollatzOp[] { CollatzOp.INV_DIV2, CollatzOp.INV_DIV2, CollatzOp.SQR, CollatzOp.INV_MUL3_ADD1, CollatzOp.INV_DIV2 }, // new CollatzOp[] { CollatzOp.INV_DIV2, CollatzOp.SQR, CollatzOp.SQR, CollatzOp.INV_MUL3_ADD1, CollatzOp.INV_DIV2 }); "<AssertPlaceHolder>"; }
[*] target: assertEquals(exp, opt)
[-] pred: org. junit. Assert. assertEquals ( exp, opt )
************************************
[+] input: Exception { AddressSet set = new AddressSet(); set.addRange(getAddr(0), getAddr(0x200)); set.addRange(getAddr(0x205), getAddr(0x1000)); set.addRange(getAddr(0x5000), getAddr(0x6001)); AddressSetPropertyMap pm = program.createAddressSetPropertyMap("MyMap"); pm.add(set);  AddressSet s = new AddressSet(); s.addRange(getAddr(5), getAddr(0x6000));  pm.remove(s);  s = set.subtract(new AddressSet(getAddr(5), getAddr(0x6000))); AddressSet pset = pm.getAddressSet(); "<AssertPlaceHolder>";  }
[*] target: assertEquals(s, pset)
[-] pred: org. junit. Assert. assertEquals ( s, pset )
************************************
[+] input: Exception { createLabel(addr(100), "primary"); createLabel(addr(100), "fred"); createLabel(addr(100), "joe"); Symbol s = st.getPrimarySymbol(addr(100)); "<AssertPlaceHolder>"; assertEquals("primary", s.getName()); }
[*] target: assertNotNull(s)
[-] pred: org. junit. Assert. assertNotNull ( s )
************************************
[+] input: testAsList_VarArgs_Null() {  List<String> list = CollectionUtils.asList((String) null); assertNotNull(list); "<AssertPlaceHolder>"; }
[*] target: assertTrue(list.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( list. isEmpty() )
************************************
[+] input: removeNotif_notInOverflow_notIntercepted() { // Get bubble with notif in shade. mEntryListener.onPendingEntryAdded(mRow.getEntry()); mBubbleController.updateBubble(mRow.getEntry());  assertTrue(mBubbleController.hasBubbles()); assertFalse(mBubbleController.isBubbleNotificationSuppressedFromShade( mRow.getEntry()));  mBubbleController.removeBubble( mRow.getEntry().getKey(), BubbleController.DISMISS_NO_LONGER_BUBBLE); assertFalse(mBubbleController.hasBubbles());  boolean intercepted = mRemoveInterceptor.onNotificationRemoveRequested( mRow.getEntry().getKey(), mRow.getEntry(), REASON_CANCEL);  // Notif is no longer a bubble, so we should not intercept removal. "<AssertPlaceHolder>"; }
[*] target: assertFalse(intercepted)
[-] pred: org. junit. Assert. assertFalse ( intercepted )
************************************
[+] input: Exception { DorisCommittable expectCommittable = new DorisCommittable("fe:8040", "test", 100); DorisCommittableSerializer serializer = new DorisCommittableSerializer(); DorisCommittable committable = serializer.deserialize(1, serializer.serialize(expectCommittable)); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectCommittable, committable)
[-] pred: org. junit. Assert. assertEquals ( expectCommittable, committable )
************************************
[+] input: emptySGServices() { sgServices = new ArrayList<>(); connectReader = new ServerInfo();  ServerInfo targetReader = readerRebalancer.chooseCandidateServer( sgServices, connectReader, readerConnectionConfig ); Assert.assertEquals( null, targetReader );  connectReader = null; targetReader = readerRebalancer.chooseCandidateServer( sgServices, connectReader, readerConnectionConfig ); Assert.assertEquals( null, targetReader );  sgServices = null; targetReader = readerRebalancer.chooseCandidateServer( sgServices, connectReader, readerConnectionConfig ); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals( null, targetReader )
[-] pred: org. junit. Assert. assertEquals ( null, targetReader )
************************************
[+] input: replaceNothing3() { // given String nativeSql = "insert into ?.? (ts, temperature, humidity) using ?.? tags(?,?) values(now, ?, ?)";  // when String actual = Utils.getNativeSql(nativeSql, null);  // then Assert."<AssertPlaceHolder>";  }
[*] target: assertEquals(nativeSql, actual)
[-] pred: org. junit. Assert. assertEquals ( nativeSql, actual )
************************************
[+] input: Exception {  // // Test to ensure proper handling of 'float AvoidBlockGoal::Definition::* const&' // which is a const reference to a floating point member of the class // AvoidBlockGoal::Definition //  /*  Demangled:  auto && JsonUtil:: addMember<std::shared_ptr<JsonUtil::JsonSchemaObjectNode<JsonUtil::EmptyClass,AvoidBlockGoal::Definition>>,AvoidBlockGoal::Definition,float> (  std::shared_ptr<JsonUtil::JsonSchemaObjectNode<JsonUtil::EmptyClass,AvoidBlockGoal::Definition>>, float AvoidBlockGoal::Definition::*, char const *, float AvoidBlockGoal::Definition::* const&  )  */ String mangled = "_ZN8JsonUtil9addMemberISt10shared_ptrINS_20JsonSchemaObjectNodeINS_10EmptyClassEN14AvoidBlockGoal10DefinitionEEEES5_fEEODaT_MT0_T1_PKcRKSC_"; String demangled = process.demangle(mangled);  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  String signature = object.getSignature(false); assertEquals( "auto && JsonUtil::addMember<std::shared_ptr<JsonUtil::JsonSchemaObjectNode<JsonUtil::EmptyClass,AvoidBlockGoal::Definition>>,AvoidBlockGoal::Definition,float>(std::shared_ptr<JsonUtil::JsonSchemaObjectNode<JsonUtil::EmptyClass,AvoidBlockGoal::Definition>>,AvoidBlockGoal::Definition::float *,char const *,AvoidBlockGoal::Definition::float *)", signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: MQClientException { ConsumerQueueOffset consumerQueueOffset = consumerManager.getConsumer(consumer).choose(null); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(consumerQueueOffset)
[-] pred: org. junit. Assert. assertNotNull ( consumerQueueOffset )
************************************
[+] input: Exception { Service service = client.queryService(SERVICE_NAME, GROUP_NAME); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(service)
[-] pred: org. junit. Assert. assertNull ( service )
************************************
[+] input: testOverlap_Start_End() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(0, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(0, 10, new ImmutableExceptionHandler("LException2;", 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 10, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5), new ImmutableExceptionHandler("LException2;", 6))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testAsList_Collection_FromNull() {  List<String> list = CollectionUtils.asList((Collection<String>) null); assertNotNull(list); "<AssertPlaceHolder>"; }
[*] target: assertTrue(list.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( list. isEmpty() )
************************************
[+] input: lineTerminatorAndMultiValuesAndNoneOrMoreWhitespace() { String nativeSql = "INSERT Into ? TAGS(?) VALUES(?,?,\r\n?,?),(?,? ,\r\n?,?) t? tags (?) Values (?,?,?\r\n,?) (?,?,?,?) t? Tags(?) values  (?,?,?,?) , (?,?,?,?)"; Object[] parameters = Stream.of("t1", "abc", 100, 1.1, "xxx", "xxx", 200, 2.2, "xxx", "xxx", 2, "bcd", 300, 3.3, "xxx", "xxx", 400, 4.4, "xxx", "xxx", 3, "cde", 500, 5.5, "xxx", "xxx", 600, 6.6, "xxx", "xxx").toArray();  // when String actual = Utils.getNativeSql(nativeSql, parameters);  // then String expected = "INSERT Into t1 TAGS('abc') VALUES(100,1.1,\r\n'xxx','xxx'),(200,2.2 ,\r\n'xxx','xxx') t2 tags ('bcd') Values (300,3.3,'xxx'\r\n,'xxx') (400,4.4,'xxx','xxx') t3 Tags('cde') values  (500,5.5,'xxx','xxx') , (600,6.6,'xxx','xxx')"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testFindApiUsageStateByTenantId() { ApiUsageState apiUsageState = apiUsageStateService.findTenantApiUsageState(tenantId); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(apiUsageState)
[-] pred: org. junit. Assert. assertNotNull ( apiUsageState )
************************************
[+] input: shouldFilterOtherNotificationWhenEnabled() { // GIVEN that the media feature is enabled when(mMediaFeatureFlag.getEnabled()).thenReturn(true); NotificationFilter filter = new NotificationFilter(mStatusBarStateController, mMediaFeatureFlag); // WHEN the media filter is asked about an entry NotificationEntry otherEntry = new NotificationEntryBuilder().build(); final boolean shouldFilter = filter.shouldFilterOut(otherEntry); // THEN it shouldn't be filtered "<AssertPlaceHolder>"; }
[*] target: assertFalse(shouldFilter)
[-] pred: org. junit. Assert. assertFalse ( shouldFilter )
************************************
[+] input: givenUnknownClassDescriptor_whenLookup_thenClassLoaderIsNull() { final ClassLoaderStore classLoaderStore = new ClassLoaderStore(); final ClassLoaderDescriptor classLoaderDescriptor = ClassLoaderDescriptor.builder() .description("desc") .id("id") .simpleClassName("ClassLoader") .build();  final ClassLoader correspondingClassLoader = classLoaderStore.lookup(classLoaderDescriptor);  Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(correspondingClassLoader)
[-] pred: org. junit. Assert. assertNull ( correspondingClassLoader )
************************************
[+] input: testNonNull_Collection_Null() { Collection<String> c = null; c = CollectionUtils.nonNull(c); assertNotNull(c); "<AssertPlaceHolder>"; }
[*] target: assertTrue(c.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( c. isEmpty() )
************************************
[+] input: testDeleteFrom() { AddressSet set = set(0x10, 0x20, 0x30, 0x40); set.add(space2.getAddress(0x10), space2.getAddress(0x20)); set.add(space2.getAddress(0x30), space2.getAddress(0x40));  AddressSet origSet = new AddressSet(set); set.deleteToMax(space2.getAddress(0x50)); assertEquals(origSet, set);  set.deleteToMax(addr(0x15));  AddressSet expectedSet = set(0x10, 0x14); assertEquals(expectedSet, set);  set = set(0x10, 0x20, 0x30, 0x40); set.add(space2.getAddress(0x10), space2.getAddress(0x20)); set.add(space2.getAddress(0x30), space2.getAddress(0x40));  set.deleteToMax(space2.getAddress(0x15));  expectedSet = set(0x10, 0x20, 0x30, 0x40); expectedSet.add(space2.getAddress(0x10), space2.getAddress(0x14)); assertEquals(expectedSet, set);  set = set(0x10, 0x20, 0x30, 0x40); set.add(space2.getAddress(0x10), space2.getAddress(0x20)); set.add(space2.getAddress(0x30), space2.getAddress(0x40));  set.deleteToMax(addr(0x0)); assertTrue(set.isEmpty());  set = set(0x10, 0x20, 0x30, 0x40); set.add(space2.getAddress(0x10), space2.getAddress(0x20)); set.add(space2.getAddress(0x30), space2.getAddress(0x40));  set.deleteToMax(addr(0x10)); assertTrue(set.isEmpty());  // make sure handles empty set set = new AddressSet(); set.deleteToMax(addr(0x30)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(set.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( set. isEmpty ( ) )
************************************
[+] input: testFindAdminSettingsById() { AdminSettings adminSettings = adminSettingsService.findAdminSettingsByKey(SYSTEM_TENANT_ID, "general"); AdminSettings foundAdminSettings = adminSettingsService.findAdminSettingsById(SYSTEM_TENANT_ID, adminSettings.getId()); Assert."<AssertPlaceHolder>"; Assert.assertEquals(adminSettings, foundAdminSettings); }
[*] target: assertNotNull(foundAdminSettings)
[-] pred: org. junit. Assert. assertNotNull ( foundAdminSettings )
************************************
[+] input: testRandomAddNegSub() { BigInteger zero = bigIntegerRing.createZero(); BigInteger r; BigInteger s; BigInteger t; for (int index = 0; index < MAX_RANDOM; index++) { r = bigIntegerRing.createRandom(SECURE_RANDOM); s = bigIntegerRing.createRandom(SECURE_RANDOM); // r + 0 = r t = bigIntegerRing.add(r, zero); Assert.assertEquals(r, t); // r - 0 = r t = bigIntegerRing.sub(r, zero); Assert.assertEquals(r, t); // -(-r) = r t = bigIntegerRing.neg(bigIntegerRing.neg(r)); Assert.assertEquals(r, t); // r + s - s = r t = bigIntegerRing.sub(bigIntegerRing.add(r, s), s); Assert.assertEquals(r, t); // r - s + s = r t = bigIntegerRing.add(bigIntegerRing.sub(r, s), s); Assert.assertEquals(r, t); // (-r) + r = 0 t = bigIntegerRing.add(r, bigIntegerRing.neg(r)); Assert.assertEquals(zero, t); // r - r = 0 t = bigIntegerRing.sub(r, r); Assert."<AssertPlaceHolder>"; } }
[*] target: assertEquals(zero, t)
[-] pred: org. junit. Assert. assertEquals ( zero, t )
************************************
[+] input: testEquals() { ArraySortedSet<Integer> set1 = ArraySortedSet.of(Comparator.naturalOrder(), Arrays.asList(1, 2, 3)); ArraySortedSet<Integer> set2 = ArraySortedSet.of(Comparator.naturalOrder(), Arrays.asList(1, 2, 3)); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(set1.equals(set2))
[-] pred: org. junit. Assert. assertTrue ( set1. equals ( set2 ) )
************************************
[+] input: testGetAllWorkflowDefsLatestVersions() { WorkflowDef def = new WorkflowDef(); def.setName("test1"); def.setVersion(1); def.setDescription("description"); def.setCreatedBy("unit_test"); def.setCreateTime(1L); def.setOwnerApp("ownerApp"); def.setUpdatedBy("unit_test2"); def.setUpdateTime(2L); metadataDAO.createWorkflowDef(def);  def.setName("test2"); metadataDAO.createWorkflowDef(def); def.setVersion(2); metadataDAO.createWorkflowDef(def);  def.setName("test3"); def.setVersion(1); metadataDAO.createWorkflowDef(def); def.setVersion(2); metadataDAO.createWorkflowDef(def); def.setVersion(3); metadataDAO.createWorkflowDef(def);  // Placed the values in a map because they might not be stored in order of defName. // To test, needed to confirm that the versions are correct for the definitions. Map<String, WorkflowDef> allMap = metadataDAO.getAllWorkflowDefsLatestVersions().stream() .collect(Collectors.toMap(WorkflowDef::getName, Function.identity()));  "<AssertPlaceHolder>"; assertEquals(3, allMap.size()); assertEquals(1, allMap.get("test1").getVersion()); assertEquals(2, allMap.get("test2").getVersion()); assertEquals(3, allMap.get("test3").getVersion()); }
[*] target: assertNotNull(allMap)
[-] pred: org. junit. Assert. assertNotNull ( allMap )
************************************
[+] input: multiValuesAndNoneOrMoreWhitespace() { String nativeSql = "INSERT INTO ? USING traces TAGS (?, ?) VALUES (?, ?, ?, ?, ?, ?, ?)  (?, ?, ?, ?, ?, ?, ?)"; Object[] parameters = Stream.of("t1", "t1", "t2", 1632968284000L, 111.111, 119.001, 0.4, 90, 99.1, "WGS84", 1632968285000L, 111.21109999999999, 120.001, 0.5, 91, 99.19999999999999, "WGS84").toArray();  // when String actual = Utils.getNativeSql(nativeSql, parameters);  // then String expected = "INSERT INTO t1 USING traces TAGS ('t1', 't2') VALUES (1632968284000, 111.111, 119.001, 0.4, 90, 99.1, 'WGS84')  (1632968285000, 111.21109999999999, 120.001, 0.5, 91, 99.19999999999999, 'WGS84')"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetCurrentDirectory() {  JFileChooser chooser = new MockJFileChooser(); File dir = chooser.getCurrentDirectory();  Assert."<AssertPlaceHolder>"; Assert.assertTrue(dir instanceof MockFile); }
[*] target: assertTrue(dir.exists())
[-] pred: org. junit. Assert. assertTrue ( dir. exists ( ) )
************************************
[+] input: testAsSet_VarArgs_Null() {  Set<String> set = CollectionUtils.asSet((String) null); assertNotNull(set); "<AssertPlaceHolder>"; }
[*] target: assertTrue(set.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( set. isEmpty() )
************************************
[+] input: testPopulateParamsNullFields() { AzureHttpParams result = client.populateParamDefaults(null); "<AssertPlaceHolder>"; assertNotNull(result.getBaseLoginUrl()); assertNotNull(result.getBaseManagementUrl()); assertNotNull(result.getApiVersion()); assertNotNull(result.getMetricsApiVersion()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { createPropertyMap("TEST"); Table propertyTable = null;  String[] strs = new String[20]; for (int i = 0; i < 20; i++) { strs[i] = "STR" + i; propertyMap.add(addr(i * 100), strs[i]); if (i == 0) { propertyTable = db.getTable(propertyMap.getTableName()); "<AssertPlaceHolder>"; } } propertyTable = db.getTable(propertyMap.getTableName()); assertEquals(propertyTable.getRecordCount(), 20); }
[*] target: assertNotNull(propertyTable)
[-] pred: org. junit. Assert. assertNotNull ( propertyTable )
************************************
[+] input: testSelectServiceWithGroupName() { Service service1 = new Service(); service1.setEnabled(true); service1.setName("serviceName"); service1.setGroupName("groupName"); service1.setAppName("appName"); service1.setNamespaceId("namespaceId"); service1.setResetWeight(true); Map<String, Service> services = new HashMap<>(); services.put("service1", service1); Map<String, Service> resultMap = ServiceUtil.selectServiceWithGroupName(services, "groupName"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(resultMap)
[-] pred: org. junit. Assert. assertNotNull ( resultMap )
************************************
[+] input: buildUrl_providedUrl_success() { String argumentUrl = "jdbc:oracle:thin:@localhost:1521:ORCLPDB1"; when(arguments.getPort()).thenReturn(null); when(arguments.getUri()).thenReturn(argumentUrl);  // Act String url = AbstractOracleConnector.buildUrl(arguments);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(argumentUrl, url)
[-] pred: org. junit. Assert. assertEquals ( argumentUrl, url )
************************************
[+] input: whenResolve_insideSubmodelElementList_success() { String submodelId = "http://example.org/submodel"; String submodelElementIdShort = "foo"; String submodelElementListIdShort = "list"; SubmodelElement expected = new DefaultProperty.Builder() .idShort(submodelElementIdShort) .value("bar") .build(); SubmodelElementList list = new DefaultSubmodelElementList.Builder() .idShort(submodelElementListIdShort) .value(expected) .build(); Environment environment = new DefaultEnvironment.Builder() .submodels(new DefaultSubmodel.Builder() .id(submodelId) .submodelElements(list) .build()) .build(); Reference reference = new DefaultReference.Builder() .keys(new DefaultKey.Builder() .type(KeyTypes.SUBMODEL) .value(submodelId) .build()) .keys(new DefaultKey.Builder() .type(KeyTypes.SUBMODEL_ELEMENT_LIST) .value(submodelElementListIdShort) .build()) .keys(new DefaultKey.Builder() .type(KeyTypes.SUBMODEL_ELEMENT) .value("0") .build()) .build(); Referable actual = AasUtils.resolve(reference, environment); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testConvertHexColorCodeStringToBukkitColorCodeString() { String input = "#ff00ffHello" + BUKKIT_COLOR_CODE_PREFIX + "cThere#00ff00Austin"; String expectedResult = BUKKIT_COLOR_CODE_PREFIX + "x" + BUKKIT_COLOR_CODE_PREFIX + "f" + BUKKIT_COLOR_CODE_PREFIX + "f" + BUKKIT_COLOR_CODE_PREFIX + "0" + BUKKIT_COLOR_CODE_PREFIX + "0" + BUKKIT_COLOR_CODE_PREFIX + "f" + BUKKIT_COLOR_CODE_PREFIX + "fHello" + BUKKIT_COLOR_CODE_PREFIX + "cThere" + BUKKIT_COLOR_CODE_PREFIX + "x" + BUKKIT_COLOR_CODE_PREFIX + "0" + BUKKIT_COLOR_CODE_PREFIX + "0" + BUKKIT_COLOR_CODE_PREFIX + "f" + BUKKIT_COLOR_CODE_PREFIX + "f" + BUKKIT_COLOR_CODE_PREFIX + "0" + BUKKIT_COLOR_CODE_PREFIX + "0Austin";  String result = Format.convertHexColorCodeStringToBukkitColorCodeString(input); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: getPassenger_successful() { // init step Passenger expectedPassenger = new Passenger(1, "Passenger1", "Lastname1", "Male", 25, "05554443322", "passenger1@mail.com");  // stub - when step Optional<Passenger> expectedOptPassenger = Optional.of(expectedPassenger); when(passengerRepository.findById(1)).thenReturn(expectedOptPassenger);  // then step Passenger actualPassenger = passengerService.getPassenger(1);  // valid step "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPassenger, actualPassenger)
[-] pred: org. junit. Assert. assertEquals ( expectedPassenger, actualPassenger )
************************************
[+] input: getLocalAddressCompatible() { String ip = IpUtil.getLocalAddressCompatible(); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(ip)
[-] pred: org. junit. Assert. assertNotNull ( ip )
************************************
[+] input: testWildcardAddTwiceDeleteOnceSecondLastCharWildcard() { ByteMachine cut = new ByteMachine(); cut.addPattern(Patterns.wildcardMatch("hell*o")); cut.addPattern(Patterns.wildcardMatch("hell*o")); cut.deletePattern(Patterns.wildcardMatch("hell*o")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cut.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cut. isEmpty() )
************************************
[+] input: Exception { //given NacosRestTemplate nacosRestTemplate = mock(NacosRestTemplate.class); HttpRestResult<Object> result = new HttpRestResult<>(); result.setData("{"accessToken":"ttttttttttttttttt","tokenTtl":1000}"); result.setCode(200); when(nacosRestTemplate.postForm(any(), (Header) any(), any(), any(), any())).thenReturn(result); Properties properties = new Properties(); properties.setProperty(PropertyKeyConst.USERNAME, "aaa"); properties.setProperty(PropertyKeyConst.PASSWORD, "123456"); List<String> serverList = new ArrayList<>(); serverList.add("localhost"); serverList.add("localhost");  NacosClientAuthServiceImpl nacosClientAuthService = new NacosClientAuthServiceImpl(); nacosClientAuthService.setServerList(serverList); nacosClientAuthService.setNacosRestTemplate(nacosRestTemplate); boolean ret = nacosClientAuthService.login(properties); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(ret)
[-] pred: org. junit. Assert. assertTrue ( ret )
************************************
[+] input: Exception { WorkflowSummary oldWorkflow = TestUtils.loadWorkflowSnapshot(objectMapper, "workflow_summary"); oldWorkflow.setStatus(WorkflowStatus.RUNNING); oldWorkflow.setUpdateTime(getFormattedTime(new DateTime().minusHours(2).toDate()));  WorkflowSummary recentWorkflow = TestUtils.loadWorkflowSnapshot(objectMapper, "workflow_summary"); recentWorkflow.setStatus(WorkflowStatus.RUNNING); recentWorkflow.setUpdateTime(getFormattedTime(new DateTime().minusHours(1).toDate()));  WorkflowSummary tooRecentWorkflow = TestUtils.loadWorkflowSnapshot(objectMapper, "workflow_summary"); tooRecentWorkflow.setStatus(WorkflowStatus.RUNNING); tooRecentWorkflow.setUpdateTime(getFormattedTime(new DateTime().toDate()));  indexDAO.indexWorkflow(oldWorkflow); indexDAO.indexWorkflow(recentWorkflow); indexDAO.indexWorkflow(tooRecentWorkflow);  Thread.sleep(1000);  List<String> ids = indexDAO.searchRecentRunningWorkflows(2, 1);  "<AssertPlaceHolder>"; assertEquals(recentWorkflow.getWorkflowId(), ids.get(0)); }
[*] target: assertEquals(1, ids.size())
[-] pred: org. junit. Assert. assertEquals ( 1, ids. size ( ) )
************************************
[+] input: testDeleteUser() { User tenantAdminUser = userService.findUserByEmail(tenantId, "tenant@thingsboard.org"); User user = new User(); user.setAuthority(Authority.TENANT_ADMIN); user.setTenantId(tenantAdminUser.getTenantId()); user.setEmail("tenant2@thingsboard.org"); User savedUser = userService.saveUser(TenantId.SYS_TENANT_ID, user); Assert.assertNotNull(savedUser); Assert.assertNotNull(savedUser.getId()); User foundUser = userService.findUserById(tenantId, savedUser.getId()); Assert.assertNotNull(foundUser); UserCredentials userCredentials = userService.findUserCredentialsByUserId(tenantId, foundUser.getId()); Assert.assertNotNull(userCredentials); userService.deleteUser(tenantId, foundUser); userCredentials = userService.findUserCredentialsByUserId(tenantId, foundUser.getId()); foundUser = userService.findUserById(tenantId, foundUser.getId()); Assert."<AssertPlaceHolder>"; Assert.assertNull(userCredentials); }
[*] target: assertNull(foundUser)
[-] pred: org. junit. Assert. assertNull ( foundUser )
************************************
[+] input: testLoadPrivFromPathWithProv() { PrivateKey privateKey = PemUtil.loadPrivateKeyFromPath(MERCHANT_PRIVATE_KEY_PATH, "RSA", "SunRsaSign"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(privateKey)
[-] pred: org. junit. Assert. assertNotNull ( privateKey )
************************************
[+] input: Exception { DorisCopyCommittable expectCommittable = new DorisCopyCommittable( "fe:8040", "COPY INTO db.table FROM @u FILES=('label_0_1') FILE_FORMAT=('type'='csv','line_delimiter'='\n','column_separator'=',')"); CopyCommittableSerializer serializer = new CopyCommittableSerializer(); DorisCopyCommittable committable = serializer.deserialize(1, serializer.serialize(expectCommittable)); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectCommittable, committable)
[-] pred: org. junit. Assert. assertEquals ( expectCommittable, committable )
************************************
[+] input: testClearAlarmWithoutDetailsProcedure() { UUID tenantId = UUID.randomUUID(); UUID originator1Id = UUID.fromString("d4b68f41-3e96-11e7-a884-898080180d6b"); UUID alarm1Id = UUID.fromString("d4b68f43-3e96-11e7-a884-898080180d6b"); Alarm alarm = saveAlarm(alarm1Id, tenantId, originator1Id, "TEST_ALARM"); long clearTs = System.currentTimeMillis(); AlarmApiCallResult result = alarmDao.clearAlarm(alarm.getTenantId(), alarm.getId(), clearTs, null); AlarmInfo afterSave = alarmDao.findAlarmInfoById(alarm.getTenantId(), alarm.getUuidId()); assertNotNull(result); assertTrue(result.isSuccessful()); assertTrue(result.isCleared()); assertNotNull(result.getAlarm()); assertEquals(afterSave, result.getAlarm()); assertEquals(clearTs, result.getAlarm().getClearTs()); assertTrue(result.getAlarm().isCleared()); assertEquals(alarm.getDetails(), result.getAlarm().getDetails()); result = alarmDao.clearAlarm(alarm.getTenantId(), alarm.getId(), clearTs + 1, JacksonUtil.newObjectNode()); "<AssertPlaceHolder>"; assertNotNull(result.getAlarm()); assertEquals(afterSave, result.getAlarm()); assertTrue(result.isSuccessful()); assertFalse(result.isCleared()); assertEquals(clearTs, result.getAlarm().getClearTs()); assertTrue(result.getAlarm().isCleared()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testGetAuthorization() {  try (MockedStatic<NonceUtil> nonceUtilMockedStatic = mockStatic(NonceUtil.class)) { nonceUtilMockedStatic.when(() -> NonceUtil.createNonce(anyInt())).thenReturn(NONCE);  String schema = SCHEMA_PREFIX + fakeSigner.getAlgorithm(); SignatureResult signatureResult = fakeSigner.sign(buildMessage); String signatureMessage = "mchid="" + MERCHANT_ID + ""," + "nonce_str="" + NONCE + ""," + "timestamp="" + TIMESTAMP + ""," + "serial_no="" + signatureResult.getCertificateSerialNumber() + ""," + "signature="" + signatureResult.getSign() + """;  String authorization = schema + " " + signatureMessage; String result = credential.getAuthorization(REQUEST_URI, HTTP_METHOD, SIGN_BODY); Assert."<AssertPlaceHolder>"; } }
[*] target: assertEquals(authorization, result)
[-] pred: org. junit. Assert. assertEquals ( authorization, result )
************************************
[+] input: testFormatWithPreferenceParameter() { FormattingPreferences prefs = new FormattingPreferences() { @Override public boolean wrapLongTags() { return true; }  @Override public int getMaximumLineWidth() { return 40; }  @Override public boolean alignElementCloseChar() { return false; }  @Override public boolean useSpacesInsteadOfTabs() { return true; }  @Override public int getTabWidth() { return 6; } }; String lineSep = System.getProperty("line.separator"); //$NON-NLS-1$ String xmlDoc = "<project default="go"><target name="go" description="Demonstrate the wrapping of long tags."><echo>hi</echo></target></project>"; //$NON-NLS-1$ String formattedDoc = XmlFormatter.format(xmlDoc, prefs); String expected = "<project default="go">" + lineSep + "      <target name="go"" + lineSep //$NON-NLS-1$ //$NON-NLS-2$ + "              description="Demonstrate the wrapping of long tags.">" + lineSep //$NON-NLS-1$ + "            <echo>hi</echo>" + lineSep + "      </target>" + lineSep + "</project>"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, formattedDoc)
[-] pred: org. junit. Assert. assertEquals ( expected, formattedDoc )
************************************
[+] input: testIsNotExemptFromDndVisualSuppression_hiddenCategories() { NotificationEntry entry = new NotificationEntryBuilder() .setUid(UID_NORMAL) .build(); entry.mIsSystemNotification = true; modifyRanking(entry).setSuppressedVisualEffects(SUPPRESSED_EFFECT_AMBIENT).build();  modifySbn(entry) .setNotification( new Notification.Builder(mContext, "").setCategory(CATEGORY_CALL).build()) .build(); assertFalse(entry.isExemptFromDndVisualSuppression()); assertTrue(entry.shouldSuppressAmbient());  modifySbn(entry) .setNotification( new Notification.Builder(mContext, "") .setCategory(CATEGORY_REMINDER) .build()) .build(); assertFalse(entry.isExemptFromDndVisualSuppression());  modifySbn(entry) .setNotification( new Notification.Builder(mContext, "").setCategory(CATEGORY_ALARM).build()) .build(); assertFalse(entry.isExemptFromDndVisualSuppression());  modifySbn(entry) .setNotification( new Notification.Builder(mContext, "").setCategory(CATEGORY_EVENT).build()) .build(); assertFalse(entry.isExemptFromDndVisualSuppression());  modifySbn(entry) .setNotification( new Notification.Builder(mContext, "") .setCategory(CATEGORY_MESSAGE) .build()) .build(); "<AssertPlaceHolder>"; }
[*] target: assertFalse(entry.isExemptFromDndVisualSuppression())
[-] pred: org. junit. Assert. assertFalse ( entry. isExemptFromDndVisualSuppression ( ) )
************************************
[+] input: testEscapeStringEmpty() { String orig = ""; String escaped = CategoryPath.escapeString(orig); String unescaped = CategoryPath.unescapeString(escaped); "<AssertPlaceHolder>"; assertEquals("", escaped); }
[*] target: assertEquals(orig, unescaped)
[-] pred: org. junit. Assert. assertEquals ( orig, unescaped )
************************************
[+] input: substituteParametersInSqlString_BooleanType() {  String sql = "Select * from Table Where check = :check AND mark = :mark"; String sqlToUse = "Select * from Table Where check = true AND mark = false";  ctx.addBooleanParameter("check", true); ctx.addBooleanParameter("mark", false);  String sqlToUseResult = queryLog.substituteParametersInSqlString(sql, ctx); "<AssertPlaceHolder>"; }
[*] target: assertEquals(sqlToUse, sqlToUseResult)
[-] pred: org. junit. Assert. assertEquals ( sqlToUse, sqlToUseResult )
************************************
[+] input: verify_that_tobytearray_returns_same_as_passed_in_constructor() { byte[] bytes = Bytes.fromHexString("dead000000000000000000000000beef"); EUID euid = new EUID(bytes); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(bytes, euid.toByteArray())
[-] pred: org. junit. Assert. assertArrayEquals ( bytes, euid. toByteArray ( ) )
************************************
[+] input: Exception { Assume.assumeTrue(!TinkFips.useOnlyFips() || TinkFipsUtil.fipsModuleAvailable());  JsonObject json = WycheproofTestUtil.readJson("../wycheproof/testvectors/aes_gcm_test.json"); int errors = 0; int cntSkippedTests = 0; JsonArray testGroups = json.get("testGroups").getAsJsonArray(); for (int i = 0; i < testGroups.size(); i++) { JsonObject group = testGroups.get(i).getAsJsonObject(); int keySize = group.get("keySize").getAsInt(); JsonArray tests = group.get("tests").getAsJsonArray(); if (!Arrays.asList(keySizeInBytes).contains(keySize / 8)) { cntSkippedTests += tests.size(); continue; } for (int j = 0; j < tests.size(); j++) { JsonObject testcase = tests.get(j).getAsJsonObject(); String tcId = String.format("testcase %d (%s)", testcase.get("tcId").getAsInt(), testcase.get("comment").getAsString()); byte[] iv = Hex.decode(testcase.get("iv").getAsString()); byte[] key = Hex.decode(testcase.get("key").getAsString()); byte[] msg = Hex.decode(testcase.get("msg").getAsString()); byte[] associatedData = Hex.decode(testcase.get("aad").getAsString()); @Nullable Integer androidApiLevel = Util.getAndroidApiLevel(); if (androidApiLevel != null && androidApiLevel <= 19 && associatedData.length != 0) { cntSkippedTests++; continue; } byte[] ct = Hex.decode(testcase.get("ct").getAsString()); byte[] tag = Hex.decode(testcase.get("tag").getAsString()); byte[] ciphertext = Bytes.concat(ct, tag); // Result is one of "valid", "invalid", "acceptable". // "valid" are test vectors with matching plaintext, ciphertext and tag. // "invalid" are test vectors with invalid parameters or invalid ciphertext and tag. // "acceptable" are test vectors with weak parameters or legacy formats. String result = testcase.get("result").getAsString(); // Tink only supports 12-byte iv. if (iv.length != 12) { result = "invalid"; }  try { InsecureNonceAesGcmJce gcm = new InsecureNonceAesGcmJce(key); // Encryption. byte[] encrypted = gcm.encrypt(iv, msg, associatedData); boolean ciphertextMatches = TestUtil.arrayEquals(encrypted, ciphertext); if (result.equals("valid") && !ciphertextMatches) { System.out.printf( "FAIL %s: incorrect encryption, result: %s, expected: %s%n", tcId, Hex.encode(encrypted), Hex.encode(ciphertext)); errors++; } // Decryption. byte[] decrypted = gcm.decrypt(iv, ciphertext, associatedData); boolean plaintextMatches = TestUtil.arrayEquals(decrypted, msg); if (result.equals("invalid")) { System.out.printf( "FAIL %s: accepting invalid ciphertext, cleartext: %s, decrypted: %s%n", tcId, Hex.encode(msg), Hex.encode(decrypted)); errors++; } else { if (!plaintextMatches) { System.out.printf( "FAIL %s: incorrect decryption, result: %s, expected: %s%n", tcId, Hex.encode(decrypted), Hex.encode(msg)); errors++; } } } catch (GeneralSecurityException ex) { if (result.equals("valid")) { System.out.printf("FAIL %s: cannot decrypt, exception %s%n", tcId, ex); errors++; } } } } System.out.printf("Number of tests skipped: %d", cntSkippedTests); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors)
[-] pred: org. junit. Assert. assertEquals ( 0, errors )
************************************
[+] input: Exception { TenantId tenantId = new TenantId(Uuids.timeBased()); DeviceId devId = new DeviceId(Uuids.timeBased()); RuleNodeDebugEvent event = generateEvent(tenantId, devId); eventService.saveAsync(event).get(); List<EventInfo> loaded = eventService.findLatestEvents(event.getTenantId(), devId, event.getType(), 1); Assert."<AssertPlaceHolder>"; Assert.assertEquals(1, loaded.size()); Assert.assertEquals(event.getData(), loaded.get(0).getBody().get("data").asText()); }
[*] target: assertNotNull(loaded)
[-] pred: org. junit. Assert. assertNotNull ( loaded )
************************************
[+] input: testRangesSimple() { DisjointOffsetRangeSet ranges = new DisjointOffsetRangeSet(); ranges.add(new OffsetsRangeImpl(0, 1)); ranges.add(new OffsetsRangeImpl(1, 2)); ranges.add(new OffsetsRangeImpl(3, 4)); List<OffsetsRange> rangesResult = ranges.getRangesAndClear(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(0, rangesResult.get(0).getStart()); Assert.assertEquals(2, rangesResult.get(0).getEnd()); Assert.assertEquals(3, rangesResult.get(1).getStart()); Assert.assertEquals(4, rangesResult.get(1).getEnd()); }
[*] target: assertEquals(2, rangesResult.size())
[-] pred: org. junit. Assert. assertEquals ( 2, rangesResult. size ( ) )
************************************
[+] input: testReorderingAllowedChangesPanel() { mVisualStabilityManager.setPanelExpanded(true); mVisualStabilityManager.setScreenOn(true); assertFalse(mVisualStabilityManager.isReorderingAllowed()); mVisualStabilityManager.setPanelExpanded(false); "<AssertPlaceHolder>"; }
[*] target: assertTrue(mVisualStabilityManager.isReorderingAllowed())
[-] pred: org. junit. Assert. assertTrue ( mVisualStabilityManager. isReorderingAllowed() )
************************************
[+] input: dialogTextHasAssistantName() { CandidateInfo c = mock(CandidateInfo.class); when(mContext.getString(anyInt(), anyString())).thenAnswer( (InvocationOnMock invocation) -> { return invocation.getArgument(1); }); when(c.loadLabel()).thenReturn(TEST_NAME); when(c.getKey()).thenReturn(TEST_CMP); CharSequence text = mFragment.getConfirmationMessage(c); "<AssertPlaceHolder>"; assertTrue(text.toString().contains(TEST_NAME)); }
[*] target: assertNotNull(text)
[-] pred: org. junit. Assert. assertNotNull ( text )
************************************
[+] input: testGetSubscribersByServiceWithLocal() { Collection<Subscriber> actual = aggregation.getSubscribers(service); "<AssertPlaceHolder>"; assertEquals("local", actual.iterator().next().getAddrStr()); }
[*] target: assertEquals(1, actual.size())
[-] pred: org. junit. Assert. assertEquals ( 1, actual. size ( ) )
************************************
[+] input: testSingleCatch_Beginning() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(0, 10, new ImmutableExceptionHandler("Ljava/lang/Exception;", 5));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of(new ImmutableTryBlock(0, 10, ImmutableList.of(new ImmutableExceptionHandler("Ljava/lang/Exception;", 5))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testInvalidMove() { char[] solution = "ssssddddwwaawwddddssssdX".toCharArray(); int ret_val = Maze.walk(solution); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, ret_val)
[-] pred: org. junit. Assert. assertEquals ( 0, ret_val )
************************************
[+] input: Exception { File expectedFile = new File(DEFAULT_FILENAME);  // Act dumper.run("--connector", connector.getName());  // Assert "<AssertPlaceHolder>"; }
[*] target: assertTrue(expectedFile.exists())
[-] pred: org. junit. Assert. assertTrue ( expectedFile. exists ( ) )
************************************
[+] input: URISyntaxException { ConfRules confRules = ConfRuleRepository.load(Feature.DEFAULT, 8, 11).get(); "<AssertPlaceHolder>"; assertEquals(confRules.getFromVersion(), 8); assertEquals(confRules.getToVersion(), 11); assertEquals(confRules.getFeature(), Feature.DEFAULT); assertNotNull(confRules.getRuleDataPathPrefix()); assertFalse(confRules.getRuleItems().isEmpty()); assertTrue(confRules.getRuleItems().stream().anyMatch((r) -> r.getType().equals("reference-class"))); }
[*] target: assertNotNull(confRules)
[-] pred: org. junit. Assert. assertNotNull ( confRules )
************************************
[+] input: testWildcardAddTwiceDeleteOnceTrailingWildcard() { ByteMachine cut = new ByteMachine(); cut.addPattern(Patterns.wildcardMatch("hello*")); cut.addPattern(Patterns.wildcardMatch("hello*")); cut.deletePattern(Patterns.wildcardMatch("hello*")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cut.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cut. isEmpty() )
************************************
[+] input: testConfirmToString() { String res = new OverrideToString().toString(); String diff = res + " a different string";  OverrideToString obj = mock(OverrideToString.class); when(obj.toString()).thenReturn(diff);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(diff, obj.toString())
[-] pred: org. junit. Assert. assertEquals ( diff, obj. toString ( ) )
************************************
[+] input: Exception { byte[] bytes = new byte[64]; bytes[0] = 15; Node nearNode = new Node(bytes, "127.0.0.19", null, 18888, 18888); bytes[0] = 70; Node farNode = new Node(bytes, "127.0.0.20", null, 18888, 18888); nodeTable.addNode(nearNode); nodeTable.addNode(farNode); for (int i = 0; i < KademliaOptions.BUCKET_SIZE - 1; i++) { //To control totally 17 nodes, however closest's capacity is 16 nodeTable.addNode(new Node(ids.get(i), ips[i], null, 18888, 18888)); TimeUnit.MILLISECONDS.sleep(10); } Assert.assertTrue(nodeTable.getBucketsCount() > 1); //3 buckets, nearnode's distance is 252, far's is 255, others' are 253 List<Node> closest = nodeTable.getClosestNodes(homeNode.getId()); Assert."<AssertPlaceHolder>"; //the farest node should be excluded }
[*] target: assertTrue(closest.contains(nearNode))
[-] pred: org. junit. Assert. assertTrue ( closest. contains ( nearNode ) )
************************************
[+] input: testGetDataType_ByName() {  String name = "string"; String dtmId = "3295333330922457057"; FakeDataTypeManager manager = new FakeDataTypeManager(dtmId); FakeDataType dt = new FakeDataType(name, manager);  String dtId = ""; // no id; name only String urlString = "datatype:/" + dtmId + "?uid=" + dtId + "&name=" + name; DataTypeUrl dtUrl = new DataTypeUrl(urlString);  DataTypeManagerService service = new FakeDataTypeManagerService(manager); DataType actualDt = dtUrl.getDataType(service); "<AssertPlaceHolder>"; }
[*] target: assertEquals(dt, actualDt)
[-] pred: org. junit. Assert. assertEquals ( dt, actualDt )
************************************
[+] input: determineTransactionMode_none() { Optional<String> transactionMode = TeradataUtils.determineTransactionMode(Optional.of("NONE"));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(Optional.empty(), transactionMode)
[-] pred: org. junit. Assert. assertEquals ( Optional. empty ( ), transactionMode )
************************************
[+] input: testNoDelay() { FakeSystemClock clock = new FakeSystemClock(); FakeExecutor fakeExecutor = new FakeExecutor(clock); RunnableImpl runnable = new RunnableImpl();  assertEquals(10000, clock.uptimeMillis()); assertEquals(0, runnable.mRunCount);  // Execute two runnables. They should not run and should be left pending. fakeExecutor.execute(runnable); assertEquals(0, runnable.mRunCount); assertEquals(10000, clock.uptimeMillis()); assertEquals(1, fakeExecutor.numPending()); fakeExecutor.execute(runnable); assertEquals(0, runnable.mRunCount); assertEquals(10000, clock.uptimeMillis()); assertEquals(2, fakeExecutor.numPending());  // Run one pending runnable. assertTrue(fakeExecutor.runNextReady()); assertEquals(1, runnable.mRunCount); assertEquals(10000, clock.uptimeMillis()); assertEquals(1, fakeExecutor.numPending()); // Run a second pending runnable. assertTrue(fakeExecutor.runNextReady()); assertEquals(2, runnable.mRunCount); assertEquals(10000, clock.uptimeMillis()); assertEquals(0, fakeExecutor.numPending());  // No more runnables to run. assertFalse(fakeExecutor.runNextReady());  // Add two more runnables. fakeExecutor.execute(runnable); fakeExecutor.execute(runnable); assertEquals(2, runnable.mRunCount); assertEquals(10000, clock.uptimeMillis()); assertEquals(2, fakeExecutor.numPending()); // Execute all pending runnables in batch. assertEquals(2, fakeExecutor.runAllReady()); assertEquals(4, runnable.mRunCount); assertEquals(10000, clock.uptimeMillis()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, fakeExecutor.runAllReady())
[-] pred: org. junit. Assert. assertEquals ( 0, fakeExecutor. runAllReady() )
************************************
[+] input: testCreateDataOnInstructionFailure() { // Should NOT be able to create data on top of an instruction Instruction instr1 = listing.getInstructionAfter(addr(0)); Address addr = instr1.getMinAddress(); CreateDataCmd cmd = new CreateDataCmd(addr, new ByteDataType()); cmd.applyTo(program); Instruction instr2 = listing.getInstructionAfter(addr(0)); "<AssertPlaceHolder>"; assertNull(listing.getDataAt(addr)); }
[*] target: assertEquals(instr1, instr2)
[-] pred: org. junit. Assert. assertEquals ( instr1, instr2 )
************************************
[+] input: testUpdateRandomly() { final int COUNT = 100; Random rand = new Random(); ValueSortedMap<String, Integer> queue = TreeValueSortedMap.createWithNaturalOrder(); for (int i = 0; i < COUNT; i++) { queue.put("Element" + i, rand.nextInt(50)); } checkConsistent(queue);  for (int i = 0; i < COUNT; i++) { String e = "Element" + rand.nextInt(queue.size()); int oldCost = queue.get(e); int retCost = queue.put(e, rand.nextInt(50)); "<AssertPlaceHolder>"; checkConsistent(queue); } }
[*] target: assertEquals(oldCost, retCost)
[-] pred: org. junit. Assert. assertEquals ( oldCost, retCost )
************************************
[+] input: SQLException { Connection connection = stmt.getConnection(); Assert."<AssertPlaceHolder>"; Assert.assertTrue(this.conn == connection); }
[*] target: assertNotNull(connection)
[-] pred: org. junit. Assert. assertNotNull ( connection )
************************************
[+] input: testSingleCatchAll_Beginning() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(0, 10, new ImmutableExceptionHandler(null, 5));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of(new ImmutableTryBlock(0, 10, ImmutableList.of(new ImmutableExceptionHandler(null, 5))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testOneEmpty() {  Iterator<Integer> it = new MergedIterator<>(listA.iterator(), listB.iterator(), Comparator.reverseOrder());  Iterator<Integer> itE = listC.iterator();  while (it.hasNext()) { assertTrue(itE.hasNext());  int val = it.next(); int valE = itE.next(); //			System.out.println(val); assertEquals(val, valE); }  "<AssertPlaceHolder>"; }
[*] target: assertFalse(itE.hasNext())
[-] pred: org. junit. Assert. assertFalse ( itE. hasNext() )
************************************
[+] input: testOverlap_End_After() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(0, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(10, 20, new ImmutableExceptionHandler("LException2;", 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 10, ImmutableList.of(new ImmutableExceptionHandler("LException1;", 5))), new ImmutableTryBlock(10, 10, ImmutableList.of(new ImmutableExceptionHandler("LException2;", 6))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testMostSouthEastNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.CompactThirteen(population, 15);  TestSuiteChromosome exepcted_individual = population.get(0); TestSuiteChromosome returned_individual = neighbors.get(7);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testSmallThetaZeroInput() { IntegralLdpConfig ldpConfig = new LocalExpMapIntegralLdpConfig .Builder(DEFAULT_BASE_EPSILON, SMALL_THETA, BIASED_LOWER_BOUND, BIASED_UPPER_BOUND) .build(); IntegralLdp mechanism = IntegralLdpFactory.createInstance(ldpConfig); int value = 0; IntStream.range(0, ROUND).forEach(index -> { int noiseValue = mechanism.randomize(value); Assert."<AssertPlaceHolder>"; }); }
[*] target: assertEquals(value, noiseValue)
[-] pred: org. junit. Assert. assertEquals ( value, noiseValue )
************************************
[+] input: success_search_test_1() { String pattern = "xyz"; String text = "abcabcxyzabcxxyzyxyz"; String exceptedOutput = "Found pattern at index 6\n" + "Found pattern at index 13\n" + "Found pattern at index 17\n"; String actual = CaptureOutput.captureStandardOutput(() -> Question1.search(pattern, text)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(exceptedOutput, actual)
[-] pred: org. junit. Assert. assertEquals ( exceptedOutput, actual )
************************************
[+] input: IOException { Resources resources = mock(Resources.class); int resourceId = 1; when(resources.openRawResourceFd(resourceId)).thenReturn(null); MediaFileReader mfr = MediaFileReader.fromResources(resources, resourceId);  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(mfr)
[-] pred: org. junit. Assert. assertNotNull ( mfr )
************************************
[+] input: substituteParametersInSqlString_UuidListType() {  List<UUID> guids = List.of(UUID.fromString("634a8d03-6871-4e01-94d0-876bf3e67dff"), UUID.fromString("3adbb5b8-4dc6-4faf-80dc-681a7b518b5e"), UUID.fromString("63a50f0c-2058-4d1d-8f15-812eb7f84412"));  String sql = "Select * from Table Where guid IN (:guids)"; String sqlToUse = "Select * from Table Where guid IN ('634a8d03-6871-4e01-94d0-876bf3e67dff', '3adbb5b8-4dc6-4faf-80dc-681a7b518b5e', '63a50f0c-2058-4d1d-8f15-812eb7f84412')";  ctx.addUuidListParameter("guids", guids);  String sqlToUseResult = queryLog.substituteParametersInSqlString(sql, ctx); "<AssertPlaceHolder>"; }
[*] target: assertEquals(sqlToUse, sqlToUseResult)
[-] pred: org. junit. Assert. assertEquals ( sqlToUse, sqlToUseResult )
************************************
[+] input: testCountOccurrencesOfCharacter() { int count = countOccurrences("AxBxCxDxxX", 'x'); "<AssertPlaceHolder>"; }
[*] target: assertEquals(5, count)
[-] pred: org. junit. Assert. assertEquals ( 5, count )
************************************
[+] input: testClearDomainParams() { OAuth2Info oAuth2Info = createDefaultOAuth2Info(); oAuth2Service.saveOAuth2Info(oAuth2Info); OAuth2Info foundOAuth2Info = oAuth2Service.findOAuth2Info(); Assert.assertNotNull(foundOAuth2Info); Assert.assertEquals(oAuth2Info, foundOAuth2Info);  oAuth2Service.saveOAuth2Info(EMPTY_PARAMS); OAuth2Info foundAfterClearClientsParams = oAuth2Service.findOAuth2Info(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(EMPTY_PARAMS, foundAfterClearClientsParams); }
[*] target: assertNotNull(foundAfterClearClientsParams)
[-] pred: org. junit. Assert. assertNotNull ( foundAfterClearClientsParams )
************************************
[+] input: Exception { List<Task<?>> tasks = new ArrayList<>();  // Act connector.addTasksTo( tasks, new ConnectorArguments( "--connector", connector.getName(), "--query-log-start", "2023-12-22 00:00:00", "--query-log-end", "2023-12-22 01:00:00", "--assessment"));  // Assert List<String> queries = tasks.stream() .filter(task -> task instanceof TeradataAssessmentLogsJdbcTask) .map( task -> ((TeradataAssessmentLogsJdbcTask) task) .getOrCreateSql(unused -> true, ImmutableList.of("ST.QueryID"))) .collect(toImmutableList()); "<AssertPlaceHolder>"; assertQueryEquals( "SELECT ST.QueryID" + " FROM dbc.QryLogV L LEFT OUTER JOIN dbc.DBQLSQLTbl ST ON (L.QueryID=ST.QueryID)" + " WHERE L.ErrorCode=0" + " AND L.StartTime >= CAST('2023-12-22T00:00:00Z' AS TIMESTAMP)" + " AND L.StartTime < CAST('2023-12-22T01:00:00Z' AS TIMESTAMP)" + " ORDER BY ST.QueryID, ST.SQLRowNo", getOnlyElement(queries)); }
[*] target: assertEquals(1, queries.size())
[-] pred: org. junit. Assert. assertEquals ( 1, queries. size ( ) )
************************************
[+] input: testSmallThetaPositiveInput() { IntegralLdpConfig ldpConfig = new LocalExpMapIntegralLdpConfig .Builder(DEFAULT_BASE_EPSILON, SMALL_THETA, BIASED_LOWER_BOUND, BIASED_UPPER_BOUND) .build(); IntegralLdp mechanism = IntegralLdpFactory.createInstance(ldpConfig); int value = 1; // 输入1，输出[1, 2) IntStream.range(0, ROUND).forEach(index -> { int noiseValue = mechanism.randomize(value); Assert."<AssertPlaceHolder>"; }); }
[*] target: assertEquals(value, noiseValue)
[-] pred: org. junit. Assert. assertEquals ( value, noiseValue )
************************************
[+] input: testGetExpiredMetadataInfos() { Set<ExpiredMetadataInfo> expiredMetadataInfos = namingMetadataManager.getExpiredMetadataInfos();  Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(expiredMetadataInfos)
[-] pred: org. junit. Assert. assertNotNull ( expiredMetadataInfos )
************************************
[+] input: testFromSnapshotAndTagTtl() { Tag tag = Tag.fromSnapshotAndTagTtl( snapshot, Duration.ofSeconds(5), LocalDateTime.of(1969, 1, 1, 0, 0, 0, 123456789)); String tagJson = tag.toJson(); Assert.assertEquals( "{\n" + "  "version" : 3,\n" + "  "id" : 0,\n" + "  "schemaId" : 0,\n" + "  "baseManifestList" : null,\n" + "  "deltaManifestList" : null,\n" + "  "changelogManifestList" : null,\n" + "  "commitUser" : null,\n" + "  "commitIdentifier" : 0,\n" + "  "commitKind" : "APPEND",\n" + "  "timeMillis" : 1000,\n" + "  "totalRecordCount" : null,\n" + "  "deltaRecordCount" : null,\n" + "  "tagCreateTime" : [ 1969, 1, 1, 0, 0, 0, 123456789 ],\n" + "  "tagTimeRetained" : 5.000000000\n" + "}", tagJson);  Tag newTag = Tag.fromJson(tagJson); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(tag, newTag)
[-] pred: org. junit. Assert. assertEquals ( tag, newTag )
************************************
[+] input: Exception { GhidraFolder dFolder = root.createFolder("d"); GhidraFolder aFolder = root.getFolder("a");  aFolder = aFolder.moveTo(dFolder);  "<AssertPlaceHolder>"; assertTrue(privateFS.folderExists("/d/a")); assertTrue(sharedFS.folderExists("/d/a"));  }
[*] target: assertEquals(dFolder, aFolder.getParent())
[-] pred: org. junit. Assert. assertEquals ( dFolder, aFolder. getParent ( ) )
************************************
[+] input: Exception { Enum enumm = new EnumDataType("Color", 1); enumm.add("Red", 10); enumm.add("Green", 15); enumm.add("Blue", 20); Category root = dataMgr.getRootCategory(); Category c = root.createCategory("enumms"); Enum enummDT = (Enum) c.addDataType(enumm, DataTypeConflictHandler.DEFAULT_HANDLER);  Enum copyDT = (Enum) enummDT.clone(null); "<AssertPlaceHolder>";  Enum c2 = (Enum) root.addDataType(copyDT, DataTypeConflictHandler.DEFAULT_HANDLER); assertNotNull(c2); assertTrue(copyDT.isEquivalent(c2)); }
[*] target: assertNotNull(copyDT)
[-] pred: org. junit. Assert. assertNotNull ( copyDT )
************************************
[+] input: testEmpty() { final MindMapLexer lexer = new MindMapLexer(); lexer.start("", 0, 0, MindMapLexer.TokenType.HEAD_LINE); lexer.advance(); assertTrue(lexer.getCurrentPosition().isTokenCompleted()); "<AssertPlaceHolder>"; }
[*] target: assertNull(lexer.getTokenType())
[-] pred: org. junit. Assert. assertNull ( lexer. getTokenType() )
************************************
[+] input: testBuild() { DorisBatchSink.Builder<String> builder = DorisBatchSink.builder(); DorisOptions.Builder dorisBuilder = DorisOptions.builder(); dorisBuilder .setFenodes("127.0.0.1:8030") .setTableIdentifier("db.tbl") .setUsername("root") .setPassword(""); DorisExecutionOptions.Builder executionBuilder = DorisExecutionOptions.builder(); DorisBatchSink<String> build = builder.setDorisExecutionOptions(executionBuilder.build()) .setSerializer(new SimpleStringSerializer()) .setDorisOptions(dorisBuilder.build()) .build();  DorisReadOptions expected = DorisReadOptions.builder().build(); DorisReadOptions actual = build.getDorisReadOptions(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGettingAttribute() { TaskDescriptionProvider provider = TaskDescriptionProvider.getDefault(); String description = provider.getDescriptionForTaskAttribute("apply", "executable"); //$NON-NLS-1$ //$NON-NLS-2$ "<AssertPlaceHolder>"; assertTrue(description.length() > 0); }
[*] target: assertNotNull(description)
[-] pred: org. junit. Assert. assertNotNull ( description )
************************************
[+] input: testGetSubscribedService() { Collection<Service> subscribedService = clientServiceIndexesManager.getSubscribedService();  Assert."<AssertPlaceHolder>"; Assert.assertEquals(subscribedService.size(), 1); }
[*] target: assertNotNull(subscribedService)
[-] pred: org. junit. Assert. assertNotNull ( subscribedService )
************************************
[+] input: testGetIP() { //notice: please check that you only have one externalIP String ip1 = null, ip2 = null, ip3 = null; try { Method method = NetUtil.class.getDeclaredMethod("getExternalIp", String.class); method.setAccessible(true); ip1 = (String) method.invoke(NetUtil.class, Constant.ipV4Urls.get(0)); ip2 = (String) method.invoke(NetUtil.class, Constant.ipV4Urls.get(1)); ip3 = (String) method.invoke(NetUtil.class, Constant.ipV4Urls.get(2)); } catch (Exception e) { Assert.fail(); } String ip4 = NetUtil.getExternalIpV4(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(ip2, ip4); Assert.assertEquals(ip3, ip4); }
[*] target: assertEquals(ip1, ip4)
[-] pred: org. junit. Assert. assertEquals ( ip1, ip4 )
************************************
[+] input: Exception { addMapping();  AddressSet set = new AddressSet(); // Before set.add(dynSpace.getAddress(0x00000bad), dynSpace.getAddress(0x00000bad + 0xff)); // Over start boundary set.add(dynSpace.getAddress(0x00100000 - 0x100), dynSpace.getAddress(0x00100000 + 0xff)); // Within set.add(dynSpace.getAddress(0x00100c0d), dynSpace.getAddress(0x00100ccc)); // Over end boundary set.add(dynSpace.getAddress(0x00101000 - 0x100), dynSpace.getAddress(0x00101000 + 0xff)); // After set.add(dynSpace.getAddress(0xbadbadbadL), dynSpace.getAddress(0xbadbadbadL + 0xff));  Map<Program, Collection<MappedAddressRange>> views = mappingService.getOpenMappedViews(tb.trace, set, 0); "<AssertPlaceHolder>"; Collection<MappedAddressRange> mappedSet = views.get(program);  assertEquals(Set.of( new MappedAddressRange(tb.range(0x00100000, 0x001000ff), tb.range(stSpace, 0x00200000, 0x002000ff)), new MappedAddressRange(tb.range(0x00100c0d, 0x00100ccc), tb.range(stSpace, 0x00200c0d, 0x00200ccc)), new MappedAddressRange(tb.range(0x00100f00, 0x00100fff), tb.range(stSpace, 0x00200f00, 0x00200fff))), mappedSet); }
[*] target: assertEquals(1, views.size())
[-] pred: org. junit. Assert. assertEquals ( 1, views. size ( ) )
************************************
[+] input: testSaveDeviceCredentials() { Device device = new Device(); device.setTenantId(tenantId); device.setName("My device"); device.setType("default"); Device savedDevice = deviceService.saveDevice(device); DeviceCredentials deviceCredentials = deviceCredentialsService.findDeviceCredentialsByDeviceId(tenantId, savedDevice.getId()); Assert.assertEquals(savedDevice.getId(), deviceCredentials.getDeviceId()); deviceCredentials.setCredentialsType(DeviceCredentialsType.ACCESS_TOKEN); deviceCredentials.setCredentialsId("access_token"); deviceCredentials = deviceCredentialsService.updateDeviceCredentials(tenantId, deviceCredentials); DeviceCredentials foundDeviceCredentials = deviceCredentialsService.findDeviceCredentialsByDeviceId(tenantId, savedDevice.getId()); Assert."<AssertPlaceHolder>"; deviceService.deleteDevice(tenantId, savedDevice.getId()); }
[*] target: assertEquals(deviceCredentials, foundDeviceCredentials)
[-] pred: org. junit. Assert. assertEquals ( deviceCredentials, foundDeviceCredentials )
************************************
[+] input: testRingTopology_mostLeftNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.ringTopology(population, 0);  TestSuiteChromosome exepcted_individual = population.get(15); TestSuiteChromosome returned_individual = neighbors.get(0);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: Exception { selectRow(3);  JButton button = findButtonByIcon(pathManager.getComponent(), ResourceManager.loadImage("images/edit-delete.png")); "<AssertPlaceHolder>"; pressButton(button, true); waitForSwing(); int row = table.getSelectedRow(); assertEquals(2, row);  pressButton(button, true); waitForSwing(); row = table.getSelectedRow(); assertEquals(1, row);  pressButton(button, true); waitForSwing(); row = table.getSelectedRow(); assertEquals(0, row);  pressButton(button, true); waitForSwing(); row = table.getSelectedRow(); assertEquals(-1, row);  assertTrue(!button.isEnabled()); }
[*] target: assertNotNull(button)
[-] pred: org. junit. Assert. assertNotNull ( button )
************************************
[+] input: testSouthEastNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.compactNine(population, 5);  TestSuiteChromosome exepcted_individual = population.get(10); TestSuiteChromosome returned_individual = neighbors.get(7);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: Exception { GhidraFolder cFolder = root.getFolder("c"); GhidraFolder dFolder = root.createFolder("d");  cFolder = cFolder.moveTo(dFolder);  assertNotNull(cFolder); assertEquals("/d/c", cFolder.getPathname());  assertNull(root.getFolder("c"));  "<AssertPlaceHolder>"; assertTrue(!privateFS.folderExists("/d/c")); assertTrue(sharedFS.folderExists("/d/c"));  }
[*] target: assertEquals(dFolder, cFolder.getParent())
[-] pred: org. junit. Assert. assertEquals ( dFolder, cFolder. getParent() )
************************************
[+] input: testRegisterAddress() { Address a = regSpace.getAddress(0); long key = map.getKey(a); Address b = map.decodeAddress(key); Assert.assertEquals(a, b);  a = regSpace.getAddress(10); key = map.getKey(a); b = map.decodeAddress(key); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(a, b)
[-] pred: org. junit. Assert. assertEquals ( a, b )
************************************
[+] input: whenResolve_withSubmodel_success() { Environment environment = AASFull.createEnvironment(); Reference submodelRef = AASFull.AAS_1.getSubmodels().get(0); Submodel expected = AASFull.SUBMODEL_3; Referable asReferable = AasUtils.resolve(submodelRef, environment); assertEquals(expected, asReferable); Submodel asSubmodel = AasUtils.resolve(submodelRef, environment, Submodel.class); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, asSubmodel)
[-] pred: org. junit. Assert. assertEquals ( expected, asSubmodel )
************************************
[+] input: simpleLineReaderWithCR() { SimpleLineReader simpleLineReader = new SimpleLineReader(new Document("a\rb\r")); assertEquals("a\r", simpleLineReader.readLine()); assertEquals("b\r", simpleLineReader.readLine()); "<AssertPlaceHolder>"; }
[*] target: assertNull(simpleLineReader.readLine())
[-] pred: org. junit. Assert. assertNull ( simpleLineReader. readLine() )
************************************
[+] input: testTrimEnd() { AddressSet set = set(0x10, 0x20, 0x30, 0x40); set.add(space2.getAddress(0x10), space2.getAddress(0x20)); set.add(space2.getAddress(0x30), space2.getAddress(0x40));  AddressSetView trimSet = AddressSetView.trimEnd(set, addr(0x15));  AddressSet expectedSet = set(0x10, 0x14); assertEquals(expectedSet, trimSet);  trimSet = AddressSetView.trimEnd(set, space2.getAddress(0x15));  expectedSet = set(0x10, 0x20, 0x30, 0x40); expectedSet.add(space2.getAddress(0x10), space2.getAddress(0x14)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSet, trimSet)
[-] pred: org. junit. Assert. assertEquals ( expectedSet, trimSet )
************************************
[+] input: Exception { doReturn(false).when(mIDumpstateDevice).getVerboseLoggingEnabled();  mController.onDeveloperOptionsSwitchDisabled();  final boolean enabled = mController.getVerboseLoggingEnabled(); "<AssertPlaceHolder>"; verify(mPreference).setChecked(false); verify(mPreference).setEnabled(false); }
[*] target: assertFalse(enabled)
[-] pred: org. junit. Assert. assertFalse ( enabled )
************************************
[+] input: Exception { refMgr.addMemoryReference(addr(512), addr(256), RefType.FLOW, SourceType.USER_DEFINED, 2); refMgr.addMemoryReference(addr(512), addr(1024), RefType.FLOW, SourceType.USER_DEFINED, 1); refMgr.removeReference(addr(512), addr(256), 1); Reference ref = refMgr.getReference(addr(512), addr(256), 2); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(ref)
[-] pred: org. junit. Assert. assertNotNull ( ref )
************************************
[+] input: testIterator2() { for (int i = 0; i < 10000; i++) { ps.put(i); } LongIterator it = ps.getPropertyIterator(); int i = 0; while (it.hasNext()) { long l = it.next(); "<AssertPlaceHolder>"; i++; } assertEquals(i, 10000); }
[*] target: assertEquals(i, l)
[-] pred: org. junit. Assert. assertEquals ( i, l )
************************************
[+] input: testFormatMaintainingLineSeparators() { FormattingPreferences prefs = new FormattingPreferences() { @Override public boolean wrapLongTags() { return true; }  @Override public int getMaximumLineWidth() { return 40; }  @Override public boolean alignElementCloseChar() { return false; }  @Override public boolean useSpacesInsteadOfTabs() { return true; }  @Override public int getTabWidth() { return 6; } }; String lineSep = System.getProperty("line.separator"); //$NON-NLS-1$ String xmlDoc = "<project default="go"><target name="go" description="Demonstrate the wrapping of long tags."><echo>hi</echo></target>" //$NON-NLS-1$ + lineSep + lineSep + "</project>"; //$NON-NLS-1$ String formattedDoc = XmlFormatter.format(xmlDoc, prefs); String expected = "<project default="go">" + lineSep + "      <target name="go"" + lineSep //$NON-NLS-1$ //$NON-NLS-2$ + "              description="Demonstrate the wrapping of long tags.">" + lineSep //$NON-NLS-1$ + "            <echo>hi</echo>" + lineSep + "      </target>" + lineSep + lineSep + "</project>"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, formattedDoc)
[-] pred: org. junit. Assert. assertEquals ( expected, formattedDoc )
************************************
[+] input: testCreateNewTemplate() { OAuth2ClientRegistrationTemplate clientRegistrationTemplate = validClientRegistrationTemplate(UUID.randomUUID().toString()); OAuth2ClientRegistrationTemplate savedClientRegistrationTemplate = oAuth2ConfigTemplateService.saveClientRegistrationTemplate(clientRegistrationTemplate);  Assert."<AssertPlaceHolder>"; Assert.assertNotNull(savedClientRegistrationTemplate.getId()); clientRegistrationTemplate.setId(savedClientRegistrationTemplate.getId()); clientRegistrationTemplate.setCreatedTime(savedClientRegistrationTemplate.getCreatedTime()); Assert.assertEquals(clientRegistrationTemplate, savedClientRegistrationTemplate); }
[*] target: assertNotNull(savedClientRegistrationTemplate)
[-] pred: org. junit. Assert. assertNotNull ( savedClientRegistrationTemplate )
************************************
[+] input: testdeleteFromMin() { AddressSet set = set(0x10, 0x20, 0x30, 0x40); set.add(space2.getAddress(0x10), space2.getAddress(0x20)); set.add(space2.getAddress(0x30), space2.getAddress(0x40));  set.deleteFromMin(addr(0x15));  AddressSet expectedSet = set(0x16, 0x20, 0x30, 0x40); expectedSet.add(space2.getAddress(0x10), space2.getAddress(0x20)); expectedSet.add(space2.getAddress(0x30), space2.getAddress(0x40)); assertEquals(expectedSet, set);  set = set(0x10, 0x20, 0x30, 0x40); set.add(space2.getAddress(0x10), space2.getAddress(0x20)); set.add(space2.getAddress(0x30), space2.getAddress(0x40));  set.deleteFromMin(space2.getAddress(0x15));  expectedSet = new AddressSet(space2.getAddress(0x16), space2.getAddress(0x20)); expectedSet.add(space2.getAddress(0x30), space2.getAddress(0x40)); assertEquals(expectedSet, set);  set = set(0x10, 0x20, 0x30, 0x40); set.add(space2.getAddress(0x10), space2.getAddress(0x20)); set.add(space2.getAddress(0x30), space2.getAddress(0x40));  set.deleteFromMin(space2.getAddress(0x50)); assertTrue(set.isEmpty());  set = set(0x10, 0x20, 0x30, 0x40); set.add(space2.getAddress(0x10), space2.getAddress(0x20)); set.add(space2.getAddress(0x30), space2.getAddress(0x40));  set.deleteFromMin(space2.getAddress(0x40)); assertTrue(set.isEmpty());  // make sure handles empty set set = new AddressSet(); set.deleteFromMin(addr(0x30)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(set.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( set. isEmpty ( ) )
************************************
[+] input: testSmallThetaPositiveInput() { IntegralLdpConfig ldpConfig = new LocalMapIntegralLdpConfig .Builder(DEFAULT_BASE_EPSILON, SMALL_THETA, BIASED_LOWER_BOUND, BIASED_UPPER_BOUND) .build(); IntegralLdp mechanism = IntegralLdpFactory.createInstance(ldpConfig); int value = 1; // 输入1，输出[1, 2) IntStream.range(0, ROUND).forEach(index -> { int noiseValue = mechanism.randomize(value); Assert."<AssertPlaceHolder>"; }); }
[*] target: assertEquals(value, noiseValue)
[-] pred: org. junit. Assert. assertEquals ( value, noiseValue )
************************************
[+] input: IOException { try (RangeMappedByteProvider rmbp = new RangeMappedByteProvider(patternedBAP(10, 10), null)) { rmbp.addRange(10, 10); rmbp.addRange(19, 5);// creates a weird overlapped result, but good boundary cond test  assertEquals(15, rmbp.length()); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(2, rmbp.getRangeCount())
[-] pred: org. junit. Assert. assertEquals ( 2, rmbp. getRangeCount ( ) )
************************************
[+] input: testCreateSameDirSymbolStore() { SymbolServer symbolServer = symbolServerInstanceCreatorRegistry.newSymbolServer(".", symbolServerInstanceCreatorContext); "<AssertPlaceHolder>"; assertTrue(symbolServer instanceof SameDirSymbolStore); }
[*] target: assertNotNull(symbolServer)
[-] pred: org. junit. Assert. assertNotNull ( symbolServer )
************************************
[+] input: Exception {  /*  lambda contents - lambdas in templates and as a parameter  bool (*** const* std:: __addressof< Bedrock:: Threading:: TLSDetail:: DefaultConstructor<bool (**)(AssertHandlerContext const&), void>:: create():: {lambda(bool (*** const)(AssertHandlerContext const&))#1} > ( Bedrock:: Threading:: TLSDetail:: DefaultConstructor<bool (**)(AssertHandlerContext const&), void>:: create():: {lambda(bool (*** const&)(AssertHandlerContext const&))#1} ) )(AssertHandlerContext const&)  */  String mangled = "_ZSt11__addressofIKZN7Bedrock9Threading9TLSDetail18DefaultConstructorIPPFbRK20AssertHandlerContextEvE6createEvEUlPS9_E_EPT_RSE_";  String demangled = process.demangle(mangled);  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  String signature = object.getSignature(false); assertEquals( "undefined Bedrock::Threading::TLSDetail::DefaultConstructor<bool(**)(AssertHandlerContext_const&),void>::create()::{lambda(bool(***const*std::__addressof<Bedrock::Threading::TLSDetail::DefaultConstructor<bool(**)(AssertHandlerContext_const&),void>::create()::{lambda(bool(***const)(AssertHandlerContext_const&))#1}>(Bedrock::Threading::TLSDetail::DefaultConstructor<bool(**)(AssertHandlerContext_const&),void>::create()::{lambda(bool(***const&)(AssertHandlerContext_const&))#1}))(AssertHandlerContext_const&))#1}", signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: success_search_test_2() { String pattern = "Magic"; String text = "hello it's me Magic. Do you know what Magic is in this repo"; String exceptedOutput = "Found pattern at index 14\n" + "Found pattern at index 38\n"; String actual = CaptureOutput.captureStandardOutput(() -> Question1.search(pattern, text)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(exceptedOutput, actual)
[-] pred: org. junit. Assert. assertEquals ( exceptedOutput, actual )
************************************
[+] input: Exception { ExpandableNotificationRow row = mNotificationTestHelper.createRow(mNotificationTestHelper.createNotification()); row.getEntry().getChannel().setImportanceLockedByCriticalDeviceFunction(true);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(row.getIsNonblockable())
[-] pred: org. junit. Assert. assertTrue ( row. getIsNonblockable ( ) )
************************************
[+] input: Exception { Namespace scope = st.createNameSpace(null, "TestNameSpace", SourceType.USER_DEFINED); "<AssertPlaceHolder>"; assertEquals("TestNameSpace", scope.getName()); assertTrue(scope.getBody().isEmpty()); assertEquals(globalScope, scope.getParentNamespace()); Symbol symbol = scope.getSymbol(); assertEquals(scope.getName(), symbol.getName()); assertEquals(globalScope, symbol.getParentNamespace()); }
[*] target: assertNotNull(scope)
[-] pred: org. junit. Assert. assertNotNull ( scope )
************************************
[+] input: testWildcardAddTwiceDeleteOnceLastCharAndThirdLastCharWildcard() { ByteMachine cut = new ByteMachine(); cut.addPattern(Patterns.wildcardMatch("he*l*")); cut.addPattern(Patterns.wildcardMatch("he*l*")); cut.deletePattern(Patterns.wildcardMatch("he*l*")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cut.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cut. isEmpty() )
************************************
[+] input: testHandle() { String dataId = "dataId"; String group = "group"; String tenant = "tenant"; String groupKey = GroupKey2 .getKey(dataId, group, tenant); groupKey = StringPool.get(groupKey); when(ConfigCacheService.isUptodate(eq(groupKey), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(false); ConfigBatchListenRequest configChangeListenRequest = new ConfigBatchListenRequest(); configChangeListenRequest.addConfigListenContext(group, dataId, tenant, " "); try { ConfigChangeBatchListenResponse configChangeBatchListenResponse = configQueryRequestHandler .handle(configChangeListenRequest, requestMeta); boolean hasChange = false; for (ConfigChangeBatchListenResponse.ConfigContext changedConfig : configChangeBatchListenResponse.getChangedConfigs()) { if (changedConfig.getDataId().equals(dataId)) { hasChange = true; break; } } "<AssertPlaceHolder>"; } catch (NacosException e) { e.printStackTrace(); } }
[*] target: assertTrue(hasChange)
[-] pred: org. junit. Assert. assertTrue ( hasChange )
************************************
[+] input: testFormatStringLegacyColor_LegacyCodeOnly() { String input = "Hello &cThere Austin"; String expectedResult = "Hello " + BUKKIT_COLOR_CODE_PREFIX + "cThere Austin";  String result = Format.FormatStringLegacyColor(input); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testFindQueueByTenantIdAndName() { Queue queue = new Queue(); queue.setTenantId(tenantId); queue.setName("Test"); queue.setTopic("tb_rule_engine.test"); queue.setPollInterval(25); queue.setPartitions(1); queue.setPackProcessingTimeout(2000); queue.setSubmitStrategy(createTestSubmitStrategy()); queue.setProcessingStrategy(createTestProcessingStrategy()); Queue savedQueue = queueService.saveQueue(queue); Queue foundQueue = queueService.findQueueByTenantIdAndName(tenantId, savedQueue.getName());  Assert."<AssertPlaceHolder>"; Assert.assertEquals(savedQueue, foundQueue); }
[*] target: assertNotNull(foundQueue)
[-] pred: org. junit. Assert. assertNotNull ( foundQueue )
************************************
[+] input: Exception {  String mangled = "_ZNSt14__array_traitsIN12LayerDetails15RandomProviderTIZNKS0_9LayerBase10initRandomEllEUlRljE_EELm4EE6_S_refERA4_KS5_m";  String demangled = process.demangle(mangled);  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  String signature = object.getSignature(false); assertEquals( "undefined std::__array_traits<LayerDetails::RandomProviderT<LayerDetails::LayerBase::initRandom(long,long)const::{lambda(long&,unsigned_int)#1}>,4ul>::_S_ref(LayerDetails::LayerBase::initRandom(long,long) const::{lambda(long&, unsigned int)#1} const &[],unsigned long)", signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: testGetRedirectUrl() { JwtPair jwtPair = jwtTokenFactory.createTokenPair(securityUser);  String urlWithoutParams = "http://localhost:8080/dashboardGroups/3fa13530-6597-11ed-bd76-8bd591f0ec3e"; String urlWithParams = "http://localhost:8080/dashboardGroups/3fa13530-6597-11ed-bd76-8bd591f0ec3e?state=someState&page=1";  String redirectUrl = oauth2AuthenticationSuccessHandler.getRedirectUrl(urlWithoutParams, jwtPair); String expectedUrl = urlWithoutParams + "/?accessToken=" + jwtPair.getToken() + "&refreshToken=" + jwtPair.getRefreshToken(); assertEquals(expectedUrl, redirectUrl);  redirectUrl = oauth2AuthenticationSuccessHandler.getRedirectUrl(urlWithParams, jwtPair); expectedUrl = urlWithParams + "&accessToken=" + jwtPair.getToken() + "&refreshToken=" + jwtPair.getRefreshToken(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedUrl, redirectUrl)
[-] pred: org. junit. Assert. assertEquals ( expectedUrl, redirectUrl )
************************************
[+] input: testConfirmToStringAbstract() {  String diff = " a different string";  OverrideToStringAbstract obj = mock(OverrideToStringAbstract.class); when(obj.toString()).thenReturn(diff);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(diff, obj.toString())
[-] pred: org. junit. Assert. assertEquals ( diff, obj. toString ( ) )
************************************
[+] input: testNorthNorthNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.CompactThirteen(population, 10);  TestSuiteChromosome exepcted_individual = population.get(2); TestSuiteChromosome returned_individual = neighbors.get(8);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: Exception { IEclipsePreferences node = InstanceScope.INSTANCE.getNode(AntUIPlugin.getUniqueIdentifier()); if (node != null) { node.putBoolean(AntEditorPreferenceConstants.FORMATTER_WRAP_LONG, true); node.putInt(AntEditorPreferenceConstants.FORMATTER_MAX_LINE_LENGTH, 40); node.putBoolean(AntEditorPreferenceConstants.FORMATTER_ALIGN, false); node.putBoolean(AntEditorPreferenceConstants.FORMATTER_TAB_CHAR, true); node.putInt(AntEditorPreferenceConstants.FORMATTER_TAB_SIZE, 4); node.flush(); } String lineSep = System.getProperty("line.separator"); //$NON-NLS-1$ String xmlDoc = "<project default="go"><target name="go" description="Demonstrate the wrapping of long tags."><echo>hi</echo></target></project>"; //$NON-NLS-1$ String formattedDoc = XmlFormatter.format(xmlDoc); String expected = "<project default="go">" + lineSep + "\t<target name="go"" + lineSep //$NON-NLS-1$ //$NON-NLS-2$ + "\t        description="Demonstrate the wrapping of long tags.">" + lineSep + "\t\t<echo>hi</echo>" //$NON-NLS-1$ //$NON-NLS-2$ + lineSep + "\t</target>" + lineSep + "</project>"; //$NON-NLS-1$ //$NON-NLS-2$ "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, formattedDoc)
[-] pred: org. junit. Assert. assertEquals ( expected, formattedDoc )
************************************
[+] input: substituteParametersInSqlString_UuidType() {  UUID guid = UUID.randomUUID(); String sql = "Select * from Table Where guid = :guid"; String sqlToUse = "Select * from Table Where guid = '" + guid + "'";  ctx.addUuidParameter("guid", guid);  String sqlToUseResult = queryLog.substituteParametersInSqlString(sql, ctx); "<AssertPlaceHolder>"; }
[*] target: assertEquals(sqlToUse, sqlToUseResult)
[-] pred: org. junit. Assert. assertEquals ( sqlToUse, sqlToUseResult )
************************************
[+] input: testRemoveListen() { configChangeListenContext.addListen("groupKey", "md5", "connectionId"); configChangeListenContext.removeListen("groupKey", "connectionId"); Set<String> groupKey = configChangeListenContext.getListeners("groupKey"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(groupKey)
[-] pred: org. junit. Assert. assertNull ( groupKey )
************************************
[+] input: InterruptedException { Node node1 = new Node(new InetSocketAddress("127.0.0.1", 10001)); NodeEntry ne1 = new NodeEntry(NetUtil.getNodeId(), node1); Thread.sleep(1); Node node2 = new Node(new InetSocketAddress("127.0.0.1", 10002)); NodeEntry ne2 = new NodeEntry(NetUtil.getNodeId(), node2); TimeComparator tc = new TimeComparator(); int result = tc.compare(ne1, ne2); Assert."<AssertPlaceHolder>";  }
[*] target: assertEquals(1, result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
[+] input: testClearAlarmProcedure() { UUID tenantId = UUID.randomUUID(); UUID originator1Id = UUID.fromString("d4b68f41-3e96-11e7-a884-898080180d6b"); UUID alarm1Id = UUID.fromString("d4b68f43-3e96-11e7-a884-898080180d6b"); Alarm alarm = saveAlarm(alarm1Id, tenantId, originator1Id, "TEST_ALARM"); long clearTs = System.currentTimeMillis(); var details = JacksonUtil.newObjectNode().put("test", 123); AlarmApiCallResult result = alarmDao.clearAlarm(alarm.getTenantId(), alarm.getId(), clearTs, details); AlarmInfo afterSave = alarmDao.findAlarmInfoById(alarm.getTenantId(), alarm.getUuidId()); assertNotNull(result); assertTrue(result.isSuccessful()); assertTrue(result.isCleared()); assertNotNull(result.getAlarm()); assertEquals(afterSave, result.getAlarm()); assertEquals(clearTs, result.getAlarm().getClearTs()); assertTrue(result.getAlarm().isCleared()); assertEquals(details, result.getAlarm().getDetails()); result = alarmDao.clearAlarm(alarm.getTenantId(), alarm.getId(), clearTs + 1, JacksonUtil.newObjectNode()); "<AssertPlaceHolder>"; assertNotNull(result.getAlarm()); assertEquals(afterSave, result.getAlarm()); assertTrue(result.isSuccessful()); assertFalse(result.isCleared()); assertEquals(clearTs, result.getAlarm().getClearTs()); assertTrue(result.getAlarm().isCleared()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: getNextByteStateShouldReturnNull() { SingleByteTransition nextState = match.getNextByteState(); "<AssertPlaceHolder>"; }
[*] target: assertNull(nextState)
[-] pred: org. junit. Assert. assertNull ( nextState )
************************************
[+] input: testGetPushData() { ServiceInfo pushData = serviceStorage.getPushData(SERVICE);  Mockito.verify(switchDomain).getDefaultPushCacheMillis(); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(pushData)
[-] pred: org. junit. Assert. assertNotNull ( pushData )
************************************
[+] input: testDisplayString_AddressLocation_MultipleCodeUnits_NegativeCodeUnitOffset() {  int cuOffset = -3; int cuCount = 6; Address address = addr(TEST_ADDRESS); AddressFieldLocation location = new AddressFieldLocation(program, address); CodeUnitTableCellData data = new CodeUnitTableCellData(location, formatter, cuOffset, cuCount); String preview = data.getDisplayString();  // location defaults to the mnemonic display //@formatter:off String results = "CALL dword ptr [MSVCRT.dll___set_app_type]" + "\nADD ESP,0x4" + "\nMOV dword ptr [DAT_01009938],0xffffffff" + "\n" + MNEMONIC_DISPLAY_STRING + "\nCALL dword ptr [DAT_0100115c]" + "\nMOV ECX,dword ptr [DAT_01008844]"; //@formatter:on "<AssertPlaceHolder>"; }
[*] target: assertEquals(results, preview)
[-] pred: org. junit. Assert. assertEquals ( results, preview )
************************************
[+] input: testIsUp() { AzureInstanceView instanceView = getInstanceView(true, true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(instanceView.isUp())
[-] pred: org. junit. Assert. assertTrue ( instanceView. isUp() )
************************************
[+] input: testApplyTps() { for (int i = 0; i < 100; i++) { String value = "atg" + (new Random().nextInt(100) + 2) + "efb"; boolean pass = tpsMonitorManager .applyTps("configPublish", "testconnectionId", CollectionUtils.list(new TestKey(value))); "<AssertPlaceHolder>"; try { Thread.sleep(1L); } catch (InterruptedException e) { e.printStackTrace(); } } }
[*] target: assertTrue(pass)
[-] pred: org. junit. Assert. assertTrue ( pass )
************************************
[+] input: testDeleteBigRange() { for (int i = 0; i < 10; i++) { getTestObj(i); } assertEquals(10, cache.size()); cache.delete(Arrays.asList(new KeyRange(2, 100))); "<AssertPlaceHolder>"; }
[*] target: assertEquals(2, cache.size())
[-] pred: org. junit. Assert. assertEquals ( 2, cache. size() )
************************************
[+] input: testFilterRelationshipsBothExcludeAndInclude() { db.executeTransactionally("CREATE (u:User {name:'Joe',gender:'male'})-[:KNOWS]->(u), (u)-[:LOVES]->(u)"); final Map<String, String> conf = map("includeRels", "LOVES", "excludeRels", "LOVES");  final Object result = TestUtil.singleResultFirstColumn( db, "CALL apoc.nodes.group(['User'], ['gender'], null, $conf) yield relationship return relationship", map("conf", conf)); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: nodesSame() { Map<String, Object> result = db.executeTransactionally( "MATCH (node:Node1) RETURN apoc.diff.nodes(node, node) as diff", new HashMap<>(), r -> Iterators.single(r.columnAs("diff"))); "<AssertPlaceHolder>";  HashMap<String, Object> leftOnly = (HashMap<String, Object>) result.get("leftOnly"); assertTrue(leftOnly.isEmpty());  HashMap<String, Object> rightOnly = (HashMap<String, Object>) result.get("rightOnly"); assertTrue(rightOnly.isEmpty());  HashMap<String, Object> different = (HashMap<String, Object>) result.get("different"); assertTrue(different.isEmpty());  HashMap<String, Object> inCommon = (HashMap<String, Object>) result.get("inCommon"); assertEquals(2, inCommon.size()); assertEquals("val1", inCommon.get("prop1")); assertEquals(2L, inCommon.get("prop2")); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testNoChange() { model.setLength(0x6600); "<AssertPlaceHolder>"; }
[*] target: assertTrue(model.execute())
[-] pred: org. junit. Assert. assertTrue ( model. execute() )
************************************
[+] input: decode() { Student student = new Student(); student.name = "a";  byte[] encode = DataCodecKit.encode(student); Student decode = DataCodecKit.decode(encode, Student.class); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(student.name, decode.name)
[-] pred: org. junit. Assert. assertEquals ( student.name, decode. name )
************************************
[+] input: testGetDataType() {  String name = "string"; String dtmId = "3295333330922457057"; FakeDataTypeManager manager = new FakeDataTypeManager(dtmId); FakeDataType dt = new FakeDataType(name, manager);  DataTypeUrl dtUrl = new DataTypeUrl(dt);  DataTypeManagerService service = new FakeDataTypeManagerService(manager); DataType actualDt = dtUrl.getDataType(service); "<AssertPlaceHolder>"; }
[*] target: assertEquals(dt, actualDt)
[-] pred: org. junit. Assert. assertEquals ( dt, actualDt )
************************************
[+] input: Exception {  panel.setAddToTop(true); File temp = createTempFileForTest(); Preferences.setProperty(Preferences.LAST_IMPORT_DIRECTORY, temp.getParent()); panel.setFileChooserProperties("Select Source Files", Preferences.LAST_IMPORT_DIRECTORY, GhidraFileChooserMode.FILES_AND_DIRECTORIES, true, new ExtensionFileFilter(new String[] { "h" }, "C Header Files"));  JButton button = findButtonByIcon(panel, ResourceManager.loadImage("images/Plus.png")); "<AssertPlaceHolder>"; pressButton(button, false);  waitForPostedSwingRunnables(); selectFromFileChooser();  assertEquals(6, table.getRowCount());  String filename = (String) table.getModel().getValueAt(0, 0); assertTrue(filename.endsWith("fred.h"));  }
[*] target: assertNotNull(button)
[-] pred: org. junit. Assert. assertNotNull ( button )
************************************
[+] input: testInstance() { EncryptionPluginManager instance = EncryptionPluginManager.instance(); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(instance)
[-] pred: org. junit. Assert. assertNotNull ( instance )
************************************
[+] input: Exception {  String typeName = "templated_name<int, void*, custom_type>"; StructureDataType structure = new StructureDataType(typeName, 0);  tx(program, () -> { programDTM.resolve(structure, null); });  DataTypeParser parser = new DataTypeParser(dtmService, AllowedDataTypes.ALL); DataType dt = parser.parse(typeName); "<AssertPlaceHolder>"; assertTrue(dt.isEquivalent(structure)); }
[*] target: assertNotNull(dt)
[-] pred: org. junit. Assert. assertNotNull ( dt )
************************************
[+] input: testFromProtobufWithSha1() { final Digest digest = Digest.newBuilder().setType(DigestType.SHA1).setChecksum( "8843D7F92416211DE9EBB963FF4CE28125932878").build(); SystemProperties systemProperties = SystemProperties.newBuilder().setMessageType(MessageType.NORMAL) .setMessageId(MessageIdCodec.getInstance().nextMessageId().toString()) .setBornHost(FAKE_HOST_0) .setBodyDigest(digest) .build(); String topic = FAKE_TOPIC_0; Resource resource = Resource.newBuilder().setName(topic).build(); final ByteString body = ByteString.copyFrom("foobar", StandardCharsets.UTF_8); final Message message = Message.newBuilder().setSystemProperties(systemProperties) .setTopic(resource).setBody(body) .setSystemProperties(systemProperties).build(); MessageViewImpl messageView = MessageViewImpl.fromProtobuf(message); assertEquals(body.asReadOnlyByteBuffer(), messageView.getBody()); assertEquals(topic, messageView.getTopic()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(messageView.isCorrupted())
[-] pred: org. junit. Assert. assertFalse ( messageView. isCorrupted() )
************************************
[+] input: testSplitWithMaxWhitespaceAsPartOfMaxWithSpaceAtEnd() { // The word is long enough to force a hard split on the first 'n' characters.  The // space at the end allows the remaining 'word' to be kept intact. List<String> lines = HtmlLineSplitter.split("ab   c     ", 6); "<AssertPlaceHolder>"; assertEquals("ab", lines.get(0)); assertEquals("c", lines.get(1)); }
[*] target: assertEquals(2, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 2, lines. size ( ) )
************************************
[+] input: extractTaxonomyIdFromPolicyTagId() {  String input = "projects/<project>/locations/<location>/taxonomies/<taxonomyID>/policyTags/<policyTagID"; String expected = "projects/<project>/locations/<location>/taxonomies/<taxonomyID>"; String actual = Utils.extractTaxonomyIdFromPolicyTagId(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Throwable { DebuggerRegisterMapper rm = getRegisterMapperBase(); Register lRAX = getSLEIGH_X86_64_LANGUAGE().getRegister("RAX"); TestTargetRegister tRAX = Objects.requireNonNull(mb.testProcess1.regs.getCachedElements().get("RAX"));  Register lReg = waitForValue(() -> rm.targetToTrace(tRAX)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(lRAX, lReg)
[-] pred: org. junit. Assert. assertEquals ( lRAX, lReg )
************************************
[+] input: testMazeSolution() {  int ret_val = MazeClient.walk('s', 's', 's', 's', 'd', 'd', 'd', 'd', 'w', 'w', 'a', 'a', 'w', 'w', 'd', 'd', 'd', 'd', 's', 's', 's', 's', 'd', 'd', 'w', 'w', 'w', 'w', (char) 0, (char) 0, 28); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret_val)
[-] pred: org. junit. Assert. assertEquals ( 1, ret_val )
************************************
[+] input: hasIndeterminatePrefixShouldReturnFalseIfNoNextState() { compositeTransition = new CompositeByteTransition(null, match); "<AssertPlaceHolder>"; }
[*] target: assertFalse(compositeTransition.hasIndeterminatePrefix())
[-] pred: org. junit. Assert. assertFalse ( compositeTransition. hasIndeterminatePrefix() )
************************************
[+] input: testDisplayString_AddressLocation_MultipleCodeUnits() {  int cuOffset = 0; int cuCount = 4; Address address = addr(TEST_ADDRESS); AddressFieldLocation location = new AddressFieldLocation(program, address); CodeUnitTableCellData data = new CodeUnitTableCellData(location, formatter, cuOffset, cuCount); String preview = data.getDisplayString();  // location defaults to the mnemonic display //@formatter:off String results = MNEMONIC_DISPLAY_STRING + "\nCALL dword ptr [DAT_0100115c]" + "\nMOV ECX,dword ptr [DAT_01008844]" + "\nMOV dword ptr [EAX],ECX"; //@formatter:on "<AssertPlaceHolder>"; }
[*] target: assertEquals(results, preview)
[-] pred: org. junit. Assert. assertEquals ( results, preview )
************************************
[+] input: testConstantMul() { BigInteger zero = bigIntegerRing.createZero(); BigInteger one = bigIntegerRing.createOne(); BigInteger p; BigInteger t; // 0 * 0 = 0 p = bigIntegerRing.createZero(); t = bigIntegerRing.mul(p, zero); Assert.assertEquals(zero, t); // 0 * 1 = 0 p = bigIntegerRing.createZero(); t = bigIntegerRing.mul(p, one); Assert.assertEquals(zero, t); // 1 * 0 = 0 p = bigIntegerRing.createOne(); t = bigIntegerRing.mul(p, zero); Assert.assertEquals(zero, t); // 1 * 1 = 1 p = bigIntegerRing.createOne(); t = bigIntegerRing.mul(p, one); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(one, t)
[-] pred: org. junit. Assert. assertEquals ( one, t )
************************************
[+] input: testSmallThetaZeroInput() { IntegralLdpConfig ldpConfig = new LocalMapIntegralLdpConfig .Builder(DEFAULT_BASE_EPSILON, SMALL_THETA, BIASED_LOWER_BOUND, BIASED_UPPER_BOUND) .build(); IntegralLdp mechanism = IntegralLdpFactory.createInstance(ldpConfig); int value = 0; IntStream.range(0, ROUND).forEach(index -> { int noiseValue = mechanism.randomize(value); Assert."<AssertPlaceHolder>"; }); }
[*] target: assertEquals(value, noiseValue)
[-] pred: org. junit. Assert. assertEquals ( value, noiseValue )
************************************
[+] input: Exception { Gson gson = new Gson(); String jsonObject = "{"count":"123","hits":{"total":1000,"max_score":null,"hits":[{"_index":"bank","_type":"_doc","_id":"0","sort":[0],"_score":null,"_source":{"account_number":0,"balance":16623,"firstname":"Bradshaw","lastname":"qwe","age":29,"gender":"F","address":"2133","employer":"12","email":"bradshawqwe@123.com","city":"Hobucken","state":"CO"}}]},"aggregations":{"avg-values-per-day":{"buckets":[{"key_as_string":"ID","Avg-CPU-Utilization":{"value":12},"Avg-NetworkIn":{"value":12},"Avg-NetworkOut":{"value":12},"Avg-DiskReadinBytes":{"value":12},"Avg-DiskWriteinBytes":{"value":12}}]}}}"; Map<String, Object> json = (Map<String, Object>) gson.fromJson(jsonObject, Object.class); Map<String, Object> mustFilter = Maps.newHashMap(); mustFilter.put("test", json); mustFilter.put("range", json); Object response = CommonUtils.buildQueryForExistingIssues(mustFilter); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: Exception { Map<String, String> param = Maps.newHashMap(); param.put(PacmanSdkConstants.ACCOUNT_ID, "acc123"); param.put(PacmanSdkConstants.REGION, "region123"); param.put(PacmanSdkConstants.RESOURCE_ID, "resou123"); param.put(PacmanSdkConstants.REGION, "region"); Map<String, String> response = PolicyExecutionUtils.getLocalPolicyParam(param, param); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testEquals() { SubRuleContext.Generator generatorA = new SubRuleContext.Generator(); SubRuleContext contextA1 = generatorA.generate(NAME); SubRuleContext contextA2 = generatorA.generate(NAME);  SubRuleContext.Generator generatorB = new SubRuleContext.Generator(); SubRuleContext contextB1 = generatorB.generate(NAME);  "<AssertPlaceHolder>"; assertNotEquals(contextA2, contextB1); }
[*] target: assertEquals(contextA1, contextB1)
[-] pred: org. junit. Assert. assertEquals ( contextA1, contextB1 )
************************************
[+] input: testSimpleNameNoPackage() { final String className = "MyClass"; final String simpleName = ClassNameHelper.getSimpleName(className); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(className, simpleName)
[-] pred: org. junit. Assert. assertEquals ( className, simpleName )
************************************
[+] input: testJustSymbolNameNoPath() { SymbolPath symbolPath = new SymbolPath("bob"); assertEquals("bob", symbolPath.getPath()); assertEquals("bob", symbolPath.getName()); assertNull(symbolPath.getParent()); "<AssertPlaceHolder>"; }
[*] target: assertNull(symbolPath.getParentPath())
[-] pred: org. junit. Assert. assertNull ( symbolPath. getParentPath() )
************************************
[+] input: testGetLanIP() { String lanIpv4 = NetUtil.getLanIP(); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(lanIpv4)
[-] pred: org. junit. Assert. assertNotNull ( lanIpv4 )
************************************
[+] input: fromFullResource() {  String input = "//bigquery.googleapis.com/projects/test_project/datasets/test_dataset/tables/test_table"; TableSpec expected = new TableSpec("test_project", "test_dataset", "test_table"); TableSpec actual = TableSpec.fromFullResource(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testExtractDefaultValueNull() { List<String> columnSpecs = Arrays.asList("Default", null, "comment", null); String actualDefault = schemaManager.extractDefaultValue(DorisType.STRING, columnSpecs); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actualDefault)
[-] pred: org. junit. Assert. assertNull ( actualDefault )
************************************
[+] input: Exception { String mangled = "_ZN12LayerDetails15RandomProviderTIZNKS_9LayerBase10initRandomEllEUlRljE_EclIiLm2EEET_RAT0__KS6_";  String demangled = process.demangle(mangled);  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  String signature = object.getSignature(false); assertEquals( "int LayerDetails::RandomProviderT<LayerDetails::LayerBase::initRandom(long,long)const::{lambda(long&,unsigned_int)#1}>::operator()<int,2ul>(LayerDetails::RandomProviderT<LayerDetails::LayerBase::initRandom(long,long)const::{lambda(long&,unsigned_int)#1}>::operator() const &[])", signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: Exception { MindMap<TestTopicNode> map = new MindMap<>(new StringReader(""" --- # root ## child1 ### child1.1 ### child1.2 ## child2 ### child2.1 ### child2.2 """), TestTopicNode.testTopicCreator); map.traverseTopicTree(t -> { System.out.println(t.getText()); }); map.anyMatchInTree(t -> "child2.2".equals(t.getText()));  Optional<TestTopicNode> firstInTree = map.findFirstInTree(t -> "child2.2".equals(t.getText())); Assert."<AssertPlaceHolder>"; Assert.assertTrue(firstInTree.isPresent()); Assert.assertEquals("child2.2", firstInTree.get().getText()); System.out.println(firstInTree.get().getText()); }
[*] target: assertNotNull(firstInTree)
[-] pred: org. junit. Assert. assertNotNull ( firstInTree )
************************************
[+] input: testDeleteDeviceProfile() { DeviceProfile deviceProfile = this.createDeviceProfile(tenantId, "Device Profile"); DeviceProfile savedDeviceProfile = deviceProfileService.saveDeviceProfile(deviceProfile); deviceProfileService.deleteDeviceProfile(tenantId, savedDeviceProfile.getId()); DeviceProfile foundDeviceProfile = deviceProfileService.findDeviceProfileById(tenantId, savedDeviceProfile.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(foundDeviceProfile)
[-] pred: org. junit. Assert. assertNull ( foundDeviceProfile )
************************************
[+] input: testLoadX509FromStringWithProv() { X509Certificate certificate = PemUtil.loadX509FromString(MERCHANT_CERTIFICATE_STRING, "SUN"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(certificate)
[-] pred: org. junit. Assert. assertNotNull ( certificate )
************************************
[+] input: testSplitWithMaxNewlineAtBeginningAndEndOnly() { // newlines at begin and end do not create lines; no whitespace--max is below // MAX_WORD_LENGTH, so single line only List<String> lines = HtmlLineSplitter.split("\nabcdefghi\n", 4); "<AssertPlaceHolder>"; assertEquals("", lines.get(0)); assertEquals("abcdefghi", lines.get(1)); assertEquals("", lines.get(2)); }
[*] target: assertEquals(3, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 3, lines. size ( ) )
************************************
[+] input: Exception { @Nullable Integer apiLevel = Util.getAndroidApiLevel(); Assume.assumeTrue(apiLevel == null || apiLevel >= 30); // Run the test on java and android >= 30  JsonObject json = WycheproofTestUtil.readJson("../wycheproof/testvectors/aes_gcm_siv_test.json"); int errors = 0; int cntSkippedTests = 0; JsonArray testGroups = json.getAsJsonArray("testGroups"); for (int i = 0; i < testGroups.size(); i++) { JsonObject group = testGroups.get(i).getAsJsonObject(); int keySize = group.get("keySize").getAsInt(); JsonArray tests = group.getAsJsonArray("tests"); if (!Arrays.asList(keySizeInBytes).contains(keySize / 8)) { cntSkippedTests += tests.size(); continue; } for (int j = 0; j < tests.size(); j++) { JsonObject testcase = tests.get(j).getAsJsonObject(); String tcId = String.format( "testcase %d (%s)", testcase.get("tcId").getAsInt(), testcase.get("comment").getAsString()); byte[] iv = Hex.decode(testcase.get("iv").getAsString()); byte[] key = Hex.decode(testcase.get("key").getAsString()); byte[] msg = Hex.decode(testcase.get("msg").getAsString()); byte[] aad = Hex.decode(testcase.get("aad").getAsString()); byte[] ct = Hex.decode(testcase.get("ct").getAsString()); byte[] tag = Hex.decode(testcase.get("tag").getAsString()); byte[] ciphertext = Bytes.concat(iv, ct, tag); // Result is one of "valid", "invalid", "acceptable". // "valid" are test vectors with matching plaintext, ciphertext and tag. // "invalid" are test vectors with invalid parameters or invalid ciphertext and tag. // "acceptable" are test vectors with weak parameters or legacy formats. String result = testcase.get("result").getAsString(); // Tink only supports 12-byte iv. if (iv.length != 12) { result = "invalid"; }  try { AesGcmSiv gcm = new AesGcmSiv(key); byte[] decrypted = gcm.decrypt(ciphertext, aad); boolean eq = TestUtil.arrayEquals(decrypted, msg); if (result.equals("invalid")) { System.out.printf( "FAIL %s: accepting invalid ciphertext, cleartext: %s, decrypted: %s%n", tcId, Hex.encode(msg), Hex.encode(decrypted)); errors++; } else { if (!eq) { System.out.printf( "FAIL %s: incorrect decryption, result: %s, expected: %s%n", tcId, Hex.encode(decrypted), Hex.encode(msg)); errors++; } } } catch (GeneralSecurityException ex) { if (result.equals("valid")) { System.out.printf("FAIL %s: cannot decrypt, exception %s%n", tcId, ex); errors++; } } } } System.out.printf("Number of tests skipped: %d", cntSkippedTests); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors)
[-] pred: org. junit. Assert. assertEquals ( 0, errors )
************************************
[+] input: simpleLineReaderWithEmptyString() { SimpleLineReader simpleLineReader = new SimpleLineReader(new Document("")); "<AssertPlaceHolder>"; }
[*] target: assertNull(simpleLineReader.readLine())
[-] pred: org. junit. Assert. assertNull ( simpleLineReader. readLine() )
************************************
[+] input: test_bothHeapifyMethods_shouldConstructArray() { MaxHeap<Integer> heap = new MaxHeap<>(); // 1st heapify, takes in a list of values heap.heapify(Arrays.asList(1, 9, 11, 4, 7, 6, 3, 2, 13)); String firstHeap = heap.toString();  // 2nd heapify, take sin sequence of values heap.heapify(2, 9, 11, 4, 7, 6, 3, 13, 1); String secondHeap = heap.toString();  Assert."<AssertPlaceHolder>"; // should be the same String expected = "[13, 9, 11, 4, 7, 6, 3, 2, 1]"; Assert.assertEquals(expected, firstHeap); }
[*] target: assertEquals(firstHeap, secondHeap)
[-] pred: org. junit. Assert. assertEquals ( firstHeap, secondHeap )
************************************
[+] input: testWildcardMachineNotEmptyWithSingleWildcardCharacterPattern() { ByteMachine cut = new ByteMachine(); cut.addPattern(Patterns.wildcardMatch("*")); assertFalse(cut.isEmpty()); cut.deletePattern(Patterns.wildcardMatch("*")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cut.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cut. isEmpty() )
************************************
[+] input: testDeleteEdge() { Edge edge = constructEdge("My edge", "default"); Edge savedEdge = edgeService.saveEdge(edge); Edge foundEdge = edgeService.findEdgeById(tenantId, savedEdge.getId()); Assert.assertNotNull(foundEdge); edgeService.deleteEdge(tenantId, savedEdge.getId()); foundEdge = edgeService.findEdgeById(tenantId, savedEdge.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(foundEdge)
[-] pred: org. junit. Assert. assertNull ( foundEdge )
************************************
[+] input: testGetOperatingSystemInfo() { OperatingSystem operatingSystem = OperatingSystemUtils.getOperatingSystemInfo(); "<AssertPlaceHolder>"; log.info("操作系统信息：" + operatingSystem.toString()); }
[*] target: assertNotNull(operatingSystem)
[-] pred: org. junit. Assert. assertNotNull ( operatingSystem )
************************************
[+] input: shouldFilterMediaNotificationWhenEnabled() { // GIVEN that the media feature is enabled when(mMediaFeatureFlag.getEnabled()).thenReturn(true); NotificationFilter filter = new NotificationFilter(mStatusBarStateController, mMediaFeatureFlag); // WHEN the media filter is asked about a media entry final boolean shouldFilter = filter.shouldFilterOut(mMediaEntry); // THEN it should be filtered "<AssertPlaceHolder>"; }
[*] target: assertTrue(shouldFilter)
[-] pred: org. junit. Assert. assertTrue ( shouldFilter )
************************************
[+] input: testDisplayString_ArrayFieldLocation() {  Integer16DataType intDataType = new Integer16DataType(); ArrayDataType innerArray = new ArrayDataType(intDataType, 4, 4); ArrayDataType parentArray = new ArrayDataType(innerArray, 4, innerArray.getElementLength());  Address arrayAddress = addr("0100f2f0"); CreateDataCmd cmd = new CreateDataCmd(arrayAddress, true, parentArray); assertTrue(applyCmd(program, cmd));  int[] componentPath = new int[] { 17 }; String displayText = "int16 0h (int16[4][0][1])"; int index = 0; int charOffset = 0; Address subElementAddress = arrayAddress.add(20); ArrayElementFieldLocation location = new ArrayElementFieldLocation(program, subElementAddress, componentPath, displayText, index, charOffset); PreviewTableCellData data = new PreviewTableCellData(location, formatter); String preview = data.getDisplayString();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(displayText, preview)
[-] pred: org. junit. Assert. assertEquals ( displayText, preview )
************************************
[+] input: testGettingTaskDescription() { TaskDescriptionProvider provider = TaskDescriptionProvider.getDefault(); String description = provider.getDescriptionForTask("apply"); //$NON-NLS-1$ "<AssertPlaceHolder>"; assertTrue(description.length() > 0); }
[*] target: assertNotNull(description)
[-] pred: org. junit. Assert. assertNotNull ( description )
************************************
[+] input: IOException { // given InputStream is = TestUtils.getResourceStream("input/sequence.pdf"); byte[] bytes = IOUtils.toByteArray(is);  // when ByteArrayPdfSource source = new ByteArrayPdfSource(bytes); PDDocument document = source.doLoad();  // then Assert."<AssertPlaceHolder>"; // The PDF file has only 3 pages. Assert.assertEquals(3, document.getNumberOfPages()); }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
[+] input: NetException { String mac = NetUtils.getLocalMac(); "<AssertPlaceHolder>"; log.info(mac); }
[*] target: assertNotNull(mac)
[-] pred: org. junit. Assert. assertNotNull ( mac )
************************************
[+] input: testGetData() { ServiceInfo serviceInfo = serviceStorage.getData(SERVICE);  Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(serviceInfo)
[-] pred: org. junit. Assert. assertNotNull ( serviceInfo )
************************************
[+] input: testSecondIsNull() { Pair<String, String> p = Pair.of(null, null); assertTrue(p.secondIsNull()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(p.secondNonNull())
[-] pred: org. junit. Assert. assertFalse ( p. secondNonNull() )
************************************
[+] input: testReplaceFailure() {// bigger, no space below DataTypeComponent dtc = null; try { dtc = struct.replace(0, new QWordDataType(), 8); } catch (IllegalArgumentException e) { // Not enough undefined bytes so should throw this. } "<AssertPlaceHolder>"; }
[*] target: assertNull(dtc)
[-] pred: org. junit. Assert. assertNull ( dtc )
************************************
[+] input: Exception { AddressSet set = new AddressSet(); set.addRange(getAddr(0), getAddr(0x200)); set.addRange(getAddr(0x205), getAddr(0x1000)); set.addRange(getAddr(0x5000), getAddr(0x6001));  IntRangeMap map = program.createIntRangeMap("MyMap"); int value = 0x11223344; map.setValue(set, value);  AddressSet s = new AddressSet(); s.addRange(getAddr(5), getAddr(0x6000));  map.clearValue(s);  s = set.subtract(new AddressSet(getAddr(5), getAddr(0x6000))); AddressSet resultSet = map.getAddressSet(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(s, resultSet)
[-] pred: org. junit. Assert. assertEquals ( s, resultSet )
************************************
[+] input: testGetColor_StateActive_ReturnActiveColor() { final int color = mTileColorPicker.getColor(Tile.STATE_ACTIVE); final int expectedColor = mTintColorStateList.getColorForState( TileColorPicker.ENABLE_STATE_SET, DEFAULT_COLOR);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedColor, color)
[-] pred: org. junit. Assert. assertEquals ( expectedColor, color )
************************************
[+] input: Exception { // Obtained by prepending the rsa-1024 certificate to the PKCS#7 SignedData certificates set // of v1-only-with-rsa-pkcs1-sha1-1.2.840.113549.1.1.1-2048.apk META-INF/CERT.RSA. The certs // (in the order of appearance in the file) are thus: rsa-1024, rsa-2048. The package's // signing cert is rsa-2048. ApkVerifier.Result result = verify("v1-only-pkcs7-cert-bag-first-cert-not-used.apk"); assertVerified(result); List<X509Certificate> signingCerts = result.getSignerCertificates(); "<AssertPlaceHolder>"; assertEquals( "fb5dbd3c669af9fc236c6991e6387b7f11ff0590997f22d0f5c74ff40e04fca8", HexEncoding.encode(sha256(signingCerts.get(0).getEncoded()))); }
[*] target: assertEquals(1, signingCerts.size())
[-] pred: org. junit. Assert. assertEquals ( 1, signingCerts. size ( ) )
************************************
[+] input: testConstructorParentAndVarargs() { CategoryPath parent = new CategoryPath("/apple/peaches"); CategoryPath c = new CategoryPath(parent, "pumpkin", "pie"); assertEquals("pie", c.getName()); c = c.getParent(); assertEquals("pumpkin", c.getName()); c = c.getParent(); assertEquals("peaches", c.getName()); c = c.getParent(); assertEquals("apple", c.getName()); c = c.getParent(); assertEquals("", c.getName()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(c.isRoot())
[-] pred: org. junit. Assert. assertTrue ( c. isRoot() )
************************************
[+] input: testTokenizeString() { String s = "Lorem, ipsum. dolor, sit amet"; String reg = "[,\\.]"; String del = " "; brandInfrastructure.setTokenizationParameters(del,reg); List<String> expected = List.of("Lorem","ipsum","dolor","sit","amet"); List<String> actual = brandInfrastructure.tokenizeString(s); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected,actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetSubscribersFuzzy() { String serviceName = "test"; String namespaceId = "public"; boolean aggregation = Boolean.TRUE; try { List<Subscriber> clients = new ArrayList<Subscriber>(); Subscriber subscriber = new Subscriber("127.0.0.1:8080", "test", "app", "127.0.0.1", namespaceId, "testGroupName@@test_subscriber", 0); clients.add(subscriber); Mockito.when(this.aggregation.getFuzzySubscribers(Mockito.anyString(), Mockito.anyString())) .thenReturn(clients); List<Subscriber> list = subscribeManager.getSubscribers(serviceName, namespaceId, aggregation); Assert."<AssertPlaceHolder>"; Assert.assertEquals(1, list.size()); Assert.assertEquals("testGroupName@@test_subscriber", list.get(0).getServiceName()); } catch (Exception ignored) {  } }
[*] target: assertNotNull(list)
[-] pred: org. junit. Assert. assertNotNull ( list )
************************************
[+] input: testAsList_List_Empty() {  List<String> list = new ArrayList<>(); list = CollectionUtils.asList(list); "<AssertPlaceHolder>"; }
[*] target: assertTrue(list.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( list. isEmpty() )
************************************
[+] input: testShouldRollbackValidatedDeviceIfDeviceCredentialsValidationFailed() { Mockito.reset(validator); Mockito.doThrow(new DataValidationException("mock message")) .when(validator).validate(any(), any());  Device device = new Device(); device.setTenantId(tenantId); device.setName(StringUtils.randomAlphabetic(10)); device.setType("default");  assertThatThrownBy(() -> deviceService.saveDevice(device)) .isInstanceOf(DataValidationException.class) .hasMessageContaining("mock message");  Device deviceByName = deviceService.findDeviceByTenantIdAndName(tenantId, device.getName()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(deviceByName)
[-] pred: org. junit. Assert. assertNull ( deviceByName )
************************************
[+] input: testDisplayString_LabelFieldLocation() {  Address address = addr("01002d0f"); String labelText = "LAB_01002d0f"; LabelFieldLocation location = new LabelFieldLocation(program, address, labelText);  PreviewTableCellData data = new PreviewTableCellData(location, formatter); String preview = data.getDisplayString();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(labelText, preview)
[-] pred: org. junit. Assert. assertEquals ( labelText, preview )
************************************
[+] input: Exception {  // // The demangled string contains this string: {default arg#1} // String mangled = "_ZZN12PackManifest18CapabilityRegistry18registerCapabilityEN3gsl17basic_string_spanIKcLln1EEEbSt8functionIFbRS_R10PackReportbEEEd_NKUlS6_S8_bE_clES6_S8_b";  String demangled = process.demangle(mangled);  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  String signature = object.getSignature(false); assertEquals( "PackManifest::CapabilityRegistry::registerCapability(gsl::basic_string_span<char_const,-1l>,bool,std::function<bool(PackManifest&,PackReport&,bool)>)::{default arg#1}::{lambda(PackManifest&,PackReport&,bool)#1}::operator()(PackManifest &,PackReport &,bool)", signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: testWildcardAddTwiceDeleteOnceLeadingWildcard() { ByteMachine cut = new ByteMachine(); cut.addPattern(Patterns.wildcardMatch("*hello")); cut.addPattern(Patterns.wildcardMatch("*hello")); cut.deletePattern(Patterns.wildcardMatch("*hello")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cut.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cut. isEmpty() )
************************************
[+] input: removeNotif_inOverflow_intercepted() { // Get bubble with notif in shade. mEntryListener.onPendingEntryAdded(mRow.getEntry()); mBubbleController.updateBubble(mRow.getEntry()); assertTrue(mBubbleController.hasBubbles()); assertFalse(mBubbleController.isBubbleNotificationSuppressedFromShade( mRow.getEntry()));  // Dismiss the bubble into overflow. mBubbleController.removeBubble( mRow.getEntry().getKey(), BubbleController.DISMISS_USER_GESTURE); assertFalse(mBubbleController.hasBubbles());  boolean intercepted = mRemoveInterceptor.onNotificationRemoveRequested( mRow.getEntry().getKey(), mRow.getEntry(), REASON_CANCEL);  // Notif is no longer a bubble, but still in overflow, so we intercept removal. "<AssertPlaceHolder>"; }
[*] target: assertTrue(intercepted)
[-] pred: org. junit. Assert. assertTrue ( intercepted )
************************************
[+] input: addService() {  testRegistry.addService(new TestPlugin(), serviceProperties);  Mockito.verify(registrationService).notifyOfPluginRegistration(ArgumentMatchers.any(PluginMetadata.class)); PluginMetadata pluginMetadata = pluginMetadataCaptor.getValue(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(TEST_ID, pluginMetadata.getPluginName()); Assert.assertEquals(TaskType.DETECTOR, pluginMetadata.getPluginType()); // assertEquals(1, pluginMetadata.getFieldConfigs().size()); }
[*] target: assertNotNull(pluginMetadata)
[-] pred: org. junit. Assert. assertNotNull ( pluginMetadata )
************************************
[+] input: sharedInfo_withDebugModeEnabledInTwoWays() { SharedInfo.Builder sharedInfoBuilder1 = SharedInfo.builder() .setVersion(VERSION_0_1) .setApi(ATTRIBUTION_REPORTING_API) .setScheduledReportTime(FIXED_TIME) .setReportingOrigin(REPORTING_ORIGIN) .setDestination(DESTINATION) .setSourceRegistrationTime(FIXED_TIME) .setReportId(RANDOM_UUID) .setReportDebugModeString("enabled"); SharedInfo si1 = sharedInfoBuilder1.build();  SharedInfo.Builder sharedInfoBuilder2 = SharedInfo.builder() .setVersion(VERSION_0_1) .setApi(ATTRIBUTION_REPORTING_API) .setScheduledReportTime(FIXED_TIME) .setReportingOrigin(REPORTING_ORIGIN) .setDestination(DESTINATION) .setSourceRegistrationTime(FIXED_TIME) .setReportId(RANDOM_UUID) .setReportDebugMode(true); SharedInfo si2 = sharedInfoBuilder2.build();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(si1, si2)
[-] pred: org. junit. Assert. assertEquals ( si1, si2 )
************************************
[+] input: ClassNotFoundException { Properties.DSE_SOLVER = Properties.SolverType.SMARTUT_SOLVER; Properties.CRITERION = new Properties.Criterion[] { Criterion.BRANCH }; Properties.TARGET_CLASS = Foo.class.getName();  TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  BranchCoverageSuiteFitness branchCoverageSuiteFitness = new BranchCoverageSuiteFitness(); TestSuiteChromosome suite = new TestSuiteChromosome(); suite.addFitness(branchCoverageSuiteFitness); branchCoverageSuiteFitness.getFitness(suite);  // no goals covered yet int coveredGoals0 = suite.getNumOfCoveredGoals(); int notCoveredGoals0 = suite.getNumOfNotCoveredGoals(); assertEquals(0, coveredGoals0); assertNotEquals(0, notCoveredGoals0);  DefaultTestCase testCase0 = buildTestCase0(); TestChromosome testChromosome0 = new TestChromosome(); testChromosome0.setTestCase(testCase0); suite.addTest(testChromosome0);  double fitnessBeforeLocalSearch = branchCoverageSuiteFitness.getFitness(suite); int coveredGoalsBeforeLocalSearch = suite.getNumOfCoveredGoals();  // some goal was covered assertTrue(coveredGoalsBeforeLocalSearch > 0);  DefaultTestCase duplicatedTestCase0 = buildTestCase0(); TestChromosome duplicatedTestChromosome0 = new TestChromosome(); duplicatedTestChromosome0.setTestCase(duplicatedTestCase0); suite.addTest(duplicatedTestChromosome0);  TestSuiteLocalSearchObjective localSearchObjective = TestSuiteLocalSearchObjective .buildNewTestSuiteLocalSearchObjective(Collections.singletonList(branchCoverageSuiteFitness), suite, 1);  DSETestCaseLocalSearch localSearch = new DSETestCaseLocalSearch(); boolean improved = localSearch.doSearch(duplicatedTestChromosome0, localSearchObjective); "<AssertPlaceHolder>";  double fitnessAfterLocalSearch = branchCoverageSuiteFitness.getFitness(suite); int coveredGoalsAfterLocalSearch = suite.getNumOfCoveredGoals();  assertTrue(fitnessAfterLocalSearch < fitnessBeforeLocalSearch); assertTrue(coveredGoalsAfterLocalSearch > coveredGoalsBeforeLocalSearch);  }
[*] target: assertTrue(improved)
[-] pred: org. junit. Assert. assertTrue ( improved )
************************************
[+] input: oneByte() { for (int i = 0; i <= 255; i++) { String expected = String.format("%02x", i);  StringBuilder sb = new StringBuilder(); Hex.toHex(ByteString.copyFrom(new byte[] { (byte) i }), sb); Assert."<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, sb.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, sb. toString ( ) )
************************************
[+] input: URISyntaxException { File jarFile = createJar(); JdkCheckCompatibleRequest request = new JdkCheckCompatibleRequest(); request.setFromVersion(8); request.setToVersion(11); request.setReportLocale(Locale.CHINA); request.setExternalToolHome(System.getProperty("user.home") + "/emt4j-external"); List<ToCheckTarget> toCheckTargetList = new ArrayList<>(); ToCheckTarget toCheckTarget = new ToCheckTarget(); toCheckTarget.setTargetType(CheckTargetTypeEnum.JAR); toCheckTarget.setTargetIdentifier(jarFile.getCanonicalPath()); toCheckTargetList.add(toCheckTarget); request.setToCheckTargetList(toCheckTargetList);  JdkCheckCompatibleResult result = JdkCompatibleCheckFacade.check(request); "<AssertPlaceHolder>"; assertFalse(result.getResultDetailList().isEmpty());  jarFile.delete(); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testValueAsStringWithString() { final String string = "some-string"; final String valueAsString = FieldValueHelper.getValueAsString(string); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(string, valueAsString)
[-] pred: org. junit. Assert. assertEquals ( string, valueAsString )
************************************
[+] input: test() { RedisConfiguration redisConfiguration = new RedisConfiguration(); redisConfiguration.setHost("127.0.0.1:6379,127.0.0.1:6380"); redisConfiguration.setConnectionTimeout(2000); redisConfiguration.setSoTimeout(1000); redisConfiguration.setPassword("password"); redisConfiguration.setPoolConfig(new GenericObjectPoolConfig<>()); ClusteredRedis clusteredRedis = new ClusteredRedis(); clusteredRedis.init(redisConfiguration); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(clusteredRedis.getJedisCluster())
[-] pred: org. junit. Assert. assertNotNull ( clusteredRedis. getJedisCluster() )
************************************
[+] input: Exception { DomainFolder aFolder = fileMgr.getFolder("/a"); "<AssertPlaceHolder>"; aFolder.getFolders(); // visit folder to receive change events for it  sharedFS.renameFolder("/a", "y", "bigY"); flushFileSystemEvents(); // wait for FileSystemListener callback to update folder  assertEventsSize(2); checkEvent(events.get(0), "Folder Removed", "/a", null, null, null, "y"); checkEvent(events.get(1), "Folder Added", null, "/a/bigY", null, null, null);  }
[*] target: assertNotNull(aFolder)
[-] pred: org. junit. Assert. assertNotNull ( aFolder )
************************************
[+] input: Exception { Assume.assumeTrue(!TinkFips.useOnlyFips() || TinkFipsUtil.fipsModuleAvailable());  JsonObject json = WycheproofTestUtil.readJson("../wycheproof/testvectors/aes_gcm_test.json"); int errors = 0; int cntSkippedTests = 0; JsonArray testGroups = json.get("testGroups").getAsJsonArray(); for (int i = 0; i < testGroups.size(); i++) { JsonObject group = testGroups.get(i).getAsJsonObject(); int keySize = group.get("keySize").getAsInt(); JsonArray tests = group.get("tests").getAsJsonArray(); if (!Arrays.asList(keySizeInBytes).contains(keySize / 8)) { cntSkippedTests += tests.size(); continue; } for (int j = 0; j < tests.size(); j++) { JsonObject testcase = tests.get(j).getAsJsonObject(); String tcId = String.format("testcase %d (%s)", testcase.get("tcId").getAsInt(), testcase.get("comment").getAsString()); byte[] iv = Hex.decode(testcase.get("iv").getAsString()); byte[] key = Hex.decode(testcase.get("key").getAsString()); byte[] msg = Hex.decode(testcase.get("msg").getAsString()); byte[] aad = Hex.decode(testcase.get("aad").getAsString()); @Nullable Integer apiLevel = Util.getAndroidApiLevel(); if (apiLevel != null && apiLevel <= 19 && aad.length != 0) { cntSkippedTests++; continue; } byte[] ct = Hex.decode(testcase.get("ct").getAsString()); byte[] tag = Hex.decode(testcase.get("tag").getAsString()); byte[] ciphertext = Bytes.concat(iv, ct, tag); // Result is one of "valid", "invalid", "acceptable". // "valid" are test vectors with matching plaintext, ciphertext and tag. // "invalid" are test vectors with invalid parameters or invalid ciphertext and tag. // "acceptable" are test vectors with weak parameters or legacy formats. String result = testcase.get("result").getAsString(); // Tink only supports 12-byte iv. if (iv.length != 12) { result = "invalid"; }  try { AesGcmJce gcm = new AesGcmJce(key); byte[] decrypted = gcm.decrypt(ciphertext, aad); boolean eq = TestUtil.arrayEquals(decrypted, msg); if (result.equals("invalid")) { System.out.printf( "FAIL %s: accepting invalid ciphertext, cleartext: %s, decrypted: %s%n", tcId, Hex.encode(msg), Hex.encode(decrypted)); errors++; } else { if (!eq) { System.out.printf( "FAIL %s: incorrect decryption, result: %s, expected: %s%n", tcId, Hex.encode(decrypted), Hex.encode(msg)); errors++; } } } catch (GeneralSecurityException ex) { if (result.equals("valid")) { System.out.printf("FAIL %s: cannot decrypt, exception %s%n", tcId, ex); errors++; } } } } System.out.printf("Number of tests skipped: %d", cntSkippedTests); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors)
[-] pred: org. junit. Assert. assertEquals ( 0, errors )
************************************
[+] input: testRingTopology_rightNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.ringTopology(population, 2);  TestSuiteChromosome exepcted_individual = population.get(3); TestSuiteChromosome returned_individual = neighbors.get(2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: Exception { Enum enumm = new EnumDataType("Color", 1); enumm.add("Red", 10); enumm.add("Green", 15); enumm.add("Blue", 20);  Enum enummDT = (Enum) dataMgr.resolve(enumm, null); "<AssertPlaceHolder>";  long id = dataMgr.getResolvedID(enummDT);  assertEquals(enummDT, dataMgr.getDataType(id)); }
[*] target: assertNotNull(enummDT)
[-] pred: org. junit. Assert. assertNotNull ( enummDT )
************************************
[+] input: Exception { addBlock("block2", 0x2000, 100);  ProgramModule root = treeManager.createRootModule("MyRoot"); "<AssertPlaceHolder>";  Group[] children = root.getChildren(); assertEquals(2, children.length); assertTrue(children[1] instanceof ProgramFragment); ProgramFragment frag = (ProgramFragment) children[1]; assertEquals(2, frag.getNumAddressRanges()); Iterator<AddressRange> it = frag.iterator(); assertEquals(new AddressRangeImpl(getAddr(0x1000), getAddr(0x1063)), it.next()); assertEquals(new AddressRangeImpl(getAddr(0x2000), getAddr(0x2063)), it.next()); }
[*] target: assertNotNull(root)
[-] pred: org. junit. Assert. assertNotNull ( root )
************************************
[+] input: Exception { Structure s = new StructureDataType("foo", 1); assertFalse(s.isNotYetDefined()); assertFalse(s.isZeroLength()); assertEquals(1, s.getNumComponents()); assertEquals(0, s.getNumDefinedComponents()); Structure s2 = (Structure) dataMgr.resolve(s, null); assertFalse(s2.isNotYetDefined()); assertFalse(s2.isZeroLength()); assertEquals(1, s2.getNumComponents()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, s2.getNumDefinedComponents())
[-] pred: org. junit. Assert. assertEquals ( 0, s2. getNumDefinedComponents ( ) )
************************************
[+] input: test_getGraynessValue() { // given int red = 67, green = 255, blue = 184;  // when MaxGrayingStrategy strategy = new MaxGrayingStrategy(); int graynessValue = strategy.getGraynessValue(red, green, blue);  // then Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(255, graynessValue)
[-] pred: org. junit. Assert. assertEquals ( 255, graynessValue )
************************************
[+] input: testDeleteDashboard() { Dashboard dashboard = new Dashboard(); dashboard.setTenantId(tenantId); dashboard.setTitle("My dashboard"); Dashboard savedDashboard = dashboardService.saveDashboard(dashboard); Dashboard foundDashboard = dashboardService.findDashboardById(tenantId, savedDashboard.getId()); Assert.assertNotNull(foundDashboard); dashboardService.deleteDashboard(tenantId, savedDashboard.getId()); foundDashboard = dashboardService.findDashboardById(tenantId, savedDashboard.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(foundDashboard)
[-] pred: org. junit. Assert. assertNull ( foundDashboard )
************************************
[+] input: Exception { Namespace scope = st.createExternalLibrary("TestScope", SourceType.USER_DEFINED); "<AssertPlaceHolder>"; assertEquals("TestScope", scope.getName()); assertTrue(scope.getBody().isEmpty()); assertTrue(scope instanceof Library); assertEquals(globalScope, scope.getParentNamespace());  Symbol symbol = scope.getSymbol(); assertEquals(scope.getName(), symbol.getName()); assertEquals(globalScope, symbol.getParentNamespace()); }
[*] target: assertNotNull(scope)
[-] pred: org. junit. Assert. assertNotNull ( scope )
************************************
[+] input: Exception { List<Long> tablets1 = new ArrayList<>(); tablets1.add(1L); tablets1.add(2L); List<Long> tablets2 = new ArrayList<>(); tablets2.add(3L); tablets2.add(4L); Map<String, List<Long>> beToTablets = new HashMap<>(); beToTablets.put("be1", tablets1); beToTablets.put("be2", tablets2);  String opaquedQueryPlan = "query_plan"; String cluster = "c"; String database = "d"; String table = "t";  Set<Long> be1Tablet = new HashSet<>(); be1Tablet.add(1L); be1Tablet.add(2L); PartitionDefinition pd1 = new PartitionDefinition(database, table, "be1", be1Tablet, opaquedQueryPlan);  Set<Long> be2Tablet = new HashSet<>(); be2Tablet.add(3L); be2Tablet.add(4L); PartitionDefinition pd2 = new PartitionDefinition(database, table, "be2", be2Tablet, opaquedQueryPlan);  List<PartitionDefinition> expected = new ArrayList<>(); expected.add(pd1); expected.add(pd2); Collections.sort(expected); DorisOptions options = DorisOptions.builder().setFenodes("127.0.0.1:8030").build(); DorisReadOptions readOptions = DorisReadOptions.builder().setRequestTabletSize(2).build(); List<PartitionDefinition> actual = RestService.tabletsMapToPartition( options, readOptions, beToTablets, opaquedQueryPlan, database, table, logger); Collections.sort(actual);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { createLabel(addr(100), "A"); createLabel(addr(100), "fred"); createLabel(addr(100), "joe"); Namespace scope = st.createNameSpace(null, "MyNamespace", SourceType.USER_DEFINED); createLabel(addr(200), "fred", scope);  Symbol s = st.getSymbol("fred", addr(200), scope); "<AssertPlaceHolder>"; assertEquals("fred", s.getName()); assertTrue(!s.isGlobal()); assertTrue(s.getSource() == SourceType.USER_DEFINED); assertTrue(s.isPrimary()); }
[*] target: assertNotNull(s)
[-] pred: org. junit. Assert. assertNotNull ( s )
************************************
[+] input: Exception { defaultServerProvider.initialize(null);  assertNull(defaultServerProvider.getDataCenter()); assertFalse(defaultServerProvider.isEnvTypeSet()); "<AssertPlaceHolder>"; }
[*] target: assertNull(defaultServerProvider.getEnvType())
[-] pred: org. junit. Assert. assertNull ( defaultServerProvider. getEnvType() )
************************************
[+] input: Exception {  ClassLoader loader = new SmartUtClassLoader(); RuntimeSettings.resetStaticState = true; ClassResetter.getInstance().setClassLoader(loader);  String cut = "com.examples.with.different.packagename.classhandling.FooEnum";  Class<?> klass = loader.loadClass(cut); Method m = klass.getDeclaredMethod("check");  boolean val = false;  val = (Boolean) m.invoke(null); Assert.assertTrue(val);  ClassResetter.getInstance().reset(cut);  //make sure that the reset does not create new enum instance values val = (Boolean) m.invoke(null); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(val)
[-] pred: org. junit. Assert. assertTrue ( val )
************************************
[+] input: testWestWestNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.CompactThirteen(population, 5);  TestSuiteChromosome exepcted_individual = population.get(7); TestSuiteChromosome returned_individual = neighbors.get(11);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testSetSelector() { LabelSelector labelSelector = new LabelSelector(); serviceMetadata.setSelector(labelSelector);  Selector selector = serviceMetadata.getSelector(); Assert."<AssertPlaceHolder>"; boolean result = selector instanceof LabelSelector; Assert.assertTrue(result); }
[*] target: assertNotNull(selector)
[-] pred: org. junit. Assert. assertNotNull ( selector )
************************************
[+] input: testNonNumericValue_DoesNotMatchNumericPattern() { ByteMachine cut = new ByteMachine(); String val = "0A,"; cut.addPattern(Range.greaterThanOrEqualTo("-1e9"));  Set<NameStateWithPattern> matches = cut.transitionOn(val); "<AssertPlaceHolder>"; }
[*] target: assertTrue(matches.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( matches. isEmpty() )
************************************
[+] input: Exception { mgr = new RepositoryManager(root, false, 0, false);  Repository rep = mgr.createRepository("User_0", "REPOSITORY_A"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(rep)
[-] pred: org. junit. Assert. assertNotNull ( rep )
************************************
[+] input: testEncryptHandler() { Pair<String, String> pair = EncryptionHandler.encryptHandler("test-dataId", "content"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(pair)
[-] pred: org. junit. Assert. assertNotNull ( pair )
************************************
[+] input: test_noScreenStateSetAfterFinish() { mHandlerFake.setMode(QUEUEING);  mScreen.transitionTo(UNINITIALIZED, INITIALIZED); mScreen.transitionTo(INITIALIZED, DOZE_AOD); mScreen.transitionTo(DOZE_AOD, FINISH);  mServiceFake.screenStateSet = false;  mHandlerFake.dispatchQueuedMessages();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(mServiceFake.screenStateSet)
[-] pred: org. junit. Assert. assertFalse ( mServiceFake.screenStateSet )
************************************
[+] input: testSaveAdminSettings() { AdminSettings adminSettings = adminSettingsService.findAdminSettingsByKey(SYSTEM_TENANT_ID, "general"); JsonNode json = adminSettings.getJsonValue(); ((ObjectNode) json).put("baseUrl", "http://myhost.org"); adminSettings.setJsonValue(json); adminSettingsService.saveAdminSettings(SYSTEM_TENANT_ID, adminSettings); AdminSettings savedAdminSettings = adminSettingsService.findAdminSettingsByKey(SYSTEM_TENANT_ID, "general"); Assert."<AssertPlaceHolder>"; Assert.assertEquals(adminSettings.getJsonValue(), savedAdminSettings.getJsonValue()); }
[*] target: assertNotNull(savedAdminSettings)
[-] pred: org. junit. Assert. assertNotNull ( savedAdminSettings )
************************************
[+] input: Exception {  Program testProgram = buildProgram("notepad.exe", false);  Listing listing = testProgram.getListing(); AddressSpace space = testProgram.getLanguage().getAddressFactory().getDefaultAddressSpace();  // These are the strings that we expect to find, with their corresponding offsets String[] strings = new String[] { "Notepad", "Now Printing", "Paper", "NpSaveDialog", "Preview" }; int[] offsets = new int[] { 0x1008018, 0x100d612, 0x100d72e, 0x10013b0, 0x100daaa };  HashMap<Address, String> addressToValueMap = new HashMap<>();  // Translate offsets to addresses for (int i = 0; i < offsets.length; i++) { addressToValueMap.put(addr(space, offsets[i]), strings[i]); }  Data data;  // Verify these strings aren't already there for (Address strAddr : addressToValueMap.keySet()) { data = listing.getDefinedDataAt(strAddr); assertNull(data); }  AutoAnalysisManager manager = AutoAnalysisManager.getAnalysisManager(testProgram);  StringsAnalyzer analyzer = new StringsAnalyzer(); analyzer.setStringEndAlignment(1); analyzer.added(testProgram, null, monitor, manager.getMessageLog());  String type, actualValue, toMatch;  // Verify that each expected string is there for (Address strAddr : addressToValueMap.keySet()) { toMatch = "u"" + addressToValueMap.get(strAddr) + """;  data = listing.getDefinedDataAt(strAddr); "<AssertPlaceHolder>";  type = data.getDataType().getName().toLowerCase(); assertTrue("Data at address " + strAddr + " should be a type of string!", (type.contains("unicode") || type.contains("string")));  actualValue = data.getDefaultValueRepresentation(); assertEquals(toMatch, actualValue); } }
[*] target: assertNotNull(data)
[-] pred: org. junit. Assert. assertNotNull ( data )
************************************
[+] input: Exception { int someConnectTimeout = 1; System.setProperty("apollo.connectTimeout", String.valueOf(someConnectTimeout));  ConfigUtil configUtil = new ConfigUtil();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(someConnectTimeout, configUtil.getConnectTimeout())
[-] pred: org. junit. Assert. assertEquals ( someConnectTimeout, configUtil. getConnectTimeout() )
************************************
[+] input: InvalidProtocolBufferException { Message message = new Message(); message.setMsgId(msgId); message.setFirstTopic(firstTopic); message.setOriginTopic(originTopic); message.setOffset(offset); message.setNextOffset(nextOffset); message.setRetry(retry); message.setPayload(payload); message.setBornTimestamp(bornTimestamp); message.setStoreTimestamp(storeTimestamp); message.putUserProperty(Message.extPropertyQoS, String.valueOf(extPropertyQoS));  Message copyMsg = message.copy();  Assert.assertEquals(msgId, copyMsg.getMsgId()); Assert.assertEquals(firstTopic, copyMsg.getFirstTopic()); Assert.assertEquals(originTopic, copyMsg.getOriginTopic()); Assert.assertEquals(offset, copyMsg.getOffset()); Assert.assertEquals(nextOffset, copyMsg.getNextOffset()); Assert.assertEquals(retry, copyMsg.getRetry()); Assert.assertEquals(payload, copyMsg.getPayload()); Assert.assertEquals(bornTimestamp, copyMsg.getBornTimestamp()); Assert.assertEquals(storeTimestamp, copyMsg.getStoreTimestamp()); Assert.assertEquals(String.valueOf(extPropertyQoS), copyMsg.getUserProperty(Message.extPropertyQoS)); Assert.assertNull(copyMsg.getUserProperty(Message.propertyMsgId)); copyMsg.clearUserProperty(Message.extPropertyQoS); Assert.assertNull(copyMsg.getUserProperty(Message.extPropertyQoS));   StoreMessage storeMessage = StoreMessage.newBuilder() .setMsgId(message.getMsgId()) .setFirstTopic(message.getFirstTopic()) .setOriginTopic(message.getOriginTopic()) .setOffset(message.getOffset()) .setNextOffset(message.getNextOffset()) .setRetry(message.getRetry()) .setRetained(message.isRetained()) .setIsEmpty(message.isEmpty()) .setPayload(ByteString.copyFrom(message.getPayload())) .setBornTimestamp(message.getBornTimestamp()) .setStoreTimestamp(message.getStoreTimestamp()) .setAck(message.getAck()) .putAllUserProperties(message.getUserProperties()) .build();  byte[] bytes = storeMessage.toByteString().toByteArray();  StoreMessage tmpStoreMessage = StoreMessage.parseFrom(bytes);  Assert."<AssertPlaceHolder>";   }
[*] target: assertEquals(storeMessage, tmpStoreMessage)
[-] pred: org. junit. Assert. assertEquals ( storeMessage, tmpStoreMessage )
************************************
[+] input: testExtractCommentValueEmpty() { List<String> columnSpecs = Arrays.asList("default", null, "comment"); String actualComment = schemaManager.extractComment(columnSpecs); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(actualComment)
[-] pred: org. junit. Assert. assertNull ( actualComment )
************************************
[+] input: testHandlerMerge_Exception_Catchall() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(5, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(0, 15, new ImmutableExceptionHandler(null, 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 5, ImmutableList.of( new ImmutableExceptionHandler(null, 6))), new ImmutableTryBlock(5, 5, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5), new ImmutableExceptionHandler(null, 6))), new ImmutableTryBlock(10, 5, ImmutableList.of( new ImmutableExceptionHandler(null, 6))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testOverlap_Beginning_After() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(0, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(0, 15, new ImmutableExceptionHandler("LException2;", 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 10, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5), new ImmutableExceptionHandler("LException2;", 6))), new ImmutableTryBlock(10, 5, ImmutableList.of( new ImmutableExceptionHandler("LException2;", 6))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testGetValidNames() { final String contactName1 = "firstname last-name"; final String contactName2 = "larry"; mMatrixCursor.addRow(new Object[] { 1, contactName1, 0, 0, 0 }); mMatrixCursor.addRow(new Object[] { 2, null /* null name */, 0, 0, 0 }); mMatrixCursor.addRow(new Object[] { 3, contactName2, 0, 0, 0 }); mMatrixCursor.addRow(new Object[] { 4, "floopy@example.com" /* invalid name */, 0, 0, 0 }); mMatrixCursor.addRow(new Object[] { 5, "news-group" /* invalid name */, 0, 0, 0 }); mFakeContactsContentProvider.addQueryResult(Contacts.CONTENT_URI, mMatrixCursor);  final ArrayList<String> validNames = mManager.getValidNames(Contacts.CONTENT_URI); "<AssertPlaceHolder>"; assertEquals(contactName1, validNames.get(0)); assertEquals(contactName2, validNames.get(1)); }
[*] target: assertEquals(2, validNames.size())
[-] pred: org. junit. Assert. assertEquals ( 2, validNames. size ( ) )
************************************
[+] input: isAvailable_NOTIFICATION_BUBBLESisOn_neverSentMsg_shouldReturnFalse() { Settings.Global.putInt(mContext.getContentResolver(), NOTIFICATION_BUBBLES, SYSTEM_WIDE_ON); mController.onResume(mAppRow, null, null, null, null, null); when(mBackend.hasSentValidMsg(anyString(), anyInt())).thenReturn(false);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(mController.isAvailable())
[-] pred: org. junit. Assert. assertFalse ( mController. isAvailable() )
************************************
[+] input: testResetStreamId() { broadcast.setStreamId("testStreamId"); assertEquals("testStreamId", broadcast.getStreamId());  broadcast.resetStreamId(); "<AssertPlaceHolder>"; }
[*] target: assertNull(broadcast.getStreamId())
[-] pred: org. junit. Assert. assertNull ( broadcast. getStreamId() )
************************************
[+] input: Exception { IntelHexRecord rawRecord = new IntelHexRecord(3, 0x0030, 0, new byte[] { 0x02, 0x33, 0x7a }, 0x1e); IntelHexRecord readRecord = IntelHexRecordReader.readRecord(":0300300002337A1E"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(rawRecord, readRecord)
[-] pred: org. junit. Assert. assertEquals ( rawRecord, readRecord )
************************************
[+] input: Exception { IPackageFragment pack = fSourceFolder.createPackageFragment("test", false, null); String klazz = "package test;\n" + "import test.foo.TestMessages;\n" + TEST_KLAZZ; ICompilationUnit cu= pack.createCompilationUnit("Test.java", klazz, false, null);  IPackageFragment fooPackage = fSourceFolder.createPackageFragment("test.foo", false, null); klazz = "package test.foo;\n" + ACCESSOR_KLAZZ; fooPackage.createCompilationUnit("TestMessages.java", klazz, false, null);  NLSHint hint = createNLSHint(cu); "<AssertPlaceHolder>"; }
[*] target: assertEquals(fooPackage, hint.getAccessorClassPackage())
[-] pred: org. junit. Assert. assertEquals ( fooPackage, hint. getAccessorClassPackage ( ) )
************************************
[+] input: StorageException { ISecurePreferences preferences = newPreferences(getStorageLocation(), getOptions()); fill(preferences);  // check names for the root node assertNull(preferences.name()); assertEquals("/", preferences.absolutePath());  String[] childrenNames = preferences.node("test").childrenNames(); assertNotNull(childrenNames);  boolean order1 = "abc".equals(childrenNames[0]) && "cvs".equals(childrenNames[1]); boolean order2 = "abc".equals(childrenNames[1]) && "cvs".equals(childrenNames[0]); assertTrue(order1 || order2); assertEquals(childrenNames.length, 2);  // check names for the root node + 1 ISecurePreferences node1 = preferences.node("test/cvs"); assertEquals("cvs", node1.name()); assertEquals("/test/cvs", node1.absolutePath());  String[] childrenNames1 = node1.childrenNames(); assertNotNull(childrenNames1); assertEquals(childrenNames1.length, 1); assertEquals("eclipse.org", childrenNames1[0]);  // check names for the root node + 2 ISecurePreferences node2 = node1.node("eclipse.org"); assertEquals("eclipse.org", node2.name()); assertEquals("/test/cvs/eclipse.org", node2.absolutePath());  String[] childrenNames2 = node2.childrenNames(); assertNotNull(childrenNames2); assertEquals(childrenNames2.length, 1); assertEquals("account1", childrenNames2[0]);  // check names for the leaf node ISecurePreferences node3 = node2.node("account1"); assertEquals("account1", node3.name()); assertEquals("/test/cvs/eclipse.org/account1", node3.absolutePath());  String[] childrenNames3 = node3.childrenNames(); "<AssertPlaceHolder>"; assertEquals(childrenNames3.length, 0); }
[*] target: assertNotNull(childrenNames3)
[-] pred: org. junit. Assert. assertNotNull ( childrenNames3 )
************************************
[+] input: Exception {  Program testProgram = buildProgram("stringOverUndefinedTest", false);  Listing listing = testProgram.getListing(); AddressSpace space = testProgram.getLanguage().getAddressFactory().getDefaultAddressSpace(); Address addr = addr(space, 0x11000);  // Create undefined data type at start and middle of string listing.createData(addr, Undefined.getUndefinedDataType(1)); listing.createData(addr.add(3), Undefined.getUndefinedDataType(1)); Data data = listing.getDefinedDataAt(addr); assertNotNull(data);  // Run StringAnalyzer AutoAnalysisManager manager = AutoAnalysisManager.getAnalysisManager(testProgram); StringsAnalyzer analyzer = new StringsAnalyzer(); analyzer.added(testProgram, null, monitor, manager.getMessageLog());  // Make sure our string got created, despite the undefined being there data = listing.getDefinedDataAt(addr); "<AssertPlaceHolder>"; String type = data.getDataType().getName().toLowerCase(); assertTrue("Data at address " + addr + " should be a type of string instead of " + type, type.contains("string")); }
[*] target: assertNotNull(data)
[-] pred: org. junit. Assert. assertNotNull ( data )
************************************
[+] input: substituteParametersInSqlString_StringListType() {  List<String> ids = List.of("ID_1'", "ID_2", "ID_3", "ID_4");  String sql = "Select * from Table Where id IN (:ids)"; String sqlToUse = "Select * from Table Where id IN ('ID_1''', 'ID_2', 'ID_3', 'ID_4')";  ctx.addStringListParameter("ids", ids);  String sqlToUseResult = queryLog.substituteParametersInSqlString(sql, ctx); "<AssertPlaceHolder>"; }
[*] target: assertEquals(sqlToUse, sqlToUseResult)
[-] pred: org. junit. Assert. assertEquals ( sqlToUse, sqlToUseResult )
************************************
[+] input: Exception { Assume.assumeFalse(TinkFips.useOnlyFips());  JsonObject json = WycheproofTestUtil.readJson("../wycheproof/testvectors/aes_eax_test.json"); int errors = 0; int cntSkippedTests = 0; JsonArray testGroups = json.getAsJsonArray("testGroups"); for (int i = 0; i < testGroups.size(); i++) { JsonObject group = testGroups.get(i).getAsJsonObject(); int keySize = group.get("keySize").getAsInt(); int ivSize = group.get("ivSize").getAsInt(); JsonArray tests = group.getAsJsonArray("tests"); if (!Arrays.asList(keySizeInBytes).contains(keySize / 8) || !Arrays.asList(ivSizeInBytes).contains(ivSize / 8)) { cntSkippedTests += tests.size(); continue; } for (int j = 0; j < tests.size(); j++) { JsonObject testcase = tests.get(j).getAsJsonObject(); String tcId = String.format( "testcase %d (%s)", testcase.get("tcId").getAsInt(), testcase.get("comment").getAsString()); byte[] iv = Hex.decode(testcase.get("iv").getAsString()); byte[] key = Hex.decode(testcase.get("key").getAsString()); byte[] msg = Hex.decode(testcase.get("msg").getAsString()); byte[] aad = Hex.decode(testcase.get("aad").getAsString()); byte[] ct = Hex.decode(testcase.get("ct").getAsString()); byte[] tag = Hex.decode(testcase.get("tag").getAsString()); byte[] ciphertext = Bytes.concat(iv, ct, tag); String result = testcase.get("result").getAsString(); try { AesEaxJce eax = new AesEaxJce(key, iv.length); byte[] decrypted = eax.decrypt(ciphertext, aad); boolean eq = TestUtil.arrayEquals(decrypted, msg); if (result.equals("invalid")) { System.out.printf( "FAIL %s: accepting invalid ciphertext, cleartext: %s, decrypted: %s%n", tcId, Hex.encode(msg), Hex.encode(decrypted)); errors++; } else { if (!eq) { System.out.printf( "FAIL %s: incorrect decryption, result: %s, expected: %s%n", tcId, Hex.encode(decrypted), Hex.encode(msg)); errors++; } } } catch (GeneralSecurityException ex) { if (result.equals("valid")) { System.out.printf("FAIL %s: cannot decrypt, exception %s%n", tcId, ex); errors++; } } } } System.out.printf("Number of tests skipped: %d", cntSkippedTests); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors)
[-] pred: org. junit. Assert. assertEquals ( 0, errors )
************************************
[+] input: Exception { ProgramBuilder builder = build64BitX86NonVS(); ProgramDB program = builder.getProgram(); boolean result = PEUtil.isVisualStudioOrClangPe(program); "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: test7() { List<Sequence> sequences = new ArrayList<>(); sequences.add(new Sequence("ABCD", 2)); sequences.add(new Sequence("XBYD", 2)); sequences.add(new Sequence("AUCV", 2)); sequences.add(new Sequence("AAAA", 2)); SequenceDatabase database = new SequenceDatabase(sequences, 4); ClosedSequenceMiner miner = new ClosedSequenceMiner(database, 7); Set<FrequentSequence> closedSeqs = miner.mineClosedSequences(TaskMonitor.DUMMY); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, closedSeqs.size())
[-] pred: org. junit. Assert. assertEquals ( 0, closedSeqs. size ( ) )
************************************
[+] input: Exception { long someCacheSize = 1; System.setProperty("apollo.configCacheSize", String.valueOf(someCacheSize));  ConfigUtil configUtil = new ConfigUtil();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(someCacheSize, configUtil.getMaxConfigCacheSize())
[-] pred: org. junit. Assert. assertEquals ( someCacheSize, configUtil. getMaxConfigCacheSize() )
************************************
[+] input: IOException { String sample = "This is a sample text\nLine 2"; BAOStreamBuilder builder = initProto(true); builder.addString(sample); ByteArrayInputStream istream = builder.getStream(); MockConnection connection = new MockConnection(istream); Proto proto = ProtocolSelector.getProto(connection, null, null); "<AssertPlaceHolder>"; proto.close(); }
[*] target: assertEquals(sample, proto.getText())
[-] pred: org. junit. Assert. assertEquals ( sample, proto. getText ( ) )
************************************
[+] input: testHealthyAndDead() { System.setProperty(DashboardConfig.CONFIG_UNHEALTHY_MACHINE_MILLIS, "60000"); System.setProperty(DashboardConfig.CONFIG_AUTO_REMOVE_MACHINE_MILLIS, "600000"); DashboardConfig.clearCache(); MachineInfo machineInfo = new MachineInfo(); machineInfo.setHeartbeatVersion(1); machineInfo.setLastHeartbeat(System.currentTimeMillis() - 10000); assertTrue(machineInfo.isHealthy()); assertFalse(machineInfo.isDead());  machineInfo.setLastHeartbeat(System.currentTimeMillis() - 100000); assertFalse(machineInfo.isHealthy()); assertFalse(machineInfo.isDead());  machineInfo.setLastHeartbeat(System.currentTimeMillis() - 1000000); assertFalse(machineInfo.isHealthy()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(machineInfo.isDead())
[-] pred: org. junit. Assert. assertTrue ( machineInfo. isDead() )
************************************
[+] input: Exception { Namespace scope = st.createNameSpace(null, "MyNamespace", SourceType.USER_DEFINED); Symbol s = createLabel(addr(0x200), "printf", scope); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(s)
[-] pred: org. junit. Assert. assertNotNull ( s )
************************************
[+] input: Exception { boolean value = ApplicationSettings.getInstance(mApplicationContext).getBoolean("Boolean", false); Assert.assertTrue(!value); boolean result = ApplicationSettings.getInstance(mApplicationContext).putBoolean("Boolean", true); Assert.assertTrue(result); value = ApplicationSettings.getInstance(mApplicationContext).getBoolean("Boolean", false); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(value)
[-] pred: org. junit. Assert. assertTrue ( value )
************************************
[+] input: NacosException { String dataId = "1"; String group = "2"; String content = "123"; String namespace = ""; String casMd5 = "96147704e3cb8be8597d55d75d244a02"; String type = ConfigType.getDefaultType().getType();  Mockito.when(mockWoker.publishConfig(dataId, group, namespace, null, null, null, content, "", casMd5, type)) .thenReturn(true);  final boolean b = nacosConfigService.publishConfigCas(dataId, group, content, casMd5); Assert."<AssertPlaceHolder>";  Mockito.verify(mockWoker, Mockito.times(1)) .publishConfig(dataId, group, namespace, null, null, null, content, "", casMd5, type); }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: testDisplayString_FunctionLocation() {  Address address = addr("01002cf5");  //@formatter:off String signature = "undefined ghidra(" + "undefined4 param_1, " + "undefined4 param_2, " + "undefined4 param_3, " + "undefined4 param_4, " + "undefined4 param_5)"; //@formatter:on FunctionNameFieldLocation location = new FunctionNameFieldLocation(program, address, 0, signature, "ghidra");  PreviewTableCellData data = new PreviewTableCellData(location, formatter); String preview = data.getDisplayString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(signature, preview)
[-] pred: org. junit. Assert. assertEquals ( signature, preview )
************************************
[+] input: Exception { AddressSet set = new AddressSet(); set.addRange(getAddr(0x100), getAddr(0x200)); set.addRange(getAddr(0x400), getAddr(0x500)); set.addRange(getAddr(0x1000), getAddr(0x1001));  AddressSetPropertyMap pm = program.createAddressSetPropertyMap("MyMap"); pm.add(set);  AddressSet pset = pm.getAddressSet();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(set, pset)
[-] pred: org. junit. Assert. assertEquals ( set, pset )
************************************
[+] input: IOException { // Serialize to stream SealHeader header = new SealHeader(); SealHeader loadedHeader = new SealHeader(); header.comprMode = Serialization.COMPR_MODE_DEFAULT; header.size = 256;  ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); int outSize = Serialization.saveHeader(header, outputStream); outputStream.close(); Assert.assertEquals(Serialization.SEAL_HEADER_SIZE, outSize); ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray()); int inSize = Serialization.loadHeader(inputStream, loadedHeader); inputStream.close(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(Serialization.SEAL_MAGIC, loadedHeader.magic); Assert.assertEquals(Serialization.SEAL_HEADER_SIZE, loadedHeader.headerSize); Assert.assertEquals(Serialization.SEAL_MAJOR_VERSION, loadedHeader.majorVersion); Assert.assertEquals(Serialization.SEAL_MINOR_VERSION, loadedHeader.minorVersion); Assert.assertEquals(Serialization.COMPR_MODE_DEFAULT, loadedHeader.comprMode); Assert.assertEquals(0x00, loadedHeader.reserved); Assert.assertEquals(256, loadedHeader.size); }
[*] target: assertEquals(outSize, inSize)
[-] pred: org. junit. Assert. assertEquals ( outSize, inSize )
************************************
[+] input: Exception { defaultApplicationProvider.initialize();  assertEquals(PREDEFINED_APP_ID, defaultApplicationProvider.getAppId()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(defaultApplicationProvider.isAppIdSet())
[-] pred: org. junit. Assert. assertTrue ( defaultApplicationProvider. isAppIdSet() )
************************************
[+] input: testOverlap_Before_Middle() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(5, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(0, 7, new ImmutableExceptionHandler("LException2;", 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 5, ImmutableList.of( new ImmutableExceptionHandler("LException2;", 6))), new ImmutableTryBlock(5, 2, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5), new ImmutableExceptionHandler("LException2;", 6))), new ImmutableTryBlock(7, 3, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testIsValidColor() { String color = "red";  boolean result = Format.isValidColor(color); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testIsClipped_NoClipping() { field = createField(maxLines, List.of("Hello", "Wolrd")); "<AssertPlaceHolder>"; }
[*] target: assertFalse(field.isClipped())
[-] pred: org. junit. Assert. assertFalse ( field. isClipped() )
************************************
[+] input: testOverlap_Start_Middle() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(0, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(0, 5, new ImmutableExceptionHandler("LException2;", 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 5, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5), new ImmutableExceptionHandler("LException2;", 6))), new ImmutableTryBlock(5, 5, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: shouldFilterMediaNotificationWhenDisabled() { // GIVEN that the media feature is disabled when(mMediaFeatureFlag.getEnabled()).thenReturn(false); NotificationFilter filter = new NotificationFilter(mStatusBarStateController, mMediaFeatureFlag); // WHEN the media filter is asked about a media entry final boolean shouldFilter = filter.shouldFilterOut(mMediaEntry); // THEN it shouldn't be filtered "<AssertPlaceHolder>"; }
[*] target: assertFalse(shouldFilter)
[-] pred: org. junit. Assert. assertFalse ( shouldFilter )
************************************
[+] input: SQLException { pstmt_insert.setTimestamp(1, new Timestamp(System.currentTimeMillis())); pstmt_insert.setShort(6, (short) 2); int ret = pstmt_insert.executeUpdate(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: addPassenger() { // init Passenger expectedPassenger = new Passenger(1, "Passenger1", "Lastname1", "Male", 25, "05554443322", "passenger1@mail.com");  // stub - when when(passengerRepository.save(expectedPassenger)).thenReturn(expectedPassenger);  // then passengerService.addPassenger(expectedPassenger); //        Passenger byId = passengerRepository.getById(1); // //        Assert."<AssertPlaceHolder>";  verify(passengerRepository, times(1)).save(expectedPassenger); }
[*] target: assertEquals(expectedPassenger, byId)
[-] pred: org. junit. Assert. assertEquals ( expectedPassenger, byId )
************************************
[+] input: testAddRegisterReference() { try (UndoableTransaction tid = b.startTransaction()) { b.addRegisterReference(0, b.addr(0x4003), "r5"); } DBTraceReferenceSpace space = manager.getReferenceSpace(b.language.getDefaultDataSpace(), false); "<AssertPlaceHolder>"; assertEquals(1, space.referenceMapSpace.size()); assertEquals(0, space.xrefMapSpace.size()); }
[*] target: assertNotNull(space)
[-] pred: org. junit. Assert. assertNotNull ( space )
************************************
[+] input: Exception { Enum enumm = new EnumDataType("Color", 1); enumm.add("Red", 10); enumm.add("Green", 15); enumm.add("Blue", 20); Category root = dataMgr.getRootCategory(); Category c = root.createCategory("enumms"); enumm.setCategoryPath(c.getCategoryPath());  Enum enummDT = (Enum) dataMgr.resolve(enumm, null); "<AssertPlaceHolder>";  c.remove(enummDT, TaskMonitor.DUMMY); assertNull(c.getDataType("Color"));  assertTrue(enummDT.isDeleted());  }
[*] target: assertNotNull(enummDT)
[-] pred: org. junit. Assert. assertNotNull ( enummDT )
************************************
[+] input: SQLException { pstmt_insert.setTimestamp(1, new Timestamp(System.currentTimeMillis())); pstmt_insert.setFloat(4, 3.14f); int ret = pstmt_insert.executeUpdate(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: getHost_notProvidedInFlag_returnNull() { ConnectorArguments arguments = arguments("--connector", "oracle");  "<AssertPlaceHolder>"; }
[*] target: assertNull(arguments.getHost())
[-] pred: org. junit. Assert. assertNull ( arguments. getHost() )
************************************
[+] input: hasNoTransitionsShouldReturnTrueWhenThisStateHasNoTransitions() { boolean hasNoTransitions = state.hasNoTransitions(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(hasNoTransitions)
[-] pred: org. junit. Assert. assertTrue ( hasNoTransitions )
************************************
[+] input: testEscapeString1() { String orig = "/"; String escaped = CategoryPath.escapeString(orig); String unescaped = CategoryPath.unescapeString(escaped); "<AssertPlaceHolder>"; assertEquals("\\/", escaped); }
[*] target: assertEquals(orig, unescaped)
[-] pred: org. junit. Assert. assertEquals ( orig, unescaped )
************************************
[+] input: testGetLastCodeSingleColor() { String input = BUKKIT_COLOR_CODE_PREFIX + "cHello"; String expectedResult = BUKKIT_COLOR_CODE_PREFIX + "c";  String result = Format.getLastCode(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: span_combinesDisjointInterval() { // Arrange ZonedInterval earliestInterval = new ZonedInterval(SEVEN_DAYS_AGO, FIVE_DAYS_AGO); ZonedInterval latestInterval = new ZonedInterval(THREE_DAYS_AGO, ONE_DAY_AGO); ZonedInterval expectedInterval = new ZonedInterval(SEVEN_DAYS_AGO, ONE_DAY_AGO);  // Act ZonedInterval resultingInterval = earliestInterval.span(latestInterval);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedInterval, resultingInterval)
[-] pred: org. junit. Assert. assertEquals ( expectedInterval, resultingInterval )
************************************
[+] input: testDeleteBookmark() { DBTraceBookmark bm; try (UndoableTransaction tid = b.startTransaction()) { bm = b.addBookmark(0, 0, "Test Type", "Cat1", "Test comment"); } long id = bm.getId();  try (UndoableTransaction tid = b.startTransaction()) { bm.delete(); } DBTraceBookmark found = manager.getBookmark(id); "<AssertPlaceHolder>"; }
[*] target: assertNull(found)
[-] pred: org. junit. Assert. assertNull ( found )
************************************
[+] input: testWestNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.linearFive(population, 5);  TestSuiteChromosome exepcted_individual = population.get(4); TestSuiteChromosome returned_individual = neighbors.get(3);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testSmallThetaNegativeInput() { IntegralLdpConfig ldpConfig = new LocalMapIntegralLdpConfig .Builder(DEFAULT_BASE_EPSILON, SMALL_THETA, BIASED_LOWER_BOUND, BIASED_UPPER_BOUND) .build(); IntegralLdp mechanism = IntegralLdpFactory.createInstance(ldpConfig); int value = -1; // 输入-1，输出[-1, 0) IntStream.range(0, ROUND).forEach(index -> { int noiseValue = mechanism.randomize(value); Assert."<AssertPlaceHolder>"; }); }
[*] target: assertEquals(value, noiseValue)
[-] pred: org. junit. Assert. assertEquals ( value, noiseValue )
************************************
[+] input: Exception { SubscribeServiceResponse res = new SubscribeServiceResponse(); ServiceInfo info = new ServiceInfo(GROUP_NAME + "@@" + SERVICE_NAME + "@@" + CLUSTERS); res.setServiceInfo(info); when(this.rpcClient.request(any())).thenReturn(res); ServiceInfo actual = client.subscribe(SERVICE_NAME, GROUP_NAME, CLUSTERS); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(info, actual)
[-] pred: org. junit. Assert. assertEquals ( info, actual )
************************************
[+] input: multiValuesNoSeparator() { // given String nativeSql = "INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,?,?)(?,?,?,?)(?,?,?,?)"; Object[] parameters = Stream.of("d1", 1, 100, 3.14, "abc", 4, 200, 3.1415, "xyz", 5, 300, 3.141592, "uvw", 6).toArray();  // when String actual = Utils.getNativeSql(nativeSql, parameters);  // then String expected = "INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (100,3.14,'abc',4)(200,3.1415,'xyz',5)(300,3.141592,'uvw',6)"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testLoadPrivateKeyFromString() { PrivateKey privateKey = PemUtil.loadPrivateKeyFromString(MERCHANT_PRIVATE_KEY_STRING); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(privateKey)
[-] pred: org. junit. Assert. assertNotNull ( privateKey )
************************************
[+] input: test_offer_shouldConstructArray() { MaxHeap<Integer> heap = new MaxHeap<>(); heap.offer(13); heap.offer(9); heap.offer(11); heap.offer(4); heap.offer(7); heap.offer(6); heap.offer(3); heap.offer(2); heap.offer(1);  String expected = "[13, 9, 11, 4, 7, 6, 3, 2, 1]"; Assert.assertEquals(expected, heap.toString());  // insert 10 heap.offer(10); expected = "[13, 10, 11, 4, 9, 6, 3, 2, 1, 7]"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, heap.toString())
[-] pred: org. junit. Assert. assertEquals ( expected, heap. toString ( ) )
************************************
[+] input: testFormatStringLegacyColor_NoColorCode() { String input = "Hello There Austin"; String expectedResult = "Hello There Austin";  String result = Format.FormatStringLegacyColor(input); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: SQLException { pstmt_insert.setTimestamp(1, new Timestamp(System.currentTimeMillis())); pstmt_insert.setByte(7, (byte) 0x001); int ret = pstmt_insert.executeUpdate(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: testUpdateClientsParams() { OAuth2Info oAuth2Info = createDefaultOAuth2Info(); oAuth2Service.saveOAuth2Info(oAuth2Info); OAuth2Info foundOAuth2Info = oAuth2Service.findOAuth2Info(); Assert.assertNotNull(foundOAuth2Info); Assert.assertEquals(oAuth2Info, foundOAuth2Info);  OAuth2Info newOAuth2Info = new OAuth2Info(true, false, Lists.newArrayList( OAuth2ParamsInfo.builder() .domainInfos(Lists.newArrayList( OAuth2DomainInfo.builder().name("another-domain").scheme(SchemeType.HTTPS).build() )) .mobileInfos(Collections.emptyList()) .clientRegistrations(Lists.newArrayList( validRegistrationInfo() )) .build(), OAuth2ParamsInfo.builder() .domainInfos(Lists.newArrayList( OAuth2DomainInfo.builder().name("test-domain").scheme(SchemeType.MIXED).build() )) .mobileInfos(Collections.emptyList()) .clientRegistrations(Lists.newArrayList( validRegistrationInfo() )) .build() )); oAuth2Service.saveOAuth2Info(newOAuth2Info); OAuth2Info foundAfterUpdateOAuth2Info = oAuth2Service.findOAuth2Info(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(newOAuth2Info, foundAfterUpdateOAuth2Info); }
[*] target: assertNotNull(foundAfterUpdateOAuth2Info)
[-] pred: org. junit. Assert. assertNotNull ( foundAfterUpdateOAuth2Info )
************************************
[+] input: testNotedNotRemovedAfterActive() { mController.addCallback(new int[]{AppOpsManager.OP_FINE_LOCATION}, mCallback);  mController.onOpNoted(AppOpsManager.OP_FINE_LOCATION, TEST_UID, TEST_PACKAGE_NAME, AppOpsManager.MODE_ALLOWED);  mController.onOpActiveChanged( AppOpsManager.OP_FINE_LOCATION, TEST_UID, TEST_PACKAGE_NAME, true);  mTestableLooper.processAllMessages(); List<AppOpItem> list = mController.getActiveAppOps(); verify(mCallback).onActiveStateChanged( AppOpsManager.OP_FINE_LOCATION, TEST_UID, TEST_PACKAGE_NAME, true);  // Duplicates are not removed between active and noted assertEquals(2, list.size());  mController.onOpActiveChanged( AppOpsManager.OP_FINE_LOCATION, TEST_UID, TEST_PACKAGE_NAME, false);  mTestableLooper.processAllMessages();  verify(mCallback, never()).onActiveStateChanged( AppOpsManager.OP_FINE_LOCATION, TEST_UID, TEST_PACKAGE_NAME, false); list = mController.getActiveAppOps(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, list.size())
[-] pred: org. junit. Assert. assertEquals ( 1, list. size ( ) )
************************************
[+] input: IOException { // prepare File src = new File(temporaryFolder.newFolder("src"), "test.dat"); src.createNewFile(); File dest = new File(temporaryFolder.newFolder("dest"), "renamed.dat");  // act contributor.copyToFile(src, dest); log.debug("Destination file {}: {}", dest, dest.exists() ? "exists" : "not exists"); log.debug("Source file {}: {}", src, src.exists() ? "exists" : "not exists");  // check "<AssertPlaceHolder>"; assertTrue(src.exists()); }
[*] target: assertTrue(dest.exists())
[-] pred: org. junit. Assert. assertTrue ( dest. exists ( ) )
************************************
[+] input: Exception { JMustacheRenderer jmustacheExt = jmustache(); ContextModel m = new ContextModel("hello"); String expected = """ boo """; /* * JMustache does not support context at the moment. This is just to check the * context gets through the filters. */ jmustacheExt.use(false); Map<String, Object> context = Map.of("message", "boo"); String actual = ContextJStachio.of(JStachio.of()) .execute(m, ContextNode.of(context::get), Output.of(new StringBuilder())).toString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { try (RangeMappedByteProvider rmbp = new RangeMappedByteProvider(patternedBAP(10, 10), null)) { rmbp.addRange(10, 10); rmbp.addRange(21, 5);  assertEquals(15, rmbp.length()); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(2, rmbp.getRangeCount())
[-] pred: org. junit. Assert. assertEquals ( 2, rmbp. getRangeCount ( ) )
************************************
[+] input: testAsList_List_Null() {  List<String> list = null; list = CollectionUtils.asList(list); "<AssertPlaceHolder>"; }
[*] target: assertTrue(list.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( list. isEmpty() )
************************************
[+] input: testSplitWithoutMaxNewlineAtBeginningAndEndOnly() { List<String> lines = HtmlLineSplitter.split("\nabcdefghi\n", 0); "<AssertPlaceHolder>"; assertEquals("", lines.get(0)); assertEquals("abcdefghi", lines.get(1)); assertEquals("", lines.get(2)); }
[*] target: assertEquals(3, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 3, lines. size ( ) )
************************************
[+] input: testExtractDefaultValueA() { String expectDefault = "aaa"; List<String> columnSpecs = Arrays.asList("default", "aaa"); String actualDefault = schemaManager.extractDefaultValue(DorisType.STRING, columnSpecs); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectDefault, actualDefault)
[-] pred: org. junit. Assert. assertEquals ( expectDefault, actualDefault )
************************************
[+] input: SAXException { ConceptDescription object = AASSimple.createConceptDescriptionMaxRotationSpeed(); Set<String> errors = validateAgainstXsdSchema( new XmlSerializer().write(new DefaultEnvironment.Builder().conceptDescriptions(object).build())); "<AssertPlaceHolder>"; }
[*] target: assertTrue(errors.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( errors. isEmpty ( ) )
************************************
[+] input: replaceNothing2() { // given String nativeSql = "insert into test.t1 (ts, temperature, humidity) using test.weather tags('beijing',1) values(now, 12.2, 4)"; Object[] parameters = Stream.of("test", "t1", "test", "weather", "beijing", 1, 12.2, 4).toArray();  // when String actual = Utils.getNativeSql(nativeSql, parameters);  // then Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(nativeSql, actual)
[-] pred: org. junit. Assert. assertEquals ( nativeSql, actual )
************************************
[+] input: Exception {  Memory memory = program.getMemory(); memory.setBytes(addr(0x2000), new byte[] { (byte) 0xd7, (byte) 05 }); Pointer p = new PointerDataType(); listing.createData(addr(0x2000), p, addr(0x2000).getPointerSize()); Data data = listing.getDataAt(addr(0x2000));  "<AssertPlaceHolder>"; Object obj = data.getValue(); assertNotNull(obj); assertTrue(obj instanceof Address); assertEquals(addr(0xd7050000), obj); }
[*] target: assertNotNull(data)
[-] pred: org. junit. Assert. assertNotNull ( data )
************************************
[+] input: testMostNorthWestNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.CompactThirteen(population, 0);  TestSuiteChromosome exepcted_individual = population.get(15); TestSuiteChromosome returned_individual = neighbors.get(4);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: test_getGraynessValue_fixedR() { // given int red = 67, green = 255, blue = 184;  // when FixedGrayingStrategy strategy = new FixedGrayingStrategy(FixedGrayingStrategy.FixedOption.R); int graynessValue = strategy.getGraynessValue(red, green, blue);  // then Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(red, graynessValue)
[-] pred: org. junit. Assert. assertEquals ( red, graynessValue )
************************************
[+] input: Exception {  // // Attempt to resolve a pointer to an existing type when that pointer does not already // exist. //  String typeName = "templated_name<int, void*, custom_type>"; StructureDataType structure = new StructureDataType(typeName, 0); PointerDataType pointer = new PointerDataType(structure); String pointerName = pointer.getName();  tx(program, () -> { programDTM.resolve(structure, null); });  DataTypeParser parser = new DataTypeParser(dtmService, AllowedDataTypes.ALL); DataType dt = parser.parse(pointerName); "<AssertPlaceHolder>"; assertTrue(dt.isEquivalent(pointer)); }
[*] target: assertNotNull(dt)
[-] pred: org. junit. Assert. assertNotNull ( dt )
************************************
[+] input: IOException {  File dir = JUnitAnalyzer.createNewTmpDir(); Assert."<AssertPlaceHolder>"; Assert.assertTrue(dir.exists());  FileUtils.deleteDirectory(dir); Assert.assertFalse(dir.exists()); }
[*] target: assertNotNull(dir)
[-] pred: org. junit. Assert. assertNotNull ( dir )
************************************
[+] input: NacosException { rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING); rpcClient.currentConnection = connection; doThrow(new NacosException()).when(connection).asyncRequest(any(), any()); RequestCallBack<?> requestCallBack = mock(RequestCallBack.class); doReturn(10000L).when(requestCallBack).getTimeout(); Exception exception = null;  try { rpcClient.asyncRequest(null, requestCallBack); } catch (NacosException e) { exception = e; }  verify(connection, atLeastOnce()).asyncRequest(any(), any()); verify(rpcClient).switchServerAsyncOnRequestFail(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get()); }
[*] target: assertNotNull(exception)
[-] pred: org. junit. Assert. assertNotNull ( exception )
************************************
[+] input: isAvailable_appScreen_notIfNoDeletedChannels() { when(mBackend.getDeletedChannelCount(any(), anyInt())).thenReturn(0); mController.onResume(new NotificationBackend.AppRow(), null, null, null, null, null); "<AssertPlaceHolder>"; }
[*] target: assertFalse(mController.isAvailable())
[-] pred: org. junit. Assert. assertFalse ( mController. isAvailable() )
************************************
[+] input: testFindUserById() { User user = userService.findUserByEmail(SYSTEM_TENANT_ID, "sysadmin@thingsboard.org"); Assert.assertNotNull(user); User foundUser = userService.findUserById(SYSTEM_TENANT_ID, user.getId()); Assert."<AssertPlaceHolder>"; Assert.assertEquals(user, foundUser); }
[*] target: assertNotNull(foundUser)
[-] pred: org. junit. Assert. assertNotNull ( foundUser )
************************************
[+] input: DWARFExpressionException {  int count = 200; for (int i = 0; i < count; i++) { evaluator.push(i * 3); } for (int i = 0; i < count; i++) { long expected = (count - i - 1) * 3; evaluator.evaluate(new byte[] { DW_OP_pick, (byte) i }); long result = evaluator.pop(); "<AssertPlaceHolder>"; }  }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: span_combinesSubsetInterval() { // Arrange ZonedInterval earliestInterval = new ZonedInterval(SEVEN_DAYS_AGO, ONE_DAY_AGO); ZonedInterval latestInterval = new ZonedInterval(FIVE_DAYS_AGO, THREE_DAYS_AGO); ZonedInterval expectedInterval = new ZonedInterval(SEVEN_DAYS_AGO, ONE_DAY_AGO);  // Act ZonedInterval resultingInterval = earliestInterval.span(latestInterval);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedInterval, resultingInterval)
[-] pred: org. junit. Assert. assertEquals ( expectedInterval, resultingInterval )
************************************
[+] input: testExtractCommentValueQuotes() { String expectComment = "comment_test"; List<String> columnSpecs = Arrays.asList("Default", ""100"", "comment", ""comment_test""); String actualComment = schemaManager.extractComment(columnSpecs); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectComment, actualComment)
[-] pred: org. junit. Assert. assertEquals ( expectComment, actualComment )
************************************
[+] input: testEmptySet() { AddressSet set = set(); assertNull(set.getMinAddress()); "<AssertPlaceHolder>"; }
[*] target: assertNull(set.getMaxAddress())
[-] pred: org. junit. Assert. assertNull ( set. getMaxAddress() )
************************************
[+] input: Exception { ProgramBuilder builder = build64BitX86Clang(); ProgramDB program = builder.getProgram(); boolean result = PEUtil.isVisualStudioOrClangPe(program); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: cancelTicket() { // init List<Ticket> tickets = new ArrayList<>(); Flight testFlight = new Flight(1, "Flight-XYZ", 50, 300, new Date(), new Date(), tickets, null, null);  Ticket ticket1 = new Ticket(2, null, testFlight); Ticket ticket2 = new Ticket(3, null, testFlight); tickets.add(ticket1); tickets.add(ticket2);  testFlight.getTickets().remove(1); Flight updatedTestFlight = testFlight;   // when - stubbing Mockito.when(ticketService.getTicket(any())).thenReturn(ticket1); Mockito.when(flightService.getFlight(any())).thenReturn(testFlight); Mockito.when(flightService.updateFlight(any())).thenReturn(updatedTestFlight); Mockito.when(ticketService.deleteTicket(any())).thenReturn(true);  // then test boolean actualCancelStatus = airportCompanyService.cancelTicket(2);  // validate Assert."<AssertPlaceHolder>";  }
[*] target: assertTrue(actualCancelStatus)
[-] pred: org. junit. Assert. assertTrue ( actualCancelStatus )
************************************
[+] input: testIsAvailable_notIfNull() { mController.onResume(null, mock(NotificationChannel.class), null, null, null, null); assertFalse(mController.isAvailable());  mController.onResume(mock(NotificationBackend.AppRow.class), null, null, null, null, null); "<AssertPlaceHolder>"; }
[*] target: assertFalse(mController.isAvailable())
[-] pred: org. junit. Assert. assertFalse ( mController. isAvailable() )
************************************
[+] input: SQLException { ParameterMetaData parameterMetaData = pstmt_insert.getParameterMetaData(); Assert."<AssertPlaceHolder>"; //TODO: modify the test case }
[*] target: assertNotNull(parameterMetaData)
[-] pred: org. junit. Assert. assertNotNull ( parameterMetaData )
************************************
[+] input: SQLException { pstmt_insert.setTimestamp(1, new Timestamp(System.currentTimeMillis())); pstmt_insert.setBoolean(8, true); int ret = pstmt_insert.executeUpdate(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: testSingleOuterEmptyInner() { List<Object> result = IteratorUtils.toList( NestedIterator.start(List.of("Test").iterator(), s -> Collections.emptyIterator())); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( result. isEmpty ( ) )
************************************
[+] input: multiValuesMultiSeparator() { // given String nativeSql = "INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,?,?) (?,?,?,?), (?,?,?,?)"; Object[] parameters = Stream.of("d1", 1, 100, 3.14, "abc", 4, 200, 3.1415, "xyz", 5, 300, 3.141592, "uvw", 6).toArray();  // when String actual = Utils.getNativeSql(nativeSql, parameters);  // then String expected = "INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (100,3.14,'abc',4) (200,3.1415,'xyz',5), (300,3.141592,'uvw',6)"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testIsEmpty() { assertTrue(map.isEmpty()); map.addTransition((byte) 'a', trans1); assertFalse(map.isEmpty()); map.removeTransition((byte) 'a', trans1); "<AssertPlaceHolder>"; }
[*] target: assertTrue(map.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( map. isEmpty() )
************************************
[+] input: testAddMemoryReference() { try (UndoableTransaction tid = b.startTransaction()) { b.addMemoryReference(0, b.addr(0x4000), b.addr(0x5000)); } DBTraceReferenceSpace space = manager.getReferenceSpace(b.language.getDefaultDataSpace(), false); "<AssertPlaceHolder>"; assertEquals(1, space.referenceMapSpace.size()); assertEquals(1, space.xrefMapSpace.size()); }
[*] target: assertNotNull(space)
[-] pred: org. junit. Assert. assertNotNull ( space )
************************************
[+] input: testGetInstance() { SpiImplPushExecutorHolder instance = SpiImplPushExecutorHolder.getInstance();  Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(instance)
[-] pred: org. junit. Assert. assertNotNull ( instance )
************************************
[+] input: testCreateApiDestination() { Mockito.when(apiDestinationRepository.getApiDestination(any(), any())).thenReturn(null); ApiDestinationDTO eventApiDestinationDTO = new ApiDestinationDTO(); eventApiDestinationDTO.setName(UUID.randomUUID().toString()); eventApiDestinationDTO.setAccountId(UUID.randomUUID().toString()); HttpApiParameters httpApiParameters = new HttpApiParameters(); httpApiParameters.setMethod("POST"); httpApiParameters.setEndpoint("http://127.0.0.1:8001"); eventApiDestinationDTO.setApiParams(httpApiParameters); final String apiDestination = apiDestinationService.createApiDestination(eventApiDestinationDTO); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(apiDestination)
[-] pred: org. junit. Assert. assertNotNull ( apiDestination )
************************************
[+] input: testGetAllClientsRegisteredService() { Collection<String> allClientsRegisteredService = clientServiceIndexesManager .getAllClientsRegisteredService(service);  Assert."<AssertPlaceHolder>"; Assert.assertEquals(allClientsRegisteredService.size(), 1); }
[*] target: assertNotNull(allClientsRegisteredService)
[-] pred: org. junit. Assert. assertNotNull ( allClientsRegisteredService )
************************************
[+] input: SQLException { pstmt_insert.setTimestamp(1, new Timestamp(System.currentTimeMillis())); pstmt_insert.setLong(3, Long.MAX_VALUE); int ret = pstmt_insert.executeUpdate(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: randomizedTest() { BuggyAList<Integer> ba = new BuggyAList<>(); AListNoResizing<Integer> anr = new AListNoResizing<>();  int N = 5000; for (int i = 0; i < N; i += 1) { int operationNumber = StdRandom.uniform(0, 4); if (operationNumber == 0) { // addLast int randVal = StdRandom.uniform(0, 100); ba.addLast(randVal); anr.addLast(randVal); System.out.println("addLast(" + randVal + ")"); } else if (operationNumber == 1) { // size int size = ba.size(); int size2 = anr.size(); System.out.println("size: " + size + " size2: " + size2); assertEquals(size, size2); } else if (operationNumber == 2) { // getLast if (ba.size() > 0 && anr.size() > 0) { int ret = ba.getLast(); int ret2 = anr.getLast(); System.out.println("getLast(" + ret + ")" + " getLast(" + ret2 + ")"); assertEquals(ret, ret2); } } else if (operationNumber == 3) { // removeLast if (ba.size() > 0 && anr.size() > 0) { int ret = ba.removeLast(); int ret2 = anr.removeLast(); System.out.println("removeLast(" + ret + ")" + " removeLast(" + ret2 + ")"); "<AssertPlaceHolder>"; } } } }
[*] target: assertEquals(ret, ret2)
[-] pred: org. junit. Assert. assertEquals ( ret, ret2 )
************************************
[+] input: Exception { Memory memory = program.getMemory(); MemoryBlock block = memory.createInitializedBlock(".test", getAddr(0), 0x23, (byte) 0xa, TaskMonitorAdapter.DUMMY_MONITOR, false);  AddressSet set = new AddressSet(); set.addRange(getAddr(0), getAddr(0x10)); set.addRange(getAddr(0x20), getAddr(0x25)); set.addRange(getAddr(0x26), getAddr(0x30)); AddressSetPropertyMap pm = program.createAddressSetPropertyMap("MyMap"); pm.add(set);  assertEquals(set, pm.getAddressSet());  // move .test block to 0x1000 memory.moveBlock(block, getAddr(0x1000), TaskMonitorAdapter.DUMMY_MONITOR);  // [0,10], [20, 22] should be moved // [23,30] should not be moved  AddressSet s = new AddressSet(); s.addRange(getAddr(0), getAddr(0x10)); s.addRange(getAddr(0x20), getAddr(0x22)); AddressSet pmSet = pm.getAddressSet(); assertTrue(!pmSet.contains(s)); assertTrue(pmSet.contains(getAddr(0x23), getAddr(0x30)));  s.clear(); s.addRange(getAddr(0x1000), getAddr(0x1010)); s.addRange(getAddr(0x1020), getAddr(0x1022)); s.addRange(getAddr(0x23), getAddr(0x30)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(s, pmSet)
[-] pred: org. junit. Assert. assertEquals ( s, pmSet )
************************************
[+] input: Exception { SimpleLineReader reader = new SimpleLineReader(new Document("aha\noho\r\n\r\n\n")); assertEquals("aha\n", reader.readLine()); assertEquals("oho\r\n", reader.readLine()); assertEquals("\r\n", reader.readLine()); assertEquals("\n", reader.readLine()); "<AssertPlaceHolder>"; }
[*] target: assertNull(reader.readLine())
[-] pred: org. junit. Assert. assertNull ( reader. readLine() )
************************************
[+] input: NacosException { serviceManager.createEmptyService(TEST_NAMESPACE, TEST_SERVICE_NAME, true); List<Service> actual = serviceManager .searchServices(TEST_NAMESPACE, Constants.ANY_PATTERN + TEST_SERVICE_NAME + Constants.ANY_PATTERN); "<AssertPlaceHolder>"; assertEquals(TEST_SERVICE_NAME, actual.get(0).getName()); }
[*] target: assertEquals(1, actual.size())
[-] pred: org. junit. Assert. assertEquals ( 1, actual. size ( ) )
************************************
[+] input: getConfigMapTest() { MultipleParameterTool params = MultipleParameterTool.fromArgs( new String[] { "--sink-conf", "fenodes = 127.0.0.1:8030", "--sink-conf", "password=", "--sink-conf", "jdbc-url= jdbc:mysql://127.0.0.1:9030 ", "--sink-conf", "sink.label-prefix  = label " }); Map<String, String> sinkConf = CdcTools.getConfigMap(params, DatabaseSyncConfig.SINK_CONF);  Map<String, String> excepted = new HashMap<>(); excepted.put("password", ""); excepted.put("fenodes", "127.0.0.1:8030"); excepted.put("jdbc-url", "jdbc:mysql://127.0.0.1:9030"); excepted.put("sink.label-prefix", "label"); Assert.assertEquals(sinkConf, excepted);  Map<String, String> mysqlConf = CdcTools.getConfigMap(params, DatabaseSyncConfig.MYSQL_CONF); Assert.assertNull(mysqlConf);  MultipleParameterTool params2 = MultipleParameterTool.fromArgs(new String[] {"--sink-conf", "fenodes"}); Map<String, String> sinkConf2 = CdcTools.getConfigMap(params2, DatabaseSyncConfig.SINGLE_SINK); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(sinkConf2)
[-] pred: org. junit. Assert. assertNull ( sinkConf2 )
************************************
[+] input: testHandlerMerge_Catchall_Catchall() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(5, 10, new ImmutableExceptionHandler(null, 5)); tlb.addHandler(0, 15, new ImmutableExceptionHandler(null, 5));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 15, ImmutableList.of( new ImmutableExceptionHandler(null, 5))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testSignature() { String timestamp = "1576478257344"; String pathWithQuery = "/configs/100004458/default/application?ip=10.0.0.1"; String secret = "df23df3f59884980844ff3dada30fa97";  String actualSignature = Signature.signature(timestamp, pathWithQuery, secret);  String expectedSignature = "EoKyziXvKqzHgwx+ijDJwgVTDgE="; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSignature, actualSignature)
[-] pred: org. junit. Assert. assertEquals ( expectedSignature, actualSignature )
************************************
[+] input: Exception { List<Long> tablets1 = new ArrayList<>(); tablets1.add(1L); tablets1.add(2L); List<Long> tablets2 = new ArrayList<>(); tablets2.add(3L); tablets2.add(4L); Map<String, List<Long>> beToTablets = new HashMap<>(); beToTablets.put("be1", tablets1); beToTablets.put("be2", tablets2);  Settings settings = new PropertiesSettings(); String opaquedQueryPlan = "query_plan"; String cluster = "c"; String database = "d"; String table = "t";  Set<Long> be1Tablet1 = new HashSet<>(); be1Tablet1.add(1L); PartitionDefinition pd1 = new PartitionDefinition( database, table, settings, "be1", be1Tablet1, opaquedQueryPlan);  Set<Long> be1Tablet2 = new HashSet<>(); be1Tablet2.add(2L); PartitionDefinition pd2 = new PartitionDefinition( database, table, settings, "be1", be1Tablet2, opaquedQueryPlan);  Set<Long> be2Tablet1 = new HashSet<>(); be2Tablet1.add(3L); PartitionDefinition pd3 = new PartitionDefinition( database, table, settings, "be2", be2Tablet1, opaquedQueryPlan);  Set<Long> be2Tablet2 = new HashSet<>(); be2Tablet2.add(4L); PartitionDefinition pd4 = new PartitionDefinition( database, table, settings, "be2", be2Tablet2, opaquedQueryPlan);   List<PartitionDefinition> expected = new ArrayList<>(); expected.add(pd1); expected.add(pd2); expected.add(pd3); expected.add(pd4); Collections.sort(expected);  List<PartitionDefinition> actual = RestService.tabletsMapToPartition( settings, beToTablets, opaquedQueryPlan, database, table, logger); Collections.sort(actual);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testWildcardAddTwiceDeleteOnceMultipleWildcard() { ByteMachine cut = new ByteMachine(); cut.addPattern(Patterns.wildcardMatch("h*l*o")); cut.addPattern(Patterns.wildcardMatch("h*l*o")); cut.deletePattern(Patterns.wildcardMatch("h*l*o")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cut.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cut. isEmpty() )
************************************
[+] input: Exception {  File temp = createTempFileForTest();  Preferences.setProperty(Preferences.LAST_IMPORT_DIRECTORY, temp.getParent()); pathManager.setFileChooserProperties("Select Source Files", Preferences.LAST_IMPORT_DIRECTORY, GhidraFileChooserMode.FILES_AND_DIRECTORIES, true, new ExtensionFileFilter(new String[] { "h" }, "C Header Files"));  JButton button = findButtonByIcon(pathManager.getComponent(), ResourceManager.loadImage("images/Plus.png")); "<AssertPlaceHolder>"; pressButton(button, false);  waitForSwing(); GhidraFileChooser fileChooser = waitForDialogComponent(GhidraFileChooser.class); assertNotNull(fileChooser);  assertEquals(temp.getParentFile().getName(), fileChooser.getCurrentDirectory().getName()); assertTrue(fileChooser.isMultiSelectionEnabled());  File f = new File("c:\\temp\\myInclude.h"); assertTrue(fileChooser.accept(f)); f = new File("c:\\temp\\myFile.c"); assertTrue(!fileChooser.accept(f));  pressButtonByText(fileChooser, "Cancel", true); }
[*] target: assertNotNull(button)
[-] pred: org. junit. Assert. assertNotNull ( button )
************************************
[+] input: testRecoverPublicKey() { TreeRoot.Builder builder = TreeRoot.newBuilder(); builder.setERoot(ByteString.copyFrom("VXJIDGQECCIIYNY3GZEJSFSG6U".getBytes())); builder.setLRoot(ByteString.copyFrom("FDXN3SN67NA5DKA4J2GOK7BVQI".getBytes())); builder.setSeq(3447);  //String eth_msg = "enrtree-root:v1 e=VXJIDGQECCIIYNY3GZEJSFSG6U l=FDXN3SN67NA5DKA4J2GOK7BVQI seq=3447"; String msg = builder.toString(); byte[] sig = Algorithm.sigData(builder.toString(), privateKey); Assert.assertEquals(65, sig.length); String base64Sig = Algorithm.encode64(sig); Assert.assertEquals( "_Zfgv2g7IUzjhqkMGCPZuPT_HAA01hTxiKAa3D1dyokk8_OKee-Jy2dSNo-nqEr6WOFkxv3A9ukYuiJRsf2v8hs", base64Sig);  byte[] sigData; try { sigData = Algorithm.decode64(base64Sig); Assert.assertArrayEquals(sig, sigData); } catch (Exception e) { Assert.fail(); }  BigInteger publicKeyInt = Algorithm.generateKeyPair(privateKey).getPublicKey(); try { BigInteger recoverPublicKeyInt = Algorithm.recoverPublicKey(msg, sig); Assert."<AssertPlaceHolder>"; } catch (SignatureException e) { Assert.fail(); } }
[*] target: assertEquals(publicKeyInt, recoverPublicKeyInt)
[-] pred: org. junit. Assert. assertEquals ( publicKeyInt, recoverPublicKeyInt )
************************************
[+] input: testIs360() { assertFalse(broadcast.isIs360()); broadcast.setIs360(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(broadcast.isIs360())
[-] pred: org. junit. Assert. assertTrue ( broadcast. isIs360() )
************************************
[+] input: testStackAddress() { Address a = stackSpace.getAddress(0); long key = map.getKey(a); Address b = map.decodeAddress(key); Assert.assertEquals(a, b);  a = stackSpace.getAddress(10); key = map.getKey(a); b = map.decodeAddress(key); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(a, b)
[-] pred: org. junit. Assert. assertEquals ( a, b )
************************************
[+] input: IOException { assertEquals(0, obj.space1.size()); assertTrue(obj.space1.isEmpty());  SpatialMap<TraceAddressSnapRange, MyEntry, TraceAddressSnapRangeQuery> reduced = obj.space1.reduce( TraceAddressSnapRangeQuery.intersecting(addr(0x4000), addr(0x4fff), 0, 1000)); assertEquals(0, reduced.size()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(reduced.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( reduced. isEmpty ( ) )
************************************
[+] input: givenCachedClassloader_whenLookup_thenDescriptorReturned() { final ClassLoader classLoader = getClass().getClassLoader(); final ClassLoaderStore classLoaderStore = new ClassLoaderStore(); final ClassLoaderDescriptor classLoaderDescriptor = classLoaderStore.store(classLoader);  final ClassLoader lookedUpClassLoader = classLoaderStore.lookup(classLoaderDescriptor);  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(classLoader, lookedUpClassLoader)
[-] pred: org. junit. Assert. assertEquals ( classLoader, lookedUpClassLoader )
************************************
[+] input: testRuntimeTypeDiscovery_MixedHierarchy_AbstractClassAndInterfaceBothDefineValues() {  // // Test to make sure that we get not only a directly hierarchy, but the lateral one // as well, where we pursue interfaces that may have defined some types. //  List<Class<?>> types = ReflectionUtilities.getTypeArguments(RuntimeBaseInterface.class, ChildExtendingPartiallyDefinedTypes.class); "<AssertPlaceHolder>"; assertEquals(String.class, types.get(0)); assertEquals(Double.class, types.get(1)); }
[*] target: assertEquals(2, types.size())
[-] pred: org. junit. Assert. assertEquals ( 2, types. size ( ) )
************************************
[+] input: testGetLastCodeColorBeforeFormat() { String input = BUKKIT_COLOR_CODE_PREFIX + "c" + BUKKIT_COLOR_CODE_PREFIX + "oHello"; String expectedResult = BUKKIT_COLOR_CODE_PREFIX + "c" + BUKKIT_COLOR_CODE_PREFIX + "o";  String result = Format.getLastCode(input);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testGetLocationFixedPath() { when(properties.getConnectionString()).thenReturn(azuriteConnectionString); AzureBlobPayloadStorage azureBlobPayloadStorage = new AzureBlobPayloadStorage(idGenerator, properties); String path = "somewhere"; ExternalStorageLocation externalStorageLocation = azureBlobPayloadStorage.getLocation( ExternalPayloadStorage.Operation.READ, ExternalPayloadStorage.PayloadType.WORKFLOW_INPUT, path); "<AssertPlaceHolder>"; assertEquals(path, externalStorageLocation.getPath()); assertNotNull(externalStorageLocation.getUri()); }
[*] target: assertNotNull(externalStorageLocation)
[-] pred: org. junit. Assert. assertNotNull ( externalStorageLocation )
************************************
[+] input: ) { Vector actualResult = new Vector( 3 ); actualResult.apply( operand -> 10 );  Vector expectedResult = new Vector( 10d, 10d, 10d );  "<AssertPlaceHolder>"; }
[*] target: assertEquals( expectedResult, actualResult )
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualResult )
************************************
[+] input: testDoubleInit() { int n = ShutdownHookHandler.getInstance().getNumberOfAllExistingHooks();  Runtime.getRuntime().addShutdownHook(new Thread(){});  //this should remove the above hook thread ShutdownHookHandler.getInstance().initHandler();  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(n, ShutdownHookHandler.getInstance().getNumberOfAllExistingHooks())
[-] pred: org. junit. Assert. assertEquals ( n, ShutdownHookHandler.getInstance ( ). getNumberOfAllExistingHooks() )
************************************
[+] input: testHandlerMerge_DifferentType() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(5, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(0, 15, new ImmutableExceptionHandler("LException2;", 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 5, ImmutableList.of( new ImmutableExceptionHandler("LException2;", 6))), new ImmutableTryBlock(5, 5, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5), new ImmutableExceptionHandler("LException2;", 6))), new ImmutableTryBlock(10, 5, ImmutableList.of( new ImmutableExceptionHandler("LException2;", 6))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testDispose() { ScreenCapturerAndroid screenCapturerAndroid = spy(new ScreenCapturerAndroid(null, null)); assertFalse(screenCapturerAndroid.isDisposed()); screenCapturerAndroid.dispose(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(screenCapturerAndroid.isDisposed())
[-] pred: org. junit. Assert. assertTrue ( screenCapturerAndroid. isDisposed() )
************************************
[+] input: Exception {  SmartUtLocalAddress addr = new SmartUtLocalAddress("127.42.42.42",42); NetworkHandling.sendDataOnTcp(addr,null);  MockServerSocket sut = new MockServerSocket(addr.getPort(), 1, MockInetAddress.getByName(addr.getHost())); Socket socket = sut.accept(); //should not block, should not timeout Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(socket)
[-] pred: org. junit. Assert. assertNotNull ( socket )
************************************
[+] input: IOException { // prepare File src = new File(temporaryFolder.newFolder("src"), "test.dat"); src.createNewFile(); File dest = new File(temporaryFolder.getRoot(), "dest/renamed.dat");  // act contributor.copyToFile(src, dest); log.debug("Destination file {}: {}", dest, dest.exists() ? "exists" : "not exists"); log.debug("Source file {}: {}", src, src.exists() ? "exists" : "not exists");  // check "<AssertPlaceHolder>"; assertTrue(src.exists()); }
[*] target: assertTrue(dest.exists())
[-] pred: org. junit. Assert. assertTrue ( dest. exists ( ) )
************************************
[+] input: Exception { Dictionary<String, Object> dict = getConfiguration("test2").getProperties(); assertFalse(dict.isEmpty()); assertNotNull(dict.remove(Constants.SERVICE_PID)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(dict.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( dict. isEmpty ( ) )
************************************
[+] input: testFactory_daysIn_RInterval() { Days d = new Days(PARIS); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, d.getDays())
[-] pred: org. junit. Assert. assertEquals ( 0, d. getDays() )
************************************
[+] input: Exception { Map<String, String> param = Maps.newHashMap(); param.put(PacmanSdkConstants.ACCOUNT_ID, "acc123"); param.put(PacmanSdkConstants.REGION, "region123"); param.put(PacmanSdkConstants.RESOURCE_ID, "resou123"); param.put(PacmanSdkConstants.REGION, "region"); boolean response = PolicyExecutionUtils.ifFilterMatchesTheCurrentResource(param, param); "<AssertPlaceHolder>"; }
[*] target: assertTrue(response)
[-] pred: org. junit. Assert. assertTrue ( response )
************************************
[+] input: testGetRemoteExecutorQueueSize() { int defaultExpectVal = 1 << 14; int defaultVal = RemoteUtils.getRemoteExecutorQueueSize(); Assert.assertEquals(defaultExpectVal, defaultVal);  System.setProperty("remote.executor.queue.size", "10"); int val1 = RemoteUtils.getRemoteExecutorQueueSize(); Assert.assertEquals(10, val1);  System.setProperty("remote.executor.queue.size", "-1"); int val2 = RemoteUtils.getRemoteExecutorQueueSize(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(defaultExpectVal, val2)
[-] pred: org. junit. Assert. assertEquals ( defaultExpectVal, val2 )
************************************
[+] input: processTableFieldsOfNullEventData() { Map<String, Object> eventData = null; final String key1 = "field_char"; Set<String> fields = new HashSet<>(); fields.add(key1); eventData = FilterUtil.processTableFields(eventData, fields); Assert."<AssertPlaceHolder>";  }
[*] target: assertNull(eventData)
[-] pred: org. junit. Assert. assertNull ( eventData )
************************************
[+] input: testReorderingAllowedChangesScreenOn() { mVisualStabilityManager.setPanelExpanded(true); mVisualStabilityManager.setScreenOn(true); assertFalse(mVisualStabilityManager.isReorderingAllowed()); mVisualStabilityManager.setScreenOn(false); "<AssertPlaceHolder>"; }
[*] target: assertTrue(mVisualStabilityManager.isReorderingAllowed())
[-] pred: org. junit. Assert. assertTrue ( mVisualStabilityManager. isReorderingAllowed() )
************************************
[+] input: testAsList_Iterator_Null() {  List<String> list = CollectionUtils.asList((Iterator<String>) null); assertNotNull(list); "<AssertPlaceHolder>"; }
[*] target: assertTrue(list.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( list. isEmpty() )
************************************
[+] input: testSelectInstances() { ServiceInfo serviceInfo = new ServiceInfo(); serviceInfo.setGroupName("groupName"); serviceInfo.setName("serviceName"); serviceInfo.setChecksum("checkSum"); serviceInfo.setAllIPs(false); ServiceInfo cluster = ServiceUtil.selectInstances(serviceInfo, "cluster"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(cluster)
[-] pred: org. junit. Assert. assertNotNull ( cluster )
************************************
[+] input: Exception { selectRow(3); JButton upButton = findButtonByIcon(pathManager.getComponent(), ResourceManager.loadImage("images/up.png")); "<AssertPlaceHolder>"; pressButton(upButton, true); waitForSwing();  int row = table.getSelectedRow(); assertEquals(2, row); assertEquals(new Path("c:\\path_four"), table.getModel().getValueAt(row, 1));  pressButton(upButton, true); waitForSwing(); row = table.getSelectedRow(); assertEquals(1, row); assertEquals(new Path("c:\\path_four"), table.getModel().getValueAt(row, 1));  pressButton(upButton, true); waitForSwing(); row = table.getSelectedRow(); assertEquals(0, row); assertEquals(new Path("c:\\path_four"), table.getModel().getValueAt(row, 1));  pressButton(upButton, true); waitForSwing(); row = table.getSelectedRow(); assertEquals(3, row); assertEquals(new Path("c:\\path_four"), table.getModel().getValueAt(row, 1)); }
[*] target: assertNotNull(upButton)
[-] pred: org. junit. Assert. assertNotNull ( upButton )
************************************
[+] input: testFindAssetProfileById() { AssetProfile assetProfile = this.createAssetProfile(tenantId, "Asset Profile"); AssetProfile savedAssetProfile = assetProfileService.saveAssetProfile(assetProfile); AssetProfile foundAssetProfile = assetProfileService.findAssetProfileById(tenantId, savedAssetProfile.getId()); Assert."<AssertPlaceHolder>"; Assert.assertEquals(savedAssetProfile, foundAssetProfile); }
[*] target: assertNotNull(foundAssetProfile)
[-] pred: org. junit. Assert. assertNotNull ( foundAssetProfile )
************************************
[+] input: testGetAllClientsSubscribeService() {  Collection<String> allClientsSubscribeService = clientServiceIndexesManager .getAllClientsSubscribeService(service);  Assert."<AssertPlaceHolder>"; Assert.assertEquals(allClientsSubscribeService.size(), 1); }
[*] target: assertNotNull(allClientsSubscribeService)
[-] pred: org. junit. Assert. assertNotNull ( allClientsSubscribeService )
************************************
[+] input: testSouthNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.linearFive(population, 5);  TestSuiteChromosome exepcted_individual = population.get(9); TestSuiteChromosome returned_individual = neighbors.get(1);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: IOException { // given String path = Objects.requireNonNull( ClassLoader.getSystemClassLoader().getResource("input/sequence.pdf") ).getPath(); File file = new File(path);  // when FilePdfSource source = new FilePdfSource(file); PDDocument document = source.doLoad();  // then Assert."<AssertPlaceHolder>"; // The PDF file has only 3 pages. Assert.assertEquals(3, document.getNumberOfPages()); }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
[+] input: testFindQueueById() { Queue queue = new Queue(); queue.setTenantId(tenantId); queue.setName("Test"); queue.setTopic("tb_rule_engine.test"); queue.setPollInterval(25); queue.setPartitions(1); queue.setPackProcessingTimeout(2000); queue.setSubmitStrategy(createTestSubmitStrategy()); queue.setProcessingStrategy(createTestProcessingStrategy()); Queue savedQueue = queueService.saveQueue(queue); Queue foundQueue = queueService.findQueueById(tenantId, savedQueue.getId()); Assert."<AssertPlaceHolder>"; Assert.assertEquals(savedQueue, foundQueue); }
[*] target: assertNotNull(foundQueue)
[-] pred: org. junit. Assert. assertNotNull ( foundQueue )
************************************
[+] input: getTransitionShouldReturnNullWhenThisStateHasNoTransitions() { ByteTransition transition = state.getTransition((byte) 'a'); "<AssertPlaceHolder>"; }
[*] target: assertNull(transition)
[-] pred: org. junit. Assert. assertNull ( transition )
************************************
[+] input: SQLException { pstmt_insert.setTimestamp(1, new Timestamp(System.currentTimeMillis())); pstmt_insert.setDouble(5, 3.14444); int ret = pstmt_insert.executeUpdate(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, ret)
[-] pred: org. junit. Assert. assertEquals ( 1, ret )
************************************
[+] input: NetException { boolean isIpAddress = IpAddressUtils.isIpAddress(NetUtils.getLocalIp()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(isIpAddress)
[-] pred: org. junit. Assert. assertTrue ( isIpAddress )
************************************
[+] input: Exception { Structure s = new StructureDataType("foo", 0); assertTrue(s.isNotYetDefined()); assertTrue(s.isZeroLength()); assertEquals(0, s.getNumComponents()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, s.getNumDefinedComponents())
[-] pred: org. junit. Assert. assertEquals ( 0, s. getNumDefinedComponents() )
************************************
[+] input: success_search_test_0() { String pattern = "glx"; String text = "abcbcglx"; String exceptedOutput = "Found pattern at index 5\n"; String actual = CaptureOutput.captureStandardOutput(() -> Question1.search(pattern, text)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(exceptedOutput, actual)
[-] pred: org. junit. Assert. assertEquals ( exceptedOutput, actual )
************************************
[+] input: testSplitWithMultipleTrailingNewlines2() { // newlines at begin and end do not create lines; no whitespace--max is below // MAX_WORD_LENGTH, so single line only List<String> lines = HtmlLineSplitter.split("\naa\n\n", 100); "<AssertPlaceHolder>"; assertEquals("", lines.get(0)); assertEquals("aa", lines.get(1)); assertEquals("", lines.get(2)); assertEquals("", lines.get(3)); }
[*] target: assertEquals(4, lines.size())
[-] pred: org. junit. Assert. assertEquals ( 4, lines. size ( ) )
************************************
[+] input: Exception { long someLongPollingDelayInMills = 1; System.setProperty("apollo.longPollingInitialDelayInMills", String.valueOf(someLongPollingDelayInMills));  ConfigUtil configUtil = new ConfigUtil();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(someLongPollingDelayInMills, configUtil.getLongPollingInitialDelayInMills())
[-] pred: org. junit. Assert. assertEquals ( someLongPollingDelayInMills, configUtil. getLongPollingInitialDelayInMills ( ) )
************************************
[+] input: testJoinQueryParametersWithLocaleIT() {  Locale.setDefault(new Locale("it", "IT"));  String joinedQuery = String.format("key1=%s&key2=%s", extensiveDecimalsDouble, highDouble); String buildQuery = UrlBuilder.joinQueryParameters(mockDoubleParameters); "<AssertPlaceHolder>"; }
[*] target: assertEquals(joinedQuery, buildQuery)
[-] pred: org. junit. Assert. assertEquals ( joinedQuery, buildQuery )
************************************
[+] input: Exception {  ProgramModule root = treeManager.createRootModule("Test-One"); assertNotNull(root);  String[] names = treeManager.getTreeNames(); for (String name : names) { treeManager.removeTree(name); } assertNull(treeManager.getRootModule("Test-One")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, treeManager.getTreeNames().length)
[-] pred: org. junit. Assert. assertEquals ( 0, treeManager. getTreeNames ( ). length )
************************************
[+] input: testIterator2() { for (int i = 0; i < 10000; i++) { ps.putObject(i, new Integer(i)); } LongIterator it = ps.getPropertyIterator(); int i = 0; while (it.hasNext()) { long l = it.next(); "<AssertPlaceHolder>"; i++; } assertEquals(i, 10000); }
[*] target: assertEquals(i, l)
[-] pred: org. junit. Assert. assertEquals ( i, l )
************************************
[+] input: testEmpty() { MonotonicQueue<Integer> q = new MonotonicQueue<>(); Assert.assertTrue(q.isEmpty()); Assert.assertNull(q.max()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(q.pop())
[-] pred: org. junit. Assert. assertNull ( q. pop() )
************************************
[+] input: load() { AviatorFunctionLoader.load(); AviatorFunction function = AviatorEvaluator.getFunction("time.plusDay"); System.out.println(function); "<AssertPlaceHolder>"; String exp = "time.plusDay(num,date)"; Expression expression = AviatorEvaluator.compile(exp, true); Map<String, Object> env = new HashMap<>(); env.put("num", 5); env.put("date", DateTimeUtils.formatDate(new Date(), DateTimeUtils.DEFAULT_DATE_PATTERN)); System.out.println(env); Object v = expression.execute(env); System.out.println(v); }
[*] target: assertNotNull(function)
[-] pred: org. junit. Assert. assertNotNull ( function )
************************************
[+] input: Exception {  // // Mangled: _ZNK2cc14ScrollSnapTypeneERKS0_ // // Demangled: cc::ScrollSnapType::operator!=(cc::ScrollSnapType const&) const //  String mangled = "_ZNK2cc14ScrollSnapTypeneERKS0_"; String demangled = process.demangle(mangled);  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  String signature = object.getSignature(false); assertEquals("undefined cc::ScrollSnapType::operator!=(cc::ScrollSnapType const &)", signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: testDecryptHandler() { Pair<String, String> pair = EncryptionHandler.decryptHandler("test-dataId", "12345678", "content"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(pair)
[-] pred: org. junit. Assert. assertNotNull ( pair )
************************************
[+] input: testExtractDefaultValueEmpty() { String expectDefault = null; List<String> columnSpecs = Arrays.asList("DEFAULT", "comment", null); String actualDefault = schemaManager.extractDefaultValue(DorisType.STRING, columnSpecs); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectDefault, actualDefault)
[-] pred: org. junit. Assert. assertEquals ( expectDefault, actualDefault )
************************************
[+] input: testOnStatsReportPlay() {  StatsCollector statsCollector = new StatsCollector(); Map<String, RTCStats> statsMap = new HashMap<>(); RTCStats rtcStats = mock(RTCStats.class);  when(report.getStatsMap()).thenReturn(statsMap); when(rtcStats.getType()).thenReturn(StatsCollector.INBOUND_RTP); when(rtcStats.getTimestampUs()).thenReturn(1000.0); when(rtcStats.getMembers()).thenReturn(createMembersMap(StatsCollector.AUDIO, StatsCollector.INBOUND_RTP)); statsMap.put("", rtcStats); statsCollector.onStatsReport(report);  PlayStats playStats = statsCollector.getPlayStats();  Map<String, TrackStats> audioTrackStatsMap = playStats.getAudioTrackStatsMap();   TrackStats audioTrackStats = audioTrackStatsMap.get("audioTrack1"); assertNotNull(audioTrackStats);  assertEquals(10, audioTrackStats.getPacketsLost()); assertEquals(0.3, audioTrackStats.getJitter(),0); assertEquals(0.3, audioTrackStats.getRoundTripTime(),0); assertEquals(BigInteger.valueOf(3), audioTrackStats.getConcealmentEvents());  when(rtcStats.getMembers()).thenReturn(createMembersMap(StatsCollector.VIDEO, StatsCollector.INBOUND_RTP));  statsCollector.onStatsReport(report);  Map<String, TrackStats> videoTrackStatsMap = playStats.getVideoTrackStatsMap(); TrackStats videoTrackStats = videoTrackStatsMap.get("videoTrack1"); "<AssertPlaceHolder>";   assertEquals(1000L, videoTrackStats.getFirCount()); assertEquals(1000L, videoTrackStats.getPliCount()); assertEquals(1000L, videoTrackStats.getNackCount()); assertEquals(0.3, videoTrackStats.getJitter(), 0); assertEquals(10, videoTrackStats.getPacketsLost()); assertEquals(10, videoTrackStats.getPacketsReceived()); assertEquals(BigInteger.valueOf(1000), videoTrackStats.getBytesReceived()); assertEquals(1000L, videoTrackStats.getFramesEncoded()); assertEquals(1000L, videoTrackStats.getFramesDecoded()); assertEquals(1000L, videoTrackStats.getFramesReceived()); assertEquals(1000L, videoTrackStats.getFramesDropped()); assertEquals(0.3, videoTrackStats.getTotalFreezesDuration(), 0);   }
[*] target: assertNotNull(videoTrackStats)
[-] pred: org. junit. Assert. assertNotNull ( videoTrackStats )
************************************
[+] input: Exception { int someReadTimeout = 1; System.setProperty("apollo.readTimeout", String.valueOf(someReadTimeout));  ConfigUtil configUtil = new ConfigUtil();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(someReadTimeout, configUtil.getReadTimeout())
[-] pred: org. junit. Assert. assertEquals ( someReadTimeout, configUtil. getReadTimeout() )
************************************
[+] input: Exception { String someType = "someType"; String someName = "someName"; Transaction someTransaction = mock(Transaction.class);  when(someProducer.newTransaction(someType, someName)).thenReturn(someTransaction);  Transaction result = Tracer.newTransaction(someType, someName);  verify(someProducer, times(1)).newTransaction(someType, someName); "<AssertPlaceHolder>"; }
[*] target: assertEquals(someTransaction, result)
[-] pred: org. junit. Assert. assertEquals ( someTransaction, result )
************************************
[+] input: testSimpleNameEmptyString() { final String className = ""; final String simpleName = ClassNameHelper.getSimpleName(className); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(className, simpleName)
[-] pred: org. junit. Assert. assertEquals ( className, simpleName )
************************************
[+] input: testTokenizeBrand() { Brand brand = new Brand(0,"Lorem","Lorem, ipsum. dolor, sit amet","ipsum","Lorem", new ArrayList<String>()); Set<String> expected = new HashSet<>(List.of("Lorem", "ipsum", "dolor", "sit", "amet")); String reg = "[,\\.]"; String del = " "; brandInfrastructure.setTokenizationParameters(del,reg); Set<String> actual = brandInfrastructure.tokenizeBrand(brand); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected,actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testFindByDeviceId() { DeviceCredentials foundedDeviceCredentials = deviceCredentialsDao.findByDeviceId(SYSTEM_TENANT_ID, neededDeviceCredentials.getDeviceId().getId()); "<AssertPlaceHolder>"; assertEquals(neededDeviceCredentials.getId(), foundedDeviceCredentials.getId()); assertEquals(neededDeviceCredentials.getCredentialsId(), foundedDeviceCredentials.getCredentialsId()); }
[*] target: assertNotNull(foundedDeviceCredentials)
[-] pred: org. junit. Assert. assertNotNull ( foundedDeviceCredentials )
************************************
[+] input: testOverlap_Middle_After() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(0, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(5, 15, new ImmutableExceptionHandler("LException2;", 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 5, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5))), new ImmutableTryBlock(5, 5, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5), new ImmutableExceptionHandler("LException2;", 6))), new ImmutableTryBlock(10, 5, ImmutableList.of( new ImmutableExceptionHandler("LException2;", 6))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testFindAssetInfoByTenantIdAndAssetProfileId() { Customer customer = new Customer(); customer.setTitle("Customer X"); customer.setTenantId(tenantId); Customer savedCustomer = customerService.saveCustomer(customer);  Asset asset = new Asset(); asset.setTenantId(tenantId); asset.setName("default"); asset.setLabel("label"); asset.setCustomerId(savedCustomer.getId()); Asset savedAsset = assetService.saveAsset(asset);  PageLink pageLinkWithLabel = new PageLink(100, 0, "label"); List<AssetInfo> assetInfosWithLabel = assetService .findAssetInfosByTenantIdAndAssetProfileId(tenantId, savedAsset.getAssetProfileId(), pageLinkWithLabel).getData();  Assert.assertFalse(assetInfosWithLabel.isEmpty()); Assert.assertTrue( assetInfosWithLabel.stream() .anyMatch( d -> d.getId().equals(savedAsset.getId()) && d.getTenantId().equals(tenantId) && d.getAssetProfileId().equals(savedAsset.getAssetProfileId()) && d.getLabel().equals(savedAsset.getLabel()) ) );  PageLink pageLinkWithCustomer = new PageLink(100, 0, savedCustomer.getTitle()); List<AssetInfo> assetInfosWithCustomer = assetService .findAssetInfosByTenantIdAndAssetProfileId(tenantId, savedAsset.getAssetProfileId(), pageLinkWithCustomer).getData();  Assert."<AssertPlaceHolder>"; Assert.assertTrue( assetInfosWithCustomer.stream() .anyMatch( d -> d.getId().equals(savedAsset.getId()) && d.getTenantId().equals(tenantId) && d.getAssetProfileId().equals(savedAsset.getAssetProfileId()) && d.getCustomerId().equals(savedCustomer.getId()) && d.getCustomerTitle().equals(savedCustomer.getTitle()) ) ); }
[*] target: assertFalse(assetInfosWithCustomer.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( assetInfosWithCustomer. isEmpty ( ) )
************************************
[+] input: isAncestor() { MindMap<TestTopicNode> map = createMindMapWithRoot(); Topic son = new Topic(map, map.getRoot(), "son"); Topic grandson = new Topic(map, son, "grandson"); Assert.assertTrue(son.isAncestor(map.getRoot())); Assert.assertTrue(grandson.isAncestor(map.getRoot())); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(grandson.isAncestor(son))
[-] pred: org. junit. Assert. assertTrue ( grandson. isAncestor ( son ) )
************************************
[+] input: testSouthWestNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.compactNine(population, 5);  TestSuiteChromosome exepcted_individual = population.get(8); TestSuiteChromosome returned_individual = neighbors.get(5);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testRingTopology_leftNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.ringTopology(population, 2);  TestSuiteChromosome exepcted_individual = population.get(1); TestSuiteChromosome returned_individual = neighbors.get(0);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testNull() { ByteSequenceLengthFilter bsFilter = new ByteSequenceLengthFilter(1, 1); String result = bsFilter.filter(null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(null, result)
[-] pred: org. junit. Assert. assertEquals ( null, result )
************************************
[+] input: SQLException { Time f1 = rs.getTime("f1"); Assert."<AssertPlaceHolder>"; Assert.assertEquals("00:00:00", f1.toString()); }
[*] target: assertNotNull(f1)
[-] pred: org. junit. Assert. assertNotNull ( f1 )
************************************
[+] input: testFilterRelationshipsExcludeAsList() { db.executeTransactionally("CREATE (u:User {name:'Joe',gender:'male'})-[:KNOWS]->(u), (u)-[:LOVES]->(u)"); final Map<String, Object> conf = map("excludeRels", List.of("KNOWS", "LOVES"));  final Object result = TestUtil.singleResultFirstColumn( db, "CALL apoc.nodes.group(['User'], ['gender'], null, $conf) yield relationship return relationship", map("conf", conf)); "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: testSetEphemeral() { serviceMetadata.setEphemeral(false); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(serviceMetadata.isEphemeral())
[-] pred: org. junit. Assert. assertFalse ( serviceMetadata. isEphemeral() )
************************************
[+] input: countTest() { long size = 42; Iterator<TripleString> it = LargeFakeDataSetStreamSupplier.createSupplierWithMaxTriples(size, 34) .createTripleStringStream(); int count = 0; while (it.hasNext()) { it.next(); count++; } "<AssertPlaceHolder>"; }
[*] target: assertEquals(size, count)
[-] pred: org. junit. Assert. assertEquals ( size, count )
************************************
[+] input: testSubtractEmptySet() { AddressSet set = set(0x100, 0x110, 0x200, 0x210, 0x300, 0x305); AddressSet emptySet = set(); AddressSet newSet = set.subtract(emptySet); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(set, newSet)
[-] pred: org. junit. Assert. assertEquals ( set, newSet )
************************************
[+] input: testDeleteAssetProfile() { AssetProfile assetProfile = this.createAssetProfile(tenantId, "Asset Profile"); AssetProfile savedAssetProfile = assetProfileService.saveAssetProfile(assetProfile); assetProfileService.deleteAssetProfile(tenantId, savedAssetProfile.getId()); AssetProfile foundAssetProfile = assetProfileService.findAssetProfileById(tenantId, savedAssetProfile.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(foundAssetProfile)
[-] pred: org. junit. Assert. assertNull ( foundAssetProfile )
************************************
[+] input: testShowingAsLowPriority_lowPriority() { mChildrenContainer.setIsLowPriority(true); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(mChildrenContainer.showingAsLowPriority())
[-] pred: org. junit. Assert. assertTrue ( mChildrenContainer. showingAsLowPriority() )
************************************
[+] input: span_combinesOverlappingInterval() { // Arrange ZonedInterval earliestInterval = new ZonedInterval(SEVEN_DAYS_AGO, THREE_DAYS_AGO); ZonedInterval latestInterval = new ZonedInterval(FIVE_DAYS_AGO, ONE_DAY_AGO); ZonedInterval expectedInterval = new ZonedInterval(SEVEN_DAYS_AGO, ONE_DAY_AGO);  // Act ZonedInterval resultingInterval = earliestInterval.span(latestInterval);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedInterval, resultingInterval)
[-] pred: org. junit. Assert. assertEquals ( expectedInterval, resultingInterval )
************************************
[+] input: testHandlerMerge_Same() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(5, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(0, 15, new ImmutableExceptionHandler("LException1;", 5));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 15, ImmutableList.of( new ImmutableExceptionHandler("LException1;", 5))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testGetClassLoadingInfo() { ClassLoadingDomain classLoadingDomain = JvmUtils.getClassLoadingInfo(); "<AssertPlaceHolder>"; log.info(classLoadingDomain.toJsonString()); }
[*] target: assertNotNull(classLoadingDomain)
[-] pred: org. junit. Assert. assertNotNull ( classLoadingDomain )
************************************
[+] input: Exception { //given NacosRestTemplate nacosRestTemplate = mock(NacosRestTemplate.class); HttpRestResult<Object> a = new HttpRestResult<Object>(); a.setData("{"status":"UP"}"); a.setCode(200); when(nacosRestTemplate.exchangeForm(any(), any(), any(), any(), any(), any())).thenReturn(a);  SecurityProxy proxy = mock(SecurityProxy.class); ServerListManager mgr = mock(ServerListManager.class); when(mgr.getServerList()).thenReturn(Arrays.asList("localhost")); Properties props = new Properties(); ServiceInfoHolder holder = mock(ServiceInfoHolder.class); NamingHttpClientProxy clientProxy = new NamingHttpClientProxy("namespaceId", proxy, mgr, props, holder);  final Field nacosRestTemplateField = NamingHttpClientProxy.class.getDeclaredField("nacosRestTemplate"); nacosRestTemplateField.setAccessible(true); nacosRestTemplateField.set(clientProxy, nacosRestTemplate); String serviceName = "service1"; String groupName = "group1";  //when boolean serverHealthy = clientProxy.serverHealthy(); //then verify(nacosRestTemplate, times(1)) .exchangeForm(endsWith("/operator/metrics"), any(), any(), any(), eq(HttpMethod.GET), any()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(serverHealthy)
[-] pred: org. junit. Assert. assertTrue ( serverHealthy )
************************************
[+] input: testBuildPath() { String baseURL = "http://localhost"; OpenApiPathBuilder tools = OpenApiPathBuilder.newBuilder(); String path, expected, actual; String env = "test"; String appId = "appid-1001"; String clusterName = "cluster-1001"; String namespaceName = "application.yml"; String key = "spring.profile"; String operator = "junit"; long releaseId = 1L;  // AppOpenApiService path check  path = String.format("apps/%s/envclusters", tools.escapePath(appId)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .appsPathVal(appId) .customResource("envclusters") .buildPath(baseURL); assertEquals(expected, actual);  String param = "1,2,3"; path = String.format("apps?appIds=%s", tools.escapeParam(param)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .customResource("apps") .addParam("appIds", param) .buildPath(baseURL); assertEquals(expected, actual);  path = "apps/authorized"; expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .customResource("apps/authorized") .buildPath(baseURL); assertEquals(expected, actual);  // ClusterOpenApiService path check  path = String.format("envs/%s/apps/%s/clusters/%s", tools.escapePath(env), tools.escapePath(appId), tools.escapePath(clusterName)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .appsPathVal(appId) .clustersPathVal(clusterName) .buildPath(baseURL); assertEquals(expected, actual);  path = String.format("envs/%s/apps/%s/clusters", tools.escapePath(env), tools.escapePath(appId)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .appsPathVal(appId) .customResource("clusters") .buildPath(baseURL); assertEquals(expected, actual);  // ItemOpenApiService path check  path = String.format("envs/%s/apps/%s/clusters/%s/namespaces/%s/items/%s", tools.escapePath(env), tools.escapePath(appId), tools.escapePath(clusterName), tools.escapePath(namespaceName), tools.escapePath(key)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .appsPathVal(appId) .clustersPathVal(clusterName) .namespacesPathVal(namespaceName) .itemsPathVal(key) .buildPath(baseURL); assertEquals(expected, actual);  path = String.format("envs/%s/apps/%s/clusters/%s/namespaces/%s/items", tools.escapePath(env), tools.escapePath(appId), tools.escapePath(clusterName), tools.escapePath(namespaceName)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .appsPathVal(appId) .clustersPathVal(clusterName) .namespacesPathVal(namespaceName) .customResource("items") .buildPath(baseURL); assertEquals(expected, actual);  path = String.format( "envs/%s/apps/%s/clusters/%s/namespaces/%s/items/%s?createIfNotExists=true", tools.escapePath(env), tools.escapePath(appId), tools.escapePath(clusterName), tools.escapePath(namespaceName), tools.escapePath(key)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .appsPathVal(appId) .clustersPathVal(clusterName) .namespacesPathVal(namespaceName) .itemsPathVal(key) .addParam("createIfNotExists", "true") .buildPath(baseURL); assertEquals(expected, actual);  path = String.format("envs/%s/apps/%s/clusters/%s/namespaces/%s/items/%s?operator=%s", tools.escapePath(env), tools.escapePath(appId), tools.escapePath(clusterName), tools.escapePath(namespaceName), tools.escapePath(key), tools.escapeParam(operator)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .appsPathVal(appId) .clustersPathVal(clusterName) .namespacesPathVal(namespaceName) .itemsPathVal(key) .addParam("operator", operator) .buildPath(baseURL); assertEquals(expected, actual);  // NamespaceOpenApiService path check  path = String.format("envs/%s/apps/%s/clusters/%s/namespaces/%s", tools.escapePath(env), tools.escapePath(appId), tools.escapePath(clusterName), tools.escapePath(namespaceName)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .appsPathVal(appId) .clustersPathVal(clusterName) .namespacesPathVal(namespaceName) .buildPath(baseURL); assertEquals(expected, actual);  path = String.format("envs/%s/apps/%s/clusters/%s/namespaces", tools.escapePath(env), tools.escapePath(appId), tools.escapePath(clusterName)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .appsPathVal(appId) .clustersPathVal(clusterName) .customResource("namespaces") .buildPath(baseURL); assertEquals(expected, actual);  path = String.format("apps/%s/appnamespaces", tools.escapePath(appId)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .appsPathVal(appId) .customResource("appnamespaces") .buildPath(baseURL); assertEquals(expected, actual);  path = String.format("envs/%s/apps/%s/clusters/%s/namespaces/%s/lock", tools.escapePath(env), tools.escapePath(appId), tools.escapePath(clusterName), tools.escapePath(namespaceName)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .appsPathVal(appId) .clustersPathVal(clusterName) .namespacesPathVal(namespaceName) .customResource("lock") .buildPath(baseURL); assertEquals(expected, actual);  // ReleaseOpenApiService path check  path = String.format("envs/%s/apps/%s/clusters/%s/namespaces/%s/releases", tools.escapePath(env), tools.escapePath(appId), tools.escapePath(clusterName), tools.escapePath(namespaceName)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .appsPathVal(appId) .clustersPathVal(clusterName) .namespacesPathVal(namespaceName) .customResource("releases") .buildPath(baseURL); assertEquals(expected, actual);  path = String.format("envs/%s/apps/%s/clusters/%s/namespaces/%s/releases/latest", tools.escapePath(env), tools.escapePath(appId), tools.escapePath(clusterName), tools.escapePath(namespaceName)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .appsPathVal(appId) .clustersPathVal(clusterName) .namespacesPathVal(namespaceName) .releasesPathVal("latest") .buildPath(baseURL); assertEquals(expected, actual);  path = String.format("envs/%s/releases/%s/rollback?operator=%s", tools.escapePath(env), releaseId, tools.escapeParam(operator)); expected = String.format("%s/%s", baseURL, path); actual = OpenApiPathBuilder.newBuilder() .envsPathVal(env) .releasesPathVal(String.valueOf(releaseId)) .customResource("rollback") .addParam("operator", operator) .buildPath(baseURL); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetOnly() { List<Integer> list = Arrays.asList(1); int element = CollectionUtils.getOnlyElement(list); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, element)
[-] pred: org. junit. Assert. assertEquals ( 1, element )
************************************
[+] input: simpleLineReaderWithMissingNL() { SimpleLineReader simpleLineReader = new SimpleLineReader(new Document("a\rb")); assertEquals("a\r", simpleLineReader.readLine()); assertEquals("b", simpleLineReader.readLine()); "<AssertPlaceHolder>"; }
[*] target: assertNull(simpleLineReader.readLine())
[-] pred: org. junit. Assert. assertNull ( simpleLineReader. readLine() )
************************************
[+] input: testGetChildren() { List<GTreeNode> children = root.getChildren(); "<AssertPlaceHolder>"; assertEquals(node0, children.get(0)); assertEquals(node1, children.get(1)); assertEquals(node2, children.get(2)); }
[*] target: assertEquals(3, children.size())
[-] pred: org. junit. Assert. assertEquals ( 3, children. size ( ) )
************************************
[+] input: getTransitionShouldReturnNullWhenMappingDoesNotExistAndThisStateHasOneTransition() { state.addTransition((byte) 'a', new ByteState());  ByteTransition transition = state.getTransition((byte) 'b');  "<AssertPlaceHolder>"; }
[*] target: assertNull(transition)
[-] pred: org. junit. Assert. assertNull ( transition )
************************************
[+] input: test_ofEmptySource() { // when EmptySourceBuilder builder = ImagePipes.ofEmptySource();  // then Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(builder)
[-] pred: org. junit. Assert. assertNotNull ( builder )
************************************
[+] input: testGettingRequired() { TaskDescriptionProvider provider = TaskDescriptionProvider.getDefault(); String required = provider.getRequiredAttributeForTaskAttribute("apply", "executable"); //$NON-NLS-1$ //$NON-NLS-2$ "<AssertPlaceHolder>"; assertEquals("yes", required); //$NON-NLS-1$ }
[*] target: assertNotNull(required)
[-] pred: org. junit. Assert. assertNotNull ( required )
************************************
[+] input: Exception {  // // Mangled: _ZN13SoloGimbalEKFUt_C2Ev // // Demangled: SoloGimbalEKF::{unnamed type#1}::SoloGimbalEKF() // String mangled = "_ZN13SoloGimbalEKFUt_C2Ev"; String demangled = process.demangle(mangled);  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  String signature = object.getSignature(false); assertEquals("undefined SoloGimbalEKF::{unnamed_type#1}::SoloGimbalEKF(void)", signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: testAllClientId() { Collection<String> allClientIds = persistentIpPortClientManager.allClientId(); assertEquals(1, allClientIds.size()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(allClientIds.contains(clientId))
[-] pred: org. junit. Assert. assertTrue ( allClientIds. contains ( clientId ) )
************************************
[+] input: Exception {  // create test server byte[] toSend = toByteArray(this.getClass().getResourceAsStream("/flows/" + TEST_FILE)); MiniServer server = new MiniServer(toSend.length); server.start();  // create command final SendFlowCmd cmd = new SendFlowCmd(); cmd.file = TEST_FILE; cmd.host = "localhost"; await().await() .atMost(Duration.ofSeconds(1)) .until(() -> server.getPort() > 0); // wait until we have an assigned port cmd.port = server.getPort();  // send package cmd.execute(); await().await().atMost(Duration.ofSeconds(1)).until(server::hasReceived); // wait until the packet was received  // check byte[] result = server.getBytes(); "<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(toSend, result)
[-] pred: org. junit. Assert. assertArrayEquals ( toSend, result )
************************************
[+] input: testIsValidHexColor() { String hexColor = "#ff00ff";  boolean result = Format.isValidHexColor(hexColor); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testDeleteRuleChain() { RuleChain ruleChain = new RuleChain(); ruleChain.setTenantId(tenantId); ruleChain.setName("My RuleChain"); RuleChain savedRuleChain = ruleChainService.saveRuleChain(ruleChain); RuleChain foundRuleChain = ruleChainService.findRuleChainById(tenantId, savedRuleChain.getId()); Assert.assertNotNull(foundRuleChain); ruleChainService.deleteRuleChainById(tenantId, savedRuleChain.getId()); foundRuleChain = ruleChainService.findRuleChainById(tenantId, savedRuleChain.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(foundRuleChain)
[-] pred: org. junit. Assert. assertNull ( foundRuleChain )
************************************
[+] input: Exception {  DockingAction copySpecialAction = getAction(codeBrowserClipboardProvider, COPY_SPECIAL_ACTION_NAME); waitForSwing(); assertFalse(copySpecialAction.isEnabled());  codeBrowserPlugin.goTo(new MnemonicFieldLocation(program, addr("1001050"))); assertTrue(copySpecialAction.isEnabled());  copySpecial(codeViewerWrapper, copySpecialAction); String clipboardContents = getClipboardContents(); String expectedBytes = "0e"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedBytes, clipboardContents)
[-] pred: org. junit. Assert. assertEquals ( expectedBytes, clipboardContents )
************************************
[+] input: simpleLineReaderWithoutNL() { SimpleLineReader simpleLineReader = new SimpleLineReader(new Document("=")); assertEquals("=", simpleLineReader.readLine()); "<AssertPlaceHolder>"; }
[*] target: assertNull(simpleLineReader.readLine())
[-] pred: org. junit. Assert. assertNull ( simpleLineReader. readLine() )
************************************
[+] input: iterator_returnsEmptyIteratorForEmptyMap() { IntIntMap map = new IntIntMap(); Iterator<IntIntMap.Entry> iter = map.entries().iterator(); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(iter.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iter. hasNext() )
************************************
[+] input: testDeleteApiDestination() { Mockito.when(apiDestinationRepository.getApiDestination(any(), any())).thenReturn(new ApiDestinationDTO()); final Boolean aBoolean = apiDestinationService.deleteApiDestination(UUID.randomUUID().toString(), UUID.randomUUID().toString()); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(aBoolean)
[-] pred: org. junit. Assert. assertTrue ( aBoolean )
************************************
[+] input: testCreateLocalSymbolStore() { SymbolServer symbolServer = symbolServerInstanceCreatorRegistry .newSymbolServer(temporaryDir.getPath(), symbolServerInstanceCreatorContext); "<AssertPlaceHolder>"; assertTrue(symbolServer instanceof LocalSymbolStore); }
[*] target: assertNotNull(symbolServer)
[-] pred: org. junit. Assert. assertNotNull ( symbolServer )
************************************
[+] input: test() { ConfigUtil configUtil = new ConfigUtil(); assertFalse(configUtil.isPropertyNamesCacheEnabled());  System.setProperty(ApolloClientSystemConsts.APOLLO_PROPERTY_NAMES_CACHE_ENABLE, "true"); configUtil = new ConfigUtil(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(configUtil.isPropertyNamesCacheEnabled())
[-] pred: org. junit. Assert. assertTrue ( configUtil. isPropertyNamesCacheEnabled() )
************************************
[+] input: testSignString() { String stringToSign = "1576478257344\n/configs/100004458/default/application?ip=10.0.0.1"; String accessKeySecret = "df23df3f59884980844ff3dada30fa97";  String actualSignature = HmacSha1Utils.signString(stringToSign, accessKeySecret);  String expectedSignature = "EoKyziXvKqzHgwx+ijDJwgVTDgE="; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSignature, actualSignature)
[-] pred: org. junit. Assert. assertEquals ( expectedSignature, actualSignature )
************************************
[+] input: Exception {  // // Mangled: _Z11wrap_360_cdIiEDTcl8wrap_360fp_Lf42c80000EEET_ // // Demangled: decltype (wrap_360({parm#1}, (float)[42c80000])) wrap_360_cd<int>(int) // // 'wrap_360_cd<int>(int)' is a function that takes an int and then passes that int along // with a constant value to 'wrap_360<int>' by using a lambda function.  It looks like // this: //     auto wrap_360_cd<int>(int a) -> decltype(wrap_360(angle, 100.f)) // // where the function is declared with this syntax: // 	   auto identifier ( argument-declarations... ) -> return_type //  String mangled = "_Z11wrap_360_cdIiEDTcl8wrap_360fp_Lf42c80000EEET_"; String demangled = process.demangle(mangled);  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  String signature = object.getSignature(false); assertEquals("undefined wrap_360_cd<int>(int)", signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: NacosException { String ns = "ns1"; ServiceInfoHolder holder = Mockito.mock(ServiceInfoHolder.class); Properties props = new Properties(); props.setProperty("serverAddr", "localhost"); InstancesChangeNotifier notifier = new InstancesChangeNotifier(); NamingClientProxyDelegate delegate = new NamingClientProxyDelegate(ns, holder, props, notifier); Service service = delegate.queryService("a", "b"); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(service)
[-] pred: org. junit. Assert. assertNull ( service )
************************************
[+] input: testGetOrCreateClientDefault() { OpenSergoClientManager manager = new OpenSergoClientManager(); OpenSergoClient client1 = manager.getOrCreateClient("127.0.0.1", 12345); OpenSergoClient client2 = manager.getOrCreateClient("127.0.0.1", 12345); OpenSergoClient client3 = manager.getOrCreateClient("1.2.3.4", 12345);  "<AssertPlaceHolder>"; assertNotEquals(client1, client3); }
[*] target: assertSame(client1, client2)
[-] pred: org. junit. Assert. assertSame ( client1, client2 )
************************************
[+] input: upperCase() { // given String nativeSql = "INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,?,?)"; Object[] parameters = Stream.of("d1", 1, 123, 3.14, 220, 4).toArray();  // when String actual = Utils.getNativeSql(nativeSql, parameters);  // then String expected = "INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (123,3.14,220,4)"; Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getAppShortcutInfo_allowMissing_invalidComponent() { initCursor(ITEM_TYPE_APPLICATION, ""); assertTrue(mLoaderCursor.moveToNext());  ComponentName cn = new ComponentName(mContext.getPackageName(), "dummy-do"); ShortcutInfo info = mLoaderCursor.getAppShortcutInfo( new Intent().setComponent(cn), true  /* allowMissingTarget */, true); "<AssertPlaceHolder>"; assertTrue(Utilities.isLauncherAppTarget(info.intent)); }
[*] target: assertNotNull(info)
[-] pred: org. junit. Assert. assertNotNull ( info )
************************************
[+] input: Exception { createLabel(addr(100), "primary"); createLabel(addr(100), "fred"); createLabel(addr(100), "joe"); Namespace scope = st.createNameSpace(null, "MyNamespace", SourceType.USER_DEFINED); createLabel(addr(200), "fred", scope); Symbol s = st.getSymbol("fred", addr(200), scope); "<AssertPlaceHolder>"; assertTrue(!s.isGlobal()); assertTrue(s.getSource() == SourceType.USER_DEFINED); }
[*] target: assertNotNull(s)
[-] pred: org. junit. Assert. assertNotNull ( s )
************************************
[+] input: testNonComparableItems_Forward() { List<TestItem> data = new ArrayList<>(); data.add(new TestItem(1)); data.add(new TestItem(2)); data.add(new TestItem(3));  PeekableIterator<TestItem> peekable = new WrappingPeekableIterator<>(data.iterator()); List<PeekableIterator<TestItem>> list = Arrays.asList(peekable);  MultiIterator<TestItem> iterator = new MultiIterator<>(list, true); try { iterator.next(); Assert.fail("Should have failed because elements are not comparable"); } catch (AssertException e) { // good! }  iterator = new MultiIterator<>(list, new TestItemComparator(), true);  assertTrue(iterator.hasNext()); Assert.assertEquals(new TestItem(1), iterator.next()); assertTrue(iterator.hasNext()); Assert.assertEquals(new TestItem(2), iterator.next()); assertTrue(iterator.hasNext()); Assert.assertEquals(new TestItem(3), iterator.next()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext() )
************************************
[+] input: IOException { String fileName = "file.txt"; byte[] fileContent = {'a', 'b', 'c'}; BAOStreamBuilder builder = initProto(true); ByteArrayInputStream istream = builder.getStream(); MockConnection connection = new MockConnection(istream);  File tmpFile = temporaryFolder.newFile(fileName); FileOutputStream fileOutputStream = new FileOutputStream(tmpFile); fileOutputStream.write(fileContent); fileOutputStream.close(); Uri uri = Uri.fromFile(tmpFile); PendingFile pendingFile = new PendingFile(uri, fileName, fileContent.length); LinkedList<PendingFile> files = new LinkedList<>(); files.push(pendingFile); FSUtils utils = new FSUtils(context, activity, files); Proto proto = ProtocolSelector.getProto(connection, utils, notifier); "<AssertPlaceHolder>"; proto.close();  builder = new BAOStreamBuilder(); builder.addByte(MAX_PROTO); builder.addByte(1); builder.addByte(4); builder.addString(fileName); builder.addData(fileContent); byte[] expected = builder.getArray(); assertArrayEquals(expected, connection.getOutputBytes()); }
[*] target: assertTrue(proto.sendFile())
[-] pred: org. junit. Assert. assertTrue ( proto. sendFile ( ) )
************************************
[+] input: getAllWords_shouldDisplayCurrentWords() { Trie trie = new Trie(); trie.insert("eldric"); trie.insert("seth"); trie.insert("gilbert"); trie.insert("KAI TING"); // converted to lower-case trie.insert("daniel"); trie.insert("andre");  List<String> resultA = trie.getAllWords(); Collections.sort(resultA); List<String> expectedA = Arrays.asList("eldric", "seth", "gilbert", "kai ting", "andre", "daniel"); Collections.sort(expectedA); Assert.assertEquals(expectedA, resultA);  trie.delete("daniel"); trie.delete("eldric"); List<String> resultB = trie.getAllWords(); Collections.sort(resultB); List<String> expectedB = Arrays.asList("seth", "gilbert", "kai ting", "andre"); Collections.sort(expectedB); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedB, resultB)
[-] pred: org. junit. Assert. assertEquals ( expectedB, resultB )
************************************
[+] input: testMostNorthEastNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.CompactThirteen(population, 3);  TestSuiteChromosome exepcted_individual = population.get(12); TestSuiteChromosome returned_individual = neighbors.get(6);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testClipboardMethods() { String text = "Sample text for clipboard test testClipboardMethods"; try { Context appContext = getInstrumentation().getTargetContext(); AndroidUtils androidUtils = new AndroidUtils(appContext, activity);  androidUtils.setClipboardText(text);  String received = androidUtils.getClipboardText(); "<AssertPlaceHolder>"; } catch (Exception ignored) { } }
[*] target: assertEquals(text, received)
[-] pred: org. junit. Assert. assertEquals ( text, received )
************************************
[+] input: testShouldNotPutInCacheRolledbackAssetProfile() { AssetProfile assetProfile = new AssetProfile(); assetProfile.setName(StringUtils.randomAlphabetic(10)); assetProfile.setTenantId(tenantId);  Asset asset = new Asset(); asset.setName("My asset" + StringUtils.randomAlphabetic(15)); asset.setType(assetProfile.getName()); asset.setTenantId(tenantId);  DefaultTransactionDefinition def = new DefaultTransactionDefinition(); TransactionStatus status = platformTransactionManager.getTransaction(def); try { assetProfileService.saveAssetProfile(assetProfile); assetService.saveAsset(asset); } finally { platformTransactionManager.rollback(status); } AssetProfile assetProfileByName = assetProfileService.findAssetProfileByName(tenantId, assetProfile.getName()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(assetProfileByName)
[-] pred: org. junit. Assert. assertNull ( assetProfileByName )
************************************
[+] input: IllegalAccessException { timeoutMillsField.set(rpcClient, 5000L); retryTimesField.set(rpcClient, 3); rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING); rpcClient.currentConnection = connection; doThrow(NacosException.class).when(connection).requestFuture(any()); Exception exception = null;  try { rpcClient.requestFuture(null); } catch (NacosException e) { exception = e; }  verify(connection, times(3)).requestFuture(any()); verify(rpcClient).switchServerAsyncOnRequestFail(); Assert."<AssertPlaceHolder>"; Assert.assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get()); }
[*] target: assertNotNull(exception)
[-] pred: org. junit. Assert. assertNotNull ( exception )
************************************
[+] input: Exception { Assume.assumeFalse(TinkFips.useOnlyFips());  JsonObject json = WycheproofTestUtil.readJson( "../wycheproof/testvectors/chacha20_poly1305_test.json"); int errors = 0; JsonArray testGroups = json.getAsJsonArray("testGroups"); for (int i = 0; i < testGroups.size(); i++) { JsonObject group = testGroups.get(i).getAsJsonObject(); JsonArray tests = group.getAsJsonArray("tests"); for (int j = 0; j < tests.size(); j++) { JsonObject testcase = tests.get(j).getAsJsonObject(); String tcId = String.format( "testcase %d (%s)", testcase.get("tcId").getAsInt(), testcase.get("comment").getAsString()); byte[] iv = Hex.decode(testcase.get("iv").getAsString()); byte[] key = Hex.decode(testcase.get("key").getAsString()); byte[] msg = Hex.decode(testcase.get("msg").getAsString()); byte[] aad = Hex.decode(testcase.get("aad").getAsString()); byte[] ct = Hex.decode(testcase.get("ct").getAsString()); byte[] tag = Hex.decode(testcase.get("tag").getAsString()); byte[] ciphertext = Bytes.concat(iv, ct, tag); // Result is one of "valid", "invalid", "acceptable". // "valid" are test vectors with matching plaintext, ciphertext and tag. // "invalid" are test vectors with invalid parameters or invalid ciphertext and tag. // "acceptable" are test vectors with weak parameters or legacy formats. String result = testcase.get("result").getAsString(); try { Aead aead = createInstance(key); byte[] decrypted = aead.decrypt(ciphertext, aad); boolean eq = TestUtil.arrayEquals(decrypted, msg); if (result.equals("invalid")) { System.out.printf( "FAIL %s: accepting invalid ciphertext, cleartext: %s, decrypted: %s%n", tcId, Hex.encode(msg), Hex.encode(decrypted)); errors++; } else { if (!eq) { System.out.printf( "FAIL %s: incorrect decryption, result: %s, expected: %s%n", tcId, Hex.encode(decrypted), Hex.encode(msg)); errors++; } } } catch (GeneralSecurityException ex) { if (result.equals("valid")) { System.out.printf("FAIL %s: cannot decrypt, exception %s%n", tcId, ex); errors++; } } } } "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors)
[-] pred: org. junit. Assert. assertEquals ( 0, errors )
************************************
[+] input: Exception { Category sub1 = root.createCategory("SubCat-A"); Category s = sub1.createCategory("Sub-cat"); DataTypeManager dtm = s.getDataTypeManager(); "<AssertPlaceHolder>"; assertEquals(dataMgr, dtm); }
[*] target: assertNotNull(dtm)
[-] pred: org. junit. Assert. assertNotNull ( dtm )
************************************
[+] input: testNextManyTimesWithoutCallingHasNext_Fowrard() { PeekableIterator<Integer> peekable = new NumberPeekableIterator(1, 2, 3);  List<PeekableIterator<Integer>> list = Arrays.asList(peekable); MultiIterator<Integer> iterator = new MultiIterator<>(list, true);  iterator.next(); // 1 iterator.next(); // 2 iterator.next(); // 3 "<AssertPlaceHolder>"; }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext() )
************************************
[+] input: Exception { Assume.assumeFalse(TinkFips.useOnlyFips()); Assume.assumeTrue(InsecureNonceChaCha20Poly1305Jce.isSupported());  JsonObject json = WycheproofTestUtil.readJson( "../wycheproof/testvectors/chacha20_poly1305_test.json"); int errors = 0; JsonArray testGroups = json.getAsJsonArray("testGroups"); for (int i = 0; i < testGroups.size(); i++) { JsonObject group = testGroups.get(i).getAsJsonObject(); JsonArray tests = group.getAsJsonArray("tests"); for (int j = 0; j < tests.size(); j++) { JsonObject testcase = tests.get(j).getAsJsonObject(); String tcId = String.format( "testcase %d (%s)", testcase.get("tcId").getAsInt(), testcase.get("comment").getAsString()); byte[] iv = Hex.decode(testcase.get("iv").getAsString()); byte[] key = Hex.decode(testcase.get("key").getAsString()); byte[] msg = Hex.decode(testcase.get("msg").getAsString()); byte[] aad = Hex.decode(testcase.get("aad").getAsString()); byte[] ct = Hex.decode(testcase.get("ct").getAsString()); byte[] tag = Hex.decode(testcase.get("tag").getAsString()); byte[] ciphertext = Bytes.concat(ct, tag); // Result is one of "valid", "invalid", "acceptable". // "valid" are test vectors with matching plaintext, ciphertext and tag. // "invalid" are test vectors with invalid parameters or invalid ciphertext and tag. // "acceptable" are test vectors with weak parameters or legacy formats. String result = testcase.get("result").getAsString(); try { InsecureNonceChaCha20Poly1305Jce cipher = createInstance(key);  // Some test-cases use the same IV, which makes the JDK implementation of this cipher // fail, because it detects IV re-use. // To prevent this we first call encrypt with a random iv. byte[] unused = cipher.encrypt(Random.randBytes(NONCE_SIZE_IN_BYTES), msg, aad);  // Encryption. byte[] encrypted = cipher.encrypt(iv, msg, aad); boolean ciphertextMatches = TestUtil.arrayEquals(encrypted, ciphertext); if (result.equals("valid") && !ciphertextMatches) { System.err.printf( "FAIL %s: incorrect encryption, result: %s, expected: %s%n", tcId, Hex.encode(encrypted), Hex.encode(ciphertext)); errors++; } // Decryption. byte[] decrypted = cipher.decrypt(iv, ciphertext, aad); boolean plaintextMatches = TestUtil.arrayEquals(decrypted, msg); if (result.equals("invalid")) { System.out.printf( "FAIL %s: accepting invalid ciphertext, cleartext: %s, decrypted: %s%n", tcId, Hex.encode(msg), Hex.encode(decrypted)); errors++; } else { if (!plaintextMatches) { System.out.printf( "FAIL %s: incorrect decryption, result: %s, expected: %s%n", tcId, Hex.encode(decrypted), Hex.encode(msg)); errors++; } } } catch (GeneralSecurityException ex) { if (result.equals("valid")) { System.out.printf("FAIL %s: cannot decrypt, exception %s%n", tcId, ex); errors++; } } } } "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, errors)
[-] pred: org. junit. Assert. assertEquals ( 0, errors )
************************************
[+] input: IOException { // given InputStream is = TestUtils.getResourceStream("input/sequence.pdf");  // when InputStreamPdfSource source = new InputStreamPdfSource(is); PDDocument document = source.doLoad();  // then Assert."<AssertPlaceHolder>"; // The PDF file has only 3 pages. Assert.assertEquals(3, document.getNumberOfPages()); }
[*] target: assertNotNull(document)
[-] pred: org. junit. Assert. assertNotNull ( document )
************************************
[+] input: testExtractCommentValueA() { String expectComment = "test"; List<String> columnSpecs = Arrays.asList("comment", "test"); String actualComment = schemaManager.extractComment(columnSpecs); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectComment, actualComment)
[-] pred: org. junit. Assert. assertEquals ( expectComment, actualComment )
************************************
[+] input: ClassNotFoundException { String cvc4_path = System.getenv("cvc4_path"); if (cvc4_path != null) { Properties.CVC4_PATH = cvc4_path; } Assume.assumeTrue(Properties.CVC4_PATH!=null); Properties.DSE_SOLVER = Properties.SolverType.CVC4_SOLVER; Properties.CRITERION = new Properties.Criterion[] { Criterion.BRANCH }; Properties.TARGET_CLASS = Foo.class.getName();  TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  BranchCoverageSuiteFitness branchCoverageSuiteFitness = new BranchCoverageSuiteFitness(); TestSuiteChromosome suite = new TestSuiteChromosome(); suite.addFitness(branchCoverageSuiteFitness); branchCoverageSuiteFitness.getFitness(suite);  // no goals covered yet int coveredGoals0 = suite.getNumOfCoveredGoals(); int notCoveredGoals0 = suite.getNumOfNotCoveredGoals(); assertEquals(0, coveredGoals0); assertNotEquals(0, notCoveredGoals0);  DefaultTestCase testCase0 = buildTestCase0(); TestChromosome testChromosome0 = new TestChromosome(); testChromosome0.setTestCase(testCase0); suite.addTest(testChromosome0);  double fitnessBeforeLocalSearch = branchCoverageSuiteFitness.getFitness(suite); int coveredGoalsBeforeLocalSearch = suite.getNumOfCoveredGoals();  // some goal was covered assertTrue(coveredGoalsBeforeLocalSearch > 0);  DefaultTestCase duplicatedTestCase0 = buildTestCase0(); TestChromosome duplicatedTestChromosome0 = new TestChromosome(); duplicatedTestChromosome0.setTestCase(duplicatedTestCase0); suite.addTest(duplicatedTestChromosome0);  TestSuiteLocalSearchObjective localSearchObjective = TestSuiteLocalSearchObjective .buildNewTestSuiteLocalSearchObjective(Collections.singletonList(branchCoverageSuiteFitness), suite, 1);  DSETestCaseLocalSearch localSearch = new DSETestCaseLocalSearch(); boolean improved = localSearch.doSearch(duplicatedTestChromosome0, localSearchObjective); "<AssertPlaceHolder>";  double fitnessAfterLocalSearch = branchCoverageSuiteFitness.getFitness(suite); int coveredGoalsAfterLocalSearch = suite.getNumOfCoveredGoals();  assertTrue(fitnessAfterLocalSearch < fitnessBeforeLocalSearch); assertTrue(coveredGoalsAfterLocalSearch > coveredGoalsBeforeLocalSearch);  }
[*] target: assertTrue(improved)
[-] pred: org. junit. Assert. assertTrue ( improved )
************************************
[+] input: test() { DifficultDependencyClass dependency = new DifficultDependencyClass(); dependency.inc(); dependency.inc(); dependency.inc(); dependency.inc(); dependency.inc(); dependency.inc(); dependency.inc(); dependency.inc(); dependency.inc(); dependency.inc(); DifficultClassWithoutCarving foo = new DifficultClassWithoutCarving(); boolean result = foo.testMe(dependency); "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: isAvailable_channelScreen_never() { mController.onResume( new NotificationBackend.AppRow(), mock(NotificationChannel.class), null, null, null, null); "<AssertPlaceHolder>"; }
[*] target: assertFalse(mController.isAvailable())
[-] pred: org. junit. Assert. assertFalse ( mController. isAvailable() )
************************************
[+] input: testInitializeClasses() {   SmartUtClassLoader loader = new SmartUtClassLoader(); String className = "com.examples.with.different.packagename.classhandling.TimeA"; //no mocking RuntimeSettings.deactivateAllMocking(); boolean problem = ClassStateSupport.initializeClasses(loader, className); Assert.assertFalse(problem);  //with mocking RuntimeSettings.mockJVMNonDeterminism = true; className = "com.examples.with.different.packagename.classhandling.TimeB"; problem = ClassStateSupport.initializeClasses(loader,className); Assert."<AssertPlaceHolder>"; }
[*] target: assertFalse(problem)
[-] pred: org. junit. Assert. assertFalse ( problem )
************************************
[+] input: testConstructorRoot3() { CategoryPath c = new CategoryPath(""); assertEquals("/", c.getPath()); assertEquals("", c.getName()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(c.isRoot())
[-] pred: org. junit. Assert. assertTrue ( c. isRoot() )
************************************
[+] input: hasNoTransitionsShouldReturnFalseWhenThisStateHasTransitions() { state.addTransition((byte) 'a', new ByteState());  boolean hasNoTransitions = state.hasNoTransitions();  "<AssertPlaceHolder>"; }
[*] target: assertFalse(hasNoTransitions)
[-] pred: org. junit. Assert. assertFalse ( hasNoTransitions )
************************************
[+] input: SQLException { Statement stmt = conn.createStatement();  stmt.execute("drop table if exists weather_test"); stmt.execute("create table weather_test(ts timestamp, f1 nchar(10), f2 binary(10)) tags (t1 int, t2 binary(10))");  int numOfRows = 1;  TSDBPreparedStatement s = (TSDBPreparedStatement) conn.prepareStatement("insert into ? using weather_test tags(?,?) (ts, f2) values(?, ?)"); s.setTableName("w2"); s.setTagInt(0, 1); s.setTagString(1, "test");   ArrayList<Long> ts = new ArrayList<>(); for (int i = 0; i < numOfRows; i++) { ts.add(System.currentTimeMillis() + i); } s.setTimestamp(0, ts);  ArrayList<String> s2 = new ArrayList<>(); for (int i = 0; i < numOfRows; i++) { s2.add("test" + i % 4); } s.setString(1, s2, 10);  s.columnDataAddBatch(); s.columnDataExecuteBatch(); s.columnDataCloseBatch();  String sql = "select * from weather_test"; PreparedStatement statement = conn.prepareStatement(sql); ResultSet rs = statement.executeQuery(); int rows = 0; while (rs.next()) { rows++; } Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(numOfRows, rows)
[-] pred: org. junit. Assert. assertEquals ( numOfRows, rows )
************************************
[+] input: testGetVertexTypes() { List<String> types = graphType.getVertexTypes(); "<AssertPlaceHolder>"; assertEquals("V1", types.get(0)); assertEquals("V2", types.get(1)); assertEquals("V3", types.get(2)); }
[*] target: assertEquals(3, types.size())
[-] pred: org. junit. Assert. assertEquals ( 3, types. size ( ) )
************************************
[+] input: remove_canRemoveValues() { IntIntMap map = new IntIntMap(); Assert.assertEquals(IntIntMap.NO_VALUE, map.remove(0)); map.put(1234, 5678); Assert.assertEquals(5678, map.remove(1234)); Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(map.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( map. isEmpty() )
************************************
[+] input: testGetNewAddressSpace() { AddressSpace space = trans12.getNewAddressSpace("ram"); "<AssertPlaceHolder>"; assertEquals("ram", space.getName()); }
[*] target: assertNotNull(space)
[-] pred: org. junit. Assert. assertNotNull ( space )
************************************
[+] input: testCreateHttpsSymbolServer() { SymbolServer symbolServer = symbolServerInstanceCreatorRegistry .newSymbolServer("https://localhost/blah", symbolServerInstanceCreatorContext); "<AssertPlaceHolder>"; assertTrue(symbolServer instanceof HttpSymbolServer); }
[*] target: assertNotNull(symbolServer)
[-] pred: org. junit. Assert. assertNotNull ( symbolServer )
************************************
[+] input: Exception { doReturn(true).when(mIDumpstateDevice).getVerboseLoggingEnabled();  mController.onPreferenceChange(mPreference, true /* new value */);  final boolean enabled = mController.getVerboseLoggingEnabled(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(enabled)
[-] pred: org. junit. Assert. assertTrue ( enabled )
************************************
[+] input: shouldFilterOtherNotificationWhenDisabled() { // GIVEN that the media feature is disabled when(mMediaFeatureFlag.getEnabled()).thenReturn(false); NotificationFilter filter = new NotificationFilter(mStatusBarStateController, mMediaFeatureFlag); // WHEN the media filter is asked about an entry NotificationEntry otherEntry = new NotificationEntryBuilder().build(); final boolean shouldFilter = filter.shouldFilterOut(otherEntry); // THEN it shouldn't be filtered "<AssertPlaceHolder>"; }
[*] target: assertFalse(shouldFilter)
[-] pred: org. junit. Assert. assertFalse ( shouldFilter )
************************************
[+] input: Exception { ExpandableNotificationRow row = mNotificationTestHelper.createRow(mNotificationTestHelper.createNotification()); row.getEntry().getChannel().setImportanceLockedByOEM(true);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(row.getIsNonblockable())
[-] pred: org. junit. Assert. assertTrue ( row. getIsNonblockable ( ) )
************************************
[+] input: testFindDefaultAssetProfile() { AssetProfile foundDefaultAssetProfile = assetProfileService.findDefaultAssetProfile(tenantId); Assert."<AssertPlaceHolder>"; Assert.assertNotNull(foundDefaultAssetProfile.getId()); Assert.assertNotNull(foundDefaultAssetProfile.getName()); }
[*] target: assertNotNull(foundDefaultAssetProfile)
[-] pred: org. junit. Assert. assertNotNull ( foundDefaultAssetProfile )
************************************
[+] input: IllegalAccessException { int beforeSize = ((Queue<?>) reconnectionSignalField.get(rpcClient)).size(); rpcClient.currentConnection = mock(Connection.class);  rpcClient.onServerListChange();  int afterSize = ((Queue<?>) reconnectionSignalField.get(rpcClient)).size(); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(beforeSize, afterSize)
[-] pred: org. junit. Assert. assertEquals ( beforeSize, afterSize )
************************************
[+] input: testWildcardAddTwiceDeleteOnceNormalPositionWildcard() { ByteMachine cut = new ByteMachine(); cut.addPattern(Patterns.wildcardMatch("h*llo")); cut.addPattern(Patterns.wildcardMatch("h*llo")); cut.deletePattern(Patterns.wildcardMatch("h*llo")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cut.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cut. isEmpty() )
************************************
[+] input: Exception { AddressSet as1 = new AddressSet(); as1.addRange(addr("0x1001100"), addr("0x1001120")); as1.addRange(addr("0x1001150"), addr("0x1001180")); as1.addRange(addr("0x1001200"), addr("0x1001210")); as1.addRange(addr("0x1001260"), addr("0x1001280")); AddressSet as2 = new AddressSet(); as2.addRange(addr("0x1001090"), addr("0x1001130")); as2.addRange(addr("0x1001170"), addr("0x1001190")); as2.addRange(addr("0x1001230"), addr("0x1001240")); as2.addRange(addr("0x1001250"), addr("0x1001270")); AddressSet as3 = new AddressSet(); as3.addRange(addr("0x1001132"), addr("0x1001132")); as3.addRange(addr("0x1001175"), addr("0x1001175")); as3.addRange(addr("0x1001205"), addr("0x1001235"));  AddressSet multiSet = new AddressSet(); multiSet.addRange(addr("0x1001090"), addr("0x1001130")); multiSet.addRange(addr("0x1001132"), addr("0x1001132")); multiSet.addRange(addr("0x1001150"), addr("0x1001190")); multiSet.addRange(addr("0x1001200"), addr("0x1001240")); multiSet.addRange(addr("0x1001250"), addr("0x1001280")); AddressIterator ai; MultiAddressIterator iter;  // Forward tests boolean forward = true; while (true) { ai = multiSet.getAddresses(forward); iter = new MultiAddressIterator(new AddressIterator[] { as1.getAddresses(forward), as2.getAddresses(forward), as3.getAddresses(forward) }, forward); while (iter.hasNext()) { assertTrue(ai.hasNext()); Address expectedAddress = ai.next(); Address actualAddress = iter.next(); assertEquals(expectedAddress, actualAddress); }  ai = multiSet.getAddresses(forward); iter = new MultiAddressIterator(new AddressIterator[] { as1.getAddresses(forward), as3.getAddresses(forward), as2.getAddresses(forward) }, forward); while (iter.hasNext()) { assertTrue(ai.hasNext()); Address expectedAddress = ai.next(); Address actualAddress = iter.next(); assertEquals(expectedAddress, actualAddress); }  ai = multiSet.getAddresses(forward); iter = new MultiAddressIterator(new AddressIterator[] { as2.getAddresses(forward), as3.getAddresses(forward), as1.getAddresses(forward) }, forward); while (iter.hasNext()) { assertTrue(ai.hasNext()); Address expectedAddress = ai.next(); Address actualAddress = iter.next(); assertEquals(expectedAddress, actualAddress); }  ai = multiSet.getAddresses(forward); iter = new MultiAddressIterator(new AddressIterator[] { as2.getAddresses(forward), as1.getAddresses(forward), as3.getAddresses(forward) }, forward); while (iter.hasNext()) { assertTrue(ai.hasNext()); Address expectedAddress = ai.next(); Address actualAddress = iter.next(); assertEquals(expectedAddress, actualAddress); }  ai = multiSet.getAddresses(forward); iter = new MultiAddressIterator(new AddressIterator[] { as3.getAddresses(forward), as2.getAddresses(forward), as1.getAddresses(forward) }, forward); while (iter.hasNext()) { assertTrue(ai.hasNext()); Address expectedAddress = ai.next(); Address actualAddress = iter.next(); assertEquals(expectedAddress, actualAddress); }  ai = multiSet.getAddresses(forward); iter = new MultiAddressIterator(new AddressIterator[] { as3.getAddresses(forward), as1.getAddresses(forward), as2.getAddresses(forward) }, forward); while (iter.hasNext()) { assertTrue(ai.hasNext()); Address expectedAddress = ai.next(); Address actualAddress = iter.next(); "<AssertPlaceHolder>"; } if (!forward) { break; } forward = false;// Change to backwards and do again } }
[*] target: assertEquals(expectedAddress, actualAddress)
[-] pred: org. junit. Assert. assertEquals ( expectedAddress, actualAddress )
************************************
[+] input: testAddBubble() { mBubbleController.updateBubble(mRow.getEntry()); "<AssertPlaceHolder>";  assertFalse(mSysUiStateBubblesExpanded); }
[*] target: assertTrue(mBubbleController.hasBubbles())
[-] pred: org. junit. Assert. assertTrue ( mBubbleController. hasBubbles() )
************************************
[+] input: Exception {  InnerClassFactory.TagFormatter tagFormatter = InnerClassFactory.createTagFormatter();  boolean shouldWrap = tagFormatter.lineRequiresWrap( "\t\t  <myElement attribute1="value1" attribute2="value2" />", //$NON-NLS-1$ 70, 8); boolean shouldNotWrap = tagFormatter.lineRequiresWrap( "\t\t <myElement attribute1="value1" attribute2="value2" />", //$NON-NLS-1$ 70, 8); "<AssertPlaceHolder>"; assertFalse(shouldNotWrap);  }
[*] target: assertTrue(shouldWrap)
[-] pred: org. junit. Assert. assertTrue ( shouldWrap )
************************************
[+] input: whenResolve_withProperty_success() { String submodelId = "http://example.org/submodel"; String submodelElementIdShort = "foo"; SubmodelElement expected = new DefaultProperty.Builder() .idShort(submodelElementIdShort) .value("bar") .build(); Environment environment = new DefaultEnvironment.Builder() .submodels(new DefaultSubmodel.Builder() .id(submodelId) .submodelElements(expected) .build()) .build(); Reference reference = new DefaultReference.Builder() .keys(new DefaultKey.Builder() .type(KeyTypes.SUBMODEL) .value(submodelId) .build()) .keys(new DefaultKey.Builder() .type(KeyTypes.SUBMODEL_ELEMENT) .value(submodelElementIdShort) .build()) .build(); Referable actual = AasUtils.resolve(reference, environment); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: addNewFlight() { // expected data init AirportCompany airport_x = new AirportCompany(1, "Airport X", new ArrayList<>()); // new ArrayList<>(); Flight expectedFlight = new Flight(1, "Flight-XYZ", 50, 300, new Date(), new Date(), null, null, airport_x); AirportCompany updatedAirport_X = new AirportCompany(1, "Airport X", Arrays.asList(expectedFlight));  // stub - when when(airportCompanyRepository.findById(any())).thenReturn(Optional.of(airport_x)); when(flightService.getFlight(any())).thenReturn(expectedFlight); when(airportCompanyRepository.save(airport_x)).thenReturn(updatedAirport_X);  // then boolean actualStatus = airportCompanyService.addNewFlight(1, 1);  Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(actualStatus)
[-] pred: org. junit. Assert. assertTrue ( actualStatus )
************************************
[+] input: Exception { //given NacosRestTemplate nacosRestTemplate = mock(NacosRestTemplate.class); HttpRestResult<Object> result = new HttpRestResult<>(); result.setData("{"accessToken":"ttttttttttttttttt","tokenTtl":1000}"); result.setCode(200); when(nacosRestTemplate.postForm(any(), (Header) any(), any(), any(), any())).thenReturn(result); Properties properties = new Properties(); properties.setProperty(PropertyKeyConst.USERNAME, "aaa"); properties.setProperty(PropertyKeyConst.PASSWORD, "123456"); List<String> serverList = new ArrayList<>(); serverList.add("localhost");  NacosClientAuthServiceImpl nacosClientAuthService = new NacosClientAuthServiceImpl(); nacosClientAuthService.setServerList(serverList); nacosClientAuthService.setNacosRestTemplate(nacosRestTemplate); //when boolean ret = nacosClientAuthService.login(properties); //then Assert."<AssertPlaceHolder>"; }
[*] target: assertTrue(ret)
[-] pred: org. junit. Assert. assertTrue ( ret )
************************************
[+] input: testGetEventTypeRecorderSyncTapEvent3() { List<TapEvent> list = new ArrayList<>(); list.add(tapEvent); handler = new SyncGetMemorySizeHandler(new AtomicLong(100)); HandlerUtil.EventTypeRecorder recorder = handler.getEventTypeRecorderSyncTapEvent(list); Assert."<AssertPlaceHolder>"; Assert.assertEquals(100, recorder.getMemorySize()); }
[*] target: assertNotNull(recorder)
[-] pred: org. junit. Assert. assertNotNull ( recorder )
************************************
[+] input: testReentry() { // This is very contrived. A real use would pass ownership to some method which cannot // assume that it already holds the lock Deque<CompletableFuture<Void>> queue = new LinkedList<>(); AsyncLock l = new AsyncLock(); AtomicReference<AsyncLock.Hold> hold = new AtomicReference<>(); AtomicReference<AsyncLock.Hold> hold2 = new AtomicReference<>(); List<Integer> result = new ArrayList<>();  l.with(TypeSpec.VOID, null, hold).then((seq) -> { result.add(1); CompletableFuture<Void> future = new CompletableFuture<>(); queue.add(future); future.handle(seq::next); }).then((seq) -> { l.with(TypeSpec.VOID, hold.get(), hold2).then((seq2) -> { result.add(2); CompletableFuture<Void> future = new CompletableFuture<>(); queue.add(future); future.handle(seq2::next); }).finish().handle(seq::next); }).then((seq) -> { result.add(3); seq.exit(); });  CompletableFuture<Void> future; while (null != (future = queue.poll())) { future.complete(null); }  List<Integer> exp = Arrays.asList(new Integer[] { 1, 2, 3 }); "<AssertPlaceHolder>"; }
[*] target: assertEquals(exp, result)
[-] pred: org. junit. Assert. assertEquals ( exp, result )
************************************
[+] input: ProtocolException { BAOStreamBuilder builder = new BAOStreamBuilder(); ByteArrayInputStream istream = builder.getStream(); MockConnection connection = new MockConnection(istream); Proto proto = ProtocolSelector.getProto(connection, null, null); "<AssertPlaceHolder>"; }
[*] target: assertNull(proto)
[-] pred: org. junit. Assert. assertNull ( proto )
************************************
[+] input: ProtocolException { BAOStreamBuilder builder = new BAOStreamBuilder(); builder.addByte(PROTOCOL_UNKNOWN); ByteArrayInputStream istream = builder.getStream(); MockConnection connection = new MockConnection(istream); Proto proto = ProtocolSelector.getProto(connection, null, null); "<AssertPlaceHolder>"; }
[*] target: assertNull(proto)
[-] pred: org. junit. Assert. assertNull ( proto )
************************************
[+] input: Exception { try (UndoableTransaction tid = UndoableTransaction.start(b.trace, "Testing", true)) { staticMappingManager.add(b.range(0xdeadbeef, 0xdeadbeef + 99), Range.closedOpen(2L, 5L), new URL("ghidra://static"), "DEADBEEF"); staticMappingManager.add(b.range(0xdeadbeef, 0xdeadbeef + 99), Range.closedOpen(7L, 10L), new URL("ghidra://static"), "DEADBEEF");  assertEquals(2, staticMappingManager.getAllEntries().size());  for (TraceStaticMapping m : staticMappingManager.getAllEntries()) { m.delete(); } }  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, staticMappingManager.getAllEntries().size())
[-] pred: org. junit. Assert. assertEquals ( 0, staticMappingManager. getAllEntries(). size ( ) )
************************************
[+] input: testDumpSnapshot() { InputStream inputStream = serviceMetadataSnapshotOperation.dumpSnapshot();  Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(inputStream)
[-] pred: org. junit. Assert. assertNotNull ( inputStream )
************************************
[+] input: testMultipleIterators_DuplicateValues_DifferentIterators() { PeekableIterator<Integer> peekable1 = new NumberPeekableIterator(1, 2, 3); PeekableIterator<Integer> peekable2 = new NumberPeekableIterator(2, 4, 6); PeekableIterator<Integer> peekable3 = new NumberPeekableIterator(3, 5, 7);  List<PeekableIterator<Integer>> list = Arrays.asList(peekable1, peekable2, peekable3); MultiIterator<Integer> iterator = new MultiIterator<>(list, true);  assertTrue(iterator.hasNext()); Assert.assertEquals(new Integer(1), iterator.next()); assertTrue(iterator.hasNext()); Assert.assertEquals(new Integer(2), iterator.next()); assertTrue(iterator.hasNext()); Assert.assertEquals(new Integer(2), iterator.next()); assertTrue(iterator.hasNext()); Assert.assertEquals(new Integer(3), iterator.next()); assertTrue(iterator.hasNext()); Assert.assertEquals(new Integer(3), iterator.next()); assertTrue(iterator.hasNext()); Assert.assertEquals(new Integer(4), iterator.next()); assertTrue(iterator.hasNext()); Assert.assertEquals(new Integer(5), iterator.next()); assertTrue(iterator.hasNext()); Assert.assertEquals(new Integer(6), iterator.next()); assertTrue(iterator.hasNext()); Assert.assertEquals(new Integer(7), iterator.next()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(iterator.hasNext())
[-] pred: org. junit. Assert. assertFalse ( iterator. hasNext() )
************************************
[+] input: givenCachedClassloader_whenClassLoaderGcdAndThenLookup_thenNoClassLoaderReturned() { final ClassLoader classLoader = getClass().getClassLoader(); final ClassLoaderStore classLoaderStore = new ClassLoaderStore(); final ClassLoaderDescriptor classLoaderDescriptor = classLoaderStore.store(classLoader);  classLoaderStore.removeClassLoader(classLoader); // simulate gc final ClassLoader lookedUpClassLoader = classLoaderStore.lookup(classLoaderDescriptor);  Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(lookedUpClassLoader)
[-] pred: org. junit. Assert. assertNull ( lookedUpClassLoader )
************************************
[+] input: testLoadX509FromStream() { ByteArrayInputStream inputStream = new ByteArrayInputStream(MERCHANT_CERTIFICATE_STRING.getBytes(StandardCharsets.UTF_8)); X509Certificate certificate = PemUtil.loadX509FromStream(inputStream); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(certificate)
[-] pred: org. junit. Assert. assertNotNull ( certificate )
************************************
[+] input: testSingleCatch_Middle() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(5, 10, new ImmutableExceptionHandler("Ljava/lang/Exception;", 15));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of(new ImmutableTryBlock(5, 5, ImmutableList.of(new ImmutableExceptionHandler("Ljava/lang/Exception;", 15))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: testFormatStringLegacyColor_BothColorCodes() { String input = "&x&f&f&f&f&f&f&cHello There Austin"; String expectedResult = "&x&f&f&f&f&f&f" + BUKKIT_COLOR_CODE_PREFIX + "cHello There Austin";  String result = Format.FormatStringLegacyColor(input); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testOverlap_After_After() { TryListBuilder tlb = new TryListBuilder();  tlb.addHandler(0, 10, new ImmutableExceptionHandler("LException1;", 5)); tlb.addHandler(15, 20, new ImmutableExceptionHandler("LException2;", 6));  List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks = tlb.getTryBlocks();  List<? extends TryBlock> expected = ImmutableList.of( new ImmutableTryBlock(0, 10, ImmutableList.of(new ImmutableExceptionHandler("LException1;", 5))), new ImmutableTryBlock(15, 5, ImmutableList.of(new ImmutableExceptionHandler("LException2;", 6))));  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, tryBlocks)
[-] pred: org. junit. Assert. assertEquals ( expected, tryBlocks )
************************************
[+] input: NetException { String ip = NetUtils.getLocalIp(); "<AssertPlaceHolder>"; log.info(ip); }
[*] target: assertNotNull(ip)
[-] pred: org. junit. Assert. assertNotNull ( ip )
************************************
[+] input: testLoadPrivateKeyFromPath() { PrivateKey privateKey = PemUtil.loadPrivateKeyFromPath(MERCHANT_PRIVATE_KEY_PATH); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(privateKey)
[-] pred: org. junit. Assert. assertNotNull ( privateKey )
************************************
[+] input: Exception {  AddressSpace space1 = new GenericAddressSpace("space1", 32, AddressSpace.TYPE_RAM, 0); AddressSpace space3 = new GenericAddressSpace("space3", 32, AddressSpace.TYPE_RAM, 3); AddressFactory factory = new DefaultAddressFactory(new AddressSpace[] { space1, space3 }); space1 = factory.getAddressSpace(space1.getName()); space3 = factory.getAddressSpace(space3.getName());  OverlayAddressSpace space1Overlay = new OverlayAddressSpace("Overlay1", space1, 4, 0x20, 0x30);  Address space1Address = space1.getAddress(0x20); Address space1OverlayAddress = space1Overlay.getAddress(0x22); Address space3Address = space3.getAddress(0x70);  try { space1Address.subtract(space1OverlayAddress); } catch (IllegalArgumentException iae) { Assert.fail("Received unexpected exceptions during subtraction of addresses from " + "similar spaces"); }  try { space1OverlayAddress.subtract(space1Address); } catch (IllegalArgumentException iae) { Assert.fail("Received unexpected exceptions during subtraction of addresses from " + "similar spaces"); }  try { space3Address.subtract(space1OverlayAddress); Assert.fail("Did not receive expected exception"); } catch (IllegalArgumentException iae) { // expected }  try { space1OverlayAddress.subtract(space3Address); Assert.fail("Did not receive expected exception"); } catch (IllegalArgumentException iae) { // expected }  AddressSpace overlaySpace = space1OverlayAddress.getAddressSpace(); Assert.assertNotEquals(space1, overlaySpace);  AddressSpace nonOverlaySpace = space3Address.getAddressSpace(); Assert.assertNotEquals(overlaySpace, nonOverlaySpace);  int overlayBaseID = ((OverlayAddressSpace) overlaySpace).getBaseSpaceID(); int spaceBaseID = space1.getSpaceID(); "<AssertPlaceHolder>";  int nonBaseID = nonOverlaySpace.getSpaceID(); Assert.assertNotEquals(overlayBaseID, nonBaseID); }
[*] target: assertEquals(overlayBaseID, spaceBaseID)
[-] pred: org. junit. Assert. assertEquals ( overlayBaseID, spaceBaseID )
************************************
[+] input: testEastNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.linearFive(population, 5);  TestSuiteChromosome exepcted_individual = population.get(6); TestSuiteChromosome returned_individual = neighbors.get(2);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testDeleteAll() {  Structure s = new StructureDataType("test1", 0); s.add(new ByteDataType()); s.add(new FloatDataType());  struct.add(s);  DataType dt = struct.getDataTypeManager().getDataType(struct.getCategoryPath(), "test1"); s = (Structure) dt; s.deleteAll(); assertEquals(1, s.getLength()); assertTrue(s.isNotYetDefined()); assertTrue(s.isZeroLength()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, s.getNumComponents())
[-] pred: org. junit. Assert. assertEquals ( 0, s. getNumComponents ( ) )
************************************
[+] input: testFindDeviceInfoByTenantIdAndType() { Customer customer = new Customer(); customer.setTitle("Customer X"); customer.setTenantId(tenantId); Customer savedCustomer = customerService.saveCustomer(customer);  Device device = new Device(); device.setTenantId(tenantId); device.setName("default"); device.setType("default"); device.setLabel("label"); device.setCustomerId(savedCustomer.getId()); Device savedDevice = deviceService.saveDevice(device);  PageLink pageLinkWithLabel = new PageLink(100, 0, "label"); List<DeviceInfo> deviceInfosWithLabel = deviceService .findDeviceInfosByFilter(DeviceInfoFilter.builder().tenantId(tenantId).type(device.getType()).build(), pageLinkWithLabel).getData();  Assert.assertFalse(deviceInfosWithLabel.isEmpty()); Assert.assertTrue( deviceInfosWithLabel.stream() .anyMatch( d -> d.getId().equals(savedDevice.getId()) && d.getTenantId().equals(tenantId) && d.getDeviceProfileName().equals(savedDevice.getType()) && d.getLabel().equals(savedDevice.getLabel()) ) );  PageLink pageLinkWithCustomer = new PageLink(100, 0, savedCustomer.getTitle()); List<DeviceInfo> deviceInfosWithCustomer = deviceService .findDeviceInfosByFilter(DeviceInfoFilter.builder().tenantId(tenantId).type(device.getType()).build(), pageLinkWithCustomer).getData();  Assert."<AssertPlaceHolder>"; Assert.assertTrue( deviceInfosWithCustomer.stream() .anyMatch( d -> d.getId().equals(savedDevice.getId()) && d.getTenantId().equals(tenantId) && d.getDeviceProfileName().equals(savedDevice.getType()) && d.getCustomerId().equals(savedCustomer.getId()) && d.getCustomerTitle().equals(savedCustomer.getTitle()) ) ); }
[*] target: assertFalse(deviceInfosWithCustomer.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( deviceInfosWithCustomer. isEmpty ( ) )
************************************
[+] input: IOException { String expectedName = "admin456"; ConnectorArguments arguments = new ConnectorArguments("--connector", "abcABC123", "--user", expectedName);  String actualName = arguments.getUserOrFail();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedName, actualName)
[-] pred: org. junit. Assert. assertEquals ( expectedName, actualName )
************************************
[+] input: Exception { // // Mangled: _ZNKSt17integral_constantIbLb0EEcvbEv // // Demangled: std::integral_constant<bool, false>::operator bool() const  String mangled = "_ZNKSt17integral_constantIbLb0EEcvbEv";  String demangled = process.demangle(mangled);  DemangledObject object = parser.parse(mangled, demangled); "<AssertPlaceHolder>"; assertType(object, DemangledFunction.class);  String signature = object.getSignature(false); assertEquals("bool std::integral_constant::operator.cast.to.bool(void)", signature); }
[*] target: assertNotNull(object)
[-] pred: org. junit. Assert. assertNotNull ( object )
************************************
[+] input: isAvailable_notIfChannelBlocked() { NotificationBackend.AppRow appRow = new NotificationBackend.AppRow(); NotificationChannelGroup group = mock(NotificationChannelGroup.class); when(group.isBlocked()).thenReturn(false); NotificationChannel channel = mock(NotificationChannel.class); when(channel.getImportance()).thenReturn(IMPORTANCE_NONE);  mController.onResume(appRow, channel, group, null, null, null); "<AssertPlaceHolder>"; }
[*] target: assertFalse(mController.isAvailable())
[-] pred: org. junit. Assert. assertFalse ( mController. isAvailable() )
************************************
[+] input: testIsDefaultChannel_noChannel() { mController.onResume(mock(NotificationBackend.AppRow.class), null, null, null, null, null);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(mController.isDefaultChannel())
[-] pred: org. junit. Assert. assertFalse ( mController. isDefaultChannel() )
************************************
[+] input: testGetEdgeTypes() { List<String> types = graphType.getEdgeTypes(); "<AssertPlaceHolder>"; assertEquals("E1", types.get(0)); assertEquals("E2", types.get(1)); assertEquals("E3", types.get(2)); }
[*] target: assertEquals(3, types.size())
[-] pred: org. junit. Assert. assertEquals ( 3, types. size ( ) )
************************************
[+] input: testDeleteWidgetsBundle() { WidgetsBundle widgetsBundle = new WidgetsBundle(); widgetsBundle.setTenantId(tenantId); widgetsBundle.setTitle("My widgets bundle"); WidgetsBundle savedWidgetsBundle = widgetsBundleService.saveWidgetsBundle(widgetsBundle); WidgetsBundle foundWidgetsBundle = widgetsBundleService.findWidgetsBundleById(tenantId, savedWidgetsBundle.getId()); Assert.assertNotNull(foundWidgetsBundle); widgetsBundleService.deleteWidgetsBundle(tenantId, savedWidgetsBundle.getId()); foundWidgetsBundle = widgetsBundleService.findWidgetsBundleById(tenantId, savedWidgetsBundle.getId()); Assert."<AssertPlaceHolder>"; }
[*] target: assertNull(foundWidgetsBundle)
[-] pred: org. junit. Assert. assertNull ( foundWidgetsBundle )
************************************
[+] input: testGetNewContextRegisterValue() {  RegisterValue oldValue = (new RegisterValue(lang1.getRegister("a"), BigInteger.valueOf(1))).getBaseRegisterValue(); oldValue = (new RegisterValue(lang1.getRegister("c"), BigInteger.valueOf(3))).getBaseRegisterValue().combineValues(oldValue); RegisterValue newValue = trans13.getNewRegisterValue(oldValue); "<AssertPlaceHolder>"; Register newReg = newValue.getRegister(); assertTrue(newReg.isProcessorContext());  // field a grows from 1-bit to 4-bits, field c is truncated from 2-bit to 1-bit byte[] expectedBytes = new byte[] { (byte) 0xf4, 0, 0, 0, (byte) 0x14, 0, 0, 0 }; assertTrue("context value/mask translation failed", Arrays.equals(expectedBytes, newValue.toBytes())); }
[*] target: assertNotNull(newValue)
[-] pred: org. junit. Assert. assertNotNull ( newValue )
************************************
[+] input: testNorthEastNeighbour() {  this.constructPopulation();  Neighbourhood<TestSuiteChromosome> neighbourhood = new Neighbourhood<>(Properties.POPULATION);  List<TestSuiteChromosome> neighbors = neighbourhood.compactNine(population, 5);  TestSuiteChromosome exepcted_individual = population.get(2); TestSuiteChromosome returned_individual = neighbors.get(6);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(exepcted_individual, returned_individual)
[-] pred: org. junit. Assert. assertEquals ( exepcted_individual, returned_individual )
************************************
[+] input: testFilterChat() { String test = "I am an ass"; String expectedResult = "I am an donut";  String result = Format.FilterChat(test); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testUrlClassLoader() { List<URL> urlList = new ArrayList<>(); urlList.add(mock(URL.class)); final ClassLoader[] externalClassLoader = new ClassLoader[1]; ScriptUtil.urlClassLoader(urlClassLoader -> externalClassLoader[0] = urlClassLoader,urlList); Assert."<AssertPlaceHolder>"; }
[*] target: assertNotNull(externalClassLoader[0])
[-] pred: org. junit. Assert. assertNotNull ( externalClassLoader[0] )
************************************
[+] input: testFindDeviceProfileById() { DeviceProfile deviceProfile = this.createDeviceProfile(tenantId, "Device Profile"); DeviceProfile savedDeviceProfile = deviceProfileService.saveDeviceProfile(deviceProfile); DeviceProfile foundDeviceProfile = deviceProfileService.findDeviceProfileById(tenantId, savedDeviceProfile.getId()); Assert."<AssertPlaceHolder>"; Assert.assertEquals(savedDeviceProfile, foundDeviceProfile); }
[*] target: assertNotNull(foundDeviceProfile)
[-] pred: org. junit. Assert. assertNotNull ( foundDeviceProfile )
************************************
[+] input: testGetSelector() { Selector selector = serviceMetadata.getSelector();  Assert."<AssertPlaceHolder>"; boolean result = selector instanceof NoneSelector; Assert.assertTrue(result); }
[*] target: assertNotNull(selector)
[-] pred: org. junit. Assert. assertNotNull ( selector )
************************************
[+] input: getAppShortcutInfo_dontAllowMissing_validComponent() { initCursor(ITEM_TYPE_APPLICATION, ""); assertTrue(mLoaderCursor.moveToNext());  ComponentName cn = mLauncherApps.getActivityList(null, mLoaderCursor.user) .get(0).getComponentName(); ShortcutInfo info = mLoaderCursor.getAppShortcutInfo( new Intent().setComponent(cn), false /* allowMissingTarget */, true); "<AssertPlaceHolder>"; assertTrue(Utilities.isLauncherAppTarget(info.intent)); }
[*] target: assertNotNull(info)
[-] pred: org. junit. Assert. assertNotNull ( info )
************************************
[+] input: Exception { AddressSet as1 = new AddressSet(); as1.addRange(addr("0x1001120"), addr("0x1001120")); AddressSet as2 = new AddressSet(); as2.addRange(addr("0x1001126"), addr("0x1001126"));  AddressSet multiSet = new AddressSet(); multiSet.addRange(addr("0x1001120"), addr("0x1001120")); multiSet.addRange(addr("0x1001126"), addr("0x1001126")); AddressIterator ai; MultiAddressIterator iter;  // Forward tests boolean forward = true; while (true) { ai = multiSet.getAddresses(forward); iter = new MultiAddressIterator( new AddressIterator[] { as1.getAddresses(forward), as2.getAddresses(forward) }, forward); while (iter.hasNext()) { assertTrue(ai.hasNext()); Address expectedAddress = ai.next(); Address actualAddress = iter.next(); assertEquals(expectedAddress, actualAddress); }  ai = multiSet.getAddresses(forward); iter = new MultiAddressIterator( new AddressIterator[] { as2.getAddresses(forward), as1.getAddresses(forward) }, forward); while (iter.hasNext()) { assertTrue(ai.hasNext()); Address expectedAddress = ai.next(); Address actualAddress = iter.next(); "<AssertPlaceHolder>"; } if (!forward) { break; } forward = false;// Change to backwards and do again } }
[*] target: assertEquals(expectedAddress, actualAddress)
[-] pred: org. junit. Assert. assertEquals ( expectedAddress, actualAddress )
************************************
[+] input: testWildcardAddTwiceDeleteOnceSingleCharWildcard() { ByteMachine cut = new ByteMachine(); cut.addPattern(Patterns.wildcardMatch("*")); cut.addPattern(Patterns.wildcardMatch("*")); cut.deletePattern(Patterns.wildcardMatch("*")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(cut.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( cut. isEmpty() )
************************************
[+] input: testSaveTargetClass() { final ClassFileSaveTransformer classFileSaveTransformer = new ClassFileSaveTransformer(String.class.getName()); final byte[] classBytes = new byte[10];  classFileSaveTransformer.transform(String.class.getClassLoader(), String.class.getName(), String.class, null, classBytes);  final byte[] bytes = classFileSaveTransformer.getBytes();  Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(classBytes, bytes)
[-] pred: org. junit. Assert. assertEquals ( classBytes, bytes )
************************************
[+] input: testExtractDefaultValue() { String expectDefault = "100"; List<String> columnSpecs = Arrays.asList("default", "'100'", "comment", ""); String actualDefault = schemaManager.extractDefaultValue(DorisType.INT, columnSpecs); Assert."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectDefault, actualDefault)
[-] pred: org. junit. Assert. assertEquals ( expectDefault, actualDefault )
************************************
[+] input: testAsList_Array_Null() {  String[] array = null; List<String> list = CollectionUtils.asList(array); "<AssertPlaceHolder>"; }
[*] target: assertTrue(list.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( list. isEmpty() )
************************************
[+] input: Exception { ProgramModule root = treeManager.createRootModule("Test-One"); ProgramModule r2 = treeManager.createRootModule("Test-Two");  addBlock("TestBlock", 0x5000, 100); MemoryBlock b2 = addBlock("TestTwoBlock", 0x6000, 200); addBlock("TestThreeBlock", 0x6500, 100);  int r1FragCount = root.getChildren().length; int r2FragCount = r2.getChildren().length; assertEquals(r1FragCount, r2FragCount); assertEquals(5, r1FragCount); Address startAddr = b2.getStart(); Address endAddr = b2.getEnd(); treeManager.deleteAddressRange(startAddr, endAddr, TaskMonitorAdapter.DUMMY_MONITOR); r1FragCount = root.getChildren().length; r2FragCount = r2.getChildren().length; "<AssertPlaceHolder>"; assertEquals(4, r1FragCount); }
[*] target: assertEquals(r1FragCount, r2FragCount)
[-] pred: org. junit. Assert. assertEquals ( r1FragCount, r2FragCount )
************************************
