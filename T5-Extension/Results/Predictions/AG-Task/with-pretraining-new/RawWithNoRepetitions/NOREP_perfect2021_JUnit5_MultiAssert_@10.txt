************************************
************************************
[+] input: testCreateKeyVersionShouldReturnIdWhenCalledWithValidRsaParameter() { //given final KeyVaultFake underTest = createUnderTest(); final KeyCreateDetailedInput input = KeyCreateDetailedInput.builder() .key(new RsaKeyCreationInput(KeyType.RSA_HSM, null, null)) .build();  //when final VersionedKeyEntityId actual = underTest.createKeyVersion(KEY_NAME_1, input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(actual.version()); Assertions.assertEquals(HTTPS_LOCALHOST, actual.vault()); Assertions.assertEquals(KEY_NAME_1, actual.id()); }
createKeyVersion(@NonNull final String keyName, @NonNull final KeyCreateDetailedInput input) { Assert.isTrue(!input.isManaged() || (input.getExpiresOn() != null && input.getNotBefore() != null), "Managed key (name=" + keyName + ") must have notBefore and expiresOn parameters set!"); final VersionedKeyEntityId keyEntityId = input.getKey().getKeyType().createKey(this, keyName, input.getKey()); setKeyOperations(keyEntityId, input.getKeyOperations()); //avoid overwriting expiry if it was generated by the rotation policy if (getEntities().getReadOnlyEntity(keyEntityId).getExpiry().isEmpty()) { setExpiry(keyEntityId, input.getNotBefore(), input.getExpiresOn()); } setEnabled(keyEntityId, Objects.requireNonNullElse(input.getEnabled(), true)); setManaged(keyEntityId, input.isManaged()); addTags(keyEntityId, input.getTags()); return keyEntityId; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testIsEqualTo() { PrefixedVersion version = new PrefixedVersion("TEST #", 10); PrefixedVersion version2 = new PrefixedVersion("TEST #", 10);  assertEquals(version, version2); "<AssertPlaceHolder>";  assertTrue(version.isEqualTo(version2)); assertFalse(version.isNewerThan(version2)); assertFalse(version.isOlderThan(version2)); }
hashCode() { return Objects.hash(prefix, getVersionNumber()); }
[*] target: assertEquals(version.hashCode(), version2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( version. hashCode(), version2. hashCode() )
************************************
************************************
[+] input: shouldBuildConnectorHint() { Message message = MessageFactory.connectorHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
connectorHint() { return INSTANCE.staticMessage("connector-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: getLimitsByOrgId_whenOrgIdIsInvalid_getLimitsByOrgId() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Limit tesLimit = LimitsUtils.createTesLimit(); LimitPricingPlanViewModel tesLimitPricingPlanViewModel = LimitsUtils.createTesLimitPricingPlanViewModel();  //When when(limitRepositoryMock.findByOrganisationId(anyString())) .thenReturn(java.util.Optional.of(tesLimit));  LimitPricingPlanViewModel limitsByOrgId = limitService.getLimitsByOrgId(ORGANISATION_ID);  //Then "<AssertPlaceHolder>"; assertEquals(tesLimitPricingPlanViewModel.getOrganisationId(), limitsByOrgId.getOrganisationId()); assertEquals(tesLimitPricingPlanViewModel.getPricingPlanType(), limitsByOrgId.getPricingPlanType()); assertEquals(tesLimitPricingPlanViewModel.getProjectLimit(), limitsByOrgId.getProjectLimit()); assertEquals(tesLimitPricingPlanViewModel.getProjectUsed(), limitsByOrgId.getProjectUsed()); assertEquals(tesLimitPricingPlanViewModel.getLabelLimit(), limitsByOrgId.getLabelLimit()); assertEquals(tesLimitPricingPlanViewModel.getLabelRemaining(), limitsByOrgId.getLabelRemaining()); assertEquals(tesLimitPricingPlanViewModel.getStorageLimit(), limitsByOrgId.getStorageLimit()); assertEquals(tesLimitPricingPlanViewModel.getStorageUsed(), limitsByOrgId.getStorageUsed()); assertEquals(tesLimitPricingPlanViewModel.getAiSegLimit(), limitsByOrgId.getAiSegLimit()); assertEquals(tesLimitPricingPlanViewModel.getAiSegRemaining(), limitsByOrgId.getAiSegRemaining()); assertEquals(tesLimitPricingPlanViewModel.isApiAccess(), limitsByOrgId.isApiAccess()); assertEquals(tesLimitPricingPlanViewModel.isExternalStorage(), limitsByOrgId.isExternalStorage());  verify(limitRepositoryMock).findByOrganisationId(anyString()); verify(limitRepositoryMock, times(1)).findByOrganisationId(anyString()); verifyNoMoreInteractions(limitRepositoryMock); }
getLimitsByOrgId(String orgId) { //Permissions check DataGymSecurity.isAdminOrUser(orgId, true);  // Get Limits by OrganisationId. If there aren't any Limits, create the Limits for the current Organisation Limit limitByOrganisationIdRequired = getLimitByOrganisationIdRequired(orgId);  return LimitMapper.mapToLimitPricingPlanViewModel(limitByOrganisationIdRequired); }
[*] target: assertNotNull(limitsByOrgId)
[-] pred: org. junit. Assert. assertNotNull ( limitsByOrgId )
************************************
************************************
[+] input: defaultValues() { SplunkRumBuilder builder = SplunkRum.builder();  assertFalse(builder.isDebugEnabled()); assertFalse(builder.isDiskBufferingEnabled()); assertTrue(builder.isCrashReportingEnabled()); assertTrue(builder.isNetworkMonitorEnabled()); assertTrue(builder.isAnrDetectionEnabled()); "<AssertPlaceHolder>"; assertEquals(Attributes.empty(), builder.globalAttributes); assertNull(builder.deploymentEnvironment); assertFalse(builder.sessionBasedSamplerEnabled); }
isSlowRenderingDetectionEnabled() { return configFlags.isSlowRenderingDetectionEnabled(); }
[*] target: assertTrue(builder.isSlowRenderingDetectionEnabled())
[-] pred: org. junit. Assert. assertTrue ( builder. isSlowRenderingDetectionEnabled ( ) )
************************************
************************************
[+] input: testExportActiveShouldReturnFullResponseWhenCalledOnRunningServer() { //given final String expected = "value"; final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(expected)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK);  //when final String actual = underTest.exportActive();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/export", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); }
exportActive() { final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_EXPORT_ACTIVE_PATH); final HttpRequest request = new HttpRequest(HttpMethod.GET, uri.toString()); return sendRaw(request).getResponseBodyAsString(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testCreateUserGroup_success() { // 准备参数 BpmUserGroupSaveReqVO reqVO = RandomUtils.randomPojo(BpmUserGroupSaveReqVO.class);  // 调用 Long userGroupId = userGroupService.createUserGroup(reqVO); // 断言 Assertions."<AssertPlaceHolder>"; // 校验记录的属性是否正确 BpmUserGroupDO userGroup = userGroupMapper.selectById(userGroupId); AssertUtils.assertPojoEquals(reqVO, userGroup); }
createUserGroup(@Valid BpmUserGroupSaveReqVO createReqVO);
[*] target: assertNotNull(userGroupId)
[-] pred: org. junit. Assert. assertNotNull ( userGroupId )
************************************
************************************
[+] input: testListSwdsVersionsByJobId() { List<Long> ids = jobDatasetVersionMapper.listDatasetVersionIdsByJobId( 13L); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue( CollectionUtils.isEqualCollection(List.of(datasetVersionEntity.getId(), datasetVersionEntity2.getId()), ids));  }
listDatasetVersionIdsByJobId(@Param("jobId") Long jobId);  @InsertProvider(value = JobDatasetVersionProvider.class, method = "insertSql") int insert(@Param("jobId") Long jodId, @Param("datasetVersionIds") Set<Long> datasetVersionIds);  class JobDatasetVersionProvider {  public String insertSql(@Param("jobId") Long jobId, @Param("datasetVersionIds") Set<Long> datasetVersionIds) { return new SQL() { { INSERT_INTO("job_dataset_version_rel"); INTO_COLUMNS("job_id", "dataset_version_id"); for (Long datasetVersionId : datasetVersionIds) { INTO_VALUES(String.valueOf(jobId), String.valueOf(datasetVersionId)); ADD_ROW(); } } }.toString(); } }
[*] target: assertEquals(2, ids.size())
[-] pred: org. junit. Assert. assertEquals ( 2, ids. size ( ) )
************************************
************************************
[+] input: testBuildAuthRequest_clientEnable() { // 准备参数 Integer socialType = SocialTypeEnum.WECHAT_MP.getType(); Integer userType = randomPojo(SocialTypeEnum.class).getType(); // mock 获得对应的 AuthRequest 实现 AuthConfig authConfig = mock(AuthConfig.class); AuthRequest authRequest = mock(AuthDefaultRequest.class); ReflectUtil.setFieldValue(authRequest, "config", authConfig); when(authRequestFactory.get(eq("WECHAT_MP"))).thenReturn(authRequest); // mock 数据 SocialClientDO client = randomPojo(SocialClientDO.class, o -> o.setStatus(CommonStatusEnum.ENABLE.getStatus()) .setUserType(userType).setSocialType(socialType)); socialClientMapper.insert(client);  // 调用 AuthRequest result = socialClientService.buildAuthRequest(socialType, userType); // 断言 "<AssertPlaceHolder>"; assertNotSame(authConfig, ReflectUtil.getFieldValue(authRequest, "config")); }
buildAuthRequest(Integer socialType, Integer userType) { // 1. 先查找默认的配置项，从 application-*.yaml 中读取 AuthRequest request = authRequestFactory.get(SocialTypeEnum.valueOfType(socialType).getSource()); Assert.notNull(request, String.format("社交平台(%d) 不存在", socialType)); // 2. 查询 DB 的配置项，如果存在则进行覆盖 SocialClientDO client = socialClientMapper.selectBySocialTypeAndUserType(socialType, userType); if (client != null && Objects.equals(client.getStatus(), CommonStatusEnum.ENABLE.getStatus())) { // 2.1 构造新的 AuthConfig 对象 AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(request, "config"); AuthConfig newAuthConfig = ReflectUtil.newInstance(authConfig.getClass()); BeanUtil.copyProperties(authConfig, newAuthConfig); // 2.2 修改对应的 clientId + clientSecret 密钥 newAuthConfig.setClientId(client.getClientId()); newAuthConfig.setClientSecret(client.getClientSecret()); if (client.getAgentId() != null) { // 如果有 agentId 则修改 agentId newAuthConfig.setAgentId(client.getAgentId()); } // 2.3 设置会 request 里，进行后续使用 ReflectUtil.setFieldValue(request, "config", newAuthConfig); } return request; }
[*] target: assertSame(authRequest, result)
[-] pred: org. junit. Assert. assertSame ( authRequest, result )
************************************
************************************
[+] input: stringKeyedMapCompactFormat() { final Schema origSchema = SchemaBuilder.map(Schema.STRING_SCHEMA, Schema.INT32_SCHEMA).build();  final Map<Object, Object> origValue = Map.of("field1", 1, "field2", 2);  // Use the newer compact format for map entries with string keys converter = createDataConverter(true); final Schema preProcessedSchema = converter.preProcessSchema(origSchema); assertEquals(SchemaBuilder.map(Schema.STRING_SCHEMA, Schema.INT32_SCHEMA).build(), preProcessedSchema); final Map<?, ?> newValue = (Map<?, ?>) converter.preProcessValue(origValue, origSchema, preProcessedSchema); "<AssertPlaceHolder>"; }
preProcessValue(final Object value, final Schema schema, final Schema newSchema) { // Handle missing schemas and acceptable null values if (schema == null) { return value; }  if (value == null) { return preProcessNullValue(schema); }  // Handle logical types final String schemaName = schema.name(); if (schemaName != null) { final Object result = preProcessLogicalValue(schemaName, value); if (result != null) { return result; } }  final Schema.Type schemaType = schema.type(); switch (schemaType) { case ARRAY : return preProcessArrayValue(value, schema, newSchema); case MAP : return preProcessMapValue(value, schema, newSchema); case STRUCT : return preProcessStructValue(value, schema, newSchema); default : return value; } }
[*] target: assertEquals(origValue, newValue)
[-] pred: org. junit. Assert. assertEquals ( origValue, newValue )
************************************
************************************
[+] input: Exception { Account acct = Provisioning.getInstance().getAccountByName("testMove@zimbra.com"); Mailbox mbox = MailboxManager.getInstance().getMailboxByAccount(acct); // Add two messages to inbox, one with search match and other with no match DeliveryOptions dopt = new DeliveryOptions() .setFolderId(Mailbox.ID_FOLDER_INBOX) .setFlags(Flag.BITMASK_UNREAD | Flag.BITMASK_MUTED); mbox.addMessage(null, MailboxTestUtil.generateMessage("test subject"), dopt, null); mbox.addMessage(null, MailboxTestUtil.generateMessage("unmatched subject"), dopt, null); TypedIdList ids = mbox.getItemIds(null, 2); assertEquals(2, ids.size()); SearchRequest sRequest = new SearchRequest(); sRequest.setSearchTypes("conversation"); // search with query 'test' sRequest.setQuery("test"); BulkAction bAction = new BulkAction(); // search action - move search result to 'Trash' bAction.setOp(BulkAction.Operation.move); bAction.setFolder("Trash"); Map<String, Object> context = ServiceTestUtil.getRequestContext(acct); ZimbraSoapContext zsc = (ZimbraSoapContext) context.get(SoapEngine.ZIMBRA_CONTEXT); Element searchResponse = new Search().handle(zsc.jaxbToElement(sRequest), ServiceTestUtil.getRequestContext(acct)); com.zimbra.soap.mail.message.SearchResponse sResponse = zsc.elementToJaxb(searchResponse); List<SearchHit> searchHits = sResponse.getSearchHits(); SearchAction.performAction(bAction, sRequest, searchHits, mbox, null); // check inbox contains only 1 unmatched mail item after move List<MailItem> mailItems = mbox.getItemList(null, MailItem.Type.MESSAGE, 2, com.zimbra.cs.index.SortBy.DATE_DESC); "<AssertPlaceHolder>"; assertEquals("unmatched subject", mailItems.get(0).getSubject()); // check trash contains mail item having 'test subject' after move mailItems = mbox.getItemList(null, MailItem.Type.MESSAGE, 3, com.zimbra.cs.index.SortBy.DATE_DESC); assertEquals(1, mailItems.size()); assertEquals("test subject", mailItems.get(0).getSubject()); }
performAction( BulkAction action, SearchRequest searchRequest, List<SearchHit> searchHits, Mailbox mbox, OperationContext octxt) throws ServiceException, AuthTokenException, IOException, HttpException { switch (action.getOp()) { case move: performMoveAction(action, searchRequest, searchHits, mbox, octxt); break; case read: performReadUnreadAction(searchRequest, searchHits, mbox, "read"); break; case unread: performReadUnreadAction(searchRequest, searchHits, mbox, "!read"); break; default: throw ServiceException.INVALID_REQUEST("Unsupported action", null); } }
[*] target: assertEquals(1, mailItems.size())
[-] pred: org. junit. Assert. assertEquals ( 1, mailItems. size ( ) )
************************************
************************************
[+] input: whenUpdateThenReturnSuccess() { when(repository.save(any())).thenReturn(user);  User response = service.update(userDTO);  "<AssertPlaceHolder>"; assertEquals(User.class, response.getClass()); assertEquals(ID, response.getId()); assertEquals(NAME, response.getName()); assertEquals(EMAIL, response.getEmail()); assertEquals(PASSWORD, response.getPassword()); }
update(UserDTO obj) { findByEmail(obj); return repository.save(mapper.map(obj, User.class)); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: JavetException { try (V8ValueObject v8ValueObject = v8Runtime.getExecutor( "let x = {'a': 1, 'b': '2', 'c': 3n, d: 1, e: null, g: {h: 1}, " + "'中文': '測試', '1234567890': '1234567890'}; x;").execute()) { try (IV8ValueArray iV8ValueArray = v8ValueObject.getOwnPropertyNames()) { "<AssertPlaceHolder>"; assertEquals(8, iV8ValueArray.getLength()); // Order is preserved since ES2015. assertEquals(1234567890, iV8ValueArray.getPropertyInteger(0)); assertEquals("a", iV8ValueArray.getPropertyString(1)); assertEquals("b", iV8ValueArray.getPropertyString(2)); assertEquals("c", iV8ValueArray.getPropertyString(3)); assertEquals("d", iV8ValueArray.getPropertyString(4)); assertEquals("e", iV8ValueArray.getPropertyString(5)); assertEquals("g", iV8ValueArray.getPropertyString(6)); assertEquals("中文", iV8ValueArray.getPropertyString(7)); } } }
getOwnPropertyNames() throws JavetException { return checkV8Runtime().getV8Internal().objectGetOwnPropertyNames(this); }
[*] target: assertNotNull(iV8ValueArray)
[-] pred: org. junit. Assert. assertNotNull ( iV8ValueArray )
************************************
************************************
[+] input: shouldBuildScriptOnConditionalFlow() { String script = random(); String language = random(); Message message = scriptOnConditionalFlow(language, script); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Please translate the %s script from '%s' to a valid FEEL expression.", language, script); }
scriptOnConditionalFlow(String language, String script) { return INSTANCE.composeMessage( "script-on-conditional-flow", ContextBuilder.builder().entry("language", language).entry("script", script).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildAssignee() { Message message = MessageFactory.assignee(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
assignee( String attributeLocalName, String elementLocalName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "assignee", ContextBuilder.builder() .context( supportedAttributeExpression( attributeLocalName, elementLocalName, juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: buildCache() { Cache<String> cache = CacheBuilder.newBuilder().build(String.class); Assertions.assertNotNull(cache);  var anotherCache = CacheBuilder.newBuilder().expires(10).maximumSize(1000).build(String.class); Assertions."<AssertPlaceHolder>"; }
build(Class<T> tClass){ assert Objects.nonNull(tClass);  Class<Cache<T>> cacheClass = (Class<Cache<T>>) queryCacheExists(); try { Constructor<Cache<T>> ct = cacheClass.getConstructor(Long.TYPE,Long.TYPE); return ct.newInstance(maximumSize,expires); } catch (NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) { throw new CacheNotExistsException(); } }
[*] target: assertNotNull(anotherCache)
[-] pred: org. junit. Assert. assertNotNull ( anotherCache )
************************************
************************************
[+] input: shouldBuildCandidateGroups() { Message message = MessageFactory.candidateGroups(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
candidateGroups(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "candidate-groups", ContextBuilder.builder() .context( supportedAttributeExpression( "candidateGroups", "userTask", juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: fromOptionValue_interactions_test() { DatasetTypeOptions datasetTypeOptions = DatasetTypeOptions.fromOptionValue("interactions"); "<AssertPlaceHolder>"; assertThat(datasetTypeOptions.toString(), equalTo("INTERACTIONS")); }
fromOptionValue(final String option) { return OPTIONS_MAP.get(option); }
[*] target: assertNotNull(datasetTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( datasetTypeOptions )
************************************
************************************
[+] input: fromOptionValue_test() { DBSourceOptions downloadSourceOptions = DBSourceOptions.fromOptionValue("s3"); "<AssertPlaceHolder>"; assertThat(downloadSourceOptions.toString(), equalTo("S3")); }
fromOptionValue(final String option) { return OPTIONS_MAP.get(option); }
[*] target: assertNotNull(downloadSourceOptions)
[-] pred: org. junit. Assert. assertNotNull ( downloadSourceOptions )
************************************
************************************
[+] input: testGenNotifyBodyForCustom() {  Locale locale = new Locale("en", "US");  ShareInfoData sid = new ShareInfoData(); sid.setGranteeDisplayName("Demo User Three"); sid.setGranteeId("46031e4c-deb4-4724-b5bb-8f854d0c518a"); sid.setGranteeName("Demo User Three"); sid.setGranteeType(ACL.GRANTEE_USER);  sid.setPath("/Calendar/Cal1"); sid.setFolderDefaultView(MailItem.Type.APPOINTMENT); sid.setItemUuid("9badf685-3420-458b-9ce5-826b0bec638f"); sid.setItemId(257);  sid.setOwnerAcctId("bbf152ca-e7cd-477e-9f72-70fef715c5f9"); sid.setOwnerAcctEmail("test@zimbra.com"); sid.setOwnerAcctDisplayName("Demo User Two");  try {  sid.setRights(ACL.stringToRights("rwdxap")); MimeMultipart mmp = ShareInfo.NotificationSender.genNotifBody(sid, locale, null, null); "<AssertPlaceHolder>"; String body = (String) mmp.getBodyPart(0).getDataHandler() .getContent(); assertTrue(body.indexOf("Role: Custom") != -1);  } catch (ServiceException | MessagingException | IOException e) { fail("Exception should not be thrown: " + e.getMessage()); } }
genNotifBody( ShareInfoData sid, Locale locale, Action action, String externalGroupMember) throws MessagingException, ServiceException {  // Body MimeMultipart mmp = new ZMimeMultipart("alternative");  String extUserShareAcceptUrl = null; String extUserLoginUrl = null; String externalGranteeName = null; if (sid.getGranteeTypeCode() == ACL.GRANTEE_GUEST) { externalGranteeName = sid.getGranteeName(); } else if (sid.getGranteeTypeCode() == ACL.GRANTEE_GROUP && externalGroupMember != null) { externalGranteeName = externalGroupMember; } // this mail will go to external email address boolean goesToExternalAddr = (externalGranteeName != null); if (action == null && goesToExternalAddr) { Account owner = Provisioning.getInstance().getAccountById(sid.getOwnerAcctId()); extUserShareAcceptUrl = AccountUtil.getShareAcceptURL(owner, sid.getItemId(), externalGranteeName); extUserLoginUrl = AccountUtil.getExtUserLoginURL(owner); }  // TEXT part (add me first!) String mimePartText; if (action == Action.revoke) { mimePartText = genRevokePart(sid, locale, false); } else if (action == Action.expire) { mimePartText = genExpirePart(sid, locale, false); } else { mimePartText = genPart( sid, action == Action.edit, extUserShareAcceptUrl, extUserLoginUrl, locale, null, false); } MimeBodyPart textPart = new ZMimeBodyPart(); textPart.setText(mimePartText, MimeConstants.P_CHARSET_UTF8); mmp.addBodyPart(textPart);  // HTML part if (action == Action.revoke) { mimePartText = genRevokePart(sid, locale, true); } else if (action == Action.expire) { mimePartText = genExpirePart(sid, locale, true); } else { mimePartText = genPart( sid, action == Action.edit, extUserShareAcceptUrl, extUserLoginUrl, locale, null, true); } MimeBodyPart htmlPart = new ZMimeBodyPart(); htmlPart.setDataHandler(new DataHandler(new HtmlPartDataSource(mimePartText))); mmp.addBodyPart(htmlPart);  // XML part if (!goesToExternalAddr) { MimeBodyPart xmlPart = new ZMimeBodyPart(); xmlPart.setDataHandler( new DataHandler(new XmlPartDataSource(genXmlPart(sid, null, action)))); mmp.addBodyPart(xmlPart); }  return mmp; }
[*] target: assertNotNull(mmp)
[-] pred: org. junit. Assert. assertNotNull ( mmp )
************************************
************************************
[+] input: test() { CombinationIterator testObject = new CombinationIterator("abc", 2); assertEquals("ab", testObject.next()); assertTrue(testObject.hasNext()); assertEquals("ac", testObject.next()); assertTrue(testObject.hasNext()); assertEquals("bc", testObject.next()); "<AssertPlaceHolder>"; }
hasNext() { return !validCombinations.isEmpty(); }
[*] target: assertFalse(testObject.hasNext())
[-] pred: org. junit. Assert. assertFalse ( testObject. hasNext() )
************************************
************************************
[+] input: itShouldBuildAnOlderChatRequestWithLastSeenAndAFK() { creq = new ChatRequest(0L, false, true); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=0&afk=1"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); assertTrue(creq.retryOnTimeout()); creq = new ChatRequest(8675309L, false, true); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=8675309&afk=1"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); "<AssertPlaceHolder>"; }
retryOnTimeout() { return true; }
[*] target: assertTrue(creq.retryOnTimeout())
[-] pred: org. junit. Assert. assertTrue ( creq. retryOnTimeout() )
************************************
************************************
[+] input: testConvertShouldSetRecognisedCurveNameAndParametersWhenCalledWithValidEcPrivateKey() { //given final EcPrivateKeyToJsonWebKeyImportRequestConverter underTest = new EcPrivateKeyToJsonWebKeyImportRequestConverter(); final KeyPair keyPair = KeyGenUtil.generateEc(KeyCurveName.P_256); final BCECPrivateKey privateKey = (BCECPrivateKey) keyPair.getPrivate();  //when final JsonWebKeyImportRequest actual = underTest.convert(privateKey);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(KeyType.EC, actual.getKeyType()); Assertions.assertEquals(KeyCurveName.P_256, actual.getCurveName()); Assertions.assertNotNull(actual.getD()); Assertions.assertNotNull(actual.getX()); Assertions.assertNotNull(actual.getY()); }
convert(final @NonNull BCECPrivateKey source) { final JsonWebKeyImportRequest importRequest = new JsonWebKeyImportRequest(); importRequest.setKeyType(KeyType.EC); final String sourceAlgorithm = ((ECNamedCurveParameterSpec) source.getParameters()).getName(); importRequest.setCurveName(KeyCurveName.forAlg(sourceAlgorithm)); importRequest.setD(source.getD().toByteArray()); final ECPoint point = source.getParameters().getG().multiply(source.getD()).normalize(); importRequest.setX(point.getAffineXCoord().getEncoded()); importRequest.setY(point.getAffineYCoord().getEncoded()); return importRequest; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: test_objectFileName_default_fileExtension() { final String namePattern = "events-%{yyyy-MM-dd'T'hh-mm-ss}";  when(s3SinkConfig.getObjectKeyOptions().getNamePattern()) .thenReturn(namePattern); when(event.formatString(namePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS)).thenReturn(namePattern); String objectFileName = ObjectKey.objectFileName(s3SinkConfig, null, event, expressionEvaluator); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(objectFileName.contains(".json")); }
objectFileName(final S3SinkConfig s3SinkConfig, final String codecExtension, final Event event, final ExpressionEvaluator expressionEvaluator) { String configNamePattern = s3SinkConfig.getObjectKeyOptions().getNamePattern(); String configNamePatternExpressionResult = event.formatString(configNamePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS); int extensionIndex = configNamePatternExpressionResult.lastIndexOf('.'); if (extensionIndex > 0) { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult.substring(0, extensionIndex)) + "." + (codecExtension!=null? codecExtension :configNamePatternExpressionResult.substring(extensionIndex + 1)); } else { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult) + "." + (codecExtension!=null? codecExtension : DEFAULT_CODEC_FILE_EXTENSION); } }
[*] target: assertNotNull(objectFileName)
[-] pred: org. junit. Assert. assertNotNull ( objectFileName )
************************************
************************************
[+] input: testConfigLoadedLocale() { Locale locale = new Locale("de", "AT"); Configuration.resetTestingInstance(); Configuration instance = Configuration.getInstance(locale); String[] tsp_sources = instance.getProperties().getStringArray("tsp_sources"); "<AssertPlaceHolder>"; assertTrue(tsp_sources.length > 1); assertEquals("Zeitpunkt", instance.getResourceBundle().getString("timestamp")); }
getInstance(Locale locale) { if (INSTANCE == null) { INSTANCE = new Configuration(locale); } return INSTANCE; }
[*] target: assertNotNull(tsp_sources)
[-] pred: org. junit. Assert. assertNotNull ( tsp_sources )
************************************
************************************
[+] input: shouldBuildCalledElement() { Message message = MessageFactory.calledElement(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
calledElement( String attributeLocalName, String elementLocalName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "called-element", ContextBuilder.builder() .context( supportedAttributeExpression( attributeLocalName, elementLocalName, juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: iterator() { ExactCollection<String> exactCollection = new ExactCollection<>(10); for (int i = 0; i < exactCollection.size(); i++) { exactCollection.add(i, String.valueOf(i)); } Assertions."<AssertPlaceHolder>"; int idx = 0; for (String element : exactCollection) { Assertions.assertEquals(String.valueOf(idx), element); idx++; } }
size() { return size; }
[*] target: assertEquals(10, exactCollection.size())
[-] pred: org. junit. Assert. assertEquals ( 10, exactCollection. size() )
************************************
************************************
[+] input: testCreatePost_success() { // 准备参数 PostSaveReqVO reqVO = randomPojo(PostSaveReqVO.class, o -> o.setStatus(randomEle(CommonStatusEnum.values()).getStatus())) .setId(null); // 防止 id 被设置 // 调用 Long postId = postService.createPost(reqVO);  // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 PostDO post = postMapper.selectById(postId); assertPojoEquals(reqVO, post, "id"); }
createPost(PostSaveReqVO createReqVO) { // 校验正确性 validatePostForCreateOrUpdate(null, createReqVO.getName(), createReqVO.getCode());  // 插入岗位 PostDO post = BeanUtils.toBean(createReqVO, PostDO.class); postMapper.insert(post); return post.getId(); }
[*] target: assertNotNull(postId)
[-] pred: org. junit. Assert. assertNotNull ( postId )
************************************
************************************
[+] input: InvocationTargetException { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "squaredPrimitiveInt", Integer.class);  "<AssertPlaceHolder>";  int arg = 1000; assertEquals(arg * arg, method.invoke(obj, arg)); }
getMethod(@Nonnull Class<?> c, @Nonnull String method, Class<?>... paramTypes) { Class<?>[] expectParamTypes = toPrimitiveTypeArray(paramTypes);  for (Method m : c.getMethods()) { Class<?>[] methodParameters = toPrimitiveTypeArray(m.getParameterTypes());  if ((m.getName().equals(method)) && (equalsTypeArray(methodParameters, expectParamTypes))) { return m; } }  return null; }
[*] target: assertNotNull(method)
[-] pred: org. junit. Assert. assertNotNull ( method )
************************************
************************************
[+] input: IOException { final byte[] key1 = new byte[]{-64, 0, -64, 0}; final byte[] key2 = new byte[]{0}; final byte[] key3 = new byte[]{64, 64, 64, 64}; final byte[] key4 = new byte[]{126, 126, 126, 126};  final DataClass data1 = new DataClass(UUID.randomUUID().toString(), random.nextInt()); final DataClass data2 = new DataClass(UUID.randomUUID().toString(), random.nextInt()); final DataClass data3 = new DataClass(UUID.randomUUID().toString(), random.nextInt()); final DataClass data4 = new DataClass(UUID.randomUUID().toString(), random.nextInt());  processorState.put(key3, data3); processorState.put(key4, data4); processorState.put(key1, data1); processorState.put(key2, data2);  final List<String> values = processorState.iterate(new BiFunction<byte[], DataClass, String>() { @Override public String apply(byte[] bytes, DataClass s) { return s.stringVal; } }, 2, 0);  final List<String> values2 = processorState.iterate(new BiFunction<byte[], DataClass, String>() { @Override public String apply(byte[] bytes, DataClass s) { return s.stringVal; } }, 2, 1);  assertEquals(2, values.size()); "<AssertPlaceHolder>"; assertTrue(values.containsAll(Arrays.asList( data1.stringVal, data2.stringVal ))); assertTrue(values2.containsAll(Arrays.asList( data3.stringVal, data4.stringVal ))); }
size() { return map.size(); }
[*] target: assertEquals(2, values2.size())
[-] pred: org. junit. Assert. assertEquals ( 2, values2. size ( ) )
************************************
************************************
[+] input: JsonProcessingException { //given final List<VaultModel> result = Collections.singletonList(new VaultModel()); final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(VAULT_MODEL_LIST_TYPE_REF))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(result);  //when final List<VaultModel> actual = underTest.listVaults();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(VAULT_MODEL_LIST_TYPE_REF)); verify(objectReader).readValue(anyString()); }
listVaults() { final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_PATH); final HttpRequest request = new HttpRequest(HttpMethod.GET, uri.toString()); return sendAndProcess(request, r -> r.getResponseObject(VAULT_MODEL_LIST_TYPE_REF)); }
[*] target: assertEquals(result, actual)
[-] pred: org. junit. Assert. assertEquals ( result, actual )
************************************
************************************
[+] input: shouldProperlyMapDtoToModel() { //given LectureDTO dto = new LectureDTO(); dto.setId(11L); dto.setName("lecture name");  //when LectureModel model = mapperUnderTest.toModel(dto);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(dto.getId(), model.getId()); Assertions.assertEquals(dto.getName(), model.getName()); }
toModel(LectureDTO dto);
[*] target: assertNotNull(model)
[-] pred: org. junit. Assert. assertNotNull ( model )
************************************
************************************
[+] input: test_buffer_notNull() { LocalFileBufferFactory localFileBufferFactory = new LocalFileBufferFactory(); Assertions.assertNotNull(localFileBufferFactory); Buffer buffer = localFileBufferFactory.getBuffer(null, null, null, null, null); Assertions."<AssertPlaceHolder>"; assertThat(buffer, instanceOf(LocalFileBuffer.class)); }
getBuffer(final S3AsyncClient s3Client, final Supplier<String> bucketSupplier, final Supplier<String> keySupplier, final String defaultBucket, final BucketOwnerProvider bucketOwnerProvider) { File tempFile = null; Buffer localfileBuffer = null; try { tempFile = File.createTempFile(PREFIX, SUFFIX); localfileBuffer = new LocalFileBuffer(tempFile, s3Client, bucketSupplier, keySupplier, defaultBucket, bucketOwnerProvider); } catch (IOException e) { LOG.error("Unable to create temp file ", e); } return localfileBuffer; }
[*] target: assertNotNull(buffer)
[-] pred: org. junit. Assert. assertNotNull ( buffer )
************************************
************************************
[+] input: testCreateRewardActivity_success() { // 准备参数 RewardActivityCreateReqVO reqVO = randomPojo(RewardActivityCreateReqVO.class, o -> { o.setConditionType(randomEle(PromotionConditionTypeEnum.values()).getType()); o.setProductScope(randomEle(PromotionProductScopeEnum.values()).getScope()); // 用于触发进行中的状态 o.setStartTime(addTime(Duration.ofDays(1))).setEndTime(addTime(Duration.ofDays(2))); });  // 调用 Long rewardActivityId = rewardActivityService.createRewardActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 RewardActivityDO rewardActivity = rewardActivityMapper.selectById(rewardActivityId); assertPojoEquals(reqVO, rewardActivity, "rules"); assertEquals(rewardActivity.getStatus(), PromotionActivityStatusEnum.WAIT.getStatus()); for (int i = 0; i < reqVO.getRules().size(); i++) { assertPojoEquals(reqVO.getRules().get(i), rewardActivity.getRules().get(i)); } }
createRewardActivity(RewardActivityCreateReqVO createReqVO) { // 校验商品是否冲突 validateRewardActivitySpuConflicts(null, createReqVO.getProductSpuIds());  // 插入 RewardActivityDO rewardActivity = RewardActivityConvert.INSTANCE.convert(createReqVO) .setStatus(PromotionUtils.calculateActivityStatus(createReqVO.getEndTime())); rewardActivityMapper.insert(rewardActivity); // 返回 return rewardActivity.getId(); }
[*] target: assertNotNull(rewardActivityId)
[-] pred: org. junit. Assert. assertNotNull ( rewardActivityId )
************************************
************************************
[+] input: testDefaultDataSourceMetadata() { DataSourceMetadata defaultMetadata = DataSourceMetadata.defaultOpenSearchDataSourceMetadata(); "<AssertPlaceHolder>"; assertEquals(DataSourceType.OPENSEARCH, defaultMetadata.getConnector()); assertTrue(defaultMetadata.getAllowedRoles().isEmpty()); assertTrue(defaultMetadata.getProperties().isEmpty()); }
defaultOpenSearchDataSourceMetadata() { return new DataSourceMetadata.Builder() .setName(DEFAULT_DATASOURCE_NAME) .setDescription(StringUtils.EMPTY) .setConnector(DataSourceType.OPENSEARCH) .setAllowedRoles(Collections.emptyList()) .setProperties(ImmutableMap.of()) .validateAndBuild(); }
[*] target: assertNotNull(defaultMetadata)
[-] pred: org. junit. Assert. assertNotNull ( defaultMetadata )
************************************
************************************
[+] input: Exception { CountDownLatch latch1 = new CountDownLatch(2); CountDownLatch latch2 = new CountDownLatch(2); s1.registerCallback(new CountDownCallback(latch1)); s2.registerCallback(new CountDownCallback(latch2)); c.getPeer("peer1").sendMessage(messages[0]); c.getPeer("peer2").sendMessage(messages[1]); c.getPeer("peer1").sendMessage(messages[2]); c.getPeer("peer2").sendMessage(messages[3]); latch1.await(2, TimeUnit.SECONDS); latch2.await(2, TimeUnit.SECONDS); "<AssertPlaceHolder>"; assertEquals(0, latch2.getCount()); }
registerCallback(NotifyCallback cb) { callback = cb; }
[*] target: assertEquals(0, latch1.getCount())
[-] pred: org. junit. Assert. assertEquals ( 0, latch1. getCount ( ) )
************************************
************************************
[+] input: testCreateSeckillConfig_success() { // 准备参数 SeckillConfigCreateReqVO reqVO = randomPojo(SeckillConfigCreateReqVO.class);  // 调用 Long SeckillConfigId = SeckillConfigService.createSeckillConfig(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 SeckillConfigDO SeckillConfig = seckillConfigMapper.selectById(SeckillConfigId); assertPojoEquals(reqVO, SeckillConfig); }
createSeckillConfig(SeckillConfigCreateReqVO createReqVO) { // 校验时间段是否冲突 validateSeckillConfigConflict(createReqVO.getStartTime(), createReqVO.getEndTime(), null);  // 插入 SeckillConfigDO seckillConfig = SeckillConfigConvert.INSTANCE.convert(createReqVO); seckillConfigMapper.insert(seckillConfig); // 返回 return seckillConfig.getId(); }
[*] target: assertNotNull(SeckillConfigId)
[-] pred: org. junit. Assert. assertNotNull ( SeckillConfigId )
************************************
************************************
[+] input: dataIntegrityViolationException() { ResponseEntity<StandardError> response = ecxeptionHandler .dataIntegrityViolationException( new DataIntegratyViolationException(E_MAIL_JA_CADASTRADO), new MockHttpServletRequest());  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(StandardError.class, response.getBody().getClass()); assertEquals(E_MAIL_JA_CADASTRADO, response.getBody().getError()); assertEquals(400, response.getBody().getStatus()); }
dataIntegrityViolationException(DataIntegratyViolationException ex, HttpServletRequest request) { StandardError error = new StandardError(LocalDateTime.now(), HttpStatus.BAD_REQUEST.value(), ex.getMessage(), request.getRequestURI()); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: prefers_expression_with_longest_non_empty_match() { ParameterType<String> zeroOrMore = new ParameterType<>( "zero-or-more", "[a-z]*", String.class, (Transformer<String>) arg -> arg, true, false ); parameterTypeRegistry.defineParameterType(zeroOrMore); ParameterType<String> exactlyOne = new ParameterType<>( "exactly-one", "[a-z]", String.class, (Transformer<String>) arg -> arg, true, false ); parameterTypeRegistry.defineParameterType(exactlyOne);  List<GeneratedExpression> generatedExpressions = generator.generateExpressions("a simple step"); "<AssertPlaceHolder>"; assertEquals("{exactly-one} {zero-or-more} {zero-or-more}", generatedExpressions.get(0).getSource()); assertEquals("{zero-or-more} {zero-or-more} {zero-or-more}", generatedExpressions.get(1).getSource()); }
generateExpressions(String text) { List<List<ParameterType<?>>> parameterTypeCombinations = new ArrayList<>(); List<ParameterTypeMatcher> parameterTypeMatchers = createParameterTypeMatchers(text); StringBuilder expressionTemplate = new StringBuilder(); int pos = 0; while (true) { List<ParameterTypeMatcher> matchingParameterTypeMatchers = new ArrayList<>();  for (ParameterTypeMatcher parameterTypeMatcher : parameterTypeMatchers) { if (parameterTypeMatcher.advanceToAndFind(pos)) { matchingParameterTypeMatchers.add(parameterTypeMatcher); } }  if (!matchingParameterTypeMatchers.isEmpty()) { Collections.sort(matchingParameterTypeMatchers);  // Find all the best parameter type matchers, they are all candidates. ParameterTypeMatcher bestParameterTypeMatcher = matchingParameterTypeMatchers.get(0); List<ParameterTypeMatcher> bestParameterTypeMatchers = new ArrayList<>(); for (ParameterTypeMatcher m : matchingParameterTypeMatchers) { if (m.compareTo(bestParameterTypeMatcher) == 0) { bestParameterTypeMatchers.add(m); } }  // Build a list of parameter types without duplicates. The reason there // might be duplicates is that some parameter types have more than one regexp, // which means multiple ParameterTypeMatcher objects will have a reference to the // same ParameterType. // We're sorting the list so preferential parameter types are listed first. // Users are most likely to want these, so they should be listed at the top. Set<ParameterType<?>> set = new HashSet<>(); for (ParameterTypeMatcher parameterTypeMatcher : bestParameterTypeMatchers) { ParameterType<?> parameterType = parameterTypeMatcher.getParameterType(); set.add(parameterType); } SortedSet<ParameterType<?>> parameterTypes = new TreeSet<>(set);  parameterTypeCombinations.add(new ArrayList<>(parameterTypes));  expressionTemplate .append(escape(text.substring(pos, bestParameterTypeMatcher.start()))) .append("{%s}"); pos = bestParameterTypeMatcher.start() + bestParameterTypeMatcher.group().length(); } else { break; }  if (pos >= text.length()) { break; } } expressionTemplate.append(escape(text.substring(pos))); return new CombinatorialGeneratedExpressionFactory(expressionTemplate.toString(), parameterTypeCombinations).generateExpressions(); }
[*] target: assertEquals(2, generatedExpressions.size())
[-] pred: org. junit. Assert. assertEquals ( 2, generatedExpressions. size ( ) )
************************************
************************************
[+] input: shouldBuildPotentialStarter() { Message message = MessageFactory.potentialStarter(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
potentialStarter(String elementLocalName) { return INSTANCE.composeMessage( "potential-starter", ContextBuilder.builder().context(elementNotTransformablePrefix(elementLocalName)).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: cast_Geometry() { //Given final LcEntryImageSegmentation entry = new LcEntryImageSegmentation(); entry.setType(LcEntryType.IMAGE_SEGMENTATION); entry.setColor("color"); entry.setShortcut("shortcut");  //When final LcEntryExport export = LcEntryExportFactory.cast(entry);  //Then "<AssertPlaceHolder>"; assertTrue(export instanceof LcEntryExportGeometry); assertEquals(entry.getColor(), ((LcEntryExportGeometry) export).getColor()); assertEquals(entry.getShortcut(), ((LcEntryExportGeometry) export).getShortcut()); }
cast(final LcEntry source) { switch (source.getType()) { case LINE: case POINT: case POLYGON: case RECTANGLE: case IMAGE_SEGMENTATION: return new LcEntryExportGeometry(source); case FREETEXT: return new LcEntryExportFreeText(source); case SELECT: case CHECKLIST: return new LcEntryExportOption(source); default: // not possible. } throw new IllegalArgumentException(); }
[*] target: assertNotNull(export)
[-] pred: org. junit. Assert. assertNotNull ( export )
************************************
************************************
[+] input: fromOptionValue_items_test() { DatasetTypeOptions datasetTypeOptions = DatasetTypeOptions.fromOptionValue("items"); "<AssertPlaceHolder>"; assertThat(datasetTypeOptions.toString(), equalTo("ITEMS")); }
fromOptionValue(final String option) { return OPTIONS_MAP.get(option); }
[*] target: assertNotNull(datasetTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( datasetTypeOptions )
************************************
************************************
[+] input: testCreateFileConfig_success() { // 准备参数 Map<String, Object> config = MapUtil.<String, Object>builder().put("basePath", "/yunai") .put("domain", "https://www.iocoder.cn").build(); FileConfigSaveReqVO reqVO = randomPojo(FileConfigSaveReqVO.class, o -> o.setStorage(FileStorageEnum.LOCAL.getStorage()).setConfig(config)) .setId(null); // 避免 id 被赋值  // 调用 Long fileConfigId = fileConfigService.createFileConfig(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 FileConfigDO fileConfig = fileConfigMapper.selectById(fileConfigId); assertPojoEquals(reqVO, fileConfig, "id", "config"); assertFalse(fileConfig.getMaster()); assertEquals("/yunai", ((LocalFileClientConfig) fileConfig.getConfig()).getBasePath()); assertEquals("https://www.iocoder.cn", ((LocalFileClientConfig) fileConfig.getConfig()).getDomain()); // 验证 cache assertNull(fileConfigService.getClientCache().getIfPresent(fileConfigId)); }
createFileConfig(FileConfigSaveReqVO createReqVO) { FileConfigDO fileConfig = FileConfigConvert.INSTANCE.convert(createReqVO) .setConfig(parseClientConfig(createReqVO.getStorage(), createReqVO.getConfig())) .setMaster(false); // 默认非 master fileConfigMapper.insert(fileConfig); return fileConfig.getId(); }
[*] target: assertNotNull(fileConfigId)
[-] pred: org. junit. Assert. assertNotNull ( fileConfigId )
************************************
************************************
[+] input: itShouldBuildAnOlderChatRequestWithLastSeen() { creq = new ChatRequest(0L, false, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=0&afk=0"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); assertTrue(creq.retryOnTimeout()); creq = new ChatRequest(8675309L, false, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?lasttime=8675309&afk=0"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); "<AssertPlaceHolder>"; }
retryOnTimeout() { return true; }
[*] target: assertTrue(creq.retryOnTimeout())
[-] pred: org. junit. Assert. assertTrue ( creq. retryOnTimeout() )
************************************
************************************
[+] input: 사용자_포털_메인_예약목록_조회_성공() { ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  Map<String, Collection<ReserveItemMainResponseDto>> responseBody = webTestClient.get() .uri(API_URL+"/latest/3") .exchange() .expectStatus().isOk() .expectBody(new ParameterizedTypeReference<Map<String, Collection<ReserveItemMainResponseDto>>>() { }) .returnResult().getResponseBody();  assertThat(responseBody.keySet().size()).isEqualTo(1); assertThat(responseBody.keySet().contains(category.getCodeId())).isTrue(); Collection<ReserveItemMainResponseDto> reserveItemMainResponseDtos = responseBody.get(category.getCodeId()); reserveItemMainResponseDtos.stream().forEach(reserveItemMainResponseDto -> { assertThat(reserveItemMainResponseDto.getReserveItemName().equals(saved.getReserveItemName())); }); }
save(@Valid @RequestBody ReserveItemSaveRequestDto saveRequestDto) { return reserveItemService.save(saveRequestDto); }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
************************************
[+] input: testGetWorkflowName2() { List<String> names = NextflowScript.getWorkflowNames("\n   workflow process1\n{some content }"); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); }
public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(1, names.size())
[-] pred: org. junit. Assert. assertEquals ( 1, names. size ( ) )
************************************
************************************
[+] input: testCreateDiyPage_success() { // 准备参数 DiyPageCreateReqVO reqVO = randomPojo(DiyPageCreateReqVO.class);  // 调用 Long diyPageId = diyPageService.createDiyPage(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DiyPageDO diyPage = diyPageMapper.selectById(diyPageId); assertPojoEquals(reqVO, diyPage); }
createDiyPage(DiyPageCreateReqVO createReqVO) { // 校验名称唯一 validateNameUnique(null, createReqVO.getTemplateId(), createReqVO.getName()); // 插入 DiyPageDO diyPage = DiyPageConvert.INSTANCE.convert(createReqVO); diyPage.setProperty("{}"); diyPageMapper.insert(diyPage); return diyPage.getId(); }
[*] target: assertNotNull(diyPageId)
[-] pred: org. junit. Assert. assertNotNull ( diyPageId )
************************************
************************************
[+] input: shouldBuildDecisionRef() { Message message = MessageFactory.decisionRef(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
decisionRef( String attributeLocalName, String elementLocalName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "decision-ref", ContextBuilder.builder() .context( supportedAttributeExpression( attributeLocalName, elementLocalName, juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testCreateTenantPackage_success() { // 准备参数 TenantPackageSaveReqVO reqVO = randomPojo(TenantPackageSaveReqVO.class, o -> o.setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值  // 调用 Long tenantPackageId = tenantPackageService.createTenantPackage(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 TenantPackageDO tenantPackage = tenantPackageMapper.selectById(tenantPackageId); assertPojoEquals(reqVO, tenantPackage, "id"); }
createTenantPackage(TenantPackageSaveReqVO createReqVO) { // 插入 TenantPackageDO tenantPackage = BeanUtils.toBean(createReqVO, TenantPackageDO.class); tenantPackageMapper.insert(tenantPackage); // 返回 return tenantPackage.getId(); }
[*] target: assertNotNull(tenantPackageId)
[-] pred: org. junit. Assert. assertNotNull ( tenantPackageId )
************************************
************************************
[+] input: kill() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.kill(new KillParam(jobId));  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(200, retval.getCode()); Assertions.assertNull(retval.getMsg()); }
kill(KillParam killParam);
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
************************************
[+] input: shouldBuildFormRef() { Message message = MessageFactory.formRef(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
formRef( String attributeLocalName, String elementLocalName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "form-ref", ContextBuilder.builder() .context( supportedAttributeExpression( attributeLocalName, elementLocalName, juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildFailedJobRetryTimeCycleError() { Message message = MessageFactory.failedJobRetryTimeCycleError(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
failedJobRetryTimeCycleError(String elementLocalName, String timecycle) { return INSTANCE.composeMessage( "failed-job-retry-time-cycle-error", ContextBuilder.builder() .context(elementNotTransformablePrefix(elementLocalName)) .entry("timecycle", timecycle) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testCreateSocialClient_success() { // 准备参数 SocialClientSaveReqVO reqVO = randomPojo(SocialClientSaveReqVO.class, o -> o.setSocialType(randomEle(SocialTypeEnum.values()).getType()) .setUserType(randomEle(UserTypeEnum.values()).getValue()) .setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值  // 调用 Long socialClientId = socialClientService.createSocialClient(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 SocialClientDO socialClient = socialClientMapper.selectById(socialClientId); assertPojoEquals(reqVO, socialClient, "id"); }
createSocialClient(SocialClientSaveReqVO createReqVO) { // 校验重复 validateSocialClientUnique(null, createReqVO.getUserType(), createReqVO.getSocialType());  // 插入 SocialClientDO client = BeanUtils.toBean(createReqVO, SocialClientDO.class); socialClientMapper.insert(client); return client.getId(); }
[*] target: assertNotNull(socialClientId)
[-] pred: org. junit. Assert. assertNotNull ( socialClientId )
************************************
************************************
[+] input: ps() { String name = "test"; List<Container> containers = new ArrayList<>(); containers.add(new Container()); when(dockerClient.listContainersCmd().withNameFilter(Lists.newArrayList(name))) .thenReturn(new ListContainersCmdImpl(command -> containers)); List<Container> ps = dockerService.ps(name); "<AssertPlaceHolder>"; assertEquals(1, ps.size()); }
ps(String containerNamePrefix) { String containerName = StringPattern.replacePatternBreaking(containerNamePrefix); logger.info("执行: docker ps|grep {}", containerName); ListContainersCmd listContainersCmd = dockerClient.listContainersCmd().withNameFilter(Lists.newArrayList(containerNamePrefix)); return listContainersCmd.exec(); }
[*] target: assertNotNull(ps)
[-] pred: org. junit. Assert. assertNotNull ( ps )
************************************
************************************
[+] input: testCreateScanBuilderWithQueryRangeTableFunction() { PrometheusQueryExemplarsRequest exemplarsRequest = new PrometheusQueryExemplarsRequest(); exemplarsRequest.setQuery(QUERY); exemplarsRequest.setStartTime(STARTTIME); exemplarsRequest.setEndTime(ENDTIME); QueryExemplarsTable queryExemplarsTable = new QueryExemplarsTable(client, exemplarsRequest); TableScanBuilder tableScanBuilder = queryExemplarsTable.createScanBuilder(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(tableScanBuilder instanceof QueryExemplarsFunctionTableScanBuilder); }
createScanBuilder() { return new QueryExemplarsFunctionTableScanBuilder(prometheusClient, exemplarsRequest); }
[*] target: assertNotNull(tableScanBuilder)
[-] pred: org. junit. Assert. assertNotNull ( tableScanBuilder )
************************************
************************************
[+] input: never_hasNext() { var plan = new CursorCloseOperator(null); assertFalse(plan.hasNext()); plan.open(); "<AssertPlaceHolder>"; }
hasNext() { return false; }
[*] target: assertFalse(plan.hasNext())
[-] pred: org. junit. Assert. assertFalse ( plan. hasNext() )
************************************
************************************
[+] input: isEmpty() { TokenQueue queue = provideEmptyTokenQueue(); assertTrue(queue.isEmpty());  queue = provide2TokenQueue(); assertFalse(queue.isEmpty());  queue.consume(); assertFalse(queue.isEmpty());  queue.consume(); "<AssertPlaceHolder>"; }
isEmpty() { return nextTokenIndex >= tokens.size(); }
[*] target: assertTrue(queue.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( queue. isEmpty() )
************************************
************************************
[+] input: testGetVersionsShouldReturnAllRelevantVersionsWhenCalledWithExistingKey() { //given putAllMocks();  //when final Deque<String> actual = underTest.getVersions(VERSIONED_KEY_ENTITY_ID_1_VERSION_1);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertIterableEquals(List.of(KEY_VERSION_1, KEY_VERSION_2, KEY_VERSION_3), actual); }
getVersions(@NonNull final K entityId) { if (!versions.containsKey(entityId.id()) || versions.get(entityId.id()).isEmpty()) { throw new NotFoundException("Key not found: " + entityId); } return new LinkedList<>(versions.get(entityId.id())); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: shouldBuildAttributeRemoved() { Message message = MessageFactory.attributeRemoved(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
attributeRemoved(String attributeLocalName, String elementLocalName) { return INSTANCE.composeMessage( "attribute-removed", ContextBuilder.builder() .entry("attributeLocalName", attributeLocalName) .entry("elementLocalName", elementLocalName) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildCorrelationKeyHint() { Message message = MessageFactory.correlationKeyHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
correlationKeyHint() { return INSTANCE.staticMessage("correlation-key-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildLocalVariablePropagationNotSupported() { Message message = MessageFactory.localVariablePropagationNotSupported(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
localVariablePropagationNotSupported() { return INSTANCE.staticMessage("local-variable-propagation-not-supported-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildExecutionListener() { Message message = MessageFactory.executionListener("start", "${myExecutionListener}"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertThat(message.getMessage()) .isEqualTo( "Listener at 'start' with implementation '${myExecutionListener}' cannot be transformed. Execution Listeners do not exist in Zeebe."); }
executionListener(String event, String implementation) { return INSTANCE.composeMessage( "execution-listener", ContextBuilder.builder() .entry("event", event) .entry("implementation", implementation) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildCallActivityNoCalledElementHint() { Message message = MessageFactory.callActivityNoCalledElementHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
callActivityNoCalledElementHint() { return INSTANCE.staticMessage("call-activity-no-called-element-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: JavetException { String message = "test"; List<V8ValueErrorType> types = SimpleList.of(V8ValueErrorType.values()); types.remove(types.size() - 1); for (V8ValueErrorType type : types) { try (V8ValueError v8ValueError = v8Runtime.createV8ValueError(type, message)) { assertEquals(message, v8ValueError.getMessage()); "<AssertPlaceHolder>"; } } }
getErrorType() { if (optionalType == null) { optionalType = V8ValueErrorType.UnknownError; try (V8Value v8Value = get(METHOD_NAME_CONSTRUCTOR)) { String constructorFunction = v8Value.toString(); if (StringUtils.isNotEmpty(constructorFunction)) { final int startIndex = constructorFunction.indexOf(" ") + 1; final int endIndex = constructorFunction.indexOf("("); if (startIndex > 0 && endIndex > startIndex) { String constructorName = constructorFunction.substring(startIndex, endIndex); optionalType = V8ValueErrorType.parse(constructorName); } } } catch (Throwable ignored) { ignored.printStackTrace(System.err); } } return optionalType; }
[*] target: assertEquals(type, v8ValueError.getErrorType())
[-] pred: org. junit. Assert. assertEquals ( type, v8ValueError. getErrorType ( ) )
************************************
************************************
[+] input: create() { GroupCreateRequest request = new GroupCreateRequest(); request.setName(UUID.randomUUID().toString()); request.setDescription("group service test"); request.setGroupOwnerUserIds(List.of(1, 2, 3)); Integer groupId = groupService.create(request); "<AssertPlaceHolder>";  List<UserRole> roles = userRoleDao.selectByUserIds(List.of(1, 2, 3)) .stream() .filter(r -> Objects.equals(r.getGroupId(), groupId) && r.getRole().equals("GROUP_OWNER")) .collect(Collectors.toList()); assertEquals(3, roles.size()); }
create(GroupCreateRequest request) { Group group = groupConverter.of(request); Integer groupId = groupDao.insertAndReturnId(group); List<UserRole> roles = request.getGroupOwnerUserIds() .stream() .map(userId -> { UserRole role = new UserRole(); role.setUserId(userId); role.setRole(GROUP_OWNER); role.setGroupId(groupId); return role; }) .collect(Collectors.toList()); userRoleDao.batchInsert(roles); eventPublisher.publish(new GroupCreated(groupId, request.getName(), request.getDescription())); return groupId; }
[*] target: assertNotNull(groupId)
[-] pred: org. junit. Assert. assertNotNull ( groupId )
************************************
************************************
[+] input: IOException { // Set Security Context OauthUser oauthUser = SecurityUtils.createTestTokenUser(); SecurityContext.set(oauthUser);  //Given List<LcEntryUpdateBindingModel> testLcEntryUpdateBindingModels = LcEntryUtils.createTestLcEntryUpdateBindingModels(3);  Project testProject = ProjectUtils.createTestProject(PROJECT_ID); LabelConfiguration testLabelConfiguration = LabelConfigurationUtils.createTestLabelConfiguration(testProject);  LabelConfigurationViewModel testLabelConfigurationViewModel = LabelConfigurationUtils.createTestLabelConfigurationViewModel();  //When when(labelConfigurationRepositoryMock.findById(anyString())) .thenReturn(java.util.Optional.of(testLabelConfiguration)); when(labelConfigurationServiceMock.updateLabelConfiguration(anyString(), anyList(), anyBoolean())) .thenReturn(testLabelConfigurationViewModel);  LabelConfigurationViewModel labelConfigurationViewModel = externalApiService .uploadLabelConfiguration(LC_CONFIG_ID, testLcEntryUpdateBindingModels);  //Then "<AssertPlaceHolder>"; assertEquals(testLabelConfiguration.getId(), labelConfigurationViewModel.getId()); assertEquals(testLabelConfiguration.getProject().getId(), labelConfigurationViewModel.getProjectId()); assertEquals(0, labelConfigurationViewModel.getEntries().size());  verify(labelConfigurationServiceMock, times(1)) .updateLabelConfiguration(anyString(), anyList(), anyBoolean()); verifyNoMoreInteractions(labelConfigurationServiceMock); }
uploadLabelConfiguration(String configId, List<LcEntryUpdateBindingModel> lcEntryUpdateBindingModelList) { //Permissions check DataGymSecurity.isAuthenticatedAndHasAnyScope(TOKEN_SCOPE_TYPE);  LabelConfiguration configById = findConfigById(configId);  // If there are any LcEntries in the current Configuration, throw exception if (!configById.getEntries().isEmpty()) { throw new GenericException("config_not_cleared", null, null, configId); }  return labelConfigurationService.updateLabelConfiguration(configId, lcEntryUpdateBindingModelList, true); }
[*] target: assertNotNull(labelConfigurationViewModel)
[-] pred: org. junit. Assert. assertNotNull ( labelConfigurationViewModel )
************************************
************************************
[+] input: testCreateMailTemplate_success() { // 准备参数 MailTemplateSaveReqVO reqVO = randomPojo(MailTemplateSaveReqVO.class) .setId(null); // 防止 id 被赋值  // 调用 Long mailTemplateId = mailTemplateService.createMailTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MailTemplateDO mailTemplate = mailTemplateMapper.selectById(mailTemplateId); assertPojoEquals(reqVO, mailTemplate, "id"); }
createMailTemplate(MailTemplateSaveReqVO createReqVO) { // 校验 code 是否唯一 validateCodeUnique(null, createReqVO.getCode());  // 插入 MailTemplateDO template = BeanUtils.toBean(createReqVO, MailTemplateDO.class) .setParams(parseTemplateContentParams(createReqVO.getContent())); mailTemplateMapper.insert(template); return template.getId(); }
[*] target: assertNotNull(mailTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( mailTemplateId )
************************************
************************************
[+] input: shouldBuildCollection() { Message message = MessageFactory.collection(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
collection( String attributeLocalName, String elementLocalName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "collection", ContextBuilder.builder() .context( supportedAttributeExpression( attributeLocalName, elementLocalName, juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: confirmDefaultBehavior() { when(provider.getHttpAuthenticationService()).thenCallRealMethod();  var result = provider.getHttpAuthenticationService(); Assertions."<AssertPlaceHolder>"; Assertions.assertFalse(result.isPresent()); }
getHttpAuthenticationService() { return Optional.empty(); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: shouldBuildLoopCardinality() { Message message = MessageFactory.loopCardinality(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
loopCardinality() { return INSTANCE.staticMessage("loop-cardinality"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: allModules() { moduleManager.add(module1); moduleManager.add(module2);  List<IModule> modules = moduleManager.allModules();  assertEquals(2, modules.size()); assertTrue(modules.contains(module1)); "<AssertPlaceHolder>"; }
contains(Identifier id) { return moduleMap.containsKey(id); }
[*] target: assertTrue(modules.contains(module2))
[-] pred: org. junit. Assert. assertTrue ( modules. contains ( module2 ) )
************************************
************************************
[+] input: shouldBuildEscalationCode() { Message message = MessageFactory.escalationCode("old", "new"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Escalation code is transformed from 'old' to 'new'. Please review."); }
escalationCode(String oldCode, String newCode) { return INSTANCE.composeMessage( "escalation-code", ContextBuilder.builder().entry("oldCode", oldCode).entry("newCode", newCode).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testCreateGroup_success() { // 准备参数 MemberGroupCreateReqVO reqVO = randomPojo(MemberGroupCreateReqVO.class, o -> o.setStatus(randomCommonStatus()));  // 调用 Long groupId = groupService.createGroup(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberGroupDO group = groupMapper.selectById(groupId); assertPojoEquals(reqVO, group); }
createGroup(MemberGroupCreateReqVO createReqVO) { // 插入 MemberGroupDO group = MemberGroupConvert.INSTANCE.convert(createReqVO); memberGroupMapper.insert(group); // 返回 return group.getId(); }
[*] target: assertNotNull(groupId)
[-] pred: org. junit. Assert. assertNotNull ( groupId )
************************************
************************************
[+] input: testExists() { User randomUser = new User(); boolean exists = entityRepositoryJpa.exists(User.class,randomUser.getId()); Assertions.assertFalse(exists);  User created = entityRepositoryJpa.save(randomUser()); Assertions.assertNotNull(created); exists = entityRepositoryJpa.exists(User.class,created.getId()); Assertions."<AssertPlaceHolder>"; }
exists(Class<T> clazz, Serializable id);
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
************************************
[+] input: whenFindByIdThenReturnSuccess() { when(service.findById(anyInt())).thenReturn(user); when(mapper.map(any(), any())).thenReturn(userDTO);  ResponseEntity<UserDTO> response = resource.findById(ID);  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(UserDTO.class, response.getBody().getClass());  assertEquals(ID, response.getBody().getId()); assertEquals(NAME, response.getBody().getName()); assertEquals(EMAIL, response.getBody().getEmail()); assertEquals(PASSWORD, response.getBody().getPassword()); }
findById(@PathVariable Integer id) { return ResponseEntity.ok().body(mapper.map(service.findById(id), UserDTO.class)); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: testCreateNotice_success() { // 准备参数 NoticeSaveReqVO reqVO = randomPojo(NoticeSaveReqVO.class) .setId(null); // 避免 id 被赋值  // 调用 Long noticeId = noticeService.createNotice(reqVO); // 校验插入属性是否正确 "<AssertPlaceHolder>"; NoticeDO notice = noticeMapper.selectById(noticeId); assertPojoEquals(reqVO, notice, "id"); }
createNotice(NoticeSaveReqVO createReqVO) { NoticeDO notice = BeanUtils.toBean(createReqVO, NoticeDO.class); noticeMapper.insert(notice); return notice.getId(); }
[*] target: assertNotNull(noticeId)
[-] pred: org. junit. Assert. assertNotNull ( noticeId )
************************************
************************************
[+] input: findEventById_shouldFindEvent_whenExists() { final Event event = mock(Event.class); when(event.getId()).thenReturn(ID);  repository.saveEvent(event); final Event actual = repository.findEventById(ID);  "<AssertPlaceHolder>"; assertEquals(event, actual); }
findEventById(long id) { return storage.get(id); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: shouldBuildResultVariableBusinessRule() { Message message = MessageFactory.resultVariableBusinessRule(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
resultVariableBusinessRule( String attributeLocalName, String elementLocalName) { return INSTANCE.composeMessage( "result-variable-business-rule", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: JavetException { try (V8ValueObject v8ValueObject = v8Runtime.getExecutor("const x = {a:1,b:2}; x;").execute()) { try (V8ValueProxy v8ValueProxy = v8Runtime.createV8ValueProxy(v8ValueObject)) { assertNotNull(v8ValueProxy); assertFalse(v8ValueProxy.isRevoked()); assertEquals(1, v8ValueProxy.getInteger("a")); assertEquals(2, v8ValueProxy.getInteger("b")); assertTrue(v8ValueProxy.get("c").isUndefined()); v8ValueObject.set("c", 3); assertEquals(3, v8ValueProxy.getInteger("c")); assertEquals("{"a":1,"b":2,"c":3}", v8ValueProxy.toJsonString()); v8ValueProxy.revoke(); "<AssertPlaceHolder>"; } } }
isRevoked() throws JavetException { return checkV8Runtime().getV8Internal().proxyIsRevoked(this); }
[*] target: assertTrue(v8ValueProxy.isRevoked())
[-] pred: org. junit. Assert. assertTrue ( v8ValueProxy. isRevoked() )
************************************
************************************
[+] input: shouldBuildInternalScript() { Message message = MessageFactory.internalScript(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Script is transformed to Zeebe script."); }
internalScript() { return INSTANCE.staticMessage("internal-script"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: getSecret() { KeypairReader reader = new AwsSecretsKeypairReader( new AwsSecretsManagerResolver(secretsManagerClient), keypairName); KeyPair keyPair = reader.loadKeys().block(); "<AssertPlaceHolder>"; assertThat(Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded())) .isEqualTo(priv); }
loadKeys() throws KeyLoadException { return getSecret() .map(keys -> new KeyPair(loadPublicKey(keys), loadPrivateKey(keys))) .doOnSuccess(kp -> log.info(KEYPAIR_LOADED, secretName)) .onErrorMap(KeyLoadException::new) .switchIfEmpty(Mono.error(new KeyLoadException("Cannot load keys from secret " + secretName))) .doOnError(ex -> log.error(KEYPAIR_ERROR, secretName, ex.getMessage())); }
[*] target: assertNotNull(keyPair)
[-] pred: org. junit. Assert. assertNotNull ( keyPair )
************************************
************************************
[+] input: testProcessMenuDeleted() { // 准备参数 Long menuId = randomLongId(); // mock 数据 RoleMenuDO roleMenuDO01 = randomPojo(RoleMenuDO.class, o -> o.setMenuId(menuId)); // 被删除 roleMenuMapper.insert(roleMenuDO01); RoleMenuDO roleMenuDO02 = randomPojo(RoleMenuDO.class); // 不被删除 roleMenuMapper.insert(roleMenuDO02);  // 调用 permissionService.processMenuDeleted(menuId); // 断言数据 List<RoleMenuDO> dbRoleMenus = roleMenuMapper.selectList(); "<AssertPlaceHolder>"; assertPojoEquals(dbRoleMenus.get(0), roleMenuDO02); }
processMenuDeleted(Long menuId);  /** * 获得角色拥有的菜单编号集合 * * @param roleId 角色编号 * @return 菜单编号集合 */ default Set<Long> getRoleMenuListByRoleId(Long roleId) { return getRoleMenuListByRoleId(singleton(roleId)); }
[*] target: assertEquals(1, dbRoleMenus.size())
[-] pred: org. junit. Assert. assertEquals ( 1, dbRoleMenus. size ( ) )
************************************
************************************
[+] input: Exception { doThrow(new IOException("boom")).when(delegate).send(anyList()); FileSender sender = buildFileSender(3); boolean result = sender.handleFileOnDisk(file); assertFalse(result); verify(fileUtils, never()).safeDelete(any()); verify(backoff).accept(1); result = sender.handleFileOnDisk(file); assertFalse(result); verify(fileUtils, never()).safeDelete(any()); verify(backoff).accept(2); result = sender.handleFileOnDisk(file); "<AssertPlaceHolder>"; verify(fileUtils).safeDelete(file); verifyNoMoreInteractions(backoff); }
handleFileOnDisk(File file) { Log.d(LOG_TAG, "Reading file content for ingest: " + file); List<byte[]> encodedSpans = readFileCompletely(file); if (encodedSpans.isEmpty()) { fileUtils.safeDelete(file); return false; }  boolean sentOk = attemptSend(file, encodedSpans); if (!sentOk) { retryTracker.trackFailure(file); } if (sentOk || retryTracker.exceededRetries(file)) { retryTracker.clear(file); fileUtils.safeDelete(file); } return sentOk; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
************************************
[+] input: testConvertShouldConvertFieldsWhenCalledWithNotNull() { //given final VaultFake input = mock(VaultFake.class); when(input.baseUri()).thenReturn(TestConstantsUri.HTTPS_LOCALHOST_8443); when(input.getCreatedOn()).thenReturn(TestConstants.TIME_10_MINUTES_AGO); when(input.getDeletedOn()).thenReturn(TestConstants.NOW); when(input.getRecoveryLevel()).thenReturn(RecoveryLevel.CUSTOMIZED_RECOVERABLE); when(input.getRecoverableDays()).thenReturn(RecoveryLevel.MIN_RECOVERABLE_DAYS_INCLUSIVE);  //when final VaultModel actual = underTest.convert(input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(TestConstantsUri.HTTPS_LOCALHOST_8443, actual.getBaseUri()); Assertions.assertEquals(TestConstants.TIME_10_MINUTES_AGO, actual.getCreatedOn()); Assertions.assertEquals(TestConstants.NOW, actual.getDeletedOn()); Assertions.assertEquals(RecoveryLevel.CUSTOMIZED_RECOVERABLE, actual.getRecoveryLevel()); Assertions.assertEquals(RecoveryLevel.MIN_RECOVERABLE_DAYS_INCLUSIVE, actual.getRecoverableDays());  }
convert(@Nullable final VaultFake source) { return Optional.ofNullable(source) .map(this::convertNonNull) .orElse(null); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testCreateKeyVersionShouldReturnIdWhenCalledWithValidOctParameter() { //given final KeyVaultFake underTest = createUnderTest(); final KeyCreateDetailedInput input = KeyCreateDetailedInput.builder() .key(new OctKeyCreationInput(KeyType.OCT_HSM, null)) .build();  //when final VersionedKeyEntityId actual = underTest.createKeyVersion(KEY_NAME_1, input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(actual.version()); Assertions.assertEquals(HTTPS_LOCALHOST, actual.vault()); Assertions.assertEquals(KEY_NAME_1, actual.id()); }
createKeyVersion(@NonNull final String keyName, @NonNull final KeyCreateDetailedInput input) { Assert.isTrue(!input.isManaged() || (input.getExpiresOn() != null && input.getNotBefore() != null), "Managed key (name=" + keyName + ") must have notBefore and expiresOn parameters set!"); final VersionedKeyEntityId keyEntityId = input.getKey().getKeyType().createKey(this, keyName, input.getKey()); setKeyOperations(keyEntityId, input.getKeyOperations()); //avoid overwriting expiry if it was generated by the rotation policy if (getEntities().getReadOnlyEntity(keyEntityId).getExpiry().isEmpty()) { setExpiry(keyEntityId, input.getNotBefore(), input.getExpiresOn()); } setEnabled(keyEntityId, Objects.requireNonNullElse(input.getEnabled(), true)); setManaged(keyEntityId, input.isManaged()); addTags(keyEntityId, input.getTags()); return keyEntityId; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testBuid() { MensagemDTO mensagemDTO = new MensagemDTO(); Mensagem build = mensagemDTO.build(); "<AssertPlaceHolder>"; assertTrue(build instanceof Mensagem); }
build() { return new Mensagem(); }
[*] target: assertNotNull(build)
[-] pred: org. junit. Assert. assertNotNull ( build )
************************************
************************************
[+] input: testCreateDiscountActivity_success() { // 准备参数 DiscountActivityCreateReqVO reqVO = randomPojo(DiscountActivityCreateReqVO.class, o -> { // 用于触发进行中的状态 o.setStartTime(addTime(Duration.ofDays(1))).setEndTime(addTime(Duration.ofDays(2))); // 设置商品 o.setProducts(asList(new DiscountActivityBaseVO.Product().setSpuId(1L).setSkuId(2L) .setDiscountType(PromotionDiscountTypeEnum.PRICE.getType()).setDiscountPrice(3), new DiscountActivityBaseVO.Product().setSpuId(10L).setSkuId(20L) .setDiscountType(PromotionDiscountTypeEnum.PERCENT.getType()).setDiscountPercent(30))); });  // 调用 Long discountActivityId = discountActivityService.createDiscountActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验活动 DiscountActivityDO discountActivity = discountActivityMapper.selectById(discountActivityId); assertPojoEquals(reqVO, discountActivity); assertEquals(discountActivity.getStatus(), PromotionActivityStatusEnum.WAIT.getStatus()); // 校验商品 List<DiscountProductDO> discountProducts = discountProductMapper.selectList(DiscountProductDO::getActivityId, discountActivity.getId()); assertEquals(discountProducts.size(), reqVO.getProducts().size()); for (int i = 0; i < reqVO.getProducts().size(); i++) { DiscountActivityBaseVO.Product product = reqVO.getProducts().get(i); DiscountProductDO discountProduct = discountProducts.get(i); assertEquals(discountProduct.getActivityId(), discountActivity.getId()); assertEquals(discountProduct.getSpuId(), product.getSpuId()); assertEquals(discountProduct.getSkuId(), product.getSkuId()); assertEquals(discountProduct.getDiscountType(), product.getDiscountType()); assertEquals(discountProduct.getDiscountPrice(), product.getDiscountPrice()); assertEquals(discountProduct.getDiscountPercent(), product.getDiscountPercent()); } }
createDiscountActivity(DiscountActivityCreateReqVO createReqVO) { // 校验商品是否冲突 validateDiscountActivityProductConflicts(null, createReqVO.getProducts());  // 插入活动 DiscountActivityDO discountActivity = DiscountActivityConvert.INSTANCE.convert(createReqVO) .setStatus(CommonStatusEnum.ENABLE.getStatus()); discountActivityMapper.insert(discountActivity); // 插入商品 List<DiscountProductDO> discountProducts = BeanUtils.toBean(createReqVO.getProducts(), DiscountProductDO.class, product -> product.setActivityId(discountActivity.getId()).setActivityStatus(discountActivity.getStatus()) .setActivityStartTime(createReqVO.getStartTime()).setActivityEndTime(createReqVO.getEndTime())); discountProductMapper.insertBatch(discountProducts); // 返回 return discountActivity.getId(); }
[*] target: assertNotNull(discountActivityId)
[-] pred: org. junit. Assert. assertNotNull ( discountActivityId )
************************************
************************************
[+] input: basicEvents() { StateMachineBuilder builder = StateMachine.builder(); builder.initialState(ExampleState.A); builder.state(ExampleState.A); builder.state(ExampleState.B);  AtomicBoolean startCalled = new AtomicBoolean(false); AtomicBoolean transitionCalled = new AtomicBoolean(false); AtomicBoolean stopCalled = new AtomicBoolean(false);  EventNode<StateMachineEvent> eventNode = builder.eventNode(); eventNode.addListener(StateMachineStartEvent.class, event -> startCalled.set(true)); eventNode.addListener(StateMachineTransitionEvent.class, event -> transitionCalled.set(true)); eventNode.addListener(StateMachineStopEvent.class, event -> stopCalled.set(true));  StateMachine stateMachine = builder.build();  Assertions.assertTrue(startCalled.get()); Assertions.assertFalse(transitionCalled.get()); Assertions.assertFalse(stopCalled.get());  stateMachine.transform(ExampleState.B);  Assertions.assertTrue(transitionCalled.get()); Assertions.assertFalse(stopCalled.get());  stateMachine.stop(Signal.UNDEFINED);  Assertions."<AssertPlaceHolder>"; }
stop(@NotNull Signal signal);
[*] target: assertTrue(stopCalled.get())
[-] pred: org. junit. Assert. assertTrue ( stopCalled. get ( ) )
************************************
************************************
[+] input: testConstructor() { String message = "This is the message"; String body = "This is the body"; int code = 403; String expectToString = "com.amazon.spapi.documents.exception.HttpResponseException: " + "This is the message {code=403, body=This is the body}";  HttpResponseException exception = new HttpResponseException(message, body, code);  assertEquals(message, exception.getMessage()); assertEquals(body, exception.getBody()); assertEquals(code, exception.getCode()); "<AssertPlaceHolder>"; }
toString() { return super.toString() + " {code=" + getCode() + ", body=" + getBody() + '}'; }
[*] target: assertEquals(expectToString, exception.toString())
[-] pred: org. junit. Assert. assertEquals ( expectToString, exception. toString ( ) )
************************************
************************************
[+] input: test_buffer_notNull() { InMemoryBufferFactory inMemoryBufferFactory = new InMemoryBufferFactory(); Assertions.assertNotNull(inMemoryBufferFactory); Buffer buffer = inMemoryBufferFactory.getBuffer(null, null, null); Assertions."<AssertPlaceHolder>"; assertThat(buffer, instanceOf(Buffer.class)); }
getBuffer(LambdaClient lambdaClient, String functionName, String invocationType){ return new InMemoryBuffer(lambdaClient, functionName, invocationType); }
[*] target: assertNotNull(buffer)
[-] pred: org. junit. Assert. assertNotNull ( buffer )
************************************
************************************
[+] input: test() { SortedMap sortedMap = new TreeMap(); for (int i = 0; i < 9; i = i + 3) { PartitionRange range = new PartitionRange(i, i + 2); List<ServerNode> nodes = Collections.singletonList(new ServerNode( String.valueOf(i), "", i / 3, 0, 0, 0, 0, Sets.newHashSet("test"), true)); sortedMap.put(range, nodes); }  PartitionRangeAssignment partitionRangeAssignment = new PartitionRangeAssignment(sortedMap); List<RssProtos.PartitionRangeAssignment> res = partitionRangeAssignment.convertToGrpcProto(); assertEquals(3, res.size());  for (int i = 0; i < 3; ++i) { RssProtos.PartitionRangeAssignment pra = res.get(i); assertEquals(1, pra.getServerCount()); assertEquals(i, pra.getServer(0).getPort()); assertEquals(3 * i, pra.getStartPartition()); assertEquals(3 * i + 2, pra.getEndPartition()); }  partitionRangeAssignment = new PartitionRangeAssignment(null); res = partitionRangeAssignment.convertToGrpcProto(); "<AssertPlaceHolder>"; }
isEmpty() { return assignments == null || assignments.isEmpty(); }
[*] target: assertTrue(res.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( res. isEmpty() )
************************************
************************************
[+] input: shouldBuildResource() { Message message = MessageFactory.resource(random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
resource( String attributeLocalName, String elementLocalName, String headerName) { return INSTANCE.composeMessage( "resource", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .entry("headerName", headerName) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: execute_with_cursor() { List<ExprValue> expected = Arrays.asList( tupleValue(of("name", "John", "age", 20)), tupleValue(of("name", "Allen", "age", 30))); var plan = new FakePhysicalPlan(expected.iterator()); when(protector.protect(plan)).thenReturn(plan);  OpenSearchExecutionEngine executor = new OpenSearchExecutionEngine(client, protector, new PlanSerializer(null)); List<ExprValue> actual = new ArrayList<>(); executor.execute( plan, new ResponseListener<>() { @Override public void onResponse(QueryResponse response) { actual.addAll(response.getResults()); assertTrue(response.getCursor().toString().startsWith("n:")); }  @Override public void onFailure(Exception e) { fail("Error occurred during execution", e); } });  "<AssertPlaceHolder>"; }
execute( PhysicalPlan physicalPlan, ExecutionContext context, ResponseListener<QueryResponse> listener) { PhysicalPlan plan = executionProtector.protect(physicalPlan); client.schedule( () -> { try { List<ExprValue> result = new ArrayList<>();  context.getSplit().ifPresent(plan::add); plan.open();  while (plan.hasNext()) { result.add(plan.next()); }  QueryResponse response = new QueryResponse( physicalPlan.schema(), result, planSerializer.convertToCursor(plan)); listener.onResponse(response); } catch (Exception e) { listener.onFailure(e); } finally { plan.close(); } }); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetWorkflowNames6() { List<String> names = NextflowScript.getWorkflowNames("workflow PLINK_TO_VCF{ some content }"); "<AssertPlaceHolder>"; assertEquals("PLINK_TO_VCF", names.get(0)); }
public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(1, names.size())
[-] pred: org. junit. Assert. assertEquals ( 1, names. size ( ) )
************************************
************************************
[+] input: shouldBuildInOutBusinessKeyNotSupported() { Message message = MessageFactory.inOutBusinessKeyNotSupported(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inOutBusinessKeyNotSupported(String elementLocalName) { return INSTANCE.composeMessage( "in-out-business-key-not-supported", ContextBuilder.builder() .context(businessKeyNotSupported()) .context(elementNotTransformablePrefix(elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: test_buffer_notNull() { LocalFileBufferFactory localFileBufferFactory = new LocalFileBufferFactory(); Assertions.assertNotNull(localFileBufferFactory); Buffer buffer = localFileBufferFactory.getBuffer(); Assertions."<AssertPlaceHolder>"; assertThat(buffer, instanceOf(LocalFileBuffer.class)); }
getBuffer() { File tempFile = null; Buffer localfileBuffer = null; try { tempFile = File.createTempFile(PREFIX, SUFFIX); localfileBuffer = new LocalFileBuffer(tempFile); } catch (IOException e) { LOG.error("Unable to create temp file ", e); } return localfileBuffer; }
[*] target: assertNotNull(buffer)
[-] pred: org. junit. Assert. assertNotNull ( buffer )
************************************
************************************
[+] input: shouldBuildErrorEventDefinition() { Message message = MessageFactory.errorEventDefinition(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
errorEventDefinition(String elementLocalName) { return INSTANCE.composeMessage( "error-event-definition", ContextBuilder.builder().context(elementNotTransformablePrefix(elementLocalName)).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: InvocationTargetException { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "returnFortyTwo");  "<AssertPlaceHolder>"; assertEquals(42, method.invoke(obj)); }
getMethod(@Nonnull Class<?> c, @Nonnull String method) { for (Method m : c.getMethods()) { if (m.getName().equals(method)) { return m; } }  return null; }
[*] target: assertNotNull(method)
[-] pred: org. junit. Assert. assertNotNull ( method )
************************************
************************************
[+] input: testRemove() { User created = entityRepositoryJpa.save(randomUser()); Assertions.assertNotNull(created);  boolean exists = entityRepositoryJpa.exists(User.class,created.getId()); Assertions.assertTrue(exists);  entityRepositoryJpa.remove(created); exists = entityRepositoryJpa.exists(User.class,created.getId()); Assertions."<AssertPlaceHolder>";  }
exists(Class<T> clazz, Serializable id);
[*] target: assertFalse(exists)
[-] pred: org. junit. Assert. assertFalse ( exists )
************************************
************************************
[+] input: remainingSize() { TokenQueue queue = provideEmptyTokenQueue(); assertEquals(0, queue.remainingSize());  queue = provide2TokenQueue(); assertEquals(2, queue.remainingSize());  queue.consume(); assertEquals(1, queue.remainingSize()); queue.consume(); "<AssertPlaceHolder>"; }
remainingSize() { return tokens.size() - nextTokenIndex; }
[*] target: assertEquals(0, queue.remainingSize())
[-] pred: org. junit. Assert. assertEquals ( 0, queue. remainingSize() )
************************************
************************************
[+] input: Exception { // Create post. Mailbox mbox = MailboxManager.getInstance().getMailboxByAccountId(MockProvisioning.DEFAULT_ACCOUNT_ID); DeliveryOptions opt = new DeliveryOptions(); opt.setFolderId(Mailbox.ID_FOLDER_INBOX); opt.setFlags(FlagInfo.POST.toBitmask()); Message msg = mbox.addMessage(null, new ParsedMessage( "From: test@zimbra.com\r\nTo: test@zimbra.com".getBytes(), false), opt, null);  // Validate flag. assertTrue((msg.getFlagBitmask() & Flag.FlagInfo.POST.toBitmask()) != 0);  // Search by flag. List<Integer> ids = TestUtil.search(mbox, "tag:\\post", MailItem.Type.MESSAGE); "<AssertPlaceHolder>"; assertEquals(msg.getId(), ids.get(0).intValue());  // Make sure that the post flag is serialized to XML. Element eMsg = ToXML.encodeMessageAsMIME(new XMLElement("test"), new ItemIdFormatter(), (OperationContext) null, msg, (String) null /* part */, false /* mustInline */, false /* mustNotInline */, false /* serializeType */, ToXML.NOTIFY_FIELDS);  assertEquals("^", eMsg.getAttribute(MailConstants.A_FLAGS));  // Try unsetting the post flag. mbox.setTags(null, msg.getId(), MailItem.Type.MESSAGE, 0, null); msg = mbox.getMessageById(null, msg.getId()); // make sure post flag is still set assertTrue((msg.getFlagBitmask() & Flag.FlagInfo.POST.toBitmask()) != 0, "POST flag set"); assertEquals(msg.getIdInMailbox(), msg.getImapUid(), "IMAP UID should be same as ID"); }
size();  /** * Serializes the payload into ByteBuffer. */ protected abstract void serialize(ByteBuffer out) throws IOException;  /** * Constructs the message by parsing the payload in ByteBuffer. */ protected abstract Message construct(ByteBuffer in) throws IOException;  /** * Returns MessageHandler instance. * @return */ public abstract MessageHandler getHandler();  /** * MessageHandler is an object that gets called when a Message is received * from a peer server on MessageChannel.  Each Message subclass must have * its own unique MessageHandler object that knows how to deal with * the Message. */ public interface MessageHandler { void handle(Message m, String clientId); }
[*] target: assertEquals(1, ids.size())
[-] pred: org. junit. Assert. assertEquals ( 1, ids. size ( ) )
************************************
************************************
[+] input: test() { MyQueue myQueue = new MyQueue(); myQueue.push(1); myQueue.push(2); assertEquals(1, myQueue.peek()); assertEquals(1, myQueue.pop()); "<AssertPlaceHolder>"; }
empty() { return stackOne.isEmpty() && stackTwo.isEmpty(); }
[*] target: assertFalse(myQueue.empty())
[-] pred: org. junit. Assert. assertFalse ( myQueue. empty() )
************************************
************************************
[+] input: add() { ExactCollection<String> exactCollection = new ExactCollection<>(10); for (int i = 0; i < exactCollection.size(); i++) { exactCollection.add(i, String.valueOf(i)); } Assertions.assertNotNull(exactCollection); Assertions."<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(10, exactCollection.size())
[-] pred: org. junit. Assert. assertEquals ( 10, exactCollection. size() )
************************************
************************************
[+] input: Exception { // Lookup and initialize mojo var engineConfigureMojo = (EngineConfigureMojo) lookupMojo("configure", getTestConfiguration()); setVariableValueToObject(engineConfigureMojo, "project", getMavenProject()); engineConfigureMojo.execute();  var storedEngineConfiguration = EngineConfiguration .loadDirectory(getBuildDirectory()); "<AssertPlaceHolder>"; JsonAssertions.assertEquals(getEngineConfiguration(), storedEngineConfiguration); }
execute() throws EngineConfigureMojoException {  if (!FlowModeAbstractMojo.isHillaAvailable(project)) { getLog().warn( "The 'configure' goal is only meant to be used in Hilla projects with endpoints." .stripIndent()); return; } try { var legacyFrontendFolder = project.getBasedir().toPath() .resolve(LEGACY_PROJECT_FRONTEND_PATH).toFile(); if (legacyFrontendFolder.exists()) { generatedTsFolder = legacyFrontendFolder.toPath() .resolve("generated").toFile(); } var buildDir = project.getBuild().getDirectory(); var cp = Stream .of(project.getCompileClasspathElements(), project.getRuntimeClasspathElements(), project.getSystemClasspathElements()) .flatMap(Collection::stream) .collect(Collectors.toCollection(LinkedHashSet::new)); var conf = new EngineConfiguration.Builder( project.getBasedir().toPath()).classPath(cp) .outputDir(generatedTsFolder.toPath()).generator(generator) .parser(parser).buildDir(buildDir) .classesDir(project.getBuild().getOutputDirectory()) .create();  // The configuration gathered from the Maven plugin is saved in a // file so that further runs can skip running a separate Maven // project just to get this configuration again var configDir = project.getBasedir().toPath().resolve(buildDir); Files.createDirectories(configDir); conf.store(configDir .resolve(EngineConfiguration.DEFAULT_CONFIG_FILE_NAME) .toFile()); } catch (DependencyResolutionRequiredException e) { throw new EngineConfigureMojoException("Configuration failed", e); } catch (IOException e) { throw new EngineConfigureMojoException( "Maven configuration has not been saved to file", e); } }
[*] target: assertNotNull(storedEngineConfiguration)
[-] pred: org. junit. Assert. assertNotNull ( storedEngineConfiguration )
************************************
************************************
[+] input: testManifestNoChange() {  File bar = getFile("schema/bar.graphqls"); File foo = getFile("schema/foo.graphqls");  Properties properties = new Properties(); properties.put(tempFolder.relativize(bar.toPath()).toString(), "7cada13b5b8770e46f7a69e8856abdb9"); properties.put(tempFolder.relativize(foo.toPath()).toString(), "61bbd2d58c22dfb3c664829ad116f7e9");  File manifest = tempFolder.resolve("manifest.props").toFile(); try (FileOutputStream fis = new FileOutputStream(manifest)) { properties.store(fis, "Schema Manifest"); }  SchemaFileManifest sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile());  Assertions.assertTrue(sfm.getChangedFiles().isEmpty());  sfm.syncManifest();  sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile());  Assertions."<AssertPlaceHolder>"; }
getChangedFiles() { Set<File> changed = new HashSet<>(); OrderedProperties manifest = loadManifest(); for (File file : files) { String oldChecksum = manifest.getProperty(relativizeToProject(file)); if (oldChecksum == null) { log.info("{} is new, will generate code", file.getName()); } else if (!oldChecksum.equals(generateChecksum(file))) { log.info("{} has changed, will generate code", file.getName()); } else { log.info("{} has not changed, will not generate code", file.getName()); continue; } changed.add(file); } return changed; }
[*] target: assertTrue(sfm.getChangedFiles().isEmpty())
[-] pred: org. junit. Assert. assertTrue ( sfm. getChangedFiles ( ). isEmpty ( ) )
************************************
************************************
[+] input: testCreateSeckillActivity_success() { // 准备参数 SeckillActivityCreateReqVO reqVO = randomPojo(SeckillActivityCreateReqVO.class);  // 调用 Long seckillActivityId = seckillActivityService.createSeckillActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 SeckillActivityDO seckillActivity = seckillActivityMapper.selectById(seckillActivityId); assertPojoEquals(reqVO, seckillActivity); }
createSeckillActivity(SeckillActivityCreateReqVO createReqVO) { // 1.1 校验商品秒杀时段是否冲突 validateProductConflict(createReqVO.getConfigIds(), createReqVO.getSpuId(), null); // 1.2 校验商品是否存在 validateProductExists(createReqVO.getSpuId(), createReqVO.getProducts());  // 2.1 插入秒杀活动 SeckillActivityDO activity = SeckillActivityConvert.INSTANCE.convert(createReqVO) .setStatus(CommonStatusEnum.ENABLE.getStatus()) .setStock(getSumValue(createReqVO.getProducts(), SeckillProductBaseVO::getStock, Integer::sum)); activity.setTotalStock(activity.getStock()); seckillActivityMapper.insert(activity); // 2.2 插入商品 List<SeckillProductDO> products = SeckillActivityConvert.INSTANCE.convertList(createReqVO.getProducts(), activity); seckillProductMapper.insertBatch(products); return activity.getId(); }
[*] target: assertNotNull(seckillActivityId)
[-] pred: org. junit. Assert. assertNotNull ( seckillActivityId )
************************************
************************************
[+] input: testAssignRoleMenu() { // 准备参数 Long roleId = 1L; Set<Long> menuIds = asSet(200L, 300L); // mock 数据 RoleMenuDO roleMenu01 = randomPojo(RoleMenuDO.class).setRoleId(1L).setMenuId(100L); roleMenuMapper.insert(roleMenu01); RoleMenuDO roleMenu02 = randomPojo(RoleMenuDO.class).setRoleId(1L).setMenuId(200L); roleMenuMapper.insert(roleMenu02);  // 调用 permissionService.assignRoleMenu(roleId, menuIds); // 断言 List<RoleMenuDO> roleMenuList = roleMenuMapper.selectList(); "<AssertPlaceHolder>"; assertEquals(1L, roleMenuList.get(0).getRoleId()); assertEquals(200L, roleMenuList.get(0).getMenuId()); assertEquals(1L, roleMenuList.get(1).getRoleId()); assertEquals(300L, roleMenuList.get(1).getMenuId()); }
assignRoleMenu(Long roleId, Set<Long> menuIds);  /** * 处理角色删除时，删除关联授权数据 * * @param roleId 角色编号 */ void processRoleDeleted(Long roleId);  /** * 处理菜单删除时，删除关联授权数据 * * @param menuId 菜单编号 */ void processMenuDeleted(Long menuId);  /** * 获得角色拥有的菜单编号集合 * * @param roleId 角色编号 * @return 菜单编号集合 */ default Set<Long> getRoleMenuListByRoleId(Long roleId) { return getRoleMenuListByRoleId(singleton(roleId)); }
[*] target: assertEquals(2, roleMenuList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, roleMenuList. size ( ) )
************************************
************************************
[+] input: deleteImageFile_whenImageIdIsValidAndDeleteImageTrue_setDeletedToTrue() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); LocalImage testImage = ImageUtils.createTestLocalImage(); BinFileEntity testBinFileEntity = BinfileEntityUtils.createTestBinFileEntity();  testImage.setBinFileEntity(testBinFileEntity); testDataset.getMedia().add(testImage); testImage.getDatasets().add(testDataset);  //when when(mediaRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testImage));  doAnswer((Answer) invocation -> { Media arg0 = invocation.getArgument(0);  assertTrue(arg0.isDeleted()); assertNotNull(arg0.getDeleteTime()); return arg0; }).when(mediaRepositoryMock).save(any(Media.class));  MediaViewModel actual = mediaService.deleteMediaFile(IMAGE_ID, true);  //Then "<AssertPlaceHolder>";  assertEquals(testImage.getId(), actual.getId()); assertEquals(testImage.getMediaName(), actual.getMediaName()); assertEquals(testImage.getMediaSourceType().name(), actual.getMediaSourceType());  verify(mediaRepositoryMock).save(any()); verify(mediaRepositoryMock, times(1)).save(any()); }
deleteMediaFile(String mediaId, boolean deleteMedia) { DataGymSecurity.isAuthenticated(); Media mediaById = getMediaById(mediaId);  // Permissions check String owner = isCurrentUserPermittedToManipulateMedia(mediaById, false); DataGymSecurity.isAdmin(owner, false);  boolean deleted = mediaById.isDeleted();  if (deleted == deleteMedia) { throw new GenericException("image_delete", null, null, mediaId); }  mediaById.setDeleted(deleteMedia); Long currentTime = null;  if (deleteMedia) { currentTime = System.currentTimeMillis();  // Check Pricing Plan Limits decreaseUsedStorage(owner, mediaById); } else { // Check Pricing Plan Limits increaseUsedStorage(owner, mediaById); }  mediaById.setDeleteTime(currentTime);  Media savedMedia = mediaRepository.save(mediaById); return MediaMapper.mapToMediaViewModel(savedMedia); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: Exception { Mailbox mbox = MailboxManager.getInstance().getMailboxByAccountId(MockProvisioning.DEFAULT_ACCOUNT_ID); DeliveryOptions opt = new DeliveryOptions(); opt.setFolderId(Mailbox.ID_FOLDER_INBOX); Message msg = mbox.addMessage( null, new ParsedMessage("From: from1@zimbra.com\r\nTo: to1@zimbra.com".getBytes(), false), opt, null);  Volume vol = VolumeManager.getInstance().getCurrentMessageVolume();  DbVolumeBlobs.addBlobReference(conn, mbox, vol, msg);  String digest = msg.getBlob().getDigest(); String path = msg.getBlob().getLocalBlob().getFile().getPath(); List<BlobReference> blobs = DbVolumeBlobs.getBlobReferences(conn, digest, vol); "<AssertPlaceHolder>"; BlobReference ref = blobs.get(0);  assertEquals(path, getPath(ref)); }
getBlobReferences(DbConnection conn, String digest, Volume volume) throws ServiceException { PreparedStatement stmt = null; ResultSet rs = null; try { stmt = conn.prepareStatement(SELECT_BLOB_REFS + CN_DIGEST + " = ? AND " + CN_VOLUME_ID + " = ? ORDER BY "+ CN_DIGEST + " ASC"); int pos = 1; stmt.setString(pos++, digest); stmt.setShort(pos++, volume.getId()); rs = stmt.executeQuery(); return fillBlobReferences(rs); } catch (SQLException e) { throw ServiceException.FAILURE("unable to query blob references", e); } finally { DbPool.closeResults(rs); DbPool.closeStatement(stmt); } }
[*] target: assertEquals(1, blobs.size())
[-] pred: org. junit. Assert. assertEquals ( 1, blobs. size ( ) )
************************************
************************************
[+] input: shouldBuildScriptJobType() { Message message = MessageFactory.scriptJobType(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
scriptJobType(String elementLocalName, String jobType) { return INSTANCE.composeMessage( "script-job-type", ContextBuilder.builder() .context(elementTransformedPrefix(elementLocalName)) .entry("jobType", jobType) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testParseSmsReceiveStatus() { // 准备参数 String text = "[\n" + "    {\n" + "        "user_receive_time": "2015-10-17 08:03:04",\n" + "        "nationcode": "86",\n" + "        "mobile": "13900000001",\n" + "        "report_status": "SUCCESS",\n" + "        "errmsg": "DELIVRD",\n" + "        "description": "用户短信送达成功",\n" + "        "sid": "12345",\n" + "        "ext": {"logId":"67890"}\n" + "    }\n" + "]";  // 调用 List<SmsReceiveRespDTO> statuses = smsClient.parseSmsReceiveStatus(text); // 断言 "<AssertPlaceHolder>"; assertTrue(statuses.get(0).getSuccess()); assertEquals("DELIVRD", statuses.get(0).getErrorCode()); assertEquals("13900000001", statuses.get(0).getMobile()); assertEquals(LocalDateTime.of(2015, 10, 17, 8, 3, 4), statuses.get(0).getReceiveTime()); assertEquals("12345", statuses.get(0).getSerialNo()); }
parseSmsReceiveStatus(String text) { JSONArray statuses = JSONUtil.parseArray(text); // 字段参考 return convertList(statuses, status -> { JSONObject statusObj = (JSONObject) status; return new SmsReceiveRespDTO() .setSuccess("SUCCESS".equals(statusObj.getStr("report_status"))) // 是否接收成功 .setErrorCode(statusObj.getStr("errmsg")) // 状态报告编码 .setMobile(statusObj.getStr("mobile")) // 手机号 .setReceiveTime(statusObj.getLocalDateTime("user_receive_time", null)) // 状态报告时间 .setSerialNo(statusObj.getStr("sid")); // 发送序列号 }); }
[*] target: assertEquals(1, statuses.size())
[-] pred: org. junit. Assert. assertEquals ( 1, statuses. size ( ) )
************************************
************************************
[+] input: shouldBuildEscalationCodeNoExpression() { Message message = escalationCodeNoExpression(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Escalation code cannot be an expression."); }
escalationCodeNoExpression() { return INSTANCE.staticMessage("escalation-code-no-expression"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: test_objectFileName_with_fileExtension() { final String namePattern = "events-%{yyyy-MM-dd'T'hh-mm-ss}.pdf";  when(s3SinkConfig.getObjectKeyOptions().getNamePattern()) .thenReturn(namePattern); when(event.formatString(namePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS)).thenReturn(namePattern); String objectFileName = ObjectKey.objectFileName(s3SinkConfig, null, event, expressionEvaluator); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(objectFileName.contains(".pdf")); }
objectFileName(final S3SinkConfig s3SinkConfig, final String codecExtension, final Event event, final ExpressionEvaluator expressionEvaluator) { String configNamePattern = s3SinkConfig.getObjectKeyOptions().getNamePattern(); String configNamePatternExpressionResult = event.formatString(configNamePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS); int extensionIndex = configNamePatternExpressionResult.lastIndexOf('.'); if (extensionIndex > 0) { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult.substring(0, extensionIndex)) + "." + (codecExtension!=null? codecExtension :configNamePatternExpressionResult.substring(extensionIndex + 1)); } else { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult) + "." + (codecExtension!=null? codecExtension : DEFAULT_CODEC_FILE_EXTENSION); } }
[*] target: assertNotNull(objectFileName)
[-] pred: org. junit. Assert. assertNotNull ( objectFileName )
************************************
************************************
[+] input: shouldBuildErrorCodeNoExpression() { Message message = errorCodeNoExpression(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()).isEqualTo("Error code cannot be an expression."); }
errorCodeNoExpression() { return INSTANCE.staticMessage("error-code-no-expression"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: JsonProcessingException { //given final List<VaultModel> result = Collections.singletonList(new VaultModel()); final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(VAULT_MODEL_LIST_TYPE_REF))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(result);  //when final List<VaultModel> actual = underTest.listDeletedVaults();  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/deleted", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.GET, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(VAULT_MODEL_LIST_TYPE_REF)); verify(objectReader).readValue(anyString()); }
listDeletedVaults() { final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_DELETED_PATH); final HttpRequest request = new HttpRequest(HttpMethod.GET, uri.toString()); return sendAndProcess(request, r -> r.getResponseObject(VAULT_MODEL_LIST_TYPE_REF)); }
[*] target: assertEquals(result, actual)
[-] pred: org. junit. Assert. assertEquals ( result, actual )
************************************
************************************
[+] input: InterruptedException { boolean aQueued = reloader.reload(plugin); boolean bQueued = reloader.reload(plugin);  "<AssertPlaceHolder>"; assertFalse(bQueued); assertTrue(reloader.isReloadQueued());  Thread.sleep(200);  Mockito.verify(reloadShutdownHandler, Mockito.times(1)).shutdown(plugin); Mockito.verify(reloadStartupHandler, Mockito.times(1)).start(plugin); }
reload(@NotNull Plugin plugin) { if (plugin == null) throw new IllegalArgumentException("Plugin must not be null");  synchronized (this) { if (this.reloadQueued) return false; this.reloadQueued = true; }  scheduler.schedule(() -> { try { this.doReload(plugin); } catch (Throwable throwable) { Log.error("Failed to reload plugin " + plugin.getName(), throwable); } finally { synchronized (this) { this.reloadQueued = false; } } }, Duration.ofMillis(this.quietPeriod)); return true; }
[*] target: assertTrue(aQueued)
[-] pred: org. junit. Assert. assertTrue ( aQueued )
************************************
************************************
[+] input: isScrollStarted() { assertFalse(request.isScroll());  request.setScrollId("scroll123"); assertTrue(request.isScroll());  request.reset(); "<AssertPlaceHolder>"; }
isScroll() { return !scrollId.equals(NO_SCROLL_ID); }
[*] target: assertFalse(request.isScroll())
[-] pred: org. junit. Assert. assertFalse ( request. isScroll() )
************************************
************************************
[+] input: testGenNotifyBody() {  Locale locale = new Locale("en", "US");  ShareInfoData sid = new ShareInfoData(); sid.setGranteeDisplayName("Demo User Three"); sid.setGranteeId("46031e4c-deb4-4724-b5bb-8f854d0c518a"); sid.setGranteeName("Demo User Three"); sid.setGranteeType(ACL.GRANTEE_USER);  sid.setPath("/Calendar/Cal1"); sid.setFolderDefaultView(MailItem.Type.APPOINTMENT); sid.setItemUuid("9badf685-3420-458b-9ce5-826b0bec638f"); sid.setItemId(257);  sid.setOwnerAcctId("bbf152ca-e7cd-477e-9f72-70fef715c5f9"); sid.setOwnerAcctEmail("test@zimbra.com"); sid.setOwnerAcctDisplayName("Demo User Two");  try {  sid.setRights(ACL.stringToRights("rwidxap")); MimeMultipart mmp = ShareInfo.NotificationSender.genNotifBody(sid, locale, null, null); "<AssertPlaceHolder>"; String body = (String) mmp.getBodyPart(0).getDataHandler() .getContent(); assertTrue(body.indexOf("Role: Admin") != -1);  } catch (ServiceException | MessagingException | IOException e) { fail("Exception should not be thrown: " + e.getMessage()); } }
genNotifBody( ShareInfoData sid, Locale locale, Action action, String externalGroupMember) throws MessagingException, ServiceException {  // Body MimeMultipart mmp = new ZMimeMultipart("alternative");  String extUserShareAcceptUrl = null; String extUserLoginUrl = null; String externalGranteeName = null; if (sid.getGranteeTypeCode() == ACL.GRANTEE_GUEST) { externalGranteeName = sid.getGranteeName(); } else if (sid.getGranteeTypeCode() == ACL.GRANTEE_GROUP && externalGroupMember != null) { externalGranteeName = externalGroupMember; } // this mail will go to external email address boolean goesToExternalAddr = (externalGranteeName != null); if (action == null && goesToExternalAddr) { Account owner = Provisioning.getInstance().getAccountById(sid.getOwnerAcctId()); extUserShareAcceptUrl = AccountUtil.getShareAcceptURL(owner, sid.getItemId(), externalGranteeName); extUserLoginUrl = AccountUtil.getExtUserLoginURL(owner); }  // TEXT part (add me first!) String mimePartText; if (action == Action.revoke) { mimePartText = genRevokePart(sid, locale, false); } else if (action == Action.expire) { mimePartText = genExpirePart(sid, locale, false); } else { mimePartText = genPart( sid, action == Action.edit, extUserShareAcceptUrl, extUserLoginUrl, locale, null, false); } MimeBodyPart textPart = new ZMimeBodyPart(); textPart.setText(mimePartText, MimeConstants.P_CHARSET_UTF8); mmp.addBodyPart(textPart);  // HTML part if (action == Action.revoke) { mimePartText = genRevokePart(sid, locale, true); } else if (action == Action.expire) { mimePartText = genExpirePart(sid, locale, true); } else { mimePartText = genPart( sid, action == Action.edit, extUserShareAcceptUrl, extUserLoginUrl, locale, null, true); } MimeBodyPart htmlPart = new ZMimeBodyPart(); htmlPart.setDataHandler(new DataHandler(new HtmlPartDataSource(mimePartText))); mmp.addBodyPart(htmlPart);  // XML part if (!goesToExternalAddr) { MimeBodyPart xmlPart = new ZMimeBodyPart(); xmlPart.setDataHandler( new DataHandler(new XmlPartDataSource(genXmlPart(sid, null, action)))); mmp.addBodyPart(xmlPart); }  return mmp; }
[*] target: assertNotNull(mmp)
[-] pred: org. junit. Assert. assertNotNull ( mmp )
************************************
************************************
[+] input: shouldBuildFormData() { Message message = MessageFactory.formData(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
formData(String elementLocalName) { return INSTANCE.composeMessage( "form-data", ContextBuilder.builder().context(elementNotTransformablePrefix(elementLocalName)).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: idleBeat() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.idleBeat(new IdleBeatParam(jobId));  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(500, retval.getCode()); Assertions.assertEquals("job thread is running or has trigger queue.", retval.getMsg()); }
idleBeat(IdleBeatParam idleBeatParam);
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
************************************
[+] input: Exception { Provisioning.getInstance().getLocalServer().setHttpProxyURL("http://user:pass@proxyhost:8080");  HttpClientBuilder httpClientBuilderSpy = Mockito.spy(HttpClientBuilder.create()); HttpProxyUtil.configureProxy(httpClientBuilderSpy);  ArgumentCaptor<RequestConfig> configCaptor = ArgumentCaptor.forClass(RequestConfig.class); verify(httpClientBuilderSpy).setDefaultRequestConfig(configCaptor.capture()); RequestConfig config = configCaptor.getValue();  HttpHost proxy = config.getProxy(); Assertions."<AssertPlaceHolder>"; assertEquals("proxyhost", proxy.getHostName()); assertEquals(8080, proxy.getPort());  ArgumentCaptor<CredentialsProvider> credentialsCaptor = ArgumentCaptor.forClass(CredentialsProvider.class); verify(httpClientBuilderSpy).setDefaultCredentialsProvider(credentialsCaptor.capture()); CredentialsProvider credentialsProvider = credentialsCaptor.getValue();  UsernamePasswordCredentials creds = (UsernamePasswordCredentials) credentialsProvider.getCredentials(AuthScope.ANY); Assertions.assertNotNull(creds); assertEquals("user", creds.getUserName()); assertEquals("pass", creds.getPassword()); }
configureProxy(HttpClientBuilder clientBuilder) { try { final var httpProxyUrl = Provisioning.getInstance().getLocalServer() .getAttr(ZAttrProvisioning.A_zimbraHttpProxyURL, null); if (httpProxyUrl == null || httpProxyUrl.isEmpty()) { ZimbraLog.misc.info("HttpProxyUtil.configureProxy 'zimbraHttpProxyURL' is null or empty, not using proxy."); return; }  var uri = new URI(httpProxyUrl); var proxyHost = uri.getHost(); var proxyPort = uri.getPort();  var userInfo = uri.getUserInfo(); String username = null; String password = null; if (userInfo != null) { var credentials = userInfo.split(":"); if (credentials.length == 2) { username = credentials[0]; password = credentials[1]; } }  if (username != null && password != null) { CredentialsProvider credentialsProvider = new BasicCredentialsProvider(); credentialsProvider.setCredentials( new AuthScope(proxyHost, proxyPort), new UsernamePasswordCredentials(username, password) ); clientBuilder.setDefaultCredentialsProvider(credentialsProvider); }  var proxy = new HttpHost(proxyHost, proxyPort); var config = RequestConfig.custom() .setProxy(proxy) .build(); clientBuilder.setDefaultRequestConfig(config);  if (ZimbraLog.misc.isDebugEnabled()) { ZimbraLog.misc.debug("setting proxy: " + httpProxyUrl); }  } catch (ServiceException | URISyntaxException | IllegalArgumentException e) { ZimbraLog.misc.warn("Unable to configureProxy: " + e.getMessage(), e); } }
[*] target: assertNotNull(proxy)
[-] pred: org. junit. Assert. assertNotNull ( proxy )
************************************
************************************
[+] input: isEmpty() { when(searchResponse.getHits()) .thenReturn( new SearchHits( new SearchHit[] {searchHit1, searchHit2}, new TotalHits(2L, TotalHits.Relation.EQUAL_TO), 1.0F));  var response = new OpenSearchResponse(searchResponse, factory, includes); assertFalse(response.isEmpty());  when(searchResponse.getHits()).thenReturn(SearchHits.empty()); when(searchResponse.getAggregations()).thenReturn(null);  response = new OpenSearchResponse(searchResponse, factory, includes); assertTrue(response.isEmpty());  when(searchResponse.getHits()) .thenReturn(new SearchHits(null, new TotalHits(0, TotalHits.Relation.EQUAL_TO), 0)); response = new OpenSearchResponse(searchResponse, factory, includes); assertTrue(response.isEmpty());  when(searchResponse.getHits()).thenReturn(SearchHits.empty()); when(searchResponse.getAggregations()).thenReturn(new Aggregations(emptyList()));  response = new OpenSearchResponse(searchResponse, factory, includes); "<AssertPlaceHolder>"; }
isEmpty() { return (hits.getHits() == null) || (hits.getHits().length == 0) && aggregations == null; }
[*] target: assertFalse(response.isEmpty())
[-] pred: org. junit. Assert. assertFalse ( response. isEmpty() )
************************************
************************************
[+] input: filterUncompletedTasksOfList() { final String task1Name = "TaskOne"; final String task2Name = "TaskTwo"; final String task3Name = "TaskThree";  final TodoList todoList = new TodoList(); final TaskId taskId1 = todoList.addTask(task1Name); todoList.addTask(task2Name); final TaskId taskId3 = todoList.addTask(task3Name);  todoList.toggleTaskCompletion(taskId1); todoList.toggleTaskCompletion(taskId3);  final List<Task> tasks = todoList.filterTasks(false); "<AssertPlaceHolder>"; assertEquals(task2Name, tasks.get(0).getName()); }
size() { return tasks.size(); }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
************************************
[+] input: overflowMana() { String res = tracker.update("§61605/1305❤     §a270§a❈ Defense     §b548/548✎ §3200ʬ", false); "<AssertPlaceHolder>"; assertStats(1605, 1305, 270, 548, 548, 200); }
update(String actionBar, boolean filterManaUse) { var sb = new StringBuilder(); Matcher matcher = STATUS_HEALTH.matcher(actionBar); if (!matcher.lookingAt()) return actionBar; updateHealth(matcher); if (matcher.group(5) != null) { sb.append("§c❤"); sb.append(matcher.group(5)); } actionBar = reset(actionBar, matcher); if (matcher.usePattern(MANA_STATUS).lookingAt()) { defense = 0; updateMana(matcher); actionBar = reset(actionBar, matcher); } else { if (matcher.usePattern(DEFENSE_STATUS).lookingAt()) { defense = parseInt(matcher, 1); actionBar = reset(actionBar, matcher); } else if (filterManaUse && matcher.usePattern(MANA_USE).lookingAt()) { actionBar = reset(actionBar, matcher); } if (matcher.usePattern(MANA_STATUS).find()) { updateMana(matcher); matcher.appendReplacement(sb, ""); } } matcher.appendTail(sb); String res = sb.toString().trim(); return res.isEmpty() ? null : res; }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
************************************
[+] input: test() { List<Integer> elements = Arrays.asList(1, 2, 3); PeekingIterator testObject = new PeekingIterator(elements.iterator()); assertEquals(1, testObject.next()); assertEquals(2, testObject.peek()); assertEquals(2, testObject.next()); assertEquals(3, testObject.next()); "<AssertPlaceHolder>"; }
hasNext() { return areElementsLeft; }
[*] target: assertFalse(testObject.hasNext())
[-] pred: org. junit. Assert. assertFalse ( testObject. hasNext() )
************************************
************************************
[+] input: shouldBuildFailedJobRetryTimeCycleRemoved() { Message message = MessageFactory.failedJobRetryTimeCycleRemoved(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
failedJobRetryTimeCycleRemoved(String elementLocalName, String timecycle) { return INSTANCE.composeMessage( "failed-job-retry-time-cycle-removed", ContextBuilder.builder() .context(elementNotTransformablePrefix(elementLocalName)) .entry("timecycle", timecycle) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildFormKey() { Message message = MessageFactory.formKey(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
formKey(String attributeLocalName, String elementLocalName) { return INSTANCE.composeMessage( "form-key", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: Exception { Provisioning.getInstance().getLocalServer().setHttpProxyURL("http://proxyhost:8080");  HttpClientBuilder httpClientBuilderSpy = Mockito.spy(HttpClientBuilder.create()); HttpProxyUtil.configureProxy(httpClientBuilderSpy);  ArgumentCaptor<RequestConfig> configCaptor = ArgumentCaptor.forClass(RequestConfig.class); verify(httpClientBuilderSpy).setDefaultRequestConfig(configCaptor.capture()); RequestConfig config = configCaptor.getValue();  HttpHost proxy = config.getProxy(); Assertions."<AssertPlaceHolder>"; assertEquals("proxyhost", proxy.getHostName()); assertEquals(8080, proxy.getPort()); }
configureProxy(HttpClientBuilder clientBuilder) { try { final var httpProxyUrl = Provisioning.getInstance().getLocalServer() .getAttr(ZAttrProvisioning.A_zimbraHttpProxyURL, null); if (httpProxyUrl == null || httpProxyUrl.isEmpty()) { ZimbraLog.misc.info("HttpProxyUtil.configureProxy 'zimbraHttpProxyURL' is null or empty, not using proxy."); return; }  var uri = new URI(httpProxyUrl); var proxyHost = uri.getHost(); var proxyPort = uri.getPort();  var userInfo = uri.getUserInfo(); String username = null; String password = null; if (userInfo != null) { var credentials = userInfo.split(":"); if (credentials.length == 2) { username = credentials[0]; password = credentials[1]; } }  if (username != null && password != null) { CredentialsProvider credentialsProvider = new BasicCredentialsProvider(); credentialsProvider.setCredentials( new AuthScope(proxyHost, proxyPort), new UsernamePasswordCredentials(username, password) ); clientBuilder.setDefaultCredentialsProvider(credentialsProvider); }  var proxy = new HttpHost(proxyHost, proxyPort); var config = RequestConfig.custom() .setProxy(proxy) .build(); clientBuilder.setDefaultRequestConfig(config);  if (ZimbraLog.misc.isDebugEnabled()) { ZimbraLog.misc.debug("setting proxy: " + httpProxyUrl); }  } catch (ServiceException | URISyntaxException | IllegalArgumentException e) { ZimbraLog.misc.warn("Unable to configureProxy: " + e.getMessage(), e); } }
[*] target: assertNotNull(proxy)
[-] pred: org. junit. Assert. assertNotNull ( proxy )
************************************
************************************
[+] input: streamTest() { Cycle<Integer> cycle = new Cycle<>(1, 2, 3, 4); List<Integer> expected = List.of(1, 2, 3, 4, 1, 2, 3, 4, 1, 2); List<Integer> actual; // Un-queried cycle actual = cycle.stream() .limit(expected.size()) .toList(); Assertions.assertEquals(expected, actual); // Queried cycle cycle.next(); actual = cycle.stream() .limit(expected.size()) .toList(); Assertions."<AssertPlaceHolder>"; }
toList() { Iterator<T> iterator = Iterators.limit(this.iterable.iterator(), this.size); return ImmutableList.copyOf(iterator); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: testGetEntityShouldReturnValueWhenCalledWithExistingKey() { //given final KeyVaultFake underTest = createUnderTest(); final OctKeyCreationInput input = new OctKeyCreationInput(KeyType.OCT_HSM, null); final VersionedKeyEntityId keyEntityId = underTest.createKeyVersion(KEY_NAME_1, KeyCreateDetailedInput.builder() .key(input) .build());  //when final ReadOnlyKeyVaultKeyEntity actual = underTest.getEntities().getReadOnlyEntity(keyEntityId);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(keyEntityId.asUri(HTTPS_LOCALHOST_8443), actual.getId().asUri(HTTPS_LOCALHOST_8443)); }
createKeyVersion(@NonNull final String keyName, @NonNull final KeyCreateDetailedInput input) { Assert.isTrue(!input.isManaged() || (input.getExpiresOn() != null && input.getNotBefore() != null), "Managed key (name=" + keyName + ") must have notBefore and expiresOn parameters set!"); final VersionedKeyEntityId keyEntityId = input.getKey().getKeyType().createKey(this, keyName, input.getKey()); setKeyOperations(keyEntityId, input.getKeyOperations()); //avoid overwriting expiry if it was generated by the rotation policy if (getEntities().getReadOnlyEntity(keyEntityId).getExpiry().isEmpty()) { setExpiry(keyEntityId, input.getNotBefore(), input.getExpiresOn()); } setEnabled(keyEntityId, Objects.requireNonNullElse(input.getEnabled(), true)); setManaged(keyEntityId, input.isManaged()); addTags(keyEntityId, input.getTags()); return keyEntityId; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: InterruptedException { boolean queued = reloader.reload(plugin);  "<AssertPlaceHolder>"; assertTrue(reloader.isReloadQueued());  Mockito.verify(reloadShutdownHandler, Mockito.never()).shutdown(plugin); Mockito.verify(reloadStartupHandler, Mockito.never()).start(plugin);  Thread.sleep(200);  Mockito.verify(reloadShutdownHandler, Mockito.times(1)).shutdown(plugin); Mockito.verify(reloadStartupHandler, Mockito.times(1)).start(plugin); }
reload(@NotNull Plugin plugin) { if (plugin == null) throw new IllegalArgumentException("Plugin must not be null");  synchronized (this) { if (this.reloadQueued) return false; this.reloadQueued = true; }  scheduler.schedule(() -> { try { this.doReload(plugin); } catch (Throwable throwable) { Log.error("Failed to reload plugin " + plugin.getName(), throwable); } finally { synchronized (this) { this.reloadQueued = false; } } }, Duration.ofMillis(this.quietPeriod)); return true; }
[*] target: assertTrue(queued)
[-] pred: org. junit. Assert. assertTrue ( queued )
************************************
************************************
[+] input: statCosIdGenerator() { var cosIdGenerator = new Radix36CosIdGenerator(0); var stat = cosIdGenerator.stat(); Assertions."<AssertPlaceHolder>"; assertThat(stat, Matchers.instanceOf(CosIdGeneratorStat.class)); var cosIdGeneratorStat = (CosIdGeneratorStat) stat; assertThat(cosIdGeneratorStat.getMachineId(), equalTo(0)); }
stat();
[*] target: assertNotNull(stat)
[-] pred: org. junit. Assert. assertNotNull ( stat )
************************************
************************************
[+] input: testCancelOrder() { when(mockOrderRequest.originOrderId()).thenReturn("order1"); manager.submitOrder(mockOrderRequest); boolean result = manager.cancelOrder("order1"); "<AssertPlaceHolder>"; Map<String, OrderRequest> orderMap = manager.orderMap; assertEquals(0, orderMap.size()); }
cancelOrder(String originOrderId) { OrderRequest orderReq = orderMap.remove(originOrderId); if(Objects.isNull(orderReq)) { return false; } orderReq.cancelOrder(); return true; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
************************************
[+] input: testGetChannelListByAppIds() { // mock 数据 PayChannelDO dbChannel01 = randomPojo(PayChannelDO.class, o -> { o.setCode(PayChannelEnum.ALIPAY_APP.getCode()); o.setConfig(randomAlipayPayClientConfig()); }); channelMapper.insert(dbChannel01);// @Sql: 先插入出一条存在的数据 PayChannelDO dbChannel02 = randomPojo(PayChannelDO.class, o -> { o.setCode(PayChannelEnum.WX_PUB.getCode()); o.setConfig(randomWxPayClientConfig()); }); channelMapper.insert(dbChannel02);// @Sql: 先插入出一条存在的数据 // 准备参数 Long appId = dbChannel01.getAppId();  // 调用 List<PayChannelDO> channels = channelService.getChannelListByAppIds(Collections.singleton(appId)); // 校验是否更新正确 "<AssertPlaceHolder>"; assertPojoEquals(dbChannel01, channels.get(0)); }
getChannelListByAppIds(Collection<Long> appIds);  /** * 根据条件获取渠道 * * @param appId      应用编号 * @param code       渠道编码 * @return 数量 */ PayChannelDO getChannelByAppIdAndCode(Long appId, String code);  /** * 支付渠道的合法性 * * 如果不合法，抛出 {@link ServiceException}
[*] target: assertEquals(1, channels.size())
[-] pred: org. junit. Assert. assertEquals ( 1, channels. size ( ) )
************************************
************************************
[+] input: testDefaultConstructor() { op = new Checkpoint(); "<AssertPlaceHolder>"; assertNull(op.getTransactionId()); }
getNumActiveTxns() { return mTxnSet.size(); }
[*] target: assertEquals(0, op.getNumActiveTxns())
[-] pred: org. junit. Assert. assertEquals ( 0, op. getNumActiveTxns() )
************************************
************************************
[+] input: Exception { // Ensure the rules directory has at least one file Collection<RuleStream> ruleStreams = transformersFactory.loadRules();  "<AssertPlaceHolder>"; assertFalse(ruleStreams.isEmpty());  for (RuleStream ruleStream : ruleStreams) { assertNotNull(ruleStream.getRuleStream()); assertNotNull(ruleStream.getName()); assertTrue(ruleStream.getName().endsWith("-rule.yaml")); } }
loadRules() { List<RuleStream> ruleStreams = new ArrayList<>(); ClassLoader classLoader = getClass().getClassLoader();  try { // Use ClassLoader to find all resources that match the RULES_PATH pattern Enumeration<URL> rulesURLs = classLoader.getResources(RULES_PATH);  while (rulesURLs.hasMoreElements()) { URL rulesURL = rulesURLs.nextElement();  try { // Convert the URL to a URI, then to a Path to read the directory contents Path rulesPath; try { rulesPath = Paths.get(rulesURL.toURI()); } catch (FileSystemNotFoundException e) { // Handle the case where the file system is not accessible (e.g., in a JAR) FileSystem fileSystem = FileSystems.newFileSystem(rulesURL.toURI(), Collections.emptyMap()); rulesPath = fileSystem.getPath(RULES_PATH); }  // Scan the directory for rule files try (Stream<Path> paths = Files.walk(rulesPath)) { paths.filter(Files::isRegularFile) .forEach(rulePath -> { try { InputStream ruleInputStream = Files.newInputStream(rulePath); ruleStreams.add(new RuleStream(rulePath.getFileName().toString(), ruleInputStream)); } catch (IOException e) { throw new RuntimeException("Failed to load rule: " + rulePath, e); } }); } } catch (IOException | URISyntaxException e) { throw new RuntimeException("Failed to scan rules directory on classpath: " + rulesURL, e); } } } catch (IOException e) { throw new RuntimeException("Failed to load rules from classpath.", e); }  return ruleStreams; }
[*] target: assertNotNull(ruleStreams)
[-] pred: org. junit. Assert. assertNotNull ( ruleStreams )
************************************
************************************
[+] input: repeatCommand() { int limit = 25; ImapCommandThrottle throttle = new ImapCommandThrottle(limit);  for (int i = 0; i < limit; i++) { MockImapCommand command = new MockImapCommand("p1", "p3", 123); assertFalse(throttle.isCommandThrottled(command)); } MockImapCommand command = new MockImapCommand("p1", "p3", 123); "<AssertPlaceHolder>"; }
isCommandThrottled(ImapCommand command) { if (repeatLimit <= 0) { return false; } else if (command.throttle(lastCommand)) { // commands can implement their own throttle mechanism ZimbraLog.imap.debug("throttled by command"); return true; } else if (isCommandRepeated(command)) { repeats++; lastCommand = command; if (repeats > repeatLimit) { ZimbraLog.imap.debug("throttled by repeat"); return true; } else { return false; } } else { repeats = 1; lastCommand = command; return false; } }
[*] target: assertTrue(throttle.isCommandThrottled(command))
[-] pred: org. junit. Assert. assertTrue ( throttle. isCommandThrottled ( command ) )
************************************
************************************
[+] input: testCreateDictData_success() { // 准备参数 DictDataSaveReqVO reqVO = randomPojo(DictDataSaveReqVO.class, o -> o.setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值 // mock 方法 when(dictTypeService.getDictType(eq(reqVO.getDictType()))).thenReturn(randomDictTypeDO(reqVO.getDictType()));  // 调用 Long dictDataId = dictDataService.createDictData(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DictDataDO dictData = dictDataMapper.selectById(dictDataId); assertPojoEquals(reqVO, dictData, "id"); }
createDictData(DictDataSaveReqVO createReqVO) { // 校验字典类型有效 validateDictTypeExists(createReqVO.getDictType()); // 校验字典数据的值的唯一性 validateDictDataValueUnique(null, createReqVO.getDictType(), createReqVO.getValue());  // 插入字典类型 DictDataDO dictData = BeanUtils.toBean(createReqVO, DictDataDO.class); dictDataMapper.insert(dictData); return dictData.getId(); }
[*] target: assertNotNull(dictDataId)
[-] pred: org. junit. Assert. assertNotNull ( dictDataId )
************************************
************************************
[+] input: Exception { Collection<RuleStream> ruleStreams = transformersFactory.loadRules();  "<AssertPlaceHolder>"; assertFalse(ruleStreams.isEmpty());  for (RuleStream ruleStream : ruleStreams) { assertNotNull(ruleStream.getRuleStream()); assertNotNull(ruleStream.getName()); } }
loadRules() { List<RuleStream> ruleStreams = new ArrayList<>(); ClassLoader classLoader = getClass().getClassLoader();  try { // Use ClassLoader to find all resources that match the RULES_PATH pattern Enumeration<URL> rulesURLs = classLoader.getResources(RULES_PATH);  while (rulesURLs.hasMoreElements()) { URL rulesURL = rulesURLs.nextElement();  try { // Convert the URL to a URI, then to a Path to read the directory contents Path rulesPath; try { rulesPath = Paths.get(rulesURL.toURI()); } catch (FileSystemNotFoundException e) { // Handle the case where the file system is not accessible (e.g., in a JAR) FileSystem fileSystem = FileSystems.newFileSystem(rulesURL.toURI(), Collections.emptyMap()); rulesPath = fileSystem.getPath(RULES_PATH); }  // Scan the directory for rule files try (Stream<Path> paths = Files.walk(rulesPath)) { paths.filter(Files::isRegularFile) .forEach(rulePath -> { try { InputStream ruleInputStream = Files.newInputStream(rulePath); ruleStreams.add(new RuleStream(rulePath.getFileName().toString(), ruleInputStream)); } catch (IOException e) { throw new RuntimeException("Failed to load rule: " + rulePath, e); } }); } } catch (IOException | URISyntaxException e) { throw new RuntimeException("Failed to scan rules directory on classpath: " + rulesURL, e); } } } catch (IOException e) { throw new RuntimeException("Failed to load rules from classpath.", e); }  return ruleStreams; }
[*] target: assertNotNull(ruleStreams)
[-] pred: org. junit. Assert. assertNotNull ( ruleStreams )
************************************
************************************
[+] input: searchStepsByName() { Collection<Step> step = catalogCollection.searchByName(CONNECTOR_2); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, step.size()); for (Step s : step) { Assertions.assertEquals(CONNECTOR_2, s.getName()); } }
searchByName(final String connectionName) { if (connectionName == null) { return Collections.emptyList(); } Collection<T> steps = new ArrayList<>(); for (MetadataCatalog<T> c : catalogs) { steps.addAll(c.searchByName(connectionName)); } return steps; }
[*] target: assertNotNull(step)
[-] pred: org. junit. Assert. assertNotNull ( step )
************************************
************************************
[+] input: updateDataset_whenInputDatasetIdValid_updateDataset() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given DatasetUpdateBindingModel testDatasetUpdateBindingModel = DatasetUtils.createTestDatasetUpdateBindingModel(); Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); testDataset.setName("DatasetName updated"); testDataset.setShortDescription("Dataset shortDescription updated");  //When when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg());  DatasetViewModel actual = datasetService.updateDataset(DATASET_ID, testDatasetUpdateBindingModel);  //Then "<AssertPlaceHolder>"; assertEquals(testDatasetUpdateBindingModel.getName(), actual.getName()); assertEquals(testDatasetUpdateBindingModel.getShortDescription(), actual.getShortDescription());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
updateDataset(String id, @Valid DatasetUpdateBindingModel datasetUpdateBindingModel) { Dataset datasetById = getDatasetById(id);  //Permissions check String owner = datasetById.getOwner(); DataGymSecurity.isAdmin(owner, false);  String datasetName = datasetById.getName();  if (DUMMY_DATASET_ONE_PLACEHOLDER.equals(datasetName) || DUMMY_DATASET_TWO_PLACEHOLDER.equals(datasetName)) { throw new GenericException(DUMMY_DATASET_ERROR_PLACEHOLDER, null, null); }  String currentDatasetName = datasetById.getName(); String newDatasetName = datasetUpdateBindingModel.getName();  if (!currentDatasetName.equals(newDatasetName)) { Optional<Dataset> datasetByName = datasetRepository.findByNameAndDeletedFalseAndOwner(newDatasetName, owner);  if (datasetByName.isPresent()) { throw new AlreadyExistsException("Dataset", "name", newDatasetName); } }  Dataset dataset = DatasetMapper.mapToDataset(datasetUpdateBindingModel, datasetById);  long currentTime = System.currentTimeMillis(); dataset.setTimestamp(currentTime);  Dataset updatedDataset = datasetRepository.saveAndFlush(dataset); return DatasetMapper.mapToDatasetViewModel(updatedDataset, false); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: create() { ClassLoader classLoader = getClass().getClassLoader(); TestPlugin testPlugin = (TestPlugin) pluginClassInitializer.create("io.fairyproject.plugin.initializer.TestPlugin", classLoader);  "<AssertPlaceHolder>"; assertSame(testPlugin.getClass().getClassLoader(), classLoader); }
create(String mainClassPath, ClassLoader classLoader) { Class<?> mainClass; try { mainClass = classLoader.loadClass(mainClassPath); } catch (ClassNotFoundException e) { throw new IllegalStateException("Failed to load mainClass " + mainClassPath, e); }  if (!Plugin.class.isAssignableFrom(mainClass)) { throw new IllegalStateException(String.format("%s wasn't implementing Plugin", mainClass)); }  try { return (Plugin) mainClass.getDeclaredConstructor().newInstance(); } catch (InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) { throw new IllegalStateException("Failed to new instance " + mainClassPath + " (Does it has no args constructor in the class?)", e); } }
[*] target: assertNotNull(testPlugin)
[-] pred: org. junit. Assert. assertNotNull ( testPlugin )
************************************
************************************
[+] input: fromOptionValue_test() { LicenseTypeOptions licenseTypeOptions = LicenseTypeOptions.fromOptionValue("enterprise"); "<AssertPlaceHolder>"; assertThat(licenseTypeOptions.toString(), equalTo("ENTERPRISE")); }
fromOptionValue(final String option) { return OPTIONS_MAP.get(option); }
[*] target: assertNotNull(licenseTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( licenseTypeOptions )
************************************
************************************
[+] input: getI18NProvider_beanEnabled_instanceReturned() { I18NProvider i18NProvider = instantiator.getI18NProvider(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(i18NProvider instanceof I18NTestProvider); }
getI18NProvider() { final BeanLookup<I18NProvider> lookup = new BeanLookup<>( getBeanManager(), I18NProvider.class, BeanLookup.SERVICE); if (i18NLoggingEnabled.compareAndSet(true, false)) { lookup.setUnsatisfiedHandler(() -> getLogger().info( "Can't find any @VaadinServiceScoped bean implementing '{}'. " + CANNOT_USE_CDI_BEANS_FOR_I18N, I18NProvider.class.getSimpleName())).setAmbiguousHandler( e -> getLogger().warn( "Found more beans for I18N. " + CANNOT_USE_CDI_BEANS_FOR_I18N, e)); } else { lookup.setAmbiguousHandler(e -> { }); } return lookup.lookupOrElseGet(delegate::getI18NProvider); }
[*] target: assertNotNull(i18NProvider)
[-] pred: org. junit. Assert. assertNotNull ( i18NProvider )
************************************
************************************
[+] input: shouldBuildTimerExpressionMappedMessage() { String juelExpression = random(); String feelExpression = random(); Message message = timerExpressionMapped(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Timer expression was transformed: Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
timerExpressionMapped(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "timer-expression-mapped", ContextBuilder.builder() .context(expressionTransformationResult(juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testCreateArticle_success() { // 准备参数 ArticleCreateReqVO reqVO = randomPojo(ArticleCreateReqVO.class);  // 调用 Long articleId = articleService.createArticle(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ArticleDO article = articleMapper.selectById(articleId); assertPojoEquals(reqVO, article); }
createArticle(ArticleCreateReqVO createReqVO) { // 校验分类存在 validateArticleCategoryExists(createReqVO.getCategoryId());  // 插入 ArticleDO article = ArticleConvert.INSTANCE.convert(createReqVO); article.setBrowseCount(0); // 初始浏览量 articleMapper.insert(article); // 返回 return article.getId(); }
[*] target: assertNotNull(articleId)
[-] pred: org. junit. Assert. assertNotNull ( articleId )
************************************
************************************
[+] input: testGetTableList() { // 准备参数 Long dataSourceConfigId = randomLongId(); // mock 方法 DataSourceConfigDO dataSourceConfig = new DataSourceConfigDO().setUsername("sa").setPassword("") .setUrl("jdbc:h2:mem:testdb"); when(dataSourceConfigService.getDataSourceConfig(eq(dataSourceConfigId))) .thenReturn(dataSourceConfig);  // 调用 List<TableInfo> tables = databaseTableService.getTableList(dataSourceConfigId, "config", "参数"); // 断言 "<AssertPlaceHolder>"; assertTableInfo(tables.get(0)); }
getTableList(Long dataSourceConfigId, String nameLike, String commentLike) { List<TableInfo> tables = getTableList0(dataSourceConfigId, null); return tables.stream().filter(tableInfo -> (StrUtil.isEmpty(nameLike) || tableInfo.getName().contains(nameLike)) && (StrUtil.isEmpty(commentLike) || tableInfo.getComment().contains(commentLike))) .collect(Collectors.toList()); }
[*] target: assertEquals(1, tables.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tables. size ( ) )
************************************
************************************
[+] input: testCreateJobLog() { // 准备参数 JobLogDO reqVO = randomPojo(JobLogDO.class, o -> o.setExecuteIndex(1));  // 调用 Long id = jobLogService.createJobLog(reqVO.getJobId(), reqVO.getBeginTime(), reqVO.getHandlerName(), reqVO.getHandlerParam(), reqVO.getExecuteIndex()); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 JobLogDO job = jobLogMapper.selectById(id); assertEquals(JobLogStatusEnum.RUNNING.getStatus(), job.getStatus()); }
createJobLog(Long jobId, LocalDateTime beginTime, String jobHandlerName, String jobHandlerParam, Integer executeIndex) { JobLogDO log = JobLogDO.builder().jobId(jobId).handlerName(jobHandlerName) .handlerParam(jobHandlerParam).executeIndex(executeIndex) .beginTime(beginTime).status(JobLogStatusEnum.RUNNING.getStatus()).build(); jobLogMapper.insert(log); return log.getId(); }
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
************************************
[+] input: IOException { File tempDir = createTempDir(); FileUtil.deleteDirContents(tempDir); "<AssertPlaceHolder>"; assertEquals(0, tempDir.listFiles().length); }
deleteDirContents(File directory) throws IOException { if (!directory.exists()) return; File[] files = directory.listFiles(); if (files != null) { for (File file : files) { if (file.isDirectory()) { deleteDir(file); } else { if (!file.delete()) { throw new IOException("Cannot remove " + file.getPath()); } } } } }
[*] target: assertTrue(tempDir.exists())
[-] pred: org. junit. Assert. assertTrue ( tempDir. exists ( ) )
************************************
************************************
[+] input: IOException { final GeoIpServiceConfig geoIpServiceConfig = makeConfig("src/test/resources/geoip_service_config.yaml"); assertNotNull(geoIpServiceConfig);  final MaxMindConfig maxMindConfig = geoIpServiceConfig.getMaxMindConfig(); "<AssertPlaceHolder>"; assertNotNull(maxMindConfig.getAwsAuthenticationOptionsConfig());  assertThat(maxMindConfig, notNullValue()); assertThat(maxMindConfig.getDatabaseRefreshInterval(), equalTo(Duration.ofDays(10))); assertThat(maxMindConfig.getMaxMindDatabaseConfig().getDatabasePaths().size(), equalTo(2)); assertThat(maxMindConfig.getCacheSize(), equalTo(2048)); assertThat(maxMindConfig.getDatabaseDestination(), equalTo("/tst/resources")); assertThat(maxMindConfig.getAwsAuthenticationOptionsConfig(), notNullValue()); assertThat(maxMindConfig.getAwsAuthenticationOptionsConfig().getAwsRegion(), equalTo(Region.of("us-east-1"))); }
getMaxMindConfig() { return maxMindConfig; }
[*] target: assertNotNull(maxMindConfig)
[-] pred: org. junit. Assert. assertNotNull ( maxMindConfig )
************************************
************************************
[+] input: deleteDatasetById_whenDatasetIdIsValidAndDeleteDatasetFalseAndDatasetNameIsNotUniqueAndNameIsMoreThan89Chars_setDeletedToFalseAndCutTheNameTo89CharsAddUUIDToName() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); testDataset.setName("Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua"); testDataset.setDeleted(true);  List<Dataset> testListDatasets = DatasetUtils.createTestListDatasets(2);  //when when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg());  when(datasetRepositoryMock.findAllByName(anyString())).thenReturn(testListDatasets);  DatasetViewModel actual = datasetService.deleteDatasetById(DATASET_ID, false);  //Then "<AssertPlaceHolder>";  assertFalse(actual.isDeleted()); assertEquals(testDataset.isDeleted(), actual.isDeleted()); assertNull(testDataset.getDeleteTime()); assertEquals(126, actual.getName().length());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
deleteDatasetById(String id, boolean deleteDataset) { Dataset datasetById = getDatasetById(id);  //Permissions check String owner = datasetById.getOwner(); DataGymSecurity.isAdmin(owner, false);  // Sets isDeleted to the value of "deleteDataset" datasetById.setDeleted(deleteDataset); Long currentTime = null;  if (deleteDataset) { currentTime = System.currentTimeMillis(); } else { String datasetName = datasetById.getName(); List<Dataset> datasetList = datasetRepository.findAllByName(datasetName);  if (datasetList.size() > 1) { String uuid = UUID.randomUUID().toString(); if (datasetName.length() > 90) { datasetName = datasetName.substring(0, 89) + "_" + uuid; } else { datasetName = datasetName + "_" + uuid; }  datasetById.setName(datasetName); } }  datasetById.setDeleteTime(currentTime);  // Sets isDeleted on all media in the dataset to the value of "deleteDataset" Long finalCurrentTime = currentTime; datasetById.getMedia().forEach(media -> { media.setDeleted(deleteDataset); media.setDeleteTime(finalCurrentTime); });  Dataset deletedDataset = datasetRepository.saveAndFlush(datasetById); return DatasetMapper.mapToDatasetViewModel(deletedDataset, false); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: shouldBuildInputOutputParameterIsNoExpression() { Message message = MessageFactory.inputOutputParameterIsNoExpression(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inputOutputParameterIsNoExpression( String elementLocalName, String parameterName) { return INSTANCE.composeMessage( "input-output-parameter-is-no-expression", ContextBuilder.builder() .context(elementNotTransformablePrefix(elementLocalName)) .entry("parameterName", parameterName) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: InvocationTargetException { MockMethods obj = new MockMethods(); Method method = ReflectionUtils.getMethod(obj.getClass(), "returnArg", String.class);  "<AssertPlaceHolder>";  String arg = "Hello World"; assertEquals(arg, method.invoke(obj, arg)); }
getMethod(@Nonnull Class<?> c, @Nonnull String method, Class<?>... paramTypes) { Class<?>[] expectParamTypes = toPrimitiveTypeArray(paramTypes);  for (Method m : c.getMethods()) { Class<?>[] methodParameters = toPrimitiveTypeArray(m.getParameterTypes());  if ((m.getName().equals(method)) && (equalsTypeArray(methodParameters, expectParamTypes))) { return m; } }  return null; }
[*] target: assertNotNull(method)
[-] pred: org. junit. Assert. assertNotNull ( method )
************************************
************************************
[+] input: shouldBuildTopic() { Message message = MessageFactory.topic(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
topic(String attributeLocalName, String elementLocalName) { return INSTANCE.composeMessage( "topic", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: JsonProcessingException { //given final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(Boolean.class))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(true);  //when final boolean actual = underTest.purge(URI.create(HTTPS_LOCALHOST));  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault/purge", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.DELETE, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(Boolean.class)); verify(objectReader).readValue(anyString()); }
purge(@NonNull final URI baseUri) { final Map<String, String> parameters = Map.of(BASE_URI_QUERY_PARAM, baseUri.toString()); final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_PURGE_PATH, parameters); final HttpRequest request = new HttpRequest(HttpMethod.DELETE, uri.toString()); return sendAndProcess(request, r -> r.getResponseObject(Boolean.class)); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: SchedulerException { // 准备参数 指定 Cron 表达式 JobSaveReqVO reqVO = randomPojo(JobSaveReqVO.class, o -> o.setCronExpression("0 0/1 * * * ? *")) .setId(null); try (MockedStatic<SpringUtil> springUtilMockedStatic = mockStatic(SpringUtil.class)) { springUtilMockedStatic.when(() -> SpringUtil.getBean(eq(reqVO.getHandlerName()))) .thenReturn(jobLogCleanJob);  // 调用 Long jobId = jobService.createJob(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 JobDO job = jobMapper.selectById(jobId); assertPojoEquals(reqVO, job, "id"); assertEquals(JobStatusEnum.NORMAL.getStatus(), job.getStatus()); // 校验调用 verify(schedulerManager).addJob(eq(job.getId()), eq(job.getHandlerName()), eq(job.getHandlerParam()), eq(job.getCronExpression()), eq(reqVO.getRetryCount()), eq(reqVO.getRetryInterval())); } }
createJob(JobSaveReqVO createReqVO) throws SchedulerException { validateCronExpression(createReqVO.getCronExpression()); // 1.1 校验唯一性 if (jobMapper.selectByHandlerName(createReqVO.getHandlerName()) != null) { throw exception(JOB_HANDLER_EXISTS); } // 1.2 校验 JobHandler 是否存在 validateJobHandlerExists(createReqVO.getHandlerName());  // 2. 插入 JobDO JobDO job = BeanUtils.toBean(createReqVO, JobDO.class); job.setStatus(JobStatusEnum.INIT.getStatus()); fillJobMonitorTimeoutEmpty(job); jobMapper.insert(job);  // 3.1 添加 Job 到 Quartz 中 schedulerManager.addJob(job.getId(), job.getHandlerName(), job.getHandlerParam(), job.getCronExpression(), createReqVO.getRetryCount(), createReqVO.getRetryInterval()); // 3.2 更新 JobDO JobDO updateObj = JobDO.builder().id(job.getId()).status(JobStatusEnum.NORMAL.getStatus()).build(); jobMapper.updateById(updateObj); return job.getId(); }
[*] target: assertNotNull(jobId)
[-] pred: org. junit. Assert. assertNotNull ( jobId )
************************************
************************************
[+] input: shouldProperlyMapStudentToDto() { //given StudentModel studentModel = new StudentModel(); studentModel.setId(1L); studentModel.setName("Ivan");  LectureModel lectureModel = new LectureModel(); lectureModel.setId(2L); lectureModel.setName("Matan");  studentModel.setLectures(singletonList(lectureModel));  LecturerModel lecturerModel = new LecturerModel();  lecturerModel.setId(3L); lecturerModel.setName("Vladimir Kirillovich");  studentModel.setLecturers(singletonList(lecturerModel));  //when StudentDTO studentDTO = studentMapper.toDTO(studentModel);  //then "<AssertPlaceHolder>"; assertEquals(1L, studentDTO.getId()); assertEquals("Ivan", studentDTO.getName());  assertEquals(1, studentDTO.getLecturers().size()); assertEquals(2L, studentDTO.getLectures().get(0).getId()); assertEquals("Matan", studentDTO.getLectures().get(0).getName());  assertEquals(1, studentDTO.getLectures().size()); assertEquals(3L, studentDTO.getLecturers().get(0).getId()); assertEquals("Vladimir Kirillovich", studentDTO.getLecturers().get(0).getName()); }
toDTO(StudentModel model);
[*] target: assertNotNull(studentDTO)
[-] pred: org. junit. Assert. assertNotNull ( studentDTO )
************************************
************************************
[+] input: testGetVersionsShouldReturnOnlyRelevantVersionsWhenCalledWithExistingKey() { //given putAllMocks();  //when final Deque<String> actual = underTest.getVersions(VERSIONED_KEY_ENTITY_ID_2_VERSION_1);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertIterableEquals(List.of(KEY_VERSION_1, KEY_VERSION_2), actual); }
getVersions(@NonNull final K entityId) { if (!versions.containsKey(entityId.id()) || versions.get(entityId.id()).isEmpty()) { throw new NotFoundException("Key not found: " + entityId); } return new LinkedList<>(versions.get(entityId.id())); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: shouldBuildElementVariable() { Message message = MessageFactory.elementVariable(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
elementVariable(String attributeLocalName, String elementLocalName) { return INSTANCE.composeMessage( "element-variable", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldProperlyMapModelToDto() { //given LectureModel model = new LectureModel(); model.setId(11L); model.setName("lecture name");  //when LectureDTO dto = mapperUnderTest.toDTO(model);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(model.getId(), dto.getId()); Assertions.assertEquals(model.getName(), dto.getName()); }
toDTO(LectureModel model);
[*] target: assertNotNull(dto)
[-] pred: org. junit. Assert. assertNotNull ( dto )
************************************
************************************
[+] input: shouldBuildTimerExpressionNotSupported() { String timerType = random(); String timerValue = random(); String eventType = random(); String semanticVersion = random(); Message message = timerExpressionNotSupported(timerType, timerValue, eventType, semanticVersion); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Timer of type '" + timerType + "' with value '" + timerValue + "' is not supported for event type '" + eventType + "' in Zeebe version '" + semanticVersion + "'."); }
timerExpressionNotSupported( String timerType, String timerExpression, String eventType, String semanticVersion) { return INSTANCE.composeMessage( "timer-expression-not-supported", ContextBuilder.builder() .entry("timerType", timerType) .entry("timerExpression", timerExpression) .entry("eventType", eventType) .entry("semanticVersion", semanticVersion) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: getFunctions() { SparkStorageEngine engine = new SparkStorageEngine(client); Collection<FunctionResolver> functionResolverCollection = engine.getFunctions(); "<AssertPlaceHolder>"; assertEquals(1, functionResolverCollection.size()); assertTrue( functionResolverCollection.iterator().next() instanceof SparkSqlTableFunctionResolver); }
getFunctions() { return Collections.singletonList(new SparkSqlTableFunctionResolver(sparkClient)); }
[*] target: assertNotNull(functionResolverCollection)
[-] pred: org. junit. Assert. assertNotNull ( functionResolverCollection )
************************************
************************************
[+] input: shouldBuildElementNotSupported() { Message message = MessageFactory.elementNotSupported(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
elementNotSupported(String elementLocalName, String semanticVersion) { return INSTANCE.composeMessage( "element-not-supported", ContextBuilder.builder() .context(elementNotSupportedPrefix(elementLocalName, semanticVersion)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testCreateProject_success() { // 准备参数 GoViewProjectCreateReqVO reqVO = randomPojo(GoViewProjectCreateReqVO.class);  // 调用 Long goViewProjectId = goViewProjectService.createProject(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 GoViewProjectDO goViewProject = goViewProjectMapper.selectById(goViewProjectId); assertPojoEquals(reqVO, goViewProject); }
createProject(GoViewProjectCreateReqVO createReqVO) { // 插入 GoViewProjectDO goViewProject = GoViewProjectConvert.INSTANCE.convert(createReqVO) .setStatus(CommonStatusEnum.DISABLE.getStatus()); goViewProjectMapper.insert(goViewProject); // 返回 return goViewProject.getId(); }
[*] target: assertNotNull(goViewProjectId)
[-] pred: org. junit. Assert. assertNotNull ( goViewProjectId )
************************************
************************************
[+] input: addsTwoTasks() { final String task1Name = "TaskOne"; final String task2Name = "TaskTwo";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name); todoList.addTask(task2Name);  "<AssertPlaceHolder>"; assertEquals(task1Name, task1NameOf(todoList)); assertEquals(task2Name, task2NameOf(todoList)); }
size() { return tasks.size(); }
[*] target: assertEquals(2, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, todoList. size() )
************************************
************************************
[+] input: testCreateDiyTemplate_success() { // 准备参数 DiyTemplateCreateReqVO reqVO = randomPojo(DiyTemplateCreateReqVO.class);  // 调用 Long diyTemplateId = diyTemplateService.createDiyTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DiyTemplateDO diyTemplate = diyTemplateMapper.selectById(diyTemplateId); assertPojoEquals(reqVO, diyTemplate); }
createDiyTemplate(DiyTemplateCreateReqVO createReqVO) { // 校验名称唯一 validateNameUnique(null, createReqVO.getName()); // 插入 DiyTemplateDO diyTemplate = DiyTemplateConvert.INSTANCE.convert(createReqVO); diyTemplate.setProperty("{}"); diyTemplateMapper.insert(diyTemplate); // 创建默认页面 createDefaultPage(diyTemplate); // 返回 return diyTemplate.getId(); }
[*] target: assertNotNull(diyTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( diyTemplateId )
************************************
************************************
[+] input: testBuildAuthRequest_clientDisable() { // 准备参数 Integer socialType = SocialTypeEnum.WECHAT_MP.getType(); Integer userType = randomPojo(SocialTypeEnum.class).getType(); // mock 获得对应的 AuthRequest 实现 AuthRequest authRequest = mock(AuthDefaultRequest.class); AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(authRequest, "config"); when(authRequestFactory.get(eq("WECHAT_MP"))).thenReturn(authRequest); // mock 数据 SocialClientDO client = randomPojo(SocialClientDO.class, o -> o.setStatus(CommonStatusEnum.DISABLE.getStatus()) .setUserType(userType).setSocialType(socialType)); socialClientMapper.insert(client);  // 调用 AuthRequest result = socialClientService.buildAuthRequest(socialType, userType); // 断言 "<AssertPlaceHolder>"; assertSame(authConfig, ReflectUtil.getFieldValue(authConfig, "config")); }
buildAuthRequest(Integer socialType, Integer userType) { // 1. 先查找默认的配置项，从 application-*.yaml 中读取 AuthRequest request = authRequestFactory.get(SocialTypeEnum.valueOfType(socialType).getSource()); Assert.notNull(request, String.format("社交平台(%d) 不存在", socialType)); // 2. 查询 DB 的配置项，如果存在则进行覆盖 SocialClientDO client = socialClientMapper.selectBySocialTypeAndUserType(socialType, userType); if (client != null && Objects.equals(client.getStatus(), CommonStatusEnum.ENABLE.getStatus())) { // 2.1 构造新的 AuthConfig 对象 AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(request, "config"); AuthConfig newAuthConfig = ReflectUtil.newInstance(authConfig.getClass()); BeanUtil.copyProperties(authConfig, newAuthConfig); // 2.2 修改对应的 clientId + clientSecret 密钥 newAuthConfig.setClientId(client.getClientId()); newAuthConfig.setClientSecret(client.getClientSecret()); if (client.getAgentId() != null) { // 如果有 agentId 则修改 agentId newAuthConfig.setAgentId(client.getAgentId()); } // 2.3 设置会 request 里，进行后续使用 ReflectUtil.setFieldValue(request, "config", newAuthConfig); } return request; }
[*] target: assertSame(authRequest, result)
[-] pred: org. junit. Assert. assertSame ( authRequest, result )
************************************
************************************
[+] input: shouldValidateUserQuotaFormatError() { Namespace ns = Namespace.builder() .metadata(Metadata.builder() .name("namespace") .cluster("local") .build()) .build();  ResourceQuota resourceQuota = ResourceQuota.builder() .metadata(Metadata.builder() .cluster("local") .name("test") .build()) .spec( Map.of(USER_PRODUCER_BYTE_RATE.toString(), "producer", USER_CONSUMER_BYTE_RATE.toString(), "consumer")) .build();  List<String> validationErrors = resourceQuotaService.validateNewResourceQuota(ns, resourceQuota);  "<AssertPlaceHolder>"; assertEquals("Invalid value "producer" for field "user/producer_byte_rate": value must be a number.", validationErrors.getFirst()); assertEquals("Invalid value "consumer" for field "user/consumer_byte_rate": value must be a number.", validationErrors.get(1)); }
validateNewResourceQuota(Namespace namespace, ResourceQuota resourceQuota) { List<String> errors = new ArrayList<>();  if (StringUtils.hasText(resourceQuota.getSpec().get(COUNT_TOPICS.getKey()))) { long used = getCurrentCountTopicsByNamespace(namespace); long limit = Long.parseLong(resourceQuota.getSpec().get(COUNT_TOPICS.getKey())); if (used > limit) { errors.add( invalidQuotaAlreadyExceeded(COUNT_TOPICS, String.valueOf(limit), String.valueOf(used))); } }  if (StringUtils.hasText(resourceQuota.getSpec().get(COUNT_PARTITIONS.getKey()))) { long used = getCurrentCountPartitionsByNamespace(namespace); long limit = Long.parseLong(resourceQuota.getSpec().get(COUNT_PARTITIONS.getKey())); if (used > limit) { errors.add(invalidQuotaAlreadyExceeded(COUNT_PARTITIONS, String.valueOf(limit), String.valueOf(used))); } }  if (StringUtils.hasText(resourceQuota.getSpec().get(DISK_TOPICS.getKey()))) { String limitAsString = resourceQuota.getSpec().get(DISK_TOPICS.getKey()); if (!limitAsString.endsWith(BYTE) && !limitAsString.endsWith(KIBIBYTE) && !limitAsString.endsWith(MEBIBYTE) && !limitAsString.endsWith(GIBIBYTE)) { errors.add(invalidQuotaFormat(DISK_TOPICS, limitAsString)); } else { long used = getCurrentDiskTopicsByNamespace(namespace); long limit = BytesUtils.humanReadableToBytes(limitAsString); if (used > limit) { errors.add( invalidQuotaAlreadyExceeded(DISK_TOPICS, limitAsString, BytesUtils.bytesToHumanReadable(used))); } } }  if (StringUtils.hasText(resourceQuota.getSpec().get(COUNT_CONNECTORS.getKey()))) { long used = getCurrentCountConnectorsByNamespace(namespace); long limit = Long.parseLong(resourceQuota.getSpec().get(COUNT_CONNECTORS.getKey())); if (used > limit) { errors.add(invalidQuotaAlreadyExceeded(COUNT_CONNECTORS, String.valueOf(limit), String.valueOf(used))); } }  String producerByteRate = resourceQuota.getSpec().get(USER_PRODUCER_BYTE_RATE.getKey()); if (StringUtils.hasText(producerByteRate)) { try { Double.parseDouble(producerByteRate); } catch (NumberFormatException e) { errors.add(invalidFieldValidationNumber(USER_PRODUCER_BYTE_RATE.toString(), producerByteRate)); } }  String consumerByteRate = resourceQuota.getSpec().get(USER_CONSUMER_BYTE_RATE.getKey()); if (StringUtils.hasText(consumerByteRate)) { try { Double.parseDouble(consumerByteRate); } catch (NumberFormatException e) { errors.add(invalidFieldValidationNumber(USER_CONSUMER_BYTE_RATE.toString(), consumerByteRate)); } }  return errors; }
[*] target: assertEquals(2, validationErrors.size())
[-] pred: org. junit. Assert. assertEquals ( 2, validationErrors. size ( ) )
************************************
************************************
[+] input: testGetWorkflowNames() { List<String> names = NextflowScript.getWorkflowNames("workflow process1 { some content }"); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); }
public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(1, names.size())
[-] pred: org. junit. Assert. assertEquals ( 1, names. size ( ) )
************************************
************************************
[+] input: testAssign() { for (int i = 0; i < 20; ++i) { clusterManager.add(new ServerNode(String.valueOf(i), "", 0, 0, 0, 20 - i, 0, tags, true)); }  PartitionRangeAssignment pra = strategy.assign(100, 10, 2, tags); SortedMap<PartitionRange, List<ServerNode>> assignments = pra.getAssignments(); "<AssertPlaceHolder>";  for (int i = 0; i < 100; i += 10) { assignments.containsKey(new PartitionRange(i, i + 10)); }  int i = 0; Iterator<List<ServerNode>> ite = assignments.values().iterator(); while (ite.hasNext()) { List<ServerNode> cur = ite.next(); assertEquals(2, cur.size()); assertEquals(String.valueOf(i % shuffleNodesMax), cur.get(0).getId()); i++; assertEquals(String.valueOf(i % shuffleNodesMax), cur.get(1).getId()); i++; } }
assign(int totalPartitionNum, int partitionNumPerRange, int replica, Set<String> requiredTags) { List<PartitionRange> ranges = CoordinatorUtils.generateRanges(totalPartitionNum, partitionNumPerRange); int shuffleNodesMax = clusterManager.getShuffleNodesMax(); List<ServerNode> servers = getRequiredServers(requiredTags, shuffleNodesMax); if (servers.isEmpty() || servers.size() < replica) { return new PartitionRangeAssignment(null); }  SortedMap<PartitionRange, List<ServerNode>> assignments = new TreeMap<>(); int idx = 0; int size = servers.size();  for (PartitionRange range : ranges) { List<ServerNode> nodes = new LinkedList<>(); for (int i = 0; i < replica; ++i) { ServerNode node = servers.get(idx); nodes.add(node); idx = CoordinatorUtils.nextIdx(idx, size); }  assignments.put(range, nodes); }  return new PartitionRangeAssignment(assignments); }
[*] target: assertEquals(10, assignments.size())
[-] pred: org. junit. Assert. assertEquals ( 10, assignments. size ( ) )
************************************
************************************
[+] input: shouldBuildDelegateImplementation() { Message message = MessageFactory.delegateImplementation(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
delegateImplementation( String attributeLocalName, String elementLocalName, String binding, String jobType) { return INSTANCE.composeMessage( "delegate-implementation", ContextBuilder.builder() .context(supportedAttributePrefix(attributeLocalName, elementLocalName)) .entry("binding", binding) .entry("jobType", jobType) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: cast_Select() { //Given final LcEntrySelect entry = new LcEntrySelect(); entry.setType(LcEntryType.SELECT); entry.setEntryValue("entryValue"); entry.setEntryKey("key"); entry.setOptions(null);  //When final LcEntryExport export = LcEntryExportFactory.cast(entry);  //Then "<AssertPlaceHolder>"; assertEquals(entry.getEntryKey(), export.getEntryKey()); assertEquals(entry.getEntryValue(), export.getEntryValue());  assertTrue(export instanceof LcEntryExportOption); assertNull(((LcEntryExportOption) export).getOptions()); }
cast(final LcEntry source) { switch (source.getType()) { case LINE: case POINT: case POLYGON: case RECTANGLE: case IMAGE_SEGMENTATION: return new LcEntryExportGeometry(source); case FREETEXT: return new LcEntryExportFreeText(source); case SELECT: case CHECKLIST: return new LcEntryExportOption(source); default: // not possible. } throw new IllegalArgumentException(); }
[*] target: assertNotNull(export)
[-] pred: org. junit. Assert. assertNotNull ( export )
************************************
************************************
[+] input: build_has_to_declare_ObjecType_by_Swagger_Definition() { // Given final SwaggerGraphQLSchemaBuilder swaggerGraphQLSchemaBuilder = new SwaggerGraphQLSchemaBuilder(); final Swagger swagger = new SwaggerParser().read(SWAGGER_LOCATION);  // When final GraphQLSchema graphQLSchema = swaggerGraphQLSchemaBuilder.swagger(swagger).build();  // Then /** * Refactor creating assertAuthorDto and assertBookDto */ GraphQLObjectType authorDto = graphQLSchema.getObjectType(SWAGGER_DEFINITION_AUTHOR); "<AssertPlaceHolder>"; assertEquals(3, authorDto.getFieldDefinitions().size()); assertNotNull(authorDto.getFieldDefinition("id")); assertEquals(GraphQLID, authorDto.getFieldDefinition("id").getType()); assertNotNull(authorDto.getFieldDefinition("firstName")); assertEquals(GraphQLString, authorDto.getFieldDefinition("firstName").getType()); assertNotNull(authorDto.getFieldDefinition("lastName")); assertEquals(GraphQLString, authorDto.getFieldDefinition("lastName").getType()); // And GraphQLObjectType bookDto = graphQLSchema.getObjectType(SWAGGER_DEFINITION_BOOK); assertNotNull(bookDto); assertNotNull(bookDto.getFieldDefinition("id")); assertEquals(GraphQLID, bookDto.getFieldDefinition("id").getType()); assertNotNull(bookDto.getFieldDefinition("name")); assertEquals(GraphQLString, bookDto.getFieldDefinition("name").getType()); assertNotNull(bookDto.getFieldDefinition("pageCount")); assertEquals(GraphQLInt, bookDto.getFieldDefinition("pageCount").getType()); assertNotNull(bookDto.getFieldDefinition("author")); assertTrue(bookDto.getFieldDefinition("author").getType() instanceof GraphQLObjectType); assertEquals("AuthorDto", ((GraphQLObjectType)bookDto.getFieldDefinition("author").getType()).getName()); }
build() { return schemaBuilder.build(); }
[*] target: assertNotNull(authorDto)
[-] pred: org. junit. Assert. assertNotNull ( authorDto )
************************************
************************************
[+] input: testCreateOAuth2Client_success() { // 准备参数 OAuth2ClientSaveReqVO reqVO = randomPojo(OAuth2ClientSaveReqVO.class, o -> o.setLogo(randomString())) .setId(null); // 防止 id 被赋值  // 调用 Long oauth2ClientId = oauth2ClientService.createOAuth2Client(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 OAuth2ClientDO oAuth2Client = oauth2ClientMapper.selectById(oauth2ClientId); assertPojoEquals(reqVO, oAuth2Client, "id"); }
createOAuth2Client(OAuth2ClientSaveReqVO createReqVO) { validateClientIdExists(null, createReqVO.getClientId()); // 插入 OAuth2ClientDO client = BeanUtils.toBean(createReqVO, OAuth2ClientDO.class); oauth2ClientMapper.insert(client); return client.getId(); }
[*] target: assertNotNull(oauth2ClientId)
[-] pred: org. junit. Assert. assertNotNull ( oauth2ClientId )
************************************
************************************
[+] input: Exception { try { Account account = Provisioning.getInstance().getAccount(MockProvisioning.DEFAULT_ACCOUNT_ID); RuleManager.clearCachedRules(account); account.setMailSieveScript("tag "Hello World";"); Mailbox mbox = MailboxManager.getInstance().getMailboxByAccount(account);  List<ItemId> ids = RuleManager.applyRulesToIncomingMessage(new OperationContext(mbox), mbox, new ParsedMessage("From: sender@zimbra.com\nSubject: test1".getBytes(), false), 0, account.getName(), new DeliveryContext(), Mailbox.ID_FOLDER_INBOX, true); assertEquals(1, ids.size()); Tag tag = mbox.getTagByName(null, "Hello World"); assertTrue(tag.isListed());  // Send one more message to verify that no exception occurs ids = RuleManager.applyRulesToIncomingMessage(new OperationContext(mbox), mbox, new ParsedMessage("From: sender@zimbra.com\nSubject: test2".getBytes(), false), 0, account.getName(), new DeliveryContext(), Mailbox.ID_FOLDER_INBOX, true); assertEquals(1, ids.size()); "<AssertPlaceHolder>"; } catch (Exception e) { e.printStackTrace(); fail("No exception should be thrown"); } }
isListed() { return isListed; }
[*] target: assertTrue(tag.isListed())
[-] pred: org. junit. Assert. assertTrue ( tag. isListed() )
************************************
************************************
[+] input: testHash() { DateTimeStamp a = new DateTimeStamp(.586); DateTimeStamp b = new DateTimeStamp(.587); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100"); b = new DateTimeStamp("2018-04-04T09:10:00.587-0100"); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.18); b = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.19); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.18); b = new DateTimeStamp("2018-04-04T09:10:00.587-0100", 0.18); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0000", 0.18); b = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.18); assertNotEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp(.587); b = new DateTimeStamp(.587); assertEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.587-0100"); b = new DateTimeStamp("2018-04-04T09:10:00.587-0100"); assertEquals(a.hashCode(), b.hashCode());  a = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.19); b = new DateTimeStamp("2018-04-04T09:10:00.586-0100", 0.19); "<AssertPlaceHolder>";  }
hashCode() { return Objects.hash(getDateTime(), getTimeStamp()); }
[*] target: assertEquals(a.hashCode(), b.hashCode())
[-] pred: org. junit. Assert. assertEquals ( a. hashCode ( ), b. hashCode ( ) )
************************************
************************************
[+] input: shouldBuildElementNotSupportedHint() { Message message = MessageFactory.elementNotSupportedHint(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
elementNotSupportedHint(String elementLocalName, String semanticVersion) { return INSTANCE.composeMessage( "element-not-supported-hint", ContextBuilder.builder() .context(elementNotSupportedPrefix(elementLocalName, semanticVersion)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: getTodosByAssignee() {  TodoCollectionResponse todosCollection = (TodoCollectionResponse) (todoAPIContract .getTodosByAssignee("ABC1234", null) .getBody());  List<Todo> fetchedTodos = todosCollection.getTodos();  "<AssertPlaceHolder>";  Todo firstTodo = fetchedTodos.get(0);  assertEquals( "MyTodo 1", firstTodo.getName(), "The todo fetched should have a name of: MyTodo 1"); }
getTodosByAssignee( @ApiParam(required = true, value = "Assignee associated with the todo records") @PathVariable(value = "assignee") String assignee, HttpServletRequest request);  //-------------------------------------------------------------------------------------------- @ApiOperation( value = "Fetch a todo record by id", notes = "Use this resource to fetch a todo record from the repository.", tags = {"todo-service"}
[*] target: assertEquals(1, fetchedTodos.size())
[-] pred: org. junit. Assert. assertEquals ( 1, fetchedTodos. size ( ) )
************************************
************************************
[+] input: testCreateCombinationActivity_success() { // 准备参数 CombinationActivityCreateReqVO reqVO = randomPojo(CombinationActivityCreateReqVO.class);  // 调用 Long combinationActivityId = combinationActivityService.createCombinationActivity(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 CombinationActivityDO combinationActivity = combinationActivityMapper.selectById(combinationActivityId); assertPojoEquals(reqVO, combinationActivity); }
createCombinationActivity(CombinationActivityCreateReqVO createReqVO) { // 校验商品 SPU 是否存在是否参加的别的活动 validateProductConflict(createReqVO.getSpuId(), null); // 校验商品是否存在 validateProductExists(createReqVO.getSpuId(), createReqVO.getProducts());  // 插入拼团活动 CombinationActivityDO activity = CombinationActivityConvert.INSTANCE.convert(createReqVO) .setStatus(CommonStatusEnum.ENABLE.getStatus()); combinationActivityMapper.insert(activity); // 插入商品 List<CombinationProductDO> products = CombinationActivityConvert.INSTANCE.convertList(createReqVO.getProducts(), activity); combinationProductMapper.insertBatch(products); return activity.getId(); }
[*] target: assertNotNull(combinationActivityId)
[-] pred: org. junit. Assert. assertNotNull ( combinationActivityId )
************************************
************************************
[+] input: Exception { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken); // Act final ReturnT<String> retval = executorBiz.beat();  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(200, retval.getCode()); Assertions.assertNull(retval.getMsg()); }
beat();
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
************************************
[+] input: getProject_whenIdIsValidAndUserIsAuthorized_getProject() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID);  //When when(projectRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testProject));  ProjectViewModel project = projectService.getProject(PROJECT_ID);  //Then "<AssertPlaceHolder>"; assertEquals(testProject.getId(), project.getId()); assertEquals(testProject.getName(), project.getName()); assertEquals(testProject.getDescription(), project.getDescription()); assertEquals(testProject.getShortDescription(), project.getShortDescription()); assertEquals(testProject.isPinned(), project.isPinned()); assertEquals(testProject.getOwner(), project.getOwner());  verify(projectRepositoryMock).findById(anyString()); verify(projectRepositoryMock, times(1)).findById(anyString()); verifyNoMoreInteractions(projectRepositoryMock); }
getProject(String projectId) { Project projectById = getProjectById(projectId);  //Permissions check String owner = projectById.getOwner(); DataGymSecurity.isAdminOrUser(owner, true);  if (!projectById.isDeleted()) { ProjectViewModel projectViewModel = ProjectMapper.mapToProjectViewModel(projectById, mediaRepository::countAllByDatasetsContainingAndDeletedFalse);  boolean projectExportable = isProjectExportable(projectById.getId()); projectViewModel.setExportable(projectExportable); return projectViewModel; }  throw new NotFoundException(PROJECT_PLACEHOLDER, "id", "" + projectId); }
[*] target: assertNotNull(project)
[-] pred: org. junit. Assert. assertNotNull ( project )
************************************
************************************
[+] input: whenObjectNotFoundExceptionThenReturnAResponseEntity() { ResponseEntity<StandardError> response = ecxeptionHandler .objectNotFound( new ObjectNotFoundException(OBJETO_NAO_ENCONTRADO), new MockHttpServletRequest());  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(StandardError.class, response.getBody().getClass()); assertEquals(OBJETO_NAO_ENCONTRADO, response.getBody().getError()); assertEquals(404, response.getBody().getStatus()); assertNotEquals("/user/2", response.getBody().getPath()); assertNotEquals(LocalDateTime.now(), response.getBody().getTimestamp()); }
objectNotFound(ObjectNotFoundException ex, HttpServletRequest request) { StandardError error = new StandardError(LocalDateTime.now(), HttpStatus.NOT_FOUND.value(), ex.getMessage(), request.getRequestURI()); return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: deleteImageFile_whenImageIdIsValidAndDeleteImageFalse_setDeletedToFalse() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); LocalImage testImage = ImageUtils.createTestLocalImage(); testImage.setDeleted(true); BinFileEntity testBinFileEntity = BinfileEntityUtils.createTestBinFileEntity();  testImage.setBinFileEntity(testBinFileEntity); testDataset.getMedia().add(testImage); testImage.getDatasets().add(testDataset);  //when when(mediaRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testImage));  doAnswer((Answer) invocation -> { Media arg0 = invocation.getArgument(0, Media.class);  assertFalse(arg0.isDeleted()); assertNull(arg0.getDeleteTime()); return arg0; }).when(mediaRepositoryMock).save(any(Media.class));  MediaViewModel actual = mediaService.deleteMediaFile(IMAGE_ID, false);  //Then "<AssertPlaceHolder>";  assertEquals(testImage.getId(), actual.getId()); assertEquals(testImage.getMediaName(), actual.getMediaName()); assertEquals(testImage.getMediaSourceType().name(), actual.getMediaSourceType());  verify(mediaRepositoryMock).save(any()); verify(mediaRepositoryMock, times(1)).save(any()); }
deleteMediaFile(String mediaId, boolean deleteMedia) { DataGymSecurity.isAuthenticated(); Media mediaById = getMediaById(mediaId);  // Permissions check String owner = isCurrentUserPermittedToManipulateMedia(mediaById, false); DataGymSecurity.isAdmin(owner, false);  boolean deleted = mediaById.isDeleted();  if (deleted == deleteMedia) { throw new GenericException("image_delete", null, null, mediaId); }  mediaById.setDeleted(deleteMedia); Long currentTime = null;  if (deleteMedia) { currentTime = System.currentTimeMillis();  // Check Pricing Plan Limits decreaseUsedStorage(owner, mediaById); } else { // Check Pricing Plan Limits increaseUsedStorage(owner, mediaById); }  mediaById.setDeleteTime(currentTime);  Media savedMedia = mediaRepository.save(mediaById); return MediaMapper.mapToMediaViewModel(savedMedia); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: shouldBuildInAllNotRecommendedHint() { Message message = MessageFactory.inAllHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inAllHint() { return INSTANCE.staticMessage("in-all-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildFollowUpDate() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.followUpDate(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'followUpDate' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
followUpDate(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "follow-up-date", ContextBuilder.builder() .context( supportedAttributeExpression( "followUpDate", "userTask", juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: SQLException { String resourceName = "test01.csv";  ClassLoader classLoader = getClass().getClassLoader(); String path = classLoader.getResource(resourceName).getPath();  String parent = Paths.get(path).getParent().toAbsolutePath().toString();  Driver driver = new CsvDriver();  try( Connection con = driver.connect("jdbc:csv:"+parent, null); Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery("SELECT * FROM test01.csv;") ) { "<AssertPlaceHolder>"; assertEquals("A", rs.getString(1)); assertEquals("B", rs.getString(2));  assertTrue(rs.next()); assertEquals("C", rs.getString(1)); assertEquals("D", rs.getString(2));  assertFalse(rs.next()); }; }
connect(String s, Properties properties) throws SQLException { String[] parts = s.split(":");  if (parts.length < 2 ||	!parts[0].toLowerCase().equals("jdbc") || !parts[1].toLowerCase().equals("csv")) return null;  String directory = Arrays.stream(parts).skip(2).collect(Collectors.joining(":"));  Path path = Paths.get(directory).toAbsolutePath();  if (!Files.isDirectory(path)) throw new SQLException("'" + path + "' is not a directory");  return new CsvConnection(path); }
[*] target: assertTrue(rs.next())
[-] pred: org. junit. Assert. assertTrue ( rs. next ( ) )
************************************
************************************
[+] input: push() { try (IntStack stack = new IntStack(Integer.MIN_VALUE, 8)) { Assertions.assertTrue(stack.push(1)); Assertions.assertTrue(stack.push(2)); Assertions.assertTrue(stack.push(3)); Assertions."<AssertPlaceHolder>"; } }
size() { return (index.get() >> 2) + 1; }
[*] target: assertEquals(3, stack.size())
[-] pred: org. junit. Assert. assertEquals ( 3, stack. size() )
************************************
************************************
[+] input: testCreateMailAccount_success() { // 准备参数 MailAccountSaveReqVO reqVO = randomPojo(MailAccountSaveReqVO.class, o -> o.setMail(randomEmail())) .setId(null); // 防止 id 被赋值  // 调用 Long mailAccountId = mailAccountService.createMailAccount(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MailAccountDO mailAccount = mailAccountMapper.selectById(mailAccountId); assertPojoEquals(reqVO, mailAccount, "id"); }
createMailAccount(MailAccountSaveReqVO createReqVO) { MailAccountDO account = BeanUtils.toBean(createReqVO, MailAccountDO.class); mailAccountMapper.insert(account); return account.getId(); }
[*] target: assertNotNull(mailAccountId)
[-] pred: org. junit. Assert. assertNotNull ( mailAccountId )
************************************
************************************
[+] input: testNewerThanPatch() { SemanticVersion version = new SemanticVersion(1, 2, 5); SemanticVersion version2 = new SemanticVersion(1, 2, 4);  assertTrue(version.isNewerThan(version2)); "<AssertPlaceHolder>"; }
isNewerThan(@Nonnull Version version) { if (isSimilar(version)) { SemanticVersion semver = (SemanticVersion) version; int major = semver.getMajorVersion();  if (getMajorVersion() > major) { return true; } else if (major > getMajorVersion()) { return false; }  int minor = semver.getMinorVersion();  if (getMinorVersion() > minor) { return true; } else if (minor > getMinorVersion()) { return false; }  return getPatchVersion() > semver.getPatchVersion(); } else { throw new IncomparableVersionsException(this, version); } }
[*] target: assertFalse(version2.isNewerThan(version))
[-] pred: org. junit. Assert. assertFalse ( version2. isNewerThan ( version ) )
************************************
************************************
[+] input: ServiceException { boolean check = false; assert (check = true); if (check) { Mailbox mbox = MailboxManager.getInstance().getMailboxByAccountId(MockProvisioning.DEFAULT_ACCOUNT_ID); mbox.lock.lock(false); assertFalse(mbox.lock.isUnlocked()); assertFalse(mbox.lock.isWriteLockedByCurrentThread()); boolean good = true; try { mbox.lock.lock(true); good = false; } catch (AssertionError e) { //expected } "<AssertPlaceHolder>"; } else { ZimbraLog.test.debug("skipped testWriteWhileHoldingRead since asserts are not enabled"); //without this the test times out eventually, but we want tests to be fast so skip this one } }
lock(boolean write) { write = write || mbox.requiresWriteLock(); ZimbraLog.mailbox.trace("LOCK %s", (write ? "WRITE" : "READ")); assert (neverReadBeforeWrite(write)); try { if (tryLock(write)) { if (mbox.requiresWriteLock() && !isWriteLockedByCurrentThread()) { // writer finished a purge while we waited promote(); return; } lockStack.push(write); try { acquireDistributedLock(write); } catch (ServiceException e) { release(); LockFailedException lfe = new LockFailedException("lockdb"); lfe.logStackTrace(); throw lfe; } return; } int queueLength = zLock.getQueueLength(); if (queueLength >= LC.zimbra_mailbox_lock_max_waiting_threads.intValue()) { // Too many threads are already waiting for the lock, can't let you queued. We don't want to // log stack trace // here because once requests back up, each new incoming request falls into here, which // creates too much // noise in the logs. Unless debug switch is enabled LockFailedException e = new LockFailedException("too many waiters: " + queueLength); if (DebugConfig.debugMailboxLock) { e.logStackTrace(); } throw e; } // Wait for the lock up to the timeout. if (tryLockWithTimeout(write)) { if (mbox.requiresWriteLock() && !isWriteLockedByCurrentThread()) { // writer finished a purge while we waited promote(); return; } lockStack.push(write); try { acquireDistributedLock(write); } catch (ServiceException e) { release(); LockFailedException lfe = new LockFailedException("lockdb"); lfe.logStackTrace(); throw lfe; } return; } LockFailedException e = new LockFailedException("timeout"); e.logStackTrace(); throw e; } catch (InterruptedException e) { throw new LockFailedException("interrupted", e); } finally { assert (!isUnlocked() || debugReleaseReadLock()); } }
[*] target: assertTrue(good)
[-] pred: org. junit. Assert. assertTrue ( good )
************************************
************************************
[+] input: testSize() { assertEquals(0, ringArray.size()); ringArray.update(1, false); assertEquals(1, ringArray.size()); ringArray.update(2, true); "<AssertPlaceHolder>"; }
size() { return (int) Stream.of(array).filter(Objects::nonNull).count(); }
[*] target: assertEquals(2, ringArray.size())
[-] pred: org. junit. Assert. assertEquals ( 2, ringArray. size() )
************************************
************************************
[+] input: testCreateApp_success() { // 准备参数 PayAppCreateReqVO reqVO = randomPojo(PayAppCreateReqVO.class, o -> o.setStatus((RandomUtil.randomEle(CommonStatusEnum.values()).getStatus())) .setOrderNotifyUrl(randomURL()) .setRefundNotifyUrl(randomURL()));  // 调用 Long appId = appService.createApp(reqVO); // 断言 "<AssertPlaceHolder>"; PayAppDO app = appMapper.selectById(appId); assertPojoEquals(reqVO, app); }
createApp(@Valid PayAppCreateReqVO createReqVO);  /** * 更新支付应用 * * @param updateReqVO 更新 */ void updateApp(@Valid PayAppUpdateReqVO updateReqVO);  /** * 修改应用状态 * * @param id     应用编号 * @param status 状态 */ void updateAppStatus(Long id, Integer status);  /** * 删除支付应用 * * @param id 编号 */ void deleteApp(Long id);  /** * 获得支付应用 * * @param id 编号 * @return 支付应用 */ PayAppDO getApp(Long id);  /** * 获得支付应用列表 * * @param ids 编号 * @return 支付应用列表 */ List<PayAppDO> getAppList(Collection<Long> ids);  /** * 获得支付应用列表 * * @return 支付应用列表 */ List<PayAppDO> getAppList();  /** * 获得支付应用分页 * * @param pageReqVO 分页查询 * @return 支付应用分页 */ PageResult<PayAppDO> getAppPage(PayAppPageReqVO pageReqVO);  /** * 获得指定编号的商户 Map * * @param ids 应用编号集合 * @return 商户 Map */ default Map<Long, PayAppDO> getAppMap(Collection<Long> ids) { List<PayAppDO> list = getAppList(ids); return CollectionUtils.convertMap(list, PayAppDO::getId); }
[*] target: assertNotNull(appId)
[-] pred: org. junit. Assert. assertNotNull ( appId )
************************************
************************************
[+] input: shouldBuildScriptFormat() { Message message = MessageFactory.scriptFormat(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
scriptFormat(String headerName, String scriptFormat) { return INSTANCE.composeMessage( "script-format", ContextBuilder.builder() .entry("headerName", headerName) .entry("scriptFormat", scriptFormat) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testUpdateAfterApproval_reject() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); Map<String, Boolean> requestedScopes = new LinkedHashMap<>(); requestedScopes.put("write", false); // mock 方法  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(1, result.size()); // write assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("write", result.get(0).getScope()); assertFalse(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); }
updateAfterApproval(Long userId, Integer userType, String clientId, Map<String, Boolean> requestedScopes) { // 如果 requestedScopes 为空，说明没有要求，则返回 true 通过 if (CollUtil.isEmpty(requestedScopes)) { return true; }  // 更新批准的信息 boolean success = false; // 需要至少有一个同意 LocalDateTime expireTime = LocalDateTime.now().plusSeconds(TIMEOUT); for (Map.Entry<String, Boolean> entry : requestedScopes.entrySet()) { if (entry.getValue()) { success = true; } saveApprove(userId, userType, clientId, entry.getKey(), entry.getValue(), expireTime); } return success; }
[*] target: assertFalse(success)
[-] pred: org. junit. Assert. assertFalse ( success )
************************************
************************************
[+] input: scanAnnotationDefinitionParser() { CosIdAccessorRegistry registry = new DefaultAccessorRegistry(new DefaultAccessorParser(AnnotationDefinitionParser.INSTANCE)); DefaultCosIdScanner scanner = new DefaultCosIdScanner(new String[] {"me.ahoo.cosid.accessor.annotation.entity"}, AnnotationDefinitionParser.INSTANCE, registry); scanner.scan();  CosIdAccessor cosIdAccessor = registry.get(LongIdEntity.class); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(LongIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(MissingIdGenEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(MissingIdGenEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(PrimitiveLongIdEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(PrimitiveLongIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(IntIdEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(IntIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(StringIdEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(StringIdEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(ChildEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(LongIdEntity.class, cosIdAccessor.getIdDeclaringClass()); }
scan() { if (log.isInfoEnabled()) { log.info("Scan basePackages:{}.", Arrays.toString(basePackages)); } try { ClassLoader classLoader = getClass().getClassLoader(); ClassPath classPath = ClassPath.from(classLoader); for (String basePackage : basePackages) {  ImmutableSet<ClassPath.ClassInfo> classInfos = classPath.getTopLevelClassesRecursive(basePackage); for (ClassPath.ClassInfo classInfo : classInfos) { Class<?> clazz = classLoader.loadClass(classInfo.getName()); if (clazz.isInterface()) { continue; } CosIdAccessor cosIdAccessor = cosIdAccessorParser.parse(clazz); cosIdAccessorRegistry.register(clazz, cosIdAccessor); } } } catch (IOException | ClassNotFoundException e) { throw new CosIdException(e.getMessage(), e); } }
[*] target: assertNotNull(cosIdAccessor)
[-] pred: org. junit. Assert. assertNotNull ( cosIdAccessor )
************************************
************************************
[+] input: testCreateForm_success() { // 准备参数 BpmFormSaveReqVO reqVO = randomPojo(BpmFormSaveReqVO.class, o -> { o.setConf("{}"); o.setFields(randomFields()); });  // 调用 Long formId = formService.createForm(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 BpmFormDO form = formMapper.selectById(formId); assertPojoEquals(reqVO, form); }
createForm(@Valid BpmFormSaveReqVO createReqVO);  /** * 更新动态表单 * * @param updateReqVO 更新信息 */ void updateForm(@Valid BpmFormSaveReqVO updateReqVO);  /** * 删除动态表单 * * @param id 编号 */ void deleteForm(Long id);  /** * 获得动态表单 * * @param id 编号 * @return 动态表单 */ BpmFormDO getForm(Long id);  /** * 获得动态表单列表 * * @return 动态表单列表 */ List<BpmFormDO> getFormList();  /** * 获得动态表单列表 * * @param ids 编号 * @return 动态表单列表 */ List<BpmFormDO> getFormList(Collection<Long> ids);  /** * 获得动态表单 Map * * @param ids 编号 * @return 动态表单 Map */ default Map<Long, BpmFormDO> getFormMap(Collection<Long> ids) { return CollectionUtils.convertMap(this.getFormList(ids), BpmFormDO::getId); }
[*] target: assertNotNull(formId)
[-] pred: org. junit. Assert. assertNotNull ( formId )
************************************
************************************
[+] input: InterruptedException { final int capacity = 1 << 10; final int limit = 1 << 20; try (IntStack stack = new IntStack(Integer.MIN_VALUE, capacity >>> 1)) { final ExecutorService pool = Executors.newFixedThreadPool(8); for (int i = 0; i < limit; i++) { pool.execute(() -> stack.push(1)); } pool.shutdown(); Assertions.assertTrue(pool.awaitTermination(5, TimeUnit.SECONDS)); Assertions."<AssertPlaceHolder>"; } }
size() { return (index.get() >> 2) + 1; }
[*] target: assertEquals(limit, stack.size())
[-] pred: org. junit. Assert. assertEquals ( limit, stack. size() )
************************************
************************************
[+] input: ParseTreeCompositeException { final ParseTree expected = mock(DataPrepperExpressionParser.ExpressionContext.class); doReturn(expected).when(parser).expression();  ParseTree parseTree = parseTreeParser.parse(VALID_STATEMENT); assertThat(parseTree, is(expected));  parseTree = parseTreeParser.parse(VALID_STATEMENT); "<AssertPlaceHolder>";  verify(errorListener).isErrorFound();  // Verify parser.expression() called 1 time verify(parser).expression(); }
parse(final String expression) throws ParseTreeCompositeException { if (cache.containsKey(expression)) { return cache.get(expression); } else { final ParseTree parseTree = createParseTree(expression); cache.put(expression, parseTree); return parseTree; } }
[*] target: assertThat(parseTree, is(expected))
[-] pred: org. junit. Assert. assertThat ( parseTree, is ( expected ) )
************************************
************************************
[+] input: testGetConfigByKey() { // mock 数据 ConfigDO dbConfig = randomConfigDO(); configMapper.insert(dbConfig);// @Sql: 先插入出一条存在的数据 // 准备参数 String key = dbConfig.getConfigKey();  // 调用 ConfigDO config = configService.getConfigByKey(key); // 断言 "<AssertPlaceHolder>"; assertPojoEquals(dbConfig, config); }
getConfigByKey(String key) { return configMapper.selectByKey(key); }
[*] target: assertNotNull(config)
[-] pred: org. junit. Assert. assertNotNull ( config )
************************************
************************************
[+] input: testConstructorNullBody() { String message = "This is the message"; String body = null; int code = 403; String expectToString = "com.amazon.spapi.documents.exception.HttpResponseException: " + "This is the message {code=403, body=null}";  HttpResponseException exception = new HttpResponseException(message, body, code);  assertEquals(message, exception.getMessage()); assertEquals(body, exception.getBody()); assertEquals(code, exception.getCode()); "<AssertPlaceHolder>"; }
toString() { return super.toString() + " {code=" + getCode() + ", body=" + getBody() + '}'; }
[*] target: assertEquals(expectToString, exception.toString())
[-] pred: org. junit. Assert. assertEquals ( expectToString, exception. toString ( ) )
************************************
************************************
[+] input: initializationSpan() { SplunkRumBuilder splunkRumBuilder = new SplunkRumBuilder() .setRealm("dev") .setApplicationName("testApp") .setRumAccessToken("accessToken");  ApplicationInfo appInfo = new ApplicationInfo(); appInfo.labelRes = 14;  when(application.getApplicationContext()).thenReturn(context); when(application.getMainLooper()).thenReturn(mainLooper); when(context.getApplicationInfo()).thenReturn(appInfo); when(context.getString(appInfo.labelRes)).thenReturn(APP_NAME);  InMemorySpanExporter testExporter = InMemorySpanExporter.create(); AppStartupTimer startupTimer = new AppStartupTimer(); RumInitializer testInitializer = new RumInitializer(splunkRumBuilder, application, startupTimer) { @Override SpanExporter buildFilteringExporter( CurrentNetworkProvider connectionUtil, VisibleScreenTracker visibleScreenTracker) { return testExporter; } }; SplunkRum splunkRum = testInitializer.initialize(mainLooper); startupTimer.runCompletionCallback(); splunkRum.flushSpans();  List<SpanData> spans = testExporter.getFinishedSpanItems(); "<AssertPlaceHolder>"; SpanData initSpan = spans.get(0); assertEquals( initSpan.getParentSpanContext(), startupTimer.getStartupSpan().getSpanContext());  verifyResource(initSpan); assertEquals("SplunkRum.initialize", initSpan.getName()); assertEquals("appstart", initSpan.getAttributes().get(COMPONENT_KEY)); assertEquals( "[debug:false,crashReporting:true,anrReporting:true,slowRenderingDetector:true,networkMonitor:true]", initSpan.getAttributes().get(stringKey("config_settings")));  List<EventData> events = initSpan.getEvents(); assertTrue(events.size() > 0); checkEventExists(events, "connectionUtilInitialized"); checkEventExists(events, "exporterInitialized"); checkEventExists(events, "tracerProviderInitialized"); checkEventExists(events, "activityLifecycleCallbacksInitialized"); checkEventExists(events, "crashReportingInitialized"); checkEventExists(events, "anrMonitorInitialized"); }
initialize(Looper mainLooper) { VisibleScreenTracker visibleScreenTracker = new VisibleScreenTracker();  initializationEvents.begin();  OtelRumConfig config = new OtelRumConfig(); GlobalAttributesSupplier globalAttributeSupplier = new GlobalAttributesSupplier(builder.globalAttributes); config.setGlobalAttributes(globalAttributeSupplier); if (!builder.isNetworkMonitorEnabled()) { config.disableNetworkChangeMonitoring(); }  config.disableScreenAttributes(); OpenTelemetryRumBuilder otelRumBuilder = OpenTelemetryRum.builder(application, config);  otelRumBuilder.mergeResource(createSplunkResource()); initializationEvents.emit("resourceInitialized");  CurrentNetworkProvider currentNetworkProvider = CurrentNetworkProvider.createAndStart(application); otelRumBuilder.setCurrentNetworkProvider(currentNetworkProvider); initializationEvents.emit("connectionUtilInitialized");  // TODO: How truly important is the order of these span processors? The location of event // generation should probably not be altered...  // Add batch span processor otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { SpanExporter zipkinExporter = buildFilteringExporter(currentNetworkProvider, visibleScreenTracker); initializationEvents.emit("exporterInitialized");  BatchSpanProcessor batchSpanProcessor = BatchSpanProcessor.builder(zipkinExporter).build(); initializationEvents.emit("batchSpanProcessorInitialized"); return tracerProviderBuilder.addSpanProcessor(batchSpanProcessor); });  // Inhibit the upstream exporter because we add our own BatchSpanProcessor otelRumBuilder.addSpanExporterCustomizer(x -> new NoOpSpanExporter());  // Set span limits otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> tracerProviderBuilder.setSpanLimits( SpanLimits.builder() .setMaxAttributeValueLength(MAX_ATTRIBUTE_LENGTH) .build()));  // Set up the sampler, if enabled // TODO: Make this better... // This holder is required because we cannot reasonably get the session id until after // OpenTelemetryRum has been created. So this is spackled into place below. AtomicReference<Supplier<String>> sessionSupplierHolder = new AtomicReference<>(() -> null); if (builder.sessionBasedSamplerEnabled) { otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { Sampler sampler = UInt32QuadXorTraceIdRatioSampler.create( builder.sessionBasedSamplerRatio, () -> { Supplier<String> supplier = sessionSupplierHolder.get(); return supplier == null ? null : supplier.get(); }); return tracerProviderBuilder.setSampler(sampler); }); }  // Wire up the logging exporter, if enabled. if (builder.isDebugEnabled()) { otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { tracerProviderBuilder.addSpanProcessor( SimpleSpanProcessor.create( builder.decorateWithSpanFilter( LoggingSpanExporter.create()))); initializationEvents.emit("debugSpanExporterInitialized"); return tracerProviderBuilder; }); }  // Add final event showing tracer provider init finished otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { initializationEvents.emit("tracerProviderInitialized"); return tracerProviderBuilder; });  // install the log->span bridge LogToSpanBridge logBridge = new LogToSpanBridge(); otelRumBuilder.addLoggerProviderCustomizer( (loggerProviderBuilder, app) -> loggerProviderBuilder.addLogRecordProcessor(logBridge)); // make sure the TracerProvider gets set as the very first thing, before any other // instrumentations otelRumBuilder.addInstrumentation( instrumentedApplication -> logBridge.setTracerProvider( instrumentedApplication.getOpenTelemetrySdk().getTracerProvider()));  if (builder.isAnrDetectionEnabled()) { installAnrDetector(otelRumBuilder, mainLooper); } if (builder.isSlowRenderingDetectionEnabled()) { installSlowRenderingDetector(otelRumBuilder); } if (builder.isCrashReportingEnabled()) { installCrashReporter(otelRumBuilder); }  SettableScreenAttributesAppender screenAttributesAppender = new SettableScreenAttributesAppender(visibleScreenTracker); otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> tracerProviderBuilder.addSpanProcessor(screenAttributesAppender));  // Lifecycle events instrumentation are always installed. installLifecycleInstrumentations(otelRumBuilder, visibleScreenTracker);  OpenTelemetryRum openTelemetryRum = otelRumBuilder.build();  sessionSupplierHolder.set(openTelemetryRum::getRumSessionId);  initializationEvents.recordInitializationSpans( builder.getConfigFlags(), openTelemetryRum.getOpenTelemetry().getTracer(RUM_TRACER_NAME));  return new SplunkRum(openTelemetryRum, globalAttributeSupplier, screenAttributesAppender); }
[*] target: assertEquals(1, spans.size())
[-] pred: org. junit. Assert. assertEquals ( 1, spans. size ( ) )
************************************
************************************
[+] input: allArgsConstructorAndGetter() { Especie especie = new Especie(1, "nome-especie"); assertEquals(1, especie.getIdEspecie()); "<AssertPlaceHolder>"; assertEquals("nome-especie", especie.getNome()); }
getId() { return this.getIdEspecie(); }
[*] target: assertEquals(1, especie.getId())
[-] pred: org. junit. Assert. assertEquals ( 1, especie. getId ( ) )
************************************
************************************
[+] input: testCreateArticleCategory_success() { // 准备参数 ArticleCategoryCreateReqVO reqVO = randomPojo(ArticleCategoryCreateReqVO.class);  // 调用 Long articleCategoryId = articleCategoryService.createArticleCategory(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ArticleCategoryDO articleCategory = articleCategoryMapper.selectById(articleCategoryId); assertPojoEquals(reqVO, articleCategory); }
createArticleCategory(ArticleCategoryCreateReqVO createReqVO) { // 插入 ArticleCategoryDO category = ArticleCategoryConvert.INSTANCE.convert(createReqVO); articleCategoryMapper.insert(category); // 返回 return category.getId(); }
[*] target: assertNotNull(articleCategoryId)
[-] pred: org. junit. Assert. assertNotNull ( articleCategoryId )
************************************
************************************
[+] input: testCreateDictType_success() { // 准备参数 DictTypeSaveReqVO reqVO = randomPojo(DictTypeSaveReqVO.class, o -> o.setStatus(randomEle(CommonStatusEnum.values()).getStatus())) .setId(null); // 避免 id 被赋值  // 调用 Long dictTypeId = dictTypeService.createDictType(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DictTypeDO dictType = dictTypeMapper.selectById(dictTypeId); assertPojoEquals(reqVO, dictType, "id"); }
createDictType(DictTypeSaveReqVO createReqVO) { // 校验字典类型的名字的唯一性 validateDictTypeNameUnique(null, createReqVO.getName()); // 校验字典类型的类型的唯一性 validateDictTypeUnique(null, createReqVO.getType());  // 插入字典类型 DictTypeDO dictType = BeanUtils.toBean(createReqVO, DictTypeDO.class); dictType.setDeletedTime(LocalDateTimeUtils.EMPTY); // 唯一索引，避免 null 值 dictTypeMapper.insert(dictType); return dictType.getId(); }
[*] target: assertNotNull(dictTypeId)
[-] pred: org. junit. Assert. assertNotNull ( dictTypeId )
************************************
************************************
[+] input: shouldBuildDelegateImplementationNoDefaultJobType() { String implementationType = random(); String binding = random(); Message message = delegateImplementationNoDefaultJobType(implementationType, binding); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "Delegate call of type '" + implementationType + "' bound to '" + binding + "' was reset."); }
delegateImplementationNoDefaultJobType( String implementationType, String binding) { return INSTANCE.composeMessage( "delegate-implementation-no-default-job-type", ContextBuilder.builder() .entry("implementationType", implementationType) .entry("binding", binding) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testManifestRequiresChange() {  File bar = getFile("schema/bar.graphqls"); File foo = getFile("schema/foo.graphqls"); File manifest = tempFolder.resolve("manifest.props").toFile();  SchemaFileManifest sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile());  Assertions.assertTrue(sfm.getChangedFiles().contains(foo));  sfm.syncManifest(); Assertions.assertTrue(sfm.getChangedFiles().isEmpty());  sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile()); Assertions.assertTrue(sfm.getChangedFiles().isEmpty()); sfm.syncManifest();  sfm = new SchemaFileManifest(new HashSet<>(Arrays.asList(foo, bar)), manifest, tempFolder.toFile()); Assertions."<AssertPlaceHolder>"; }
getChangedFiles() { Set<File> changed = new HashSet<>(); OrderedProperties manifest = loadManifest(); for (File file : files) { String oldChecksum = manifest.getProperty(relativizeToProject(file)); if (oldChecksum == null) { log.info("{} is new, will generate code", file.getName()); } else if (!oldChecksum.equals(generateChecksum(file))) { log.info("{} has changed, will generate code", file.getName()); } else { log.info("{} has not changed, will not generate code", file.getName()); continue; } changed.add(file); } return changed; }
[*] target: assertTrue(sfm.getChangedFiles().isEmpty())
[-] pred: org. junit. Assert. assertTrue ( sfm. getChangedFiles ( ). isEmpty ( ) )
************************************
************************************
[+] input: testCreateConfig_success() { // 准备参数 ConfigSaveReqVO reqVO = randomPojo(ConfigSaveReqVO.class) .setId(null); // 防止 id 被赋值，导致唯一性校验失败  // 调用 Long configId = configService.createConfig(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ConfigDO config = configMapper.selectById(configId); assertPojoEquals(reqVO, config, "id"); assertEquals(ConfigTypeEnum.CUSTOM.getType(), config.getType()); }
createConfig(ConfigSaveReqVO createReqVO) { // 校验参数配置 key 的唯一性 validateConfigKeyUnique(null, createReqVO.getKey());  // 插入参数配置 ConfigDO config = ConfigConvert.INSTANCE.convert(createReqVO); config.setType(ConfigTypeEnum.CUSTOM.getType()); configMapper.insert(config); return config.getId(); }
[*] target: assertNotNull(configId)
[-] pred: org. junit. Assert. assertNotNull ( configId )
************************************
************************************
[+] input: testUpdateFinishTime() { StepEntity step1 = StepEntity.builder() .uuid("test_uuid11") .name("test_step11") .jobId(2L) .lastStepId(5L) .status(StepStatus.CREATED) .concurrency(3) .taskNum(10) .build();  stepMapper.save(step1); long now = System.currentTimeMillis() / 1000 * 1000; stepMapper.updateFinishedTime(step1.getId(), new Date(now));  List<StepEntity> list = stepMapper.findByJobId(2L); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(now, list.get(0).getFinishedTime().getTime()); }
findByJobId(@Param("jobId") Long jobId);  @Select("select id, step_uuid as uuid, step_name as name, job_id, last_step_id, step_status as status," + " finished_time, started_time, created_time, modified_time, concurrency, task_num, pool_info," + " origin_json from step" + " where id = #{id}
[*] target: assertEquals(1, list.size())
[-] pred: org. junit. Assert. assertEquals ( 1, list. size ( ) )
************************************
************************************
[+] input: shouldBuildErrorCode() { Message message = MessageFactory.errorCode("old", "new"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Error code is transformed from 'old' to 'new'. Please review."); }
errorCode(String oldCode, String newCode) { return INSTANCE.composeMessage( "error-code", ContextBuilder.builder().entry("oldCode", oldCode).entry("newCode", newCode).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: SQLException {  String queryNode = "match (v:testNode) return v;";  ResultSet resultSet = statement.executeQuery(queryNode);  assertTrue(resultSet.next()); assertEquals(1, resultSet.getRow());  resultSet.absolute(5); assertEquals(5, resultSet.getRow());  resultSet.absolute(-2); assertEquals(5, resultSet.getRow());  resultSet.relative(1); assertEquals(6, resultSet.getRow());  resultSet.relative(-3); assertEquals(3, resultSet.getRow());  resultSet.previous(); assertEquals(2, resultSet.getRow());  resultSet.first(); assertEquals(1, resultSet.getRow()); assertTrue(resultSet.isFirst());  resultSet.beforeFirst(); assertEquals(0, resultSet.getRow()); assertTrue(resultSet.isBeforeFirst());  resultSet.last(); assertEquals(6, resultSet.getRow()); assertTrue(resultSet.isLast());  resultSet.afterLast(); assertEquals(7, resultSet.getRow()); "<AssertPlaceHolder>";  }
isAfterLast() throws SQLException { return currentRowNumber == resultRowSize; }
[*] target: assertTrue(resultSet.isAfterLast())
[-] pred: org. junit. Assert. assertTrue ( resultSet. isAfterLast ( ) )
************************************
************************************
[+] input: statSnowflakeId() { var snowflakeId = new MillisecondSnowflakeId(0); var stat = snowflakeId.stat(); Assertions."<AssertPlaceHolder>"; assertThat(stat, Matchers.instanceOf(SnowflakeIdStat.class)); var snowflakeIdStat = (SnowflakeIdStat) stat; assertThat(snowflakeIdStat.getMachineId(), equalTo(0)); }
stat();
[*] target: assertNotNull(stat)
[-] pred: org. junit. Assert. assertNotNull ( stat )
************************************
************************************
[+] input: itShouldHaveExpectedValuesForParameterizedConstructor() { ChatMessage testMessage = new ChatMessage("sender", "recipient", "content", true); "<AssertPlaceHolder>"; assertNotNull(testMessage.getTimestamp()); assertTrue(testMessage.isAction()); assertEquals(testMessage.getSender(), "sender"); assertEquals(testMessage.getRecipient(), "recipient"); assertEquals(testMessage.getContent(), "content"); JSONObject jso = testMessage.toJSON(); assertNotNull(jso); String ep1 = "{"msg":"content","for":{"color":"black","name":"recipient","id":"recipient"},"time":"; String ep2 = Long.toString(testMessage.getDate().getTime() / 1000); String ep3 = ","type":"private","who":{"color":"black","name":"sender","id":"sender"}}"; assertEquals(jso.toString(), ep1 + ep2 + ep3); }
getDate() { return this.date; }
[*] target: assertNotNull(testMessage.getDate())
[-] pred: org. junit. Assert. assertNotNull ( testMessage. getDate() )
************************************
************************************
[+] input: JavetException { IntStream.range(0, 5).forEach(i -> assertFalse(nodeRuntime.isStopping())); IntStream.range(0, 5).forEach(i -> { nodeRuntime.setStopping(false); assertFalse(nodeRuntime.isStopping()); nodeRuntime.setStopping(true); "<AssertPlaceHolder>"; }); nodeRuntime.getExecutor("let count = 0; setInterval(()=> console.log(count++), 1000);").executeVoid(); }
isStopping() { return ((INodeNative) v8Native).isStopping(handle); }
[*] target: assertTrue(nodeRuntime.isStopping())
[-] pred: org. junit. Assert. assertTrue ( nodeRuntime. isStopping() )
************************************
************************************
[+] input: testEvents() { var events = eventMapper.listEventsOfResource(null, null); assertEquals(0, events.size());  var entity = EventEntity.builder() .type(EventType.INFO) .source(EventSource.CLIENT) .resourceType(EventResourceType.JOB) .resourceId(1L) .message("foo") .data("{}") .createdTime(new Date(123L * 1000)) .build();  var entity2 = EventEntity.builder() .type(EventType.INFO) .source(EventSource.CLIENT) .resourceType(EventResourceType.TASK) .resourceId(2L) .message("bar") .data("{}") .createdTime(new Date(456L * 1000)) .build();  var entity3 = EventEntity.builder() .type(EventType.INFO) .source(EventSource.CLIENT) .resourceType(EventResourceType.TASK) .resourceId(3L) .message("baz") .data("{}") .createdTime(new Date(789L * 1000)) .build();  eventMapper.insert(entity); eventMapper.insert(entity2); eventMapper.insert(entity3);  events = eventMapper.listEventsOfResource(EventResourceType.JOB, 1L); assertEquals(1, events.size()); assertEquals(entity, events.get(0));  events = eventMapper.listEventsOfResource(EventResourceType.TASK, 2L); "<AssertPlaceHolder>"; assertEquals(entity2, events.get(0));  events = eventMapper.listEventsOfResources(EventResourceType.TASK, List.of(2L, 3L)); assertEquals(2, events.size()); assertThat(events).containsExactly(entity2, entity3); }
listEventsOfResource(@NotNull Event.EventResourceType resourceType, @NotNull Long resourceId);  @Select("<script>" + "select " + COLUMNS + " from " + TABLE + " where resource_type = #{resourceType}
[*] target: assertEquals(1, events.size())
[-] pred: org. junit. Assert. assertEquals ( 1, events. size ( ) )
************************************
************************************
[+] input: testUpdateAfterApproval_none() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString();  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, null); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(0, result.size()); }
updateAfterApproval(Long userId, Integer userType, String clientId, Map<String, Boolean> requestedScopes) { // 如果 requestedScopes 为空，说明没有要求，则返回 true 通过 if (CollUtil.isEmpty(requestedScopes)) { return true; }  // 更新批准的信息 boolean success = false; // 需要至少有一个同意 LocalDateTime expireTime = LocalDateTime.now().plusSeconds(TIMEOUT); for (Map.Entry<String, Boolean> entry : requestedScopes.entrySet()) { if (entry.getValue()) { success = true; } saveApprove(userId, userType, clientId, entry.getKey(), entry.getValue(), expireTime); } return success; }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
************************************
[+] input: testGetWorkflowName4() { List<String> names = NextflowScript .getWorkflowNames("\n   workflow process1\n{some content }\n   workflow process2{some content }""); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); assertEquals("process2", names.get(1)); }
public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(2, names.size())
[-] pred: org. junit. Assert. assertEquals ( 2, names. size ( ) )
************************************
************************************
[+] input: shouldBuildFieldContent() { Message message = MessageFactory.fieldContent(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
fieldContent(String elementLocalName) { return INSTANCE.composeMessage( "field-content", ContextBuilder.builder().context(elementNotTransformablePrefix(elementLocalName)).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildConditionExpressionFeel() { String oldExpression = random(); String newExpression = random(); Message message = conditionExpressionFeel(oldExpression, newExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( "FEEL Condition expression: Please review transformed expression: '%s' -> '%s'. Check for custom FEEL functions as they are not supported by Zeebe.", oldExpression, newExpression); }
conditionExpressionFeel( String oldFeelExpression, String newFeelExpression) { return INSTANCE.composeMessage( "condition-expression-feel", ContextBuilder.builder() .context(expressionTransformationResult(oldFeelExpression, newFeelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: URISyntaxException { Path camelJsonRoute = Path.of( CamelRouteFileProcessorTest.class.getResource(".").toURI());  ParseCatalog<Step> camelParser = parseCatalog.getLocalFolder(camelJsonRoute); List<Step> steps = camelParser.parse().join().stream().filter(Objects::nonNull).collect(Collectors.toList());  "<AssertPlaceHolder>";  BiFunction<List<Step>, String, Step> fetchBrowse = (stepList, stepType) -> stepList.stream() .filter(step -> stepType.equals(step.getType())).findFirst().get();  Step browseComponentSink = fetchBrowse.apply(steps, Step.END); Step browseComponentSource = fetchBrowse.apply(steps, Step.START); Step browseComponentAction = fetchBrowse.apply(steps, Step.MIDDLE);  assertBrowseJsonHasBeenParsedCorrectly(browseComponentSink, Step.END, false); assertBrowseJsonHasBeenParsedCorrectly(browseComponentSource, Step.START, false); assertBrowseJsonHasBeenParsedCorrectly(browseComponentAction, Step.MIDDLE, false); }
getLocalFolder(final Path path) { ParseCatalog<Step> parseCatalog = new LocalFolderParseCatalog<>(path); parseCatalog.setFileVisitor(new CamelRouteFileProcessor()); return parseCatalog; }
[*] target: assertEquals(3, steps.size())
[-] pred: org. junit. Assert. assertEquals ( 3, steps. size ( ) )
************************************
************************************
[+] input: testEntityExists() { boolean exists = repository.exists(User.class,-1L); Assertions.assertFalse(exists);   User created = repository.save(randomUser()); exists = repository.exists(User.class,created.getId()); Assertions."<AssertPlaceHolder>"; }
exists(Class<T> clazz, Serializable id);
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
************************************
[+] input: filterUncompletedTasksOfOneUncompletedTaskList() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name);  List<Task> tasks = todoList.filterTasks(false); "<AssertPlaceHolder>"; assertEquals(task1Name, tasks.get(0).getName()); }
size() { return tasks.size(); }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
************************************
[+] input: shouldValidateWithNoConfig() { TopicValidator topicValidator = TopicValidator.builder() .validationConstraints( Map.of("replication.factor", ResourceValidator.Range.between(3, 3), "partitions", ResourceValidator.Range.between(3, 6), "cleanup.policy", ResourceValidator.ValidList.in("delete", "compact"), "min.insync.replicas", ResourceValidator.Range.between(2, 2), "retention.ms", ResourceValidator.Range.between(60000, 604800000))) .build();  Topic topic = Topic.builder() .metadata(Metadata.builder() .name("validName") .build()) .spec(Topic.TopicSpec.builder() .replicationFactor(3) .partitions(3) .build()) .build();  List<String> actual = topicValidator.validate(topic); "<AssertPlaceHolder>"; assertTrue(actual.contains("Invalid empty value for field "min.insync.replicas": value must not be null.")); assertTrue(actual.contains("Invalid empty value for field "retention.ms": value must not be null.")); assertTrue(actual.contains("Invalid empty value for field "cleanup.policy": value must not be null.")); }
validate(Topic topic) { List<String> validationErrors = new ArrayList<>();  if (!StringUtils.hasText(topic.getMetadata().getName())) { validationErrors.add(invalidNameEmpty()); }  if (topic.getMetadata().getName().equals(".") || topic.getMetadata().getName().equals("..")) { validationErrors.add(invalidTopicName(topic.getMetadata().getName())); }  if (topic.getMetadata().getName().length() > 249) { validationErrors.add(invalidNameLength(topic.getMetadata().getName())); }  if (!topic.getMetadata().getName().matches("[a-zA-Z0-9._-]+")) { validationErrors.add(invalidNameSpecChars(topic.getMetadata().getName())); }  if (!validationConstraints.isEmpty() && topic.getSpec().getConfigs() != null) { Map<String, String> configsWithoutConstraints = topic.getSpec().getConfigs().entrySet() .stream() .filter(entry -> !validationConstraints.containsKey(entry.getKey())) .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));  if (!configsWithoutConstraints.isEmpty()) { configsWithoutConstraints .forEach((key, value) -> validationErrors.add(invalidTopicSpec(key, value))); } }  validationConstraints.forEach((key, value) -> { try { if (key.equals(PARTITIONS)) { value.ensureValid(key, topic.getSpec().getPartitions()); } else if (key.equals(REPLICATION_FACTOR)) { value.ensureValid(key, topic.getSpec().getReplicationFactor()); } else { if (topic.getSpec().getConfigs() != null) { value.ensureValid(key, topic.getSpec().getConfigs().get(key)); } else { validationErrors.add(invalidFieldValidationNull(key)); } } } catch (FieldValidationException e) { validationErrors.add(e.getMessage()); } }); return validationErrors; }
[*] target: assertEquals(3, actual.size())
[-] pred: org. junit. Assert. assertEquals ( 3, actual. size ( ) )
************************************
************************************
[+] input: Exception { try { Account account = Provisioning.getInstance().getAccount(MockProvisioning.DEFAULT_ACCOUNT_ID); RuleManager.clearCachedRules(account); account.setMailSieveScript("require "variables"; tag "${subject} World";"); Mailbox mbox = MailboxManager.getInstance().getMailboxByAccount(account);  List<ItemId> ids = RuleManager.applyRulesToIncomingMessage(new OperationContext(mbox), mbox, new ParsedMessage("From: sender@zimbra.com\nSubject: Hello".getBytes(), false), 0, account.getName(), new DeliveryContext(), Mailbox.ID_FOLDER_INBOX, true); assertEquals(1, ids.size()); Tag tag = mbox.getTagByName(null, "Hello World"); "<AssertPlaceHolder>"; } catch (Exception e) { e.printStackTrace(); fail("No exception should be thrown"); } }
isListed() { return isListed; }
[*] target: assertTrue(tag.isListed())
[-] pred: org. junit. Assert. assertTrue ( tag. isListed() )
************************************
************************************
[+] input: testDecodeCellDesc() { var cells = Map.of( "key", RecordCellDesc.builder().dataStoreValueType(ColumnType.STRING).scalarValue("foo").build(), "a", RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(), "b", RecordCellDesc.builder() .dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.1f))) .build(), "c", RecordCellDesc.builder().dataStoreValueType(ColumnType.BOOL).scalarValue("1").build(), "d", RecordCellDesc.builder() .dataStoreValueType(ColumnType.BYTES) .scalarValue(Base64.getEncoder().encodeToString("test".getBytes(StandardCharsets.UTF_8))) .build() ); var row = RecordRowDesc.builder().cells(cells).build(); var result = RecordDecoder.decodeRecord(row); var expected = Map.of( "key", BaseValue.valueOf("foo"), "a", BaseValue.valueOf(1), "b", BaseValue.valueOf(1.1f), "c", BaseValue.valueOf(true), "d", BaseValue.valueOf(ByteBuffer.wrap("test".getBytes())) ); assertEquals(expected, result);  cells = Map.of("null", RecordCellDesc.builder().dataStoreValueType(ColumnType.UNKNOWN).build()); row = RecordRowDesc.builder().cells(cells).build(); result = RecordDecoder.decodeRecord(row); expected = new HashMap<>() { { put("null", null); } }; assertEquals(expected, result);  // test list, tuple, map, object cells = Map.of( "list", RecordCellDesc.builder().dataStoreValueType(ColumnType.LIST).listValue(List.of( RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(), RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.1f))).build() )).build(),  "tuple", RecordCellDesc.builder().dataStoreValueType(ColumnType.TUPLE).listValue(List.of( RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32).scalarValue("00000001").build(), RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.2f))).build() )).build(),  "map", RecordCellDesc.builder().dataStoreValueType(ColumnType.MAP).mapValue(List.of( new RecordCellDesc.RecordCellMapItem( RecordCellDesc.builder() .dataStoreValueType(ColumnType.INT32) .scalarValue("00000001") .build(), RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.3f))).build() ) )).build(),  "object", RecordCellDesc.builder().dataStoreValueType(ColumnType.OBJECT).objectValue( new RecordCellDesc.RecordCellObject( Map.of( "a", RecordCellDesc.builder().dataStoreValueType(ColumnType.INT32) .scalarValue("00000001").build(), "b", RecordCellDesc.builder().dataStoreValueType(ColumnType.FLOAT32) .scalarValue(Integer.toHexString(Float.floatToIntBits(1.4f))) .build() ), "t" ) ).build() );  row = RecordRowDesc.builder().cells(cells).build(); result = RecordDecoder.decodeRecord(row); expected = Map.of( "list", BaseValue.valueOf(List.of(BaseValue.valueOf(1), BaseValue.valueOf(1.1f))), "tuple", TupleValue.valueOf(List.of(BaseValue.valueOf(1), BaseValue.valueOf(1.2f))), "map", BaseValue.valueOf(Map.of(BaseValue.valueOf(1), BaseValue.valueOf(1.3f))), "object", ObjectValue.valueOf("t", Map.of("a", BaseValue.valueOf(1), "b", BaseValue.valueOf(1.4f))) ); "<AssertPlaceHolder>"; }
decodeRecord(RecordRowDesc row) { var ret = new HashMap<String, BaseValue>(); for (var entry : row.getCells().entrySet()) { ret.put(entry.getKey(), RecordDecoder.decodeValue(entry.getValue())); } return ret; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
************************************
[+] input: ctor() { ExactCollection<String> exactCollection = createExactCollection(10); Assertions.assertNotNull(exactCollection); Assertions."<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(10, exactCollection.size())
[-] pred: org. junit. Assert. assertEquals ( 10, exactCollection. size() )
************************************
************************************
[+] input: testCreateCouponTemplate_success() { // 准备参数 CouponTemplateCreateReqVO reqVO = randomPojo(CouponTemplateCreateReqVO.class, o -> o.setProductScope(randomEle(PromotionProductScopeEnum.values()).getScope()) .setValidityType(randomEle(CouponTemplateValidityTypeEnum.values()).getType()) .setDiscountType(randomEle(PromotionDiscountTypeEnum.values()).getType()));  // 调用 Long couponTemplateId = couponTemplateService.createCouponTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 CouponTemplateDO couponTemplate = couponTemplateMapper.selectById(couponTemplateId); assertPojoEquals(reqVO, couponTemplate); }
createCouponTemplate(CouponTemplateCreateReqVO createReqVO) { // 校验商品范围 validateProductScope(createReqVO.getProductScope(), createReqVO.getProductScopeValues()); // 插入 CouponTemplateDO couponTemplate = CouponTemplateConvert.INSTANCE.convert(createReqVO) .setStatus(CommonStatusEnum.ENABLE.getStatus()); couponTemplateMapper.insert(couponTemplate); // 返回 return couponTemplate.getId(); }
[*] target: assertNotNull(couponTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( couponTemplateId )
************************************
************************************
[+] input: byArguments() {  final String[] args = { "--window-type", "HOPPING", "--name", "bar" };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.HOPPING); assertEquals(options.getName(), "bar"); }
parse(final Class<T> optionsClass, final String[] args) {  final T options = create(optionsClass);  JCommander jCommander = JCommander.newBuilder() .addObject(options) .build();  //easiest way to set configuration through docker. //similar to how Confluent does this in their Docker images. OptionsUtil.populateByEnvironment(options);  jCommander.parse(args);  if (options.isHelp()) { jCommander.usage(); return null; }  return options; }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
************************************
[+] input: test() { try { final int status = -1; final String testExitMessage = "testExitMessage"; try { ExitUtils.disableSystemExit(); ExitUtils.terminate(status, testExitMessage, null, null); fail(); } catch (ExitException e) { "<AssertPlaceHolder>"; assertEquals(testExitMessage, e.getMessage()); }  final Thread t = new Thread(null, () -> { throw new AssertionError("TestUncaughtException"); }, "testThread"); t.start(); t.join(); } catch (Exception e) { e.printStackTrace(); fail(); }  }
getStatus() { return status; }
[*] target: assertEquals(status, e.getStatus())
[-] pred: org. junit. Assert. assertEquals ( status, e. getStatus() )
************************************
************************************
[+] input: interfaceMethods() { ScreenAttributesAppender screenAttributesAppender = new ScreenAttributesAppender(visibleScreenTracker);  assertTrue(screenAttributesAppender.isStartRequired()); "<AssertPlaceHolder>"; }
isEndRequired() { return false; }
[*] target: assertFalse(screenAttributesAppender.isEndRequired())
[-] pred: org. junit. Assert. assertFalse ( screenAttributesAppender. isEndRequired() )
************************************
************************************
[+] input: canWriteTest() { LocalStorage item = LocalStorage.newBuilder().basePath(testBaseDir.getAbsolutePath()) .cleanupThreshold(50) .highWaterMarkOfWrite(95) .lowWaterMarkOfWrite(80) .capacity(100) .cleanIntervalMs(5000) .build();  item.getMetaData().updateDiskSize(20); assertTrue(item.canWrite()); item.getMetaData().updateDiskSize(65); assertTrue(item.canWrite()); item.getMetaData().updateDiskSize(10); assertFalse(item.canWrite()); item.getMetaData().updateDiskSize(-10); assertFalse(item.canWrite()); item.getMetaData().updateDiskSize(-10); "<AssertPlaceHolder>"; }
canWrite() { if (isSpaceEnough) { isSpaceEnough = metaData.getDiskSize().doubleValue() * 100 / capacity < highWaterMarkOfWrite; } else { isSpaceEnough = metaData.getDiskSize().doubleValue() * 100 / capacity < lowWaterMarkOfWrite; } return isSpaceEnough && !isCorrupted; }
[*] target: assertTrue(item.canWrite())
[-] pred: org. junit. Assert. assertTrue ( item. canWrite() )
************************************
************************************
[+] input: wrongUrlSilentlyFails() { ParseCatalog<Step> kameletParser = parseCatalog.getParser("https://nothing/wrong/url.git", "");  List<Step> steps = kameletParser.parse().join(); Assertions."<AssertPlaceHolder>"; assertEquals(0, steps.size()); }
getParser(final String url, final String tag) { ParseCatalog<Step> parseCatalog = new GitParseCatalog<>(url, tag); parseCatalog.setFileVisitor(kameletFileProcessor); return parseCatalog; }
[*] target: assertNotNull(steps)
[-] pred: org. junit. Assert. assertNotNull ( steps )
************************************
************************************
[+] input: testAssignUserRole() { // 准备参数 Long userId = 1L; Set<Long> roleIds = asSet(200L, 300L); // mock 数据 UserRoleDO userRole01 = randomPojo(UserRoleDO.class).setUserId(1L).setRoleId(100L); userRoleMapper.insert(userRole01); UserRoleDO userRole02 = randomPojo(UserRoleDO.class).setUserId(1L).setRoleId(200L); userRoleMapper.insert(userRole02);  // 调用 permissionService.assignUserRole(userId, roleIds); // 断言 List<UserRoleDO> userRoleDOList = userRoleMapper.selectList(); "<AssertPlaceHolder>"; assertEquals(1L, userRoleDOList.get(0).getUserId()); assertEquals(200L, userRoleDOList.get(0).getRoleId()); assertEquals(1L, userRoleDOList.get(1).getUserId()); assertEquals(300L, userRoleDOList.get(1).getRoleId()); }
assignUserRole(Long userId, Set<Long> roleIds);
[*] target: assertEquals(2, userRoleDOList.size())
[-] pred: org. junit. Assert. assertEquals ( 2, userRoleDOList. size ( ) )
************************************
************************************
[+] input: shouldBuildInputOutput() { Message message = MessageFactory.inputOutput(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inputOutput() { return INSTANCE.emptyMessage(); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: getNodeDetails_kraken_isNotOnline() { NodeDetailsDto kraken = demoDataService.getNodeDetails(KRAKEN.remotePubkey()); "<AssertPlaceHolder>"; assertFalse(kraken.onlineReport().online()); }
getNodeDetails(Pubkey pubkey) { List<OpenChannelDto> openChannels = getOpenChannelsWith(pubkey); return createNodeDetails(getNode(pubkey), openChannels, warningService.getNodeWarnings(pubkey)); }
[*] target: assertNotNull(kraken)
[-] pred: org. junit. Assert. assertNotNull ( kraken )
************************************
************************************
[+] input: testCreateBrand_success() { // 准备参数 ProductBrandCreateReqVO reqVO = randomPojo(ProductBrandCreateReqVO.class);  // 调用 Long brandId = brandService.createBrand(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 ProductBrandDO brand = brandMapper.selectById(brandId); assertPojoEquals(reqVO, brand); }
createBrand(ProductBrandCreateReqVO createReqVO) { // 校验 validateBrandNameUnique(null, createReqVO.getName());  // 插入 ProductBrandDO brand = ProductBrandConvert.INSTANCE.convert(createReqVO); brandMapper.insert(brand); // 返回 return brand.getId(); }
[*] target: assertNotNull(brandId)
[-] pred: org. junit. Assert. assertNotNull ( brandId )
************************************
************************************
[+] input: testEquals2() { ServiceNode serviceNode = new ServiceNode("127.0.0.1"); assertEquals(serviceNode, serviceNode); int expectedHashCodeResult = serviceNode.hashCode(); "<AssertPlaceHolder>"; }
hashCode() { return Objects.hash(ip); }
[*] target: assertEquals(expectedHashCodeResult, serviceNode.hashCode())
[-] pred: org. junit. Assert. assertEquals ( expectedHashCodeResult, serviceNode. hashCode() )
************************************
************************************
[+] input: shouldBuildInclusiveGatewayJoin() { Message message = MessageFactory.inclusiveGatewayJoin(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inclusiveGatewayJoin() { return INSTANCE.staticMessage("inclusive-gateway-join"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testGetDefaultNgrokConfig() { // GIVEN final JavaNgrokConfig javaNgrokConfigV3Tmp = new JavaNgrokConfig.Builder() .withConfigPath(Paths.get("build", ".ngrok", "config_v2_tmp.yml").toAbsolutePath()) .withNgrokPath(Paths.get("build", "bin", "v2", NgrokInstaller.getNgrokBin())) .withNgrokVersion(NgrokVersion.V3) .build(); ngrokInstaller.installDefaultConfig(javaNgrokConfigV3Tmp.getConfigPath(), Map.of(), javaNgrokConfigV3Tmp.getNgrokVersion());  // WHEN final Map<String, Object> ngrokConfig = ngrokInstaller.getNgrokConfig(javaNgrokConfigV3Tmp.getConfigPath(), true, javaNgrokConfigV3Tmp.getNgrokVersion());  // THEN "<AssertPlaceHolder>"; assertEquals(2, ngrokConfig.size()); assertTrue(Files.exists(javaNgrokConfigV3Tmp.getConfigPath())); }
getNgrokConfig(final Path configPath, final boolean useCache, final NgrokVersion ngrokVersion) { final String key = configPath.toString(); if (!configCache.containsKey(key) || !useCache) { try { final String config = Files.readString(configPath);  if (isBlank(config)) { configCache.put(key, getDefaultConfig(ngrokVersion)); } else { configCache.put(key, yaml.load(config)); } } catch (final IOException | JsonParseException e) { throw new JavaNgrokInstallerException(String.format("An error occurred while parsing " + "the config file: %s", configPath), e); } }  return configCache.get(key); }
[*] target: assertNotNull(ngrokConfig)
[-] pred: org. junit. Assert. assertNotNull ( ngrokConfig )
************************************
************************************
[+] input: testCreateCategory_success() { // 准备参数 //ProductCategoryCreateReqVO reqVO = randomPojo(ProductCategoryCreateReqVO.class);  // mock 父类 //ProductCategoryDO parentProductCategory = randomPojo(ProductCategoryDO.class, o -> { //    reqVO.setParentId(o.getId()); //    o.setParentId(PARENT_ID_NULL); //}); //productCategoryMapper.insert(parentProductCategory); // //// 调用 //Long categoryId = productCategoryService.createCategory(reqVO); //// 断言 //"<AssertPlaceHolder>"; //// 校验记录的属性是否正确 //ProductCategoryDO category = productCategoryMapper.selectById(categoryId); //assertPojoEquals(reqVO, category); }
createCategory(ProductCategorySaveReqVO createReqVO) { // 校验父分类存在 validateParentProductCategory(createReqVO.getParentId());  // 插入 ProductCategoryDO category = BeanUtils.toBean(createReqVO, ProductCategoryDO.class); productCategoryMapper.insert(category); // 返回 return category.getId(); }
[*] target: assertNotNull(categoryId)
[-] pred: org. junit. Assert. assertNotNull ( categoryId )
************************************
************************************
[+] input: getChangeAddressFromAccountPrivateKey_byNetwork() { String accountPrivateKey = "a83aa0356397602d3da7648f139ca06be2465caef14ac4d795b17cdf13bd0f4fe9aac037f7e22335cd99495b963d54f21e8dae540112fe56243b287962da366fd4016f4cfb6d6baba1807621b4216d18581c38404c4768fe820204bef98ba706"; String changeAddress0 = "addr_test1qpqwpvc7946mqvl0mwwhqgmh6w4a6335mkuypjyg9fd5elsl5mr3vkp82y2kcwxxtu4zjcxvm80ttmx2hyeyjka4v8psy8w5eh";  Account account = new Account(Networks.testnet(), HexUtil.decodeHexString(accountPrivateKey));  assertNotNull(account.changeAddress()); assertNotNull(account.privateKeyBytes()); "<AssertPlaceHolder>"; }
changeAddress() { if (changeAddress == null || changeAddress.isEmpty()) { HdKeyPair changeKeyPair = getChangeKeyPair(); HdKeyPair stakeKeyPair = getStakeKeyPair();  Address address = AddressProvider.getBaseAddress(changeKeyPair.getPublicKey(), stakeKeyPair.getPublicKey(), network); changeAddress = address.toBech32(); }  return changeAddress; }
[*] target: assertEquals(changeAddress0, account.changeAddress())
[-] pred: org. junit. Assert. assertEquals ( changeAddress0, account. changeAddress ( ) )
************************************
************************************
[+] input: JsonProcessingException { //given final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(Boolean.class))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(true);  //when final boolean actual = underTest.delete(URI.create(HTTPS_LOCALHOST));  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.DELETE, request.getHttpMethod()); Assertions.assertNull(request.getHeaders().get(HttpHeaderName.CONTENT_TYPE)); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(Boolean.class)); verify(objectReader).readValue(anyString()); }
delete(@NonNull final URI baseUri) { final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_PATH, Map.of(BASE_URI_QUERY_PARAM, baseUri.toString())); final HttpRequest request = new HttpRequest(HttpMethod.DELETE, uri.toString()); return sendAndProcess(request, r -> r.getResponseObject(Boolean.class)); }
[*] target: assertTrue(actual)
[-] pred: org. junit. Assert. assertTrue ( actual )
************************************
************************************
[+] input: testProcessRoleDeleted() { // 准备参数 Long roleId = randomLongId(); // mock 数据 UserRole UserRoleDO userRoleDO01 = randomPojo(UserRoleDO.class, o -> o.setRoleId(roleId)); // 被删除 userRoleMapper.insert(userRoleDO01); UserRoleDO userRoleDO02 = randomPojo(UserRoleDO.class); // 不被删除 userRoleMapper.insert(userRoleDO02); // mock 数据 RoleMenu RoleMenuDO roleMenuDO01 = randomPojo(RoleMenuDO.class, o -> o.setRoleId(roleId)); // 被删除 roleMenuMapper.insert(roleMenuDO01); RoleMenuDO roleMenuDO02 = randomPojo(RoleMenuDO.class); // 不被删除 roleMenuMapper.insert(roleMenuDO02);  // 调用 permissionService.processRoleDeleted(roleId); // 断言数据 RoleMenuDO List<RoleMenuDO> dbRoleMenus = roleMenuMapper.selectList(); "<AssertPlaceHolder>"; assertPojoEquals(dbRoleMenus.get(0), roleMenuDO02); // 断言数据 UserRoleDO List<UserRoleDO> dbUserRoles = userRoleMapper.selectList(); assertEquals(1, dbUserRoles.size()); assertPojoEquals(dbUserRoles.get(0), userRoleDO02); }
processRoleDeleted(Long roleId);  /** * 处理菜单删除时，删除关联授权数据 * * @param menuId 菜单编号 */ void processMenuDeleted(Long menuId);  /** * 获得角色拥有的菜单编号集合 * * @param roleId 角色编号 * @return 菜单编号集合 */ default Set<Long> getRoleMenuListByRoleId(Long roleId) { return getRoleMenuListByRoleId(singleton(roleId)); }
[*] target: assertEquals(1, dbRoleMenus.size())
[-] pred: org. junit. Assert. assertEquals ( 1, dbRoleMenus. size ( ) )
************************************
************************************
[+] input: shouldBuildInputOutputParameter() { Message message = MessageFactory.inputOutputParameter(random(), random(), random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
inputOutputParameter( String elementLocalName, String parameterName, String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "input-output-parameter", ContextBuilder.builder() .entry("parameterName", parameterName) .context(elementTransformedPrefix(elementLocalName)) .context(expressionTransformationResult(juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildElementAvailableInFutureVersion() { Message message = MessageFactory.elementAvailableInFutureVersion("inclusiveGateway", "8.0.0", "8.1.0"); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertThat(message.getMessage()) .isEqualTo( "Element 'inclusiveGateway' is not supported in Zeebe version '8.0.0'. It is available in version '8.1.0'."); }
elementAvailableInFutureVersion( String elementLocalName, String semanticVersion, String futureVersion) { return INSTANCE.composeMessage( "element-available-in-future-version", ContextBuilder.builder() .context(elementNotSupportedPrefix(elementLocalName, semanticVersion)) .entry("futureVersion", futureVersion) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testCreateTag_success() { // 准备参数 MemberTagCreateReqVO reqVO = randomPojo(MemberTagCreateReqVO.class);  // 调用 Long tagId = tagService.createTag(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberTagDO tag = tagMapper.selectById(tagId); assertPojoEquals(reqVO, tag); }
createTag(MemberTagCreateReqVO createReqVO) { // 校验名称唯一 validateTagNameUnique(null, createReqVO.getName()); // 插入 MemberTagDO tag = MemberTagConvert.INSTANCE.convert(createReqVO); memberTagMapper.insert(tag); // 返回 return tag.getId(); }
[*] target: assertNotNull(tagId)
[-] pred: org. junit. Assert. assertNotNull ( tagId )
************************************
************************************
[+] input: testGetExpression_allDeptDataPermission() { try (MockedStatic<SecurityFrameworkUtils> securityFrameworkUtilsMock = mockStatic(SecurityFrameworkUtils.class)) { // 准备参数 String tableName = "t_user"; Alias tableAlias = new Alias("u"); // mock 方法（LoginUser） LoginUser loginUser = randomPojo(LoginUser.class, o -> o.setId(1L) .setUserType(UserTypeEnum.ADMIN.getValue())); securityFrameworkUtilsMock.when(SecurityFrameworkUtils::getLoginUser).thenReturn(loginUser); // mock 方法（DeptDataPermissionRespDTO） DeptDataPermissionRespDTO deptDataPermission = new DeptDataPermissionRespDTO().setAll(true); when(permissionApi.getDeptDataPermission(same(1L))).thenReturn(deptDataPermission);  // 调用 Expression expression = rule.getExpression(tableName, tableAlias); // 断言 "<AssertPlaceHolder>"; assertSame(deptDataPermission, loginUser.getContext(DeptDataPermissionRule.CONTEXT_KEY, DeptDataPermissionRespDTO.class)); } }
getExpression(String tableName, Alias tableAlias) { // 只有有登陆用户的情况下，才进行数据权限的处理 LoginUser loginUser = SecurityFrameworkUtils.getLoginUser(); if (loginUser == null) { return null; } // 只有管理员类型的用户，才进行数据权限的处理 if (ObjectUtil.notEqual(loginUser.getUserType(), UserTypeEnum.ADMIN.getValue())) { return null; }  // 获得数据权限 DeptDataPermissionRespDTO deptDataPermission = loginUser.getContext(CONTEXT_KEY, DeptDataPermissionRespDTO.class); // 从上下文中拿不到，则调用逻辑进行获取 if (deptDataPermission == null) { deptDataPermission = permissionApi.getDeptDataPermission(loginUser.getId()); if (deptDataPermission == null) { log.error("[getExpression][LoginUser({}) 获取数据权限为 null]", JsonUtils.toJsonString(loginUser)); throw new NullPointerException(String.format("LoginUser(%d) Table(%s/%s) 未返回数据权限", loginUser.getId(), tableName, tableAlias.getName())); } // 添加到上下文中，避免重复计算 loginUser.setContext(CONTEXT_KEY, deptDataPermission); }  // 情况一，如果是 ALL 可查看全部，则无需拼接条件 if (deptDataPermission.getAll()) { return null; }  // 情况二，即不能查看部门，又不能查看自己，则说明 100% 无权限 if (CollUtil.isEmpty(deptDataPermission.getDeptIds()) && Boolean.FALSE.equals(deptDataPermission.getSelf())) { return new EqualsTo(null, null); // WHERE null = null，可以保证返回的数据为空 }  // 情况三，拼接 Dept 和 User 的条件，最后组合 Expression deptExpression = buildDeptExpression(tableName,tableAlias, deptDataPermission.getDeptIds()); Expression userExpression = buildUserExpression(tableName, tableAlias, deptDataPermission.getSelf(), loginUser.getId()); if (deptExpression == null && userExpression == null) { // TODO 芋艿：获得不到条件的时候，暂时不抛出异常，而是不返回数据 log.warn("[getExpression][LoginUser({}) Table({}/{}) DeptDataPermission({}) 构建的条件为空]", JsonUtils.toJsonString(loginUser), tableName, tableAlias, JsonUtils.toJsonString(deptDataPermission)); //            throw new NullPointerException(String.format("LoginUser(%d) Table(%s/%s) 构建的条件为空", //                    loginUser.getId(), tableName, tableAlias.getName())); return EXPRESSION_NULL; } if (deptExpression == null) { return userExpression; } if (userExpression == null) { return deptExpression; } // 目前，如果有指定部门 + 可查看自己，采用 OR 条件。即，WHERE (dept_id IN ? OR user_id = ?) return new Parenthesis(new OrExpression(deptExpression, userExpression)); }
[*] target: assertNull(expression)
[-] pred: org. junit. Assert. assertNull ( expression )
************************************
************************************
[+] input: normalStatusBar() { String res = tracker.update("§c934/1086❤     §a159§a❈ Defense     §b562/516✎ Mana", false); "<AssertPlaceHolder>"; assertStats(934, 1086, 159, 562, 516, 0); }
update(String actionBar, boolean filterManaUse) { var sb = new StringBuilder(); Matcher matcher = STATUS_HEALTH.matcher(actionBar); if (!matcher.lookingAt()) return actionBar; updateHealth(matcher); if (matcher.group(5) != null) { sb.append("§c❤"); sb.append(matcher.group(5)); } actionBar = reset(actionBar, matcher); if (matcher.usePattern(MANA_STATUS).lookingAt()) { defense = 0; updateMana(matcher); actionBar = reset(actionBar, matcher); } else { if (matcher.usePattern(DEFENSE_STATUS).lookingAt()) { defense = parseInt(matcher, 1); actionBar = reset(actionBar, matcher); } else if (filterManaUse && matcher.usePattern(MANA_USE).lookingAt()) { actionBar = reset(actionBar, matcher); } if (matcher.usePattern(MANA_STATUS).find()) { updateMana(matcher); matcher.appendReplacement(sb, ""); } } matcher.appendTail(sb); String res = sb.toString().trim(); return res.isEmpty() ? null : res; }
[*] target: assertNull(res)
[-] pred: org. junit. Assert. assertNull ( res )
************************************
************************************
[+] input: shouldBuildConnectorId() { Message message = MessageFactory.connectorId(random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
connectorId(String elementLocalName) { return INSTANCE.composeMessage( "connector-id", ContextBuilder.builder().context(elementTransformedPrefix(elementLocalName)).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: JavetException { V8Runtime danglingV8Runtime; try (V8Runtime v8Runtime = v8Host.createV8Runtime()) { assertFalse(v8Runtime.isClosed()); danglingV8Runtime = v8Runtime; } "<AssertPlaceHolder>"; }
isClosed() { return handle == INVALID_HANDLE; }
[*] target: assertTrue(danglingV8Runtime.isClosed())
[-] pred: org. junit. Assert. assertTrue ( danglingV8Runtime. isClosed() )
************************************
************************************
[+] input: testConvertShouldSetParametersWhenCalledWithValidRsaPrivateKey() { //given final RsaPrivateKeyToJsonWebKeyImportRequestConverter underTest = new RsaPrivateKeyToJsonWebKeyImportRequestConverter(); final KeyPair keyPair = KeyGenUtil.generateRsa(2048, null); final RSAPrivateCrtKey privateKey = (RSAPrivateCrtKey) keyPair.getPrivate();  //when final JsonWebKeyImportRequest actual = underTest.convert(privateKey);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(KeyType.RSA, actual.getKeyType()); Assertions.assertNotNull(actual.getN()); Assertions.assertNotNull(actual.getE()); Assertions.assertNotNull(actual.getD()); Assertions.assertNotNull(actual.getP()); Assertions.assertNotNull(actual.getQ()); Assertions.assertNotNull(actual.getDp()); Assertions.assertNotNull(actual.getDq()); Assertions.assertNotNull(actual.getQi()); }
convert(final @NonNull RSAPrivateCrtKey source) { final JsonWebKeyImportRequest importRequest = new JsonWebKeyImportRequest(); importRequest.setKeyType(KeyType.RSA); importRequest.setN(source.getModulus().toByteArray()); importRequest.setE(source.getPublicExponent().toByteArray()); importRequest.setD(source.getPrivateExponent().toByteArray()); importRequest.setP(source.getPrimeP().toByteArray()); importRequest.setQ(source.getPrimeQ().toByteArray()); importRequest.setDq(source.getPrimeExponentQ().toByteArray()); importRequest.setDp(source.getPrimeExponentP().toByteArray()); importRequest.setQi(source.getCrtCoefficient().toByteArray()); return importRequest; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testIsEqualTo() { SimpleNumericVersion version = new SimpleNumericVersion(10); SimpleNumericVersion version2 = new SimpleNumericVersion(10);  assertEquals(version, version2); "<AssertPlaceHolder>";  assertTrue(version.isEqualTo(version2)); assertFalse(version.isNewerThan(version2)); assertFalse(version.isOlderThan(version2)); }
hashCode() { return getVersionNumber(); }
[*] target: assertEquals(version.hashCode(), version2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( version. hashCode ( ), version2. hashCode ( ) )
************************************
************************************
[+] input: JavetException { try (V8ValueObject v8ValueObject = v8Runtime.getExecutor( "let x = {'a': 1, 'b': '2', 'c': 3n, d: 1, e: null, g: {h: 1}, " + "'中文': '測試', '1234567890': '1234567890'}; x;").execute()) { try (IV8ValueArray iV8ValueArray = v8ValueObject.getPropertyNames()) { "<AssertPlaceHolder>"; assertEquals(8, iV8ValueArray.getLength()); // Order is preserved since ES2015. assertEquals(1234567890, iV8ValueArray.getPropertyInteger(0)); assertEquals("a", iV8ValueArray.getPropertyString(1)); assertEquals("b", iV8ValueArray.getPropertyString(2)); assertEquals("c", iV8ValueArray.getPropertyString(3)); assertEquals("d", iV8ValueArray.getPropertyString(4)); assertEquals("e", iV8ValueArray.getPropertyString(5)); assertEquals("g", iV8ValueArray.getPropertyString(6)); assertEquals("中文", iV8ValueArray.getPropertyString(7)); } } }
getPropertyNames() throws JavetException { return checkV8Runtime().getV8Internal().objectGetPropertyNames(this); }
[*] target: assertNotNull(iV8ValueArray)
[-] pred: org. junit. Assert. assertNotNull ( iV8ValueArray )
************************************
************************************
[+] input: addsTask() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); todoList.addTask(task1Name);  "<AssertPlaceHolder>"; assertEquals(task1Name, task1NameOf(todoList)); }
size() { return tasks.size(); }
[*] target: assertEquals(1, todoList.size())
[-] pred: org. junit. Assert. assertEquals ( 1, todoList. size() )
************************************
************************************
[+] input: testCreateMailLog() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String toMail = randomEmail(); MailAccountDO account = randomPojo(MailAccountDO.class); MailTemplateDO template = randomPojo(MailTemplateDO.class); String templateContent = randomString(); Map<String, Object> templateParams = randomTemplateParams(); Boolean isSend = true; // mock 方法  // 调用 Long logId = mailLogService.createMailLog(userId, userType, toMail, account, template, templateContent, templateParams, isSend); // 断言 MailLogDO log = mailLogMapper.selectById(logId); "<AssertPlaceHolder>"; assertEquals(MailSendStatusEnum.INIT.getStatus(), log.getSendStatus()); assertEquals(userId, log.getUserId()); assertEquals(userType, log.getUserType()); assertEquals(toMail, log.getToMail()); assertEquals(account.getId(), log.getAccountId()); assertEquals(account.getMail(), log.getFromMail()); assertEquals(template.getId(), log.getTemplateId()); assertEquals(template.getCode(), log.getTemplateCode()); assertEquals(template.getNickname(), log.getTemplateNickname()); assertEquals(template.getTitle(), log.getTemplateTitle()); assertEquals(templateContent, log.getTemplateContent()); assertEquals(templateParams, log.getTemplateParams()); }
createMailLog(Long userId, Integer userType, String toMail, MailAccountDO account, MailTemplateDO template, String templateContent, Map<String, Object> templateParams, Boolean isSend) { MailLogDO.MailLogDOBuilder logDOBuilder = MailLogDO.builder(); // 根据是否要发送，设置状态 logDOBuilder.sendStatus(Objects.equals(isSend, true) ? MailSendStatusEnum.INIT.getStatus() : MailSendStatusEnum.IGNORE.getStatus()) // 用户信息 .userId(userId).userType(userType).toMail(toMail) .accountId(account.getId()).fromMail(account.getMail()) // 模板相关字段 .templateId(template.getId()).templateCode(template.getCode()).templateNickname(template.getNickname()) .templateTitle(template.getTitle()).templateContent(templateContent).templateParams(templateParams);  // 插入数据库 MailLogDO logDO = logDOBuilder.build(); mailLogMapper.insert(logDO); return logDO.getId(); }
[*] target: assertNotNull(log)
[-] pred: org. junit. Assert. assertNotNull ( log )
************************************
************************************
[+] input: test() { NestedIterator testObject = new NestedIterator(null); assertFalse(testObject.hasNext()); "<AssertPlaceHolder>"; }
next() { // We can return an element only if it hasNext() returns true if (hasNext()) { return stack.pop().getInteger(); } return null; }
[*] target: assertNull(testObject.next())
[-] pred: org. junit. Assert. assertNull ( testObject. next() )
************************************
************************************
[+] input: IllegalAccessException { MockFields obj = new MockFields(); Field field = ReflectionUtils.getField(obj.getClass(), "name");  "<AssertPlaceHolder>"; assertEquals("Joe", field.get(obj)); }
getField(@Nonnull Class<?> c, @Nonnull String field) throws NoSuchFieldException { return c.getDeclaredField(field); }
[*] target: assertNotNull(field)
[-] pred: org. junit. Assert. assertNotNull ( field )
************************************
************************************
[+] input: Exception { Location location1 = locationRepository.save(Location.builder() .locationName("location1") .isUse(true) .sortSeq(1) .build()).block(); assertNotNull(location1);  webTestClient.put() .uri(API_URL+"/{locationId}", location1.getLocationId()) .contentType(MediaType.APPLICATION_JSON) .body(BodyInserters.fromValue(LocationUpdateRequestDto.builder() .locationName("updateLocation") .isUse(location1.getIsUse()) .sortSeq(location1.getSortSeq()) .build())) .exchange() .expectStatus().isNoContent();  Location updatedLocation = locationRepository.findById(location1.getLocationId()).block(); "<AssertPlaceHolder>"; assertEquals(updatedLocation.getLocationName(), "updateLocation"); }
findById(@PathVariable Long locationId) { return locationService.findById(locationId); }
[*] target: assertNotNull(updatedLocation)
[-] pred: org. junit. Assert. assertNotNull ( updatedLocation )
************************************
************************************
[+] input: canSetScreenName() { InMemorySpanExporter testExporter = InMemorySpanExporter.create(); SplunkRumBuilder splunkRumBuilder = new SplunkRumBuilder() .setRealm("us0") .setRumAccessToken("secret!") .setApplicationName("test") .disableAnrDetection();  when(application.getApplicationContext()).thenReturn(context); when(application.getMainLooper()).thenReturn(mainLooper);  RumInitializer testInitializer = new RumInitializer(splunkRumBuilder, application, new AppStartupTimer()) { @Override SpanExporter getCoreSpanExporter() { return testExporter; } };  SplunkRum splunkRum = testInitializer.initialize(mainLooper); splunkRum.experimentalSetScreenName("screen-1"); splunkRum.experimentalSetScreenName("screen-2");  // pause and resume splunkRum.experimentalSetScreenName(null); splunkRum.experimentalSetScreenName("screen-2", "Resumed");  // exit the view with explicit screen names // both last screen name and second last screen name have to be cleared, hence the doubled // call splunkRum.experimentalSetScreenName(null); splunkRum.experimentalSetScreenName(null);  splunkRum.flushSpans(); List<SpanData> spans = testExporter.getFinishedSpanItems(); "<AssertPlaceHolder>";  assertEquals("Created", spans.get(0).getName()); assertEquals("screen-1", spans.get(0).getAttributes().get(SCREEN_NAME_KEY)); assertNull(spans.get(0).getAttributes().get(LAST_SCREEN_NAME_KEY));  assertEquals("Created", spans.get(1).getName()); assertEquals("screen-2", spans.get(1).getAttributes().get(SCREEN_NAME_KEY)); assertEquals("screen-1", spans.get(1).getAttributes().get(LAST_SCREEN_NAME_KEY));  assertEquals("Resumed", spans.get(2).getName()); assertEquals("screen-2", spans.get(2).getAttributes().get(SCREEN_NAME_KEY)); assertNull(spans.get(2).getAttributes().get(LAST_SCREEN_NAME_KEY)); }
initialize(Looper mainLooper) { VisibleScreenTracker visibleScreenTracker = new VisibleScreenTracker();  initializationEvents.begin();  OtelRumConfig config = new OtelRumConfig(); GlobalAttributesSupplier globalAttributeSupplier = new GlobalAttributesSupplier(builder.globalAttributes); config.setGlobalAttributes(globalAttributeSupplier); if (!builder.isNetworkMonitorEnabled()) { config.disableNetworkChangeMonitoring(); }  config.disableScreenAttributes(); OpenTelemetryRumBuilder otelRumBuilder = OpenTelemetryRum.builder(application, config);  otelRumBuilder.mergeResource(createSplunkResource()); initializationEvents.emit("resourceInitialized");  CurrentNetworkProvider currentNetworkProvider = CurrentNetworkProvider.createAndStart(application); otelRumBuilder.setCurrentNetworkProvider(currentNetworkProvider); initializationEvents.emit("connectionUtilInitialized");  // TODO: How truly important is the order of these span processors? The location of event // generation should probably not be altered...  // Add batch span processor otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { SpanExporter zipkinExporter = buildFilteringExporter(currentNetworkProvider, visibleScreenTracker); initializationEvents.emit("exporterInitialized");  BatchSpanProcessor batchSpanProcessor = BatchSpanProcessor.builder(zipkinExporter).build(); initializationEvents.emit("batchSpanProcessorInitialized"); return tracerProviderBuilder.addSpanProcessor(batchSpanProcessor); });  // Inhibit the upstream exporter because we add our own BatchSpanProcessor otelRumBuilder.addSpanExporterCustomizer(x -> new NoOpSpanExporter());  // Set span limits otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> tracerProviderBuilder.setSpanLimits( SpanLimits.builder() .setMaxAttributeValueLength(MAX_ATTRIBUTE_LENGTH) .build()));  // Set up the sampler, if enabled // TODO: Make this better... // This holder is required because we cannot reasonably get the session id until after // OpenTelemetryRum has been created. So this is spackled into place below. AtomicReference<Supplier<String>> sessionSupplierHolder = new AtomicReference<>(() -> null); if (builder.sessionBasedSamplerEnabled) { otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { Sampler sampler = UInt32QuadXorTraceIdRatioSampler.create( builder.sessionBasedSamplerRatio, () -> { Supplier<String> supplier = sessionSupplierHolder.get(); return supplier == null ? null : supplier.get(); }); return tracerProviderBuilder.setSampler(sampler); }); }  // Wire up the logging exporter, if enabled. if (builder.isDebugEnabled()) { otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { tracerProviderBuilder.addSpanProcessor( SimpleSpanProcessor.create( builder.decorateWithSpanFilter( LoggingSpanExporter.create()))); initializationEvents.emit("debugSpanExporterInitialized"); return tracerProviderBuilder; }); }  // Add final event showing tracer provider init finished otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> { initializationEvents.emit("tracerProviderInitialized"); return tracerProviderBuilder; });  // install the log->span bridge LogToSpanBridge logBridge = new LogToSpanBridge(); otelRumBuilder.addLoggerProviderCustomizer( (loggerProviderBuilder, app) -> loggerProviderBuilder.addLogRecordProcessor(logBridge)); // make sure the TracerProvider gets set as the very first thing, before any other // instrumentations otelRumBuilder.addInstrumentation( instrumentedApplication -> logBridge.setTracerProvider( instrumentedApplication.getOpenTelemetrySdk().getTracerProvider()));  if (builder.isAnrDetectionEnabled()) { installAnrDetector(otelRumBuilder, mainLooper); } if (builder.isSlowRenderingDetectionEnabled()) { installSlowRenderingDetector(otelRumBuilder); } if (builder.isCrashReportingEnabled()) { installCrashReporter(otelRumBuilder); }  SettableScreenAttributesAppender screenAttributesAppender = new SettableScreenAttributesAppender(visibleScreenTracker); otelRumBuilder.addTracerProviderCustomizer( (tracerProviderBuilder, app) -> tracerProviderBuilder.addSpanProcessor(screenAttributesAppender));  // Lifecycle events instrumentation are always installed. installLifecycleInstrumentations(otelRumBuilder, visibleScreenTracker);  OpenTelemetryRum openTelemetryRum = otelRumBuilder.build();  sessionSupplierHolder.set(openTelemetryRum::getRumSessionId);  initializationEvents.recordInitializationSpans( builder.getConfigFlags(), openTelemetryRum.getOpenTelemetry().getTracer(RUM_TRACER_NAME));  return new SplunkRum(openTelemetryRum, globalAttributeSupplier, screenAttributesAppender); }
[*] target: assertEquals(3, spans.size())
[-] pred: org. junit. Assert. assertEquals ( 3, spans. size ( ) )
************************************
************************************
[+] input: testGetProcessName4() { List<String> names = NextflowScript .getProcesseNames("\n   process process1\n{some content }\n   process process2{some content }""); "<AssertPlaceHolder>"; assertEquals("process1", names.get(0)); assertEquals("process2", names.get(1)); }
public static List<String> getProcesseNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*process\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { names.add(m.group(1).trim()); }  return names; }  public List<String> getFunctions() { return functions; }  public static List<String> getFunctionNames(String content) {  List<String> names = new Vector<String>();  String patternFunctionName = "(?i)^\\s*def\\s*(.+)(\\s*\\(|\\()";  Pattern r = Pattern.compile(patternFunctionName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { names.add(m.group(1).trim()); }  return names; }  public List<String> getWorkflows() { return workflows; }  public static List<String> getWorkflowNames(String content) {  List<String> names = new Vector<String>();  String patternProcessName = "(?i)^\\s*workflow\\s*(.+)(\\s*\\{|\\{)";  Pattern r = Pattern.compile(patternProcessName, Pattern.MULTILINE);  Matcher m = r.matcher(content); while (m.find()) { if (!m.group(1).trim().isEmpty()) { names.add(m.group(1).trim()); } }  return names; }  public Set<String> getDependencies() { return dependencies; }  @Override public MetaFileType getType() { return MetaFileType.SOURCE_FILE; }  public static Set<String> getDependencies(File file, String content) {  Set<String> dependencies = new HashSet<String>();  String regex = "(?i)include\\s*\\{\\s*([A-Z_1-9]+(?:\\s+as\\s+[A-Z_]+)?)\\s*\\}\\s*from\\s*['"](.+?)['"]";  Pattern pattern = Pattern.compile(regex,  Pattern.MULTILINE); Matcher matcher = pattern.matcher(content); while (matcher.find()) { String dependency = matcher.group(2).trim(); if (dependency.startsWith("/") || dependency.startsWith("plugin/")) { continue; }  Path path = resolve(file, dependency); if (path.toFile().isDirectory()) { path = resolve(file, dependency + "/main.nf"); }  if (!path.toFile().exists()){ path = resolve(file, dependency + ".nf"); }  if (!path.toFile().exists()){ log.warn("Module " + file.getAbsolutePath() + ": Dependency '" + path.toAbsolutePath() + "' not found." ); continue; } dependencies.add(path.normalize().toFile().getAbsolutePath()); }  return dependencies;  }  @Override public TargetType getTarget() { return TargetType.UNDEFINED; }  protected static Path resolve(File file, String dependency) { if (dependency.startsWith("./") || dependency.startsWith("../")) { return Paths.get(file.getParentFile().getAbsolutePath()).resolve(dependency); } else { return Paths.get(dependency); } }  public static boolean accepts(Path path) { return path.getFileName().toString().endsWith(".nf"); }  }
[*] target: assertEquals(2, names.size())
[-] pred: org. junit. Assert. assertEquals ( 2, names. size ( ) )
************************************
************************************
[+] input: testUpdateStartedTime() { StepEntity step1 = StepEntity.builder() .uuid("test_uuid22") .name("test_step22") .jobId(3L) .lastStepId(5L) .status(StepStatus.RUNNING) .concurrency(3) .taskNum(10) .build();  stepMapper.save(step1); long now = System.currentTimeMillis() / 1000 * 1000; stepMapper.updateStartedTime(step1.getId(), new Date(now));  List<StepEntity> list = stepMapper.findByJobId(3L); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(now, list.get(0).getStartedTime().getTime()); }
findByJobId(@Param("jobId") Long jobId);  @Select("select id, step_uuid as uuid, step_name as name, job_id, last_step_id, step_status as status," + " finished_time, started_time, created_time, modified_time, concurrency, task_num, pool_info," + " origin_json from step" + " where id = #{id}
[*] target: assertEquals(1, list.size())
[-] pred: org. junit. Assert. assertEquals ( 1, list. size ( ) )
************************************
************************************
[+] input: repeatUnderLimit() { int limit = 55; ImapCommandThrottle throttle = new ImapCommandThrottle(limit);  for (int i = 0; i < limit; i++) { MockImapCommand command = new MockImapCommand("p1", "p3", 123); assertFalse(throttle.isCommandThrottled(command)); } MockImapCommand command = new MockImapCommand("p2", "p3", 1234); assertFalse(throttle.isCommandThrottled(command)); command = new MockImapCommand("p1", "p3", 123); "<AssertPlaceHolder>"; }
isCommandThrottled(ImapCommand command) { if (repeatLimit <= 0) { return false; } else if (command.throttle(lastCommand)) { // commands can implement their own throttle mechanism ZimbraLog.imap.debug("throttled by command"); return true; } else if (isCommandRepeated(command)) { repeats++; lastCommand = command; if (repeats > repeatLimit) { ZimbraLog.imap.debug("throttled by repeat"); return true; } else { return false; } } else { repeats = 1; lastCommand = command; return false; } }
[*] target: assertFalse(throttle.isCommandThrottled(command))
[-] pred: org. junit. Assert. assertFalse ( throttle. isCommandThrottled ( command ) )
************************************
************************************
[+] input: URISyntaxException { var target = new RestClientParser(); var req = new Request(); req.setRequestText( "POST https://www.google.com/test?a=1&b=%202\n" + "Content-Type:text/plain\n" + "\n" + "This is a multiline\n" + "Text\n"); var result = target.parse(req.getRequestText()); "<AssertPlaceHolder>"; assertEquals(2, result.getQuery().size()); assertEquals(1, result.getHeaders().size()); var header = result.getHeader(ConstantsHeader.CONTENT_TYPE); assertEquals("text/plain", header); }
parse(String requestText) throws URISyntaxException { var call = new Request(); var lines = requestText.trim().split("\\r?\\n"); var requestLine = lines[0]; addRequest(call, requestLine); var body = new StringBuffer(); var headersCompleted = false; for (var i = 1; i < lines.length; i++) { var current = lines[i];  if (headersCompleted) { body.append(current); body.append("\n"); } else { var trimmed = current.trim(); if (trimmed.length() == 0) { headersCompleted = true; continue; } addHeader(call, current); } } call.setRequestText(body.toString()); call.setBinaryRequest(false); return call; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: shouldBuildCandidateUsers() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.candidateUsers(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'candidateUsers' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
candidateUsers(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "candidate-users", ContextBuilder.builder() .context( supportedAttributeExpression( "candidateUsers", "userTask", juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: searchStepByName() { var steps = catalogCollection.searchByName(CONNECTOR_2); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(3, steps.size()); Assertions.assertTrue(steps.stream().allMatch( step -> CONNECTOR_2.equalsIgnoreCase(step.getName()))); }
searchByName(final String connectionName) { if (connectionName == null) { return Collections.emptyList(); } Collection<T> steps = new ArrayList<>(); for (MetadataCatalog<T> c : catalogs) { steps.addAll(c.searchByName(connectionName)); } return steps; }
[*] target: assertNotNull(steps)
[-] pred: org. junit. Assert. assertNotNull ( steps )
************************************
************************************
[+] input: InvocationTargetException { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID); LabelConfiguration testLabelConfiguration = LabelConfigurationUtils.createTestLabelConfiguration(testProject);  List<LcEntry> testLcEntryLineList = LcEntryUtils.createTestLcEntryGeometryList(3, LcEntryType.LINE, testLabelConfiguration);  //When when(labelConfigRepositoryMock.findById(anyString())) .thenReturn(java.util.Optional.of(testLabelConfiguration));  when(lcEntryRepositoryMock.findAllByParentEntryIsNullAndConfigurationId(anyString())) .thenReturn(testLcEntryLineList);  LcConfigDeleteViewModel lcConfigDeleteViewModel = labelConfigService.clearConfig(LC_CONFIG_ID);  System.out.println();  //Then "<AssertPlaceHolder>"; assertEquals(LC_CONFIG_ID, lcConfigDeleteViewModel.getConfigId());  ArgumentCaptor<String> idCapture = ArgumentCaptor.forClass(String.class); verify(lcEntryRepositoryMock, times(1)).deleteLcEntriesByConfigurationId(idCapture.capture()); assertThat(idCapture.getValue()).isEqualTo(LC_CONFIG_ID); verifyNoMoreInteractions(lcEntryRepositoryMock); }
clearConfig(String configId) { //Permissions check DataGymSecurity.isAuthenticatedAndHasAnyScope(OAUTH_SCOPE_TYPE, TOKEN_SCOPE_TYPE);  LabelConfiguration labelConfiguration = findConfigById(configId);  //Permissions check String projectOrganisation = labelConfiguration.getProject().getOwner(); DataGymSecurity.isAdminOrUser(projectOrganisation, false);  // Delete all LcEntries for the current Configuration lcEntryRepository.deleteLcEntriesByConfigurationId(configId);  // Change TaskState after clearing the LabelConfiguration userTaskService.changeTaskStateAfterLabelConfigurationUpdate(configId);  LcConfigDeleteViewModel lcConfigDeleteViewModel = new LcConfigDeleteViewModel(); lcConfigDeleteViewModel.setConfigId(configId);  return lcConfigDeleteViewModel; }
[*] target: assertNotNull(lcConfigDeleteViewModel)
[-] pred: org. junit. Assert. assertNotNull ( lcConfigDeleteViewModel )
************************************
************************************
[+] input: shouldBuildResourceOnConditionalFlow() { String resource = random(); Message message = resourceOnConditionalFlow(resource); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Please translate the content from '%s' to a valid FEEL expression.", resource); }
resourceOnConditionalFlow(String resource) { return INSTANCE.composeMessage( "resource-on-conditional-flow", ContextBuilder.builder().entry("resource", resource).build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildOutAllNotRecommendedHint() { Message message = MessageFactory.outAllHint(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
outAllHint() { return INSTANCE.staticMessage("out-all-hint"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: Exception { PulsarTopic topic = new PulsarTopic("test"); assertNull(topic.extractSubscriptionName());  topic = new PulsarTopic("test:sub"); assertNull(topic.extractSubscriptionName()); "<AssertPlaceHolder>"; }
extractSubscriptionName() throws InvalidDestinationException { return null; }
[*] target: assertNull(topic.extractSubscriptionName())
[-] pred: org. junit. Assert. assertNull ( topic. extractSubscriptionName ( ) )
************************************
************************************
[+] input: fromOptionValue_users_test() { DatasetTypeOptions datasetTypeOptions = DatasetTypeOptions.fromOptionValue("users"); "<AssertPlaceHolder>"; assertThat(datasetTypeOptions.toString(), equalTo("USERS")); }
fromOptionValue(final String option) { return OPTIONS_MAP.get(option); }
[*] target: assertNotNull(datasetTypeOptions)
[-] pred: org. junit. Assert. assertNotNull ( datasetTypeOptions )
************************************
************************************
[+] input: getDashboardData_whenIdIsValidAndUserIsAuthorized_getDashboardData() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Project testProject = ProjectUtils.createTestProject(PROJECT_ID); LimitPricingPlanViewModel tesLimitPricingPlanViewModel = LimitsUtils.createTesLimitPricingPlanViewModel();  //When when(projectRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testProject));  when(limitServiceMock.getLimitsByOrgId(anyString())).thenReturn(tesLimitPricingPlanViewModel);  when(labelTaskRepositoryMock.countProjectTasksWhereMediasNotDeleted(anyString())).thenReturn(0); when(labelTaskRepositoryMock.countProjectTasksByStateWhereMediasNotDeleted(anyString(), any())).thenReturn(0L); when(labelTaskRepositoryMock.countProjectTasksByMediaTypeWhereMediasNotDeleted(anyString(), any())).thenReturn(0L);  ProjectDashboardViewModel dashboardData = projectService.getDashboardData(PROJECT_ID);  //Then "<AssertPlaceHolder>"; assertEquals(testProject.getId(), dashboardData.getId()); assertEquals(testProject.getName(), dashboardData.getName()); assertEquals(testProject.getDescription(), dashboardData.getDescription()); assertEquals(testProject.getShortDescription(), dashboardData.getShortDescription()); assertEquals(testProject.isPinned(), dashboardData.isPinned()); assertEquals(testProject.getOwner(), dashboardData.getOwner()); assertEquals("FREE_DEVELOPER", dashboardData.getCurrentPlan()); assertEquals(0, dashboardData.getCountTasks()); assertEquals(0, dashboardData.getCountDatasets()); assertEquals(0, dashboardData.getApprovedReviewPerformance()); assertEquals(0, dashboardData.getDeclinedReviewPerformance()); assertEquals(LabelTaskState.values().length, dashboardData.getTaskStatus().size()); assertEquals(MediaSourceType.values().length, dashboardData.getTaskMediaDetail().size());  verify(projectRepositoryMock).findById(anyString()); verify(projectRepositoryMock, times(1)).findById(anyString()); verifyNoMoreInteractions(projectRepositoryMock); }
getDashboardData(String projectId) { //Permissions check DataGymSecurity.isAuthenticatedAndHasAnyScope(OAUTH_SCOPE_TYPE, SUPER_ADMIN_SCOPE_TYPE);  Project projectById = getProjectById(projectId);  //Permissions check String owner = projectById.getOwner(); DataGymSecurity.isAdmin(owner, true);  // Create new ProjectDashboardViewModel and add all Properties form the current Project ProjectDashboardViewModel projectDashboardViewModel = ProjectMapper .mapToProjectDashboardViewModel(projectById, mediaRepository::countAllByDatasetsContainingAndDeletedFalse);  // Get the remaining Properties for the ProjectDashboardViewModel  // Don't count tasks with deleted images. int countTasks = labelTaskRepository.countProjectTasksWhereMediasNotDeleted(projectId);  int countDatasets = projectById.getDatasets().size(); boolean hasLabelConfiguration = !projectById.getLabelConfiguration().getEntries().isEmpty();  // Get the LabelRatings for the Project List<LabelerRating> labelerRatings = labelerRatingRepository.findLabelerRatingsByProjectIdAndMediaDeleted( projectId, false); long approvedReviewPerformance = labelerRatings.stream().mapToLong(LabelerRating::getPositive).sum(); long declinedReviewPerformance = labelerRatings.stream().mapToLong(LabelerRating::getNegative).sum();  Map<LabelTaskState, Long> taskStatusMap = new EnumMap<>(LabelTaskState.class); Arrays.stream(LabelTaskState.values()) .forEach(state -> taskStatusMap.put(state, labelTaskRepository.countProjectTasksByStateWhereMediasNotDeleted( projectId, state)));  Map<MediaSourceType, Long> taskMediaDetailMap = new EnumMap<>(MediaSourceType.class); Arrays.stream(MediaSourceType.values()) .forEach(mediaSourceType -> taskMediaDetailMap.put(mediaSourceType, labelTaskRepository.countProjectTasksByMediaTypeWhereMediasNotDeleted( projectId, mediaSourceType)));  List<DatasetMediaStatusViewModel> datasetMediaStatusViewModels = getDatasetImageStatusViewModels(projectById); long projectTotalInvalidImages = datasetMediaStatusViewModels .stream() .mapToLong(DatasetMediaStatusViewModel::getInvalidMediaCount) .sum();  // Get Pricing Plan Type for the current Organisation LimitPricingPlanViewModel limitsByOrgId = limitService.getLimitsByOrgId(owner); String pricingPlanType = limitsByOrgId.getPricingPlanType();  // Set all properties projectDashboardViewModel.setCountTasks(countTasks); projectDashboardViewModel.setCountDatasets(countDatasets); projectDashboardViewModel.setHasLabelConfiguration(hasLabelConfiguration); projectDashboardViewModel.setApprovedReviewPerformance(approvedReviewPerformance); projectDashboardViewModel.setDeclinedReviewPerformance(declinedReviewPerformance); projectDashboardViewModel.setTaskStatus(taskStatusMap); projectDashboardViewModel.setTaskMediaDetail(taskMediaDetailMap); projectDashboardViewModel.setCurrentPlan(pricingPlanType); projectDashboardViewModel.setDatasetMediaStatuses(datasetMediaStatusViewModels); projectDashboardViewModel.setCountInvalidImages(projectTotalInvalidImages);  return projectDashboardViewModel; }
[*] target: assertNotNull(dashboardData)
[-] pred: org. junit. Assert. assertNotNull ( dashboardData )
************************************
************************************
[+] input: shouldProperlyMapListDtosToListModels() { //given LectureDTO dto = new LectureDTO(); dto.setId(12L); dto.setName("I'm BATMAN!");  List<LectureDTO> dtos = Collections.singletonList(dto);  //when List<LectureModel> models = lectureListMapper.toModelList(dtos);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, models.size()); Assertions.assertEquals(dto.getId(), models.get(0).getId()); Assertions.assertEquals(dto.getName(), models.get(0).getName()); }
toModelList(List<LectureDTO> dtos);
[*] target: assertNotNull(models)
[-] pred: org. junit. Assert. assertNotNull ( models )
************************************
************************************
[+] input: scanNamedDefinitionParser() { CosIdAccessorRegistry registry = new DefaultAccessorRegistry(new DefaultAccessorParser(AnnotationDefinitionParser.INSTANCE)); DefaultCosIdScanner scanner = new DefaultCosIdScanner(new String[] {"me.ahoo.cosid.accessor.scanner.entity"}, new NamedDefinitionParser("id"), registry); scanner.scan();  CosIdAccessor cosIdAccessor = registry.get(OrderEntity.class); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(OrderEntity.class, cosIdAccessor.getIdDeclaringClass());  cosIdAccessor = registry.get(OrderItemEntity.class); Assertions.assertNotNull(cosIdAccessor); Assertions.assertNotEquals(CosIdAccessor.NOT_FOUND, cosIdAccessor); Assertions.assertEquals(OrderItemEntity.class, cosIdAccessor.getIdDeclaringClass());  }
scan() { if (log.isInfoEnabled()) { log.info("Scan basePackages:{}.", Arrays.toString(basePackages)); } try { ClassLoader classLoader = getClass().getClassLoader(); ClassPath classPath = ClassPath.from(classLoader); for (String basePackage : basePackages) {  ImmutableSet<ClassPath.ClassInfo> classInfos = classPath.getTopLevelClassesRecursive(basePackage); for (ClassPath.ClassInfo classInfo : classInfos) { Class<?> clazz = classLoader.loadClass(classInfo.getName()); if (clazz.isInterface()) { continue; } CosIdAccessor cosIdAccessor = cosIdAccessorParser.parse(clazz); cosIdAccessorRegistry.register(clazz, cosIdAccessor); } } } catch (IOException | ClassNotFoundException e) { throw new CosIdException(e.getMessage(), e); } }
[*] target: assertNotNull(cosIdAccessor)
[-] pred: org. junit. Assert. assertNotNull ( cosIdAccessor )
************************************
************************************
[+] input: shouldBuildScript() { Message message = MessageFactory.script(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
script() { return INSTANCE.staticMessage("script"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testListLatestNonManagedEntitiesShouldReturnOnlyTheNotManagedEntitiesWhenMultipleVersionsWerePut() { //given putAllMocks(); when(key1Version3Mock.isManaged()).thenReturn(true);  //when final List<ReadOnlyKeyVaultKeyEntity> actual = underTest.listLatestNonManagedEntities();  //then Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(2, actual.size()); Assertions.assertSame(key2Version2Mock, actual.get(0)); Assertions.assertSame(key3Version2Mock, actual.get(1)); }
listLatestNonManagedEntities() { return streamAllLatestEntities() .filter(entity -> !entity.isManaged()) .collect(Collectors.toList()); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: IOException { Path path = new Path(HDFS_URI, "createStreamFirstTest"); try (HdfsFileWriter writer = new HdfsFileWriter(path, conf)) { assertTrue(fs.isFile(path)); "<AssertPlaceHolder>"; } }
nextOffset() { return nextOffset; }
[*] target: assertEquals(0, writer.nextOffset())
[-] pred: org. junit. Assert. assertEquals ( 0, writer. nextOffset() )
************************************
************************************
[+] input: SQLException { final Connection mockConn = Mockito.mock(Connection.class); stubTopologyQueryMultiWriter(mockConn);  final HostInfo clusterHostInfo = new HostInfo(clusterInstanceHostPattern, null, defaultPort, false);  spyProvider.setClusterInstanceTemplate(clusterHostInfo);  final List<HostInfo> topology = spyProvider.getTopology(mockConn, false); "<AssertPlaceHolder>"; final List<HostInfo> readers = topology.subList(AuroraTopologyService.WRITER_CONNECTION_INDEX + 1, topology.size());  assertEquals(3, topology.size()); assertEquals(2, readers.size());  final HostInfo master1 = topology.get(AuroraTopologyService.WRITER_CONNECTION_INDEX); final HostInfo master2 = topology.get(2); final HostInfo reader = topology.get(1);  assertEquals("writer-instance-1.XYZ.us-east-2.rds.amazonaws.com", master1.getHost()); assertEquals(defaultPort, master1.getPort()); assertEquals("writer-instance-1", master1.getInstanceIdentifier()); assertTrue(master1.isWriter());  assertEquals("writer-instance-2.XYZ.us-east-2.rds.amazonaws.com", master2.getHost()); assertEquals(defaultPort, master2.getPort()); assertEquals("writer-instance-2", master2.getInstanceIdentifier()); // A second writer indicates the topology is in a failover state, and the second writer is // the obsolete one. It will be come a reader shortly, so we mark it as such assertFalse(master2.isWriter());  assertEquals("reader-instance.XYZ.us-east-2.rds.amazonaws.com", reader.getHost()); assertEquals(defaultPort, reader.getPort()); assertEquals("reader-instance", reader.getInstanceIdentifier()); assertFalse(reader.isWriter()); }
getTopology(Connection conn, boolean forceUpdate) { ClusterTopologyInfo clusterTopologyInfo = topologyCache.get(this.clusterId);  if (clusterTopologyInfo == null || clusterTopologyInfo.hosts.isEmpty() || forceUpdate || refreshNeeded(clusterTopologyInfo)) {  ClusterTopologyInfo latestTopologyInfo = queryForTopology(conn);  if (!latestTopologyInfo.hosts.isEmpty()) { clusterTopologyInfo = updateCache(clusterTopologyInfo, latestTopologyInfo); } else { return (clusterTopologyInfo == null || forceUpdate) ? new ArrayList<>() : clusterTopologyInfo.hosts; } }  return clusterTopologyInfo.hosts; }
[*] target: assertNotNull(topology)
[-] pred: org. junit. Assert. assertNotNull ( topology )
************************************
************************************
[+] input: whenUpdateThenReturnSuccess() { when(service.update(userDTO)).thenReturn(user); when(mapper.map(any(), any())).thenReturn(userDTO);  ResponseEntity<UserDTO> response = resource.update(ID, userDTO);  "<AssertPlaceHolder>"; assertNotNull(response.getBody()); assertEquals(HttpStatus.OK, response.getStatusCode()); assertEquals(ResponseEntity.class, response.getClass()); assertEquals(UserDTO.class, response.getBody().getClass());  assertEquals(ID, response.getBody().getId()); assertEquals(NAME, response.getBody().getName()); assertEquals(EMAIL, response.getBody().getEmail()); }
update(@PathVariable Integer id, @RequestBody UserDTO obj) { obj.setId(id); return ResponseEntity.ok().body(mapper.map(service.update(obj), UserDTO.class)); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: get_should_create_a_server() { when(peerForwarderConfiguration.getMaxConnectionCount()).thenReturn(500); final Server server = createObjectUnderTest().get();  Assertions."<AssertPlaceHolder>"; assertThat(server, instanceOf(Server.class)); }
get() { final ServerBuilder sb = Server.builder();  sb.disableServerHeader();  if (peerForwarderConfiguration.isSsl()) { final CertificateProvider certificateProvider = certificateProviderFactory.getCertificateProvider(); final Certificate certificate = certificateProvider.getCertificate(); LOG.info("Creating http source with SSL/TLS enabled."); // TODO: enable encrypted key with password sb.https(peerForwarderConfiguration.getServerPort()) .tls( new ByteArrayInputStream(certificate.getCertificate().getBytes(StandardCharsets.UTF_8)), new ByteArrayInputStream(certificate.getPrivateKey().getBytes(StandardCharsets.UTF_8) ) );  if (peerForwarderConfiguration.getAuthentication() == ForwardingAuthentication.MUTUAL_TLS) { if (peerForwarderConfiguration.isSslFingerprintVerificationOnly()) { final FingerprintTrustManagerFactory fingerprintTrustManagerFactory = new FingerprintTrustManagerFactory(certificate.getFingerprint()); sb.tlsCustomizer(sslContextBuilder -> sslContextBuilder.trustManager(fingerprintTrustManagerFactory) .clientAuth(ClientAuth.REQUIRE)); } else { sb.tlsCustomizer(sslContextBuilder -> sslContextBuilder.trustManager( new ByteArrayInputStream(certificate.getCertificate().getBytes(StandardCharsets.UTF_8)) ) .clientAuth(ClientAuth.REQUIRE)); } } } else { LOG.warn("Creating Peer Forwarder server without SSL/TLS. This is not secure."); sb.http(peerForwarderConfiguration.getServerPort()); }   sb.maxNumConnections(peerForwarderConfiguration.getMaxConnectionCount()); sb.requestTimeout(Duration.ofMillis(peerForwarderConfiguration.getRequestTimeout())); final int threadCount = peerForwarderConfiguration.getServerThreadCount(); final ScheduledThreadPoolExecutor blockingTaskExecutor = new ScheduledThreadPoolExecutor(threadCount); sb.blockingTaskExecutor(blockingTaskExecutor, true); // TODO: Add throttling service  sb.annotatedService(PeerForwarderConfiguration.DEFAULT_PEER_FORWARDING_URI, peerForwarderHttpService);  return sb.build(); }
[*] target: assertNotNull(server)
[-] pred: org. junit. Assert. assertNotNull ( server )
************************************
************************************
[+] input: testCacheCleanup() { var cache = Cache.<String, String>builder(key -> key + "-test") .expireAfterAccess(Duration.ofSeconds(1)) .build(); cache.require("foo"); // this won't do anything since expire time is 1 second cache.cleanup(); cache.require("bar"); // this won't do anything since expire time is 1 second cache.cleanup(); // this won't do anything since expire time is 1 second cache.cleanup();  Utils.sleep(Duration.ofSeconds(1)); Assertions.assertEquals(2, cache.size()); // after 1 second, every element in cache has expired cache.cleanup(); Assertions."<AssertPlaceHolder>"; }
size() { return map.size(); }
[*] target: assertEquals(0, cache.size())
[-] pred: org. junit. Assert. assertEquals ( 0, cache. size() )
************************************
************************************
[+] input: getDataset_whenIdIsValid_getDataset() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  // Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID);  //When when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); DatasetViewModel dataset = datasetService.getDataset(DATASET_ID, false);  //Then "<AssertPlaceHolder>"; assertEquals(testDataset.getId(), dataset.getId()); assertEquals(testDataset.getName(), dataset.getName()); assertEquals(testDataset.getShortDescription(), dataset.getShortDescription()); assertEquals(testDataset.isDeleted(), dataset.isDeleted()); assertNull(dataset.getDeleteTime()); assertEquals(0, dataset.getProjectCount());  verify(datasetRepositoryMock).findById(anyString()); verify(datasetRepositoryMock, times(1)).findById(anyString()); verifyNoMoreInteractions(datasetRepositoryMock); }
getDataset(String id, boolean includeMedia) { Dataset datasetById = getDatasetById(id);  //Permissions check String owner = datasetById.getOwner(); DataGymSecurity.isAdminOrUser(owner, true);  if (!datasetById.isDeleted()) { DatasetViewModel datasetViewModel = DatasetMapper.mapToDatasetViewModel(datasetById, includeMedia);  // Deactivate pricing limits for the Unit-Tests if (!deactivateLimiter) { //Check if Organisation-PricingPlan allows upload of Public Urls String pricingPlanType = limitService.getLimitsByOrgId(owner).getPricingPlanType();  datasetViewModel.setAllowPublicUrls(true);  if (DataGymPlan.FREE_DEVELOPER.name().equals(pricingPlanType)) { datasetViewModel.setAllowPublicUrls(false); } }   return datasetViewModel; }  throw new NotFoundException(DATASET_PLACEHOLDER, "id", "" + id); }
[*] target: assertNotNull(dataset)
[-] pred: org. junit. Assert. assertNotNull ( dataset )
************************************
************************************
[+] input: shouldBuildScriptFormatMissing() { Message message = MessageFactory.scriptFormatMissing(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
scriptFormatMissing() { return INSTANCE.staticMessage("script-format-missing"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testConstructorCause() { String message = "This is the message"; Throwable cause = new RuntimeException(); String body = "This is the body"; int code = 403;  HttpResponseException exception = new HttpResponseException(message, cause, body, code);  assertEquals(message, exception.getMessage()); assertSame(cause, exception.getCause()); assertEquals(body, exception.getBody()); "<AssertPlaceHolder>"; }
getCode() { return code; }
[*] target: assertEquals(code, exception.getCode())
[-] pred: org. junit. Assert. assertEquals ( code, exception. getCode() )
************************************
************************************
[+] input: deleteDatasetById_whenDatasetIdIsValidAndDeleteDatasetFalseAndDatasetNameIsNotUnique_setDeletedToFalseAndAddUUIDToName() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); String testDatasetName = testDataset.getName(); testDataset.setDeleted(true);  List<Dataset> testListDatasets = DatasetUtils.createTestListDatasets(2);  //when when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg()); when(datasetRepositoryMock.findAllByName(anyString())).thenReturn(testListDatasets);  DatasetViewModel actual = datasetService.deleteDatasetById(DATASET_ID, false);  //Then "<AssertPlaceHolder>";  assertFalse(actual.isDeleted()); assertEquals(testDataset.isDeleted(), actual.isDeleted()); assertNull(testDataset.getDeleteTime()); assertEquals(testDatasetName.length() + 37, actual.getName().length());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
deleteDatasetById(String id, boolean deleteDataset) { Dataset datasetById = getDatasetById(id);  //Permissions check String owner = datasetById.getOwner(); DataGymSecurity.isAdmin(owner, false);  // Sets isDeleted to the value of "deleteDataset" datasetById.setDeleted(deleteDataset); Long currentTime = null;  if (deleteDataset) { currentTime = System.currentTimeMillis(); } else { String datasetName = datasetById.getName(); List<Dataset> datasetList = datasetRepository.findAllByName(datasetName);  if (datasetList.size() > 1) { String uuid = UUID.randomUUID().toString(); if (datasetName.length() > 90) { datasetName = datasetName.substring(0, 89) + "_" + uuid; } else { datasetName = datasetName + "_" + uuid; }  datasetById.setName(datasetName); } }  datasetById.setDeleteTime(currentTime);  // Sets isDeleted on all media in the dataset to the value of "deleteDataset" Long finalCurrentTime = currentTime; datasetById.getMedia().forEach(media -> { media.setDeleted(deleteDataset); media.setDeleteTime(finalCurrentTime); });  Dataset deletedDataset = datasetRepository.saveAndFlush(datasetById); return DatasetMapper.mapToDatasetViewModel(deletedDataset, false); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: checkForPreApproval_clientAutoApprove() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); List<String> requestedScopes = Lists.newArrayList("read"); // mock 方法 when(oauth2ClientService.validOAuthClientFromCache(eq(clientId))) .thenReturn(randomPojo(OAuth2ClientDO.class).setAutoApproveScopes(requestedScopes));  // 调用 boolean success = oauth2ApproveService.checkForPreApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(1, result.size()); assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("read", result.get(0).getScope()); assertTrue(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); }
checkForPreApproval(Long userId, Integer userType, String clientId, Collection<String> requestedScopes) { // 第一步，基于 Client 的自动授权计算，如果 scopes 都在自动授权中，则返回 true 通过 OAuth2ClientDO clientDO = oauth2ClientService.validOAuthClientFromCache(clientId); Assert.notNull(clientDO, "客户端不能为空"); // 防御性编程 if (CollUtil.containsAll(clientDO.getAutoApproveScopes(), requestedScopes)) { // gh-877 - if all scopes are auto approved, approvals still need to be added to the approval store. LocalDateTime expireTime = LocalDateTime.now().plusSeconds(TIMEOUT); for (String scope : requestedScopes) { saveApprove(userId, userType, clientId, scope, true, expireTime); } return true; }  // 第二步，算上用户已经批准的授权。如果 scopes 都包含，则返回 true List<OAuth2ApproveDO> approveDOs = getApproveList(userId, userType, clientId); Set<String> scopes = convertSet(approveDOs, OAuth2ApproveDO::getScope, OAuth2ApproveDO::getApproved); // 只保留未过期的 + 同意的 return CollUtil.containsAll(scopes, requestedScopes); }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
************************************
[+] input: 한건조회_성공() { ReserveItem saved = reserveItemRepository.save(reserveItem).block(); "<AssertPlaceHolder>";  ReserveItemResponseDto responseBody = webTestClient.get() .uri(API_URL+"/{reserveItemId}", saved.getReserveItemId()) .exchange() .expectStatus().isOk() .expectBody(ReserveItemResponseDto.class) .returnResult().getResponseBody();  assertThat(responseBody.getCategoryId()).isEqualTo(category.getCodeId()); assertThat(responseBody.getReserveItemName()).isEqualTo(saved.getReserveItemName());  }
save(@Valid @RequestBody ReserveItemSaveRequestDto saveRequestDto) { return reserveItemService.save(saveRequestDto); }
[*] target: assertNotNull(saved)
[-] pred: org. junit. Assert. assertNotNull ( saved )
************************************
************************************
[+] input: emptyCycleTest() { Cycle<Integer> cycle = new Cycle<>(); Assertions.assertEquals(0, cycle.size()); Assertions."<AssertPlaceHolder>"; Assertions.assertThrows(NoSuchElementException.class, cycle::next); }
hasNext() { return this.iterator.hasNext(); }
[*] target: assertFalse(cycle.hasNext())
[-] pred: org. junit. Assert. assertFalse ( cycle. hasNext() )
************************************
************************************
[+] input: shouldBuildConditionExpression() { Message message = MessageFactory.conditionExpression(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
conditionExpression(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "condition-expression", ContextBuilder.builder() .context(expressionTransformationResult(juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: itShouldBuildAModernChatRequestWithLastSeen() { KoLConstants.RNG.setSeed(42);  creq = new ChatRequest(0L, true, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?aa=0.7275636800328681&j=1&lasttime=0"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); assertTrue(creq.retryOnTimeout()); creq = new ChatRequest(8675309L, true, false); fullURL = creq.getFullURLString(); expect = "newchatmessages.php?aa=0.6832234717598454&j=1&lasttime=8675309"; assertEquals(fullURL, expect); assertEquals(creq.getGraf(), ""); "<AssertPlaceHolder>"; }
retryOnTimeout() { return true; }
[*] target: assertTrue(creq.retryOnTimeout())
[-] pred: org. junit. Assert. assertTrue ( creq. retryOnTimeout() )
************************************
************************************
[+] input: JsonProcessingException { //given final URI baseUri = URI.create(HTTPS_LOCALHOST); final RecoveryLevel recoveryLevel = RecoveryLevel.RECOVERABLE; final Integer recoverableDays = RECOVERABLE_DAYS; final VaultModel result = new VaultModel(); final HttpResponse response = mock(HttpResponse.class); when(httpClient.send(httpRequestArgumentCaptor.capture())).thenReturn(Mono.just(response)); when(response.getBodyAsString(eq(StandardCharsets.UTF_8))).thenReturn(Mono.just(JSON)); when(response.getStatusCode()).thenReturn(HttpStatus.SC_OK); when(objectReader.forType(eq(VaultModel.class))).thenReturn(objectReader); when(objectReader.readValue(eq(JSON))).thenReturn(result); final VaultModel expectedRequestVault = new VaultModel(baseUri, null, recoveryLevel, recoverableDays, null, null); when(objectWriter.writeValueAsString(eq(expectedRequestVault))).thenReturn(JSON);  //when final VaultModel actual = underTest.createVault(baseUri, recoveryLevel, recoverableDays);  //then Assertions."<AssertPlaceHolder>"; verify(httpClient, atMostOnce()).send(any()); final HttpRequest request = httpRequestArgumentCaptor.getValue(); Assertions.assertEquals("/management/vault", request.getUrl().getPath()); Assertions.assertEquals(HttpMethod.POST, request.getHttpMethod()); Assertions.assertEquals(APPLICATION_JSON, request.getHeaders().getValue(HttpHeaderName.CONTENT_TYPE)); final String actualBody = new String(Objects.requireNonNull(request.getBody().single().block()).array()); Assertions.assertEquals(JSON, actualBody); verify(response).getStatusCode(); verify(response).getBodyAsString(eq(StandardCharsets.UTF_8)); verify(objectReader).forType(eq(VaultModel.class)); verify(objectReader).readValue(anyString()); verify(objectWriter).writeValueAsString(eq(expectedRequestVault)); }
createVault(@NonNull final URI baseUri, @NonNull final RecoveryLevel recoveryLevel, @Nullable final Integer recoverableDays) { final String body = vaultModelAsString(baseUri, recoveryLevel, recoverableDays); final URI uri = UriUtil.uriBuilderForPath(vaultUrl, MANAGEMENT_VAULT_PATH); final HttpRequest request = new HttpRequest(HttpMethod.POST, uri.toString()) .setBody(body) .setHeader(HttpHeaderName.CONTENT_TYPE, APPLICATION_JSON); return sendAndProcess(request, r -> r.getResponseObject(VaultModel.class)); }
[*] target: assertEquals(result, actual)
[-] pred: org. junit. Assert. assertEquals ( result, actual )
************************************
************************************
[+] input: testAvailableChannel() { provider.add(mockChannelType, null, mockFactory); List<ChannelType> availableChannels = provider.availableChannel(); "<AssertPlaceHolder>"; assertFalse(availableChannels.isEmpty()); assertTrue(availableChannels.contains(mockChannelType)); }
availableChannel() { Set<ChannelType> channels = new HashSet<>(); channels.addAll(factoryMap.keySet()); channels.addAll(settingsMap.keySet()); return channels.stream().sorted().toList(); }
[*] target: assertNotNull(availableChannels)
[-] pred: org. junit. Assert. assertNotNull ( availableChannels )
************************************
************************************
[+] input: testUpdateAfterApproval_approved() { // 准备参数 Long userId = randomLongId(); Integer userType = randomEle(UserTypeEnum.values()).getValue(); String clientId = randomString(); Map<String, Boolean> requestedScopes = new LinkedHashMap<>(); // 有序，方便判断 requestedScopes.put("read", true); requestedScopes.put("write", false); // mock 方法  // 调用 boolean success = oauth2ApproveService.updateAfterApproval(userId, userType, clientId, requestedScopes); // 断言 "<AssertPlaceHolder>"; List<OAuth2ApproveDO> result = oauth2ApproveMapper.selectList(); assertEquals(2, result.size()); // read assertEquals(userId, result.get(0).getUserId()); assertEquals(userType, result.get(0).getUserType()); assertEquals(clientId, result.get(0).getClientId()); assertEquals("read", result.get(0).getScope()); assertTrue(result.get(0).getApproved()); assertFalse(DateUtils.isExpired(result.get(0).getExpiresTime())); // write assertEquals(userId, result.get(1).getUserId()); assertEquals(userType, result.get(1).getUserType()); assertEquals(clientId, result.get(1).getClientId()); assertEquals("write", result.get(1).getScope()); assertFalse(result.get(1).getApproved()); assertFalse(DateUtils.isExpired(result.get(1).getExpiresTime())); }
updateAfterApproval(Long userId, Integer userType, String clientId, Map<String, Boolean> requestedScopes) { // 如果 requestedScopes 为空，说明没有要求，则返回 true 通过 if (CollUtil.isEmpty(requestedScopes)) { return true; }  // 更新批准的信息 boolean success = false; // 需要至少有一个同意 LocalDateTime expireTime = LocalDateTime.now().plusSeconds(TIMEOUT); for (Map.Entry<String, Boolean> entry : requestedScopes.entrySet()) { if (entry.getValue()) { success = true; } saveApprove(userId, userType, clientId, entry.getKey(), entry.getValue(), expireTime); } return success; }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
************************************
[+] input: testGetMenuIdListByPermissionFromCache() { // mock 数据 MenuDO menu100 = randomPojo(MenuDO.class); menuMapper.insert(menu100); MenuDO menu101 = randomPojo(MenuDO.class); menuMapper.insert(menu101); // 准备参数 String permission = menu100.getPermission();  // 调用 List<Long> ids = menuService.getMenuIdListByPermissionFromCache(permission); // 断言 "<AssertPlaceHolder>"; assertEquals(menu100.getId(), ids.get(0)); }
getMenuIdListByPermissionFromCache(String permission) { List<MenuDO> menus = menuMapper.selectListByPermission(permission); return convertList(menus, MenuDO::getId); }
[*] target: assertEquals(1, ids.size())
[-] pred: org. junit. Assert. assertEquals ( 1, ids. size ( ) )
************************************
************************************
[+] input: testIterator() { Set<DataSource> dataSourceSet = new HashSet<>(); dataSourceSet.add(new DataSource("prometheus", DataSourceType.PROMETHEUS, storageEngine)); dataSourceSet.add(new DataSource("opensearch", DataSourceType.OPENSEARCH, storageEngine)); Set<DataSourceMetadata> dataSourceMetadata = dataSourceSet.stream() .map( dataSource -> new DataSourceMetadata.Builder() .setName(dataSource.getName()) .setConnector(dataSource.getConnectorType()) .setProperties(ImmutableMap.of("prometheus.uri", "localhost:9200")) .build()) .collect(Collectors.toSet()); when(dataSourceService.getDataSourceMetadata(false)).thenReturn(dataSourceMetadata);  assertFalse(dataSourceTableScan.hasNext()); dataSourceTableScan.open(); assertTrue(dataSourceTableScan.hasNext()); Set<ExprValue> exprTupleValues = new HashSet<>(); while (dataSourceTableScan.hasNext()) { exprTupleValues.add(dataSourceTableScan.next()); }  Set<ExprValue> expectedExprTupleValues = new HashSet<>(); for (DataSource dataSource : dataSourceSet) { expectedExprTupleValues.add( new ExprTupleValue( new LinkedHashMap<>( ImmutableMap.of( "DATASOURCE_NAME", ExprValueUtils.stringValue(dataSource.getName()), "CONNECTOR_TYPE", ExprValueUtils.stringValue(dataSource.getConnectorType().name()))))); } "<AssertPlaceHolder>"; }
next() { return iterator.next(); }
[*] target: assertEquals(expectedExprTupleValues, exprTupleValues)
[-] pred: org. junit. Assert. assertEquals ( expectedExprTupleValues, exprTupleValues )
************************************
************************************
[+] input: whenCreateThenReturnSuccess() { when(repository.save(any())).thenReturn(user);  User response = service.create(userDTO);  "<AssertPlaceHolder>"; assertEquals(User.class, response.getClass()); assertEquals(ID, response.getId()); assertEquals(NAME, response.getName()); assertEquals(EMAIL, response.getEmail()); assertEquals(PASSWORD, response.getPassword()); }
create(UserDTO obj) { findByEmail(obj); return repository.save(mapper.map(obj, User.class)); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: testShouldRender() { ProfileAwareWaypoint waypoint = new ProfileAwareWaypoint(BlockPos.ORIGIN, null, null, null); waypoint.setFound("profile"); Assertions.assertTrue(waypoint.shouldRender()); waypoint.setFound(""); Assertions.assertFalse(waypoint.shouldRender()); waypoint.setMissing(); Assertions."<AssertPlaceHolder>"; }
shouldRender() { return !foundProfiles.contains(Utils.getProfile()); }
[*] target: assertTrue(waypoint.shouldRender())
[-] pred: org. junit. Assert. assertTrue ( waypoint. shouldRender() )
************************************
************************************
[+] input: shouldBuildProperty() { Message message = MessageFactory.property(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
property(String elementLocalName, String propertyName) { return INSTANCE.composeMessage( "property", ContextBuilder.builder() .entry("propertyName", propertyName) .context(elementTransformedPrefix(elementLocalName)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: XMLParseException { InputStream inputStream = Thread.currentThread().getContextClassLoader() .getResourceAsStream("xml-parser-process.xml"); Element processElement = new XMLParser().parseFirstElement(inputStream);  "<AssertPlaceHolder>"; assertEquals("Definitions_12vhdwp", processElement.getAttributeValue("id")); assertTrue(processElement.getChildElement().stream() .anyMatch(element -> "process".equals(element.getType().getLocalPart()))); }
parseFirstElement(InputStream inputStream) throws XMLParseException { XMLInputFactory factory = XMLInputFactory.newInstance(); factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);  XMLStreamReader reader = null; try { reader = factory.createXMLStreamReader(inputStream);  boolean findFirst = nextElement(reader); if (findFirst) { return parseElement(reader); }  throw new XMLParseException("[XML] Cannot find any elements when parsing"); } catch (XMLStreamException xse) { throw new XMLParseException("[XML] Encountered error when reading XML stream: " + xse.getMessage(), xse); } catch (Exception e) { throw new XMLParseException("[XML] Unknown exception: " + e.getMessage(), e); } finally { if (reader != null) { try { reader.close(); } catch (XMLStreamException e) { // do nothing } } } }
[*] target: assertNotNull(processElement)
[-] pred: org. junit. Assert. assertNotNull ( processElement )
************************************
************************************
[+] input: Exception { String raw = "From: Pete(A wonderful \\) chap) <pete(his account)@(comment)silly.test(his host)>\n" + "To: Chris <c@(xxx bbb)public.example>,\n" + "         joe@example.org,\n" + "  John <jdoe@one.test> (my dear friend); (the end of the group)\n" + "Cc:(Empty list)(start)Undisclosed recipients  :(nobody(that I know))  ;\n" + "Date: Thu,\n" + "      13\n" + "        Feb\n" + "          1969\n" + "      23:32\n" + "               -0330 (Newfoundland Time)\n" + "Message-ID:              <testabcd.1234@silly.test>\n" + "\n" + "Testing.";  ParsedMessage msg = new ParsedMessage(raw.getBytes(), false); List<IndexDocument> docs = msg.getLuceneDocuments(); "<AssertPlaceHolder>"; Document doc = docs.get(0).toDocument();  RFC822AddressTokenStream from = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_FROM).tokenStreamValue(); assertEquals(Arrays.asList("pete", "a", "wonderful", "chap", "pete", "his", "account", "comment", "silly.test", "his", "host", "pete@silly.test", "pete", "@silly.test", "silly.test"), from.getAllTokens());  RFC822AddressTokenStream to = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_TO).tokenStreamValue(); assertEquals(Arrays.asList("chris", "c@", "c", "xxx", "bbb", "public.example", "joe@example.org", "joe", "@example.org", "example.org", "example", "@example", "john", "jdoe@one.test", "jdoe", "@one.test", "one.test", "my", "dear", "friend", "the", "end", "of", "the", "group", "c@public.example", "c", "@public.example", "public.example"), to.getAllTokens());  RFC822AddressTokenStream cc = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_CC).tokenStreamValue(); assertEquals(Arrays.asList("empty", "list", "start", "undisclosed", "recipients", "nobody", "that", "i", "know"), cc.getAllTokens());  RFC822AddressTokenStream xEnvFrom = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_X_ENV_FROM).tokenStreamValue(); assertEquals(0, xEnvFrom.getAllTokens().size());  RFC822AddressTokenStream xEnvTo = (RFC822AddressTokenStream) doc.getFieldable( LuceneFields.L_H_X_ENV_TO).tokenStreamValue(); assertEquals(0, xEnvTo.getAllTokens().size()); }
getLuceneDocuments() { try { analyzeFully(); } catch (ServiceException e) { LOG.warn("message analysis failed when getting lucene documents"); } return luceneDocuments; }
[*] target: assertEquals(1, docs.size())
[-] pred: org. junit. Assert. assertEquals ( 1, docs. size ( ) )
************************************
************************************
[+] input: appendTest() { ShuffleBuffer shuffleBuffer = new ShuffleBuffer(100); shuffleBuffer.append(createData(10)); assertEquals(42, shuffleBuffer.getSize()); assertFalse(shuffleBuffer.isFull());  shuffleBuffer.append(createData(26)); assertEquals(100, shuffleBuffer.getSize()); assertFalse(shuffleBuffer.isFull());  shuffleBuffer.append(createData(1)); assertEquals(133, shuffleBuffer.getSize()); "<AssertPlaceHolder>"; }
isFull() { return size > capacity; }
[*] target: assertTrue(shuffleBuffer.isFull())
[-] pred: org. junit. Assert. assertTrue ( shuffleBuffer. isFull() )
************************************
************************************
[+] input: shouldBuildDueDate() { String juelExpression = random(); String feelExpression = random(); Message message = MessageFactory.dueDate(juelExpression, feelExpression); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo( String.format( "Attribute 'dueDate' on 'userTask' was mapped. Please review transformed expression: '%s' -> '%s'.", juelExpression, feelExpression)); }
dueDate(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "due-date", ContextBuilder.builder() .context( supportedAttributeExpression("dueDate", "userTask", juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: byDefault() {  final String[] args = { };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.TUMBLING); assertEquals(options.getName(), "foo"); }
parse(final Class<T> optionsClass, final String[] args) {  final T options = create(optionsClass);  JCommander jCommander = JCommander.newBuilder() .addObject(options) .build();  //easiest way to set configuration through docker. //similar to how Confluent does this in their Docker images. OptionsUtil.populateByEnvironment(options);  jCommander.parse(args);  if (options.isHelp()) { jCommander.usage(); return null; }  return options; }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
************************************
[+] input: filterCompletedTasksOfOneCompletedTaskList() { final String task1Name = "TaskOne";  final TodoList todoList = new TodoList(); final TaskId taskId = todoList.addTask(task1Name); todoList.toggleTaskCompletion(taskId);  final List<Task> tasks = todoList.filterTasks(true); "<AssertPlaceHolder>"; assertEquals(task1Name, tasks.get(0).getName()); }
size() { return tasks.size(); }
[*] target: assertEquals(1, tasks.size())
[-] pred: org. junit. Assert. assertEquals ( 1, tasks. size ( ) )
************************************
************************************
[+] input: testCreateDept() { // 准备参数 DeptSaveReqVO reqVO = randomPojo(DeptSaveReqVO.class, o -> { o.setId(null); // 防止 id 被设置 o.setParentId(DeptDO.PARENT_ID_ROOT); o.setStatus(randomCommonStatus()); });  // 调用 Long deptId = deptService.createDept(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 DeptDO deptDO = deptMapper.selectById(deptId); assertPojoEquals(reqVO, deptDO, "id"); }
createDept(DeptSaveReqVO createReqVO) { if (createReqVO.getParentId() == null) { createReqVO.setParentId(DeptDO.PARENT_ID_ROOT); } // 校验父部门的有效性 validateParentDept(null, createReqVO.getParentId()); // 校验部门名的唯一性 validateDeptNameUnique(null, createReqVO.getParentId(), createReqVO.getName());  // 插入部门 DeptDO dept = BeanUtils.toBean(createReqVO, DeptDO.class); deptMapper.insert(dept); return dept.getId(); }
[*] target: assertNotNull(deptId)
[-] pred: org. junit. Assert. assertNotNull ( deptId )
************************************
************************************
[+] input: Exception {  Account acct = createTestAccount(Provisioning.getInstance(), UUID.randomUUID() + "@" + UUID.randomUUID() + ".com"); ImapHandler handler = new MockImapHandler();  acct.setImapEnabled(true); acct.setPrefImapEnabled(true); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); assertTrue(handler.isAuthenticated());  acct.setImapEnabled(true); acct.setPrefImapEnabled(false); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); assertFalse(handler.isAuthenticated());  acct.setImapEnabled(false); acct.setPrefImapEnabled(true); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); assertFalse(handler.isAuthenticated());  acct.setImapEnabled(false); acct.setPrefImapEnabled(false); handler.setCredentials(null); assertTrue(handler.authenticate(acct.getName(), null, "secret", "logintag", null)); "<AssertPlaceHolder>"; }
isAuthenticated() { return credentials != null; }
[*] target: assertFalse(handler.isAuthenticated())
[-] pred: org. junit. Assert. assertFalse ( handler. isAuthenticated() )
************************************
************************************
[+] input: testCreateScanBuilderWithSqlTableFunction() { SparkQueryRequest sparkQueryRequest = new SparkQueryRequest(); sparkQueryRequest.setSql(QUERY); SparkTable sparkTable = new SparkTable(client, sparkQueryRequest); TableScanBuilder tableScanBuilder = sparkTable.createScanBuilder(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(tableScanBuilder instanceof SparkSqlFunctionTableScanBuilder); }
createScanBuilder() { return new SparkSqlFunctionTableScanBuilder(sparkClient, sparkQueryRequest); }
[*] target: assertNotNull(tableScanBuilder)
[-] pred: org. junit. Assert. assertNotNull ( tableScanBuilder )
************************************
************************************
[+] input: testCreateKeyVersionShouldReturnIdWhenCalledWithValidEcParameter() { //given final KeyVaultFake underTest = createUnderTest(); final KeyCreateDetailedInput input = KeyCreateDetailedInput.builder() .key(new EcKeyCreationInput(KeyType.EC_HSM, KeyCurveName.P_256)) .build();  //when final VersionedKeyEntityId actual = underTest.createKeyVersion(KEY_NAME_1, input);  //then Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(actual.version()); Assertions.assertEquals(HTTPS_LOCALHOST, actual.vault()); Assertions.assertEquals(KEY_NAME_1, actual.id()); }
createKeyVersion(@NonNull final String keyName, @NonNull final KeyCreateDetailedInput input) { Assert.isTrue(!input.isManaged() || (input.getExpiresOn() != null && input.getNotBefore() != null), "Managed key (name=" + keyName + ") must have notBefore and expiresOn parameters set!"); final VersionedKeyEntityId keyEntityId = input.getKey().getKeyType().createKey(this, keyName, input.getKey()); setKeyOperations(keyEntityId, input.getKeyOperations()); //avoid overwriting expiry if it was generated by the rotation policy if (getEntities().getReadOnlyEntity(keyEntityId).getExpiry().isEmpty()) { setExpiry(keyEntityId, input.getNotBefore(), input.getExpiresOn()); } setEnabled(keyEntityId, Objects.requireNonNullElse(input.getEnabled(), true)); setManaged(keyEntityId, input.isManaged()); addTags(keyEntityId, input.getTags()); return keyEntityId; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testBuildAuthRequest_clientNull() { // 准备参数 Integer socialType = SocialTypeEnum.WECHAT_MP.getType(); Integer userType = randomPojo(SocialTypeEnum.class).getType(); // mock 获得对应的 AuthRequest 实现 AuthRequest authRequest = mock(AuthDefaultRequest.class); AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(authRequest, "config"); when(authRequestFactory.get(eq("WECHAT_MP"))).thenReturn(authRequest);  // 调用 AuthRequest result = socialClientService.buildAuthRequest(socialType, userType); // 断言 "<AssertPlaceHolder>"; assertSame(authConfig, ReflectUtil.getFieldValue(authConfig, "config")); }
buildAuthRequest(Integer socialType, Integer userType) { // 1. 先查找默认的配置项，从 application-*.yaml 中读取 AuthRequest request = authRequestFactory.get(SocialTypeEnum.valueOfType(socialType).getSource()); Assert.notNull(request, String.format("社交平台(%d) 不存在", socialType)); // 2. 查询 DB 的配置项，如果存在则进行覆盖 SocialClientDO client = socialClientMapper.selectBySocialTypeAndUserType(socialType, userType); if (client != null && Objects.equals(client.getStatus(), CommonStatusEnum.ENABLE.getStatus())) { // 2.1 构造新的 AuthConfig 对象 AuthConfig authConfig = (AuthConfig) ReflectUtil.getFieldValue(request, "config"); AuthConfig newAuthConfig = ReflectUtil.newInstance(authConfig.getClass()); BeanUtil.copyProperties(authConfig, newAuthConfig); // 2.2 修改对应的 clientId + clientSecret 密钥 newAuthConfig.setClientId(client.getClientId()); newAuthConfig.setClientSecret(client.getClientSecret()); if (client.getAgentId() != null) { // 如果有 agentId 则修改 agentId newAuthConfig.setAgentId(client.getAgentId()); } // 2.3 设置会 request 里，进行后续使用 ReflectUtil.setFieldValue(request, "config", newAuthConfig); } return request; }
[*] target: assertSame(authRequest, result)
[-] pred: org. junit. Assert. assertSame ( authRequest, result )
************************************
************************************
[+] input: IOException { List<? extends JavaFileObject> files = List.of( testFiles.get( "/workspace/com/gazelle/java/javaparser/generators/AnonymousInnerClass.java")); parser.parseClasses(files);  Set<String> expectedTypes = Set.of( "java.util.HashMap", "javax.annotation.Nullable", "org.jetbrains.annotations.Nullable"); "<AssertPlaceHolder>";  Map<String, ClasspathParser.PerClassData> expectedPerClassMetadata = new TreeMap<>(); TreeMap<String, SortedSet<String>> expectedPerMethodAnnotations = new TreeMap<>(); expectedPerMethodAnnotations.put( "containsValue", treeSet("Override", "javax.annotation.Nullable")); // This anonymous inner class really has a name like $1, but we don't know what number it will // end up getting given, so we just use the empty string for anonymous inner classes. expectedPerClassMetadata.put( "workspace.com.gazelle.java.javaparser.generators.AnonymousInnerClass.", new ClasspathParser.PerClassData(treeSet(), expectedPerMethodAnnotations, new TreeMap<>())); assertEquals(expectedPerClassMetadata, parser.perClassData); }
getUsedTypes() { return ImmutableSet.copyOf(usedTypes); }
[*] target: assertEquals(expectedTypes, parser.getUsedTypes())
[-] pred: org. junit. Assert. assertEquals ( expectedTypes, parser. getUsedTypes() )
************************************
************************************
[+] input: ColumnA_was_DELETE_BUT_Is_ColumnB_was_still_survive() { // given UserInfo columnA = this.getUserInfo("columnA"); List<PortfolioCard> aCards = new ArrayList<PortfolioCard>(); aCards.add(this.getPortfolioCard(1, columnA)); aCards.add(this.getPortfolioCard(2, columnA)); aCards.add(this.getPortfolioCard(3, columnA));  UserInfo columnB = this.getUserInfo("columnB"); List<PortfolioCard> bCards = new ArrayList<PortfolioCard>(); bCards.add(this.getPortfolioCard(4, columnB)); bCards.add(this.getPortfolioCard(5, columnB)); bCards.add(this.getPortfolioCard(6, columnB));  // when this.saveUserInfo(columnA); this.savePortfolioCards(aCards); this.saveUserInfo(columnB); this.savePortfolioCards(bCards);  this.portfolioCardRepository.deleteByName(columnA.getName());  List<PortfolioCard> resultA = this.portfolioCardRepository.findByName(columnA.getName()); List<PortfolioCard> resultB = this.portfolioCardRepository.findByName(columnB.getName());  // then "<AssertPlaceHolder>"; assertEquals(resultB.size(), bCards.size()); }
findByName(@Param("name") String name);
[*] target: assertTrue(resultA.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( resultA. isEmpty ( ) )
************************************
************************************
[+] input: testNotExists() { Organization randomOrganization = randomOrganization(); Assertions.assertTrue(randomOrganization.notExisted());  Organization created = randomOrganization.createOrg(); Assertions."<AssertPlaceHolder>"; }
notExisted() { return !existed(); }
[*] target: assertFalse(created.notExisted())
[-] pred: org. junit. Assert. assertFalse ( created. notExisted() )
************************************
************************************
[+] input: testCreateLevel_success() { // 准备参数 MemberLevelCreateReqVO reqVO = randomPojo(MemberLevelCreateReqVO.class, o -> { o.setDiscountPercent(randomInt()); o.setIcon(randomURL()); o.setBackgroundUrl(randomURL()); o.setStatus(randomCommonStatus()); });  // 调用 Long levelId = levelService.createLevel(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 MemberLevelDO level = memberlevelMapper.selectById(levelId); assertPojoEquals(reqVO, level); }
createLevel(MemberLevelCreateReqVO createReqVO) { // 校验配置是否有效 validateConfigValid(null, createReqVO.getName(), createReqVO.getLevel(), createReqVO.getExperience());  // 插入 MemberLevelDO level = MemberLevelConvert.INSTANCE.convert(createReqVO); memberLevelMapper.insert(level); // 返回 return level.getId(); }
[*] target: assertNotNull(levelId)
[-] pred: org. junit. Assert. assertNotNull ( levelId )
************************************
************************************
[+] input: test() { TreeNode root = new TreeNode(7); root.left = new TreeNode(3); root.right = new TreeNode(15); root.right.left = new TreeNode(9); root.right.right = new TreeNode(20); BSTIterator testObject = new BSTIterator(root); assertEquals(3, testObject.next()); assertEquals(7, testObject.next()); assertTrue(testObject.hasNext()); assertEquals(9, testObject.next()); assertTrue(testObject.hasNext()); assertEquals(15, testObject.next()); assertTrue(testObject.hasNext()); assertEquals(20, testObject.next()); "<AssertPlaceHolder>"; }
hasNext() { return !stack.isEmpty(); }
[*] target: assertFalse(testObject.hasNext())
[-] pred: org. junit. Assert. assertFalse ( testObject. hasNext() )
************************************
************************************
[+] input: test_objectFileName() { final String namePattern = "my-elb-%{yyyy-MM-dd'T'hh-mm-ss}";  when(objectKeyOptions.getNamePattern()).thenReturn(namePattern); when(event.formatString(namePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS)).thenReturn(namePattern); String objectFileName = ObjectKey.objectFileName(s3SinkConfig, null, event, expressionEvaluator); Assertions."<AssertPlaceHolder>"; assertThat(objectFileName, startsWith("my-elb")); }
objectFileName(final S3SinkConfig s3SinkConfig, final String codecExtension, final Event event, final ExpressionEvaluator expressionEvaluator) { String configNamePattern = s3SinkConfig.getObjectKeyOptions().getNamePattern(); String configNamePatternExpressionResult = event.formatString(configNamePattern, expressionEvaluator, REPLACEMENT_FOR_NON_EXISTENT_KEYS); int extensionIndex = configNamePatternExpressionResult.lastIndexOf('.'); if (extensionIndex > 0) { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult.substring(0, extensionIndex)) + "." + (codecExtension!=null? codecExtension :configNamePatternExpressionResult.substring(extensionIndex + 1)); } else { return S3ObjectIndexUtility.getObjectNameWithDateTimeId(configNamePatternExpressionResult) + "." + (codecExtension!=null? codecExtension : DEFAULT_CODEC_FILE_EXTENSION); } }
[*] target: assertNotNull(objectFileName)
[-] pred: org. junit. Assert. assertNotNull ( objectFileName )
************************************
************************************
[+] input: JavetException { String resourceName = "./test.js"; IV8Executor iV8Executor = v8Runtime.getExecutor( "const a = 1; a;").setResourceName(resourceName); try (V8Script v8Script = iV8Executor.compileV8Script()) { assertNotNull(v8Script); "<AssertPlaceHolder>"; assertEquals(1, v8Script.executeInteger()); } }
getResourceName() throws JavetException { if (resourceName == null) { return checkV8Runtime().getV8Internal().scriptGetResourceName(this); } return resourceName; }
[*] target: assertEquals(resourceName, v8Script.getResourceName())
[-] pred: org. junit. Assert. assertEquals ( resourceName, v8Script. getResourceName() )
************************************
************************************
[+] input: testProcessUserDeleted() { // 准备参数 Long userId = randomLongId(); // mock 数据 UserRoleDO userRoleDO01 = randomPojo(UserRoleDO.class, o -> o.setUserId(userId)); // 被删除 userRoleMapper.insert(userRoleDO01); UserRoleDO userRoleDO02 = randomPojo(UserRoleDO.class); // 不被删除 userRoleMapper.insert(userRoleDO02);  // 调用 permissionService.processUserDeleted(userId); // 断言数据 List<UserRoleDO> dbUserRoles = userRoleMapper.selectList(); "<AssertPlaceHolder>"; assertPojoEquals(dbUserRoles.get(0), userRoleDO02); }
processUserDeleted(Long userId);
[*] target: assertEquals(1, dbUserRoles.size())
[-] pred: org. junit. Assert. assertEquals ( 1, dbUserRoles. size ( ) )
************************************
************************************
[+] input: shouldBuildResultVariableInternalScript() { Message message = MessageFactory.resultVariableInternalScript(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); assertNotNull(message.getSeverity()); assertThat(message.getMessage()) .isEqualTo("Result variable is set to Zeebe script result variable."); }
resultVariableInternalScript() { return INSTANCE.staticMessage("result-variable-internal-script"); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildMap() { Message message = MessageFactory.map(); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
map() { return INSTANCE.emptyMessage(); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: shouldBuildCompletionCondition() { Message message = MessageFactory.completionCondition(random(), random()); "<AssertPlaceHolder>"; assertNotNull(message.getMessage()); }
completionCondition(String juelExpression, String feelExpression) { return INSTANCE.composeMessage( "completion-condition", ContextBuilder.builder() .context(expressionTransformationResult(juelExpression, feelExpression)) .build()); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: testCreateNotifyTemplate_success() { // 准备参数 NotifyTemplateSaveReqVO reqVO = randomPojo(NotifyTemplateSaveReqVO.class, o -> o.setStatus(randomCommonStatus())) .setId(null); // 防止 id 被赋值  // 调用 Long notifyTemplateId = notifyTemplateService.createNotifyTemplate(reqVO); // 断言 "<AssertPlaceHolder>"; // 校验记录的属性是否正确 NotifyTemplateDO notifyTemplate = notifyTemplateMapper.selectById(notifyTemplateId); assertPojoEquals(reqVO, notifyTemplate, "id"); }
createNotifyTemplate(NotifyTemplateSaveReqVO createReqVO) { // 校验站内信编码是否重复 validateNotifyTemplateCodeDuplicate(null, createReqVO.getCode());  // 插入 NotifyTemplateDO notifyTemplate = BeanUtils.toBean(createReqVO, NotifyTemplateDO.class); notifyTemplate.setParams(parseTemplateContentParams(notifyTemplate.getContent())); notifyTemplateMapper.insert(notifyTemplate); return notifyTemplate.getId(); }
[*] target: assertNotNull(notifyTemplateId)
[-] pred: org. junit. Assert. assertNotNull ( notifyTemplateId )
************************************
************************************
[+] input: principal_creationWorks() { val sessionID = Utils.generateRandomID(); val memberID = Utils.generateRandomID(); val principal = new MemberPrincipal(sessionID, memberID); assertEquals(principal.getSessionID(), sessionID); assertEquals(principal.getMemberID(), memberID); "<AssertPlaceHolder>"; }
getName() { return memberID; }
[*] target: assertEquals(principal.getName(), memberID)
[-] pred: org. junit. Assert. assertEquals ( principal. getName(), memberID )
************************************
************************************
[+] input: testCreateScanBuilderWithQueryRangeTableFunction() { PrometheusQueryRequest prometheusQueryRequest = new PrometheusQueryRequest(); prometheusQueryRequest.setPromQl("test"); prometheusQueryRequest.setStep("15m"); PrometheusMetricTable prometheusMetricTable = new PrometheusMetricTable(client, prometheusQueryRequest); TableScanBuilder tableScanBuilder = prometheusMetricTable.createScanBuilder(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(tableScanBuilder instanceof QueryRangeFunctionTableScanBuilder); }
createScanBuilder() { if (metricName == null) { return new QueryRangeFunctionTableScanBuilder(prometheusClient, prometheusQueryRequest); } else { return null; } }
[*] target: assertNotNull(tableScanBuilder)
[-] pred: org. junit. Assert. assertNotNull ( tableScanBuilder )
************************************
************************************
[+] input: getFunctions() { PrometheusStorageEngine engine = new PrometheusStorageEngine(client); Collection<FunctionResolver> functionResolverCollection = engine.getFunctions(); "<AssertPlaceHolder>"; assertEquals(2, functionResolverCollection.size()); Iterator<FunctionResolver> iterator = functionResolverCollection.iterator(); assertTrue(iterator.next() instanceof QueryRangeTableFunctionResolver); assertTrue(iterator.next() instanceof QueryExemplarsTableFunctionResolver); }
getFunctions() { ArrayList<FunctionResolver> functionList = new ArrayList<>(); functionList.add(new QueryRangeTableFunctionResolver(prometheusClient)); functionList.add(new QueryExemplarsTableFunctionResolver(prometheusClient)); return functionList; }
[*] target: assertNotNull(functionResolverCollection)
[-] pred: org. junit. Assert. assertNotNull ( functionResolverCollection )
************************************
************************************
[+] input: deleteDatasetById_whenDatasetIdIsValidAndDeleteDatasetFalse_setDeletedToFalse() { // Set Security Context OauthUser oauthUser = SecurityUtils.createOauthUserWithTwoOrgsAndWithValues(); SecurityContext.set(oauthUser);  //Given Dataset testDataset = DatasetUtils.createTestDataset(DATASET_ID); testDataset.setDeleted(true);  //when when(datasetRepositoryMock.findById(anyString())).thenReturn(java.util.Optional.of(testDataset)); when(datasetRepositoryMock.saveAndFlush(any(Dataset.class))).then(returnsFirstArg());  DatasetViewModel actual = datasetService.deleteDatasetById(DATASET_ID, false);  //Then "<AssertPlaceHolder>";  assertFalse(actual.isDeleted()); assertEquals(testDataset.isDeleted(), actual.isDeleted()); assertNull(testDataset.getDeleteTime());  verify(datasetRepositoryMock).saveAndFlush(any()); verify(datasetRepositoryMock, times(1)).saveAndFlush(any()); }
deleteDatasetById(String id, boolean deleteDataset) { Dataset datasetById = getDatasetById(id);  //Permissions check String owner = datasetById.getOwner(); DataGymSecurity.isAdmin(owner, false);  // Sets isDeleted to the value of "deleteDataset" datasetById.setDeleted(deleteDataset); Long currentTime = null;  if (deleteDataset) { currentTime = System.currentTimeMillis(); } else { String datasetName = datasetById.getName(); List<Dataset> datasetList = datasetRepository.findAllByName(datasetName);  if (datasetList.size() > 1) { String uuid = UUID.randomUUID().toString(); if (datasetName.length() > 90) { datasetName = datasetName.substring(0, 89) + "_" + uuid; } else { datasetName = datasetName + "_" + uuid; }  datasetById.setName(datasetName); } }  datasetById.setDeleteTime(currentTime);  // Sets isDeleted on all media in the dataset to the value of "deleteDataset" Long finalCurrentTime = currentTime; datasetById.getMedia().forEach(media -> { media.setDeleted(deleteDataset); media.setDeleteTime(finalCurrentTime); });  Dataset deletedDataset = datasetRepository.saveAndFlush(datasetById); return DatasetMapper.mapToDatasetViewModel(deletedDataset, false); }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: testCreateLazyFilterFromMissingFile() { UnmodifiableBloomFilter<String> missingFileFilter = UnmodifiableBloomFilter.createLazyFilterFromFile("src/test/resources/fake-file-not-found"); // expect to initialize on demand assertFalse(missingFileFilter.isInitialized()); assertFalse(missingFileFilter.mightContain("test123")); assertTrue(missingFileFilter.isInitialized()); // file not found results in disabled instance "<AssertPlaceHolder>"; }
isDisabled() { return isInitialized && cache == null; }
[*] target: assertTrue(missingFileFilter.isDisabled())
[-] pred: org. junit. Assert. assertTrue ( missingFileFilter. isDisabled() )
