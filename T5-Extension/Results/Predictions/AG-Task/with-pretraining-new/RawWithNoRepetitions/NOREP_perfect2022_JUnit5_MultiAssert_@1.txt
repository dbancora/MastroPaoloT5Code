************************************
************************************
[+] input: getCountries_Pagination_Success() { generateTestData(); int pageNo = 1; int pageSize = 2; CountryListGetVm countryListGetVm = countryService.getPageableCountries(pageNo, pageSize); "<AssertPlaceHolder>"; assertEquals(countryListGetVm.pageNo(), pageNo); assertEquals(countryListGetVm.pageSize(), pageSize); assertTrue(countryListGetVm.isLast()); assertEquals(2, countryListGetVm.totalElements()); assertEquals(1, countryListGetVm.totalPages()); }
getPageableCountries(final int pageNo, final int pageSize) { final Pageable pageable = PageRequest.of(pageNo, pageSize); final Page<Country> countryPage = countryRepository.findAll(pageable); final List<Country> countryList = countryPage.getContent();  final List<CountryVm> countryVms = countryList.stream() .map(CountryVm::fromModel) .toList();  return new CountryListGetVm( countryVms, countryPage.getNumber(), countryPage.getSize(), (int) countryPage.getTotalElements(), countryPage.getTotalPages(), countryPage.isLast() ); }
[*] target: assertNotNull(countryListGetVm)
[-] pred: org. junit. Assert. assertNotNull ( countryListGetVm )
************************************
************************************
[+] input: testLoadFromStringSuccessComplete() { var loader = new SAXLoader(); Set<String> errors = new HashSet<>();  var xhtml = loader.loadFromString(""" <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> <html xmlns="http://www.w3.org/1999/xhtml"><head><title></title></head><body> <p>body</p> </body></html>""", false, errors);  "<AssertPlaceHolder>"; assertEquals(xhtml.originalMimeType(), MimeType.APPLICATION_XHTML); assertEquals(0, errors.size()); }
loadFromString(String data, boolean fragment, Set<String> errors) throws ContentManagerException { return new LoaderDelegate().load(data, fragment, errors); }
[*] target: assertNotNull(xhtml)
[-] pred: org. junit. Assert. assertNotNull ( xhtml )
************************************
************************************
[+] input: readHex() { byte[] bytes = new byte[32]; new Random().nextBytes(bytes); Bean bean = new Bean(); bean.value = bytes;  String str = JSON.toJSONString(bean); String str1 = JSON.toJSONString(bean, JSONWriter.Feature.OptimizedForAscii); "<AssertPlaceHolder>"; assertEquals( str, new String( JSON.toJSONBytes(bean) ) ); String str2 = JSON.toJSONString(bean, JSONWriter.Feature.PrettyFormat); assertArrayEquals( JSON.parseObject(str).getBytes("value"), JSON.parseObject(str2).getBytes("value") );  JSONWriter jsonWriter = JSONWriter.ofUTF8(); jsonWriter.writeAny(bean); assertEquals(str, new String(jsonWriter.getBytes(StandardCharsets.UTF_8))); assertEquals(str, new String(jsonWriter.getBytes(StandardCharsets.US_ASCII))); assertEquals(str.length(), jsonWriter.size());  Bean bean1 = JSON.parseObject(str, Bean.class); assertArrayEquals(bean.value, bean1.value);  Bean bean2 = JSON.parseObject(str.getBytes(), Bean.class); assertArrayEquals(bean.value, bean2.value);  Bean bean3 = JSON.parseObject(str.toCharArray(), Bean.class); assertArrayEquals(bean.value, bean3.value); }
readHex();  public byte[] readBinary() { if (ch == 'x') { return readHex(); }  if (isString()) { String str = readString(); if (str.isEmpty()) { return null; }  if ((context.features & Feature.Base64StringAsByteArray.mask) != 0) { return Base64.getDecoder().decode(str); }  throw new JSONException(info("not support input " + str)); }  if (nextIfArrayStart()) { int index = 0; byte[] bytes = new byte[64]; while (true) { if (ch == ']') { next(); break; } if (index == bytes.length) { int oldCapacity = bytes.length; int newCapacity = oldCapacity + (oldCapacity >> 1); bytes = Arrays.copyOf(bytes, newCapacity); } bytes[index++] = (byte) readInt32Value(); } nextIfComma(); return Arrays.copyOf(bytes, index); }  throw new JSONException(info("not support read binary")); }
[*] target: assertEquals(str, str1)
[-] pred: org. junit. Assert. assertEquals ( str, str1 )
************************************
************************************
[+] input: testNormal() { TablePathInfo tablePathInfo = parseRelMig13OrMore.getTablePathInfo(contentMapping); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("table", tablePathInfo.getTable()); Assertions.assertEquals("schema", tablePathInfo.getSchema()); Assertions.assertEquals("database", tablePathInfo.getDatabase()); verify(parseRelMig13OrMore).getFromMap(contentMapping, KeyWords.TABLE); verify(parseRelMig13OrMore).getFromMap(parseRelMig13OrMore.project, KeyWords.CONTENT); verify(parseRelMig13OrMore).getFromMap(content, KeyWords.TABLES); verify(parseRelMig13OrMore).getFromMap(tables, "tableId"); verify(parseRelMig13OrMore).getFromMap(tablePath, KeyWords.PATH); verify(tableInfo).get(KeyWords.DATABASE); verify(tableInfo).get(KeyWords.SCHEMA); verify(tableInfo).get(KeyWords.TABLE); verify(parseRelMig13OrMore, times(4)).parseMap(any()); }
getTablePathInfo(Map<String, Object> contentMapping) { String tableId = String.valueOf(getFromMap(contentMapping, KeyWords.TABLE)); Map<String, Object> content = parseMap(getFromMap(project, KeyWords.CONTENT)); Map<String, Object> tables = parseMap(getFromMap(content, KeyWords.TABLES)); Map<String, Object> tablePath = parseMap(getFromMap(tables, tableId)); Map<String, Object> tableInfo = parseMap(getFromMap(tablePath, KeyWords.PATH)); return new TablePathInfo(String.valueOf(tableInfo.get(KeyWords.DATABASE)), String.valueOf(tableInfo.get(KeyWords.SCHEMA)), String.valueOf(tableInfo.get(KeyWords.TABLE))); }
[*] target: assertNotNull(tablePathInfo)
[-] pred: org. junit. Assert. assertNotNull ( tablePathInfo )
************************************
************************************
[+] input: testLoopByConfigConfigValueIsCollectionButElementsContainsNullString() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); packages = new ArrayList<>(); packages.add("mock"); packages.add(null); when(configMap.get(PythonUtils.PYTHON_THREAD_SITE_PACKAGES_PATH)).thenReturn(packages); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Object.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1,  1); } }
loopByConfig(File config, Log logger, final String loopPath, final String pythonJarPath) { //按照配置文件来编译第三方Python包 Map<String, Object> configMap = getPythonConfig(config); Object sitePackages = configMap.get(PYTHON_THREAD_SITE_PACKAGES_PATH); if (sitePackages instanceof Collection) { Collection<String> packages = (Collection<String>) sitePackages; if (!packages.isEmpty()) { logger.info("Configuration files will be used for package compilation： {}", toJson(configMap)); List<File> path = new ArrayList<>(); for (Object name : packages) { if (null == name) continue; path.add(new File(concat(loopPath, String.valueOf(name)))); } if (!path.isEmpty()) { loopFiles(path, logger, pythonJarPath); return true; } } } return false; }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
************************************
[+] input: test_2_plus_2_meta() { var node = initNode(TbRuleNodeMathFunctionType.ADD, new TbMathResult(TbMathArgumentType.MESSAGE_METADATA, "result", 0, false, false, null), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a"), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "b") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 2).put("b", 2).toString());  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); assertNotNull(resultMsg.getMetaData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("4", result); }
onMsg(TbContext ctx, TbMsg msg) { locks.computeIfAbsent(msg.getOriginator(), SemaphoreWithTbMsgQueue::new) .addToQueueAndTryProcess(msg, ctx, this::processMsgAsync); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
************************************
[+] input: IOException { VideoDetail videoDetail = client.getVideoDetail("BV1Jx411o7aW", 19); Assertions."<AssertPlaceHolder>"; VideoInfo videoInfo = videoDetail.getVideoInfo(); Assertions.assertNotNull(videoInfo); VideoData videoData = videoInfo.getVideoData(); Assertions.assertNotNull(videoData); BilibiliResponse<PlayInfo> playInfoResponse = videoDetail.getPlayInfoResponse(); Assertions.assertNotNull(playInfoResponse); Assertions.assertNotNull(playInfoResponse.getCode()); if (ErrorCode.SUCCESS == playInfoResponse.getCode()) { PlayInfo playInfo = playInfoResponse.getData(); Assertions.assertNotNull(playInfo); PlayDash dash = playInfo.getDash(); Assertions.assertNotNull(dash); List<PlayDashInfo> videoList = dash.getVideo(); List<PlayDashInfo> audioList = dash.getAudio(); Assertions.assertNotNull(videoList); Assertions.assertFalse(videoList.isEmpty()); Assertions.assertNotNull(audioList); Assertions.assertFalse(audioList.isEmpty()); String videoDataMessage = String.format("BV:%s, title:%s, desc:%s", videoInfo.getBvid(), videoData.getTitle(), videoData.getDesc()); logger.info(videoDataMessage); Season season = videoData.getUgcSeason(); if (Objects.nonNull(season)) { String seasonMessage = String.format("Season title:%s, intro:%s, cover:%s", season.getTitle(), season.getIntro(), season.getCover()); logger.info(seasonMessage); if (Objects.nonNull(season.getSections())) { for (SeasonSection section : season.getSections()) { String sectionMessage = String.format("Section title:%s, type:%d, isActive:%b", section.getTitle(), section.getType(), section.getActive()); logger.info(sectionMessage); if (Objects.nonNull(section.getEpisodes())) { for (SectionEpisode episode : section.getEpisodes()) { String episodeMessage = String.format("Episode title:%s, bv:%s", episode.getTitle(), episode.getBvId()); if (Objects.nonNull(episode.getArc())) { episodeMessage += String.format(", arc.pic:%s", episode.getArc().getPic()); } logger.info(episodeMessage); } } } } } for (PlayDashInfo video : videoList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", video.getMimeType(), video.getCodecs(), video.getId(), video.getBaseUrl()); logger.info(message); } for (PlayDashInfo audio : audioList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", audio.getMimeType(), audio.getCodecs(), audio.getId(), audio.getBaseUrl()); logger.info(message); } } else { logger.info("get play info fail:" + playInfoResponse.getMessage()); } }
getVideoDetail(String bv, int page) throws IOException { // todo get subtitle_url from https://api.bilibili.com/x/player/wbi/v2?aid=xxxx&cid=xxx String url = ApiUtil.fillUrl(ApiUrlContainer.VIDEO_URL, bv, page); String html = httpJsonClient.get(url, requestHeader); VideoInfo videoInfo = parseVideoInfo(html); BilibiliResponse<PlayInfo> playInfo = parsePlayInfo(html); VideoDetail videoDetail = new VideoDetail(); videoDetail.setVideoInfo(videoInfo); videoDetail.setPlayInfoResponse(playInfo); videoDetail.setUrl(url); return videoDetail; }
[*] target: assertNotNull(videoDetail)
[-] pred: org. junit. Assert. assertNotNull ( videoDetail )
************************************
************************************
[+] input: SQLException { RdsHostListProvider.clearAll();  RdsHostListProvider provider1 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doReturn(topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsHostListProvider.topologyCache.size());  final List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  RdsHostListProvider provider2 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertEquals(1, RdsHostListProvider.topologyCache.size()); }
refresh(final Connection connection) throws SQLException { init(); final Connection currentConnection = connection != null ? connection : this.hostListProviderService.getCurrentConnection();  final FetchTopologyResult results = getTopology(currentConnection, false); LOGGER.finest(() -> Utils.logTopology(results.hosts, results.isCachedData ? "[From cache] " : ""));  this.hostList = results.hosts; return Collections.unmodifiableList(hostList); }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
************************************
[+] input: NoSuchMethodException { Method test1 = TestArexMock.class.getDeclaredMethod("testWithCacheableAnnotation", String.class, int.class); try(MockedConstruction ignored = Mockito.mockConstruction(DynamicClassExtractor.class, ((extractor, context) -> { Mockito.when(extractor.replayOrRealCall()).thenReturn(MockResult.success("test")); }))) { Method testReturnVoid = TestArexMock.class.getDeclaredMethod("testReturnVoid"); boolean actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(testReturnVoid, null, null, null); assertFalse(actualResult);  // not record Mockito.when(CacheLoaderUtil.needRecordOrReplay(any())).thenReturn(false); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, null, null); assertFalse(actualResult);  // record Mockito.when(CacheLoaderUtil.needRecordOrReplay(any())).thenReturn(true); Mockito.when(ContextManager.needRecord()).thenReturn(true); DynamicClassExtractor extractor = new DynamicClassExtractor(test1, new Object[]{"mock"}, "#val", null); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, extractor, null); assertFalse(actualResult);  // replay Mockito.when(ContextManager.needRecord()).thenReturn(false); Mockito.when(ContextManager.needReplay()).thenReturn(true); actualResult = SpringCacheInstrumentation.SpringCacheAdvice.onEnter(test1, new Object[]{ "name", 18 }, extractor, null); "<AssertPlaceHolder>"; } }
onEnter(@Advice.Argument(2) Method method, @Advice.Argument(3) Object[] args, @Advice.Local("extractor") DynamicClassExtractor extractor, @Advice.Local("mockResult") MockResult mockResult) { // only record and replay non-void method if (Void.TYPE.equals(method.getReturnType())) { return false; }  if (ContextManager.needRecordOrReplay() && CacheLoaderUtil.needRecordOrReplay(method)) { Cacheable cacheable = method.getDeclaredAnnotation(Cacheable.class); String keyExpression = cacheable != null ? cacheable.key() : null; extractor = new DynamicClassExtractor(method, args, keyExpression, null); } if (extractor != null && ContextManager.needReplay()) { mockResult = extractor.replayOrRealCall(); return mockResult != null && mockResult.notIgnoreMockResult(); } if (ContextManager.needRecord()) { RepeatedCollectManager.enter(); } return false; }
[*] target: assertTrue(actualResult)
[-] pred: org. junit. Assert. assertTrue ( actualResult )
************************************
************************************
[+] input: testMilestoneEntityIsNull() { milestones.put("code", null); milestoneAspectTask.taskMilestone("code", consumer); MilestoneEntity code = milestones.get("code"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("code", code.getCode()); Assertions.assertEquals(MilestoneStatus.WAITING, code.getStatus()); verify(consumer).accept(any(MilestoneEntity.class)); }
taskMilestone(String code, Consumer<MilestoneEntity> consumer) { MilestoneEntity entity = milestones.get(code); if (null == entity) { synchronized (milestones) { entity = milestones.computeIfAbsent(code, s -> new MilestoneEntity(code, MilestoneStatus.WAITING)); } } if (null != consumer) { consumer.accept(entity); } }
[*] target: assertNotNull(code)
[-] pred: org. junit. Assert. assertNotNull ( code )
************************************
************************************
[+] input: resolveFileFormat_whenNotSetOnTable_guessesFormConnectionParameters() { String schemaName = "schema_name_example"; String tableName = "a/file/path.csv"; String pathPrefix = "prefix_example"; TableSpec tableSpec = new TableSpec(new PhysicalTableName(schemaName, tableName));  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }}); duckdbParametersSpec.getDirectories().put(schemaName, pathPrefix);  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertEquals(fileFormatSpec.getFilePaths().get(0), Path.of(pathPrefix,tableName).toString()); Assertions.assertFalse(fileFormatSpec.getCsv().getAutoDetect()); }
resolveFileFormat(DuckdbParametersSpec duckdbParametersSpec, TableSpec tableSpec) { DuckdbFilesFormatType filesType = duckdbParametersSpec.getFilesFormatType(); if (filesType == null) { throw new RuntimeException("The files format is unknown. Please set files format on the connection."); }  FileFormatSpec fileFormat = tableSpec.getFileFormat() == null ? new FileFormatSpec() : tableSpec.getFileFormat().deepClone(); if(fileFormat.getFilePaths().isEmpty()){ FilePathListSpec filePathListSpec = guessFilePaths(duckdbParametersSpec, tableSpec); fileFormat.setFilePaths(filePathListSpec); }  if (fileFormat.isFormatSetForType(filesType)) { return fileFormat; }  FileFormatSpec fileFormatCloned = fileFormat.deepClone(); if (duckdbParametersSpec.isFormatSetForType()) { switch (filesType) { case csv: fileFormatCloned.setCsv(duckdbParametersSpec.getCsv().deepClone()); break; case json: fileFormatCloned.setJson(duckdbParametersSpec.getJson().deepClone()); break; case parquet: fileFormatCloned.setParquet(duckdbParametersSpec.getParquet().deepClone()); break; case iceberg: fileFormatCloned.setIceberg(duckdbParametersSpec.getIceberg().deepClone()); break; } return fileFormatCloned; }  fillDefaultFileFormat(fileFormatCloned, filesType); return fileFormatCloned; }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
************************************
[+] input: testGetLibPathIsURLClassLoaderAndURLsNotEmptyButJarPathNotContainsJarName() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(urls); when(url.getPath()).thenReturn("any-path"); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 1, 0); }
getLibPath(String jarName, AtomicReference<String> ato) throws IOException { InputStream pyJarPath = null; ClassLoader classLoader = getCurrentThreadContextClassLoader(); if (classLoader instanceof URLClassLoader) { URL[] urls = ((URLClassLoader) classLoader).getURLs(); for (URL url : urls) { String jarPath = url.getPath(); if (jarPath.contains(jarName)) { pyJarPath = url.openStream(); ato.set(jarPath); break; } } } return pyJarPath; }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
************************************
[+] input: testEmpty() { when(webHookController.success(null)).thenReturn(mock(ResponseMessage.class)); List mock = mock(List.class); when(mock.isEmpty()).thenReturn(true); when(webHookService.close(any(String[].class), any(UserDetail.class))).thenReturn(mock); when(webHookController.closeOneWebHookByHookId("id")).thenCallRealMethod(); ResponseMessage<WebHookInfoVo> hook = webHookController.closeOneWebHookByHookId("id"); Assertions."<AssertPlaceHolder>"; Assertions.assertNull(hook.getData()); verify(webHookController).success(null); verify(webHookService).close(any(String[].class), any(UserDetail.class)); }
closeOneWebHookByHookId(@PathVariable(value = "id") String hookId) { List<WebHookInfoVo> closed = webHookService.close(new String[]{hookId}, getLoginUser()); if (closed.isEmpty()) { return success(null); } return success(closed.get(0)); }
[*] target: assertNotNull(hook)
[-] pred: org. junit. Assert. assertNotNull ( hook )
************************************
************************************
[+] input: testLookupSuccessful() { VINManager vinManager = new VINManager(); String wmi = "1C3"; assertTrue(vinManager.isValidWMI(wmi));  //check that the lowercase version is also matched wmi = "1c3"; "<AssertPlaceHolder>"; }
isValidWMI(String wmi) { if (wmi.length() != 3) { return false; }  return wmiMap.containsKey(wmi.toUpperCase()); }
[*] target: assertTrue(vinManager.isValidWMI(wmi))
[-] pred: org. junit. Assert. assertTrue ( vinManager. isValidWMI(wmi ) )
************************************
************************************
[+] input: whenObjectAreEquivalentButDifferInCasing_ThenEqualsReturnsTrue() { UserId id1 = new UserId("Bob@Example.Com"); UserId id2 = new UserId("bob@example.com");  assertTrue(id1.equals(id2)); assertEquals(id1.hashCode(), id2.hashCode()); "<AssertPlaceHolder>"; }
compareTo(@NotNull UserId o) { return this.email.compareTo(o.email); }
[*] target: assertEquals(0, id1.compareTo(id2))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id2 ) )
************************************
************************************
[+] input: testClassPathFile() { Properties properties = ConfigUtil.loadProperties("classpath:openjob.properties"); Assertions."<AssertPlaceHolder>";  String value = properties.getProperty("openjob.worker.test", "none"); Assertions.assertEquals(value, "test"); }
loadProperties(String filename) { // Empty filename. if (StringUtils.isBlank(filename)) { return null; }  // Absolute file. if (isAbsoluteFile(filename)) { return loadPropertiesFromAbsoluteFile(filename); }  // Classpath file. if (filename.startsWith(CLASSPATH_PREFIX)) { return loadPropertiesFromClasspathFile(filename); }  // Relative file. return loadPropertiesFromRelativeFile(filename); }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
************************************
[+] input: test_sqrt_5_to_timeseries_and_data() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.TIME_SERIES, "result", 3, true, false, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString()); when(telemetryService.saveAndNotify(any(), any(), any(TsKvEntry.class))) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAndNotify(any(), any(), any(TsKvEntry.class));  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var resultJson = JacksonUtil.toJsonNode(resultMsg.getData()); assertTrue(resultJson.has("result")); assertEquals(2.236, resultJson.get("result").asDouble(), 0.0); }
onMsg(TbContext ctx, TbMsg msg) { locks.computeIfAbsent(msg.getOriginator(), SemaphoreWithTbMsgQueue::new) .addToQueueAndTryProcess(msg, ctx, this::processMsgAsync); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
************************************
[+] input: testFailWithErrorType() { Result result = Result.fail(SystemErrorType.GATEWAY_ERROR); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.GATEWAY_ERROR.getCode()); }
isFail() { return !isSuccess(); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
************************************
[+] input: JobException { String taskParam = "taskParam"; when(workerRpcService.splitJob(any())).thenReturn(new SplitJobResult(Collections.singletonList(taskParam)));  SplitJobResult result = workerRpcService.splitJob(new SplitJobParam("group", null, null, null, null)); "<AssertPlaceHolder>"; assertNotNull(result.getTaskParams()); assertEquals(1, result.getTaskParams().size()); assertEquals(taskParam, result.getTaskParams().get(0)); }
splitJob(SplitJobParam param) throws JobException;
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: IOException { final ExportHelper exportHelper = new ExportHelper(clientHandler); final ClassLoaderDescriptor classLoaderDescriptor = ClassLoaderDescriptor.builder().build(); final List<LoadedClass> classesToExport = List.of(new LoadedClass("org.test.MyClass", null, null), new LoadedClass("org.othertest.SomeClass", classLoaderDescriptor, null), new LoadedClass("testing.Export", classLoaderDescriptor, null));  final Map<String, byte[]> classData = classesToExport.stream() .collect(Collectors.toMap(LoadedClass::getName, l -> generateClassBytes()));  Mockito.when(clientHandler.getClassBytes(ArgumentMatchers.eq(JVM), ArgumentMatchers.any())) .thenAnswer(ctx -> classData.get(ctx.getArgument(1, LoadedClass.class).getName()));  final File outputFile = File.createTempFile("export", ".jar"); final AtomicInteger exportCount = new AtomicInteger();  final boolean success = exportHelper.export(JVM, classesToExport, outputFile, exportCount::set);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(classesToExport.size(), exportCount.get());  final JarFile jarFile = new JarFile(outputFile); final List<JarEntry> jarEntries = jarFile.stream() .filter(entry -> entry.getName().endsWith(".class")) .collect(Collectors.toList()); Assertions.assertEquals(jarEntries.size(), classesToExport.size());  for (JarEntry jarEntry : jarEntries) { final byte[] jarClassFile = jarFile.getInputStream(jarEntry).readAllBytes(); final byte[] baseClassFile = classData.get(jarEntry.getName().replace('/', '.').replace(".class", "")); Assertions.assertArrayEquals(baseClassFile, jarClassFile); } }
export(RunningJvm jvm, List<LoadedClass> loadedClasses, File outputJar, Consumer<Integer> currentProgress) { log.debug("Exporting {} files in {} to {}", loadedClasses.size(), jvm, outputJar); try { Files.deleteIfExists(outputJar.toPath()); Files.createFile(outputJar.toPath()); } catch (IOException e) { log.warn("Failed to create initial file for export", e); return false; } final AtomicInteger count = new AtomicInteger(); try (JarOutputStream jarOutputStream = new JarOutputStream(Files.newOutputStream(outputJar.toPath()))) { // Note - parallel stream runs in common fork join pool despite these being io bound tasks loadedClasses.stream() .parallel() .map(loadedClass -> new Pair<>(loadedClass, clientHandler.getClassBytes(jvm, loadedClass))) .forEach(pair -> { log.debug("Exporting: {}", loadedClasses); synchronized (count) { // Possible race condition - count could be incremented before another thread, but the // other thread could run currentProgress first. Therefore, we synchronize. currentProgress.accept(count.incrementAndGet()); } final String name = pair.getKey().getName().replace('.', '/') + ".class"; final byte[] content = pair.getValue(); write(name, content, jarOutputStream); }); log.debug("Jar created: {} with {} classes", outputJar, count.get()); return true; } catch (IOException | UncheckedIOException e) { log.warn("Failed to export", e); return false; } }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
************************************
[+] input: SQLException { RdsMultiAzDbClusterListProvider.clearAll();  RdsMultiAzDbClusterListProvider provider1 = Mockito.spy( getRdsMazDbClusterHostListProvider(mockHostListProviderService, "jdbc:something://instance-a-2.xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doAnswer(a -> topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsMultiAzDbClusterListProvider.topologyCache.size());  List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  // RdsMultiAzDbClusterListProvider.logCache();  RdsMultiAzDbClusterListProvider provider2 = Mockito.spy( getRdsMazDbClusterHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  doAnswer(a -> topologyClusterA).when(provider2).queryForTopology(any(Connection.class));  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertNotEquals(provider1.clusterId, provider2.clusterId); assertFalse(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId); assertEquals(2, RdsMultiAzDbClusterListProvider.topologyCache.size()); assertEquals("cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com", RdsMultiAzDbClusterListProvider.suggestedPrimaryClusterIdCache.get(provider1.clusterId));  // RdsMultiAzDbClusterListProvider.logCache();  topologyProvider1 = provider1.forceRefresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1); assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  // RdsMultiAzDbClusterListProvider.logCache(); }
queryForTopology(final Connection conn) throws SQLException { int networkTimeout = -1; try { networkTimeout = conn.getNetworkTimeout(); // The topology query is not monitored by the EFM plugin, so it needs a socket timeout if (networkTimeout == 0) { conn.setNetworkTimeout(networkTimeoutExecutor, defaultTopologyQueryTimeoutMs); } } catch (SQLException e) { LOGGER.warning(() -> Messages.get("RdsHostListProvider.errorGettingNetworkTimeout", new Object[] {e.getMessage()})); }  try { final Statement stmt = conn.createStatement(); String writerNodeId = processWriterNodeId(stmt.executeQuery(this.fetchWriterNodeQuery)); if (writerNodeId == null) { final ResultSet nodeIdResultSet = stmt.executeQuery(this.nodeIdQuery); while (nodeIdResultSet.next()) { writerNodeId = nodeIdResultSet.getString(1); } } final ResultSet topologyResultSet = stmt.executeQuery(this.topologyQuery); return processTopologyQueryResults(topologyResultSet, writerNodeId); } catch (final SQLSyntaxErrorException e) { throw new SQLException(Messages.get("RdsHostListProvider.invalidQuery"), e); } finally { if (networkTimeout == 0 && !conn.isClosed()) { conn.setNetworkTimeout(networkTimeoutExecutor, networkTimeout); } } }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
************************************
[+] input: test2() { //when this.registerPage.fillOutForm();  //then String expected = "Welcome to your account. Here you can manage all of your personal information and orders."; String actual = this.registerPage.getWelcomeMessage(); Assertions."<AssertPlaceHolder>";  String actualUrl = this.registerPage.getCurrentUrl(); Assertions.assertFalse(this.URL.equals(actualUrl)); }
getWelcomeMessage() { super.waitVisibilityOfElementLocated(welcomeMessageLocator); return super.getText(welcomeMessageLocator); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
************************************
[+] input: test_sqrt_5_to_attribute_and_metadata() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.ATTRIBUTE, "result", 3, false, true, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString());  when(telemetryService.saveAttrAndNotify(any(), any(), any(AttributeScope.class), anyString(), anyDouble())) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAttrAndNotify(any(), any(), any(AttributeScope.class), anyString(), anyDouble());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("2.236", result); }
onMsg(TbContext ctx, TbMsg msg) { locks.computeIfAbsent(msg.getOriginator(), SemaphoreWithTbMsgQueue::new) .addToQueueAndTryProcess(msg, ctx, this::processMsgAsync); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
************************************
[+] input: testGetNextSibling() { Node function = root.getChild(0); Node def = function.getChild(0); Node identifier = function.getChild(1); Assertions.assertNull(root.getNextSibling()); Assertions."<AssertPlaceHolder>"; }
getNextSibling() { return getNextSibling(false); }
[*] target: assertEquals(identifier, def.getNextSibling())
[-] pred: org. junit. Assert. assertEquals ( identifier, def. getNextSibling() )
************************************
************************************
[+] input: shouldAddResizeListener() { component.onResize(event -> { });  List<EventListener<SplitterResizeEvent>> listeners = component.getEventListeners(SplitterResizeEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<SplitterResizeEvent>); }
onResize( EventListener<SplitterResizeEvent> listener) { return addResizeListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: AuthenticationException {  SurenessAccount account = DefaultAccount.builder("app1") .setPassword(Md5Util.md5(password + salt)) .setSalt(salt) .setOwnRoles(roles) .setDisabledAccount(Boolean.FALSE) .setExcessiveAttempts(Boolean.FALSE) .build(); LoginDto loginDto = LoginDto.builder() .credential(password) .identifier(identifier) .build();  when(accountProvider.loadAccount(identifier)).thenReturn(account);  Map<String, String> response = accountService.authGetToken(loginDto);  "<AssertPlaceHolder>"; assertNotNull(response.get("token")); assertNotNull(response.get("refreshToken")); assertNotNull(response.get("role")); assertEquals(JsonUtil.toJson(roles), response.get("role"));  }
authGetToken(LoginDto loginDto) throws AuthenticationException;
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: shouldFindCreditCardActivityByAmountInterval() {  BigDecimal min = BigDecimal.ONE; BigDecimal max = BigDecimal.valueOf(10000);  List<CrdCreditCardActivity> crdCreditCardActivityList = createDummyCrdCreditCardActivityList();  List<CrdCreditCardActivity> expectedResult = createDummyCrdCreditCardActivityList();  when(crdCreditCardActivityEntityService.findCreditCardActivityByAmountInterval(min,max)).thenReturn(crdCreditCardActivityList);  List<CrdCreditCardActivity> result = crdCreditCardActivityEntityService.findCreditCardActivityByAmountInterval(min,max);  "<AssertPlaceHolder>"; assertNotNull(result); }
findCreditCardActivityByAmountInterval(BigDecimal min, BigDecimal max) {  crdCreditCardActivityValidationService.controlIsParameterMinLargerThanMax(min,max);  List<CrdCreditCardActivity> crdCreditCardActivityList = crdCreditCardActivityEntityService.findCreditCardActivityByAmountInterval(min,max);  List<CrdCreditCardActivityDto> convertToCrdCreditCardDtoList = CrdCreditCardMapper.INSTANCE.convertToCrdCreditCardActivityDtoList(crdCreditCardActivityList);  return convertToCrdCreditCardDtoList; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testNormal() { when(scheduleUtil.criteria(anyString())).thenCallRealMethod(); Criteria mockId = scheduleUtil.criteria("mockId"); Assertions."<AssertPlaceHolder>"; Document criteriaObject = mockId.getCriteriaObject(); Assertions.assertNotNull(criteriaObject); Assertions.assertEquals(5, criteriaObject.size()); Assertions.assertTrue(criteriaObject.containsKey("is_deleted")); Assertions.assertTrue(criteriaObject.containsKey("source._id")); Assertions.assertTrue(criteriaObject.containsKey("sourceType")); Assertions.assertTrue(criteriaObject.containsKey("meta_type")); Assertions.assertTrue(criteriaObject.containsKey("taskId")); }
criteria(String dataSourceId) { return Criteria.where("is_deleted").ne(true) .and("source._id").is(dataSourceId) .and("sourceType").is(SourceTypeEnum.SOURCE.name()) .and("meta_type").ne("database") .and("taskId").exists(false); }
[*] target: assertNotNull(mockId)
[-] pred: org. junit. Assert. assertNotNull ( mockId )
************************************
************************************
[+] input: Exception { initHadoopSecurityContext();  // write file by proxy user. String fileContent = "hello world"; Path filePath = new Path("/alex/HadoopFilesystemProviderTest-testWriteAndReadBySecuredFilesystem.file"); FileSystem writeFs = HadoopFilesystemProvider.getFilesystem("alex", filePath, kerberizedHadoop.getConf());  boolean ok = writeFs.exists(new org.apache.hadoop.fs.Path("/alex")); "<AssertPlaceHolder>"; assertEquals("alex", writeFs.getFileStatus(new org.apache.hadoop.fs.Path("/alex")).getOwner());  FSDataOutputStream fsDataOutputStream = writeFs.create(filePath); BufferedWriter br = new BufferedWriter(new OutputStreamWriter(fsDataOutputStream, "UTF-8")); br.write(fileContent); br.close();  assertTrue(writeFs.exists(filePath)); assertEquals("alex", writeFs.getFileStatus(filePath).getOwner());  // Read content from HDFS by alex user directly UserGroupInformation readerUGI = UserGroupInformation.loginUserFromKeytabAndReturnUGI( kerberizedHadoop.getAlexPrincipal() + "@" + kerberizedHadoop.getKdc().getRealm(), kerberizedHadoop.getAlexKeytab()); readerUGI.doAs( (PrivilegedExceptionAction<Object>) () -> { FileSystem fs = FileSystem.get(kerberizedHadoop.getConf()); FSDataInputStream inputStream = fs.open(filePath); String fetchedResult = IOUtils.toString(inputStream); assertEquals(fileContent, fetchedResult); return null; }); }
getFilesystem(String user, Path path, Configuration configuration) throws Exception { UserGroupInformation.AuthenticationMethod authenticationMethod = SecurityUtil.getAuthenticationMethod(configuration); boolean needSecurity = authenticationMethod != UserGroupInformation.AuthenticationMethod.SIMPLE;  Callable<FileSystem> callable = () -> FileSystem.get(path.toUri(), configuration);  FileSystem fileSystem; if (needSecurity) { fileSystem = SecurityContextFactory.get().getSecurityContext().runSecured(user, callable); } else { fileSystem = callable.call(); }  if (fileSystem instanceof LocalFileSystem) { if (LOGGER.isDebugEnabled()) { LOGGER.debug("{} is local file system", path); } return ((LocalFileSystem) fileSystem).getRawFileSystem(); }  return fileSystem; }
[*] target: assertTrue(ok)
[-] pred: org. junit. Assert. assertTrue ( ok )
************************************
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("[{"b":1},{"b":2}]"));  Iterable<String> nodes = record.generatePaths("/*/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(2)); }
generatePaths(String pattern) { List<String> pointers = Arrays.asList(pattern.split("/"));  return generatePaths(node, pointers.subList(1, pointers.size()), ""); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
************************************
[+] input: testTrim() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("trim-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testTrim"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testTrim");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  OR price = 200";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), null)); }
parse() {  Map<String, SqlSource> sqlSourceMap = new HashMap<>();  XNode context = this.parser.evalNode("/mapper");  String namespace = context.getStringAttribute("namespace");  sqlElement(context.evalNodes("/mapper/sql"));  List<XNode> statements = context.evalNodes("select|insert|update|delete");  for (XNode node : statements) {  XMLStatementBuilder statementBuilder = new XMLStatementBuilder(node, sqlFragments); SqlSource sqlSource = statementBuilder.parseStatementNode();  String id = node.getStringAttribute("id"); String methodName = (namespace == null || namespace.length() == 0) ? id : String.format("%s.%s", namespace, id);  sqlSourceMap.put(methodName, sqlSource); }  return sqlSourceMap;  }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
************************************
[+] input: perform() { Concert concert = new Concert(new MockElvis()); concert.perform();  assertTrue(concert.isLightsOn()); "<AssertPlaceHolder>"; }
isMainStateOpen() { return mainStateOpen; }
[*] target: assertTrue(concert.isMainStateOpen())
[-] pred: org. junit. Assert. assertTrue ( concert. isMainStateOpen() )
************************************
************************************
[+] input: testGetByAddress() { Worker worker = workerDAO.getByAddress("127.0.0.1:25300");  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("xxx-service", worker.getAppName()); }
getByAddress(String address);
[*] target: assertNotNull(worker)
[-] pred: org. junit. Assert. assertNotNull ( worker )
************************************
************************************
[+] input: testGetClassesInPackage() { final ClassTreeHelper classTreeHelper = new ClassTreeHelper();  final FilterableTreeItem<ClassTreeNode> root = buildClassTree();  final List<LoadedClass> classesInPackage = classTreeHelper.getClassesInPackage(root, "org", null);  Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(classesInPackage.stream().allMatch(c -> c.getName().startsWith("org"))); }
getClassesInPackage(FilterableTreeItem<ClassTreeNode> classesTreeRoot, String fullPackageName, ClassLoaderDescriptor packageClassLoader) { return classesTreeRoot.streamVisible() .filter(p -> p.getType() == ClassTreeNode.Type.CLASS) .map(ClassTreeNode::getLoadedClass) .filter(c -> c.getName().startsWith(fullPackageName)) .filter(c -> (packageClassLoader == null) || packageClassLoader.equals(c.getClassLoaderDescriptor())) .collect(Collectors.toList()); }
[*] target: assertEquals(2, classesInPackage.size())
[-] pred: org. junit. Assert. assertEquals ( 2, classesInPackage. size ( ) )
************************************
************************************
[+] input: testLoopByConfigConfigValueIsCollectionButAllElementNotString() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); when(utils.getPythonConfig(any(File.class))).thenReturn(configMap); packages = new ArrayList<>(); packages.add("mock"); packages.add(100); when(configMap.get(PythonUtils.PYTHON_THREAD_SITE_PACKAGES_PATH)).thenReturn(packages); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Map.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1, 1); } }
loopByConfig(File config, Log logger, final String loopPath, final String pythonJarPath) { //按照配置文件来编译第三方Python包 Map<String, Object> configMap = getPythonConfig(config); Object sitePackages = configMap.get(PYTHON_THREAD_SITE_PACKAGES_PATH); if (sitePackages instanceof Collection) { Collection<String> packages = (Collection<String>) sitePackages; if (!packages.isEmpty()) { logger.info("Configuration files will be used for package compilation： {}", toJson(configMap)); List<File> path = new ArrayList<>(); for (Object name : packages) { if (null == name) continue; path.add(new File(concat(loopPath, String.valueOf(name)))); } if (!path.isEmpty()) { loopFiles(path, logger, pythonJarPath); return true; } } } return false; }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
************************************
[+] input: testForEach() { long[] keys = new long[]{1, 17, 33, 2, 18, 3};  LongObjMap<String> m = setupForEach(keys); int size = m.size(); m.forEach((k, v) -> false); assertEquals(0, m.size());  for (long key : keys) { m = setupForEach(keys); // remove the key from map though forEach m.forEach((k, v) -> k != key); assertEquals(size - 1, m.size()); assertNull(m.get(key)); for (long k : keys) { if (k != key) { assertEquals(String.valueOf(k), m.get(k)); } }  // re-put m.put(key, String.valueOf(key)); for (long k : keys) { assertEquals(String.valueOf(k), m.get(k)); } "<AssertPlaceHolder>"; } }
size() { return size; }
[*] target: assertEquals(size, m.size())
[-] pred: org. junit. Assert. assertEquals ( size, m. size() )
************************************
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("" + "{"a": [{"b":[{"a": 1},{"a": 1}]},{"b":[{"a": 1}]}]}" + ""));  Iterable<String> nodes = record.generatePaths("/a/*/b/*/a");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(3)); }
generatePaths(String pattern) { List<String> pointers = Arrays.asList(pattern.split("/"));  return generatePaths(node, pointers.subList(1, pointers.size()), ""); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
************************************
[+] input: IOException { DmWebViewReply dmWebViewReply = client.videoDanmakuView(885244431); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(dmWebViewReply.hasDmSge()); Assertions.assertTrue(dmWebViewReply.getDmSge().hasTotal()); logger.info("count:" + dmWebViewReply.getCount()); for (CommandDm commandDm : dmWebViewReply.getCommandDmsList()) { logger.info(commandDm.getMtime() + ">" + commandDm.getContent()); } }
videoDanmakuView(long oid) throws IOException { checkBuVid3BuVid4(); String url = ApiUtil.fillUrl(ApiUrlContainer.VIDEO_DANMAKU_VIEW, oid); byte[] data = httpJsonClient.getByteArray(url, requestHeader); return DmWebViewReply.parseFrom(data); }
[*] target: assertNotNull(dmWebViewReply)
[-] pred: org. junit. Assert. assertNotNull ( dmWebViewReply )
************************************
************************************
[+] input: ibgeMunicipiosPass() { IBGEMunicipio[] ibgeMunicipios1 = BrasilAPI.ibgeMunicipios("SE"); IBGEMunicipio[] ibgeMunicipios2 = BrasilAPI.ibgeMunicipios("SE", new String[] { "dados-abertos-br" }); "<AssertPlaceHolder>"; assertNotNull(ibgeMunicipios2); }
ibgeMunicipios(String siglaUF, String[] providers) { String providesParameter = "?providers=dados-abertos-br,gov,wikipedia"; if (providers != null) { providesParameter = "?providers="; for (String provider : providers) { providesParameter += provider + ","; } providesParameter = providesParameter.substring(0, providesParameter.length() - 1); }  IBGEMunicipio[] obj = (IBGEMunicipio[]) api(IBGEMunicipio[].class, "ibge/municipios/v1/", siglaUF + providesParameter); return obj != null ? (IBGEMunicipio[]) obj.clone() : null; }
[*] target: assertNotNull(ibgeMunicipios1)
[-] pred: org. junit. Assert. assertNotNull ( ibgeMunicipios1 )
************************************
************************************
[+] input: SQLException { when(mockHttpClient.execute(any(HttpUriRequest.class))).thenReturn( mockHttpGetSignInPageResponse, mockHttpPostSignInResponse); final String correctSamlAssertion = IOUtils.toString( Objects.requireNonNull( this.getClass().getClassLoader().getResourceAsStream("federated_auth/saml-assertion.txt")), "UTF-8") .replace("\n", "") .replace("\r", ""); final String samlAssertion = this.adfsCredentialsProviderFactory.getSamlAssertion(props); "<AssertPlaceHolder>";  final ArgumentCaptor<HttpUriRequest> httpPostArgumentCaptor = ArgumentCaptor.forClass(HttpUriRequest.class); verify(mockHttpClient, times(2)).execute(httpPostArgumentCaptor.capture()); final HttpEntityEnclosingRequest actualHttpPost = (HttpEntityEnclosingRequest) httpPostArgumentCaptor.getValue(); final String content = EntityUtils.toString(actualHttpPost.getEntity()); final String[] params = content.split("&"); assertEquals("UserName=" + USERNAME.replace("@", "%40"), params[0]); assertEquals("Password=" + PASSWORD, params[1]); assertEquals("Kmsi=true", params[2]); assertEquals("AuthMethod=FormsAuthentication", params[3]); }
getSamlAssertion(final @NonNull Properties props) throws SQLException { this.telemetryContext = telemetryFactory.openTelemetryContext(TELEMETRY_FETCH_SAML, TelemetryTraceLevel.NESTED);  try (final CloseableHttpClient httpClient = httpClientSupplier.get()) { String uri = getSignInPageUrl(props); final String signInPageBody = getSignInPageBody(httpClient, uri); final String action = getFormActionFromHtmlBody(signInPageBody);  if (!StringUtils.isNullOrEmpty(action) && action.startsWith("/")) { uri = getFormActionUrl(props, action); }  final List<NameValuePair> params = getParametersFromHtmlBody(signInPageBody, props); final String content = getFormActionBody(httpClient, uri, params);  final Matcher matcher = FederatedAuthPlugin.SAML_RESPONSE_PATTERN.matcher(content); if (!matcher.find()) { throw new IOException(Messages.get("AdfsCredentialsProviderFactory.failedLogin", new Object[] {content})); }  // return SAML Response value return matcher.group(FederatedAuthPlugin.SAML_RESPONSE_PATTERN_GROUP); } catch (final IOException e) { LOGGER.severe(Messages.get("SAMLCredentialsProviderFactory.getSamlAssertionFailed", new Object[] {e})); this.telemetryContext.setSuccess(false); this.telemetryContext.setException(e); throw new SQLException(e); } finally { this.telemetryContext.closeContext(); } }
[*] target: assertEquals(correctSamlAssertion, samlAssertion)
[-] pred: org. junit. Assert. assertEquals ( correctSamlAssertion, samlAssertion )
************************************
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(COMPARATOR.with(T), "left"), Parameter.of(COMPARATOR.with(U), "right"), Parameter.of(FUNCTION.with(V.asType().contravariant(), I.asType().covariant()), "toIntermediate"), Parameter.of(FUNCTION.with(I.asType().contravariant(), T.asType().covariant()), "extractLeft"), Parameter.of(FUNCTION.with(I.asType().contravariant(), U.asType().covariant()), "extractRight") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), I.asTypeParameter(), V.asTypeParameter());  ContravariantParametersAndTypeParametersValidator.Result result = new ContravariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), COMPARATOR.with(T), COMPARATOR.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
validateTypeParametersAndParameters(List<TypeParameter> typeParameters, List<Parameter> parameters, List<String> errorMessages) {  List<String> additionalErrorMessages = new ArrayList<>();  verifyParameterCount(parameters, 5, additionalErrorMessages); verifyTypeParameterCount(typeParameters, 4, additionalErrorMessages);  if (!additionalErrorMessages.isEmpty()) { errorMessages.addAll(additionalErrorMessages); return null; }  TypeParameter leftInputTypeConstructorArgument = typeParameters.get(0); TypeParameter rightInputTypeConstructorArgument = typeParameters.get(1); TypeParameter intermediateTypeConstructorArgument = typeParameters.get(2); TypeParameter returnTypeConstructorArgument = typeParameters.get(3);  Parameter leftParameter = parameters.get(0); Parameter rightParameter = parameters.get(1); Parameter toIntermediateParameter = parameters.get(2); Parameter extractLeftParameter = parameters.get(3); Parameter extractRightParameter = parameters.get(4);  // Check if the third parameter is as expected: Type expectedToIntermediateType = FUNCTION.with(returnTypeConstructorArgument.asType().contravariant(), intermediateTypeConstructorArgument.asType().covariant()); if (!Objects.equals(toIntermediateParameter.getType(), expectedToIntermediateType)) { additionalErrorMessages.add("Expected third argument to be a " + generateFrom(expectedToIntermediateType) + " but was " + generateFrom(toIntermediateParameter.getType())); }  // Check if the fourth parameter is as expected: Type expectedExtractLeftType = FUNCTION.with(intermediateTypeConstructorArgument.asType().contravariant(), leftInputTypeConstructorArgument.asType().covariant()); if (!Objects.equals(extractLeftParameter.getType(), expectedExtractLeftType)) { additionalErrorMessages.add("Expected fourth argument to be a " + generateFrom(expectedExtractLeftType) + " but was " + generateFrom(extractLeftParameter.getType())); }  // Check if the fourth parameter is as expected: Type expectedExtractRightType = FUNCTION.with(intermediateTypeConstructorArgument.asType().contravariant(), rightInputTypeConstructorArgument.asType().covariant()); if (!Objects.equals(extractRightParameter.getType(), expectedExtractRightType)) { additionalErrorMessages.add("Expected fifth argument to be a " + generateFrom(expectedExtractRightType) + " but was " + generateFrom(extractRightParameter.getType())); }  if (additionalErrorMessages.isEmpty()) { return Result.of( leftInputTypeConstructorArgument, rightInputTypeConstructorArgument, returnTypeConstructorArgument, leftParameter.getType(), rightParameter.getType() ); } else { errorMessages.addAll(additionalErrorMessages); return null; } }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: shouldReturnEmptyJwtResponseWithNoUserDetails() { JwtResponseBuilder jwtResponse = JwtResponseBuilder.buildJwtResponse(JWT_TOKEN); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(StringUtils.isBlank(jwtResponse.getAccessToken())); }
buildJwtResponse(final String jwtToken) { return buildJwtResponse(jwtToken, null); }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
************************************
[+] input: testEmpty() { list.clear(); Map<String, Integer> actual = taskService.inspectChart(user); Assertions."<AssertPlaceHolder>"; assertEquals(list.size(), actual.get("total")); assertEquals(0, actual.get("error")); assertEquals(0, actual.get("running")); assertEquals(0, actual.get("done")); assertEquals(0, actual.get("waiting")); assertEquals(0, actual.get("scheduling")); assertEquals(0, actual.get("stopping")); }
inspectChart(UserDetail user) { int error = 0; int running = 0; int done = 0; int waiting = 0; int scheduling = 0; int stopping = 0; int total = 0; List<InspectDto> inspectDtoList = inspectTaskList(new Filter(), user); if (CollectionUtils.isNotEmpty(inspectDtoList)) { total = inspectDtoList.size(); for (InspectDto taskDto : inspectDtoList) { String status = String.valueOf(taskDto.getStatus()).toLowerCase(); if (ERROR.getValue().equals(status)) { error++; } else if(RUNNING.getValue().equals(status)) { running++; } else if (DONE.getValue().equals(status)) { done++; } else if (WAITING.getValue().equals(status)) { waiting++; }else if (SCHEDULING.getValue().equals(status)) { scheduling++; }else if (STOPPING.getValue().equals(status)) { stopping++; } } }  Map<String, Integer> chart5 = new HashMap<>(); chart5.put(TOTAL, total); chart5.put("error", error); chart5.put("running", running); chart5.put("done", done); chart5.put("waiting", waiting); chart5.put("scheduling", scheduling); chart5.put("stopping", stopping); return chart5; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: prepareText_fromMessageParametersWithIssueUrl_generatesValidMessage() { ((DefaultTimeZoneProviderStub)defaultTimeZoneProvider).setTimeZone(ZoneId.of("+02:00"));  Instant instant = LocalDateTime .of(2023, 9, 1, 12, 30, 20) .toInstant(ZoneOffset.UTC);  IncidentNotificationMessage notificationMessage = SampleIncidentMessages.createSampleIncidentMessage(instant, IncidentStatus.acknowledged); notificationMessage.setIssueUrl("https://www.google.com");  String message = sut.prepareText(notificationMessage);  "<AssertPlaceHolder>"; assertEquals(""" > The incident in <http://localhost:8888/sources/connection/connection_name/schema/schema_here/table/table_name_here/detail | schema_here.table_name_here> table has been acknowledged.\s > \s > First seen: 2023-09-01 14:30:20 (GMT+2)\s > Last seen: 2023-09-01 14:30:20 (GMT+2)\s > Quality dimension: Reasonableness\s > Check category: volume\s > Highest severity: fatal\s > Total data quality issues: 10\s > Table priority: 2\s > Issue url: <https://www.google.com | LINK>\s > \s > <http://localhost:8888/incidents/connection_name/2023/9/1 | View in DQOps>\s """.replaceAll("\\s+", ""), message.replaceAll("\\s+", "") ); }
prepareText(IncidentNotificationMessage notificationMessage){  String fullTableNameWithLink = formatToLink( prepareUrlToTable(notificationMessage), notificationMessage.getSchema() + "." + notificationMessage.getTable() );  StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(getBlockQuotedLine(prepareHeader(notificationMessage.getStatus(), fullTableNameWithLink ))); stringBuilder.append(getBlockQuotedLine(""));  stringBuilder.append(extractInstantWithFormatting(notificationMessage.getFirstSeen(), IncidentsColumnNames.FIRST_SEEN_COLUMN_NAME)); if(!notificationMessage.getStatus().equals(IncidentStatus.open)){ stringBuilder.append(extractInstantWithFormatting(notificationMessage.getLastSeen(), IncidentsColumnNames.LAST_SEEN_COLUMN_NAME)); } stringBuilder.append(extractStringWithFormatting(notificationMessage.getQualityDimension(), IncidentsColumnNames.QUALITY_DIMENSION_COLUMN_NAME)); stringBuilder.append(extractStringWithFormatting(notificationMessage.getCheckCategory(), IncidentsColumnNames.CHECK_CATEGORY_COLUMN_NAME)); stringBuilder.append(String.format(getBlockQuotedLine(KEY_VALUE_FORMAT), readableColumnName(IncidentsColumnNames.HIGHEST_SEVERITY_COLUMN_NAME), RuleSeverityLevel.fromSeverityLevel(notificationMessage.getHighestSeverity()).name())); stringBuilder.append( String.format(getBlockQuotedLine(KEY_VALUE_FORMAT), "Total data quality issues", notificationMessage.getFailedChecksCount())); stringBuilder.append(extractIntWithFormatting(notificationMessage.getTablePriority(), IncidentsColumnNames.TABLE_PRIORITY_COLUMN_NAME));  if (notificationMessage.getIssueUrl() != null && !notificationMessage.getIssueUrl().isEmpty()) { stringBuilder.append( String.format(getBlockQuotedLine(KEY_VALUE_FORMAT), readableColumnName(IncidentsColumnNames.ISSUE_URL_COLUMN_NAME), formatToLink(notificationMessage.getIssueUrl(), "LINK"))); }  stringBuilder.append(extractStringWithFormatting(notificationMessage.getDataGroupName(), IncidentsColumnNames.DATA_GROUP_NAME_COLUMN_NAME)); stringBuilder.append(extractStringWithFormatting(notificationMessage.getCheckType(), IncidentsColumnNames.CHECK_TYPE_COLUMN_NAME)); stringBuilder.append(extractStringWithFormatting(notificationMessage.getCheckName(), IncidentsColumnNames.CHECK_NAME_COLUMN_NAME));  if (notificationMessage.getMessage() != null) { stringBuilder.append(extractStringWithFormatting(notificationMessage.getMessage(), "Message")); }  stringBuilder.append(getBlockQuotedLine(""));  stringBuilder.append(getBlockQuotedLine(formatToLink( prepareUrlToIncident(notificationMessage), "View in DQOps" )));  return stringBuilder.toString(); }
[*] target: assertNotNull(message)
[-] pred: org. junit. Assert. assertNotNull ( message )
************************************
************************************
[+] input: IOException { VideoDetail videoDetail = client.getVideoDetail("BV1Jx411o7aW"); Assertions."<AssertPlaceHolder>"; VideoInfo videoInfo = videoDetail.getVideoInfo(); Assertions.assertNotNull(videoInfo); VideoData videoData = videoInfo.getVideoData(); Assertions.assertNotNull(videoData); BilibiliResponse<PlayInfo> playInfoResponse = videoDetail.getPlayInfoResponse(); Assertions.assertNotNull(playInfoResponse); Assertions.assertNotNull(playInfoResponse.getCode()); if (ErrorCode.SUCCESS == playInfoResponse.getCode()) { PlayInfo playInfo = playInfoResponse.getData(); Assertions.assertNotNull(playInfo); PlayDash dash = playInfo.getDash(); Assertions.assertNotNull(dash); List<PlayDashInfo> videoList = dash.getVideo(); List<PlayDashInfo> audioList = dash.getAudio(); Assertions.assertNotNull(videoList); Assertions.assertFalse(videoList.isEmpty()); Assertions.assertNotNull(audioList); Assertions.assertFalse(audioList.isEmpty()); String videoDataMessage = String.format("BV:%s, title:%s, desc:%s", videoInfo.getBvid(), videoData.getTitle(), videoData.getDesc()); logger.info(videoDataMessage); Season season = videoData.getUgcSeason(); if (Objects.nonNull(season)) { String seasonMessage = String.format("Season title:%s, intro:%s, cover:%s", season.getTitle(), season.getIntro(), season.getCover()); logger.info(seasonMessage); if (Objects.nonNull(season.getSections())) { for (SeasonSection section : season.getSections()) { String sectionMessage = String.format("Section title:%s, type:%d, isActive:%b", section.getTitle(), section.getType(), section.getActive()); logger.info(sectionMessage); if (Objects.nonNull(section.getEpisodes())) { for (SectionEpisode episode : section.getEpisodes()) { String episodeMessage = String.format("Episode title:%s, bv:%s", episode.getTitle(), episode.getBvId()); if (Objects.nonNull(episode.getArc())) { episodeMessage += String.format(", arc.pic:%s", episode.getArc().getPic()); } logger.info(episodeMessage); } } } } } for (PlayDashInfo video : videoList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", video.getMimeType(), video.getCodecs(), video.getId(), video.getBaseUrl()); logger.info(message); } for (PlayDashInfo audio : audioList) { String message = String.format("mimeType:%s, codecs:%s, quality:%s, baseUrl:%s", audio.getMimeType(), audio.getCodecs(), audio.getId(), audio.getBaseUrl()); logger.info(message); } } else { logger.info("get play info fail:" + playInfoResponse.getMessage()); } }
getVideoDetail(String bv) throws IOException { checkBuVid3BuVid4(); return getVideoDetail(bv, 1); }
[*] target: assertNotNull(videoDetail)
[-] pred: org. junit. Assert. assertNotNull ( videoDetail )
************************************
************************************
[+] input: liveMirror() { Project project = ProjectBuilder.builder().build(); project.getPlugins().apply("com.gtnewhorizons.retrofuturagradle"); ModUtils modUtils = project.getExtensions().getByType(ModUtils.class); "<AssertPlaceHolder>"; assertNotNull( modUtils.getLiveMirrorURL(10000, "https://example.com", "https://www.iana.org/help/example-domains")); }
apply(Project project) { project.getPluginManager().apply(JavaLibraryPlugin.class);  if (GradleVersion.current().compareTo(GradleVersion.version("7.6")) < 0) { throw new IllegalStateException("Using RetroFuturaGradle requires at least Gradle 7.6."); }  RfgCacheService.register(project.getGradle());  // Register the obfuscation status attribute ObfuscationAttribute.configureProject(project);  // Register the `minecraft {...}` block final MinecraftExtension mcExt = project.getExtensions().create("minecraft", MinecraftExtension.class, project);  final MinecraftTasks mcTasks = new MinecraftTasks(project, mcExt); project.getExtensions().add("minecraftTasks", mcTasks); final MCPTasks mcpTasks = new MCPTasks(project, mcExt, mcTasks); project.getExtensions().add("mcpTasks", mcpTasks); final ModUtils modUtils = new ModUtils(project, mcExt, mcTasks, mcpTasks); project.getExtensions().add("modUtils", modUtils); }
[*] target: assertNotNull(modUtils)
[-] pred: org. junit. Assert. assertNotNull ( modUtils )
************************************
************************************
[+] input: testGetTableNameOnlyHaveTapEvent() { when(tapdataEvent.getMessageEntity()).thenReturn(null); when(tapdataEvent.getTapEvent()).thenReturn(tapInsertRecordEvent); tapdataEvent.setTapEvent(tapInsertRecordEvent); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); verify(tapdataEvent, new Times(1)).getTapEvent(); "<AssertPlaceHolder>"; assertEquals(TABLE_NAME2, tableName); }
getTableName(TapdataEvent tapdataEvent) { if (null == tapdataEvent) return ""; MessageEntity messageEntity = tapdataEvent.getMessageEntity(); TapEvent tapEvent = tapdataEvent.getTapEvent(); if (null != messageEntity) { return messageEntity.getTableName(); } else { if (tapEvent instanceof TapBaseEvent) { return ((TapBaseEvent) tapEvent).getTableId(); } else { return ""; } } }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
************************************
[+] input: testFailWithBaseException() { Result result = Result.fail(new BaseException()); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.SYSTEM_ERROR.getCode()); }
isFail() { return !isSuccess(); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
************************************
[+] input: IOException { BilibiliResponse<UserNav> navResponse = client.nav(); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(navResponse.getData()); WbiImg wbiImg = navResponse.getData().getWbiImg(); Assertions.assertNotNull(wbiImg); BilibiliResponse<SpaceSearchResult> response = client.spaceSearch(1, 50, 423895, WbiUtil.getMixinKey(wbiImg.getImgKey(), wbiImg.getSubKey())); Assertions.assertNotNull(response); Assertions.assertEquals(response.getCode(), 0, response.getMessage()); Assertions.assertNotNull(response.getData()); Assertions.assertNotNull(response.getData().getList()); List<SearchVideoInfo> list = response.getData().getList().getVlist(); if (list != null) { for (SearchVideoInfo video : list) { String message = String.format("BV:%s, title:%s, author:%s", video.getBvId(), ApiUtil.removeSearchHighlight(video.getTitle()), ApiUtil.removeSearchHighlight(video.getAuthor())); logger.info(message); } } }
nav() throws IOException { checkBuVid3BuVid4(); return httpJsonClient.getJson(ApiUrlContainer.USER_NAV, new TypeReference<BilibiliResponse<UserNav>>() { }, requestHeader); }
[*] target: assertNotNull(navResponse)
[-] pred: org. junit. Assert. assertNotNull ( navResponse )
************************************
************************************
[+] input: testGetLibPathNormal() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(urls); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(stream, libPath); Assertions.assertEquals(mockPath, ato.get()); verify((URLClassLoader)classLoader, times(1)).getURLs(); assertVerify(1, 1, 1); }
getLibPath(String jarName, AtomicReference<String> ato) throws IOException { InputStream pyJarPath = null; ClassLoader classLoader = getCurrentThreadContextClassLoader(); if (classLoader instanceof URLClassLoader) { URL[] urls = ((URLClassLoader) classLoader).getURLs(); for (URL url : urls) { String jarPath = url.getPath(); if (jarPath.contains(jarName)) { pyJarPath = url.openStream(); ato.set(jarPath); break; } } } return pyJarPath; }
[*] target: assertNotNull(libPath)
[-] pred: org. junit. Assert. assertNotNull ( libPath )
************************************
************************************
[+] input: test() { SortedMap<PartitionRange, List<ServerNode>> sortedMap = new TreeMap<>(); for (int i = 0; i < 9; i = i + 3) { PartitionRange range = new PartitionRange(i, i + 2); List<ServerNode> nodes = Collections.singletonList( new ServerNode( String.valueOf(i), "127.0.0." + i, i / 3, 0, 0, 0, 0, Sets.newHashSet("test"))); sortedMap.put(range, nodes); }  PartitionRangeAssignment partitionRangeAssignment = new PartitionRangeAssignment(sortedMap); List<RssProtos.PartitionRangeAssignment> res = partitionRangeAssignment.convertToGrpcProto(); assertEquals(3, res.size());  for (int i = 0; i < 3; ++i) { RssProtos.PartitionRangeAssignment pra = res.get(i); assertEquals(1, pra.getServerCount()); assertEquals(i, pra.getServer(0).getPort()); assertEquals(3 * i, pra.getStartPartition()); assertEquals(3 * i + 2, pra.getEndPartition()); }  partitionRangeAssignment = new PartitionRangeAssignment(null); res = partitionRangeAssignment.convertToGrpcProto(); "<AssertPlaceHolder>"; }
isEmpty() { return assignments == null || assignments.isEmpty(); }
[*] target: assertTrue(res.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( res. isEmpty() )
************************************
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(UNARY_OPERATOR.with(T), "left"), Parameter.of(UNARY_OPERATOR.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "combinator"), Parameter.of(FUNCTION.with(V.asType().contravariant(), I.asType().covariant()), "toIntermediate"), Parameter.of(FUNCTION.with(I.asType().contravariant(), T.asType().covariant()), "extractLeft"), Parameter.of(FUNCTION.with(I.asType().contravariant(), U.asType().covariant()), "extractRight") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), I.asTypeParameter(), V.asTypeParameter());  InvariantParametersAndTypeParametersValidator.Result result = new InvariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), UNARY_OPERATOR.with(T), UNARY_OPERATOR.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
validateTypeParametersAndParameters(List<TypeParameter> typeParameters, List<Parameter> parameters, List<String> errorMessages) { List<String> additionalErrorMessages = new ArrayList<>();  verifyParameterCount(parameters, 6, additionalErrorMessages); verifyTypeParameterCount(typeParameters, 4, additionalErrorMessages);  if (!additionalErrorMessages.isEmpty()) { errorMessages.addAll(additionalErrorMessages); return null; }  TypeParameter leftInputTypeConstructorArgument = typeParameters.get(0); TypeParameter rightInputTypeConstructorArgument = typeParameters.get(1); TypeParameter intermediateTypeConstructorArgument = typeParameters.get(2); TypeParameter returnTypeConstructorArgument = typeParameters.get(3);  Parameter leftParameter = parameters.get(0); Parameter rightParameter = parameters.get(1); Parameter combinatorParameter = parameters.get(2); Parameter toIntermediateParameter = parameters.get(3); Parameter extractLeftParameter = parameters.get(4); Parameter extractRightParameter = parameters.get(5);  // Check if the third parameter is as expected: Type expectedCombinatorType = BI_FUNCTION.with(leftInputTypeConstructorArgument.asType().contravariant(), rightInputTypeConstructorArgument.asType().contravariant(), returnTypeConstructorArgument.asType().covariant()); if (!Objects.equals(combinatorParameter.getType(), expectedCombinatorType)) { additionalErrorMessages.add("Expected third argument to be a " + generateFrom(expectedCombinatorType) + " but was " + generateFrom(combinatorParameter.getType())); }  // Check if the fourth parameter is as expected: Type expectedToIntermediateType = FUNCTION.with(returnTypeConstructorArgument.asType().contravariant(), intermediateTypeConstructorArgument.asType().covariant()); if (!Objects.equals(toIntermediateParameter.getType(), expectedToIntermediateType)) { additionalErrorMessages.add("Expected fourth argument to be a " + generateFrom(expectedToIntermediateType) + " but was " + generateFrom(toIntermediateParameter.getType())); }  // Check if the fifth parameter is as expected: Type expectedExtractLeftType = FUNCTION.with(intermediateTypeConstructorArgument.asType().contravariant(), leftInputTypeConstructorArgument.asType().covariant()); if (!Objects.equals(extractLeftParameter.getType(), expectedExtractLeftType)) { additionalErrorMessages.add("Expected fifth argument to be a " + generateFrom(expectedExtractLeftType) + " but was " + generateFrom(extractLeftParameter.getType())); }  // Check if the sixth parameter is as expected: Type expectedExtractRightType = FUNCTION.with(intermediateTypeConstructorArgument.asType().contravariant(), rightInputTypeConstructorArgument.asType().covariant()); if (!Objects.equals(extractRightParameter.getType(), expectedExtractRightType)) { additionalErrorMessages.add("Expected sixth argument to be a " + generateFrom(expectedExtractRightType) + " but was " + generateFrom(extractRightParameter.getType())); }  if (additionalErrorMessages.isEmpty()) { return Result.of( leftInputTypeConstructorArgument, rightInputTypeConstructorArgument, returnTypeConstructorArgument, leftParameter.getType(), rightParameter.getType() ); } else { errorMessages.addAll(additionalErrorMessages); return null; } }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: shouldAddOpenListener() { component.onSelect(event -> { });  List<EventListener<GoogleChartSelectedEvent>> listeners = component.getEventListeners(GoogleChartSelectedEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<GoogleChartSelectedEvent>); }
onSelect( EventListener<GoogleChartSelectedEvent> listener) { return addSelectedListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testBasicForeach() { XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("foreach-basic-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testForeach"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testForeach");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND (name = 'Jonathan')";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Jonathan", "Mcintosh"]}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND (\n" + "    name = 'Jonathan'\n" + "    OR name = 'Fuji'\n" + "  )";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Jonathan","Mcintosh", "Fuji"]}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'\n" + "  AND ()";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"apples":["Mcintosh"]}")); }
parse() {  Map<String, SqlSource> sqlSourceMap = new HashMap<>();  XNode context = this.parser.evalNode("/mapper");  String namespace = context.getStringAttribute("namespace");  sqlElement(context.evalNodes("/mapper/sql"));  List<XNode> statements = context.evalNodes("select|insert|update|delete");  for (XNode node : statements) {  XMLStatementBuilder statementBuilder = new XMLStatementBuilder(node, sqlFragments); SqlSource sqlSource = statementBuilder.parseStatementNode();  String id = node.getStringAttribute("id"); String methodName = (namespace == null || namespace.length() == 0) ? id : String.format("%s.%s", namespace, id);  sqlSourceMap.put(methodName, sqlSource); }  return sqlSourceMap;  }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
************************************
[+] input: testRemoveUsersByLogin() { var users = new MemoryUsers();  try { users .addRole("role1") .addRole("role2") .addRole("role3") .addUser("login1", new RoleUserAttributes("thepassword")) .addUser("login2", new RoleUserAttributes("thepassword2", new String[]{"role1", "role2"})) .addUser("login3", new RoleUserAttributes("thepassword3", new String[]{"role1", "role2", "role3"})) .addUser("login4", new RoleUserAttributes(174, "thepassword4", new String[]{"role2", "role3"}));  assertEquals(4, users.countUsers()); assertFalse(users.removeUser("login5")); assertEquals(4, users.countUsers()); assertTrue(users.removeUser("login4")); assertEquals(3, users.countUsers()); assertTrue(users.removeUser("login1")); assertEquals(2, users.countUsers()); assertTrue(users.removeUser("login2")); assertEquals(1, users.countUsers()); assertTrue(users.removeUser("login3")); "<AssertPlaceHolder>"; } catch (CredentialsManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
countUsers() { readLock_.lock(); try { return users_.size(); } finally { readLock_.unlock(); } }
[*] target: assertEquals(0, users.countUsers())
[-] pred: org. junit. Assert. assertEquals ( 0, users. countUsers ( ) )
************************************
************************************
[+] input: test_When_getPaymentDetailsByOrderId_isSuccess() {  TransactionDetails transactionDetails = getMockTransactionDetails();  when(transactionDetailsRepository.findByOrderId(anyLong())).thenReturn(Optional.of(transactionDetails));  //Actual PaymentResponse paymentResponse = paymentService.getPaymentDetailsByOrderId(1);  //Verification verify(transactionDetailsRepository, times(1)).findByOrderId(anyLong());  //Assert "<AssertPlaceHolder>"; assertEquals(transactionDetails.getId(), paymentResponse.getPaymentId()); }
getPaymentDetailsByOrderId(long orderId) {  log.info("PaymentServiceImpl | getPaymentDetailsByOrderId is called");  log.info("PaymentServiceImpl | getPaymentDetailsByOrderId | Getting payment details for the Order Id: {}", orderId);  TransactionDetails transactionDetails = transactionDetailsRepository.findByOrderId(orderId) .orElseThrow(() -> new PaymentServiceCustomException( "TransactionDetails with given id not found", "TRANSACTION_NOT_FOUND"));  PaymentResponse paymentResponse = PaymentResponse.builder() .paymentId(transactionDetails.getId()) .paymentMode(PaymentMode.valueOf(transactionDetails.getPaymentMode())) .paymentDate(transactionDetails.getPaymentDate()) .orderId(transactionDetails.getOrderId()) .status(transactionDetails.getPaymentStatus()) .amount(transactionDetails.getAmount()) .build();  log.info("PaymentServiceImpl | getPaymentDetailsByOrderId | paymentResponse: {}", paymentResponse.toString());  return paymentResponse; }
[*] target: assertNotNull(paymentResponse)
[-] pred: org. junit. Assert. assertNotNull ( paymentResponse )
************************************
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { SampleEntitlementId id1 = new SampleEntitlementId("cat", "jit-1"); SampleEntitlementId id2 = new SampleEntitlementId("cat", "jit-1");  assertTrue(id1.equals(id2)); "<AssertPlaceHolder>"; }
hashCode() { return id().hashCode(); }
[*] target: assertEquals(id1.hashCode(), id2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( id1. hashCode ( ), id2. hashCode ( ) )
************************************
************************************
[+] input: shouldGetCardActivityAnalysis() {  List<CrdCreditCardActivityAnalysisDto> crdCreditCardActivityAnalysisDtoList = createDummyCrdCreditCardActivityAnalysisDtoList();  List<CrdCreditCardActivityAnalysisDto> expectedResult = createDummyCrdCreditCardActivityAnalysisDtoList();  when(crdCreditCardActivityEntityService.getCardActivityAnalysis(1L)).thenReturn(crdCreditCardActivityAnalysisDtoList);  List<CrdCreditCardActivityAnalysisDto> result = crdCreditCardActivityEntityService.getCardActivityAnalysis(1L);  "<AssertPlaceHolder>"; assertNotNull(result);  }
getCardActivityAnalysis(Long creditCardId) {  crdCreditCardActivityValidationService.controlIsCreditCardExist(creditCardId);  List<CrdCreditCardActivityAnalysisDto> crdCreditCardActivityAnalysisDtoList = crdCreditCardActivityEntityService.getCardActivityAnalysis(creditCardId);  return crdCreditCardActivityAnalysisDtoList; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testForEach() { int[] keys = new int[]{1, 17, 33, 2, 18, 3};  IntObjMap<String> m = setupForEach(keys); int size = m.size(); m.forEach((k, v) -> false); assertEquals(0, m.size());  for (int key : keys) { m = setupForEach(keys); // remove the key from map though forEach m.forEach((k, v) -> k != key); assertEquals(size - 1, m.size()); assertNull(m.get(key)); for (int k : keys) { if (k != key) { assertEquals(String.valueOf(k), m.get(k)); } }  // re-put m.put(key, String.valueOf(key)); for (int k : keys) { assertEquals(String.valueOf(k), m.get(k)); } "<AssertPlaceHolder>"; } }
size() { return size; }
[*] target: assertEquals(size, m.size())
[-] pred: org. junit. Assert. assertEquals ( size, m. size() )
************************************
************************************
[+] input: testGetLibPathIsURLClassLoaderButURLsIsEmpty() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(URLClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); when(((URLClassLoader)classLoader).getURLs()).thenReturn(new URL[]{}); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 0, 0); }
getLibPath(String jarName, AtomicReference<String> ato) throws IOException { InputStream pyJarPath = null; ClassLoader classLoader = getCurrentThreadContextClassLoader(); if (classLoader instanceof URLClassLoader) { URL[] urls = ((URLClassLoader) classLoader).getURLs(); for (URL url : urls) { String jarPath = url.getPath(); if (jarPath.contains(jarName)) { pyJarPath = url.openStream(); ato.set(jarPath); break; } } } return pyJarPath; }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
************************************
[+] input: IOException { BilibiliResponse<BilibiliPageInfo<VideoData>> response = client.popular(1, 50); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(response.getCode()); Assertions.assertEquals(response.getCode(), ErrorCode.SUCCESS); Assertions.assertNotNull(response.getData()); List<VideoData> list = response.getData().getList(); Assertions.assertNotNull(list); Assertions.assertFalse(list.isEmpty()); for (VideoData videoData : list) { Assertions.assertNotNull(videoData); Assertions.assertNotNull(videoData.getOwner()); logger.info("推荐视频:" + videoData.getTitle() + "[" + videoData.getBvid() + "]" + " " + videoData.getOwner().getName()); } }
popular(int pageNum, int pageSize) throws IOException { checkBuVid3BuVid4(); String url = ApiUtil.fillUrl(ApiUrlContainer.POPULAR, pageNum, pageSize); return httpJsonClient.getJson(url, new TypeReference<BilibiliResponse<BilibiliPageInfo<VideoData>>>() { }, requestHeader); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: byDefault() {  final String[] args = { };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.TUMBLING); assertEquals(options.getName(), "foo"); }
parse(final Class<T> optionsClass, final String[] args) {  final T options = create(optionsClass);  JCommander jCommander = JCommander.newBuilder() .addObject(options) .build();  //easiest way to set configuration through docker. //similar to how Confluent does this in their Docker images. OptionsUtil.populateByEnvironment(options);  jCommander.parse(args);  if (options.isHelp()) { jCommander.usage(); return null; }  return options; }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { GroupKey id1 = new GroupKey("group-1"); GroupKey id2 = new GroupKey("group-1");  assertTrue(id1.equals(id2)); "<AssertPlaceHolder>"; }
hashCode() { return Objects.hash(this.id); }
[*] target: assertEquals(id1.hashCode(), id2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( id1. hashCode ( ), id2. hashCode ( ) )
************************************
************************************
[+] input: SQLException { RdsHostListProvider.clearAll();  RdsHostListProvider provider1 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://cluster-a.cluster-xyz.us-east-2.rds.amazonaws.com/")); provider1.init(); final List<HostSpec> topologyClusterA = Arrays.asList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-1.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.WRITER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-2.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build(), new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("instance-a-3.xyz.us-east-2.rds.amazonaws.com") .port(HostSpec.NO_PORT) .role(HostRole.READER) .build());  doReturn(topologyClusterA).when(provider1).queryForTopology(any(Connection.class));  assertEquals(0, RdsHostListProvider.topologyCache.size());  final List<HostSpec> topologyProvider1 = provider1.refresh(Mockito.mock(Connection.class)); assertEquals(topologyClusterA, topologyProvider1);  RdsHostListProvider provider2 = Mockito.spy( getRdsHostListProvider(mockHostListProviderService, "jdbc:something://instance-a-3.xyz.us-east-2.rds.amazonaws.com/")); provider2.init();  assertEquals(provider1.clusterId, provider2.clusterId); assertTrue(provider1.isPrimaryClusterId); assertTrue(provider2.isPrimaryClusterId);  final List<HostSpec> topologyProvider2 = provider2.refresh(Mockito.mock(Connection.class)); "<AssertPlaceHolder>";  assertEquals(1, RdsHostListProvider.topologyCache.size()); }
refresh(final Connection connection) throws SQLException { init(); final Connection currentConnection = connection != null ? connection : this.hostListProviderService.getCurrentConnection();  final FetchTopologyResult results = getTopology(currentConnection, false); LOGGER.finest(() -> Utils.logTopology(results.hosts, results.isCachedData ? "[From cache] " : ""));  this.hostList = results.hosts; return Collections.unmodifiableList(hostList); }
[*] target: assertEquals(topologyClusterA, topologyProvider2)
[-] pred: org. junit. Assert. assertEquals ( topologyClusterA, topologyProvider2 )
************************************
************************************
[+] input: resolveFileFormat_whenOnlyPathsSetOnFileFormat_retunsFormParametersWithPathsFormTable() { String sampleFileName = SampleCsvFileNames.continuous_days_one_row_per_day; TableSpec tableSpec = new TableSpec(new PhysicalTableName("schema_name_example", "table_name_example")); tableSpec.setFileFormat( new FileFormatSpec() {{ setFilePaths(new FilePathListSpec(){{ add(SampleDataFilesProvider.getFile(sampleFileName).toString()); }}); }});  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }});  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertFalse(fileFormatSpec.getCsv().getAutoDetect()); }
resolveFileFormat(DuckdbParametersSpec duckdbParametersSpec, TableSpec tableSpec) { DuckdbFilesFormatType filesType = duckdbParametersSpec.getFilesFormatType(); if (filesType == null) { throw new RuntimeException("The files format is unknown. Please set files format on the connection."); }  FileFormatSpec fileFormat = tableSpec.getFileFormat() == null ? new FileFormatSpec() : tableSpec.getFileFormat().deepClone(); if(fileFormat.getFilePaths().isEmpty()){ FilePathListSpec filePathListSpec = guessFilePaths(duckdbParametersSpec, tableSpec); fileFormat.setFilePaths(filePathListSpec); }  if (fileFormat.isFormatSetForType(filesType)) { return fileFormat; }  FileFormatSpec fileFormatCloned = fileFormat.deepClone(); if (duckdbParametersSpec.isFormatSetForType()) { switch (filesType) { case csv: fileFormatCloned.setCsv(duckdbParametersSpec.getCsv().deepClone()); break; case json: fileFormatCloned.setJson(duckdbParametersSpec.getJson().deepClone()); break; case parquet: fileFormatCloned.setParquet(duckdbParametersSpec.getParquet().deepClone()); break; case iceberg: fileFormatCloned.setIceberg(duckdbParametersSpec.getIceberg().deepClone()); break; } return fileFormatCloned; }  fillDefaultFileFormat(fileFormatCloned, filesType); return fileFormatCloned; }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
************************************
[+] input: testNormal() { milestoneAspectTask.taskMilestone("code", consumer); MilestoneEntity code = milestones.get("code"); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals("code", code.getCode()); Assertions.assertEquals(MilestoneStatus.FINISH, code.getStatus()); verify(consumer).accept(any(MilestoneEntity.class)); }
taskMilestone(String code, Consumer<MilestoneEntity> consumer) { MilestoneEntity entity = milestones.get(code); if (null == entity) { synchronized (milestones) { entity = milestones.computeIfAbsent(code, s -> new MilestoneEntity(code, MilestoneStatus.WAITING)); } } if (null != consumer) { consumer.accept(entity); } }
[*] target: assertNotNull(code)
[-] pred: org. junit. Assert. assertNotNull ( code )
************************************
************************************
[+] input: byArguments() {  final String[] args = { "--window-type", "HOPPING", "--name", "bar" };  Options options = OptionsUtil.parse(Options.class, args);  "<AssertPlaceHolder>"; assertEquals(options.getWindowType(), WindowType.HOPPING); assertEquals(options.getName(), "bar"); }
parse(final Class<T> optionsClass, final String[] args) {  final T options = create(optionsClass);  JCommander jCommander = JCommander.newBuilder() .addObject(options) .build();  //easiest way to set configuration through docker. //similar to how Confluent does this in their Docker images. OptionsUtil.populateByEnvironment(options);  jCommander.parse(args);  if (options.isHelp()) { jCommander.usage(); return null; }  return options; }
[*] target: assertNotNull(options)
[-] pred: org. junit. Assert. assertNotNull ( options )
************************************
************************************
[+] input: Exception { SlackWebhookProperties props = new SlackWebhookProperties( "slackTest", SLACK_SIGNING_KEY, CHALLENGE_RESPONSE_VERIFICATION_FUNCTION); SlackConnectorPropertiesWrapper wrapper = new SlackConnectorPropertiesWrapper(props); when(ctx.bindProperties(SlackConnectorPropertiesWrapper.class)).thenReturn(wrapper); testObject = new SlackInboundWebhookExecutable(); final var requestTimeStamp = String.valueOf(now().toInstant().toEpochMilli()); Map<String, String> headers = Map.of( HEADER_SLACK_SIGNATURE, slackCurrentSignature(requestTimeStamp, URL_VERIFICATION_REQUEST), HEADER_SLACK_REQUEST_TIMESTAMP, requestTimeStamp); final var payload = mock(WebhookProcessingPayload.class); when(payload.method()).thenReturn("POST"); when(payload.headers()).thenReturn(headers); when(payload.rawBody()).thenReturn(URL_VERIFICATION_REQUEST.getBytes(UTF_8));  testObject.activate(ctx); final var result = testObject.verify(payload);  "<AssertPlaceHolder>"; assertThat(result.body()).isInstanceOf(Map.class); assertThat((Map) result.body()).containsEntry(FIELD_CHALLENGE, "aAaAaAaAaAaAaAaAaAaA"); }
verify(WebhookProcessingPayload payload) { verifySlackRequestAuthentic(payload); return Optional.ofNullable(props.verificationExpression()) .orElse(stringObjectMap -> null) .apply( Map.of( "body", bodyAsMap(payload.headers(), payload.rawBody()), "headers", payload.headers(), "params", payload.params())); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
************************************
[+] input: testGetTableNameNotTapBaseEvent() { when(tapdataEvent.getMessageEntity()).thenReturn(null); when(tapdataEvent.getTapEvent()).thenReturn(heartbeatEvent); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); "<AssertPlaceHolder>"; assertEquals("", tableName); }
getTableName(TapdataEvent tapdataEvent) { if (null == tapdataEvent) return ""; MessageEntity messageEntity = tapdataEvent.getMessageEntity(); TapEvent tapEvent = tapdataEvent.getTapEvent(); if (null != messageEntity) { return messageEntity.getTableName(); } else { if (tapEvent instanceof TapBaseEvent) { return ((TapBaseEvent) tapEvent).getTableId(); } else { return ""; } } }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
************************************
[+] input: Exception { String clientId = "22334455"; String clientSecret = "998877665544"; String cloudApiBaseUrl = "https://xray.cloud.getxray.app/api/v2"; String authenticationPayload = "{ "client_id": "" + clientId +"", "client_secret": "" + clientSecret +"" }"; String expectedToken = "00000000000000000000000000111111111111111111111111222222222222222222222223333333333333";  Log log = Mockito.mock(Log.class); OkHttpClient client = Mockito.mock(OkHttpClient.class); Builder responseBuilder = new Response.Builder(); responseBuilder.protocol(okhttp3.Protocol.HTTP_1_1); responseBuilder.request(new Request.Builder().url(cloudApiBaseUrl + "/authenticate").build()); responseBuilder.code(200); responseBuilder.message("OK"); responseBuilder.header("Content-Type", "application/json"); responseBuilder.body(okhttp3.ResponseBody.create("""+expectedToken+""", okhttp3.MediaType.parse("application/json"))); Response response = responseBuilder.build();  final Call remoteCall = Mockito.mock(Call.class); when(remoteCall.execute()).thenReturn(response); when(client.newCall(any())).thenReturn(remoteCall);  // OkHttpClient client2 = mockHttpClient("""+expectedToken+"""); String authToken = CommonCloud.authenticateXrayAPIKeyCredentials(log, true, client, clientId, clientSecret, cloudApiBaseUrl); "<AssertPlaceHolder>";  ArgumentCaptor<Request> req = ArgumentCaptor.forClass(Request.class); verify(client).newCall(req.capture()); assertEquals(cloudApiBaseUrl + "/authenticate", req.getValue().url().toString()); assertEquals("POST", req.getValue().method()); assertEquals("application/json; charset=utf-8", req.getValue().body().contentType().toString()); final Buffer buffer = new Buffer(); req.getValue().body().writeTo(buffer); assertEquals(authenticationPayload,  buffer.readUtf8()); }
authenticateXrayAPIKeyCredentials(Log logger,boolean verbose, OkHttpClient client, String clientId, String clientSecret, String cloudApiBaseUrl) throws IOException { String authenticationPayload = "{ "client_id": "" + clientId +"", "client_secret": "" + clientSecret +"" }"; RequestBody body = RequestBody.create(authenticationPayload, MEDIA_TYPE_JSON); String xrayCloudAuthenticateUrl = cloudApiBaseUrl + "/authenticate"; Request request = new Request.Builder().url(xrayCloudAuthenticateUrl).post(body).build(); CommonUtils.logRequest(logger, request, verbose); try (Response response = client.newCall(request).execute()) { CommonUtils.logResponse(logger, response, false); String responseBody = response.body().string(); if (response.isSuccessful()) { return responseBody.replace(""", ""); } else { throw new IOException("failed to authenticate " + response); } } }
[*] target: assertEquals(expectedToken, authToken)
[-] pred: org. junit. Assert. assertEquals ( expectedToken, authToken )
************************************
************************************
[+] input: shouldReturnJwtResponseWithMatchingToken() { JwtResponseBuilder jwtResponse = JwtResponseBuilder.buildJwtResponse(JWT_TOKEN, userDetailsBuilder); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(JWT_TOKEN, jwtResponse.getAccessToken()); }
buildJwtResponse( String jwToken, UserDetailsBuilder userDetails) {  var localUserDetails = userDetails; if (Objects.isNull(localUserDetails)) { localUserDetails = SecurityUtils.getAuthenticatedUserDetails(); }  if (Objects.nonNull(localUserDetails)) { List<String> roleList = new ArrayList<>(); for (GrantedAuthority authority : localUserDetails.getAuthorities()) { roleList.add(authority.getAuthority()); } return JwtResponseBuilder.builder() .accessToken(jwToken) .email(localUserDetails.getEmail()) .username(localUserDetails.getUsername()) .publicId(localUserDetails.getPublicId()) .type(SecurityConstants.BEARER) .roles(roleList) .build(); } return JwtResponseBuilder.builder().build(); }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("{"a": [{"b":1},{"b":2}]}"));  Iterable<String> nodes = record.generatePaths("/a/1/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(1)); }
generatePaths(String pattern) { List<String> pointers = Arrays.asList(pattern.split("/"));  return generatePaths(node, pointers.subList(1, pointers.size()), ""); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
************************************
[+] input: shouldAddRowDeselectListener() { table.onItemDeselect(event -> { });  List<EventListener<TableItemDeselectEvent>> listeners = table.getEventListeners(TableItemDeselectEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemDeselectEvent>); }
onItemDeselect( EventListener<TableItemDeselectEvent<T>> listener) { return addItemDeselectListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: configProperty() {  entityManager.createNativeQuery(""" INSERT INTO "REPOSITORY" ("ID", "ENABLED", "IDENTIFIER", "INTERNAL", "PASSWORD", "RESOLUTION_ORDER", "TYPE", "URL") VALUES (1, 'true', 'central', 'false', 'null', 2, 'MAVEN', 'https://repo1.maven.org/maven2/'); """).executeUpdate(); entityManager.createNativeQuery(""" INSERT INTO "REPOSITORY" ("ID", "ENABLED", "IDENTIFIER", "INTERNAL", "PASSWORD", "RESOLUTION_ORDER", "TYPE", "URL") VALUES (2, 'true', 'central2', 'false', 'null', 1, 'MAVEN', 'https://repo1.maven.org/maven2/123'); """).executeUpdate(); final List<Repository> config= repository .findEnabledRepositoriesByType(RepositoryType.MAVEN); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, config.get(0).getResolutionOrder()); Assertions.assertEquals(2, config.get(1).getResolutionOrder()); }
findEnabledRepositoriesByType(final RepositoryType type) { return find("type = :type AND enabled = :enabled ORDER BY resolutionOrder ASC", Parameters.with("type", type).and("enabled", true)) .withHint(HINT_READ_ONLY, true) .list(); }
[*] target: assertEquals(2, config.size())
[-] pred: org. junit. Assert. assertEquals ( 2, config. size ( ) )
************************************
************************************
[+] input: testSuccess() { Result success = Result.success(); "<AssertPlaceHolder>"; assertEquals(success.getCode(), "000000"); assertEquals(success.getMesg(), "处理成功"); }
isSuccess() { return SUCCESSFUL_CODE.equals(this.code); }
[*] target: assertTrue(success.isSuccess())
[-] pred: org. junit. Assert. assertTrue ( success. isSuccess ( ) )
************************************
************************************
[+] input: initialization() { final var s3ClientProvider = new S3ClientProvider(null);  assertNotNull(s3ClientProvider.configuration);  S3AsyncClient t = s3ClientProvider.universalClient(); "<AssertPlaceHolder>";  var config = new S3NioSpiConfiguration(); assertSame(config, new S3ClientProvider(config).configuration); }
universalClient() { return universalClient; }
[*] target: assertNotNull(t)
[-] pred: org. junit. Assert. assertNotNull ( t )
************************************
************************************
[+] input: test_sqrt_5_to_timeseries_and_metadata_and_data() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.TIME_SERIES, "result", 3, true, true, DataConstants.SERVER_SCOPE), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString()); when(telemetryService.saveAndNotify(any(), any(), any(TsKvEntry.class))) .thenReturn(Futures.immediateFuture(null));  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture()); verify(telemetryService, times(1)).saveAndNotify(any(), any(), any(TsKvEntry.class));  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var resultMetadata = resultMsg.getMetaData().getValue("result"); var resultData = JacksonUtil.toJsonNode(resultMsg.getData());  assertTrue(resultData.has("result")); assertEquals(2.236, resultData.get("result").asDouble(), 0.0);  assertNotNull(resultMetadata); assertEquals("2.236", resultMetadata); }
onMsg(TbContext ctx, TbMsg msg) { locks.computeIfAbsent(msg.getOriginator(), SemaphoreWithTbMsgQueue::new) .addToQueueAndTryProcess(msg, ctx, this::processMsgAsync); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
************************************
[+] input: shouldAddRowSelectListener() { table.onItemSelect(event -> { });  List<EventListener<TableItemSelectEvent>> listeners = table.getEventListeners(TableItemSelectEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemSelectEvent>); }
onItemSelect( EventListener<TableItemSelectEvent<T>> listener) { return addItemSelectListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testTrue() { InspectDto inspectDto = new InspectDto(); inspectDto.setInspectMethod(InspectMethod.FIELD.getValue()); inspectDto.setStatus(InspectStatusEnum.DONE.getValue()); inspectDto.setResult("failed"); inspectDto.setFlowId("test-flow-id");  List<String> errors = AutoRecoveryUtils.checkCanRecovery(inspectDto); Assertions.assertTrue(errors.isEmpty());  inspectDto.setInspectMethod(InspectMethod.JOINTFIELD.getValue()); errors = AutoRecoveryUtils.checkCanRecovery(inspectDto); Assertions."<AssertPlaceHolder>"; }
checkCanRecovery(InspectDto inspectDto) { List<String> errorCodes = new ArrayList<>(); if (!( InspectMethod.FIELD.getValue().equals(inspectDto.getInspectMethod()) || InspectMethod.JOINTFIELD.getValue().equals(inspectDto.getInspectMethod()) )) { errorCodes.add("Inspect.Recovery.NotFieldMethod"); } if (!InspectStatusEnum.DONE.getValue().equals(inspectDto.getStatus())) { errorCodes.add("Inspect.Recovery.StatusNotDone"); } if (!InspectResultEnum.FAILED.getValue().equals(inspectDto.getResult())) { errorCodes.add("Inspect.Recovery.ResultNotFound"); } if (null == inspectDto.getFlowId() || inspectDto.getFlowId().isEmpty()) { errorCodes.add("Inspect.Recovery.IsNotWithTask"); } return errorCodes; }
[*] target: assertTrue(errors.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( errors. isEmpty ( ) )
************************************
************************************
[+] input: testResolveMatrixParameters() { String url = "https://www.google.com.hk/search;q=java;oq=java;sourceid=chrome;es_sm=122;ie=UTF-8"; Map<String, List<String>> parametersMap = resolveMatrixParameters(url); Map<String, List<String>> expectedParametersMap = new LinkedHashMap<>(); expectedParametersMap.put("q", Arrays.asList("java")); expectedParametersMap.put("oq", Arrays.asList("java")); expectedParametersMap.put("sourceid", Arrays.asList("chrome")); expectedParametersMap.put("es_sm", Arrays.asList("122")); expectedParametersMap.put("ie", Arrays.asList("UTF-8"));  assertEquals(expectedParametersMap, parametersMap);  url = "https://www.google.com.hk/search"; parametersMap = resolveMatrixParameters(url); expectedParametersMap = emptyMap(); assertEquals(expectedParametersMap, parametersMap);  url = "https://www.google.com.hk/search;"; parametersMap = resolveMatrixParameters(url); expectedParametersMap = emptyMap(); "<AssertPlaceHolder>"; }
resolveMatrixParameters(String url) { int startIndex = url.indexOf(SEMICOLON_CHAR); if (startIndex == -1) { // The matrix separator ";" was not found return emptyMap(); }  int endIndex = url.indexOf(QUERY_STRING_CHAR); if (endIndex == -1) { // The query string separator "?" was not found endIndex = url.indexOf(SHARP_CHAR); } if (endIndex == -1) { // The fragment separator "#" was not found endIndex = url.length(); }  String matrixString = url.substring(startIndex, endIndex);  return resolveParameters(matrixString, SEMICOLON_CHAR); }
[*] target: assertEquals(expectedParametersMap, parametersMap)
[-] pred: org. junit. Assert. assertEquals ( expectedParametersMap, parametersMap )
************************************
************************************
[+] input: Exception { when(multipartFile.getBytes()).thenReturn("{"version":"1.3.0"}".getBytes()); try(MockedStatic<ParseRelMig> prm = Mockito.mockStatic(ParseRelMig.class)) { prm.when(() -> ParseRelMig.redirect(param)).thenCallRealMethod(); ParseRelMig redirect = ParseRelMig.redirect(param); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(ParseRelMig13OrMoreImpl.class.getName(), redirect.getClass().getName()); } }
redirect(ParseParam param) { try { MultipartFile multipartFile = param.getMultipartFile(); String relMig = new String(multipartFile.getBytes()); param.setRelMigStr(relMig); Map<String, Object> relMigInfo = (Map<String, Object>) new ObjectMapper().readValue(param.getRelMigStr(), Map.class); param.setRelMigInfo(relMigInfo); String version = String.valueOf(relMigInfo.get(KeyWords.VERSION)); Class<? extends ParseRelMig> instance = ParseRelMigFileVersionMapping.getInstance(version); Constructor<? extends ParseRelMig> declaredConstructor = instance.getDeclaredConstructor(ParseParam.class); return declaredConstructor.newInstance(param); } catch (Exception e) { throw new BizException("relMig.parse.failed", e.getMessage()); } }
[*] target: assertNotNull(redirect)
[-] pred: org. junit. Assert. assertNotNull ( redirect )
************************************
************************************
[+] input: testRemove() { future.addWaiter(f1); future.addWaiter(f2); future.addWaiter(f3); future.addWaiter(f4); future.removeWaiter(f2);//mid future.removeWaiter(f1);//head future.removeWaiter(f4);//tail future.removeWaiter(f3);//last one Assertions.assertNull(future.popHeadWaiter()); Assertions."<AssertPlaceHolder>"; }
popTailWaiter() { Fiber result = lastWaiter; if (result != null) { if (result == firstWaiter) { firstWaiter = null; lastWaiter = null; } else { lastWaiter = result.previousWaiter; lastWaiter.nextWaiter = null; result.previousWaiter = null; } } return result; }
[*] target: assertNull(future.popTailWaiter())
[-] pred: org. junit. Assert. assertNull ( future. popTailWaiter() )
************************************
************************************
[+] input: Exception { JSONRecord record = new JSONRecord(mapper.readTree("{"a": [{"b":1},{"b":2}]}"));  Iterable<String> nodes = record.generatePaths("/a/*/b");  "<AssertPlaceHolder>"; assertThat((int) StreamSupport.stream(nodes.spliterator(), false).count(), is(2)); }
generatePaths(String pattern) { List<String> pointers = Arrays.asList(pattern.split("/"));  return generatePaths(node, pointers.subList(1, pointers.size()), ""); }
[*] target: assertNotNull(nodes)
[-] pred: org. junit. Assert. assertNotNull ( nodes )
************************************
************************************
[+] input: testRemoveLast2() { deque.addFirst(1); deque.addFirst(2); assertEquals(Integer.valueOf(1), deque.removeLast()); assertEquals(Integer.valueOf(2), deque.get(0)); assertEquals(Integer.valueOf(2), deque.removeLast()); deque.removeLast(); assertNull(deque.removeLast()); "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(0, deque.size())
[-] pred: org. junit. Assert. assertEquals ( 0, deque. size() )
************************************
************************************
[+] input: resolveFileFormat_whenAvailableOnTableAndParameters_retunsFormTable() {  TableSpec tableSpec = new TableSpec(new PhysicalTableName("schema_name_example", "table_name_example")); tableSpec.setFileFormat(FileFormatSpecObjectMother.createForCsvFile(SampleCsvFileNames.continuous_days_one_row_per_day));  DuckdbParametersSpec duckdbParametersSpec = DuckdbConnectionSpecObjectMother.createForFiles(DuckdbFilesFormatType.csv).getDuckdb(); duckdbParametersSpec.setCsv(new CsvFileFormatSpec(){{ setAutoDetect(false); }});  FileFormatSpec fileFormatSpec = FileFormatSpecProvider.resolveFileFormat(duckdbParametersSpec, tableSpec);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, fileFormatSpec.getFilePaths().size()); Assertions.assertTrue(fileFormatSpec.getCsv().getAutoDetect()); }
resolveFileFormat(DuckdbParametersSpec duckdbParametersSpec, TableSpec tableSpec) { DuckdbFilesFormatType filesType = duckdbParametersSpec.getFilesFormatType(); if (filesType == null) { throw new RuntimeException("The files format is unknown. Please set files format on the connection."); }  FileFormatSpec fileFormat = tableSpec.getFileFormat() == null ? new FileFormatSpec() : tableSpec.getFileFormat().deepClone(); if(fileFormat.getFilePaths().isEmpty()){ FilePathListSpec filePathListSpec = guessFilePaths(duckdbParametersSpec, tableSpec); fileFormat.setFilePaths(filePathListSpec); }  if (fileFormat.isFormatSetForType(filesType)) { return fileFormat; }  FileFormatSpec fileFormatCloned = fileFormat.deepClone(); if (duckdbParametersSpec.isFormatSetForType()) { switch (filesType) { case csv: fileFormatCloned.setCsv(duckdbParametersSpec.getCsv().deepClone()); break; case json: fileFormatCloned.setJson(duckdbParametersSpec.getJson().deepClone()); break; case parquet: fileFormatCloned.setParquet(duckdbParametersSpec.getParquet().deepClone()); break; case iceberg: fileFormatCloned.setIceberg(duckdbParametersSpec.getIceberg().deepClone()); break; } return fileFormatCloned; }  fillDefaultFileFormat(fileFormatCloned, filesType); return fileFormatCloned; }
[*] target: assertNotNull(fileFormatSpec)
[-] pred: org. junit. Assert. assertNotNull ( fileFormatSpec )
************************************
************************************
[+] input: testGetProperties() { Properties properties = ConfigLoader.getProperties(); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(properties.getProperty("openjob.worker.test"), "test"); }
getProperties() { return PROPERTIES; }
[*] target: assertNotNull(properties)
[-] pred: org. junit. Assert. assertNotNull ( properties )
************************************
************************************
[+] input: Exception { final String json; try (Reader reader = new InputStreamReader(Objects.requireNonNull(TestDataBuilder.class .getResourceAsStream("/securityReport.json")))) { json = new BufferedReader(reader).lines().collect(Collectors.joining()); } catch (IOException e) { e.printStackTrace(); return; }  var mapper = new ObjectMapper(); var report = mapper.readValue(json, Report.class);  // Assertions to verify the parsed object assertNotNull(report); assertEquals("azure", report.getModuleNamespace()); assertEquals("foo", report.getModuleName()); assertEquals("1.0.0", report.getModuleVersion()); assertEquals("azurerm", report.getProvider());  var securityReport = report.getSecurityReport(); assertNotNull(securityReport); assertEquals(1, securityReport.get("main.tf").size()); SecurityFinding finding = securityReport.get("main.tf").get(0); assertEquals("AVD-AZU-0014", finding.getId());  TerraformDocumentation documentation = report.getDocumentation(); "<AssertPlaceHolder>"; assertEquals(1, documentation.getProviders().size()); assertEquals("azurerm", documentation.getProviders().get(0).getName()); assertEquals(1, documentation.getResources().size()); assertEquals("mykey", documentation.getResources().get(0).getName()); }
getDocumentation() { return documentation; }
[*] target: assertNotNull(documentation)
[-] pred: org. junit. Assert. assertNotNull ( documentation )
************************************
************************************
[+] input: shouldFindAllCustomers() {  List<CusCustomer> cusCustomerList = createDummyCusCustomerList();  List<CusCustomerDto> expectedResult = createDummyCusCustomerDtoList();  when(cusCustomerEntityService.findAllCustomers()).thenReturn(cusCustomerList);  List<CusCustomerDto> result = cusCustomerService.findAllCustomers();  "<AssertPlaceHolder>"; assertNotNull(result); }
findAllCustomers(){  List<CusCustomer> cusCustomerList = cusCustomerEntityService.findAllCustomers();  List<CusCustomerDto> cusCustomerDtoList = CusCustomerMapper.INSTANCE.convertToCusCustomerDtoList(cusCustomerList);  return cusCustomerDtoList; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: shouldAddCancelListener() { component.onCancel(event -> { });  List<EventListener<LoginCancelEvent>> listeners = component.getEventListeners(LoginCancelEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<LoginCancelEvent>); }
onCancel(EventListener<LoginCancelEvent> listener) { return addCancelListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: shouldAddSubmitListener() { component.onSubmit(event -> { });  List<EventListener<LoginSubmitEvent>> listeners = component.getEventListeners(LoginSubmitEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<LoginSubmitEvent>); }
onSubmit(EventListener<LoginSubmitEvent> listener) { return addSubmitListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testGetTableNameWithNullTapdataEvent() { String tableName = hazelcastBaseNode.getTableName(null); "<AssertPlaceHolder>"; assertEquals("", tableName); }
getTableName(TapdataEvent tapdataEvent) { if (null == tapdataEvent) return ""; MessageEntity messageEntity = tapdataEvent.getMessageEntity(); TapEvent tapEvent = tapdataEvent.getTapEvent(); if (null != messageEntity) { return messageEntity.getTableName(); } else { if (tapEvent instanceof TapBaseEvent) { return ((TapBaseEvent) tapEvent).getTableId(); } else { return ""; } } }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
************************************
[+] input: testLoadUnsupportedType() { var loader = new SAXLoader(); Set<String> errors = new HashSet<>();  var xhtml = loader.load(new Object(), true, errors);  "<AssertPlaceHolder>"; assertEquals(0, errors.size()); }
load(String data, boolean fragment, Set<String> errors) throws ContentManagerException { var complete_page = data;  if (fragment) { var t = TemplateFactory.HTML.get("cmf.container.template"); t.setValue("fragment", data); complete_page = t.getContent(); }  Reader reader = new StringReader(complete_page);  var sax_parse_exception = false; try { var inputsource = new InputSource(reader);  SAXParser parser = null;  try { parser = SAXParserFactory.newInstance().newSAXParser(); } catch (ParserConfigurationException | SAXException e) { throw new XmlErrorException(e); }  try { parser.getXMLReader().setFeature("http://xml.org/sax/features/validation", true); } catch (SAXException e) { throw new XmlErrorException("The parser '" + parser.getClass().getName() + "' doesn't support validation.", e); }  try { parser.parse(inputsource, this); } catch (SAXParseException e) { sax_parse_exception = true; if (errors != null) { errors.add(formatException(fragment, e)); } } catch (SAXException e) { if (e.getException() != null && e.getException() instanceof RuntimeException) { throw (RuntimeException) e.getException(); } else { throw new XmlErrorException(e); } } catch (IOException e) { throw new XmlErrorException(e); }  if (errors != null) { if (errorRedirector_.hasErrors()) { errors.addAll(formatExceptions(fragment, errorRedirector_.getErrors())); } if (errorRedirector_.hasFatalErrors()) { errors.addAll(formatExceptions(fragment, errorRedirector_.getFatalErrors())); } } } catch (RuntimeException e) { if (errors != null) { errors.add(e.getMessage()); } return null; }  if (sax_parse_exception || (errors != null && !errors.isEmpty()) || (errorRedirector_.hasErrors() || errorRedirector_.hasFatalErrors())) { return null; }  return new LoadedContent<>(MimeType.APPLICATION_XHTML, data); }
[*] target: assertNull(xhtml)
[-] pred: org. junit. Assert. assertNull ( xhtml )
************************************
************************************
[+] input: testLoopByConfigNormal() { try (MockedStatic<TapSimplify> mockedStatic = mockStatic(TapSimplify.class)) { mockedStatic.when(() -> TapSimplify.toJson(any(Object.class))).thenReturn("mokc json"); boolean byConfig = utils.loopByConfig(configFile, log, "mock", "python-jar-path"); mockedStatic.verify(() -> TapSimplify.toJson(any(Map.class)), times(1)); Assertions."<AssertPlaceHolder>"; } finally { assertVerify(1, 1, 1, 1); } }
loopByConfig(File config, Log logger, final String loopPath, final String pythonJarPath) { //按照配置文件来编译第三方Python包 Map<String, Object> configMap = getPythonConfig(config); Object sitePackages = configMap.get(PYTHON_THREAD_SITE_PACKAGES_PATH); if (sitePackages instanceof Collection) { Collection<String> packages = (Collection<String>) sitePackages; if (!packages.isEmpty()) { logger.info("Configuration files will be used for package compilation： {}", toJson(configMap)); List<File> path = new ArrayList<>(); for (Object name : packages) { if (null == name) continue; path.add(new File(concat(loopPath, String.valueOf(name)))); } if (!path.isEmpty()) { loopFiles(path, logger, pythonJarPath); return true; } } } return false; }
[*] target: assertTrue(byConfig)
[-] pred: org. junit. Assert. assertTrue ( byConfig )
************************************
************************************
[+] input: testAddAndDeleteScope() { String scopeName = "newScope4"; ScopeSetManager manager = new ScopeSetManager(); ScopeSet newScope = new ScopeSet(scopeName); manager.add(newScope); manager.save();  manager = new ScopeSetManager(); ScopeSet set = manager.findSet(scopeName); assertNotNull(set); assertEquals(scopeName, set.getName()); manager.remove(set);  manager = new ScopeSetManager(); set = manager.findSet(scopeName); "<AssertPlaceHolder>"; }
findSet(String name) { return findSet(name, false); }
[*] target: assertNull(set)
[-] pred: org. junit. Assert. assertNull ( set )
************************************
************************************
[+] input: testSave() { String ip = "127.0.0.2"; String akkaAddress = "127.0.0.2:25520"; Server server = new Server(); server.setIp(ip); server.setAkkaAddress(akkaAddress); Long id = serverDAO.save(server);  Assertions."<AssertPlaceHolder>"; Optional<Server> optionalServer = serverRepository.findById(id); Assertions.assertTrue(optionalServer.isPresent());  optionalServer.ifPresent((s) -> { Assertions.assertEquals(s.getIp(), server.getIp()); Assertions.assertEquals(s.getAkkaAddress(), server.getAkkaAddress()); }); }
save(Server server);
[*] target: assertNotNull(id)
[-] pred: org. junit. Assert. assertNotNull ( id )
************************************
************************************
[+] input: test_When_GetProductById_isSuccess() { Product product = getMockProductDetails(); when(productRepository.findById(product.getProductId())).thenReturn(Optional.of(product));  ProductResponse productResponse = productService.getProductById(1); //Verification verify(productRepository, times(1)).findById(anyLong());  //Assert "<AssertPlaceHolder>"; assertEquals(product.getProductId(), productResponse.getProductId());  }
getProductById(long productId) {  log.info("ProductServiceImpl | getProductById is called"); log.info("ProductServiceImpl | getProductById | Get the product for productId: {}", productId);  Product product = productRepository.findById(productId) .orElseThrow( () -> new ProductServiceCustomException("Product with given Id not found","PRODUCT_NOT_FOUND"));  ProductResponse productResponse = new ProductResponse();  copyProperties(product, productResponse);  log.info("ProductServiceImpl | getProductById | productResponse :" + productResponse.toString());  return productResponse; }
[*] target: assertNotNull(productResponse)
[-] pred: org. junit. Assert. assertNotNull ( productResponse )
************************************
************************************
[+] input: testInspectEvent_ReturnNull() { PerformanceInspection eventStartInspection = PerformanceInspection.createEventStartInspection("event start"); PerformanceInspectionResult eventStartResult = performanceTestManagementService.inspect(eventStartInspection); Assertions.assertNull(eventStartResult);  PerformanceInspection eventEndInspection = PerformanceInspection.createEventEndInspection("event end"); PerformanceInspectionResult eventEndResult = performanceTestManagementService.inspect(eventEndInspection); Assertions."<AssertPlaceHolder>";  }
inspect(PerformanceInspection performanceInspection) { ITestRun testRun = getTestRun(); return inspect(performanceInspection, testRun); }
[*] target: assertNull(eventEndResult)
[-] pred: org. junit. Assert. assertNull ( eventEndResult )
************************************
************************************
[+] input: SQLException { when(this.mockPluginService.getHosts()).thenReturn(Collections.singletonList(writerHostSpec));  final ReadWriteSplittingPlugin plugin = new ReadWriteSplittingPlugin( mockPluginService, defaultProps, mockHostListProviderService, mockWriterConn, null); plugin.switchConnectionIfRequired(true);  verify(mockPluginService, times(0)) .setCurrentConnection(any(Connection.class), any(HostSpec.class)); assertEquals(mockWriterConn, plugin.getWriterConnection()); "<AssertPlaceHolder>"; }
getReaderConnection() { return this.readerConnection; }
[*] target: assertNull(plugin.getReaderConnection())
[-] pred: org. junit. Assert. assertNull ( plugin. getReaderConnection() )
************************************
************************************
[+] input: attemptTaskIdTest() { String tezTaskAttemptId = "attempt_1677051234358_0091_1_00_000000_0"; TezTaskAttemptID originalTezTaskAttemptID = TezTaskAttemptID.fromString(tezTaskAttemptId); String uniqueIdentifier = String.format("%s_%05d", tezTaskAttemptId, 3); String uniqueIdentifierToAttemptId = RssTezUtils.uniqueIdentifierToAttemptId(uniqueIdentifier); "<AssertPlaceHolder>"; TezTaskAttemptID tezTaskAttemptID = TezTaskAttemptID.fromString(uniqueIdentifierToAttemptId); assertEquals(originalTezTaskAttemptID, tezTaskAttemptID); }
uniqueIdentifierToAttemptId(String uniqueIdentifier) { if (uniqueIdentifier == null) { throw new RssException("uniqueIdentifier should not be null"); } String[] ids = uniqueIdentifier.split("_"); return StringUtils.join(ids, "_", 0, 7); }
[*] target: assertEquals(tezTaskAttemptId, uniqueIdentifierToAttemptId)
[-] pred: org. junit. Assert. assertEquals ( tezTaskAttemptId, uniqueIdentifierToAttemptId )
************************************
************************************
[+] input: testTaskNullEndTime() { task.setStatus(MilestoneStatus.FINISH); node.setStatus(MilestoneStatus.FINISH); task.setEnd(null); String taskSyncStatus = milestoneAspectTask.getTaskSyncStatus(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(MilestoneAspectTask.KPI_DATA_NODE_INIT, taskSyncStatus); }
getTaskSyncStatus() { Collection<MilestoneEntity> values = new ArrayList<>(milestones.values()); List<MilestoneEntity> sorted = values.stream() .filter(m -> Objects.nonNull(m) && !MilestoneStatus.WAITING.equals(m.getStatus())) .sorted((m1, m2) -> { MilestoneStatus s1 = m1.getStatus(); MilestoneStatus s2 = m2.getStatus(); if (KPI_CDC.equals(m1.getCode())) return -1; if (KPI_CDC.equals(m2.getCode())) return 1; if (MilestoneStatus.RUNNING.equals(s1)) return -1; if (MilestoneStatus.RUNNING.equals(s2)) return 1; Long e1 = m1.getEnd(); Long e2 = m2.getEnd(); if (null == e1) e1 = 0L; if (null == e2) e2 = 0L; return e2.intValue() - e1.intValue(); }).collect(Collectors.toList()); if (sorted.isEmpty()) return KPI_TASK; return sorted.get(0).getCode(); }
[*] target: assertNotNull(taskSyncStatus)
[-] pred: org. junit. Assert. assertNotNull ( taskSyncStatus )
************************************
************************************
[+] input: testHostFailoverStrictReaderEnabled() {  final HostSpec writer = new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("writer").port(1234).role(HostRole.WRITER).build(); final HostSpec reader = new HostSpecBuilder(new SimpleHostAvailabilityStrategy()) .host("reader1").port(1234).role(HostRole.READER).build(); final List<HostSpec> hosts = Arrays.asList(writer, reader);  Dialect mockDialect = Mockito.mock(Dialect.class); when(mockDialect.getFailoverRestrictions()).thenReturn(EnumSet.noneOf(FailoverRestriction.class)); when(mockPluginService.getDialect()).thenReturn(mockDialect); final ClusterAwareReaderFailoverHandler target = new ClusterAwareReaderFailoverHandler( mockPluginService, properties, DEFAULT_FAILOVER_TIMEOUT, DEFAULT_READER_CONNECT_TIMEOUT, true);  // We expect only reader nodes to be chosen. List<HostSpec> expectedReaderHost = Collections.singletonList(reader);  List<HostSpec> hostsByPriority = target.getHostsByPriority(hosts); assertEquals(expectedReaderHost, hostsByPriority);  // Should pick the reader even if unavailable. reader.setAvailability(HostAvailability.NOT_AVAILABLE);  hostsByPriority = target.getHostsByPriority(hosts); assertEquals(expectedReaderHost, hostsByPriority);  // Writer node will only be picked if it is the only node in topology; List<HostSpec> expectedWriterHost = Collections.singletonList(writer);  hostsByPriority = target.getHostsByPriority(Collections.singletonList(writer)); "<AssertPlaceHolder>"; }
getHostsByPriority(final List<HostSpec> hosts) { final List<HostSpec> activeReaders = new ArrayList<>(); final List<HostSpec> downHostList = new ArrayList<>(); HostSpec writerHost = null;  for (final HostSpec host : hosts) { if (host.getRole() == HostRole.WRITER) { writerHost = host; continue; } if (host.getRawAvailability() == HostAvailability.AVAILABLE) { activeReaders.add(host); } else { downHostList.add(host); } } Collections.shuffle(activeReaders); Collections.shuffle(downHostList);  final List<HostSpec> hostsByPriority = new ArrayList<>(activeReaders); final int numOfReaders = activeReaders.size() + downHostList.size(); if (writerHost != null && (!this.enableFailoverStrictReader || numOfReaders == 0)) { hostsByPriority.add(writerHost); } hostsByPriority.addAll(downHostList);  return hostsByPriority; }
[*] target: assertEquals(expectedWriterHost, hostsByPriority)
[-] pred: org. junit. Assert. assertEquals ( expectedWriterHost, hostsByPriority )
************************************
************************************
[+] input: testGetAppByName() { App app = appDAO.getAppByName("xxx-service"); Assertions."<AssertPlaceHolder>";  Assertions.assertEquals(app.getName(), "xxx-service"); }
getAppByName(String appName);
[*] target: assertNotNull(app)
[-] pred: org. junit. Assert. assertNotNull ( app )
************************************
************************************
[+] input: Exception { when(multipartFile.getBytes()).thenReturn("{"version":"1.2.0"}".getBytes()); try(MockedStatic<ParseRelMig> prm = Mockito.mockStatic(ParseRelMig.class)) { prm.when(() -> ParseRelMig.redirect(param)).thenCallRealMethod(); ParseRelMig redirect = ParseRelMig.redirect(param); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(ParseBaseVersionRelMigImpl.class.getName(), redirect.getClass().getName()); } }
redirect(ParseParam param) { try { MultipartFile multipartFile = param.getMultipartFile(); String relMig = new String(multipartFile.getBytes()); param.setRelMigStr(relMig); Map<String, Object> relMigInfo = (Map<String, Object>) new ObjectMapper().readValue(param.getRelMigStr(), Map.class); param.setRelMigInfo(relMigInfo); String version = String.valueOf(relMigInfo.get(KeyWords.VERSION)); Class<? extends ParseRelMig> instance = ParseRelMigFileVersionMapping.getInstance(version); Constructor<? extends ParseRelMig> declaredConstructor = instance.getDeclaredConstructor(ParseParam.class); return declaredConstructor.newInstance(param); } catch (Exception e) { throw new BizException("relMig.parse.failed", e.getMessage()); } }
[*] target: assertNotNull(redirect)
[-] pred: org. junit. Assert. assertNotNull ( redirect )
************************************
************************************
[+] input: Exception { final PatchHelper patchHelper = new PatchHelper();  final File jarFile = JarTestHelper.buildJar(Startup.class); final AtomicInteger patchedClasses = new AtomicInteger();  Mockito.when(clientHandler.replaceClass(ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any())) .thenReturn(PatchResult.builder().success(true).build());  final boolean success = patchHelper.patch(jarFile, JVM, clientHandler, null, patchedClasses::set);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1, patchedClasses.get());  Mockito.verify(clientHandler, Mockito.times(patchedClasses.get())) .replaceClass(ArgumentMatchers.eq(JVM), ArgumentMatchers.any(), ArgumentMatchers.any()); }
patch(File jarFile, RunningJvm runningJvm, ClientHandler clientHandler, ClassLoaderDescriptor classLoaderDescriptor, Consumer<Integer> patchedClasses) { log.debug("Attempting to patch {} with {}", runningJvm, jarFile); final AtomicInteger patchedClassCount = new AtomicInteger(); try (final JarFile jar = new JarFile(jarFile)) { jar.stream().parallel().filter(j -> j.getName().endsWith(".class")).forEach(classFile -> { try { final String name = classFile.getName().replace('/', '.').replace(".class", ""); log.debug("Patching {}", name); final byte[] classContents = jar.getInputStream(classFile).readAllBytes(); // Note - we may not always want to pass in the class loader. It could be in a child classloader. final LoadedClass loadedClass = new LoadedClass(name, classLoaderDescriptor, null); final PatchResult result = clientHandler.replaceClass(runningJvm, loadedClass, classContents); if (!result.isSuccess()) { throw new IllegalStateException( "Failed to replace class on jvm: " + name + " because " + result.getMessage()); } } catch (IOException e) { log.warn("Failed to process {}", classFile.getName()); throw new UncheckedIOException(e); } synchronized (patchedClassCount) { patchedClasses.accept(patchedClassCount.incrementAndGet()); } }); return true; } catch (IOException | UncheckedIOException | IllegalStateException e) { log.warn("Failed to patch {} with {}", runningJvm, jarFile, e); return false; } }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
************************************
[+] input: shouldAddOpenListener() { component.onOpen(event -> { });  List<EventListener<DrawerOpenEvent>> listeners = component.getEventListeners(DrawerOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DrawerOpenEvent>); }
onOpen(EventListener<DrawerOpenEvent> listener) { return addOpenListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: Exception { String greekHospital = "ΠΕΠΑΓΝΗ";  Collection<ResourceEntry> entryCollection = LocalizationManager.getInstance().getResources(Resource.HOSPITAL_NAMES, Collections.singletonList("gr")); Set<String> greekHospitals = new HashSet<>();  for(ResourceEntry entry: entryCollection) { InputStream inputStream = entry.createStream(); try (CSVParser reader = Readers.createCSVReaderFromStream(inputStream)) { for (CSVRecord line : reader) { String name = line.get(0); greekHospitals.add(name.toUpperCase()); } inputStream.close(); } }  MaskingProvider maskingProvider = new HospitalMaskingProvider();  int randomizationOK = 0; for(int i = 0; i < 100; i++) { String maskedHospital = maskingProvider.mask(greekHospital); if (!maskedHospital.equalsIgnoreCase(greekHospital)) { randomizationOK++; }  boolean isMatch = greekHospitals.contains(maskedHospital.toUpperCase());  if (!isMatch) { System.out.println(maskedHospital); }  "<AssertPlaceHolder>"; }  assertTrue(randomizationOK > 0); }
mask(String identifier) { if (!this.preserveCountry) { return hospitalManager.getRandomKey(); }  Hospital hospital = hospitalManager.getKey(identifier); if (hospital == null) { return hospitalManager.getRandomKey(); }  return hospitalManager.getRandomKey(hospital.getNameCountryCode()); }
[*] target: assertTrue(isMatch)
[-] pred: org. junit. Assert. assertTrue ( isMatch )
************************************
************************************
[+] input: whenObjectAreEquivalent_ThenEqualsReturnsTrue() { UserId id1 = new UserId("bob@example.com"); UserId id2 = new UserId("bob@example.com");  assertTrue(id1.equals(id2)); assertEquals(id1.hashCode(), id2.hashCode()); "<AssertPlaceHolder>"; }
compareTo(@NotNull UserId o) { return this.email.compareTo(o.email); }
[*] target: assertEquals(0, id1.compareTo(id2))
[-] pred: org. junit. Assert. assertEquals ( 0, id1. compareTo ( id2 ) )
************************************
************************************
[+] input: shouldAddCloseListener() { component.onClose(event -> { });  List<EventListener<DrawerCloseEvent>> listeners = component.getEventListeners(DrawerCloseEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DrawerCloseEvent>); }
onClose(EventListener<DrawerCloseEvent> listener) { return addCloseListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testInspectChartNormal() { Map<String, Integer> actual = taskService.inspectChart(user); Assertions."<AssertPlaceHolder>"; assertEquals(list.size(), actual.get("total")); assertEquals(1, actual.get("error")); assertEquals(1, actual.get("running")); assertEquals(1, actual.get("done")); assertEquals(1, actual.get("waiting")); assertEquals(1, actual.get("scheduling")); assertEquals(1, actual.get("stopping")); }
inspectChart(UserDetail user) { int error = 0; int running = 0; int done = 0; int waiting = 0; int scheduling = 0; int stopping = 0; int total = 0; List<InspectDto> inspectDtoList = inspectTaskList(new Filter(), user); if (CollectionUtils.isNotEmpty(inspectDtoList)) { total = inspectDtoList.size(); for (InspectDto taskDto : inspectDtoList) { String status = String.valueOf(taskDto.getStatus()).toLowerCase(); if (ERROR.getValue().equals(status)) { error++; } else if(RUNNING.getValue().equals(status)) { running++; } else if (DONE.getValue().equals(status)) { done++; } else if (WAITING.getValue().equals(status)) { waiting++; }else if (SCHEDULING.getValue().equals(status)) { scheduling++; }else if (STOPPING.getValue().equals(status)) { stopping++; } } }  Map<String, Integer> chart5 = new HashMap<>(); chart5.put(TOTAL, total); chart5.put("error", error); chart5.put("running", running); chart5.put("done", done); chart5.put("waiting", waiting); chart5.put("scheduling", scheduling); chart5.put("stopping", stopping); return chart5; }
[*] target: assertNotNull(actual)
[-] pred: org. junit. Assert. assertNotNull ( actual )
************************************
************************************
[+] input: isSupported() { ComparableVersion current = ComparableVersion.of("0.9"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.11"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.12"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertFalse(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("0.8"); assertFalse(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertFalse(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("1.5.1.2"); assertTrue(MODULE_DESCRIPTION_JUST_FORM.isSupported(current)); assertTrue(MODULE_DESCRIPTION_FROM_TO.isSupported(current));  current = ComparableVersion.of("0.1"); final ModuleDescription emptyVersion = ModuleDescription.builder() .name("emptyVersion").supportFrom(ComparableVersion.of("")).build(); "<AssertPlaceHolder>"; }
isSupported(ComparableVersion current) { boolean isSupported = current.compareTo(from) >= 0; if (isSupported && to != null) { isSupported = current.compareTo(to) <= 0; } return isSupported; }
[*] target: assertTrue(emptyVersion.isSupported(current))
[-] pred: org. junit. Assert. assertTrue ( emptyVersion. isSupported ( current ) )
************************************
************************************
[+] input: givenValidVideoId_whenCallsGetResource_shouldReturnIt() { // given final var videoOne = VideoID.unique(); final var expectedType = VideoMediaType.VIDEO; final var expectedResource = resource(expectedType);  storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), expectedType), expectedResource); storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), VideoMediaType.TRAILER.name()), resource(mediaType())); storageService().store("videoId-%s/type-%s".formatted(videoOne.getValue(), VideoMediaType.BANNER.name()), resource(mediaType()));  Assertions.assertEquals(3, storageService().storage().size());  // when final var actualResult = this.mediaResourceGateway.getResource(videoOne, expectedType).get();  // then Assertions."<AssertPlaceHolder>"; }
getResource(final VideoID anId, final VideoMediaType type) { return this.storageService.get(filepath(anId, type)); }
[*] target: assertEquals(expectedResource, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResource, actualResult )
************************************
************************************
[+] input: AuthenticationException {  String userId = "admin"; String refreshToken = JsonWebTokenUtil.issueJwt(userId, 3600L, Collections.singletonMap("refresh", true));  SurenessAccount account = DefaultAccount.builder("app1") .setPassword(Md5Util.md5(password + salt)) .setSalt(salt) .setOwnRoles(roles) .setDisabledAccount(Boolean.FALSE) .setExcessiveAttempts(Boolean.FALSE) .build(); when(accountProvider.loadAccount(userId)).thenReturn(account);  RefreshTokenResponse response = accountService.refreshToken(refreshToken);  "<AssertPlaceHolder>"; assertNotNull(response.getToken()); assertNotNull(response.getRefreshToken()); }
refreshToken(String refreshToken) throws AuthenticationException;
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
************************************
[+] input: testResolvePath() { String path = null; String expectedPath = null; String resolvedPath = null;  resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = ""; expectedPath = ""; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = "/abc/"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);  path = "//abc///"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); assertEquals(expectedPath, resolvedPath);   path = "//\\abc///"; expectedPath = "/abc/"; resolvedPath = normalizePath(path); "<AssertPlaceHolder>"; }
normalizePath(final String path) {  if (isBlank(path)) { return path; }  String resolvedPath = path.trim();  while (resolvedPath.contains(BACK_SLASH)) { resolvedPath = replace(resolvedPath, BACK_SLASH, SLASH); }  while (resolvedPath.contains(DOUBLE_SLASH)) { resolvedPath = replace(resolvedPath, DOUBLE_SLASH, SLASH); } return resolvedPath; }
[*] target: assertEquals(expectedPath, resolvedPath)
[-] pred: org. junit. Assert. assertEquals ( expectedPath, resolvedPath )
************************************
************************************
[+] input: givenValidParametersAndTypeParameters() { List<String> errorMessages = new ArrayList<>();  List<Parameter> parameters = asList( Parameter.of(OPTIONAL.with(T), "left"), Parameter.of(OPTIONAL.with(U), "right"), Parameter.of(BI_FUNCTION.with(T.asType().contravariant(), U.asType().contravariant(), V.asType().covariant()), "compose") );  List<TypeParameter> typeParameters = asList(T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter());  ContravariantParametersAndTypeParametersValidator.Result result = new CovariantParametersAndTypeParametersValidator().validateTypeParametersAndParameters( typeParameters, parameters, errorMessages );  ParametersAndTypeParametersValidator.Result expectedResult = ParametersAndTypeParametersValidator.Result.of( T.asTypeParameter(), U.asTypeParameter(), V.asTypeParameter(), OPTIONAL.with(T), OPTIONAL.with(U) );  "<AssertPlaceHolder>"; assertTrue(errorMessages.isEmpty()); }
validateTypeParametersAndParameters(List<TypeParameter> typeParameters, List<Parameter> parameters, List<String> errorMessages) { List<String> additionalErrorMessages = new ArrayList<>();  verifyParameterCount(parameters, 3, additionalErrorMessages); verifyTypeParameterCount(typeParameters, 3, additionalErrorMessages);  if (!additionalErrorMessages.isEmpty()) { errorMessages.addAll(additionalErrorMessages); return null; }  TypeParameter leftInputTypeConstructorArgument = typeParameters.get(0); TypeParameter rightInputTypeConstructorArgument = typeParameters.get(1); TypeParameter returnTypeConstructorArgument = typeParameters.get(2);  Parameter leftParameter = parameters.get(0); Parameter rightParameter = parameters.get(1); Parameter combinatorParameter = parameters.get(2);  // Check if the third parameter is as expected: Type expectedCombinatorType = BI_FUNCTION.with(leftInputTypeConstructorArgument.asType().contravariant(), rightInputTypeConstructorArgument.asType().contravariant(), returnTypeConstructorArgument.asType().covariant()); if (!Objects.equals(combinatorParameter.getType(), expectedCombinatorType)) { additionalErrorMessages.add("Expected third argument to be a " + generateFrom(expectedCombinatorType) + " but was " + generateFrom(combinatorParameter.getType())); }  if (additionalErrorMessages.isEmpty()) { return Result.of( leftInputTypeConstructorArgument, rightInputTypeConstructorArgument, returnTypeConstructorArgument, leftParameter.getType(), rightParameter.getType() ); } else { errorMessages.addAll(additionalErrorMessages); return null; } }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testSerializeWithMetricsData() {  CollectRep.MetricsData metricsData = CollectRep.MetricsData.newBuilder() .setMetrics("someValue") .setApp("linux") .build(); byte[] bytes = serializer.serialize("", metricsData);  "<AssertPlaceHolder>"; assertArrayEquals(metricsData.toByteArray(), bytes); }
serialize(String s, CollectRep.MetricsData metricsData) {  if (metricsData == null) { log.error("metricsData is null"); return null; }  return metricsData.toByteArray(); }
[*] target: assertNotNull(bytes)
[-] pred: org. junit. Assert. assertNotNull ( bytes )
************************************
************************************
[+] input: testGetLibPathNotURLClassLoader() { when(utils.getLibPath(jarName, ato)).thenCallRealMethod(); classLoader = mock(AbstractClassLoader.class); when(utils.getCurrentThreadContextClassLoader()).thenReturn(classLoader); InputStream libPath = utils.getLibPath(jarName, ato); Assertions."<AssertPlaceHolder>"; Assertions.assertNotEquals(mockPath, ato.get()); assertVerify(1, 0, 0); }
getLibPath(String jarName, AtomicReference<String> ato) throws IOException { InputStream pyJarPath = null; ClassLoader classLoader = getCurrentThreadContextClassLoader(); if (classLoader instanceof URLClassLoader) { URL[] urls = ((URLClassLoader) classLoader).getURLs(); for (URL url : urls) { String jarPath = url.getPath(); if (jarPath.contains(jarName)) { pyJarPath = url.openStream(); ato.set(jarPath); break; } } } return pyJarPath; }
[*] target: assertNull(libPath)
[-] pred: org. junit. Assert. assertNull ( libPath )
************************************
************************************
[+] input: shouldAddKeyListener() { component.onKey(event -> { });  List<EventListener<TerminalKeyEvent>> listeners = component.getEventListeners(TerminalKeyEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TerminalKeyEvent>); }
onKey(EventListener<TerminalKeyEvent> listener) { return addKeyListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: shouldCreateFieldWithLabelAndValue() { LocalDateTime dateTime = LocalDateTime.of(2020, 1, 1, 10, 0); component = new DateTimeField("label", dateTime); assertEquals("label", component.getLabel()); "<AssertPlaceHolder>"; assertEquals(Expanse.MEDIUM, component.getExpanse()); }
getValue() { String text = getText(); return text == null || text.isEmpty() ? null : LocalDateTime.parse(text).truncatedTo(ChronoUnit.SECONDS); }
[*] target: assertEquals(dateTime, component.getValue())
[-] pred: org. junit. Assert. assertEquals ( dateTime, component. getValue ( ) )
************************************
************************************
[+] input: shouldAddSelectionChangeListener() { table.onItemSelectionChange(event -> { });  List<EventListener<TableItemSelectionChange>> listeners = table.getEventListeners(TableItemSelectionChange.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemSelectionChange>); }
onItemSelectionChange( EventListener<TableItemSelectionChange<T>> listener) { return addItemSelectionChangeListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testRemoveLast() { deque.addLast(1); deque.addLast(2); assertEquals(Integer.valueOf(2), deque.removeLast()); assertEquals(Integer.valueOf(1), deque.get(0)); assertEquals(Integer.valueOf(1), deque.removeLast()); assertNull(deque.removeLast()); "<AssertPlaceHolder>"; }
size() { return size; }
[*] target: assertEquals(0, deque.size())
[-] pred: org. junit. Assert. assertEquals ( 0, deque. size() )
************************************
************************************
[+] input: testReconstructsDictionaryWithValueInsertedWithDeleteTwoTerms() { String term = "foo"; String term2 = "foo2";  ChainRetrieval chainRetrieval = new ChainRetrieval() { @Override public List<DictionaryEntry> retrieveChain() { return Arrays.asList( new DictionaryEntry("A", DictionaryEntryType.INSERT), new DictionaryEntry("B", DictionaryEntryType.INSERT), new DictionaryEntry("B", DictionaryEntryType.DELETE), new DictionaryEntry(CausalOrderingConsistentMaskingProvider.privateHash(term), DictionaryEntryType.VALUE), new DictionaryEntry("C", DictionaryEntryType.INSERT), new DictionaryEntry("D", DictionaryEntryType.INSERT), new DictionaryEntry(CausalOrderingConsistentMaskingProvider.privateHash(term2), DictionaryEntryType.VALUE) ); }  @Override public void append(String hashedTerm) throws Exception {  }  @Override public void shutDown() {  } };  List<DictionaryEntry> dictionaryEntries = CausalOrderingConsistentMaskingProvider.reconstructDictionary(chainRetrieval, term);  assertEquals(1, dictionaryEntries.size()); assertEquals("A", dictionaryEntries.get(0).getValue());  dictionaryEntries = CausalOrderingConsistentMaskingProvider.reconstructDictionary(chainRetrieval, term2);  "<AssertPlaceHolder>"; assertEquals("A", dictionaryEntries.get(0).getValue()); assertEquals("C", dictionaryEntries.get(1).getValue()); assertEquals("D", dictionaryEntries.get(2).getValue()); }
reconstructDictionary(ChainRetrieval chainRetrieval, String term) { List<DictionaryEntry> entries = new ArrayList<>(); Set<String> entriesToRemove = new HashSet<>();  String hashedTerm = privateHash(term);  List<DictionaryEntry> chainEntries; try { chainEntries = chainRetrieval.retrieveChain(); } catch (IOException e) { throw new RuntimeException("unable to retrieve entries from chain"); }  boolean valueFound = false;  for (DictionaryEntry entry : chainEntries) { if (entry.getType() == DictionaryEntryType.VALUE && entry.getValue().equals(hashedTerm)) { valueFound = true; break; }  if (entry.getType() == DictionaryEntryType.INSERT) { entries.add(entry); } else if (entry.getType() == DictionaryEntryType.DELETE) { entriesToRemove.add(entry.getValue()); } }   if (!valueFound) { try { chainRetrieval.append(hashedTerm); } catch (Exception e) { throw new RuntimeException("unable to append entry to chain"); } }  if (!entriesToRemove.isEmpty()) { int totalEntries = entries.size();  for (int i = (totalEntries - 1); i >= 0; i--) { DictionaryEntry entry = entries.get(i); if (entry.getType() != DictionaryEntryType.INSERT) { continue; }  if (entriesToRemove.contains(entry.getValue())) { entries.remove(i); } } }  return entries;  }
[*] target: assertEquals(3, dictionaryEntries.size())
[-] pred: org. junit. Assert. assertEquals ( 3, dictionaryEntries. size ( ) )
************************************
************************************
[+] input: test_sqrt_5_meta() { var node = initNode(TbRuleNodeMathFunctionType.SQRT, new TbMathResult(TbMathArgumentType.MESSAGE_METADATA, "result", 3, false, false, null), new TbMathArgument(TbMathArgumentType.MESSAGE_BODY, "a") );  TbMsg msg = TbMsg.newMsg(TbMsgType.POST_TELEMETRY_REQUEST, originator, TbMsgMetaData.EMPTY, JacksonUtil.newObjectNode().put("a", 5).toString());  node.onMsg(ctx, msg);  ArgumentCaptor<TbMsg> msgCaptor = ArgumentCaptor.forClass(TbMsg.class); verify(ctx, timeout(TIMEOUT)).tellSuccess(msgCaptor.capture());  TbMsg resultMsg = msgCaptor.getValue(); "<AssertPlaceHolder>"; assertNotNull(resultMsg.getData()); var result = resultMsg.getMetaData().getValue("result"); assertNotNull(result); assertEquals("2.236", result); }
onMsg(TbContext ctx, TbMsg msg) { locks.computeIfAbsent(msg.getOriginator(), SemaphoreWithTbMsgQueue::new) .addToQueueAndTryProcess(msg, ctx, this::processMsgAsync); }
[*] target: assertNotNull(resultMsg)
[-] pred: org. junit. Assert. assertNotNull ( resultMsg )
************************************
************************************
[+] input: shouldAddRowDoubleClickListener() { table.onItemDoubleClick(event -> { });  List<EventListener<TableItemDoubleClickEvent>> listeners = table.getEventListeners(TableItemDoubleClickEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TableItemDoubleClickEvent>); }
onItemDoubleClick( EventListener<TableItemDoubleClickEvent<T>> listener) { return addItemDoubleClickListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: shouldAddOpenListener() { component.onOpen(event -> { });  List<EventListener<DialogOpenEvent>> listeners = component.getEventListeners(DialogOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<DialogOpenEvent>); }
onOpen(EventListener<DialogOpenEvent> listener) { return addOpenListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: shouldAddOpenListener() { component.onDrawerOpen(event -> { });  List<EventListener<AppLayoutDrawerOpenEvent>> listeners = component.getEventListeners(AppLayoutDrawerOpenEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<AppLayoutDrawerOpenEvent>); }
onDrawerOpen( EventListener<AppLayoutDrawerOpenEvent> listener) { return addDrawerOpenListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testClearUsers() { var users = new MemoryUsers();  try { users .addRole("role1") .addRole("role2") .addRole("role3") .addUser("login1", new RoleUserAttributes("thepassword")) .addUser("login2", new RoleUserAttributes("thepassword2", new String[]{"role1", "role2"})) .addUser("login3", new RoleUserAttributes("thepassword3", new String[]{"role1", "role2", "role3"})) .addUser("login4", new RoleUserAttributes(174, "thepassword4", new String[]{"role2", "role3"}));  assertEquals(4, users.countUsers()); users.clearUsers(); "<AssertPlaceHolder>"; } catch (CredentialsManagerException e) { fail(ExceptionUtils.getExceptionStackTrace(e)); } }
countUsers() { readLock_.lock(); try { return users_.size(); } finally { readLock_.unlock(); } }
[*] target: assertEquals(0, users.countUsers())
[-] pred: org. junit. Assert. assertEquals ( 0, users. countUsers ( ) )
************************************
************************************
[+] input: testCategorization2SectionsWithoutLayout() {  UISchemaBuilder builder = new UISchemaBuilder(Layout.CATEGORIZATION);  builder.addCategory("Cat-1"). // // missing Layout addElements("color", "rule"). // addCategory("Cat-2"). // addLayout(Layout.HORIZONTAL). // addElements("firstName", "lastName", "role");  String json = builder.build();  "<AssertPlaceHolder>"; logger.info(json); assertTrue(json.contains("VerticalLayout"));  }
build() {  // close current controllsBuilder.... if (controlsArrayBuilder != null && layoutContext != null) { layoutContext.add("elements", controlsArrayBuilder.build()); }  if (groupArrayBuilder != null) {  // close current layoutContext.... if (layoutsArrayBuilder != null && layoutContext != null) { this.layoutsArrayBuilder.add(layoutContext.build()); }  // close current gourpContext if (groupContext != null) { groupContext.add("elements", layoutsArrayBuilder.build()); groupArrayBuilder.add(groupContext); }  rootLayoutBuilder.add("elements", groupArrayBuilder.build()); }  // write result JsonObject jsonObject = rootLayoutBuilder.build(); String result = null; try (Writer writer = new StringWriter()) { Json.createWriter(writer).write(jsonObject); result = writer.toString(); } catch (IOException e) { result = "{}"; e.printStackTrace(); } return result; }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
************************************
[+] input: IOException { JarFile tempJarFile = new JarFile(CreateFileCommon.getJarInJarFile()); JarEntry jarEntry = tempJarFile.getJarEntry("internal-test.jar"); File extractNestedJar = JarUtils.extractNestedJar(tempJarFile, jarEntry, jarEntry.getName()); "<AssertPlaceHolder>"; assertTrue(extractNestedJar.getName().endsWith("internal-test.jar")); }
extractNestedJar(JarFile file, JarEntry entry, String entryName) throws IOException { File outputFile = createFile(AREX_TEMP_DIR + File.separator + entryName); try(InputStream inputStream = file.getInputStream(entry); FileOutputStream outputStream = new FileOutputStream(outputFile)) { byte[] buffer = new byte[1024]; int length; while ((length = inputStream.read(buffer)) > 0) { outputStream.write(buffer, 0, length); } } return outputFile; }
[*] target: assertNotNull(extractNestedJar)
[-] pred: org. junit. Assert. assertNotNull ( extractNestedJar )
************************************
************************************
[+] input: testChoose() {  XMLMapperBuilder builder = new XMLMapperBuilder(LoadXmlUtil.load("choose-fruits.xml")); Map<String, SqlSource> sqlSourceMap = builder.parse(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sqlSourceMap.containsKey("fruit.testChoose"));  SqlSource sqlSource = sqlSourceMap.get("fruit.testChoose");  String expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  name = 'testChoose'";   Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testChoose"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  name = 'testBind'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind"}"));  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind", "category": "apple"}"));  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"name": "testBind", "category": "banana"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'banana'";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"category": "banana"}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'banana'\n" + "  AND price = 10.00";  Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), "{"category": "banana", "price": 10.00}"));  expectedSql = "SELECT\n" + "  name,\n" + "  category,\n" + "  price\n" + "FROM\n" + "  fruits\n" + "WHERE\n" + "  category = 'apple'"; Assertions.assertEquals(expectedSql, sqlSource.getSql(Collections.emptyList(), null)); }
parse() {  Map<String, SqlSource> sqlSourceMap = new HashMap<>();  XNode context = this.parser.evalNode("/mapper");  String namespace = context.getStringAttribute("namespace");  sqlElement(context.evalNodes("/mapper/sql"));  List<XNode> statements = context.evalNodes("select|insert|update|delete");  for (XNode node : statements) {  XMLStatementBuilder statementBuilder = new XMLStatementBuilder(node, sqlFragments); SqlSource sqlSource = statementBuilder.parseStatementNode();  String id = node.getStringAttribute("id"); String methodName = (namespace == null || namespace.length() == 0) ? id : String.format("%s.%s", namespace, id);  sqlSourceMap.put(methodName, sqlSource); }  return sqlSourceMap;  }
[*] target: assertNotNull(sqlSourceMap)
[-] pred: org. junit. Assert. assertNotNull ( sqlSourceMap )
************************************
************************************
[+] input: shouldAddDataListener() { component.onData(event -> { });  List<EventListener<TerminalDataEvent>> listeners = component.getEventListeners(TerminalDataEvent.class);  "<AssertPlaceHolder>"; assertTrue(listeners.get(0) instanceof EventListener<TerminalDataEvent>); }
onData(EventListener<TerminalDataEvent> listener) { return addDataListener(listener); }
[*] target: assertEquals(1, listeners.size())
[-] pred: org. junit. Assert. assertEquals ( 1, listeners. size ( ) )
************************************
************************************
[+] input: testConstructErrorType() { Result result = new Result(SystemErrorType.SYSTEM_BUSY); "<AssertPlaceHolder>"; assertEquals(result.getCode(), SystemErrorType.SYSTEM_BUSY.getCode()); assertEquals(result.getMesg(), SystemErrorType.SYSTEM_BUSY.getMesg()); }
isFail() { return !isSuccess(); }
[*] target: assertTrue(result.isFail())
[-] pred: org. junit. Assert. assertTrue ( result. isFail() )
************************************
************************************
[+] input: testGetTableNameOnlyHaveMessageEntity() { when(tapdataEvent.getMessageEntity()).thenReturn(messageEntity); when(tapdataEvent.getTapEvent()).thenReturn(null); String tableName = hazelcastBaseNode.getTableName(tapdataEvent); verify(tapdataEvent, new Times(1)).getMessageEntity(); "<AssertPlaceHolder>"; assertEquals(TABLE_NAME1, tableName); }
getTableName(TapdataEvent tapdataEvent) { if (null == tapdataEvent) return ""; MessageEntity messageEntity = tapdataEvent.getMessageEntity(); TapEvent tapEvent = tapdataEvent.getTapEvent(); if (null != messageEntity) { return messageEntity.getTableName(); } else { if (tapEvent instanceof TapBaseEvent) { return ((TapBaseEvent) tapEvent).getTableId(); } else { return ""; } } }
[*] target: assertNotNull(tableName)
[-] pred: org. junit. Assert. assertNotNull ( tableName )
************************************
************************************
[+] input: testEquals() { WorkspaceMeta w1 = new WorkspaceMeta("/nonexist"); WorkspaceMeta w2 = new WorkspaceMeta("/nonexist"); WorkspaceMeta w3 = new WorkspaceMeta("/nonexist/"); Assertions.assertTrue(w1.equals(w2)); Assertions."<AssertPlaceHolder>"; }
equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; WorkspaceMeta that = (WorkspaceMeta) o; return Objects.equals(new File(baseDirPath), new File(that.baseDirPath)); }
[*] target: assertTrue(w1.equals(w3))
[-] pred: org. junit. Assert. assertTrue ( w1. equals ( w3 ) )
************************************
************************************
[+] input: shouldFindCustomerById() {  CusCustomer cusCustomer = createDummyCusCustomer(); Long cusCustomerId = cusCustomer.getId(); CusCustomerDto expectedResult = createDummyCusCustomerDto();  when(cusCustomerEntityService.getByIdWithControl(cusCustomerId)).thenReturn(cusCustomer);  CusCustomerDto result = cusCustomerService.findCustomerById(cusCustomerId);  "<AssertPlaceHolder>"; assertNotNull(result); }
findCustomerById(Long id) {  CusCustomer cusCustomer = cusCustomerEntityService.getByIdWithControl(id);  CusCustomerDto cusCustomerDto = CusCustomerMapper.INSTANCE.convertToCusCustomerDto(cusCustomer);  return cusCustomerDto; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
************************************
[+] input: testIsOfThisType() { SSNUKIdentifier identifier = new SSNUKIdentifier();  String ssn = "AB123456C"; assertTrue(identifier.isOfThisType(ssn));  //ignores spaces ssn = "AB 12 34 56 C"; assertTrue(identifier.isOfThisType(ssn));  //check for not allowed characters ssn = "DB123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "AD123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "AO123456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA12A456C"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA1234567"; assertFalse(identifier.isOfThisType(ssn)); ssn = "BA123456Z"; assertFalse(identifier.isOfThisType(ssn));  //'O' is allowed on the first character ssn = "OA123456C"; "<AssertPlaceHolder>"; }
isOfThisType(String data) { String ssn = data.replace(" ", "").toUpperCase(); if (ssn.length() != 9) { return false; }  char first = ssn.charAt(0); char second = ssn.charAt(1); if (!Character.isAlphabetic(first) || !Character.isAlphabetic(second)) { return false; }  if (first == 'D' || first == 'F' || first == 'I' || first == 'Q' || first == 'U' || first == 'V') { return false; }  if (second == 'D' || second == 'F' || second == 'I' || second == 'Q' || second == 'U' || second == 'V' || second == 'O') { return false; }  for (int i = 2; i < 8; i++) { if (!Character.isDigit(ssn.charAt(i))) { return false; } }  char last = ssn.charAt(8); return last >= 'A' && last <= 'D'; }
[*] target: assertTrue(identifier.isOfThisType(ssn))
[-] pred: org. junit. Assert. assertTrue ( identifier. isOfThisType ( ssn ) )
************************************
************************************
[+] input: SQLException { final List<HostSpec> expectedMySQL = Collections.singletonList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()).host("mysql").port(HostSpec.NO_PORT) .role(HostRole.WRITER).availability(HostAvailability.AVAILABLE).weight(0).build()); final List<HostSpec> expectedPostgres = Collections.singletonList( new HostSpecBuilder(new SimpleHostAvailabilityStrategy()).host("postgresql").port(HostSpec.NO_PORT) .role(HostRole.WRITER).availability(HostAvailability.AVAILABLE).weight(0).build()); when(mockResultSet.next()).thenReturn(true, false); when(mockResultSet.getBoolean(eq(2))).thenReturn(true); when(mockResultSet.getString(eq(1))).thenReturn("mysql");   rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "mysql://url/");  List<HostSpec> hosts = rdsHostListProvider.queryForTopology(mockConnection); assertEquals(expectedMySQL, hosts);  when(mockResultSet.next()).thenReturn(true, false); when(mockResultSet.getString(eq(1))).thenReturn("postgresql");  rdsHostListProvider = getRdsHostListProvider(mockHostListProviderService, "postgresql://url/"); hosts = rdsHostListProvider.queryForTopology(mockConnection); "<AssertPlaceHolder>"; }
queryForTopology(final Connection conn) throws SQLException { int networkTimeout = -1; try { networkTimeout = conn.getNetworkTimeout(); // The topology query is not monitored by the EFM plugin, so it needs a socket timeout if (networkTimeout == 0) { conn.setNetworkTimeout(networkTimeoutExecutor, defaultTopologyQueryTimeoutMs); } } catch (SQLException e) { LOGGER.warning(() -> Messages.get("RdsHostListProvider.errorGettingNetworkTimeout", new Object[] {e.getMessage()})); }  try (final Statement stmt = conn.createStatement(); final ResultSet resultSet = stmt.executeQuery(this.topologyQuery)) { return processQueryResults(resultSet); } catch (final SQLSyntaxErrorException e) { throw new SQLException(Messages.get("RdsHostListProvider.invalidQuery"), e); } finally { if (networkTimeout == 0 && !conn.isClosed()) { conn.setNetworkTimeout(networkTimeoutExecutor, networkTimeout); } } }
[*] target: assertEquals(expectedPostgres, hosts)
[-] pred: org. junit. Assert. assertEquals ( expectedPostgres, hosts )
