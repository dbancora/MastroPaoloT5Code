[+] input: testOnJoinPrepareWithOffsetCommitShouldKeepJoinAfterRebalanceTimeout() { try (ConsumerCoordinator coordinator = prepareCoordinatorForCloseTest(true, true, Optional.empty(), false)) { int generationId = 42; String memberId = "consumer-42";  Timer pollTimer = time.timer(0L); boolean res = coordinator.onJoinPrepare(pollTimer, generationId, memberId); assertFalse(res);  pollTimer = time.timer(100L); time.sleep(rebalanceTimeoutMs); client.respond(offsetCommitResponse(singletonMap(t1p, Errors.UNKNOWN_TOPIC_OR_PARTITION))); res = coordinator.onJoinPrepare(pollTimer, generationId, memberId); "<AssertPlaceHolder>";  assertFalse(client.hasPendingResponses()); assertFalse(client.hasInFlightRequests()); assertFalse(coordinator.coordinatorUnknown()); } }
[*] target: assertTrue(res)
[-] pred: org. junit. Assert. assertTrue ( res )
************************************
[+] input: IOException { String expected = "grant_type=client_credentials&scope=scope"; String actual = HttpAccessTokenRetriever.formatRequestBody("scope"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testFindNearest() { KDTreeNearestNeighbor<String, Object> nearestNeighbor = this.kdTree.findNearest( new Builder() .latitude(25.2028848) .longitude(55.289930) .build(), 2);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(1.1603729958857059, nearestNeighbor.getDistance()); Assertions.assertEquals("6", nearestNeighbor.getKdTreeObject().getId()); }
[*] target: assertNotNull(nearestNeighbor)
[-] pred: org. junit. Assert. assertNotNull ( nearestNeighbor )
************************************
[+] input: testBootstrap() { String ipAddress = "140.211.11.105"; String hostName = "www.example.com"; Cluster cluster = Cluster.bootstrap(Arrays.asList( new InetSocketAddress(ipAddress, 9002), new InetSocketAddress(hostName, 9002) )); Set<String> expectedHosts = Utils.mkSet(ipAddress, hostName); Set<String> actualHosts = new HashSet<>(); for (Node node : cluster.nodes()) actualHosts.add(node.host()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedHosts, actualHosts)
[-] pred: org. junit. Assert. assertEquals ( expectedHosts, actualHosts )
************************************
[+] input: IOException { AppStoreServerAPIClient client = getClientWithBody("models/requestTestNotificationResponse.json", request -> { Assertions.assertEquals("POST", request.method()); Assertions.assertEquals("/inApps/v1/notifications/test", request.url().encodedPath()); RequestBody body = request.body(); Assertions."<AssertPlaceHolder>"; Assertions.assertNull(body.contentType()); try { Assertions.assertEquals(0, body.contentLength()); } catch (IOException e) { throw new RuntimeException(e); } });  SendTestNotificationResponse sendTestNotificationResponse = client.requestTestNotification();  Assertions.assertNotNull(sendTestNotificationResponse); Assertions.assertEquals("ce3af791-365e-4c60-841b-1674b43c1609", sendTestNotificationResponse.getTestNotificationToken()); }
[*] target: assertNotNull(body)
[-] pred: org. junit. Assert. assertNotNull ( body )
************************************
[+] input: IOException { when(statePersistence.getCurrentState(CONNECTION_ID)).thenReturn(Optional.of( new StateWrapper() .withStateType(StateType.STREAM) .withStateMessages(List.of( new AirbyteStateMessage() .withType(AirbyteStateType.STREAM) .withStream(new AirbyteStreamState().withStreamDescriptor(STREAM_DESCRIPTOR1).withStreamState(JSON_BLOB)), new AirbyteStateMessage() .withType(AirbyteStateType.STREAM) .withStream(new AirbyteStreamState().withStreamDescriptor(STREAM_DESCRIPTOR2).withStreamState(JSON_BLOB))))));  final ConnectionState expected = new ConnectionState() .connectionId(CONNECTION_ID) .stateType(ConnectionStateType.STREAM) .streamState(List.of( new StreamState().streamDescriptor(toApi(STREAM_DESCRIPTOR1)).streamState(JSON_BLOB), new StreamState().streamDescriptor(toApi(STREAM_DESCRIPTOR2)).streamState(JSON_BLOB))); final ConnectionState actual = stateHandler.getState(new ConnectionIdRequestBody().connectionId(CONNECTION_ID)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final ConnectorSpecification spec = createConnectorSpecification(createAdvancedAuth() .withPredicateKey(List.of(CREDENTIALS, AUTH_TYPE)) .withPredicateValue("")); final Map<String, Object> oauthParameters = generateOAuthParameters(); setupOAuthParamMocks(oauthParameters); final JsonNode actualConfig = oAuthConfigSupplier.maskSourceOAuthParameters(sourceDefinitionId, workspaceId, Jsons.clone(config), spec); final JsonNode expectedConfig = getExpectedNode(MoreOAuthParameters.SECRET_MASK); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: deserializeWithValidBytes() { // Given byte[] bytes = "10.50".getBytes(); BigDecimal expectedValue = new BigDecimal("10.50");  // When Object result = serializer.deserialize(bytes);  // Then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, result)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, result )
************************************
[+] input: testFormatTemplate() { String template = "{{\n{format}\n}}"; Map<String, Object> kwargs = Map.of("format", "value");  String expected = "{\nvalue\n}"; String actual = formatTemplate(template, kwargs);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { for (final User user : MockData.users()) { final Optional<User> userFromDb = userPersistence.getUserByEmail(user.getEmail()); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertEquals(user, userFromDb.get())
[-] pred: org. junit. Assert. assertEquals ( user, userFromDb. get ( ) )
************************************
[+] input: testLimit_ApiKeyLimitNotFound() { Key key = new Key(); key.setRole("role"); ApiKeyData apiKeyData = new ApiKeyData(); apiKeyData.setOriginalKey(key); ProxyContext proxyContext = new ProxyContext(new Config(), request, apiKeyData, null, "trace-id", "span-id"); proxyContext.setDeployment(new Model());  Future<RateLimitResult> result = rateLimiter.limit(proxyContext);  "<AssertPlaceHolder>"; assertNotNull(result.result()); assertEquals(HttpStatus.FORBIDDEN, result.result().status()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: Exception { GetParametersResponse expectedResponse = new GetParametersResponse(); new Expectations() {{ mockedClient.getParameters((GetParametersRequest) any); result = expectedResponse; }};  // Call the method under test and verify the result GetParametersResponse actualResponse = oosClient.listParameters(Collections.singletonList("testName")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: testJoinPrepareAndCommitWithCoordinatorNotAvailable() { try (ConsumerCoordinator coordinator = prepareCoordinatorForCloseTest(true, true, Optional.of("group-id"), true)) { coordinator.ensureActiveGroup();  prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.COORDINATOR_NOT_AVAILABLE);  int generationId = 42; String memberId = "consumer-42";  boolean res = coordinator.onJoinPrepare(time.timer(0L), generationId, memberId); coordinator.invokeCompletedOffsetCommitCallbacks();  "<AssertPlaceHolder>"; assertFalse(client.hasPendingResponses()); assertFalse(client.hasInFlightRequests()); assertTrue(coordinator.coordinatorUnknown()); } }
[*] target: assertFalse(res)
[-] pred: org. junit. Assert. assertFalse ( res )
************************************
[+] input: JsonProcessingException { String expected = "{"endUserIp":"1.2.3.4","returnRisk":true," + ""requirement":{" + ""cardReader":"class1"," + ""certificatePolicies":["1.2.3.4.5"]" + "}" + "}";  BankIDRequirements requirements = new BankIDRequirements(); requirements.setCardReader("class1"); requirements.setCertificatePolicies(Collections.singletonList("1.2.3.4.5"));  StartAuthenticationRequest request = new StartAuthenticationRequest("1.2.3.4"); request.setRequirement(requirements);  ObjectMapper mapper = new ObjectMapper(); String json = mapper.writeValueAsString(request);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, json)
[-] pred: org. junit. Assert. assertEquals ( expected, json )
************************************
[+] input: testLimit_ApiKeySuccess_KeyNotFound() { Key key = new Key(); key.setRole("role"); key.setKey("key"); key.setProject("api-key"); Config config = new Config(); Role role = new Role(); Limit limit = new Limit(); role.setLimits(Map.of("model", limit)); config.setRoles(Map.of("role", role)); ApiKeyData apiKeyData = new ApiKeyData(); apiKeyData.setOriginalKey(key); ProxyContext proxyContext = new ProxyContext(config, request, apiKeyData, null, "trace-id", "span-id"); Model model = new Model(); model.setName("model"); proxyContext.setDeployment(model);  when(vertx.executeBlocking(any(Callable.class), eq(false))).thenAnswer(invocation -> { Callable<?> callable = invocation.getArgument(0); return Future.succeededFuture(callable.call()); });  Future<RateLimitResult> result = rateLimiter.limit(proxyContext);  "<AssertPlaceHolder>"; assertNotNull(result.result()); assertEquals(HttpStatus.OK, result.result().status()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: IOException { final String envFileContents = "OPTION1=hello\n" + "OPTION2=2\n" + "OPTION3=\n"; final File envFile = File.createTempFile("properties-test", ".env"); IOs.writeFile(envFile.toPath(), envFileContents);  final Properties actual = MoreProperties.envFileToProperties(envFile); final Properties expected = new Properties(); expected.put("OPTION1", "hello"); expected.put("OPTION2", "2"); expected.put("OPTION3", "");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testChatGLM() { var llm = ChatGLM.builder().build().init(); var actual = llm.predict("Say foo:");  var expected = "Foo."; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: addPostLike() { // given long postId = 1L; long userId = 1L;  signUpMapper.addUser("no-reply@test.com", "username", "password", LoginType.NORMAL);  AddBasicPostRequest basicPost = AddBasicPostRequest.builder() .postId(postId) .content("content") .hashTagNames(Set.of("hashtag")) .build(); postMapper.save(postId, basicPost);  // when postLikeMapper.addPostLike(postId, userId);  // then boolean hasLike = postLikeMapper.hasLike(postId, userId); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(hasLike)
[-] pred: org. junit. Assert. assertTrue ( hasLike )
************************************
[+] input: testGetCommodity() { GetCommodityParam getCommodityParam = new GetCommodityParam(); CommodityDTO expectedCommodityDTO = new CommodityDTO();  when(commodityService.getCommodity(any(GetCommodityParam.class))) .thenReturn(expectedCommodityDTO);  CommodityDTO result = commodityController.getCommodity(getCommodityParam);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCommodityDTO, result)
[-] pred: org. junit. Assert. assertEquals ( expectedCommodityDTO, result )
************************************
[+] input: increaseProtocolAdapterMetric_whenAlreadyExists_thenIncrementAndRegister() { protocolAdapterMetrics.increaseProtocolAdapterMetric("test");  final Counter counter = metricRegistry.getCounters().get(PROTOCOL_ADAPTER_PREFIX + "test.current"); "<AssertPlaceHolder>"; assertEquals(1L, counter.getCount()); }
[*] target: assertNotNull(counter)
[-] pred: org. junit. Assert. assertNotNull ( counter )
************************************
[+] input: testListConfigParameters() { ListResult<ConfigParameterModel> expectedListResult = new ListResult<>(); ListConfigParametersParam listConfigParametersParam = new ListConfigParametersParam(); ConfigParameterQueryModel configParameterQueryModel = new ConfigParameterQueryModel(); configParameterQueryModel.setName("name"); configParameterQueryModel.setEncrypted(true); listConfigParametersParam.setConfigParameterQueryModels(Arrays.asList(configParameterQueryModel)); ConfigParameterModel expectedConfigParameterModel1 = new ConfigParameterModel(); expectedConfigParameterModel1.setName("adjusted-name1"); expectedConfigParameterModel1.setValue("adjusted-value1"); ConfigParameterModel expectedConfigParameterModel2 = new ConfigParameterModel(); expectedConfigParameterModel2.setName("adjusted-name2"); expectedConfigParameterModel2.setValue("adjusted-value2"); List<String> secretNames = Arrays.asList("adjusted-name1", "adjusted-name2"); List<String> names = new ArrayList<>(); List<ConfigParameterModel> secretParameterModels = Arrays.asList(expectedConfigParameterModel1, expectedConfigParameterModel2); List<ConfigParameterModel> parameterModels = new ArrayList<>(); expectedListResult.setData(Arrays.asList(expectedConfigParameterModel1, expectedConfigParameterModel2));  new Expectations() {{ parameterOosHelper.listSecretParameters(withAny(secretNames)); result = secretParameterModels; parameterOosHelper.listParameters(withAny(names)); result = parameterModels; }};  ListResult<ConfigParameterModel> actualListResult = parameterManagerService.listConfigParameters(userInfoModel, listConfigParametersParam);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedListResult, actualListResult)
[-] pred: org. junit. Assert. assertEquals ( expectedListResult, actualListResult )
************************************
[+] input: testUpdateCommoditySpecification() { UpdateCommoditySpecificationParam param = new UpdateCommoditySpecificationParam(); BaseResult<Void> expectedResponse = new BaseResult<>("code", "message", null, "requestId");  when(commoditySpecificationService.updateCommoditySpecification(any(UserInfoModel.class), any(UpdateCommoditySpecificationParam.class))) .thenReturn(expectedResponse);  BaseResult<Void> result = commoditySpecificationController.updateCommoditySpecification(userInfo, param);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResponse, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, result )
************************************
[+] input: IOException { final UUID destinationDefinitionId = UUID.randomUUID(); final UUID destinationId = UUID.randomUUID(); final UUID workspaceId = UUID.randomUUID(); when(configRepository.getStandardDestinationDefinition(destinationDefinitionId)).thenReturn(DESTINATION_DEFINITION); when(actorDefinitionVersionHelper.getDestinationVersion(DESTINATION_DEFINITION, workspaceId, destinationId)) .thenReturn(DESTINATION_DEFINITION_VERSION_OLD);  when(remoteDefinitionsProvider.getConnectorDocumentation(DESTINATION_DOCKER_REPO, DESTINATION_VERSION_OLD)).thenReturn(Optional.empty()); when(remoteDefinitionsProvider.getConnectorDocumentation(DESTINATION_DOCKER_REPO, LATEST)) .thenReturn(Optional.of(DOC_CONTENTS_LATEST));  final ConnectorDocumentationRequestBody request = new ConnectorDocumentationRequestBody().actorType(ActorType.DESTINATION) .actorDefinitionId(destinationDefinitionId).workspaceId(workspaceId).actorId(destinationId);  final ConnectorDocumentationRead expectedResult = new ConnectorDocumentationRead().doc(DOC_CONTENTS_LATEST); final ConnectorDocumentationRead actualResult = connectorDocumentationHandler.getConnectorDocumentation(request);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualResult )
************************************
[+] input: testDropPartition() { Partition testDrop = Partitions.identity( "p3", new String[][] {{"col1"}}, new Literal[] {Literals.stringLiteral("v2")}, Maps.newHashMap()); partitionOperationDispatcher.addPartition(TABLE_IDENT, testDrop); Assertions.assertTrue( partitionOperationDispatcher.partitionExists(TABLE_IDENT, testDrop.name()));  Assertions.assertTrue( partitionOperationDispatcher.partitionExists(TABLE_IDENT, testDrop.name()));  boolean dropped = partitionOperationDispatcher.dropPartition(TABLE_IDENT, testDrop.name()); Assertions."<AssertPlaceHolder>"; Assertions.assertFalse( partitionOperationDispatcher.partitionExists(TABLE_IDENT, testDrop.name())); }
[*] target: assertTrue(dropped)
[-] pred: org. junit. Assert. assertTrue ( dropped )
************************************
[+] input: testParseSql_defaultVariableValue() { String sql = "select * from t_$interval$ where id = $id$ and name = $name$"; List<SqlVariable> variables = Lists.newArrayList(mockNumSqlVariable(), mockExprSqlVariable(), mockStrSqlVariable()); String actualSql = SqlVariableParseUtils.parse(sql, variables, Lists.newArrayList()); String expectedSql = "select * from t_d where id = 1 and name = 'tom'"; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSql, actualSql)
[-] pred: org. junit. Assert. assertEquals ( expectedSql, actualSql )
************************************
[+] input: getInstanceAdminRoles() { final Set<String> expectedRoles = Set.of( AuthRole.ADMIN.getLabel(), AuthRole.EDITOR.getLabel(), AuthRole.READER.getLabel(), AuthRole.AUTHENTICATED_USER.getLabel(), WorkspaceAuthRole.WORKSPACE_ADMIN.getLabel(), WorkspaceAuthRole.WORKSPACE_EDITOR.getLabel(), WorkspaceAuthRole.WORKSPACE_READER.getLabel(), OrganizationAuthRole.ORGANIZATION_ADMIN.getLabel(), OrganizationAuthRole.ORGANIZATION_EDITOR.getLabel(), OrganizationAuthRole.ORGANIZATION_READER.getLabel(), OrganizationAuthRole.ORGANIZATION_MEMBER.getLabel());  final Set<String> actualRoles = RbacRoleHelper.getInstanceAdminRoles();  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRoles, actualRoles)
[-] pred: org. junit. Assert. assertEquals ( expectedRoles, actualRoles )
************************************
[+] input: givenLoginRequest_WhenWhenAdminRole_ReturnSuccess() {  // given LoginRequest request = LoginRequest.builder() .email("admin@bookdelivery.com") .password("admin_password") .build();  User mockUser = User.builder() .email(request.getEmail()) .fullName("Test User") .username("testuser") .password("hashedPassword") .role(Role.ROLE_CUSTOMER) .build();  Authentication mockAuthentication = new UsernamePasswordAuthenticationToken( request.getEmail(), request.getPassword());  // when when(authenticationManager.authenticate(any(UsernamePasswordAuthenticationToken.class))) .thenReturn(mockAuthentication); when(jwtUtils.generateJwtToken(mockAuthentication)).thenReturn("mockedToken"); when(userRepository.findByEmail(request.getEmail())).thenReturn(Optional.of(mockUser)); when(refreshTokenService.createRefreshToken(any(User.class))) .thenReturn("actualRefreshToken");  // then JWTResponse jwtResponse = authService.login(request);  "<AssertPlaceHolder>"; assertEquals(request.getEmail(), jwtResponse.getEmail()); assertEquals("mockedToken", jwtResponse.getToken()); assertEquals("actualRefreshToken", jwtResponse.getRefreshToken());  }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
[+] input: getProductsByCategory_shouldReturnProductPage() { // Given Pageable pageable = PageRequest.of(0, 10); List<Product> productList = new ArrayList<>(List.of(new Product(), new Product())); Page<Product> productPage = new PageImpl<>(productList);  // When when(productRepository.findAllByCategory_Id(1L, pageable)).thenReturn(productPage); Page<Product> result = serviceTest.getProductsByCategory(1L, pageable);  // Then verify(productRepository).findAllByCategory_Id(1L, pageable); "<AssertPlaceHolder>"; }
[*] target: assertEquals(productPage, result)
[-] pred: org. junit. Assert. assertEquals ( productPage, result )
************************************
[+] input: checkNameExistsTrue() { //        given FrontendResource frontendResource = mock(FrontendResource.class); BindingResult br = mock(BindingResult.class);  //        when when(frontendResourceRepository.findByName(anyString())).thenReturn(frontendResource); boolean result = frontendResourceService.checkNameExists(FRONTEND_RESOURCE_NAME, br);  //        then "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testSnapshot() { SnapshottableSamples sequence = new SnapshottableSamples(512); for (int i = 0; i < 1000; i++) { sequence.append(i); } for (int i = 0; i < 100; i++) { sequence.snapshot(); } Snapshot snapshot = sequence.snapshot(); Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(snapshot.getPrev()); Assertions.assertNull(snapshot.getPrev().getPrev()); }
[*] target: assertNotNull(snapshot)
[-] pred: org. junit. Assert. assertNotNull ( snapshot )
************************************
[+] input: decodeJsonString() { final String encodedString = niceJson("hello `b `n `b `u1234 "); final String result = CharArrayUtils.decodeJsonString(encodedString.toCharArray(), 0, encodedString.length());  final int expectedCount = encodedString.length() - 3 - 5; "<AssertPlaceHolder>"; assertEquals("hello \b \n \b \u1234 ", result); }
[*] target: assertEquals(expectedCount, result.length())
[-] pred: org. junit. Assert. assertEquals ( expectedCount, result. length ( ) )
************************************
[+] input: IOException { final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final ConnectorSpecification spec = createConnectorSpecification(createAdvancedAuth() .withPredicateKey(null) .withPredicateValue(null)); final Map<String, Object> oauthParameters = generateOAuthParameters(); setupOAuthParamMocks(oauthParameters); final JsonNode actualConfig = oAuthConfigSupplier.maskSourceOAuthParameters(sourceDefinitionId, workspaceId, Jsons.clone(config), spec); final JsonNode expectedConfig = getExpectedNode(MoreOAuthParameters.SECRET_MASK); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: catalogGetOrCreateWithExistingTable() { String catalogName = "catalog2"; StubCatalog.registerMock(catalogName, mockCatalog); IcebergCatalogConfig catalogConfig = IcebergCatalogConfig.builder() .catalogImpl(StubCatalog.class.getName()) .catalogName(catalogName) .catalogOptions(OPTIONS) .build(); Table mockTable = mock(Table.class); when(mockCatalog.tableExists(IDENTIFIER)).thenReturn(true); when(mockCatalog.loadTable(IDENTIFIER)).thenReturn(mockTable);  IcebergTableManager tableManager = IcebergTableManager.of(CONFIGURATION); Schema schema = new Schema(); PartitionSpec partitionSpec = PartitionSpec.unpartitioned(); Table actual = tableManager.getOrCreateTable(catalogConfig, IDENTIFIER, BASE_PATH, schema, partitionSpec); "<AssertPlaceHolder>"; verify(mockCatalog).initialize(catalogName, OPTIONS); verify(mockCatalog, never()).createTable(any(), any(), any(), any()); }
[*] target: assertEquals(mockTable, actual)
[-] pred: org. junit. Assert. assertEquals ( mockTable, actual )
************************************
[+] input: buildUndoSQL() { String sql = executor.buildUndoSQL().toLowerCase(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sql.contains("update")); Assertions.assertTrue(sql.contains("id")); Assertions.assertTrue(sql.contains("age")); }
[*] target: assertNotNull(sql)
[-] pred: org. junit. Assert. assertNotNull ( sql )
************************************
[+] input: right() { Either<String, Integer> stringIntegerEither = Either.right(5); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(stringIntegerEither)
[-] pred: org. junit. Assert. assertNotNull ( stringIntegerEither )
************************************
[+] input: IpRangeFormatException { String inputRange = "192.168.0.1,192.168.0.10"; NormalizeRangeHost normalizeRangeHost = new NormalizeRangeHost(inputRange);  String expectedNormalizedRange = "[192.168.0.1 TO 192.168.0.10]"; String actualNormalizedRange = normalizeRangeHost.normalize();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedNormalizedRange, actualNormalizedRange)
[-] pred: org. junit. Assert. assertEquals ( expectedNormalizedRange, actualNormalizedRange )
************************************
[+] input: givenLoginRequest_WhenCustomerRole_ReturnSuccess() {  // given LoginRequest request = LoginRequest.builder() .email("customer@bookdelivery.com") .password("customer_password") .build();  User mockUser = User.builder() .email(request.getEmail()) .fullName("Test User") .username("testuser") .password("hashedPassword") .role(Role.ROLE_CUSTOMER) .build();  Authentication mockAuthentication = new UsernamePasswordAuthenticationToken( request.getEmail(), request.getPassword());  // when when(authenticationManager.authenticate(any(UsernamePasswordAuthenticationToken.class))) .thenReturn(mockAuthentication); when(jwtUtils.generateJwtToken(mockAuthentication)).thenReturn("mockedToken"); when(userRepository.findByEmail(request.getEmail())).thenReturn(Optional.of(mockUser)); when(refreshTokenService.createRefreshToken(any(User.class))) .thenReturn("actualRefreshToken");  // then JWTResponse jwtResponse = authService.login(request);  "<AssertPlaceHolder>"; assertEquals(request.getEmail(), jwtResponse.getEmail()); assertEquals("mockedToken", jwtResponse.getToken()); assertEquals("actualRefreshToken", jwtResponse.getRefreshToken());  }
[*] target: assertNotNull(jwtResponse)
[-] pred: org. junit. Assert. assertNotNull ( jwtResponse )
************************************
[+] input: JsonValidationException { final ConnectorSpecification connectorSpecification = ConnectorSpecificationHelpers.generateAdvancedAuthConnectorSpecification(); final Map<String, List<String>> result = OAuthSecretHelper.getOAuthInputPaths(connectorSpecification); final Map<String, List<String>> expected = Map.of( CLIENT_ID, List.of(CLIENT_ID), CLIENT_SECRET, List.of(CLIENT_SECRET)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: Exception { ClientQuotaControlManager manager = new ClientQuotaControlManager.Builder().build();  Map<ClientQuotaEntity, Map<String, Double>> quotasToTest = new HashMap<>(); quotasToTest.put(userClientEntity("user-1", "client-id-1"), quotas(QuotaConfigs.REQUEST_PERCENTAGE_OVERRIDE_CONFIG, 50.50)); quotasToTest.put(userClientEntity("user-2", "client-id-1"), quotas(QuotaConfigs.REQUEST_PERCENTAGE_OVERRIDE_CONFIG, 51.51)); quotasToTest.put(userClientEntity("user-3", "client-id-2"), quotas(QuotaConfigs.REQUEST_PERCENTAGE_OVERRIDE_CONFIG, 52.52)); quotasToTest.put(userClientEntity(null, "client-id-1"), quotas(QuotaConfigs.REQUEST_PERCENTAGE_OVERRIDE_CONFIG, 53.53)); quotasToTest.put(userClientEntity("user-1", null), quotas(QuotaConfigs.REQUEST_PERCENTAGE_OVERRIDE_CONFIG, 54.54)); quotasToTest.put(userClientEntity("user-3", null), quotas(QuotaConfigs.REQUEST_PERCENTAGE_OVERRIDE_CONFIG, 55.55)); quotasToTest.put(userEntity("user-1"), quotas(QuotaConfigs.REQUEST_PERCENTAGE_OVERRIDE_CONFIG, 56.56)); quotasToTest.put(userEntity("user-2"), quotas(QuotaConfigs.REQUEST_PERCENTAGE_OVERRIDE_CONFIG, 57.57)); quotasToTest.put(userEntity("user-3"), quotas(QuotaConfigs.REQUEST_PERCENTAGE_OVERRIDE_CONFIG, 58.58)); quotasToTest.put(userEntity(null), quotas(QuotaConfigs.REQUEST_PERCENTAGE_OVERRIDE_CONFIG, 59.59)); quotasToTest.put(clientEntity("client-id-2"), quotas(QuotaConfigs.REQUEST_PERCENTAGE_OVERRIDE_CONFIG, 60.60));  List<ClientQuotaAlteration> alters = new ArrayList<>(); quotasToTest.forEach((entity, quota) -> entityQuotaToAlterations(entity, quota, alters::add)); List<ApiMessageAndVersion> records = alterQuotas(alters, manager); List<ApiMessageAndVersion> expectedRecords = Arrays.asList( new ApiMessageAndVersion(new ClientQuotaRecord().setEntity(Arrays.asList( new EntityData().setEntityType("user").setEntityName("user-1"), new EntityData().setEntityType("client-id").setEntityName("client-id-1"))). setKey("request_percentage").setValue(50.5).setRemove(false), (short) 0), new ApiMessageAndVersion(new ClientQuotaRecord().setEntity(Arrays.asList( new EntityData().setEntityType("user").setEntityName("user-2"), new EntityData().setEntityType("client-id").setEntityName("client-id-1"))). setKey("request_percentage").setValue(51.51).setRemove(false), (short) 0), new ApiMessageAndVersion(new ClientQuotaRecord().setEntity(Arrays.asList( new EntityData().setEntityType("user").setEntityName("user-3"), new EntityData().setEntityType("client-id").setEntityName("client-id-2"))). setKey("request_percentage").setValue(52.52).setRemove(false), (short) 0), new ApiMessageAndVersion(new ClientQuotaRecord().setEntity(Arrays.asList( new EntityData().setEntityType("user").setEntityName(null), new EntityData().setEntityType("client-id").setEntityName("client-id-1"))). setKey("request_percentage").setValue(53.53).setRemove(false), (short) 0), new ApiMessageAndVersion(new ClientQuotaRecord().setEntity(Arrays.asList( new EntityData().setEntityType("user").setEntityName("user-1"), new EntityData().setEntityType("client-id").setEntityName(null))). setKey("request_percentage").setValue(54.54).setRemove(false), (short) 0), new ApiMessageAndVersion(new ClientQuotaRecord().setEntity(Arrays.asList( new EntityData().setEntityType("user").setEntityName("user-3"), new EntityData().setEntityType("client-id").setEntityName(null))). setKey("request_percentage").setValue(55.55).setRemove(false), (short) 0), new ApiMessageAndVersion(new ClientQuotaRecord().setEntity(Arrays.asList( new EntityData().setEntityType("user").setEntityName("user-1"))). setKey("request_percentage").setValue(56.56).setRemove(false), (short) 0), new ApiMessageAndVersion(new ClientQuotaRecord().setEntity(Arrays.asList( new EntityData().setEntityType("user").setEntityName("user-2"))). setKey("request_percentage").setValue(57.57).setRemove(false), (short) 0), new ApiMessageAndVersion(new ClientQuotaRecord().setEntity(Arrays.asList( new EntityData().setEntityType("user").setEntityName("user-3"))). setKey("request_percentage").setValue(58.58).setRemove(false), (short) 0), new ApiMessageAndVersion(new ClientQuotaRecord().setEntity(Arrays.asList( new EntityData().setEntityType("user").setEntityName(null))). setKey("request_percentage").setValue(59.59).setRemove(false), (short) 0), new ApiMessageAndVersion(new ClientQuotaRecord().setEntity(Arrays.asList( new EntityData().setEntityType("client-id").setEntityName("client-id-2"))). setKey("request_percentage").setValue(60.60).setRemove(false), (short) 0)); records = new ArrayList<>(records); RecordTestUtils.deepSortRecords(records); RecordTestUtils.deepSortRecords(expectedRecords); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRecords, records)
[-] pred: org. junit. Assert. assertEquals ( expectedRecords, records )
************************************
[+] input: testGetSavePathExc() { boolean exceptionThrown = false; try { persistency.getSavePath(FileType.CODE); } catch (IllegalArgumentException e) { exceptionThrown = true; } "<AssertPlaceHolder>"; }
[*] target: assertTrue(exceptionThrown)
[-] pred: org. junit. Assert. assertTrue ( exceptionThrown )
************************************
[+] input: shouldGenerateEmptyJsonSchemaWhenClassHasNoFields() { var actualJsonSchema = schemaConverter.convert(EmptyClass.class).toString(); var expectedJsonSchema = JSON_EMPTY_CLASS; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonSchema, actualJsonSchema)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonSchema, actualJsonSchema )
************************************
[+] input: IOException { final UUID destinationDefinitionId = UUID.randomUUID(); final UUID destinationId = UUID.randomUUID(); final UUID workspaceId = UUID.randomUUID(); when(configRepository.getStandardDestinationDefinition(destinationDefinitionId)).thenReturn(DESTINATION_DEFINITION); when(actorDefinitionVersionHelper.getDestinationVersion(DESTINATION_DEFINITION, workspaceId, destinationId)) .thenReturn(DESTINATION_DEFINITION_VERSION_OLD);  when(remoteDefinitionsProvider.getConnectorDocumentation(DESTINATION_DOCKER_REPO, DESTINATION_VERSION_OLD)) .thenReturn(Optional.of(DOC_CONTENTS_OLD));  final ConnectorDocumentationRequestBody request = new ConnectorDocumentationRequestBody().actorType(ActorType.DESTINATION) .actorDefinitionId(destinationDefinitionId).workspaceId(workspaceId).actorId(destinationId);  final ConnectorDocumentationRead expectedResult = new ConnectorDocumentationRead().doc(DOC_CONTENTS_OLD); final ConnectorDocumentationRead actualResult = connectorDocumentationHandler.getConnectorDocumentation(request);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualResult )
************************************
[+] input: IpRangeFormatException { String inputRange = "192.168.0.1 - 192.168.0.10"; NormalizeRangeHost normalizeRangeHost = new NormalizeRangeHost(inputRange);  String expectedNormalizedRange = "[192.168.0.1 TO 192.168.0.10]"; String actualNormalizedRange = normalizeRangeHost.normalize();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedNormalizedRange, actualNormalizedRange)
[-] pred: org. junit. Assert. assertEquals ( expectedNormalizedRange, actualNormalizedRange )
************************************
[+] input: testCreateRuleDetailsError() { boolean exceptionThrown = false; try { ruleDocumentation.createRuleDetails(-1); } catch (IllegalArgumentException e) { exceptionThrown = true; } assertTrue(exceptionThrown);  exceptionThrown = false; try { ruleDocumentation.createRuleDetails(rules.length); } catch (IllegalArgumentException e) { exceptionThrown = true; } "<AssertPlaceHolder>"; }
[*] target: assertTrue(exceptionThrown)
[-] pred: org. junit. Assert. assertTrue ( exceptionThrown )
************************************
[+] input: testProjectRemainingDestinationConflicts() { final AirbyteProtocolVersionRange targetRange = new AirbyteProtocolVersionRange(V1_0_0, V2_0_0);  final UUID dest1 = UUID.randomUUID(); final UUID dest2 = UUID.randomUUID(); final UUID dest3 = UUID.randomUUID(); final Set<UUID> initialConflicts = Set.of(dest1, dest2, dest3);  setNewDestinationDefinitions(List.of( Map.entry(dest1, V2_0_0), Map.entry(dest2, V1_0_0), Map.entry(dest3, V2_0_0)));  final ProtocolVersionChecker protocolVersionChecker = new ProtocolVersionChecker(jobPersistence, targetRange, configRepository, definitionsProvider); final Set<UUID> actualConflicts = protocolVersionChecker.projectRemainingConflictsAfterConnectorUpgrades(targetRange, initialConflicts, ActorType.DESTINATION);  final Set<UUID> expectedConflicts = Set.of(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedConflicts, actualConflicts)
[-] pred: org. junit. Assert. assertEquals ( expectedConflicts, actualConflicts )
************************************
[+] input: JsonProcessingException { Notification notification = new Notification(); notification.setText("test content");  ObjectMapper mapper = new ObjectMapper();  JsonNode expected = mapper.readTree(""" { "text": "test content" }"""); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, notification.toJsonNode())
[-] pred: org. junit. Assert. assertEquals ( expected, notification. toJsonNode ( ) )
************************************
[+] input: allocateWhenOrderHasNextPointerShouldReturnRuntimePointerToBlock() { int headerPointer = 134; int size = 12; int orderSize = 16; RuntimePointerSize expected = new RuntimePointerSize(headerPointer + HEADER_SIZE, size); when(orders.get(anyInt())).thenReturn(order); when(order.getValue()).thenReturn(ORDER_VALUE); when(order.getBlockSize()).thenReturn(orderSize); when(order.popFreeHeaderPointer(any())).thenReturn(Optional.of(headerPointer));  RuntimePointerSize result = freeingBumpHeapAllocator.allocate(size, memory);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testModifyDatabase() { for (DialectProperties dialectProperties : dialectPropertiesList) { Long dataSourceId = TestUtils.nextLong(); Long consoleId = TestUtils.nextLong(); TestUtils.buildContext(dialectProperties, dataSourceId, consoleId);  DatabaseCreateParam databaseCreateParam = new DatabaseCreateParam(); databaseCreateParam.setName("test" + TestUtils.nextLong());  ActionResult actionResult = databaseService.modifyDatabase(databaseCreateParam); "<AssertPlaceHolder>";  } }
[*] target: assertNotNull(actionResult)
[-] pred: org. junit. Assert. assertNotNull ( actionResult )
************************************
[+] input: testStringPringWriterAppendChar() { StringBuilder sb = new StringBuilder(); try (var w = Internal.StringBuilderPrintWriter.of(sb)) { w.append('h'); w.flush(); } String expected = "h"; String actual = sb.toString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: createNewRoleByTypeAnyTest() { //        given mockAndAuthenticateUser(1l, "test@openkoda.com", "TEST", "(canManageBackend)"); //        when Mockito.when(globalRoleRepository.findByName(anyString())) .thenReturn(null); Mockito.when(organizationRoleRepository.findByName(anyString())) .thenReturn(null);  Role result = roleService.createRole(StringUtils.EMPTY, RoleService.ROLE_TYPE_GLOBAL, ROLE_PRIVILEGES_EMPTY);  //        then "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: shouldGenerateFullJsonSchemaWhenClassHasSomeFields() { var actualJsonSchema = schemaConverter.convert(TestClass.class).toString(); var expectedJsonSchema = "{"type":"object","properties":{"first":{"type":"string","myCustomProperty":true},"second":{"type":"integer","myCustomProperty":true}},"required":["first"],"myCustomProperty":true}"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonSchema, actualJsonSchema)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonSchema, actualJsonSchema )
************************************
[+] input: testCreatingFromATestContainer() { final DataSource dataSource = Databases.createDataSource(container); "<AssertPlaceHolder>"; assertEquals(HikariDataSource.class, dataSource.getClass()); assertEquals(10, ((HikariDataSource) dataSource).getHikariConfigMXBean().getMaximumPoolSize()); }
[*] target: assertNotNull(dataSource)
[-] pred: org. junit. Assert. assertNotNull ( dataSource )
************************************
[+] input: iteratorInOrder() { var map = new MutableHashedLinkedMap<String, Integer>(); map.put("first", 1); map.put("second", 2); map.put("third", 3);  var itr = map.iterator();  assertEquals("first", itr.next().getKey()); assertEquals("second", itr.next().getKey()); assertEquals("third", itr.next().getKey()); "<AssertPlaceHolder>"; }
[*] target: assertFalse(itr.hasNext())
[-] pred: org. junit. Assert. assertFalse ( itr. hasNext() )
************************************
[+] input: checkCardOwner_Fail() { // given int nonExistentCardId = 999; when(cardBoardRepository.findCardBoardByUserId(userId)).thenReturn(cardBoard);  // when boolean result = cardBoardUseCase.checkCardOwner(userId, nonExistentCardId);  // then "<AssertPlaceHolder>"; verify(cardBoardRepository, times(1)).findCardBoardByUserId(userId); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: buildEntityType() { EntityType<Entity> type = EntityType.Builder.createNothing(MobCategory.MISC) .alwaysUpdateVelocity(true) .build();  "<AssertPlaceHolder>"; assertTrue(type.trackDeltas()); }
[*] target: assertNotNull(type)
[-] pred: org. junit. Assert. assertNotNull ( type )
************************************
[+] input: JsonValidationException { final ConnectorSpecification connectorSpecification = ConnectorSpecificationHelpers.generateNestedAdvancedAuthConnectorSpecification(); final Map<String, List<String>> result = OAuthSecretHelper.getOAuthInputPaths(connectorSpecification); final Map<String, List<String>> expected = Map.of( CLIENT_ID, List.of(CREDENTIALS, CLIENT_ID), CLIENT_SECRET, List.of(CREDENTIALS, CLIENT_SECRET)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: IOException { final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final Map<String, Object> oauthParameters = generateOAuthParameters(); setupOAuthParamMocks(oauthParameters); final JsonNode actualConfig = oAuthConfigSupplier.maskSourceOAuthParameters(sourceDefinitionId, workspaceId, Jsons.clone(config), testConnectorSpecification); final JsonNode expectedConfig = getExpectedNode(MoreOAuthParameters.SECRET_MASK); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: Exception { final SimpleExampleMessageData message = new SimpleExampleMessageData(); message.setMyStruct(new SimpleExampleMessageData.MyStruct().setStructId(25).setArrayInStruct( Collections.singletonList(new SimpleExampleMessageData.StructArray().setArrayFieldId(20)) )); message.setMyTaggedStruct(new SimpleExampleMessageData.TaggedStruct().setStructId("abc"));  message.setProcessId(Uuid.randomUuid()); message.setMyNullableString("notNull"); message.setMyInt16((short) 3); message.setMyString("test string"); SimpleExampleMessageData duplicate = message.duplicate(); "<AssertPlaceHolder>"; assertEquals(message, duplicate); duplicate.setMyTaggedIntArray(Collections.singletonList(123)); assertNotEquals(duplicate, message); assertNotEquals(message, duplicate);  testAllMessageRoundTripsFromVersion((short) 2, message); }
[*] target: assertEquals(duplicate, message)
[-] pred: org. junit. Assert. assertEquals ( duplicate, message )
************************************
[+] input: IOException { final AirbyteProtocolVersionRange targetRange = new AirbyteProtocolVersionRange(V1_0_0, V2_0_0);  final UUID source1 = UUID.randomUUID(); final UUID source2 = UUID.randomUUID(); final UUID source3 = UUID.randomUUID(); final UUID dest1 = UUID.randomUUID(); final UUID dest2 = UUID.randomUUID();  final Map<UUID, Entry<ActorType, Version>> initialActorDefinitions = Map.of( source1, Map.entry(ActorType.SOURCE, V0_0_0), source2, Map.entry(ActorType.SOURCE, V1_0_0), source3, Map.entry(ActorType.SOURCE, V2_0_0), dest1, Map.entry(ActorType.DESTINATION, V0_0_0), dest2, Map.entry(ActorType.DESTINATION, V0_0_0)); when(configRepository.getActorDefinitionToProtocolVersionMap()).thenReturn(initialActorDefinitions);  final ProtocolVersionChecker protocolVersionChecker = new ProtocolVersionChecker(jobPersistence, targetRange, configRepository, definitionsProvider); final Map<ActorType, Set<UUID>> conflicts = protocolVersionChecker.getConflictingActorDefinitions(targetRange);  final Map<ActorType, Set<UUID>> expectedConflicts = Map.of( ActorType.DESTINATION, Set.of(dest1, dest2), ActorType.SOURCE, Set.of(source1)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedConflicts, conflicts)
[-] pred: org. junit. Assert. assertEquals ( expectedConflicts, conflicts )
************************************
[+] input: Exception { MockTime time = new MockTime(0, 0, 0); Scheduler scheduler = new MockScheduler(time); try (MiniTrogdorCluster cluster = new MiniTrogdorCluster.Builder(). addCoordinator("node01"). addAgent("node02"). scheduler(scheduler). build()) {  NoOpTaskSpec fooSpec = new NoOpTaskSpec(1, 500); time.sleep(552);  CoordinatorClient coordinatorClient = cluster.coordinatorClient(); NoOpTaskSpec updatedSpec = new NoOpTaskSpec(552, 500); coordinatorClient.createTask(new CreateTaskRequest("fooSpec", fooSpec)); TaskState expectedState = new ExpectedTaskBuilder("fooSpec").taskState( new TaskRunning(updatedSpec, 552, new TextNode("receiving")) ).build().taskState();  TaskState resp = coordinatorClient.task(new TaskRequest("fooSpec")); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedState, resp)
[-] pred: org. junit. Assert. assertEquals ( expectedState, resp )
************************************
[+] input: IOException { when(statePersistence.getCurrentState(CONNECTION_ID)).thenReturn(Optional.of( new StateWrapper() .withStateType(StateType.GLOBAL) .withGlobal(new AirbyteStateMessage().withType(AirbyteStateType.GLOBAL).withGlobal(new AirbyteGlobalState() .withSharedState(JSON_BLOB) .withStreamStates(List.of( new AirbyteStreamState().withStreamDescriptor(STREAM_DESCRIPTOR1).withStreamState(JSON_BLOB), new AirbyteStreamState().withStreamDescriptor(STREAM_DESCRIPTOR2).withStreamState(JSON_BLOB)))))));  final ConnectionState expected = new ConnectionState() .connectionId(CONNECTION_ID) .stateType(ConnectionStateType.GLOBAL) .streamState(null) .globalState(new GlobalState().sharedState(JSON_BLOB).streamStates(List.of( new StreamState().streamDescriptor(toApi(STREAM_DESCRIPTOR1)).streamState(JSON_BLOB), new StreamState().streamDescriptor(toApi(STREAM_DESCRIPTOR2)).streamState(JSON_BLOB)))); final ConnectionState actual = stateHandler.getState(new ConnectionIdRequestBody().connectionId(CONNECTION_ID)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IpRangeFormatException { String inputRange = "192.168.0.1/24"; NormalizeRangeHost normalizeRangeHost = new NormalizeRangeHost(inputRange);  String expectedNormalizedRange = ""192.168.0.1/24""; String actualNormalizedRange = normalizeRangeHost.normalize();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedNormalizedRange, actualNormalizedRange)
[-] pred: org. junit. Assert. assertEquals ( expectedNormalizedRange, actualNormalizedRange )
************************************
[+] input: Exception { List<String> producerProps = Collections.singletonList("acks=1");  Properties prop = ProducerPerformance.readProps(producerProps, null, "1234", true);  "<AssertPlaceHolder>"; assertEquals("perf-producer-client", prop.getProperty("client.id")); }
[*] target: assertNotNull(prop)
[-] pred: org. junit. Assert. assertNotNull ( prop )
************************************
[+] input: 키워드가_존재하는지_조회한다() { // given final String query = "민수";  // when boolean exists = popularSearchRepository.existsByKeyword(query);  // then "<AssertPlaceHolder>"; }
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
[+] input: idleBeat() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 15;  // Act final ReturnT<String> retval = executorBiz.idleBeat(new IdleBeatParam(jobId));  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(500, retval.getCode()); Assertions.assertEquals("job thread is running or has trigger queue.", retval.getMsg()); }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: testGetCommodityPriceSpiToken() { GetCommodityPriceParam param = new GetCommodityPriceParam(); param.setPayPeriod(12L); param.setPayPeriodUnit(PayPeriodUnit.Month); param.setSpecificationName("basic"); param.setCommodityCode("saas-boost-176625a4"); param.setToken("ignoredToken");  Map<String, String> map = new HashMap<>(); map.put("commodityCode", "saas-boost-176625a4"); map.put("payPeriodUnit", PayPeriodUnit.Month.toString()); map.put("specificationName", "basic"); map.put("payPeriod", "12");  String data = TokenUtil.buildUrlParams(map); data += "&key=" + "isvKey"; String md5HexString = EncryptionUtil.getMd5HexString(data); String actualToken = TokenUtil.createSpiToken(param, "isvKey");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(md5HexString, actualToken)
[-] pred: org. junit. Assert. assertEquals ( md5HexString, actualToken )
************************************
[+] input: 공부미션을_생성한다() { // given MissionCreateRequest missionCreateRequest = new MissionCreateRequest( "testMissionName", "testMissionContent", MissionCategory.STUDY, MissionVisibility.ALL, MissionPeriod.TWO_WEEKS, LocalTime.of(21, 0));  // when MissionCreateResponse mission = missionService.createMission(missionCreateRequest);  // then "<AssertPlaceHolder>"; assertEquals("testMissionName", mission.name()); assertEquals("testMissionContent", mission.content()); assertEquals(MissionCategory.STUDY, mission.category()); assertEquals(MissionVisibility.ALL, mission.visibility()); }
[*] target: assertNotNull(mission)
[-] pred: org. junit. Assert. assertNotNull ( mission )
************************************
[+] input: expectUnchangedNodeWhenHackingBeforeCooldownIsOver() { //given Node node = new Node("abc", "123", "Home", 1, 100, new Coordinates(0, 0, 0), Instant.now().getEpochSecond(), 0); //when when(authentication.getName()).thenReturn(playerName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(nodeRepo.findById("abc")).thenReturn(Optional.of(node)); when(nodeRepo.save(node)).thenReturn(node); when(playerService.getPlayer(playerName)).thenReturn(playerunknown); Node actual = nodeService.edit("abc", ActionType.HACK); //then "<AssertPlaceHolder>"; verify(nodeRepo).findById("abc"); verify(playerService).getPlayer(playerName); }
[*] target: assertEquals(node, actual)
[-] pred: org. junit. Assert. assertEquals ( node, actual )
************************************
[+] input: Exception { UpdateSecretParameterResponse expectedResponse = new UpdateSecretParameterResponse(); new Expectations() {{ mockedClient.updateSecretParameter((UpdateSecretParameterRequest) any); result = expectedResponse; }};  // Call the method under test and verify the result UpdateSecretParameterResponse actualResponse = oosClient.updateSecretParameter("testName", "testValue"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: shouldTransformHeadersWhenEmpty() { headers.apply(appendToKey("-suffix")); headers.apply(key, appendToKey("-suffix")); "<AssertPlaceHolder>"; }
[*] target: assertTrue(headers.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( headers. isEmpty() )
************************************
[+] input: testListClosedWorkflowExecutions() { final var request = ListClosedWorkflowExecutionsRequest.newBuilder().build(); final var response = ListClosedWorkflowExecutionsResponse.newBuilder().build(); when(temporalWorkflowServiceBlockingStub.listClosedWorkflowExecutions(request)) .thenThrow(unavailable()) .thenReturn(response);  final var actual = serviceStubsWrapped.blockingStubListClosedWorkflowExecutions(request); "<AssertPlaceHolder>"; }
[*] target: assertEquals(response, actual)
[-] pred: org. junit. Assert. assertEquals ( response, actual )
************************************
[+] input: testUnpartitioned() { Schema icebergSchema = new Schema(Types.NestedField.required(0, "timestamp", Types.TimestampType.withZone())); PartitionSpec actual = IcebergPartitionSpecExtractor.getInstance().toIceberg(null, icebergSchema); PartitionSpec expected = PartitionSpec.unpartitioned(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: buildUndoSQL() { OracleUndoInsertExecutor executor = upperCase(); String sql = executor.buildUndoSQL(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sql.contains("DELETE")); Assertions.assertTrue(sql.contains("ID")); Assertions.assertTrue(sql.contains("TABLE_NAME")); }
[*] target: assertNotNull(sql)
[-] pred: org. junit. Assert. assertNotNull ( sql )
************************************
[+] input: testNewGroupMetadataTombstoneRecord() { CoordinatorRecord expectedRecord = new CoordinatorRecord( new ApiMessageAndVersion( new GroupMetadataKey() .setGroup("group-id"), (short) 2), null);  CoordinatorRecord groupMetadataRecord = CoordinatorRecordHelpers.newGroupMetadataTombstoneRecord("group-id"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRecord, groupMetadataRecord)
[-] pred: org. junit. Assert. assertEquals ( expectedRecord, groupMetadataRecord )
************************************
[+] input: testUpdateConfigParameterWithNullResponse() { new Expectations() {{ parameterOosHelper.updateConfigParameter(updateConfigParameterParam); result = null; }};  BaseResult<Void> actualResult = parameterManagerService.updateConfigParameter(userInfoModel, updateConfigParameterParam);  "<AssertPlaceHolder>"; }
[*] target: assertNull(actualResult)
[-] pred: org. junit. Assert. assertNull ( actualResult )
************************************
[+] input: testGetDestinationUrl() { final WebUrlHelper webUrlHelper = new WebUrlHelper(LOCALHOST_8000); final String destinationUrl = webUrlHelper.getSourceUrl(WORKSPACE_ID, DESTINATION_ID); final String expectedUrl = String.format("%s/workspaces/%s/source/%s", LOCALHOST_8000, WORKSPACE_ID, DESTINATION_ID); Assertions."<AssertPlaceHolder>";  }
[*] target: assertEquals(expectedUrl, destinationUrl)
[-] pred: org. junit. Assert. assertEquals ( expectedUrl, destinationUrl )
************************************
[+] input: ConfigNotFoundException { setupStandardDefinitionMock(createAdvancedAuth() .withPredicateKey(null) .withPredicateValue(null)); final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final UUID sourceId = UUID.randomUUID(); final Map<String, Object> oauthParameters = generateOAuthParameters(); setupOAuthParamMocks(oauthParameters); final JsonNode actualConfig = oAuthConfigSupplier.injectSourceOAuthParameters(sourceDefinitionId, sourceId, workspaceId, Jsons.clone(config)); final JsonNode expectedConfig = getExpectedNode((String) oauthParameters.get(API_CLIENT)); "<AssertPlaceHolder>"; assertTracking(workspaceId); }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: isOrderInConsumingReturnsFalse() { Long currentLocalDateTimeMillis = 123456789L; when(order.getBillingStartDateMillis()).thenReturn(null); when(order.getBillingEndDateMillis()).thenReturn(null);  Boolean result = orderOtsHelper.isOrderInConsuming(order, currentLocalDateTimeMillis);  assertTrue(result);  when(order.getBillingStartDateMillis()).thenReturn(123456L); when(order.getBillingEndDateMillis()).thenReturn(1234567L);  result = orderOtsHelper.isOrderInConsuming(order, currentLocalDateTimeMillis);  "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: parseHeaderFromBufferWithNonZeroPosition() { ByteBuffer buffer = ByteBuffer.allocate(64); buffer.position(10);  RequestHeader header = new RequestHeader(ApiKeys.FIND_COORDINATOR, (short) 1, "", 10); ObjectSerializationCache serializationCache = new ObjectSerializationCache(); // size must be called before write to avoid an NPE with the current implementation header.size(serializationCache); header.write(buffer, serializationCache); int limit = buffer.position(); buffer.position(10); buffer.limit(limit);  RequestHeader parsed = RequestHeader.parse(buffer); "<AssertPlaceHolder>"; }
[*] target: assertEquals(header, parsed)
[-] pred: org. junit. Assert. assertEquals ( header, parsed )
************************************
[+] input: should_silently_remove_none_exist_node() { IdTree idTree = new IdTree("111"); idTree.addNode("111", "222"); idTree.addNode("111", "333"); idTree.addNode("222", "444"); idTree.addNode(null, "555");  idTree.removeNode("whatever"); IdTree idTree2 = new IdTree("111"); idTree2.addNode("111", "222"); idTree2.addNode("111", "333"); idTree2.addNode("222", "444"); idTree2.addNode(null, "555"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(idTree, idTree2)
[-] pred: org. junit. Assert. assertEquals ( idTree, idTree2 )
************************************
[+] input: testIsFavorite_favoriteExists_returnTrue() { // given Article article = new Article(testUser1, "title1", "desc1", "content1"); when(articleFavoriteRepository.existsBy(testUser1, article)).thenReturn(true);  // when boolean isFavorite = sut.isFavorite(testUser1, article);  // then "<AssertPlaceHolder>"; verify(articleFavoriteRepository).existsBy(testUser1, article); }
[*] target: assertTrue(isFavorite)
[-] pred: org. junit. Assert. assertTrue ( isFavorite )
************************************
[+] input: testCommitOffsetOnly() { subscriptions.assignFromUser(singleton(t1p));  client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE)); coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));  prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.NONE);  AtomicBoolean success = new AtomicBoolean(false); coordinator.commitOffsetsAsync(singletonMap(t1p, new OffsetAndMetadata(100L)), callback(success)); coordinator.invokeCompletedOffsetCommitCallbacks(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(success.get())
[-] pred: org. junit. Assert. assertTrue ( success. get ( ) )
************************************
[+] input: testDeleteCommoditySpecification() { CommoditySpecificationParam param = new CommoditySpecificationParam(); BaseResult<Void> expectedResponse = new BaseResult<>("code", "message", null, "requestId");  when(commoditySpecificationService.deleteCommoditySpecification(any(UserInfoModel.class), any(CommoditySpecificationParam.class))) .thenReturn(expectedResponse);  BaseResult<Void> result = commoditySpecificationController.deleteCommoditySpecification(userInfo, param);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResponse, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, result )
************************************
[+] input: generateSignVerify() { Pair<PrivKey, PubKey> keyPair = EcdsaUtils.generateKeyPair(); byte[] signed = EcdsaUtils.signMessage(keyPair.getFirst().raw(), hashedMessage);  VerifySignature signature = new VerifySignature(signed, hashedMessage, keyPair.getSecond().raw(), Key.ECDSA); boolean verified = EcdsaUtils.verifySignature(signature);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
[+] input: testGetValidTokenWhenTokenExists() { User user = new User(); user.setEmail("E1"); PasswordResetRequest request = new PasswordResetRequest(); request.setEmail("E1"); request.setToken("T1");  PasswordResetToken token = service.createTokenWithUser(user); //doReturn(Optional.of(token)).when(repository).findByToken("T1"); doReturn(token).when(repository).findByToken("T1"); PasswordResetToken validToken = service.getValidToken(request);  "<AssertPlaceHolder>"; assertEquals(user, validToken.getUser()); verify(repository, times(1)).findByToken("T1"); }
[*] target: assertEquals(token, validToken)
[-] pred: org. junit. Assert. assertEquals ( token, validToken )
************************************
[+] input: IOException {  final AirbyteCatalog actorCatalog = CatalogHelpers.createAirbyteCatalog("clothes", Field.of("name", JsonSchemaType.STRING), Field.of("size", JsonSchemaType.NUMBER), Field.of("color", JsonSchemaType.STRING), Field.of("price", JsonSchemaType.NUMBER));  final String actualJson = Jsons.canonicalJsonSerialize(actorCatalog);  final String expectedJson = "{" + ""streams":[" + "{" + ""default_cursor_field":[]," + ""json_schema":{" + ""properties":{" + ""color":{"type":"string"}," + ""name":{"type":"string"}," + ""price":{"type":"number"}," + ""size":{"type":"number"}" + "}," + ""type":"object"" + "}," + ""name":"clothes"," + ""source_defined_primary_key":[]," + ""supported_sync_modes":["full_refresh"]" + "}" + "]" + "}";  // Assert that the result is a JSON string with keys sorted in alphabetical order "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, actualJson)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, actualJson )
************************************
[+] input: isTokenValid_ShouldReturnTrueForValidToken() { // Given String username = "testuser"; String token = generateToken(username, 3600000L); when(userDetails.getUsername()).thenReturn(username);  // When boolean isValid = jwtService.isTokenValid(token, userDetails);  // Then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isValid)
[-] pred: org. junit. Assert. assertTrue ( isValid )
************************************
[+] input: ConfigNotFoundException { final UUID connectionId = UUID.randomUUID(); final String streamName = "tableA"; final String streamNamespace = "schemaA"; final ConnectionStream connectionStream = new ConnectionStream() .streamName(streamName) .streamNamespace(streamNamespace); final ConnectionStreamRequestBody connectionStreamRequestBody = new ConnectionStreamRequestBody() .connectionId(connectionId) .streams(List.of(connectionStream)); final JobInfoRead expectedJobInfoRead = new JobInfoRead();  when(schedulerHandler.resetConnectionStream(connectionStreamRequestBody)).thenReturn(expectedJobInfoRead);  final JobInfoRead jobInfoRead = connectionApiController.resetConnectionStream(connectionStreamRequestBody); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJobInfoRead, jobInfoRead)
[-] pred: org. junit. Assert. assertEquals ( expectedJobInfoRead, jobInfoRead )
************************************
[+] input: testSizeOfUnsignedVarint() { // The old well-known implementation for sizeOfUnsignedVarint IntFunction<Integer> simpleImplementation = (int value) -> { int bytes = 1; while ((value & 0xffffff80) != 0L) { bytes += 1; value >>>= 7; } return bytes; };  // compare the full range of values for (int i = 0; i < Integer.MAX_VALUE && i >= 0; i += 13) { final int actual = ByteUtils.sizeOfUnsignedVarint(i); final int expected = simpleImplementation.apply(i); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: signInvalidVisibleLength() { // Arrange SignRequest request = new SignRequest(); request.setUserVisibleData(TestUtils.generateString(40001));  // Act boolean valid = request.validate();  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(valid)
[-] pred: org. junit. Assert. assertFalse ( valid )
************************************
[+] input: testPartitionDir() { AlterReplicaLogDirsRequestData data = new AlterReplicaLogDirsRequestData() .setDirs(new AlterReplicaLogDirCollection( asList(new AlterReplicaLogDir() .setPath("/data0") .setTopics(new AlterReplicaLogDirTopicCollection( asList(new AlterReplicaLogDirTopic() .setName("topic") .setPartitions(asList(0, 1)), new AlterReplicaLogDirTopic() .setName("topic2") .setPartitions(asList(7))).iterator())), new AlterReplicaLogDir() .setPath("/data1") .setTopics(new AlterReplicaLogDirTopicCollection( asList(new AlterReplicaLogDirTopic() .setName("topic3") .setPartitions(asList(12))).iterator()))).iterator())); AlterReplicaLogDirsRequest request = new AlterReplicaLogDirsRequest.Builder(data).build(); Map<TopicPartition, String> expect = new HashMap<>(); expect.put(new TopicPartition("topic", 0), "/data0"); expect.put(new TopicPartition("topic", 1), "/data0"); expect.put(new TopicPartition("topic2", 7), "/data0"); expect.put(new TopicPartition("topic3", 12), "/data1"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expect, request.partitionDirs())
[-] pred: org. junit. Assert. assertEquals ( expect, request. partitionDirs ( ) )
************************************
[+] input: testCreateUser() { UserManagementService.UserDTO userDTO = new UserManagementService.UserDTO(); userDTO.setFirstName("John"); userDTO.setLastName("Doe"); userDTO.setEmail("john.doe@example.com");  UserManagementService.User user = UserManagementService.createUser(userDTO); "<AssertPlaceHolder>"; assertEquals("John", user.getFirstName()); }
[*] target: assertNotNull(user)
[-] pred: org. junit. Assert. assertNotNull ( user )
************************************
[+] input: JsonProcessingException { String expected = "{"endUserIp":"1.2.3.4","userNonVisibleData":"aW52aXNpYmxl","returnRisk":true}";  StartAuthenticationRequest request = new StartAuthenticationRequest("1.2.3.4"); request.setUserNonVisibleData(new Base64String(this.nonVisibleData));  ObjectMapper mapper = new ObjectMapper(); String json = mapper.writeValueAsString(request);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, json)
[-] pred: org. junit. Assert. assertEquals ( expected, json )
************************************
[+] input: testCreateSchema() { for (DialectProperties dialectProperties : dialectPropertiesList) { Long dataSourceId = TestUtils.nextLong(); Long consoleId = TestUtils.nextLong(); TestUtils.buildContext(dialectProperties, dataSourceId, consoleId);  Schema schema = new Schema(); DataResult<Sql> result = databaseService.createSchema(schema); "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testFindByAssetCodeIn() { // Given List<String> assetCodes = Arrays.asList("78231", "24722"); List<Asset> expectedAssets = Arrays.asList( new Asset(1L, "78231", "a", 25400), new Asset(2L, "24722", "b", 52000) );  // When when(assetManagementRepository.findByAssetCodeIn(assetCodes)).thenReturn(expectedAssets); List<Asset> actualAssets = assetManagementRepository.findByAssetCodeIn(assetCodes);  // Then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAssets, actualAssets)
[-] pred: org. junit. Assert. assertEquals ( expectedAssets, actualAssets )
************************************
[+] input: NoSuchAlgorithmException { AccessTokenValidator validator = new AccessTokenValidator(idpConfig, vertx, client); IdentityProvider provider1 = mock(IdentityProvider.class); when(provider1.match(any(DecodedJWT.class))).thenReturn(false); IdentityProvider provider2 = mock(IdentityProvider.class); when(provider2.match(any(DecodedJWT.class))).thenReturn(false); List<IdentityProvider> providerList = List.of(provider1, provider2); validator.setProviders(providerList); KeyPair keyPair = generateRsa256Pair(); Algorithm algorithm = Algorithm.RSA256((RSAPublicKey) keyPair.getPublic(), (RSAPrivateKey) keyPair.getPrivate()); String token = JWT.create().withClaim("iss", "unknown-issuer").sign(algorithm); Future<ExtractedClaims> future = validator.extractClaims(getBearerHeaderValue(token)); "<AssertPlaceHolder>"; future.onComplete(res -> { assertTrue(res.failed()); assertNotNull(res.cause()); }); }
[*] target: assertNotNull(future)
[-] pred: org. junit. Assert. assertNotNull ( future )
************************************
[+] input: testIdTrackingAddMetaFields() { // create initial schema with a meta field manually specified Schema initial = Schema.createRecord( "test1", null, "hudi", false, Arrays.asList( new Schema.Field("_hoodie_commit_time", Schema.create(Schema.Type.STRING)), new Schema.Field("field1", Schema.create(Schema.Type.STRING)))); Schema initialWithIdTracking = idTracker.addIdTracking(initial, Option.empty(), false); // add all meta fields and ensure IDs are properly assigned Schema withMetaFields = Schema.createRecord( "test2", null, "hudi", false, Arrays.asList( new Schema.Field("_hoodie_commit_time", Schema.create(Schema.Type.STRING)), new Schema.Field("field1", Schema.create(Schema.Type.STRING)))); Schema withMetaFieldsAndIdTracking = idTracker.addIdTracking(withMetaFields, Option.of(initialWithIdTracking), true); IdTracking actual = idTracker.getIdTracking(withMetaFieldsAndIdTracking).get(); IdTracking expected = new IdTracking( Arrays.asList( new IdMapping("_hoodie_commit_time", 1), new IdMapping("field1", 2), new IdMapping("_hoodie_commit_seqno", 3), new IdMapping("_hoodie_record_key", 4), new IdMapping("_hoodie_partition_path", 5), new IdMapping("_hoodie_file_name", 6)), 6); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { List<String> producerProps = Collections.singletonList("client.id=producer-1");  Properties prop = ProducerPerformance.readProps(producerProps, null, "1234", true);  "<AssertPlaceHolder>"; assertEquals("producer-1", prop.getProperty("client.id")); }
[*] target: assertNotNull(prop)
[-] pred: org. junit. Assert. assertNotNull ( prop )
************************************
[+] input: isTaskOwnerWithFalse() { Long userId = 1L; Long taskId = 1L; Mockito.when(userRepository.isTaskOwner(userId, taskId)) .thenReturn(false); boolean isOwner = userService.isTaskOwner(userId, taskId); Mockito.verify(userRepository).isTaskOwner(userId, taskId); Assertions."<AssertPlaceHolder>"; }
[*] target: assertFalse(isOwner)
[-] pred: org. junit. Assert. assertFalse ( isOwner )
************************************
[+] input: testGetNestServiceByIdNonExistingServiceId() { SpecificationConfig.ServiceConfig result = specificationConfig.getNestServiceById("3"); "<AssertPlaceHolder>"; assertEquals("1", result.getId()); assertEquals("Service 1", result.getName()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testGetTableInfo() { var actual = database.getTableInfo(null); var expected = """  CREATE TABLE parents ( id INTEGER(32), student_name CHARACTER VARYING(64), parent_name CHARACTER VARYING(64), parent_mobile CHARACTER VARYING(16) )  /* 3 rows from parents table: id	student_name	parent_name	parent_mobile 1	Alex	Barry	088121 2	Alice	Jessica	088122 3	Jack	Simon	088123 */   CREATE TABLE students ( id INTEGER(32), name CHARACTER VARYING(64), score INTEGER(32) COMMENT 'math score', teacher_note CHARACTER VARYING(256) ) COMMENT 'student score table'  /* 3 rows from students table: id	name	score	teacher_note 1	Alex	100	Alex did perfectly every day in the class. 2	Alice	70	Alice needs a lot of improvements. 3	Jack	75	Event it is not the best, Jack has already improved. */"""; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCandidateLogSegmentsSkipsSegmentsAfterLastStableOffset() { UnifiedLog log = mock(UnifiedLog.class); LogSegment segment1 = mock(LogSegment.class); LogSegment segment2 = mock(LogSegment.class); LogSegment segment3 = mock(LogSegment.class); LogSegment activeSegment = mock(LogSegment.class);  when(segment1.baseOffset()).thenReturn(5L); when(segment2.baseOffset()).thenReturn(10L); when(segment3.baseOffset()).thenReturn(15L); when(activeSegment.baseOffset()).thenReturn(20L);  when(log.logSegments(5L, Long.MAX_VALUE)) .thenReturn(JavaConverters.collectionAsScalaIterable(Arrays.asList(segment1, segment2, segment3, activeSegment)));  RemoteLogManager.RLMTask task = remoteLogManager.new RLMTask(leaderTopicIdPartition, 128); List<RemoteLogManager.EnrichedLogSegment> expected = Arrays.asList( new RemoteLogManager.EnrichedLogSegment(segment1, 10L), new RemoteLogManager.EnrichedLogSegment(segment2, 15L) ); List<RemoteLogManager.EnrichedLogSegment> actual = task.candidateLogSegments(log, 5L, 15L); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: io.airbyte.data.exceptions.ConfigNotFoundException { final String updatedSourceName = "my updated source name"; final JsonNode newConfiguration = sourceConnection.getConfiguration(); ((ObjectNode) newConfiguration).put("apiKey", "987-xyz");  final SourceConnection expectedSourceConnection = Jsons.clone(sourceConnection) .withName(updatedSourceName) .withConfiguration(newConfiguration) .withTombstone(false);  final SourceUpdate sourceUpdate = new SourceUpdate() .name(updatedSourceName) .sourceId(sourceConnection.getSourceId()) .connectionConfiguration(newConfiguration);  when(secretsProcessor .copySecrets(sourceConnection.getConfiguration(), newConfiguration, sourceDefinitionSpecificationRead.getConnectionSpecification())) .thenReturn(newConfiguration); when(secretsProcessor.prepareSecretsForOutput(newConfiguration, sourceDefinitionSpecificationRead.getConnectionSpecification())) .thenReturn(newConfiguration); when(oAuthConfigSupplier.maskSourceOAuthParameters(sourceDefinitionSpecificationRead.getSourceDefinitionId(), sourceConnection.getWorkspaceId(), newConfiguration, sourceDefinitionVersion.getSpec())).thenReturn(newConfiguration); when(configRepository.getStandardSourceDefinition(sourceDefinitionSpecificationRead.getSourceDefinitionId())) .thenReturn(standardSourceDefinition); when(actorDefinitionVersionHelper.getSourceVersion(standardSourceDefinition, sourceConnection.getWorkspaceId(), sourceConnection.getSourceId())) .thenReturn(sourceDefinitionVersion); when(configRepository.getSourceDefinitionFromSource(sourceConnection.getSourceId())) .thenReturn(standardSourceDefinition); when(configRepository.getSourceConnection(sourceConnection.getSourceId())) .thenReturn(sourceConnection) .thenReturn(expectedSourceConnection); when(configurationUpdate.source(sourceConnection.getSourceId(), updatedSourceName, newConfiguration)) .thenReturn(expectedSourceConnection); when(actorDefinitionVersionHelper.getSourceVersionWithOverrideStatus(standardSourceDefinition, sourceConnection.getWorkspaceId(), sourceConnection.getSourceId())).thenReturn(sourceDefinitionVersionWithOverrideStatus);  final SourceRead actualSourceRead = sourceHandler.updateSource(sourceUpdate); final SourceRead expectedSourceRead = SourceHelpers.getSourceRead(expectedSourceConnection, standardSourceDefinition, IS_VERSION_OVERRIDE_APPLIED, SUPPORT_STATE) .connectionConfiguration(newConfiguration);  "<AssertPlaceHolder>";  verify(secretsProcessor).prepareSecretsForOutput(newConfiguration, sourceDefinitionSpecificationRead.getConnectionSpecification()); verify(oAuthConfigSupplier).maskSourceOAuthParameters(sourceDefinitionSpecificationRead.getSourceDefinitionId(), sourceConnection.getWorkspaceId(), newConfiguration, sourceDefinitionVersion.getSpec()); verify(sourceService).writeSourceConnectionWithSecrets(expectedSourceConnection, connectorSpecification); verify(actorDefinitionVersionHelper).getSourceVersion(standardSourceDefinition, sourceConnection.getWorkspaceId(), sourceConnection.getSourceId()); verify(validator).ensure(sourceDefinitionSpecificationRead.getConnectionSpecification(), newConfiguration); }
[*] target: assertEquals(expectedSourceRead, actualSourceRead)
[-] pred: org. junit. Assert. assertEquals ( expectedSourceRead, actualSourceRead )
************************************
[+] input: expectNodeWithoutOwnerWhenNodeIsAbandonedAtLevel1() { //given Node node = new Node("abc", "123", "Home", 1, 100, new Coordinates(0, 0, 0), 0, 0); Node expected = new Node("abc", null, "Home", 0, 100, new Coordinates(0, 0, 0), Instant.now().getEpochSecond(), 0); //when when(authentication.getName()).thenReturn(playerName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(nodeRepo.findById("abc")).thenReturn(Optional.of(node)); when(nodeRepo.save(expected)).thenReturn(expected); when(playerService.getPlayer(playerName)).thenReturn(playerunknown); Node actual = nodeService.edit("abc", ActionType.ABANDON); //then "<AssertPlaceHolder>"; verify(nodeRepo).findById("abc"); verify(nodeRepo).save(expected); verify(playerService).getPlayer(playerName); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testIdTrackingWithFieldRemoval() { // create initial schema with 2 fields and assign IDs Schema initial = Schema.createRecord( "test1", null, "hudi", false, Arrays.asList( new Schema.Field("field1", Schema.create(Schema.Type.STRING)), new Schema.Field("field2", Schema.create(Schema.Type.STRING)))); Schema initialWithIdTracking = idTracker.addIdTracking(initial, Option.empty(), false); // remove the second field Schema withFieldRemoved = Schema.createRecord( "test2", null, "hudi", false, Collections.singletonList( new Schema.Field("field1", Schema.create(Schema.Type.STRING)))); Schema withFieldRemovedAndIdTracking = idTracker.addIdTracking(withFieldRemoved, Option.of(initialWithIdTracking), false); IdTracking actualWithFieldRemoved = idTracker.getIdTracking(withFieldRemovedAndIdTracking).get(); IdTracking expectedWithFieldRemoved = new IdTracking(Collections.singletonList(new IdMapping("field1", 1)), 2); assertEquals(expectedWithFieldRemoved, actualWithFieldRemoved); // Adding a new field should be tracked with ID 3 Schema withFieldAdded = Schema.createRecord( "test2", null, "hudi", false, Arrays.asList( new Schema.Field("field1", Schema.create(Schema.Type.STRING)), new Schema.Field("field3", Schema.create(Schema.Type.STRING)))); Schema withFieldAddedAndIdTracking = idTracker.addIdTracking(withFieldAdded, Option.of(withFieldRemovedAndIdTracking), false); IdTracking actualWithFieldAdded = idTracker.getIdTracking(withFieldAddedAndIdTracking).get(); IdTracking expectedWithFieldAdded = new IdTracking(Arrays.asList(new IdMapping("field1", 1), new IdMapping("field3", 3)), 3); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedWithFieldAdded, actualWithFieldAdded)
[-] pred: org. junit. Assert. assertEquals ( expectedWithFieldAdded, actualWithFieldAdded )
************************************
[+] input: testStringPringWriterAppendRange() { StringBuilder sb = new StringBuilder(); try (var w = Internal.StringBuilderPrintWriter.of(sb)) { w.append("hello", 0, 4); w.flush(); } String expected = "hell"; String actual = sb.toString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: ConfigNotFoundException { final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final UUID sourceId = UUID.randomUUID(); final Map<String, Object> oauthParameters = generateOAuthParameters(); when(actorDefinitionVersionHelper.getSourceVersion(any(), eq(workspaceId), eq(sourceId))).thenReturn(testSourceVersion.withSpec(null)); setupOAuthParamMocks(oauthParameters); final JsonNode actualConfig = oAuthConfigSupplier.injectSourceOAuthParameters(sourceDefinitionId, sourceId, workspaceId, Jsons.clone(config)); final ObjectNode expectedConfig = ((ObjectNode) Jsons.clone(config)); for (final String key : oauthParameters.keySet()) { expectedConfig.set(key, Jsons.jsonNode(oauthParameters.get(key))); } "<AssertPlaceHolder>"; assertTracking(workspaceId); }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: IOException { // Arrange var bits = "0101"; // 5 var i = BitConverter.bitsToInt(bits);  // Act var bits2 = BitConverter.intToBits(i);   // Assert "<AssertPlaceHolder>";  }
[*] target: assertEquals(bits,bits2)
[-] pred: org. junit. Assert. assertEquals ( bits, bits2 )
************************************
[+] input: testMavenCompilerTargetGetterWhenValueIsNotNull() { var publishProperties = new PublishProperties(); Integer testValue = 8; publishProperties.put("maven.compiler.target", String.valueOf(testValue)); var actualValue = publishProperties.mavenCompilerTarget(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(testValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( testValue, actualValue )
************************************
[+] input: Exception { BankIDRequirements requirements = new BankIDRequirements(); requirements.setCertificatePolicies(Collections.singletonList("1.2.752.78.1.5"));  // Act ObjectMapper mapper = new ObjectMapper(); String json = mapper.writeValueAsString(requirements);  // Verify String expectedJson = "{"certificatePolicies":["1.2.752.78.1.5"]}"; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJson, json)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, json )
************************************
[+] input: Exception { destination.accept(STATE_MESSAGE2); destination.accept(STATE_MESSAGE1); destination.notifyEndOfInput();  assertFalse(destination.isFinished()); assertEquals(STATE_MESSAGE2, destination.attemptRead().get()); assertEquals(STATE_MESSAGE1, destination.attemptRead().get()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(destination.isFinished())
[-] pred: org. junit. Assert. assertTrue ( destination. isFinished() )
************************************
[+] input: Exception { String text = service.getCompletionWithImage( "Describe this image", "A_cheerful_robot.png"); "<AssertPlaceHolder>"; System.out.println(text); }
[*] target: assertNotNull(text)
[-] pred: org. junit. Assert. assertNotNull ( text )
************************************
[+] input: testNewOffsetCommitTombstoneRecord() { CoordinatorRecord expectedRecord = new CoordinatorRecord( new ApiMessageAndVersion( new OffsetCommitKey() .setGroup("group-id") .setTopic("foo") .setPartition(1), (short) 1), null);  CoordinatorRecord record = CoordinatorRecordHelpers.newOffsetCommitTombstoneRecord("group-id", "foo", 1); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRecord, record)
[-] pred: org. junit. Assert. assertEquals ( expectedRecord, record )
************************************
[+] input: equalComparisonTest() { SemVer testSemVer1 = new SemVer(0, 0, 0, "", ""); SemVer testSemVer2 = new SemVer(0, 0, 0, "", ""); int compareResult = testSemVer1.compareTo(testSemVer2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, compareResult)
[-] pred: org. junit. Assert. assertEquals ( 0, compareResult )
************************************
[+] input: buildUndoSQLByUpperCase() { OracleUndoUpdateExecutor executor = upperCaseSQL();  String sql = executor.buildUndoSQL(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sql.contains("UPDATE")); Assertions.assertTrue(sql.contains("ID")); Assertions.assertTrue(sql.contains("AGE")); Assertions.assertTrue(sql.contains("TABLE_NAME")); }
[*] target: assertNotNull(sql)
[-] pred: org. junit. Assert. assertNotNull ( sql )
************************************
[+] input: isTokenValid_shouldReturnFalseIfTokenIsExpired() { // given String token = "expired-token"; Token storedToken = new Token(); storedToken.setExpired(true); when(tokenRepository.findByToken(token)).thenReturn(Optional.of(storedToken));  // when boolean isValid = underTestTokenService.isTokenValid(token);  // then "<AssertPlaceHolder>"; }
[*] target: assertFalse(isValid)
[-] pred: org. junit. Assert. assertFalse ( isValid )
************************************
[+] input: testMonthPartitioning() { List<InternalPartitionField> partitionFieldList = Collections.singletonList( InternalPartitionField.builder() .sourceField( InternalField.builder() .name("timestamp_month") .schema( InternalSchema.builder().dataType(InternalType.TIMESTAMP_NTZ).build()) .build()) .transformType(PartitionTransformType.MONTH) .build()); PartitionSpec actual = IcebergPartitionSpecExtractor.getInstance().toIceberg(partitionFieldList, TEST_SCHEMA); PartitionSpec expected = PartitionSpec.builderFor(TEST_SCHEMA).month("timestamp_month").build(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: countTokens_fullRequest() { var content = new Content( List.of(new TextPart("What is the airspeed velocity of an unladen swallow?")), "user"); var request = new CountTokensRequest( List.of(content), new GenerateContentRequest("models/gemini-1.5-flash-001", List.of(content), List.of(), null, null, null, null, null)); GeminiCountResponse response = service.countTokens(GeminiService.GEMINI_PRO, request); "<AssertPlaceHolder>"; System.out.println(response); assertThat(response.totalTokens()).isEqualTo(13); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: queryRoute() { QueryRouteRequest request = QueryRouteRequest.newBuilder() .setTopic(Resource.newBuilder().setName("topic").build()) .build();  CompletableFuture<QueryRouteResponse> future = routeActivity.queryRoute(ProxyContextExt.create(), request); "<AssertPlaceHolder>"; assertTrue(future.isDone()); assertFalse(future.isCompletedExceptionally());  QueryRouteResponse response = future.join(); assertEquals(Code.OK, response.getStatus().getCode()); assertEquals(1, response.getMessageQueuesList().size());  MessageQueue queue = response.getMessageQueuesList().get(0); assertEquals(2, queue.getId());  Broker broker = queue.getBroker(); assertEquals("1_2", broker.getName()); assertEquals(1, broker.getEndpoints().getAddressesCount());  apache.rocketmq.v2.Address addresses = broker.getEndpoints().getAddresses(0); assertEquals("broker", addresses.getHost()); assertEquals(10911, addresses.getPort()); }
[*] target: assertNotNull(future)
[-] pred: org. junit. Assert. assertNotNull ( future )
************************************
[+] input: IOException { final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final UUID sourceId = UUID.randomUUID(); final Map<String, Object> oauthParameters = generateOAuthParameters(); when(configRepository.getSourceOAuthParameterOptional(any(), any())).thenReturn(Optional.of( new SourceOAuthParameter() .withOauthParameterId(UUID.randomUUID()) .withSourceDefinitionId(sourceDefinitionId) .withWorkspaceId(workspaceId) .withConfiguration(Jsons.jsonNode(oauthParameters)))); final JsonNode actualConfig = oAuthConfigSupplier.injectSourceOAuthParameters(sourceDefinitionId, sourceId, workspaceId, Jsons.clone(config)); final JsonNode expectedConfig = getExpectedNode((String) oauthParameters.get(API_CLIENT)); "<AssertPlaceHolder>"; assertTracking(workspaceId); }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: testJoinPrepareWithDisableAutoCommit() { try (ConsumerCoordinator coordinator = prepareCoordinatorForCloseTest(true, false, Optional.of("group-id"), true)) { coordinator.ensureActiveGroup();  prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.NONE);  int generationId = 42; String memberId = "consumer-42";  boolean res = coordinator.onJoinPrepare(time.timer(0L), generationId, memberId);  "<AssertPlaceHolder>"; assertTrue(client.hasPendingResponses()); assertFalse(client.hasInFlightRequests()); assertFalse(coordinator.coordinatorUnknown()); } }
[*] target: assertTrue(res)
[-] pred: org. junit. Assert. assertTrue ( res )
************************************
[+] input: test() { final DSLContext dslContext = getDslContext(); final boolean tableExists = generationTableExists(dslContext);  assertFalse(tableExists);  V0_55_1_002__AddGenerationTable.createGenerationTable(dslContext);  final boolean tableExistsPostMigration = generationTableExists(dslContext);  "<AssertPlaceHolder>";  final Set<String> index = dslContext.select() .from(table("pg_indexes")) .where(field("tablename").eq(STREAM_GENERATION_TABLE_NAME)) .fetch() .stream() .map(c -> c.getValue("indexdef", String.class)) .collect(Collectors.toSet()); assertEquals(3, index.size()); assertTrue(index.contains("CREATE UNIQUE INDEX stream_generation_pkey ON public.stream_generation USING btree (id)")); assertTrue(index.contains( "CREATE INDEX stream_generation_connection_id_stream_name_generation_id_idx " + "ON public.stream_generation USING btree (connection_id, stream_name, generation_id DESC)")); assertTrue(index.contains( "CREATE INDEX stream_generation_connection_id_stream_name_stream_namespac_idx ON public.stream_generation " + "USING btree (connection_id, stream_name, stream_namespace, generation_id DESC)")); }
[*] target: assertTrue(tableExistsPostMigration)
[-] pred: org. junit. Assert. assertTrue ( tableExistsPostMigration )
************************************
[+] input: testWorkSpaceIDUsage() { AzureCliCredentialsProvider provider = getAzureCliCredentialsProvider(mockTokenSource()); DatabricksConfig config = new DatabricksConfig() .setHost(".azuredatabricks.net") .setCredentialsProvider(provider) .setAzureWorkspaceResourceId(WORKSPACE_RESOURCE_ID); ArgumentCaptor<List<String>> argument = ArgumentCaptor.forClass(List.class);  HeaderFactory header = provider.configure(config);  String token = header.headers().get("Authorization"); assertEquals(token, TOKEN_TYPE + " " + TOKEN); Mockito.verify(provider, times(2)).getToken(any(), argument.capture());  List<String> value = argument.getValue(); value = value.subList(value.size() - 2, value.size()); List<String> expected = Arrays.asList("--subscription", SUBSCRIPTION); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, value)
[-] pred: org. junit. Assert. assertEquals ( expected, value )
************************************
[+] input: update_givenExistingUser_returnUpdatedUser() { UserRequest userRequest = UserRequest.builder() .id(user1.getId()) .username("username_will_not_update") .name("Updated User") .email("updated@test.com") .build(); User updatedUser = new User(); updatedUser.setEmail(userRequest.getEmail()); updatedUser.setName(userRequest.getName()); UserDTO updatedUserDto = new UserDTO(); BeanUtils.copyProperties(updatedUser, updatedUserDto);  when(userRepository.existsById(any())).thenReturn(true); when(userRepository.findById(any())).thenReturn(Optional.of(user1)); when(userRepository.save(any())).thenReturn(updatedUser); when(userConverter.mapToDTO(updatedUser)).thenReturn(updatedUserDto);  UserDTO actual = userService.update(userRequest); "<AssertPlaceHolder>"; }
[*] target: assertEquals(updatedUserDto, actual)
[-] pred: org. junit. Assert. assertEquals ( updatedUserDto, actual )
************************************
[+] input: getInstrumentsOfLibraryId() { var result = subject.getInstrumentsOfLibrary(library1.getId());  "<AssertPlaceHolder>"; }
[*] target: assertEquals(2, result.size())
[-] pred: org. junit. Assert. assertEquals ( 2, result. size() )
************************************
[+] input: testUpdateWithPermission() { userLoginIdentity(false, 1L); //        userLoginIdentity(true, 4L);  ChartUpdateParam chartUpdateParam = new ChartUpdateParam(); Optional.of(chartUpdateParam).ifPresent(param -> { param.setId(1L); param.setName("chat2db"); param.setSchema("test"); param.setDataSourceId(1L); param.setType("DM"); param.setDatabaseName("chat2db"); param.setSchemaName("ali_dbhub"); param.setDdl("test"); });  ActionResult actionResult = chartService.updateWithPermission(chartUpdateParam); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(actionResult)
[-] pred: org. junit. Assert. assertNotNull ( actionResult )
************************************
[+] input: parseS3UrlValFromArgs() { String s3Url = "s3://s3.cn-northwest-1.amazonaws.com.cn?s3-access-key=xxx&s3-secret-key=yyy&s3-region=cn-northwest-1&s3-endpoint-protocol=https&s3-data-bucket=wanshao-test&s3-ops-bucket=automq-ops-bucket&cluster-id=fZGPJht6Rf-o7WgrUakLxQ"; String[] args = Arrays.asList("--s3-url=" + s3Url, "--controller-list="192.168.123.234:9093"").toArray(new String[0]); String s3urlVal = S3Url.parseS3UrlValFromArgs(args); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(s3Url, s3urlVal)
[-] pred: org. junit. Assert. assertEquals ( s3Url, s3urlVal )
************************************
[+] input: testValidateExpirationAllowsZero() { Long expected = 0L; Long actual = ClaimValidationUtils.validateExpiration("exp", expected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldGenerateFullJsonSchemaWhenClassHasSomeFields() { var actualJsonSchema = JsonSchemaUtil.classToJsonSchema(TestClass.class).toString(); var expectedJsonSchema = "{"type":"object","properties":{"first":{"type":"string"}," + ""second":{"type":"integer"}},"required":["first"],"additionalProperties":false}"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonSchema, actualJsonSchema)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonSchema, actualJsonSchema )
************************************
[+] input: testClientInstanceId() { Properties props = new Properties(); props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9999");  ClientTelemetryReporter clientTelemetryReporter = mock(ClientTelemetryReporter.class); clientTelemetryReporter.configure(any());  try (MockedStatic<CommonClientConfigs> mockedCommonClientConfigs = mockStatic(CommonClientConfigs.class, new CallsRealMethods())) { mockedCommonClientConfigs.when(() -> CommonClientConfigs.telemetryReporter(anyString(), any())).thenReturn(Optional.of(clientTelemetryReporter));  ClientTelemetrySender clientTelemetrySender = mock(ClientTelemetrySender.class); Uuid expectedUuid = Uuid.randomUuid(); when(clientTelemetryReporter.telemetrySender()).thenReturn(clientTelemetrySender); when(clientTelemetrySender.clientInstanceId(any())).thenReturn(Optional.of(expectedUuid));  try (KafkaProducer<String, String> producer = new KafkaProducer<>(props, new StringSerializer(), new StringSerializer())) { Uuid uuid = producer.clientInstanceId(Duration.ofMillis(0)); "<AssertPlaceHolder>"; } } }
[*] target: assertEquals(expectedUuid, uuid)
[-] pred: org. junit. Assert. assertEquals ( expectedUuid, uuid )
************************************
[+] input: expectNodeWithOwnerWhenNodeWithoutOwnerIsHacked() { //given Node node = new Node("abc", null, "Home", 0, 100, new Coordinates(0, 0, 0), 0, 0); Node expected = new Node("abc", "123", "Home", 1, 100, new Coordinates(0, 0, 0), Instant.now().getEpochSecond(), 0); //when when(authentication.getName()).thenReturn(playerName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(nodeRepo.findById("abc")).thenReturn(Optional.of(node)); when(nodeRepo.save(expected)).thenReturn(expected); when(playerService.getPlayer(playerName)).thenReturn(playerunknown); Node actual = nodeService.edit("abc", ActionType.HACK); //then "<AssertPlaceHolder>"; verify(nodeRepo).findById("abc"); verify(nodeRepo).save(expected); verify(playerService).getPlayer(playerName); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { final UUID workspaceId = UUID.randomUUID(); final UUID userID = UUID.randomUUID();  // expecting the default user to be excluded from the response final UserPermission defaultUserPermission = new UserPermission() .withUser(new User().withName("default").withUserId(DEFAULT_USER_ID).withEmail("default@airbyte.io")) .withPermission(new Permission().withPermissionId(UUID.randomUUID()).withPermissionType(PermissionType.WORKSPACE_ADMIN));  final UserPermission realUserPermission = new UserPermission() .withUser(new User().withName(USER_NAME).withUserId(userID).withEmail(USER_EMAIL).withDefaultWorkspaceId(workspaceId)) .withPermission(new Permission().withPermissionId(PERMISSION1_ID).withPermissionType(PermissionType.WORKSPACE_ADMIN));  when(permissionPersistence.listUsersInWorkspace(workspaceId)).thenReturn(List.of(defaultUserPermission, realUserPermission));  // no default user present final var expectedListResult = new WorkspaceUserReadList().users(List.of(new WorkspaceUserRead() .userId(userID) .name(USER_NAME) .isDefaultWorkspace(true) .email(USER_EMAIL) .workspaceId(workspaceId) .permissionId(PERMISSION1_ID) .permissionType(io.airbyte.api.model.generated.PermissionType.WORKSPACE_ADMIN)));  final var result = userHandler.listUsersInWorkspace(new WorkspaceIdRequestBody().workspaceId(workspaceId)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedListResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedListResult, result )
************************************
[+] input: testMatchesMethodWithCorrectCredentials() { // given String rawPassword = "TestPassword"; String encodedPassword = sut.encode(rawPassword);  // when boolean result = sut.matches(rawPassword, encodedPassword);  // then "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testBuildFilteredLeaderEpochMap() { TreeMap<Integer, Long> leaderEpochToStartOffset = new TreeMap<>(); leaderEpochToStartOffset.put(0, 0L); leaderEpochToStartOffset.put(1, 0L); leaderEpochToStartOffset.put(2, 0L); leaderEpochToStartOffset.put(3, 30L); leaderEpochToStartOffset.put(4, 40L); leaderEpochToStartOffset.put(5, 60L); leaderEpochToStartOffset.put(6, 60L); leaderEpochToStartOffset.put(7, 70L); leaderEpochToStartOffset.put(8, 70L);  TreeMap<Integer, Long> expectedLeaderEpochs = new TreeMap<>(); expectedLeaderEpochs.put(2, 0L); expectedLeaderEpochs.put(3, 30L); expectedLeaderEpochs.put(4, 40L); expectedLeaderEpochs.put(6, 60L); expectedLeaderEpochs.put(8, 70L);  NavigableMap<Integer, Long> refinedLeaderEpochMap = RemoteLogManager.buildFilteredLeaderEpochMap(leaderEpochToStartOffset); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedLeaderEpochs, refinedLeaderEpochMap)
[-] pred: org. junit. Assert. assertEquals ( expectedLeaderEpochs, refinedLeaderEpochMap )
************************************
[+] input: IOException { ImportObject.MemoryImport expected = new ImportObject.MemoryImport(WasmSectionUtils.ENV_MODULE_NAME, 24, false);  ImportObject.MemoryImport result = WasmSectionUtils.parseMemoryFromBinary( getTestWasmBytes(WASM_FILE_WITH_EXPORT));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: InterruptedException { final HttpResponse mockHttpResponse = mock(HttpResponse.class); when(mockHttpResponse.statusCode()).thenReturn(HttpStatus.OK.getCode()).thenReturn(HttpStatus.OK.getCode()); when(secretsRepositoryReader.hydrateConfigFromDefaultSecretPersistence(any())).thenReturn(Jsons.jsonNode(WORKSPACE_WEBHOOK_CONFIGS)); final OperatorWebhookInput input = new OperatorWebhookInput() .withExecutionBody(WEBHOOK_EXECUTION_BODY) .withExecutionUrl(WEBHOOK_EXECUTION_URL) .withWebhookConfigId(WEBHOOK_ID) .withConnectionContext(new ConnectionContext().withOrganizationId(ORGANIZATION_ID)); // TODO(mfsiega-airbyte): make these matchers more specific. when(httpClient.send(any(), any())).thenReturn(mockHttpResponse); final boolean success = webhookActivity.invokeWebhook(input); "<AssertPlaceHolder>"; }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: Exception { MockTime time = new MockTime(0, 0, 0); Scheduler scheduler = new MockScheduler(time); try (MiniTrogdorCluster cluster = new MiniTrogdorCluster.Builder(). addCoordinator("node01"). addAgent("node02"). scheduler(scheduler). build()) {  NoOpTaskSpec fooSpec = new NoOpTaskSpec(1000, 500); time.sleep(999);  CoordinatorClient coordinatorClient = cluster.coordinatorClient(); coordinatorClient.createTask(new CreateTaskRequest("fooSpec", fooSpec)); TaskState expectedState = new ExpectedTaskBuilder("fooSpec").taskState( new TaskPending(fooSpec) ).build().taskState();  TaskState resp = coordinatorClient.task(new TaskRequest("fooSpec")); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(expectedState, resp)
[-] pred: org. junit. Assert. assertEquals ( expectedState, resp )
************************************
[+] input: testProblematicContext() { when(app.getApplicationContext().getApplicationInfo()) .thenThrow(new SecurityException("cannot do that")); when(app.getApplicationContext().getResources()).thenThrow(new SecurityException("boom"));  Resource expected = Resource.getDefault() .merge( Resource.builder() .put(SERVICE_NAME, "unknown_service:android") .put(RUM_SDK_VERSION, rumSdkVersion) .put(DEVICE_MODEL_NAME, Build.MODEL) .put(DEVICE_MODEL_IDENTIFIER, Build.MODEL) .put(DEVICE_MANUFACTURER, Build.MANUFACTURER) .put(OS_NAME, "Android") .put(OS_TYPE, "linux") .put(OS_VERSION, Build.VERSION.RELEASE) .put(OS_DESCRIPTION, osDescription) .build());  Resource result = AndroidResource.createDefault(app); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testCourseBaseInfoService() { //query condition QueryCourseParamsDto queryCourseParamsDto = new QueryCourseParamsDto(); queryCourseParamsDto.setCourseName("java"); queryCourseParamsDto.setAuditStatus("202004"); queryCourseParamsDto.setPublishStatus("203001");  //Pagination parameters PageParams pageParams = new PageParams(1L, 10L); Long companyId = 12345678L; PageResult<CourseBase> courseBasePageResult = courseBaseInfoService.queryCourseBaseInfoList(pageParams, queryCourseParamsDto,companyId); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(courseBasePageResult)
[-] pred: org. junit. Assert. assertNotNull ( courseBasePageResult )
************************************
[+] input: buildUndoSQL() { String sql = executor.buildUndoSQL().toLowerCase(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sql.contains("delete")); Assertions.assertTrue(sql.contains("id")); }
[*] target: assertNotNull(sql)
[-] pred: org. junit. Assert. assertNotNull ( sql )
************************************
[+] input: IOException { PDDocument document = Mockito.mock(PDDocument.class); Mockito.when(document.getDocumentInformation()).thenReturn(Mockito.mock(org.apache.pdfbox.pdmodel.PDDocumentInformation.class)); PdfMetadata metadata = PdfUtils.extractMetadataFromPdf(document);  "<AssertPlaceHolder>"; }
[*] target: assertNotNull(metadata)
[-] pred: org. junit. Assert. assertNotNull ( metadata )
************************************
[+] input: isTokenValid_shouldReturnFalseIfTokenIsRevoked() { // given String token = "revoked-token"; Token storedToken = new Token(); storedToken.setRevoked(true); when(tokenRepository.findByToken(token)).thenReturn(Optional.of(storedToken));  // when boolean isValid = underTestTokenService.isTokenValid(token);  // then "<AssertPlaceHolder>"; }
[*] target: assertFalse(isValid)
[-] pred: org. junit. Assert. assertFalse ( isValid )
************************************
[+] input: expectNodeWhenNodeDataIsAdded() { //given; NodeData nodeData = new NodeData("Home", new Coordinates(1, 1, 1)); Node expected = new Node("abc", null, "Home", 0, 100, new Coordinates(1, 1, 1), Instant.now().getEpochSecond(), 0); //when when(authentication.getName()).thenReturn(adminName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(idService.generateId()).thenReturn("abc"); when(nodeRepo.insert(expected)).thenReturn(expected); when(mongoUserService.getUserByUsername(adminName)).thenReturn(admin); Node actual = nodeService.add(nodeData); //then "<AssertPlaceHolder>"; verify(idService).generateId(); verify(nodeRepo).insert(expected); verify(mongoUserService).getUserByUsername(adminName); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { // Arrange var bits = "00011111"; // 31 var i = BitConverter.bitsToInt(bits);  // Act var bits2 = BitConverter.intToBits(i);   // Assert "<AssertPlaceHolder>";  }
[*] target: assertEquals(bits,bits2)
[-] pred: org. junit. Assert. assertEquals ( bits, bits2 )
************************************
[+] input: testUpdateSchemaWithNamespacedStreams() { final AirbyteCatalog original = ConnectionHelpers.generateBasicApiCatalog(); final AirbyteStreamAndConfiguration stream1Config = original.getStreams().get(0); final AirbyteStream stream1 = stream1Config.getStream(); final AirbyteStream stream2 = new AirbyteStream() .name(stream1.getName()) .namespace("second_namespace") .jsonSchema(stream1.getJsonSchema()) .defaultCursorField(stream1.getDefaultCursorField()) .supportedSyncModes(stream1.getSupportedSyncModes()) .sourceDefinedCursor(stream1.getSourceDefinedCursor()) .sourceDefinedPrimaryKey(stream1.getSourceDefinedPrimaryKey()); final AirbyteStreamAndConfiguration stream2Config = new AirbyteStreamAndConfiguration() .config(stream1Config.getConfig()) .stream(stream2); original.getStreams().add(stream2Config);  final AirbyteCatalog discovered = ConnectionHelpers.generateBasicApiCatalog(); discovered.getStreams().get(0).getStream() .name(STREAM1) .jsonSchema(CatalogHelpers.fieldsToJsonSchema(Field.of(FIELD1, JsonSchemaType.STRING))) .supportedSyncModes(List.of(SyncMode.FULL_REFRESH)); discovered.getStreams().get(0).getConfig() .syncMode(SyncMode.FULL_REFRESH) .cursorField(Collections.emptyList()) .destinationSyncMode(DestinationSyncMode.OVERWRITE) .primaryKey(Collections.emptyList()) .aliasName(STREAM1);  final AirbyteCatalog expected = ConnectionHelpers.generateBasicApiCatalog(); expected.getStreams().get(0).getStream() .name(STREAM1) .jsonSchema(CatalogHelpers.fieldsToJsonSchema(Field.of(FIELD1, JsonSchemaType.STRING))) .supportedSyncModes(List.of(SyncMode.FULL_REFRESH)); expected.getStreams().get(0).getConfig() .syncMode(SyncMode.FULL_REFRESH) .cursorField(Collections.emptyList()) .destinationSyncMode(DestinationSyncMode.OVERWRITE) .primaryKey(Collections.emptyList()) .aliasName(STREAM1) .selected(false) .suggested(false) .selectedFields(List.of());  final AirbyteCatalog actual = WebBackendConnectionsHandler.updateSchemaWithRefreshedDiscoveredCatalog(original, original, discovered);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetCompileTransitiveDependenciesJettyFullGroupExclusion() { var resolver = new DependencyResolver(VersionResolution.dummy(), ArtifactRetriever.instance(), List.of(MAVEN_CENTRAL, SONATYPE_SNAPSHOTS), new Dependency("org.eclipse.jetty", "jetty-server", new VersionNumber(11, 0, 14)) .exclude("org.eclipse.jetty", "*")); var dependencies = resolver.getAllDependencies(compile); "<AssertPlaceHolder>"; assertEquals(3, dependencies.size()); assertEquals(""" org.eclipse.jetty:jetty-server:11.0.14 org.eclipse.jetty.toolchain:jetty-jakarta-servlet-api:5.0.2 org.slf4j:slf4j-api:2.0.5""", StringUtils.join(dependencies, "\n")); }
[*] target: assertNotNull(dependencies)
[-] pred: org. junit. Assert. assertNotNull ( dependencies )
************************************
[+] input: testDescribeGroupStable() { GroupMetadataManagerTestContext context = new GroupMetadataManagerTestContext.Builder() .build();  GroupMetadataValue.MemberMetadata memberMetadata = new GroupMetadataValue.MemberMetadata() .setMemberId("member-id") .setGroupInstanceId("group-instance-id") .setClientHost("client-host") .setClientId("client-id") .setAssignment(new byte[]{0}) .setSubscription(new byte[]{0, 1, 2}); GroupMetadataValue groupMetadataValue = new GroupMetadataValue() .setMembers(Collections.singletonList(memberMetadata)) .setProtocolType("consumer") .setProtocol("range") .setCurrentStateTimestamp(context.time.milliseconds());  context.replay(GroupMetadataManagerTestContext.newGroupMetadataRecord( "group-id", groupMetadataValue, MetadataVersion.latestTesting() )); context.verifyDescribeGroupsReturnsDeadGroup("group-id"); context.commit();  List<DescribeGroupsResponseData.DescribedGroup> expectedDescribedGroups = Collections.singletonList( new DescribeGroupsResponseData.DescribedGroup() .setGroupId("group-id") .setGroupState(STABLE.toString()) .setProtocolType(groupMetadataValue.protocolType()) .setProtocolData(groupMetadataValue.protocol()) .setMembers(Collections.singletonList( new DescribeGroupsResponseData.DescribedGroupMember() .setMemberId(memberMetadata.memberId()) .setGroupInstanceId(memberMetadata.groupInstanceId()) .setClientId(memberMetadata.clientId()) .setClientHost(memberMetadata.clientHost()) .setMemberMetadata(memberMetadata.subscription()) .setMemberAssignment(memberMetadata.assignment()) )) );  List<DescribeGroupsResponseData.DescribedGroup> describedGroups = context.describeGroups(Collections.singletonList("group-id"));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDescribedGroups, describedGroups)
[-] pred: org. junit. Assert. assertEquals ( expectedDescribedGroups, describedGroups )
************************************
[+] input: testLimit_ApiKeyLimitNotFoundWithNullRole() { Key key = new Key(); key.setKey("key"); key.setProject("project"); ApiKeyData apiKeyData = new ApiKeyData(); apiKeyData.setOriginalKey(key); ProxyContext proxyContext = new ProxyContext(new Config(), request, apiKeyData, null, "trace-id", "span-id"); proxyContext.setDeployment(new Model());  Future<RateLimitResult> result = rateLimiter.limit(proxyContext);  "<AssertPlaceHolder>"; assertNotNull(result.result()); assertEquals(HttpStatus.FORBIDDEN, result.result().status());  }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testFormatTemplateWithInvalidTemplate() { String template = "Hello, {name}! Today is {day}."; Map<String, Object> kwargs = Map.of("name", "John");  String expected = "Hello, John! Today is {day}."; String actual = formatTemplate(template, kwargs);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: updateUserDetailsSuccessScenario() { // given UUID testUuid = UUID.randomUUID(); String testEmail = "testEmail"; String testUsername = "testUsername"; String testPassword = "testPassword"; String testBio = "testBio"; String testImageUrl = "testImageUrl";  User initialUser = new User(testEmail, testUsername, testPassword); initialUser.setBio(testBio); initialUser.setImageUrl(testImageUrl);  when(userRepository.updateUserDetails(any(), any(), any(), any(), any(), any(), any())) .thenReturn(initialUser);  // when User result = sut.updateUserDetails(testUuid, testEmail, testUsername, testPassword, testBio, testImageUrl);  // then "<AssertPlaceHolder>"; }
[*] target: assertEquals(initialUser, result)
[-] pred: org. junit. Assert. assertEquals ( initialUser, result )
************************************
[+] input: isOrderInConsumingReturnsTrue() { Long currentLocalDateTimeMillis = 123456789L; when(order.getBillingStartDateMillis()).thenReturn(10000L); when(order.getBillingEndDateMillis()).thenReturn(223456789L);  Boolean result = orderOtsHelper.isOrderInConsuming(order, currentLocalDateTimeMillis);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: testOneLongWordWithSurroundingWhitespace() { String content = " \t\n\rthisisareallylongword \t\n\r";  expected.add("thisisareallylongword");  List<String> actual = extractor.extract(content); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: shouldOpen() { var batchSize = 33; Loader loader = new TestLoader(600, batchSize, 33); MetaData metaData = loader.open();  int numberItems = metaData.getNumberItems(); int lastBatchSize = numberItems % batchSize; int numberBatches = metaData.getNumberBatches();  for (int i = 0; i < numberBatches; i++) { BatchData batchData = loader.readBatch(); "<AssertPlaceHolder>";  int itemsRead = metaData.getItemsRead();  int inputSize = metaData.getInputSize(); int expectedSize = metaData.getNumberOfClasses();  Matrix input = new Matrix(inputSize, itemsRead, batchData.getInputBatch()); Matrix expected = new Matrix(expectedSize, itemsRead, batchData.getExpectedBatch());  System.out.println(input.sum()); assertTrue(input.sum() != 0.0);  assertTrue(expected.sum() == itemsRead);  if (i == numberBatches - 1) { assertEquals(itemsRead, lastBatchSize); } else { assertEquals(itemsRead, batchSize); } } }
[*] target: assertNotNull(batchData)
[-] pred: org. junit. Assert. assertNotNull ( batchData )
************************************
[+] input: testEncode() { byte[] bytes = "Hello world".getBytes(); String expected = "SGVsbG8gd29ybGQ="; String actual = Base64Utils.encode(bytes); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testAddMatrices() { Matrix a = new Matrix(2, 3, (index) -> index); Matrix b = new Matrix(2, 3, (index) -> index * 2); Matrix expected = a.apply((index, value) -> value + b.getData()[index]);  Matrix result = a.add(b);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: RemoteResourceNotFoundException { Map<RemoteLogSegmentId, RemoteLogSegmentMetadata> segmentIdToMetadataMap = new HashMap<>();  // copy started but never finished so marked as unreferenced RemoteLogSegmentId segmentId1 = new RemoteLogSegmentId(tpId, Uuid.randomUuid()); epochState.handleSegmentWithCopySegmentStartedState(segmentId1); segmentIdToMetadataMap.put(segmentId1, createRemoteLogSegmentMetadata(segmentId1, 0L));  // copy finished successfully RemoteLogSegmentId segmentId2 = new RemoteLogSegmentId(tpId, Uuid.randomUuid()); epochState.handleSegmentWithCopySegmentFinishedState(5L, segmentId2, 10L); segmentIdToMetadataMap.put(segmentId2, createRemoteLogSegmentMetadata(segmentId2, 5L));  // copy finished successfully, but overwritten by the next segment upload so marked as unreferenced. RemoteLogSegmentId segmentId3 = new RemoteLogSegmentId(tpId, Uuid.randomUuid()); epochState.handleSegmentWithCopySegmentFinishedState(11L, segmentId3, 100L); segmentIdToMetadataMap.put(segmentId3, createRemoteLogSegmentMetadata(segmentId3, 11L));  // copy finished successfully RemoteLogSegmentId segmentId4 = new RemoteLogSegmentId(tpId, Uuid.randomUuid()); epochState.handleSegmentWithCopySegmentFinishedState(9L, segmentId4, 150L); segmentIdToMetadataMap.put(segmentId4, createRemoteLogSegmentMetadata(segmentId4, 9L));  // segments should be sorted by start-offset List<RemoteLogSegmentId> expectedList = Arrays.asList(segmentId1, segmentId2, segmentId4, segmentId3); List<RemoteLogSegmentId> actualList = new ArrayList<>(); epochState.listAllRemoteLogSegments(segmentIdToMetadataMap) .forEachRemaining(metadata -> actualList.add(metadata.remoteLogSegmentId())); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedList, actualList)
[-] pred: org. junit. Assert. assertEquals ( expectedList, actualList )
************************************
[+] input: existsByUsernameIgnoreCase_givenNonExistingUsername_returnFalse() { boolean exists = userRepository.existsByUsernameIgnoreCase("non-existing-username"); "<AssertPlaceHolder>"; }
[*] target: assertFalse(exists)
[-] pred: org. junit. Assert. assertFalse ( exists )
************************************
[+] input: testUpdateSchemaWithDiscoveryFromEmpty() { final AirbyteCatalog original = new AirbyteCatalog().streams(List.of()); final AirbyteCatalog discovered = ConnectionHelpers.generateBasicApiCatalog(); discovered.getStreams().get(0).getStream() .name(STREAM1) .jsonSchema(CatalogHelpers.fieldsToJsonSchema(Field.of(FIELD1, JsonSchemaType.STRING))) .supportedSyncModes(List.of(SyncMode.FULL_REFRESH)); discovered.getStreams().get(0).getConfig() .syncMode(SyncMode.FULL_REFRESH) .cursorField(Collections.emptyList()) .destinationSyncMode(DestinationSyncMode.OVERWRITE) .primaryKey(Collections.emptyList()) .aliasName(STREAM1);  final AirbyteCatalog expected = ConnectionHelpers.generateBasicApiCatalog(); expected.getStreams().get(0).getStream() .name(STREAM1) .jsonSchema(CatalogHelpers.fieldsToJsonSchema(Field.of(FIELD1, JsonSchemaType.STRING))) .supportedSyncModes(List.of(SyncMode.FULL_REFRESH)); expected.getStreams().get(0).getConfig() .syncMode(SyncMode.FULL_REFRESH) .cursorField(Collections.emptyList()) .destinationSyncMode(DestinationSyncMode.OVERWRITE) .primaryKey(Collections.emptyList()) .aliasName(STREAM1) .selected(false) .suggested(false) .selectedFields(List.of());  final AirbyteCatalog actual = WebBackendConnectionsHandler.updateSchemaWithRefreshedDiscoveredCatalog(original, original, discovered);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: givenServerHttpRequestAndServerHttpResponseAndWebSocketHandlerAndMapAttributes_whenBeforeHandshake_thenTokenNull() { // Given when(request.getURI()).thenReturn(URI.create("/websocket/"));  // When Map<String, Object> attributes = new HashMap<>(); boolean result = webSocketInterceptor.beforeHandshake(request, response, wsHandler, attributes);  // Then "<AssertPlaceHolder>"; assertTrue(attributes.isEmpty()); verify(jwtTokenProvider, never()).validateToken(anyString()); }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: convertNullTest() { ASTTransformer transformer = new ASTTransformer();  Resource result = transformer.convertResource(null, new ResourceSetImpl());  "<AssertPlaceHolder>"; }
[*] target: assertNull(result)
[-] pred: org. junit. Assert. assertNull ( result )
************************************
[+] input: JsonProcessingException { String expected = "{"endUserIp":"1.2.3.4"," + ""userVisibleData":"dmlzaWJsZQ=="," + ""userVisibleDataFormat":"simpleMarkdownV1"," + ""returnRisk":true}";  StartAuthenticationRequest request = new StartAuthenticationRequest("1.2.3.4"); request.setUserVisibleData(new Base64String(this.visibleData)); request.setUserVisibleDataFormat("simpleMarkdownV1");  ObjectMapper mapper = new ObjectMapper(); String json = mapper.writeValueAsString(request);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, json)
[-] pred: org. junit. Assert. assertEquals ( expected, json )
************************************
[+] input: expectUnchangedNodeWhenPlayerIsTooFarAway() { //given Node node = new Node("abc", "123", "Home", 1, 100, new Coordinates(55, 55, 0), 0, 0); //when when(authentication.getName()).thenReturn(playerName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(nodeRepo.findById("abc")).thenReturn(Optional.of(node)); when(nodeRepo.save(node)).thenReturn(node); when(playerService.getPlayer(playerName)).thenReturn(playerunknown); Node actual = nodeService.edit("abc", ActionType.HACK); //then "<AssertPlaceHolder>"; verify(nodeRepo).findById("abc"); verify(playerService).getPlayer(playerName); }
[*] target: assertEquals(node, actual)
[-] pred: org. junit. Assert. assertEquals ( node, actual )
************************************
[+] input: testListGeographiesOSS() { final WebBackendGeographiesListResult expected = new WebBackendGeographiesListResult().geographies( List.of(Geography.AUTO));  final WebBackendGeographiesListResult actual = webBackendGeographiesHandler.listGeographiesOSS();  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCheckerFilter() { CheckConfiguration checkConfiguration = new CheckConfiguration(); ControllerMethodsCache methodsCache = Mockito.mock(ControllerMethodsCache.class); ParamCheckerFilter checkerFilter = checkConfiguration.checkerFilter(methodsCache); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(checkerFilter)
[-] pred: org. junit. Assert. assertNotNull ( checkerFilter )
************************************
[+] input: testCreateJobsDatabaseAvailabilityCheck() { final var dslContext = mock(DSLContext.class); final var timeoutMs = 500L; final var check = DatabaseCheckFactory.createJobsDatabaseAvailabilityCheck(dslContext, timeoutMs);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(JobsDatabaseAvailabilityCheck.class, check.getClass()); Assertions.assertEquals(timeoutMs, check.getTimeoutMs()); Assertions.assertTrue(check.getDslContext().isPresent()); Assertions.assertEquals(dslContext, check.getDslContext().get()); }
[*] target: assertNotNull(check)
[-] pred: org. junit. Assert. assertNotNull ( check )
************************************
[+] input: testListOpenWorkflowExecutions() { final var request = ListOpenWorkflowExecutionsRequest.newBuilder().build(); final var response = ListOpenWorkflowExecutionsResponse.newBuilder().build(); when(temporalWorkflowServiceBlockingStub.listOpenWorkflowExecutions(request)) .thenThrow(unavailable()) .thenReturn(response);  final var actual = serviceStubsWrapped.blockingStubListOpenWorkflowExecutions(request); "<AssertPlaceHolder>"; }
[*] target: assertEquals(response, actual)
[-] pred: org. junit. Assert. assertEquals ( response, actual )
************************************
[+] input: testFromHttpResponse() { // Arrange HttpResponse<?> response = mock(HttpResponse.class); HttpHeaders headers = mock(HttpHeaders.class); when(response.headers()).thenReturn(headers); when(headers.firstValue("openfga-authorization-model-id")).thenReturn(Optional.of("model-id-value")); when(response.statusCode()).thenReturn(200);  Credentials credentials = mock(Credentials.class); ClientCredentials clientCredentials = mock(ClientCredentials.class); when(credentials.getCredentialsMethod()).thenReturn(CredentialsMethod.CLIENT_CREDENTIALS); when(credentials.getClientCredentials()).thenReturn(clientCredentials); when(clientCredentials.getClientId()).thenReturn("client-id-value");  // Act Map<Attribute, String> result = Attributes.fromHttpResponse(response, credentials);  // Assert Map<Attribute, String> expected = new HashMap<>(); expected.put(Attributes.HTTP_RESPONSE_STATUS_CODE, "200"); expected.put(Attributes.FGA_CLIENT_RESPONSE_MODEL_ID, "model-id-value"); expected.put(Attributes.FGA_CLIENT_REQUEST_CLIENT_ID, "client-id-value");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: Exception { final UUID organizationId = UUID.randomUUID(); final UUID userID = UUID.randomUUID();  // expecting the default user to be excluded from the response final UserPermission defaultUserPermission = new UserPermission() .withUser(new User().withName("default").withUserId(DEFAULT_USER_ID).withEmail("default@airbyte.io")) .withPermission(new Permission().withPermissionId(UUID.randomUUID()).withPermissionType(PermissionType.ORGANIZATION_ADMIN));  final UserPermission realUserPermission = new UserPermission() .withUser(new User().withName(USER_NAME).withUserId(userID).withEmail(USER_EMAIL)) .withPermission(new Permission().withPermissionId(PERMISSION1_ID).withPermissionType(PermissionType.ORGANIZATION_ADMIN));  when(permissionPersistence.listUsersInOrganization(organizationId)).thenReturn(List.of(defaultUserPermission, realUserPermission));  // no default user present final var expectedListResult = new OrganizationUserReadList().users(List.of(new OrganizationUserRead() .name(USER_NAME) .userId(userID) .email(USER_EMAIL) .organizationId(organizationId) .permissionId(PERMISSION1_ID) .permissionType(io.airbyte.api.model.generated.PermissionType.ORGANIZATION_ADMIN)));  final var result = userHandler.listUsersInOrganization(new OrganizationIdRequestBody().organizationId(organizationId)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedListResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedListResult, result )
************************************
[+] input: IpRangeFormatException { String inputRange = "192.168.0.1-192.168.0.10"; NormalizeRangeHost normalizeRangeHost = new NormalizeRangeHost(inputRange);  String expectedNormalizedRange = "[192.168.0.1 TO 192.168.0.10]"; String actualNormalizedRange = normalizeRangeHost.normalize();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedNormalizedRange, actualNormalizedRange)
[-] pred: org. junit. Assert. assertEquals ( expectedNormalizedRange, actualNormalizedRange )
************************************
[+] input: serializeFieldNullToNull() { converter.configure(Collections.singletonMap(JsonConverterConfig.REPLACE_NULL_WITH_DEFAULT_CONFIG, false), false); Schema schema = SchemaBuilder.string().optional().defaultValue("default").build(); Schema structSchema = SchemaBuilder.struct().field("field1", schema).build(); JsonNode converted = parse(converter.fromConnectData(TOPIC, structSchema, new Struct(structSchema))); JsonNode expected = parse("{"schema":{"type":"struct","fields":[{"field":"field1","type":"string","optional":true,"default":"default"}],"optional":false},"payload":{"field1":null}}"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, converted)
[-] pred: org. junit. Assert. assertEquals ( expected, converted )
************************************
[+] input: Exception { String serverMessage = "n,,\u0001auth=Bearer 123.345.567\u0001nineteen=42\u0001\u0001"; OAuthBearerClientInitialResponse response = new OAuthBearerClientInitialResponse(serverMessage.getBytes(StandardCharsets.UTF_8));  String message = new String(response.toBytes(), StandardCharsets.UTF_8);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(serverMessage, message)
[-] pred: org. junit. Assert. assertEquals ( serverMessage, message )
************************************
[+] input: Exception { final UUID userId = UUID.randomUUID(); final Map<String, String> properties = Map.of(CREATOR_USER_ID_HEADER, userId.toString()); final Set<String> expectedAuthUserIds = Set.of(AUTH_USER_ID, "some-other-id"); when(userPersistence.listAuthUserIdsForUser(userId)).thenReturn(expectedAuthUserIds.stream().toList());  final Set<String> resolvedAuthUserIds = resolver.resolveAuthUserIds(properties);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAuthUserIds, resolvedAuthUserIds)
[-] pred: org. junit. Assert. assertEquals ( expectedAuthUserIds, resolvedAuthUserIds )
************************************
[+] input: buildLivingEntityType() { EntityType<LivingEntity> type = FabricEntityType.Builder.createLiving((t, w) -> null, MobCategory.MISC, living -> living .defaultAttributes(FabricEntityTypeTest::createAttributes) ).build();  "<AssertPlaceHolder>"; assertNotNull(DefaultAttributes.getSupplier(type)); }
[*] target: assertNotNull(type)
[-] pred: org. junit. Assert. assertNotNull ( type )
************************************
[+] input: givenValidCreateCustomerRequest_whenSuccess_thenReturnUserDto() {  // Given CustomerCreateRequest mockRequest = CustomerCreateRequest.builder() .email(RandomUtil.generateRandomString().concat("@bookdelivery.com")) .password(RandomUtil.generateRandomString()) .fullName(RandomUtil.generateRandomString()) .username(RandomUtil.generateRandomString()) .build();  User user = User.builder() .id(1L) .email(mockRequest.getEmail()) .fullName(mockRequest.getFullName()) .username(mockRequest.getUsername()) .role(Role.ROLE_CUSTOMER) .password(mockRequest.getPassword()) .build();  UserDTO userDTO = UserMapper.toDTO(user);  // When Mockito.when(userRepository.existsByEmail(mockRequest.getEmail())).thenReturn(false); Mockito.when(userRepository.save(Mockito.any(User.class))).thenReturn(user);  // Then UserDTO response = customerService.createCustomer(mockRequest);  Assertions."<AssertPlaceHolder>"; Mockito.verify(userRepository, Mockito.times(1)).existsByEmail(Mockito.anyString()); Mockito.verify(userRepository, Mockito.times(1)).save(Mockito.any(User.class)); Mockito.verify(passwordEncoder, Mockito.times(1)).encode(Mockito.anyString()); }
[*] target: assertEquals(userDTO, response)
[-] pred: org. junit. Assert. assertEquals ( userDTO, response )
************************************
[+] input: likedTest() { SaveAndLikeModel model = new SaveAndLikeModel(); model.setLiked(true); "<AssertPlaceHolder>"; }
[*] target: assertTrue(model.isLiked())
[-] pred: org. junit. Assert. assertTrue ( model. isLiked() )
************************************
[+] input: complete() { Message message = new Message(Role.USER, "Who is the most renowed French football player?"); String model = MistralService.MISTRAL_SMALL_LATEST; ChatResponse response = service.complete(model, List.of(message)); "<AssertPlaceHolder>"; System.out.println(response); assertEquals("mistral-small-latest", response.model()); System.out.println(response.choices().getFirst().message().content()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testClear() { Deck deck = new Deck(); deck.clear(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, deck.getSize())
[-] pred: org. junit. Assert. assertEquals ( 0, deck. getSize() )
************************************
[+] input: testErrorCountsNoTopLevelError() { for (short version : LEADER_AND_ISR.allVersions()) { LeaderAndIsrResponse response; if (version < 5) { List<LeaderAndIsrPartitionError> partitions = createPartitions("foo", asList(Errors.NONE, Errors.CLUSTER_AUTHORIZATION_FAILED)); response = new LeaderAndIsrResponse(new LeaderAndIsrResponseData() .setErrorCode(Errors.NONE.code()) .setPartitionErrors(partitions), version); } else { Uuid id = Uuid.randomUuid(); LeaderAndIsrTopicErrorCollection topics = createTopic(id, asList(Errors.NONE, Errors.CLUSTER_AUTHORIZATION_FAILED)); response = new LeaderAndIsrResponse(new LeaderAndIsrResponseData() .setErrorCode(Errors.NONE.code()) .setTopics(topics), version); } Map<Errors, Integer> errorCounts = response.errorCounts(); "<AssertPlaceHolder>"; assertEquals(2, errorCounts.get(Errors.NONE).intValue()); assertEquals(1, errorCounts.get(Errors.CLUSTER_AUTHORIZATION_FAILED).intValue()); } }
[*] target: assertEquals(2, errorCounts.size())
[-] pred: org. junit. Assert. assertEquals ( 2, errorCounts. size ( ) )
************************************
[+] input: IOException { AppStoreServerAPIClient client = getClientWithBody("models/getNotificationHistoryResponse.json", request -> { Assertions.assertEquals("POST", request.method()); Assertions.assertEquals("/inApps/v1/notifications/history", request.url().encodedPath()); Assertions.assertEquals("a036bc0e-52b8-4bee-82fc-8c24cb6715d6", request.url().queryParameter("paginationToken")); RequestBody body = request.body(); Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(expectedMediaType, body.contentType()); Buffer buffer = new Buffer(); try { body.writeTo(buffer); } catch (IOException e) { throw new RuntimeException(e); } Map<String, Object> root; try { root = new ObjectMapper().readValue(buffer.readUtf8(), Map.class); } catch (JsonProcessingException e) { throw new RuntimeException(e); } Assertions.assertEquals(1698148900000L, ((Number) root.get("startDate")).longValue()); Assertions.assertEquals(1698148950000L, ((Number) root.get("endDate")).longValue()); Assertions.assertEquals("SUBSCRIBED", root.get("notificationType")); Assertions.assertEquals("INITIAL_BUY", root.get("notificationSubtype")); Assertions.assertEquals("999733843", root.get("transactionId")); Assertions.assertTrue((Boolean) root.get("onlyFailures")); });  NotificationHistoryRequest notificationHistoryRequest = new NotificationHistoryRequest() .startDate(1698148900000L) .endDate(1698148950000L) .notificationType(NotificationTypeV2.SUBSCRIBED) .notificationSubtype(Subtype.INITIAL_BUY) .transactionId("999733843") .onlyFailures(true);  NotificationHistoryResponse notificationHistoryResponse = client.getNotificationHistory("a036bc0e-52b8-4bee-82fc-8c24cb6715d6", notificationHistoryRequest);  Assertions.assertNotNull(notificationHistoryResponse); Assertions.assertEquals("57715481-805a-4283-8499-1c19b5d6b20a", notificationHistoryResponse.getPaginationToken()); Assertions.assertTrue(notificationHistoryResponse.getHasMore()); List<NotificationHistoryResponseItem> expectedNotificationHistory = List.of( new NotificationHistoryResponseItem() .sendAttempts(List.of( new SendAttemptItem() .attemptDate(1698148900000L) .sendAttemptResult(SendAttemptResult.NO_RESPONSE), new SendAttemptItem() .attemptDate(1698148950000L) .sendAttemptResult(SendAttemptResult.SUCCESS) )) .signedPayload("signed_payload_one"), new NotificationHistoryResponseItem() .sendAttempts(List.of( new SendAttemptItem() .attemptDate(1698148800000L) .sendAttemptResult(SendAttemptResult.CIRCULAR_REDIRECT) )) .signedPayload("signed_payload_two") ); Assertions.assertEquals(expectedNotificationHistory, notificationHistoryResponse.getNotificationHistory()); }
[*] target: assertNotNull(body)
[-] pred: org. junit. Assert. assertNotNull ( body )
************************************
[+] input: testSingleColumnValueWithSlashes() { InternalPartitionField column = InternalPartitionField.builder() .sourceField( InternalField.builder() .name("column1") .schema( InternalSchema.builder() .name("string") .dataType(InternalType.STRING) .build()) .build()) .transformType(PartitionTransformType.VALUE) .build();  List<PartitionValue> expected = Collections.singletonList( PartitionValue.builder().partitionField(column).range(Range.scalar("foo/bar")).build());  List<PartitionValue> actual = new HudiPartitionValuesExtractor(Collections.emptyMap()) .extractPartitionValues(Collections.singletonList(column), "foo/bar"); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testExceptionToModelView() { // Create a mock Model Model model = new org.springframework.ui.ExtendedModelMap();  // Create a test exception Exception ex = new Exception("Test Exception");  // Call the method under test ModelAndView modelAndView = ErrorUtils.exceptionToModelView(model, ex);  // Verify the result "<AssertPlaceHolder>"; assertEquals("Test Exception", modelAndView.getModel().get("errorMessage")); assertNotNull(modelAndView.getModel().get("stackTrace")); }
[*] target: assertNotNull(modelAndView)
[-] pred: org. junit. Assert. assertNotNull ( modelAndView )
************************************
[+] input: isTokenValid_ShouldReturnFalseForInvalidUsername() { // Given String token = generateToken("testuser", 3600000L); when(userDetails.getUsername()).thenReturn("anotheruser");  // When boolean isValid = jwtService.isTokenValid(token, userDetails);  // Then "<AssertPlaceHolder>"; }
[*] target: assertFalse(isValid)
[-] pred: org. junit. Assert. assertFalse ( isValid )
************************************
[+] input: Exception { UpdateParameterResponse expectedResponse = new UpdateParameterResponse(); new Expectations() {{ mockedClient.updateParameter((UpdateParameterRequest) any); result = expectedResponse; }};  // Call the method under test and verify the result UpdateParameterResponse actualResponse = oosClient.updateParameter("testName", "testValue"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: testGetTableDdl() { var actual = database.getTableDdl("students"); var expected = """  CREATE TABLE students ( id INTEGER(32), name CHARACTER VARYING(64), score INTEGER(32) COMMENT 'math score', teacher_note CHARACTER VARYING(256) ) COMMENT 'student score table'  """; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: existsByUsernameIgnoreCase_givenExistingUsername_returnTrue() { boolean exists = userRepository.existsByUsernameIgnoreCase(user1.getUsername()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
[+] input: testCommitOffsetMetadataSync() { subscriptions.assignFromUser(singleton(t1p));  client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE)); coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));  prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.NONE);  OffsetAndMetadata offsetAndMetadata = new OffsetAndMetadata(100L, "hello"); Map<TopicPartition, OffsetAndMetadata> offsets = singletonMap(t1p, offsetAndMetadata); boolean success = coordinator.commitOffsetsSync(offsets, time.timer(Long.MAX_VALUE)); "<AssertPlaceHolder>"; }
[*] target: assertTrue(success)
[-] pred: org. junit. Assert. assertTrue ( success )
************************************
[+] input: testCandidateLogSegmentsSkipsActiveSegment() { UnifiedLog log = mock(UnifiedLog.class); LogSegment segment1 = mock(LogSegment.class); LogSegment segment2 = mock(LogSegment.class); LogSegment activeSegment = mock(LogSegment.class);  when(segment1.baseOffset()).thenReturn(5L); when(segment2.baseOffset()).thenReturn(10L); when(activeSegment.baseOffset()).thenReturn(15L);  when(log.logSegments(5L, Long.MAX_VALUE)) .thenReturn(JavaConverters.collectionAsScalaIterable(Arrays.asList(segment1, segment2, activeSegment)));  RemoteLogManager.RLMTask task = remoteLogManager.new RLMTask(leaderTopicIdPartition, 128); List<RemoteLogManager.EnrichedLogSegment> expected = Arrays.asList( new RemoteLogManager.EnrichedLogSegment(segment1, 10L), new RemoteLogManager.EnrichedLogSegment(segment2, 15L) ); List<RemoteLogManager.EnrichedLogSegment> actual = task.candidateLogSegments(log, 5L, 20L); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { when(permissionPersistence.listInstanceAdminUsers()).thenReturn(List.of(new UserPermission().withUser( new User().withName(USER_NAME).withUserId(USER_ID).withEmail(USER_EMAIL)) .withPermission(new Permission().withPermissionId(PERMISSION1_ID).withPermissionType(PermissionType.INSTANCE_ADMIN))));  final var result = userHandler.listInstanceAdminUsers();  final var expectedResult = new UserWithPermissionInfoReadList().users(List.of( new io.airbyte.api.model.generated.UserWithPermissionInfoRead().name(USER_NAME).userId(USER_ID).email(USER_EMAIL) .permissionId(PERMISSION1_ID))); "<AssertPlaceHolder>";  }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: expectNodeWithDecreasedLevelWhenNodeIsAbandoned() { //given Node node = new Node("abc", "123", "Home", 2, 100, new Coordinates(0, 0, 0), 0, 0); Node expected = new Node("abc", "123", "Home", 1, 100, new Coordinates(0, 0, 0), Instant.now().getEpochSecond(), 0); //when when(authentication.getName()).thenReturn(playerName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(nodeRepo.findById("abc")).thenReturn(Optional.of(node)); when(nodeRepo.save(any())).thenReturn(expected); when(playerService.getPlayer(playerName)).thenReturn(playerunknown); Node actual = nodeService.edit("abc", ActionType.ABANDON); //then "<AssertPlaceHolder>"; verify(nodeRepo).findById("abc"); verify(nodeRepo).save(expected); verify(playerService).getPlayer(playerName); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetSourceUrl() { final WebUrlHelper webUrlHelper = new WebUrlHelper(LOCALHOST_8000); final String sourceUrl = webUrlHelper.getSourceUrl(WORKSPACE_ID, SOURCE_ID); final String expectedUrl = String.format("%s/workspaces/%s/source/%s", LOCALHOST_8000, WORKSPACE_ID, SOURCE_ID); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedUrl, sourceUrl)
[-] pred: org. junit. Assert. assertEquals ( expectedUrl, sourceUrl )
************************************
[+] input: testPromptWithNoInputVariables() { PromptTemplate noInputPrompt = new PromptTemplate(List.of(), "Tell me a joke.");  String actual = noInputPrompt.format(Map.of()); String expected = "Tell me a joke."; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getModels() { ModelList models = service.getModels(); "<AssertPlaceHolder>"; models.models().stream() .map(Model::name) .sorted() .forEach(System.out::println); }
[*] target: assertNotNull(models)
[-] pred: org. junit. Assert. assertNotNull ( models )
************************************
[+] input: isTokenValid_shouldReturnFalseIfTokenNotFound() { // given String token = "non-existent-token"; when(tokenRepository.findByToken(token)).thenReturn(Optional.empty());  // when boolean isValid = underTestTokenService.isTokenValid(token);  // then "<AssertPlaceHolder>"; }
[*] target: assertFalse(isValid)
[-] pred: org. junit. Assert. assertFalse ( isValid )
************************************
[+] input: testNestedPartitionField() { List<InternalPartitionField> partitionFieldList = Collections.singletonList( InternalPartitionField.builder() .sourceField( InternalField.builder() .name("nested") .parentPath("data") .schema(InternalSchema.builder().dataType(InternalType.STRING).build()) .build()) .transformType(PartitionTransformType.VALUE) .build()); Schema icebergSchema = new Schema( Types.NestedField.required( 0, "data", Types.StructType.of( Types.NestedField.required(1, "nested", Types.StringType.get())))); PartitionSpec actual = IcebergPartitionSpecExtractor.getInstance().toIceberg(partitionFieldList, icebergSchema); PartitionSpec expected = PartitionSpec.builderFor(icebergSchema).identity("data.nested").build(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { ChatCompletionRequest request = ChatCompletionRequest.of("What's Java Language?"); request.setFunctionCall("hello_java"); String expected = """ { "messages" : [ { "role" : "user", "content" : "What's Java Language?" } ], "function_call" : { "name" : "hello_java" } }"""; String actual = GPTFunctionUtils.objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(request);  System.out.println(expected); System.out.println(actual); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testDeleteSchema() { for (DialectProperties dialectProperties : dialectPropertiesList) { Long dataSourceId = TestUtils.nextLong(); Long consoleId = TestUtils.nextLong(); TestUtils.buildContext(dialectProperties, dataSourceId, consoleId);  SchemaOperationParam operationParam = new SchemaOperationParam(); operationParam.setDatabaseName(dialectProperties.getDatabaseName()); operationParam.setSchemaName("test" + TestUtils.nextLong());  ActionResult actionResult = databaseService.deleteSchema(operationParam); "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(actionResult)
[-] pred: org. junit. Assert. assertNotNull ( actionResult )
************************************
[+] input: IOException { URL url = new URL(URL_BASE + "one.txt");  SortedMap<String, Integer> expected = new TreeMap<>(); expected.put("forrrrr", 2); expected.put("scorrrrre", 2); expected.put("annnnnd", 1); expected.put("sevvvvin", 3);  SortedMap<String, Integer> actual = checker.check(url); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: queryAssignment() { QueryAssignmentRequest request = QueryAssignmentRequest.newBuilder() .setTopic(Resource.newBuilder().setName("topic").build()) .setGroup(Resource.newBuilder().setName("group").build()) .build();  CompletableFuture<QueryAssignmentResponse> future = routeActivity.queryAssignment(ProxyContextExt.create(), request); "<AssertPlaceHolder>"; assertTrue(future.isDone()); assertFalse(future.isCompletedExceptionally());  QueryAssignmentResponse response = future.join(); assertEquals(Code.OK, response.getStatus().getCode()); assertEquals(1, response.getAssignmentsList().size());  MessageQueue queue = response.getAssignmentsList().get(0).getMessageQueue(); assertEquals(2, queue.getId());  Broker broker = queue.getBroker(); assertEquals("1_2", broker.getName()); assertEquals(1, broker.getEndpoints().getAddressesCount());  apache.rocketmq.v2.Address addresses = broker.getEndpoints().getAddresses(0); assertEquals("broker", addresses.getHost()); assertEquals(10911, addresses.getPort());  }
[*] target: assertNotNull(future)
[-] pred: org. junit. Assert. assertNotNull ( future )
************************************
[+] input: Exception { final String expected = "louis XVI"; when(worker.run(anyString(), any())).thenReturn(expected);  final String actual = attemptExecution.get();  "<AssertPlaceHolder>";  verify(worker).run(anyString(), any()); verify(mdcSetter, atLeast(1)).accept(jobRoot); verify(attemptApi, times(1)).setWorkflowInAttempt( argThat(request -> request.getAttemptNumber() == ATTEMPT_NUMBER && request.getJobId() == Long.parseLong(JOB_ID))); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: yearAndSimpleCombinedPartitionedGeneratedColumnsTable() { StructType tableSchema = getSchemaWithFields(Arrays.asList("id", "firstName", "gender", "birthDate", "yearOfBirth")); StructType partitionSchema = getSchemaWithFields(Arrays.asList("yearOfBirth", "id")); InternalSchema internalSchema = deltaSchemaExtractor.toInternalSchema(tableSchema); List<InternalPartitionField> expectedInternalPartitionFields = Arrays.asList( InternalPartitionField.builder() .sourceField( InternalField.builder().name("birthDate").schema(TIMESTAMP_SCHEMA).build()) .transformType(PartitionTransformType.YEAR) .partitionFieldNames(Collections.singletonList("yearOfBirth")) .build(), InternalPartitionField.builder() .sourceField( InternalField.builder() .name("id") .schema( InternalSchema.builder() .name("integer") .dataType(InternalType.INT) .build()) .build()) .transformType(PartitionTransformType.VALUE) .build()); List<InternalPartitionField> internalPartitionFields = deltaPartitionExtractor.convertFromDeltaPartitionFormat(internalSchema, partitionSchema); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedInternalPartitionFields, internalPartitionFields)
[-] pred: org. junit. Assert. assertEquals ( expectedInternalPartitionFields, internalPartitionFields )
************************************
[+] input: testPrepare() { // Arrange Map<Attribute, String> attributes = new HashMap<>(); attributes.put(Attributes.FGA_CLIENT_REQUEST_CLIENT_ID, "client-id-value"); Metric metric = mock(Metric.class);  TelemetryConfiguration telemetryConfiguration = mock(TelemetryConfiguration.class); Map<Metric, Map<Attribute, Optional<Object>>> metricsMap = new HashMap<>(); Map<Attribute, Optional<Object>> attributeMap = new HashMap<>(); attributeMap.put(Attributes.FGA_CLIENT_REQUEST_CLIENT_ID, Optional.of("config-value")); metricsMap.put(metric, attributeMap); when(telemetryConfiguration.metrics()).thenReturn(metricsMap);  Configuration configuration = mock(Configuration.class); when(configuration.getTelemetryConfiguration()).thenReturn(telemetryConfiguration);  // Act io.opentelemetry.api.common.Attributes result = Attributes.prepare(attributes, metric, configuration);  // Assert AttributesBuilder builder = io.opentelemetry.api.common.Attributes.builder(); builder.put(AttributeKey.stringKey(Attributes.FGA_CLIENT_REQUEST_CLIENT_ID.getName()), "client-id-value"); io.opentelemetry.api.common.Attributes expected = builder.build();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: searchFromEs() { PostQueryRequest postQueryRequest = new PostQueryRequest(); postQueryRequest.setUserId(1L); Page<Post> postPage = postService.searchFromEs(postQueryRequest); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(postPage)
[-] pred: org. junit. Assert. assertNotNull ( postPage )
************************************
[+] input: checkIfRoleNameNotExistsTest() { //        given BindingResult br = mock(BindingResult.class);  //        when Mockito.when(globalRoleRepository.findByName(anyString())) .thenReturn(null); Mockito.when(organizationRoleRepository.findByName(anyString())) .thenReturn(null);  boolean result = roleService.checkIfRoleNameAlreadyExists(ROLE_NAME, RoleService.ROLE_TYPE_GLOBAL, br);  //        then "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: Exception { Map<String, Object> model = createTestMap();  // Create an input stream for the resource InputStream inputStream = new ByteArrayInputStream("it costs 100".getBytes(Charset.defaultCharset())); Resource resource = new InputStreamResource(inputStream);  model.put("key3", resource);  // Create a simple template with placeholders for keys in the generative String template = "{key1}, {key2}, {key3}"; PromptTemplate promptTemplate = new PromptTemplate(template, model);  // The expected result after rendering the template with the generative String expected = "value1, true, it costs 100"; String result = promptTemplate.render();  // Check that the rendered string matches the expected result "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: shouldGenerateOrderedJsonSchemaWhenClassHasJsonPropertyOrderAnnotation() { var actualJsonSchema = JsonSchemaUtil.classToJsonSchema(OrderedTestClass.class).toString(); var expectedJsonSchema = "{"type":"object","properties":{"first":{"type":"string"}," + ""second":{"type":"integer"}," + ""third":{"type":"string"}}," + ""required":["first"],"additionalProperties":false}"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonSchema, actualJsonSchema)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonSchema, actualJsonSchema )
************************************
[+] input: IOException { // Arrange var compare = "HE"; var bits = BitConverter.alphaNumericStringToBits(compare);  // Act var str = BitConverter.bitsToAlphaNumericString(bits);  // Assert "<AssertPlaceHolder>";  }
[*] target: assertEquals(compare, str)
[-] pred: org. junit. Assert. assertEquals ( compare, str )
************************************
[+] input: Exception { String expectedMessage = "n,,\u0001auth=Bearer 123.345.567\u0001nineteen=42\u0001\u0001";  Map<String, String> extensions = new HashMap<>(); extensions.put("nineteen", "42"); OAuthBearerClientInitialResponse response = new OAuthBearerClientInitialResponse("123.345.567", new SaslExtensions(extensions));  String message = new String(response.toBytes(), StandardCharsets.UTF_8);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMessage, message)
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, message )
************************************
[+] input: testUpstreamRefresh() { Config config = new Config(); Map<String, Model> models = new HashMap<>(); config.setModels(models);  Model model = new Model(); model.setName("model1"); model.setUpstreams(List.of( new Upstream("endpoint1", null, 1, 1), new Upstream("endpoint2", null, 1, 1) ));  models.put("model1", model); UpstreamRouteProvider upstreamRouteProvider = new UpstreamRouteProvider(); upstreamRouteProvider.onUpdate(config);  UpstreamRoute route = upstreamRouteProvider.get(new DeploymentUpstreamProvider(model)); Upstream upstream;  // fail 2 upstreams for (int i = 0; i < 2; i++) { upstream = route.get(); assertNotNull(upstream); route.fail(HttpStatus.TOO_MANY_REQUESTS, 100); route.next(); }  upstream = route.get(); "<AssertPlaceHolder>";  Model model1 = new Model(); model1.setName("model1"); model1.setUpstreams(List.of( new Upstream("endpoint2", null, 1, 1), new Upstream("endpoint1", null, 1, 1) ));  models.put("model1", model1); upstreamRouteProvider.onUpdate(config);  // upstreams remains the same, state must not be invalidated route = upstreamRouteProvider.get(new DeploymentUpstreamProvider(model1));  upstream = route.get(); assertNull(upstream);  Model model2 = new Model(); model2.setName("model1"); model2.setUpstreams(List.of( new Upstream("endpoint2", null, 5, 1), new Upstream("endpoint1", null, 1, 1) ));  models.put("model1", model2); upstreamRouteProvider.onUpdate(config);  // upstreams updated, current state must be evicted route = upstreamRouteProvider.get(new DeploymentUpstreamProvider(model2));  upstream = route.get(); assertNotNull(upstream); assertEquals("endpoint2", upstream.getEndpoint()); }
[*] target: assertNull(upstream)
[-] pred: org. junit. Assert. assertNull ( upstream )
************************************
[+] input: getMailAndUsernames_givenNoCondition_returnMailAndUsernames() { List<MailUserNameProjection> expectedList = Arrays.asList( getMailUsernameProjection(user1.getEmail(), user1.getUsername()), getMailUsernameProjection(user2.getEmail(), user2.getUsername())); when(userRepository.findAllMailAndUserName()).thenReturn(expectedList);  List<MailUserNameProjection> result = userService.getMailAndUsernames();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedList, result)
[-] pred: org. junit. Assert. assertEquals ( expectedList, result )
************************************
[+] input: listCachedContents() { CachedContentResponse cachedContentResponse = geminiInterface.listCachedContents(); "<AssertPlaceHolder>"; cachedContentResponse.cachedContents() .forEach(cachedContent -> System.out.println(cachedContent.name())); }
[*] target: assertNotNull(cachedContentResponse)
[-] pred: org. junit. Assert. assertNotNull ( cachedContentResponse )
************************************
[+] input: testDeleteDatabase() { for (DialectProperties dialectProperties : dialectPropertiesList) { Long dataSourceId = TestUtils.nextLong(); Long consoleId = TestUtils.nextLong(); TestUtils.buildContext(dialectProperties, dataSourceId, consoleId);  DatabaseCreateParam param = new DatabaseCreateParam(); param.setName("test");  ActionResult actionResult = databaseService.deleteDatabase(param); "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(actionResult)
[-] pred: org. junit. Assert. assertNotNull ( actionResult )
************************************
[+] input: shouldGetByKey() { when(interactiveQueriesService.getByKey("store", "key")) .thenReturn(new StateStoreRecord("key1", "value1", 1L));  StateStoreRecord response = interactiveQueriesController .getByKey("store", "key").getBody();  "<AssertPlaceHolder>"; assertEquals("key1", response.getKey()); assertEquals("value1", response.getValue()); assertEquals(1L, response.getTimestamp()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testCombinationOfPlainAndGeneratedColumns() { StructType tableSchema = getSchemaWithFields(Arrays.asList("id", "firstName", "gender", "birthDate", "dateFmt")); StructType partitionSchema = getSchemaWithFields(Arrays.asList("id", "dateFmt", "gender", "dateOfBirth")); InternalSchema internalSchema = deltaSchemaExtractor.toInternalSchema(tableSchema); List<InternalPartitionField> expectedInternalPartitionFields = Arrays.asList( InternalPartitionField.builder() .sourceField( InternalField.builder() .name("id") .schema( InternalSchema.builder() .name("integer") .dataType(InternalType.INT) .build()) .build()) .transformType(PartitionTransformType.VALUE) .build(), InternalPartitionField.builder() .sourceField( InternalField.builder().name("birthDate").schema(TIMESTAMP_SCHEMA).build()) .transformType(PartitionTransformType.HOUR) .partitionFieldNames(Collections.singletonList("dateFmt")) .build(), InternalPartitionField.builder() .sourceField( InternalField.builder() .name("gender") .schema( InternalSchema.builder() .name("string") .dataType(InternalType.STRING) .build()) .build()) .transformType(PartitionTransformType.VALUE) .build(), InternalPartitionField.builder() .sourceField( InternalField.builder().name("birthDate").schema(TIMESTAMP_SCHEMA).build()) .transformType(PartitionTransformType.DAY) .partitionFieldNames(Collections.singletonList("dateOfBirth")) .build()); List<InternalPartitionField> internalPartitionFields = deltaPartitionExtractor.convertFromDeltaPartitionFormat(internalSchema, partitionSchema); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedInternalPartitionFields, internalPartitionFields)
[-] pred: org. junit. Assert. assertEquals ( expectedInternalPartitionFields, internalPartitionFields )
************************************
[+] input: shouldfindUrlByOriginalUrl() { //given String originalUrl = "https://github.com/cami-la"; //when Optional<Url> optionalActual = this.urlRepository.findByOriginalUrl(originalUrl); String actual = optionalActual.get().getShortUrl(); //then String expected = "xyz123"; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testUpdateDirectories() { PartitionRegistration registration = new PartitionRegistration.Builder(). setReplicas(new int[]{2, 1, 3}). setDirectories(new Uuid[]{ Uuid.fromString("S1zMYZczRjWmucidLqGA5g"), Uuid.fromString("9eRNXTvFTsWUJObvW51V5A"), Uuid.fromString("UpePYVBgRAi3c4ujQrf3Kg") }). setIsr(new int[]{2, 1, 3}). setLeader(2). setLeaderRecoveryState(LeaderRecoveryState.RECOVERED). setLeaderEpoch(100). setPartitionEpoch(200). build(); Optional<ApiMessageAndVersion> built = new PartitionChangeBuilder(registration, FOO_ID, 0, r -> true, MetadataVersion.latestTesting(), 2). setDirectory(3, Uuid.fromString("pN1VKs9zRzK4APflpegAVg")). setDirectory(1, DirectoryId.LOST). setDefaultDirProvider(DEFAULT_DIR_PROVIDER). build(); Optional<ApiMessageAndVersion> expected = Optional.of(new ApiMessageAndVersion( new PartitionChangeRecord(). setTopicId(FOO_ID). setPartitionId(0). setDirectories(Arrays.asList( Uuid.fromString("S1zMYZczRjWmucidLqGA5g"), DirectoryId.LOST, Uuid.fromString("pN1VKs9zRzK4APflpegAVg") )), (short) 2 )); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, built)
[-] pred: org. junit. Assert. assertEquals ( expected, built )
************************************
[+] input: ConfigNotFoundException { setupStandardDefinitionMock(createAdvancedAuth() .withPredicateKey(List.of(CREDENTIALS, AUTH_TYPE)) .withPredicateValue("")); final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final UUID sourceId = UUID.randomUUID(); final Map<String, Object> oauthParameters = generateOAuthParameters(); setupOAuthParamMocks(oauthParameters); final JsonNode actualConfig = oAuthConfigSupplier.injectSourceOAuthParameters(sourceDefinitionId, sourceId, workspaceId, Jsons.clone(config)); final JsonNode expectedConfig = getExpectedNode((String) oauthParameters.get(API_CLIENT)); "<AssertPlaceHolder>"; assertTracking(workspaceId); }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: testUpdate() { AbstractKusciaServingManager servingManager = new AbstractKusciaServingManager() { @Override public Serving.CreateServingResponse create(Serving.CreateServingRequest request) { return super.create(request); } }; servingManager.setKusciaGrpcClientAdapter(kusciaGrpcClientAdapter); servingManager.setApplicationEventPublisher(applicationEventPublisher); Serving.UpdateServingRequest request = Serving.UpdateServingRequest.newBuilder().build(); Serving.UpdateServingResponse expectedResponse = Serving.UpdateServingResponse.newBuilder().build(); when(kusciaGrpcClientAdapter.updateServing(request)).thenReturn(expectedResponse); Serving.UpdateServingResponse actualResponse = servingManager.update(request); "<AssertPlaceHolder>"; verify(applicationEventPublisher, times(1)).publishEvent(any(AbstractKusciaServingManager.KusciaServingEvent.class)); }
[*] target: assertEquals(expectedResponse, actualResponse)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, actualResponse )
************************************
[+] input: testDeletion() { boolean deleted = this.kdTree.delete("2"); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(deleted)
[-] pred: org. junit. Assert. assertTrue ( deleted )
************************************
[+] input: testLoadStuffChain() { var chain = SummarizeUtils.loadStuffChain(llm); var actual = chain.run(docs);  var expected = "The article discusses the concept of building autonomous agents powered by large language models " + "(LLMs). It explores the components of such agents, including planning, memory, and tool " + "use. The article provides case studies and proof-of-concept examples of LLM-powered agents, " + "as well as challenges and limitations associated with their development."; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { final UUID sourceDefinitionId = UUID.randomUUID(); final UUID workspaceId = UUID.randomUUID(); when(configRepository.getStandardSourceDefinition(sourceDefinitionId)).thenReturn(SOURCE_DEFINITION); when(actorDefinitionVersionHelper.getSourceVersion(SOURCE_DEFINITION, workspaceId, null)).thenReturn(SOURCE_DEFINITION_VERSION_LATEST);  when(remoteDefinitionsProvider.getConnectorDocumentation(SOURCE_DOCKER_REPO, SOURCE_VERSION_LATEST)) .thenReturn(Optional.of(DOC_CONTENTS_LATEST));  final ConnectorDocumentationRequestBody request = new ConnectorDocumentationRequestBody().actorType(ActorType.SOURCE).actorDefinitionId(sourceDefinitionId).workspaceId(workspaceId);  final ConnectorDocumentationRead expectedResult = new ConnectorDocumentationRead().doc(DOC_CONTENTS_LATEST); final ConnectorDocumentationRead actualResult = connectorDocumentationHandler.getConnectorDocumentation(request);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualResult )
************************************
[+] input: testGetLoadPathsExc() { boolean exceptionThrown = false; try { persistency.getLoadPaths(FileType.SETTINGS_MAIN_TEXT); } catch (IllegalArgumentException e) { exceptionThrown = true; } "<AssertPlaceHolder>"; }
[*] target: assertTrue(exceptionThrown)
[-] pred: org. junit. Assert. assertTrue ( exceptionThrown )
************************************
[+] input: testValidateIssuedAtAllowsNull() { Long expected = null; Long actual = ClaimValidationUtils.validateIssuedAt("iat", expected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testConsumerGroupDescribeBeforeAndAfterCommittingOffset() { String consumerGroupId = "consumerGroupId"; int epoch = 10; String memberId1 = "memberId1"; String memberId2 = "memberId2"; String topicName = "topicName"; Uuid topicId = Uuid.randomUuid(); MetadataImage metadataImage = new MetadataImageBuilder() .addTopic(topicId, topicName, 3) .build();  MockPartitionAssignor assignor = new MockPartitionAssignor("range"); GroupMetadataManagerTestContext context = new GroupMetadataManagerTestContext.Builder() .withConsumerGroupAssignors(Collections.singletonList(assignor)) .withMetadataImage(metadataImage) .build();  ConsumerGroupMember.Builder memberBuilder1 = new ConsumerGroupMember.Builder(memberId1) .setSubscribedTopicNames(Collections.singletonList(topicName)); context.replay(CoordinatorRecordHelpers.newMemberSubscriptionRecord(consumerGroupId, memberBuilder1.build())); context.replay(CoordinatorRecordHelpers.newGroupEpochRecord(consumerGroupId, epoch + 1));  Map<Uuid, Set<Integer>> assignmentMap = new HashMap<>(); assignmentMap.put(topicId, Collections.emptySet());  ConsumerGroupMember.Builder memberBuilder2 = new ConsumerGroupMember.Builder(memberId2); context.replay(CoordinatorRecordHelpers.newMemberSubscriptionRecord(consumerGroupId, memberBuilder2.build())); context.replay(CoordinatorRecordHelpers.newTargetAssignmentRecord(consumerGroupId, memberId2, assignmentMap)); context.replay(CoordinatorRecordHelpers.newCurrentAssignmentRecord(consumerGroupId, memberBuilder2.build())); context.replay(CoordinatorRecordHelpers.newGroupEpochRecord(consumerGroupId, epoch + 2));  List<ConsumerGroupDescribeResponseData.DescribedGroup> actual = context.groupMetadataManager.consumerGroupDescribe(Collections.singletonList(consumerGroupId), context.lastCommittedOffset); ConsumerGroupDescribeResponseData.DescribedGroup describedGroup = new ConsumerGroupDescribeResponseData.DescribedGroup() .setGroupId(consumerGroupId) .setErrorCode(Errors.GROUP_ID_NOT_FOUND.code()); List<ConsumerGroupDescribeResponseData.DescribedGroup> expected = Collections.singletonList( describedGroup ); assertEquals(expected, actual);  // Commit the offset and test again context.commit();  actual = context.groupMetadataManager.consumerGroupDescribe(Collections.singletonList(consumerGroupId), context.lastCommittedOffset); describedGroup = new ConsumerGroupDescribeResponseData.DescribedGroup() .setGroupId(consumerGroupId) .setMembers(Arrays.asList( memberBuilder1.build().asConsumerGroupDescribeMember(new Assignment(Collections.emptyMap()), metadataImage.topics()), memberBuilder2.build().asConsumerGroupDescribeMember(new Assignment(assignmentMap), metadataImage.topics()) )) .setGroupState(ConsumerGroup.ConsumerGroupState.ASSIGNING.toString()) .setAssignorName("range") .setGroupEpoch(epoch + 2); expected = Collections.singletonList( describedGroup ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: getValue() { counter.click(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, counter.getValue())
[-] pred: org. junit. Assert. assertEquals ( 1, counter. getValue() )
************************************
[+] input: IOException { var result = subject.load(audio, pathToAudioFile);  // Assert successful loading "<AssertPlaceHolder>"; assertEquals(audio.getId(), result.getId()); assertEquals(audio.getWaveformKey(), result.getWaveformKey()); assertEquals(pathToAudioFile, result.pathToAudioFile()); assertEquals(2, result.format().getChannels()); assertEquals(48000, result.format().getSampleRate()); assertEquals(32, result.format().getSampleSizeInBits()); assertEquals(8, result.format().getFrameSize()); assertEquals(48000, result.format().getFrameRate()); assertFalse(result.format().isBigEndian()); assertEquals(17364, result.data().length); assertEquals(2, result.data()[0].length); assertFalse(result.isDifferent(audio));  // Assert isDifferent() method when id and waveform key are changed var audio_differentIdAndWaveformKey = new InstrumentAudio(); audio_differentIdAndWaveformKey.setId(UUID.randomUUID()); audio_differentIdAndWaveformKey.setWaveformKey("test-audio2.wav"); assertTrue(result.isDifferent(audio_differentIdAndWaveformKey));  // Assert isDifferent() method when only waveform key is changed var audio_differentWaveformKey = new InstrumentAudio(); audio_differentWaveformKey.setId(audio.getId()); audio_differentWaveformKey.setWaveformKey("test-audio2.wav"); assertTrue(result.isDifferent(audio_differentWaveformKey)); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testCreateProduct() { when(brandRepository.findById(any())).thenReturn(Optional.of(brand1)); when(productRepository.save(any(Product.class))).thenReturn(product1);    // mock the repository call to return the product we have created  ProductRequest productRequest = new ProductRequest(product1.getName(), "Description", "Image", product1.getPrice(), "Category", brand1.getName(), "", 10); ResponseEntity<ProductResponse> response = productService.createProduct(productRequest, 1L);  "<AssertPlaceHolder>"; assertEquals(product1.getName(), response.getBody().name()); assertEquals(product1.getPrice(), response.getBody().price()); assertEquals(product1.getStock(), response.getBody().stock()); assertEquals(product1.getBrand().getName(), response.getBody().brandName()); }
[*] target: assertEquals(HttpStatus.CREATED, response.getStatusCode())
[-] pred: org. junit. Assert. assertEquals ( HttpStatus.CREATED, response. getStatusCode ( ) )
************************************
[+] input: testGetNestServiceByIdExistingServiceId() { SpecificationConfig.ServiceConfig result = specificationConfig.getNestServiceById("1"); "<AssertPlaceHolder>"; assertEquals("1", result.getId()); assertEquals("Service 1", result.getName()); }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: serializeFieldNullToDefault() { converter.configure(Collections.singletonMap(JsonConverterConfig.REPLACE_NULL_WITH_DEFAULT_CONFIG, true), false); Schema schema = SchemaBuilder.string().optional().defaultValue("default").build(); Schema structSchema = SchemaBuilder.struct().field("field1", schema).build(); JsonNode converted = parse(converter.fromConnectData(TOPIC, structSchema, new Struct(structSchema))); JsonNode expected = parse("{"schema":{"type":"struct","fields":[{"field":"field1","type":"string","optional":true,"default":"default"}],"optional":false},"payload":{"field1":"default"}}"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, converted)
[-] pred: org. junit. Assert. assertEquals ( expected, converted )
************************************
[+] input: testReplaceAtStringEmptyReturnNoOp() { assertOriginalObjectNotModified(JSON_NODE, () -> { final JsonNode expected = Jsons.clone(JSON_NODE);  final JsonNode actual = JsonPaths.replaceAtString(JSON_NODE, EMPTY_RETURN_QUERY, REPLACEMENT_STRING); "<AssertPlaceHolder>"; }); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: isPasswordAndPasswordConfirmMatches_ShouldReturnTrue_WhenPasswordsMatch() { // when boolean result = underTestAuthenticationService.isPasswordAndPasswordConfirmMatches(USER_REGISTER_REQUEST);  // then "<AssertPlaceHolder>"; }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: createCompletion() { CreateCompletionRequest request = new CreateCompletionRequest(); request.setModel("text-davinci-003"); request.setPrompt("我的提问"); CreateCompletionResponse response = openAiApi.createCompletion(request, OPENAI_API_KEY); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testGetCommodityPrice() { GetCommodityPriceParam getCommodityPriceParam = new GetCommodityPriceParam(); CommodityPriceModel expectedCommodityPriceModel = new CommodityPriceModel();  when(commodityService.getCommodityPrice(any(GetCommodityPriceParam.class))) .thenReturn(expectedCommodityPriceModel);  CommodityPriceModel result = commodityController.getCommodityPrice(getCommodityPriceParam);  Assertions."<AssertPlaceHolder>";  }
[*] target: assertEquals(expectedCommodityPriceModel, result)
[-] pred: org. junit. Assert. assertEquals ( expectedCommodityPriceModel, result )
************************************
[+] input: test2() { UsuarioDto esperado = new UsuarioDto(3L, "Martin"); UsuarioDto resultado = usuarioServicio.crearUsuario(3L, "Martin");  Assertions."<AssertPlaceHolder>"; // Esto usara el metodo equals }
[*] target: assertEquals(esperado, resultado)
[-] pred: org. junit. Assert. assertEquals ( esperado, resultado )
************************************
[+] input: testMapToObjectNull() { Map<String, String> map = null; BranchDO branchDO = (BranchDO) BeanUtils.mapToObject(map, BranchDO.class); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(branchDO)
[-] pred: org. junit. Assert. assertNull ( branchDO )
************************************
[+] input: testBasicUpgrade() { // This isn't actually a valid stream schema (since it's not an object) // but this test case is mostly about preserving the message structure, so it's not super relevant final io.airbyte.protocol.models.v0.ConfiguredAirbyteCatalog downgradedCatalog = new io.airbyte.protocol.models.v0.ConfiguredAirbyteCatalog() .withStreams(List.of( new io.airbyte.protocol.models.v0.ConfiguredAirbyteStream().withStream(new io.airbyte.protocol.models.v0.AirbyteStream().withJsonSchema( Jsons.deserialize( """ { "type": "string" } """)))));  final ConfiguredAirbyteCatalog upgradedMessage = migration.upgrade(downgradedCatalog);  final ConfiguredAirbyteCatalog expectedMessage = Jsons.deserialize( """ { "streams": [ { "stream": { "json_schema": { "$ref": "WellKnownTypes.json#/definitions/String" } } } ] } """, ConfiguredAirbyteCatalog.class); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedMessage, upgradedMessage)
[-] pred: org. junit. Assert. assertEquals ( expectedMessage, upgradedMessage )
************************************
[+] input: niceJson() {  String niceJson = "[{ 'name': 'John Doe', 'age': 98 }, { 'name': 'Jane `nDoe', 'age': 89 }]"; String expectedJson = niceJson.replace('`', '\').replace(''', '"'); String validJson = Json.niceJson(niceJson); "<AssertPlaceHolder>";  }
[*] target: assertEquals(expectedJson, validJson)
[-] pred: org. junit. Assert. assertEquals ( expectedJson, validJson )
************************************
[+] input: show_실패_존재하지_않는_id_입력() { // 1. 예상 데이터 Long id = -1L; Article expected = null; // 2. 실제 데이터 Article article = articleService.show(id); // 3. 비교 및 검증 "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, article)
[-] pred: org. junit. Assert. assertEquals ( expected, article )
************************************
[+] input: givenValidId_whenActiveInstitutionExist_thenReturnTrue() { // Given String mockId = AysRandomUtil.generateUUID();  // When InstitutionStatus mockStatus = InstitutionStatus.ACTIVE; Mockito.when(institutionRepository.existsByIdAndStatus(mockId, mockStatus)) .thenReturn(true);  // Then boolean isInstitutionExist = institutionAdapter.existsByIdAndIsStatusActive(mockId);  Assertions."<AssertPlaceHolder>";  Mockito.verify(institutionRepository, Mockito.times(1)) .existsByIdAndStatus(mockId, mockStatus); }
[*] target: assertTrue(isInstitutionExist)
[-] pred: org. junit. Assert. assertTrue ( isInstitutionExist )
************************************
[+] input: testSend() {  //        // params //        final SendRequest sendRequest = new SendRequest("send", 1L, //                new MessageParam("13711111111", new HashMap<>(), new HashMap<>())); // //        // predict result //        final ProcessContext<SendTaskModel> processContext = new ProcessContext<>(sendRequest.getCode(), new SendTaskModel(), false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")); //        final SendResponse expectedResult = new SendResponse(processContext.getResponse().getStatus(), processContext.getResponse().getMsg()); // // //        // stub //        Map<String, ProcessTemplate> templateConfig = new HashMap<>(4); //        processTemplate.setProcessList(Arrays.asList(businessProcess)); //        templateConfig.put(BusinessCode.COMMON_SEND.getCode(), processTemplate); // //        processController.setTemplateConfig(templateConfig); // // //        // Run the test //        final SendResponse result = sendServiceImplUnderTest.send(sendRequest); // //        // Verify the results //        "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: idleBeat() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.idleBeat(new IdleBeatParam(jobId));  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(500, retval.getCode()); Assertions.assertEquals("job thread is running or has trigger queue.", retval.getMsg()); }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: testYearPartitioning() { List<InternalPartitionField> partitionFieldList = Collections.singletonList( InternalPartitionField.builder() .sourceField( InternalField.builder() .name("timestamp_year") .schema( InternalSchema.builder().dataType(InternalType.TIMESTAMP_NTZ).build()) .build()) .transformType(PartitionTransformType.YEAR) .build()); PartitionSpec actual = IcebergPartitionSpecExtractor.getInstance().toIceberg(partitionFieldList, TEST_SCHEMA); PartitionSpec expected = PartitionSpec.builderFor(TEST_SCHEMA).year("timestamp_year").build(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testLock() { String keyName = "distributedLockKey1"; DistributedLock lock = lockFactory.newLock(keyName, LockType.MySQLReentrantLock); // 加锁 Boolean isLocked = lock.tryLock(); if (isLocked) { LOG.infov("acquire lock success, keyName:{0}", keyName); try { // 这里写需要处理业务的业务代码 LOG.info("do something."); } finally { // 释放锁 lock.unlock(); LOG.infov("release lock success, keyName:{0}", keyName); } } else { LOG.infov("acquire lock fail, keyName:{0}", keyName); } Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(isLocked)
[-] pred: org. junit. Assert. assertTrue ( isLocked )
************************************
[+] input: testGenerateTokenPair() { // Given String userId = "sampleUserId";  // When TokenPair tokenPair = jwtTokenGenerator.generateTokenPair(userId);  // Then "<AssertPlaceHolder>"; assertNotNull(tokenPair.accessToken()); assertNotNull(tokenPair.refreshToken()); }
[*] target: assertNotNull(tokenPair)
[-] pred: org. junit. Assert. assertNotNull ( tokenPair )
************************************
[+] input: testReplaceAtJsonNodeLoudMultipleReplace() { assertOriginalObjectNotModified(JSON_NODE, () -> { final JsonNode expected = Jsons.clone(JSON_NODE); ((ArrayNode) expected.get(ONE)).set(0, REPLACEMENT_JSON); ((ArrayNode) expected.get(ONE)).set(1, REPLACEMENT_JSON); ((ArrayNode) expected.get(ONE)).set(2, REPLACEMENT_JSON);  final JsonNode actual = JsonPaths.replaceAtJsonNodeLoud(JSON_NODE, LIST_ALL_QUERY, REPLACEMENT_JSON); "<AssertPlaceHolder>"; }); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testExecute() { final Supplier<String> supplier = mock(Supplier.class); when(supplier.get()).thenReturn("hello");  final TemporalResponse<String> response = temporalClient.execute(JOB_RUN_CONFIG, supplier);  "<AssertPlaceHolder>"; assertTrue(response.getOutput().isPresent()); assertEquals("hello", response.getOutput().get()); assertTrue(response.getMetadata().isSucceeded()); assertEquals(logPath, response.getMetadata().getLogPath()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testStaticMemberRoundRobinAssignmentPersistent() { // Have 3 static members instance1, instance2, instance3 to be persistent // across generations. Their assignment shall be the same. String consumer1 = "consumer1"; String instance1 = "instance1"; String consumer2 = "consumer2"; String instance2 = "instance2"; String consumer3 = "consumer3"; String instance3 = "instance3";  List<MemberInfo> staticMemberInfos = new ArrayList<>(); staticMemberInfos.add(new MemberInfo(consumer1, Optional.of(instance1))); staticMemberInfos.add(new MemberInfo(consumer2, Optional.of(instance2))); staticMemberInfos.add(new MemberInfo(consumer3, Optional.of(instance3)));  // Consumer 4 is a dynamic member. String consumer4 = "consumer4";  Map<String, Integer> partitionsPerTopic = setupPartitionsPerTopicWithTwoTopics(3, 3);  Map<String, Subscription> consumers = new HashMap<>(); for (MemberInfo m : staticMemberInfos) { Subscription subscription = new Subscription(topics(topic1, topic2), null); subscription.setGroupInstanceId(m.groupInstanceId); consumers.put(m.memberId, subscription); } consumers.put(consumer4, new Subscription(topics(topic1, topic2)));  Map<String, List<TopicPartition>> expectedAssignment = new HashMap<>(); expectedAssignment.put(consumer1, partitions(tp(topic1, 0), tp(topic2, 1))); expectedAssignment.put(consumer2, partitions(tp(topic1, 1), tp(topic2, 2))); expectedAssignment.put(consumer3, partitions(tp(topic1, 2))); expectedAssignment.put(consumer4, partitions(tp(topic2, 0)));  Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, consumers); assertEquals(expectedAssignment, assignment);  // Replace dynamic member 4 with a new dynamic member 5. consumers.remove(consumer4); String consumer5 = "consumer5"; consumers.put(consumer5, new Subscription(topics(topic1, topic2)));  expectedAssignment.remove(consumer4); expectedAssignment.put(consumer5, partitions(tp(topic2, 0))); assignment = assignor.assign(partitionsPerTopic, consumers); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAssignment, assignment)
[-] pred: org. junit. Assert. assertEquals ( expectedAssignment, assignment )
************************************
[+] input: bytesToConnect() { ByteBuffer reference = ByteBuffer.wrap(Utils.utf8("test-string")); String msg = "{ "schema": { "type": "bytes" }, "payload": "dGVzdC1zdHJpbmc=" }"; SchemaAndValue schemaAndValue = converter.toConnectData(TOPIC, msg.getBytes()); ByteBuffer converted = ByteBuffer.wrap((byte[]) schemaAndValue.value()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(reference, converted)
[-] pred: org. junit. Assert. assertEquals ( reference, converted )
************************************
[+] input: IOException { final JSerialCommPort port = new JSerialCommPort("", 9600, 8, 1, SerialPort.NO_PARITY, new byte[] { (byte) 0xA5 }, FrameDefinition.create("SACLOODVV")); port.serialEvent(new SerialPortEvent(getPort(), SerialPort.LISTENING_EVENT_DATA_RECEIVED, new byte[] { Integer.valueOf(0xA5).byteValue(), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x01, 0x02, 0x03, Integer.valueOf(0xA5).byteValue(), 0x0C, 0x0D, 0x02, 0x00, 0x00, (byte) 0xAA, (byte) 0xFF, 0x00, 0x00 }));  ByteBuffer frame = port.getNextFrame(); "<AssertPlaceHolder>"; assertArrayEquals(new byte[] { Integer.valueOf(0xA5).byteValue(), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A }, frame.array()); frame = port.getNextFrame(); assertNotNull(frame); assertArrayEquals(new byte[] { Integer.valueOf(0xA5).byteValue(), 0x0C, 0x0D, 0x02, 0x00, 0x00, (byte) 0xAA, (byte) 0xFF, 0x00, 0x00 }, frame.array()); }
[*] target: assertNotNull(frame)
[-] pred: org. junit. Assert. assertNotNull ( frame )
************************************
[+] input: generateSignVerify() { Ed25519PrivateKey privKey = Ed25519Utils.generateKeyPair();  byte[] signed = Ed25519Utils.signMessage(privKey.raw(), hashedMessage);  VerifySignature signature = new VerifySignature(signed, hashedMessage, privKey.publicKey().raw(), Key.ED25519); boolean verified = Ed25519Utils.verifySignature(signature);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
[+] input: testExtractClaims_02() { AccessTokenValidator validator = new AccessTokenValidator(idpConfig, vertx, client); Future<ExtractedClaims> future = validator.extractClaims("bad-auth-header"); "<AssertPlaceHolder>"; future.onComplete(res -> { assertTrue(res.failed()); assertNotNull(res.cause()); }); }
[*] target: assertNotNull(future)
[-] pred: org. junit. Assert. assertNotNull ( future )
************************************
[+] input: givenServerHttpRequestAndServerHttpResponseAndWebSocketHandlerAndMapAttributes_whenBeforeHandshake_thenInValidToken() { // Given when(request.getURI()).thenReturn(URI.create("/websocket/invalidToken")); when(jwtTokenProvider.validateToken("invalidToken", false)).thenReturn(false);  // When Map<String, Object> attributes = new HashMap<>(); boolean result = webSocketInterceptor.beforeHandshake(request, response, wsHandler, attributes);  // Then "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: IOException { final JSerialCommPort port = new JSerialCommPort("", 9600, 8, 1, SerialPort.NO_PARITY, new byte[] { (byte) 0xA5 }, FrameDefinition.create("SACLOODVV")); port.serialEvent(new SerialPortEvent(getPort(), SerialPort.LISTENING_EVENT_DATA_RECEIVED, new byte[] { Integer.valueOf(0xA5).byteValue(), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, Integer.valueOf(0xA5).byteValue(), 0x0C, 0x0D, 0x02, 0x00, 0x00, (byte) 0xAA, (byte) 0xFF, 0x00, 0x00 }));  ByteBuffer frame = port.getNextFrame(); "<AssertPlaceHolder>"; assertArrayEquals(new byte[] { Integer.valueOf(0xA5).byteValue(), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A }, frame.array()); frame = port.getNextFrame(); assertNotNull(frame); assertArrayEquals(new byte[] { Integer.valueOf(0xA5).byteValue(), 0x0C, 0x0D, 0x02, 0x00, 0x00, (byte) 0xAA, (byte) 0xFF, 0x00, 0x00 }, frame.array()); }
[*] target: assertNotNull(frame)
[-] pred: org. junit. Assert. assertNotNull ( frame )
************************************
[+] input: testDescribeNoMetadata() { ClassicGroupMember member = new ClassicGroupMember( "member", Optional.of("group-instance-id"), "client-id", "client-host", 10, 4500, "generic", new JoinGroupRequestProtocolCollection(), new byte[0] );  DescribeGroupsResponseData.DescribedGroupMember expectedDescribedGroupMember = new DescribeGroupsResponseData.DescribedGroupMember() .setMemberId("member") .setGroupInstanceId("group-instance-id") .setClientId("client-id") .setClientHost("client-host") .setMemberAssignment(new byte[0]);  DescribeGroupsResponseData.DescribedGroupMember describedGroupMember = member.describeNoMetadata();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDescribedGroupMember, describedGroupMember)
[-] pred: org. junit. Assert. assertEquals ( expectedDescribedGroupMember, describedGroupMember )
************************************
[+] input: expectUnchangedNodeWhenAbandoningOtherPlayerNode() { //given Node node = new Node("abc", "456", "Home", 1, 100, new Coordinates(0, 0, 0), 0, 0); //when when(authentication.getName()).thenReturn(playerName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(nodeRepo.findById("abc")).thenReturn(Optional.of(node)); when(nodeRepo.save(node)).thenReturn(node); when(playerService.getPlayer(playerName)).thenReturn(playerunknown); Node actual = nodeService.edit("abc", ActionType.ABANDON); //then "<AssertPlaceHolder>"; verify(nodeRepo).findById("abc"); verify(playerService).getPlayer(playerName); }
[*] target: assertEquals(node, actual)
[-] pred: org. junit. Assert. assertEquals ( node, actual )
************************************
[+] input: testRequestHeaderV1() { short apiVersion = 1; RequestHeader header = new RequestHeader(ApiKeys.FIND_COORDINATOR, apiVersion, "", 10); assertEquals(1, header.headerVersion());  ByteBuffer buffer = RequestTestUtils.serializeRequestHeader(header); assertEquals(10, buffer.remaining()); RequestHeader deserialized = RequestHeader.parse(buffer); "<AssertPlaceHolder>"; }
[*] target: assertEquals(header, deserialized)
[-] pred: org. junit. Assert. assertEquals ( header, deserialized )
************************************
[+] input: Exception { String responseJson = getAmsterdamWeatherJson(); WeatherResponse response = objectMapper.readValue(responseJson, WeatherResponse.class); WeatherEntity savedEntity = getSavedWeatherEntity(response.location().localtime());  WeatherDto expected = new WeatherDto(savedEntity.getCityName(), savedEntity.getCountry(), savedEntity.getTemperature(), savedEntity.getUpdatedTime());  when(weatherRepository.findFirstByRequestedCityNameOrderByUpdatedTimeDesc(requestedCity)).thenReturn(Optional.of(savedEntity));  WeatherDto result = weatherService.getWeather(requestedCity);  "<AssertPlaceHolder>";  verifyNoInteractions(restTemplate); verify(weatherRepository).findFirstByRequestedCityNameOrderByUpdatedTimeDesc(requestedCity); verifyNoMoreInteractions(weatherRepository); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testMatchesMethodWithIncorrectCredentials() { // given String rawPassword = "TestPassword"; String wrongRawPassword = "WrongPassword"; String encodedPassword = sut.encode(rawPassword);  // when boolean result = sut.matches(wrongRawPassword, encodedPassword);  // then "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: IOException { ImportObject.MemoryImport expected = new ImportObject.MemoryImport(WasmSectionUtils.ENV_MODULE_NAME, 83, false);  ImportObject.MemoryImport result = WasmSectionUtils.parseMemoryFromBinary( getTestWasmBytes(WASM_FILE_WITH_IMPORT));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testDayPartitioning() { List<InternalPartitionField> partitionFieldList = Collections.singletonList( InternalPartitionField.builder() .sourceField( InternalField.builder() .name("timestamp_day") .schema( InternalSchema.builder().dataType(InternalType.TIMESTAMP_NTZ).build()) .build()) .transformType(PartitionTransformType.DAY) .build()); PartitionSpec actual = IcebergPartitionSpecExtractor.getInstance().toIceberg(partitionFieldList, TEST_SCHEMA); PartitionSpec expected = PartitionSpec.builderFor(TEST_SCHEMA).day("timestamp_day").build(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testTieredLoadBalancer() { List<Upstream> upstreams = List.of( new Upstream("endpoint1", null, 1, 0), new Upstream("endpoint2", null, 9, 1) ); TieredBalancer balancer = new TieredBalancer("model1", upstreams);  // verify all requests go to the highest tier for (int j = 0; j < 50; j++) { UpstreamState upstream = balancer.next(); "<AssertPlaceHolder>"; assertEquals("endpoint1", upstream.getUpstream().getEndpoint()); } }
[*] target: assertNotNull(upstream)
[-] pred: org. junit. Assert. assertNotNull ( upstream )
************************************
[+] input: makeOneSignCycle() { StartSignatureRequest request = new StartSignatureRequest(CLIENT_IP, new Base64String(this.visibleData)); StartTransactionResponse response = this.rpApi.startSignature(request);  Assertions.assertNotNull(response); Assertions.assertNotNull(response.getOrderRef()); Assertions.assertNotNull(response.getAutoStartToken()); Assertions.assertNotNull(response.getQrStartToken()); Assertions.assertNotNull(response.getQrStartSecret());  // Collect CollectResponse collectResponse = this.rpApi.collect(response.getOrderRef()); Assertions.assertNotNull(collectResponse);  Assertions.assertNotNull(collectResponse.getOrderRef()); Assertions.assertEquals(response.getOrderRef(), collectResponse.getOrderRef());  Assertions.assertNotNull(collectResponse.getStatus()); Assertions.assertEquals("pending", collectResponse.getStatus()); Assertions.assertNotNull(collectResponse.getHintCode()); Assertions.assertEquals("outstandingTransaction", collectResponse.getHintCode());  // Cancel boolean cancelResponse = this.rpApi.cancel(response.getOrderRef()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(cancelResponse)
[-] pred: org. junit. Assert. assertTrue ( cancelResponse )
************************************
[+] input: testOnJoinPrepareWithOffsetCommitShouldKeepJoinAfterNonRetryableException() { try (ConsumerCoordinator coordinator = prepareCoordinatorForCloseTest(true, true, Optional.empty(), false)) { int generationId = 42; String memberId = "consumer-42";  Timer pollTimer = time.timer(100L); client.prepareResponse(offsetCommitResponse(singletonMap(t1p, Errors.UNKNOWN_MEMBER_ID))); boolean res = coordinator.onJoinPrepare(pollTimer, generationId, memberId); "<AssertPlaceHolder>";  assertFalse(client.hasPendingResponses()); assertFalse(client.hasInFlightRequests()); assertFalse(coordinator.coordinatorUnknown()); } }
[*] target: assertTrue(res)
[-] pred: org. junit. Assert. assertTrue ( res )
************************************
[+] input: testAsConsumerGroupDescribeWithTopicNameNotFound() { Uuid memberId = Uuid.randomUuid(); ConsumerGroupCurrentMemberAssignmentValue record = new ConsumerGroupCurrentMemberAssignmentValue() .setAssignedPartitions(Collections.singletonList(new ConsumerGroupCurrentMemberAssignmentValue.TopicPartitions() .setTopicId(Uuid.randomUuid()) .setPartitions(Arrays.asList(0, 1, 2)))); ConsumerGroupMember member = new ConsumerGroupMember.Builder(memberId.toString()) .updateWith(record) .build();  ConsumerGroupDescribeResponseData.Member expected = new ConsumerGroupDescribeResponseData.Member() .setMemberId(memberId.toString()) .setSubscribedTopicRegex(""); ConsumerGroupDescribeResponseData.Member actual = member.asConsumerGroupDescribeMember(null, new MetadataImageBuilder() .addTopic(Uuid.randomUuid(), "foo", 3) .build().topics() ); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testSingleColumn() { InternalPartitionField column = InternalPartitionField.builder() .sourceField( InternalField.builder() .name("column1") .schema( InternalSchema.builder() .name("string") .dataType(InternalType.STRING) .build()) .build()) .transformType(PartitionTransformType.VALUE) .build();  List<PartitionValue> expected = Collections.singletonList( PartitionValue.builder().partitionField(column).range(Range.scalar("foo")).build());  List<PartitionValue> actual = new HudiPartitionValuesExtractor(Collections.emptyMap()) .extractPartitionValues(Collections.singletonList(column), "foo"); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: listTopics() { ListTopicsRequest request = new ListTopicsRequest(); request.setScope("unanswered_questions"); request.setCount(30); request.setGroupId("知识星球id"); ListTopicsResponse listTopicsResponse = zsxqApi.listTopics(request, COOKIE); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(listTopicsResponse)
[-] pred: org. junit. Assert. assertNotNull ( listTopicsResponse )
************************************
[+] input: IOException { // Arrange var bits = "000111110001111100011111"; // 2039583 var i = BitConverter.bitsToInt(bits);  // Act var bits2 = BitConverter.intToBits(i);   // Assert "<AssertPlaceHolder>";  }
[*] target: assertEquals(bits,bits2)
[-] pred: org. junit. Assert. assertEquals ( bits, bits2 )
************************************
[+] input: validateInvalidNonVisibleLength() { // Arrange AuthenticationRequest request = new AuthenticationRequest(); request.setUserNonVisibleData(TestUtils.generateString(1501));  // Act boolean valid = request.validate();  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(valid)
[-] pred: org. junit. Assert. assertFalse ( valid )
************************************
[+] input: testConsumerGroupDescribeNoErrors() { List<String> consumerGroupIds = Arrays.asList("group-id-1", "group-id-2"); int epoch = 10; String memberId = "member-id"; String topicName = "topicName"; ConsumerGroupMember.Builder memberBuilder = new ConsumerGroupMember.Builder(memberId) .setSubscribedTopicNames(Collections.singletonList(topicName)) .setServerAssignorName("assignorName");  MockPartitionAssignor assignor = new MockPartitionAssignor("range"); GroupMetadataManagerTestContext context = new GroupMetadataManagerTestContext.Builder() .withConsumerGroupAssignors(Collections.singletonList(assignor)) .withConsumerGroup(new ConsumerGroupBuilder(consumerGroupIds.get(0), epoch)) .withConsumerGroup(new ConsumerGroupBuilder(consumerGroupIds.get(1), epoch) .withMember(memberBuilder.build())) .build();  List<ConsumerGroupDescribeResponseData.DescribedGroup> expected = Arrays.asList( new ConsumerGroupDescribeResponseData.DescribedGroup() .setGroupEpoch(epoch) .setGroupId(consumerGroupIds.get(0)) .setGroupState(ConsumerGroup.ConsumerGroupState.EMPTY.toString()) .setAssignorName("range"), new ConsumerGroupDescribeResponseData.DescribedGroup() .setGroupEpoch(epoch) .setGroupId(consumerGroupIds.get(1)) .setMembers(Collections.singletonList( memberBuilder.build().asConsumerGroupDescribeMember( new Assignment(Collections.emptyMap()), new MetadataImageBuilder().build().topics() ) )) .setGroupState(ConsumerGroup.ConsumerGroupState.ASSIGNING.toString()) .setAssignorName("assignorName") ); List<ConsumerGroupDescribeResponseData.DescribedGroup> actual = context.sendConsumerGroupDescribe(consumerGroupIds);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetNextKey() { Nibbles prefix = Nibbles.fromBytes("nextKe".getBytes()); Nibbles actualKey = Nibbles.fromBytes("nextKey".getBytes());  // Setup a mock TrieNodeData that represents the next key TrieNodeData nextKeyNode = new TrieNodeData( false, actualKey, new ArrayList<>(), "nextValue".getBytes(), new byte[0], (byte) 0);  // Assuming the database returns the mock TrieNodeData for the next key when(db.find(anyString())).thenReturn(Optional.of(nextKeyNode));  // Action byte[] blockStateRoot = Hash256.from(ROOT_HASH).getBytes(); Nibbles result = trieStorage.getNextKeyByMerkleValue(blockStateRoot, prefix);  // Assert "<AssertPlaceHolder>"; }
[*] target: assertEquals(actualKey, result)
[-] pred: org. junit. Assert. assertEquals ( actualKey, result )
************************************
[+] input: testBatchSend() { //        // Setup //        final BatchSendRequest batchSendRequest = new BatchSendRequest("code", 0L, //                Arrays.asList(new MessageParam("receiver", new HashMap<>(), new HashMap<>()))); //        final SendResponse expectedResult = new SendResponse("status", "msg"); // //        // Configure ProcessController.process(...). //        final ProcessContext processContext = new ProcessContext<>("code", null, false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")); //        when(processController.process(new ProcessContext<>("code", null, false, new BasicResultVO<>( //                RespStatusEnum.SUCCESS, "data")))).thenReturn(processContext); // //        // Run the test //        final SendResponse result = sendServiceImplUnderTest.batchSend(batchSendRequest); // //        // Verify the results //        "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testGetCompileTransitiveDependenciesJettyFullExclusion() { var resolver = new DependencyResolver(VersionResolution.dummy(), ArtifactRetriever.instance(), List.of(MAVEN_CENTRAL, SONATYPE_SNAPSHOTS), new Dependency("org.eclipse.jetty", "jetty-server", new VersionNumber(11, 0, 14)) .exclude("*", "*")); var dependencies = resolver.getAllDependencies(compile); "<AssertPlaceHolder>"; assertEquals(1, dependencies.size()); assertEquals(""" org.eclipse.jetty:jetty-server:11.0.14""", StringUtils.join(dependencies, "\n")); }
[*] target: assertNotNull(dependencies)
[-] pred: org. junit. Assert. assertNotNull ( dependencies )
************************************
[+] input: getAllCatalogs() { Iterable<CatalogEntity> catalogEntities = catalogService.getAllCatalogs();  "<AssertPlaceHolder>";  catalogEntities.forEach(v -> { assertTrue(v.getProductId().startsWith("CATALOG-")); }); }
[*] target: assertNotNull(catalogEntities)
[-] pred: org. junit. Assert. assertNotNull ( catalogEntities )
************************************
[+] input: testDelete() { userLoginIdentity(true, 11L); //        userLoginIdentity(false, 12L);  ActionResult result = configService.delete("4TxfzW"); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testVersionsToString() { List<ApiVersion> versionList = new ArrayList<>(); for (ApiKeys apiKey : ApiKeys.values()) { if (apiKey == ApiKeys.DELETE_TOPICS) { versionList.add(new ApiVersion() .setApiKey(apiKey.id) .setMinVersion((short) 10000) .setMaxVersion((short) 10001)); } else versionList.add(ApiVersionsResponse.toApiVersion(apiKey)); } NodeApiVersions versions = new NodeApiVersions(versionList, Collections.emptyList(), false); StringBuilder bld = new StringBuilder(); String prefix = "("; for (ApiKeys apiKey : ApiKeys.values()) { bld.append(prefix); if (apiKey == ApiKeys.DELETE_TOPICS) { bld.append("DeleteTopics(20): 10000 to 10001 [unusable: node too new]"); } else { bld.append(apiKey.name).append("("). append(apiKey.id).append("): "); if (apiKey.oldestVersion() == apiKey.latestVersion()) { bld.append(apiKey.oldestVersion()); } else { bld.append(apiKey.oldestVersion()). append(" to "). append(apiKey.latestVersion()); } bld.append(" [usable: ").append(apiKey.latestVersion()). append("]"); } prefix = ", "; } bld.append(")"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(bld.toString(), versions.toString())
[-] pred: org. junit. Assert. assertEquals ( bld. toString ( ), versions. toString ( ) )
************************************
[+] input: Exception { final UUID userId = UUID.randomUUID(); final Map<String, String> properties = Map.of(AIRBYTE_USER_ID_HEADER, userId.toString()); final Set<String> expectedAuthUserIds = Set.of(AUTH_USER_ID, "some-other-id"); when(userPersistence.listAuthUserIdsForUser(userId)).thenReturn(expectedAuthUserIds.stream().toList());  final Set<String> resolvedAuthUserIds = resolver.resolveAuthUserIds(properties);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedAuthUserIds, resolvedAuthUserIds)
[-] pred: org. junit. Assert. assertEquals ( expectedAuthUserIds, resolvedAuthUserIds )
************************************
[+] input: testIsFavorite_favoriteDoesNotExist_returnFalse() { // given Article article = new Article(testUser1, "title1", "desc1", "content1"); when(articleFavoriteRepository.existsBy(testUser1, article)).thenReturn(false);  // when boolean isFavorite = sut.isFavorite(testUser1, article);  // then "<AssertPlaceHolder>"; verify(articleFavoriteRepository).existsBy(testUser1, article); }
[*] target: assertFalse(isFavorite)
[-] pred: org. junit. Assert. assertFalse ( isFavorite )
************************************
[+] input: testJoinPrepareAndCommitWithUnknownMemberId() { try (ConsumerCoordinator coordinator = prepareCoordinatorForCloseTest(true, true, Optional.of("group-id"), true)) { coordinator.ensureActiveGroup();  prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.UNKNOWN_MEMBER_ID);  int generationId = 42; String memberId = "consumer-42";  boolean res = coordinator.onJoinPrepare(time.timer(0L), generationId, memberId); coordinator.invokeCompletedOffsetCommitCallbacks();  "<AssertPlaceHolder>"; assertFalse(client.hasPendingResponses()); assertFalse(client.hasInFlightRequests()); assertFalse(coordinator.coordinatorUnknown()); } }
[*] target: assertTrue(res)
[-] pred: org. junit. Assert. assertTrue ( res )
************************************
[+] input: checkNameExistsFalse() { //        given BindingResult br = mock(BindingResult.class);  //        when when(frontendResourceRepository.findByName(anyString())).thenReturn(null); boolean result = frontendResourceService.checkNameExists(FRONTEND_RESOURCE_NAME, br);  //        then "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testListQuery() { userLoginIdentity(false, 8L); //        userLoginIdentity(true, 10L);  ChartListQueryParam param = new ChartListQueryParam(); param.setIdList(Arrays.asList(4L, 5L, 6L)); param.setUserId(1L);  ListResult<Chart> listQuery = chartService.listQuery(param); "<AssertPlaceHolder>";  }
[*] target: assertNotNull(listQuery)
[-] pred: org. junit. Assert. assertNotNull ( listQuery )
************************************
[+] input: JsonValidationException { final ConnectorSpecification connectorSpecification = ConnectorSpecificationHelpers.generateAdvancedAuthConnectorSpecification(); final Map<String, List<String>> result = OAuthSecretHelper.getOAuthConfigPaths(connectorSpecification); final Map<String, List<String>> expected = Map.of( REFRESH_TOKEN, List.of(REFRESH_TOKEN), CLIENT_ID, List.of(CLIENT_ID), CLIENT_SECRET, List.of(CLIENT_SECRET)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testIntToByte() { int v = 258; byte[] b = ByteUtils.intToByte(v); Assertions.assertArrayEquals(new byte[] {0x00, 0x00, 0x01, 0x02}, b); int v2 = ByteUtils.byteToInt(b); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(v, v2)
[-] pred: org. junit. Assert. assertEquals ( v, v2 )
************************************
[+] input: testBasicCompletion() { RequestFuture<String> future = new RequestFuture<>(); String value = "foo"; future.complete(value); assertTrue(future.isDone()); "<AssertPlaceHolder>"; }
[*] target: assertEquals(value, future.value())
[-] pred: org. junit. Assert. assertEquals ( value, future. value() )
************************************
[+] input: Exception { // prepare String path = "user/" + userId + "/" + file.getName(); assertTrue(path.endsWith("mp4")); minioService.uploadObject(file, minioConfiguration.getStoreBucket(), path); // test videoService.download("minio.bucket.store://" + path, "download/" + videoId); File src = new File("download/" + videoId); src.deleteOnExit(); "<AssertPlaceHolder>"; }
[*] target: assertTrue(src.exists())
[-] pred: org. junit. Assert. assertTrue ( src. exists ( ) )
************************************
[+] input: testParse() { var responseSchemas = List.of( new ResponseSchema("name", "desc"), new ResponseSchema("age", "desc")); var parser = StructuredOutputParser.fromResponseSchemas(responseSchemas);  var text = "```json\n{"name": "John", "age": 30}\n```"; var result = parser.parse(text);  var expectedResult = Map.of("name", "John", "age", 30); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: isTaskOwner() { Long userId = 1L; Long taskId = 1L; Mockito.when(userRepository.isTaskOwner(userId, taskId)) .thenReturn(true); boolean isOwner = userService.isTaskOwner(userId, taskId); Mockito.verify(userRepository).isTaskOwner(userId, taskId); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(isOwner)
[-] pred: org. junit. Assert. assertTrue ( isOwner )
************************************
[+] input: testShouldThrottle() { for (short version : ApiKeys.OFFSET_FETCH.allVersions()) { if (version < 8) { OffsetFetchResponse response = new OffsetFetchResponse(throttleTimeMs, Errors.NONE, partitionDataMap); if (version >= 4) { assertTrue(response.shouldClientThrottle(version)); } else { assertFalse(response.shouldClientThrottle(version)); } } else { OffsetFetchResponse response = new OffsetFetchResponse( throttleTimeMs, Collections.singletonMap(groupOne, Errors.NOT_COORDINATOR), Collections.singletonMap(groupOne, partitionDataMap)); "<AssertPlaceHolder>"; } } }
[*] target: assertTrue(response.shouldClientThrottle(version))
[-] pred: org. junit. Assert. assertTrue ( response. shouldClientThrottle( version ) )
************************************
[+] input: testOneShortWord() { String content = "a";  expected.add("a");  List<String> actual = extractor.extract(content); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: givenValidPhoneNumber_whenUserExistsByPhoneNumber_thenReturnTrue() {  // Given AysPhoneNumber mockPhoneNumber = new AysPhoneNumberBuilder() .withValidValues() .build();  // When Mockito.when(userRepository.existsByCountryCodeAndLineNumber(mockPhoneNumber.getCountryCode(), mockPhoneNumber.getLineNumber())) .thenReturn(true);  // Then boolean isUserExists = userAdapter.existsByPhoneNumber(mockPhoneNumber);  Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(userRepository, Mockito.times(1)) .existsByCountryCodeAndLineNumber(mockPhoneNumber.getCountryCode(), mockPhoneNumber.getLineNumber()); }
[*] target: assertTrue(isUserExists)
[-] pred: org. junit. Assert. assertTrue ( isUserExists )
************************************
[+] input: testObjectToMapNull() { BranchDO branchDO = null; Map<String, String> map = BeanUtils.objectToMap(branchDO); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNull(map)
[-] pred: org. junit. Assert. assertNull ( map )
************************************
[+] input: testTimeWindowSerdeFrom() { final Windowed<Integer> timeWindowed = new Windowed<>(10, new TimeWindow(0, Long.MAX_VALUE)); final Serde<Windowed<Integer>> timeWindowedSerde = WindowedSerdes.timeWindowedSerdeFrom(Integer.class, Long.MAX_VALUE); final byte[] bytes = timeWindowedSerde.serializer().serialize(topic, timeWindowed); final Windowed<Integer> windowed = timeWindowedSerde.deserializer().deserialize(topic, bytes); "<AssertPlaceHolder>"; }
[*] target: assertEquals(timeWindowed, windowed)
[-] pred: org. junit. Assert. assertEquals ( timeWindowed, windowed )
************************************
[+] input: testOneShortWordWithSurroundingWhitespace() { String content = " \t\n\ra \t\n\r";  expected.add("a");  List<String> actual = extractor.extract(content); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testAsConsumerGroupDescribeMember() { Uuid topicId1 = Uuid.randomUuid(); Uuid topicId2 = Uuid.randomUuid(); Uuid topicId3 = Uuid.randomUuid(); Uuid topicId4 = Uuid.randomUuid(); MetadataImage metadataImage = new MetadataImageBuilder() .addTopic(topicId1, "topic1", 3) .addTopic(topicId2, "topic2", 3) .addTopic(topicId3, "topic3", 3) .addTopic(topicId4, "topic4", 3) .build(); List<Integer> assignedPartitions = Arrays.asList(0, 1, 2); int epoch = 10; ConsumerGroupCurrentMemberAssignmentValue record = new ConsumerGroupCurrentMemberAssignmentValue() .setMemberEpoch(epoch) .setPreviousMemberEpoch(epoch - 1) .setAssignedPartitions(Collections.singletonList(new ConsumerGroupCurrentMemberAssignmentValue.TopicPartitions() .setTopicId(topicId1) .setPartitions(assignedPartitions))) .setPartitionsPendingRevocation(Collections.singletonList(new ConsumerGroupCurrentMemberAssignmentValue.TopicPartitions() .setTopicId(topicId2) .setPartitions(Arrays.asList(3, 4, 5)))); String memberId = Uuid.randomUuid().toString(); String clientId = "clientId"; String instanceId = "instanceId"; String rackId = "rackId"; String clientHost = "clientHost"; List<String> subscribedTopicNames = Arrays.asList("topic1", "topic2"); String subscribedTopicRegex = "topic.*"; Map<Uuid, Set<Integer>> assignmentMap = new HashMap<>(); assignmentMap.put(topicId4, new HashSet<>(assignedPartitions)); Assignment targetAssignment = new Assignment(assignmentMap); ConsumerGroupMember member = new ConsumerGroupMember.Builder(memberId) .updateWith(record) .setClientId(clientId) .setInstanceId(instanceId) .setRackId(rackId) .setClientHost(clientHost) .setSubscribedTopicNames(subscribedTopicNames) .setSubscribedTopicRegex(subscribedTopicRegex) .build();  ConsumerGroupDescribeResponseData.Member actual = member.asConsumerGroupDescribeMember(targetAssignment, metadataImage.topics()); ConsumerGroupDescribeResponseData.Member expected = new ConsumerGroupDescribeResponseData.Member() .setMemberId(memberId) .setMemberEpoch(epoch) .setClientId(clientId) .setInstanceId(instanceId) .setRackId(rackId) .setClientHost(clientHost) .setSubscribedTopicNames(new ArrayList<>(subscribedTopicNames)) .setSubscribedTopicRegex(subscribedTopicRegex) .setAssignment( new ConsumerGroupDescribeResponseData.Assignment() .setTopicPartitions(Collections.singletonList(new ConsumerGroupDescribeResponseData.TopicPartitions() .setTopicId(topicId1) .setTopicName("topic1") .setPartitions(assignedPartitions) )) ) .setTargetAssignment( new ConsumerGroupDescribeResponseData.Assignment() .setTopicPartitions(targetAssignment.partitions().entrySet().stream().map( item -> new ConsumerGroupDescribeResponseData.TopicPartitions() .setTopicId(item.getKey()) .setTopicName("topic4") .setPartitions(new ArrayList<>(item.getValue())) ).collect(Collectors.toList())) );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testFindVariablesWithSingleVariable() { String input = "Hello, {name}!"; List<String> variables = findVariables(input);  "<AssertPlaceHolder>"; assertEquals("name", variables.get(0)); }
[*] target: assertEquals(1, variables.size())
[-] pred: org. junit. Assert. assertEquals ( 1, variables. size ( ) )
************************************
[+] input: invokeCount() { boolean b = userInterfaceInfoService.invokeCount(1L, 1L); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(b)
[-] pred: org. junit. Assert. assertTrue ( b )
************************************
[+] input: validateWithData() { // Arrange AuthenticationRequest request = new AuthenticationRequest(); request.setUserVisibleData(TestUtils.generateString(200)); request.setUserNonVisibleData(TestUtils.generateString(200));  // Act boolean valid = request.validate();  // Assert "<AssertPlaceHolder>"; }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
[+] input: testOneLongWord() { String content = "thisisareallylongword";  expected.add("thisisareallylongword");  List<String> actual = extractor.extract(content); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testModifySchema() { for (DialectProperties dialectProperties : dialectPropertiesList) { Long dataSourceId = TestUtils.nextLong(); Long consoleId = TestUtils.nextLong(); TestUtils.buildContext(dialectProperties, dataSourceId, consoleId);  SchemaOperationParam schemaOperationParam = new SchemaOperationParam(); schemaOperationParam.setDatabaseName(dialectProperties.getDatabaseName()); schemaOperationParam.setSchemaName("test" + TestUtils.nextLong()); schemaOperationParam.setNewSchemaName("test" + TestUtils.nextLong());  ActionResult actionResult = databaseService.modifySchema(schemaOperationParam); "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(actionResult)
[-] pred: org. junit. Assert. assertNotNull ( actionResult )
************************************
[+] input: testValidateSubject() { String expected = "jdoe"; String actual = ClaimValidationUtils.validateSubject("sub", expected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: extAllocatorMallocVersion1() { int size = 123; int pointer = 777; RuntimePointerSize runtimePointerSize = mock(RuntimePointerSize.class); when(sharedMemory.allocate(size)).thenReturn(runtimePointerSize); when(runtimePointerSize.pointer()).thenReturn(pointer);  int result = allocatorHostFunctions.extAllocatorMallocVersion1(size);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(pointer, result)
[-] pred: org. junit. Assert. assertEquals ( pointer, result )
************************************
[+] input: IOException { try (SqlSession session = getSessionFactory().openSession()) { S3StreamSetObjectMapper mapper = session.getMapper(S3StreamSetObjectMapper.class);  S3StreamSetObject walObject = new S3StreamSetObject(); walObject.setNodeId(1); walObject.setObjectSize(128L); walObject.setObjectId(2L); walObject.setSequenceId(3L); walObject.setBaseDataTimestamp(new Date()); walObject.setCommittedTimestamp(new Date()); walObject.setCreatedTimestamp(new Date()); SubStreams subStreams = SubStreams.newBuilder() .putSubStreams(1, SubStream.newBuilder().setStreamId(1).setStartOffset(0).setEndOffset(10).build()) .putSubStreams(2, SubStream.newBuilder().setStreamId(2).setStartOffset(0).setEndOffset(10).build()) .putSubStreams(3, SubStream.newBuilder().setStreamId(3).setStartOffset(0).setEndOffset(10).build()) .build(); walObject.setSubStreams(JsonFormat.printer().print(subStreams)); int rowsAffected = mapper.create(walObject); Assertions."<AssertPlaceHolder>";  Assertions.assertTrue(mapper.streamExclusive(1, 1)); Assertions.assertTrue(mapper.streamExclusive(1, 2)); Assertions.assertTrue(mapper.streamExclusive(1, 3));  Assertions.assertFalse(mapper.streamExclusive(2, 1)); Assertions.assertFalse(mapper.streamExclusive(2, 2)); Assertions.assertFalse(mapper.streamExclusive(2, 3)); } }
[*] target: assertEquals(1, rowsAffected)
[-] pred: org. junit. Assert. assertEquals ( 1, rowsAffected )
************************************
[+] input: JsonProcessingException { String expected = "{"endUserIp":"1.2.3.4"}";  StartAuthenticationRequest request = new StartAuthenticationRequest("1.2.3.4"); request.setReturnRisk(null);  ObjectMapper mapper = new ObjectMapper(); String json = mapper.writeValueAsString(request);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, json)
[-] pred: org. junit. Assert. assertEquals ( expected, json )
************************************
[+] input: testBuildWithNullList() { ListBuilder builder = new ListBuilder("field", null); builder.setSeparator(" OR ");  String expected = ""; String actual = builder.build();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGetConnectionUrl() { final WebUrlHelper webUrlHelper = new WebUrlHelper(LOCALHOST_8000); final String connectionUrl = webUrlHelper.getConnectionUrl(WORKSPACE_ID, CONNECTION_ID); final String expectedUrl = String.format("http://localhost:8000/workspaces/%s/connections/%s", WORKSPACE_ID, CONNECTION_ID); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedUrl, connectionUrl)
[-] pred: org. junit. Assert. assertEquals ( expectedUrl, connectionUrl )
************************************
[+] input: testEquals() { IndexPathNode indexPathNode = new IndexPathNode(token, charSource); IndexPathNode indexPathNode2 = new IndexPathNode(token, charSource); assertEquals(indexPathNode, indexPathNode2); "<AssertPlaceHolder>"; }
[*] target: assertEquals(indexPathNode.hashCode(), indexPathNode2.hashCode())
[-] pred: org. junit. Assert. assertEquals ( indexPathNode. hashCode(), indexPathNode2. hashCode() )
************************************
[+] input: testLimit_User_RequestLimit() { Config config = new Config();  Role role1 = new Role(); Limit limit = new Limit(); limit.setRequestDay(10); limit.setRequestHour(1); role1.setLimits(Map.of("model", limit));  Role role2 = new Role(); limit = new Limit(); limit.setRequestDay(20); limit.setRequestHour(1); role2.setLimits(Map.of("model", limit));  config.getRoles().put("role1", role1); config.getRoles().put("role2", role2);  ApiKeyData apiKeyData = new ApiKeyData(); ProxyContext proxyContext = new ProxyContext(config, request, apiKeyData, new ExtractedClaims("sub", List.of("role1", "role2"), "user-hash", Map.of()), "trace-id", "span-id"); Model model = new Model(); model.setName("model"); proxyContext.setDeployment(model);  when(vertx.executeBlocking(any(Callable.class), eq(false))).thenAnswer(invocation -> { Callable<?> callable = invocation.getArgument(0); return Future.succeededFuture(callable.call()); });  TokenUsage tokenUsage = new TokenUsage(); tokenUsage.setTotalTokens(150); proxyContext.setTokenUsage(tokenUsage);  Future<Void> increaseLimitFuture = rateLimiter.increase(proxyContext); assertNotNull(increaseLimitFuture); assertNull(increaseLimitFuture.cause());  Future<RateLimitResult> checkLimitFuture = rateLimiter.limit(proxyContext);  assertNotNull(checkLimitFuture); assertNotNull(checkLimitFuture.result()); assertEquals(HttpStatus.OK, checkLimitFuture.result().status());  increaseLimitFuture = rateLimiter.increase(proxyContext); assertNotNull(increaseLimitFuture); assertNull(increaseLimitFuture.cause());  checkLimitFuture = rateLimiter.limit(proxyContext);  "<AssertPlaceHolder>"; assertNotNull(checkLimitFuture.result()); assertEquals(HttpStatus.TOO_MANY_REQUESTS, checkLimitFuture.result().status());  }
[*] target: assertNotNull(checkLimitFuture)
[-] pred: org. junit. Assert. assertNotNull ( checkLimitFuture )
************************************
[+] input: testConnectionDelayWithNoExponentialBackoff() { long now = time.milliseconds(); long delay = clientWithNoExponentialBackoff.connectionDelay(node, now);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, delay)
[-] pred: org. junit. Assert. assertEquals ( 0, delay )
************************************
[+] input: testSimplePartitionedTable() { StructType tableSchema = getSchemaWithFields(Arrays.asList("id", "firstName", "gender", "birthDate")); StructType partitionSchema = getSchemaWithFields(Arrays.asList("gender")); InternalSchema internalSchema = deltaSchemaExtractor.toInternalSchema(tableSchema); List<InternalPartitionField> expectedInternalPartitionFields = Arrays.asList( InternalPartitionField.builder() .sourceField( InternalField.builder() .name("gender") .schema( InternalSchema.builder() .name("string") .dataType(InternalType.STRING) .build()) .build()) .transformType(PartitionTransformType.VALUE) .build()); List<InternalPartitionField> internalPartitionFields = deltaPartitionExtractor.convertFromDeltaPartitionFormat(internalSchema, partitionSchema); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedInternalPartitionFields, internalPartitionFields)
[-] pred: org. junit. Assert. assertEquals ( expectedInternalPartitionFields, internalPartitionFields )
************************************
[+] input: testFullResource() { ApplicationInfo appInfo = new ApplicationInfo(); appInfo.labelRes = 12345;  when(app.getApplicationContext().getApplicationInfo()).thenReturn(appInfo); when(app.getApplicationContext().getString(appInfo.labelRes)).thenReturn(appName);  Resource expected = Resource.getDefault() .merge( Resource.builder() .put(SERVICE_NAME, appName) .put(RUM_SDK_VERSION, rumSdkVersion) .put(DEVICE_MODEL_NAME, Build.MODEL) .put(DEVICE_MODEL_IDENTIFIER, Build.MODEL) .put(DEVICE_MANUFACTURER, Build.MANUFACTURER) .put(OS_NAME, "Android") .put(OS_TYPE, "linux") .put(OS_VERSION, Build.VERSION.RELEASE) .put(OS_DESCRIPTION, osDescription) .build());  Resource result = AndroidResource.createDefault(app); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: buildUndoSQL() { OracleUndoDeleteExecutor executor = upperCase();  String sql = executor.buildUndoSQL(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sql.contains("INSERT")); Assertions.assertTrue(sql.contains("ID")); Assertions.assertTrue(sql.contains("TABLE_NAME")); }
[*] target: assertNotNull(sql)
[-] pred: org. junit. Assert. assertNotNull ( sql )
************************************
[+] input: IOException { final JSerialCommPort port = new JSerialCommPort("", 9600, 8, 1, SerialPort.NO_PARITY, new byte[] { (byte) 0xA5 }, FrameDefinition.create("SACLOODVV")); port.serialEvent(new SerialPortEvent(getPort(), SerialPort.LISTENING_EVENT_DATA_RECEIVED, new byte[] { Integer.valueOf(0xA5).byteValue(), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A }));  final ByteBuffer frame = port.getNextFrame(); "<AssertPlaceHolder>"; assertArrayEquals(new byte[] { Integer.valueOf(0xA5).byteValue(), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A }, frame.array()); }
[*] target: assertNotNull(frame)
[-] pred: org. junit. Assert. assertNotNull ( frame )
************************************
[+] input: Exception { MockTime time = new MockTime(0, 0, 0); Scheduler scheduler = new MockScheduler(time); try (MiniTrogdorCluster cluster = new MiniTrogdorCluster.Builder(). addCoordinator("node01"). addAgent("node02"). scheduler(scheduler). build()) { CoordinatorClient coordinatorClient = cluster.coordinatorClient();  NoOpTaskSpec fooSpec = new NoOpTaskSpec(1, 500); coordinatorClient.createTask(new CreateTaskRequest("foo", fooSpec)); TaskState expectedState = new ExpectedTaskBuilder("foo").taskState(new TaskPending(fooSpec)).build().taskState();  TaskState resp = coordinatorClient.task(new TaskRequest("foo")); "<AssertPlaceHolder>";   time.sleep(2); new ExpectedTasks(). addTask(new ExpectedTaskBuilder("foo"). taskState(new TaskRunning(fooSpec, 2, new TextNode("active"))). workerState(new WorkerRunning("foo", fooSpec, 2, new TextNode("active"))). build()). waitFor(coordinatorClient). waitFor(cluster.agentClient("node02"));  cluster.restartAgent("node02"); time.sleep(550); // coordinator heartbeat sees that the agent is back up, re-schedules the task but the agent expires it new ExpectedTasks(). addTask(new ExpectedTaskBuilder("foo"). taskState(new TaskDone(fooSpec, 2, 552, "worker expired", false, null)). workerState(new WorkerDone("foo", fooSpec, 552, 552, null, "worker expired")). build()). waitFor(coordinatorClient). waitFor(cluster.agentClient("node02"));  cluster.restartAgent("node02"); // coordinator heartbeat sees that the agent is back up but does not re-schedule the task as it is DONE new ExpectedTasks(). addTask(new ExpectedTaskBuilder("foo"). taskState(new TaskDone(fooSpec, 2, 552, "worker expired", false, null)). // no worker states build()). waitFor(coordinatorClient). waitFor(cluster.agentClient("node02")); } }
[*] target: assertEquals(expectedState, resp)
[-] pred: org. junit. Assert. assertEquals ( expectedState, resp )
************************************
[+] input: IOException { BaseMetalake metalake = createBaseMakeLake(RandomIdGenerator.INSTANCE.nextId(), metalakeName, auditInfo); backend.insert(metalake, false);  TagMetaService tagMetaService = TagMetaService.getInstance(); TagEntity tagEntity1 = TagEntity.builder() .withId(RandomIdGenerator.INSTANCE.nextId()) .withName("tag1") .withNamespace(TagManager.ofTagNamespace(metalakeName)) .withComment("comment") .withProperties(props) .withAuditInfo(auditInfo) .build(); tagMetaService.insertTag(tagEntity1, false);  boolean deleted = tagMetaService.deleteTag(TagManager.ofTagIdent(metalakeName, "tag1")); Assertions."<AssertPlaceHolder>";  deleted = tagMetaService.deleteTag(TagManager.ofTagIdent(metalakeName, "tag1")); Assertions.assertFalse(deleted);  Exception excep = Assertions.assertThrows( NoSuchEntityException.class, () -> tagMetaService.getTagByIdentifier(TagManager.ofTagIdent(metalakeName, "tag1"))); Assertions.assertEquals("No such tag entity: tag1", excep.getMessage()); }
[*] target: assertTrue(deleted)
[-] pred: org. junit. Assert. assertTrue ( deleted )
************************************
[+] input: SignatureParseException { when(this.rpApi.collect(Mockito.anyString())).thenReturn(null);  BankIDTransaction transaction = new BankIDTransaction( "orderInfo123", "67df3917-fa0d-44e5-b327-edcc928297f8", "d28db9a7-4cde-429e-a983-359be676944c", "autoStartToken", Instant.now() );  CollectResult response = this.bankIDService.collect(transaction);  "<AssertPlaceHolder>"; }
[*] target: assertNull(response)
[-] pred: org. junit. Assert. assertNull ( response )
************************************
[+] input: testDefinitionDefaultReqsOverrideWorker() { final ResourceRequirements workerDefaultReqs = new ResourceRequirements().withCpuRequest("1").withCpuLimit("1"); final ResourceRequirements definitionDefaultReqs = new ResourceRequirements().withCpuLimit("2").withMemoryRequest("100Mi"); final ActorDefinitionResourceRequirements definitionReqs = new ActorDefinitionResourceRequirements().withDefault(definitionDefaultReqs);  final ResourceRequirements result = ResourceRequirementsUtils.getResourceRequirements( null, definitionReqs, workerDefaultReqs, JobType.SYNC);  final ResourceRequirements expectedReqs = new ResourceRequirements() .withCpuRequest("1") .withCpuLimit("2") .withMemoryRequest("100Mi");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedReqs, result)
[-] pred: org. junit. Assert. assertEquals ( expectedReqs, result )
************************************
[+] input: Exception { try (InputStream key = this.getClass().getClassLoader().getResourceAsStream("certs/testSigningKey.p8")) { Assertions.assertNotNull(key); var tokenGenerator = new BearerTokenAuthenticator(new String(key.readAllBytes()), "keyId", "issuerId", "bundleId"); String token = tokenGenerator.generateToken(); Assertions."<AssertPlaceHolder>"; } }
[*] target: assertNotNull(token)
[-] pred: org. junit. Assert. assertNotNull ( token )
************************************
[+] input: testWriteCharArray() { StringBuilder sb = new StringBuilder(); try (var w = Internal.StringBuilderPrintWriter.of(sb)) { w.write("hello".toCharArray(), 0, 4); w.flush(); } String expected = "hell"; // hell is testing bullshit like this. String actual = sb.toString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testRenderWithHyphen() { Map<String, Object> model = Map.of("key-1", "value1"); String template = "This is a {key-1}"; PromptTemplate promptTemplate = new PromptTemplate(template, model);  String expected = "This is a value1"; String result = promptTemplate.render();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: IOException { final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final Map<String, Object> oauthParameters = generateOAuthParameters(); setupOAuthParamMocks(oauthParameters); final JsonNode actualConfig = oAuthConfigSupplier.maskSourceOAuthParameters(sourceDefinitionId, workspaceId, Jsons.clone(config), null); "<AssertPlaceHolder>"; }
[*] target: assertEquals(config, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( config, actualConfig )
************************************
[+] input: spanFlow() { Span subject = TestHelper.spanTest("root", "root", 0) .enter("x.A", "x", "A", 0) .enter("x.AA", "x", "AA", 0) .leave(1) .enter("x.AB", "x", "AB", 1) .leave(2) .leave(2) .enter("x.B", "x", "B", 2) .enter("x.BA", "x", "BA", 2) .leave(3) .enter("x.BB", "x", "BB", 3) .leave(4);  Span expected = TestHelper.spanTest("root", "root", 0, of( TestHelper.spanTest("x.A", "A", 0, 2, of( TestHelper.spanTest("x.AA", "AA", 0, 1), TestHelper.spanTest("x.AB", "AB", 1, 2) )), TestHelper.spanTest("x.B", "B", 2, 4, of( TestHelper.spanTest("x.BA", "BA", 2, 3), TestHelper.spanTest("x.BB", "BB", 3, 4) )) ));  Span root = subject.getRoot(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, root)
[-] pred: org. junit. Assert. assertEquals ( expected, root )
************************************
[+] input: Exception { JsonNode collection = Json.toJson(""" { "name": "example_collection", "vectors": { "size": 300, "distance": "Cosine" } } """);  JsonNode json = Json.toJson(collection.toString()); "<AssertPlaceHolder>";  assertEquals("example_collection", json.get("name").asText()); JsonNode vectorConfig = json.get("vectors"); assertEquals(300, vectorConfig.get("size").asInt()); assertEquals("Cosine", vectorConfig.get("distance").asText()); }
[*] target: assertNotNull(json)
[-] pred: org. junit. Assert. assertNotNull ( json )
************************************
[+] input: testMavenCompilerSourceSetterWhenValueIsNotNull() { var publishProperties = new PublishProperties(); Integer testValue = 15; publishProperties.mavenCompilerSource(testValue); Integer actualValue = Integer.parseInt(publishProperties.get("maven.compiler.source")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(testValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( testValue, actualValue )
************************************
[+] input: testFormatTemplateWithDoubleCurlyBraces() { String template = "Hello, {{{name}}}!"; Map<String, Object> kwargs = Map.of("name", "John");  // but python is 'Hello, {John}!' String expected = "Hello, {John}!"; String actual = formatTemplate(template, kwargs); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { final SourceConnection source = SourceHelpers.generateSource(UUID.randomUUID()); final StandardSync standardSync = ConnectionHelpers.generateSyncWithSourceId(source.getSourceId());  final AirbyteCatalog catalog = ConnectionHelpers.generateBasicApiCatalog(); catalog.getStreams().get(0).getStream().setName("azkaban_users");  final ConnectionSchedule schedule = new ConnectionSchedule().units(1L).timeUnit(TimeUnitEnum.MINUTES);  final UUID newSourceId = UUID.randomUUID(); final UUID newDestinationId = UUID.randomUUID(); final UUID newOperationId = UUID.randomUUID(); final UUID sourceCatalogId = UUID.randomUUID(); final WebBackendConnectionCreate input = new WebBackendConnectionCreate() .name("testConnectionCreate") .namespaceDefinition(Enums.convertTo(standardSync.getNamespaceDefinition(), NamespaceDefinitionType.class)) .namespaceFormat(standardSync.getNamespaceFormat()) .prefix(standardSync.getPrefix()) .sourceId(newSourceId) .destinationId(newDestinationId) .operationIds(List.of(newOperationId)) .status(ConnectionStatus.INACTIVE) .schedule(schedule) .syncCatalog(catalog) .sourceCatalogId(sourceCatalogId) .geography(Geography.US) .nonBreakingChangesPreference(NonBreakingChangesPreference.DISABLE);  final List<UUID> operationIds = List.of(newOperationId);  final ConnectionCreate expected = new ConnectionCreate() .name("testConnectionCreate") .namespaceDefinition(Enums.convertTo(standardSync.getNamespaceDefinition(), NamespaceDefinitionType.class)) .namespaceFormat(standardSync.getNamespaceFormat()) .prefix(standardSync.getPrefix()) .sourceId(newSourceId) .destinationId(newDestinationId) .operationIds(operationIds) .status(ConnectionStatus.INACTIVE) .schedule(schedule) .syncCatalog(catalog) .sourceCatalogId(sourceCatalogId) .geography(Geography.US) .nonBreakingChangesPreference(NonBreakingChangesPreference.DISABLE);  final ConnectionCreate actual = WebBackendConnectionsHandler.toConnectionCreate(input, operationIds);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: 회원이_가족_구성원인지_확인_테스트() { // given String familyId = "familyId"; Member member = new Member( "memberId", familyId, LocalDate.now(), "name", "", "", LocalDateTime.now() ); when(memberRepository.findById(member.getId())).thenReturn(Optional.of(member));  // when boolean isFamilyMember = memberService.isFamilyMember(member.getId(), familyId);  // then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isFamilyMember)
[-] pred: org. junit. Assert. assertTrue ( isFamilyMember )
************************************
[+] input: testGetSampleRows() { var actual = database.getSampleRows("students"); var expected = """ 3 rows from students table: id	name	score	teacher_note 1	Alex	100	Alex did perfectly every day in the class. 2	Alice	70	Alice needs a lot of improvements. 3	Jack	75	Event it is not the best, Jack has already improved."""; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: Exception { final List<Permission> existingPermissions = List.of(); when(permissionService.getPermissionsForUser(any())).thenReturn(existingPermissions); when(uuidSupplier.get()).thenReturn(PERMISSION_ID); final PermissionCreate permissionCreate = new PermissionCreate() .permissionType(io.airbyte.api.model.generated.PermissionType.WORKSPACE_OWNER) .userId(USER_ID) .workspaceId(WORKSPACE_ID); when(permissionService.createPermission(any())).thenReturn(PERMISSION); final PermissionRead actualRead = permissionHandler.createPermission(permissionCreate); final PermissionRead expectedRead = new PermissionRead() .permissionId(PERMISSION_ID) .permissionType(io.airbyte.api.model.generated.PermissionType.WORKSPACE_ADMIN) .userId(USER_ID) .workspaceId(WORKSPACE_ID);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRead, actualRead)
[-] pred: org. junit. Assert. assertEquals ( expectedRead, actualRead )
************************************
[+] input: testJobSpecificReqsOverrideDefault() { final ResourceRequirements workerDefaultReqs = new ResourceRequirements().withCpuRequest("1").withCpuLimit("1"); final ResourceRequirements definitionDefaultReqs = new ResourceRequirements().withCpuLimit("2").withMemoryRequest("100Mi"); final JobTypeResourceLimit jobTypeResourceLimit = new JobTypeResourceLimit().withJobType(JobType.SYNC).withResourceRequirements( new ResourceRequirements().withCpuRequest("2").withMemoryRequest("200Mi").withMemoryLimit("300Mi")); final ActorDefinitionResourceRequirements definitionReqs = new ActorDefinitionResourceRequirements() .withDefault(definitionDefaultReqs) .withJobSpecific(List.of(jobTypeResourceLimit));  final ResourceRequirements result = ResourceRequirementsUtils.getResourceRequirements( null, definitionReqs, workerDefaultReqs, JobType.SYNC);  final ResourceRequirements expectedReqs = new ResourceRequirements() .withCpuRequest("2") .withCpuLimit("2") .withMemoryRequest("200Mi") .withMemoryLimit("300Mi"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedReqs, result)
[-] pred: org. junit. Assert. assertEquals ( expectedReqs, result )
************************************
[+] input: catalogGetOrCreateWithRaceConditionOnCreation() { String catalogName = "catalog4"; StubCatalog.registerMock(catalogName, mockCatalog); IcebergCatalogConfig catalogConfig = IcebergCatalogConfig.builder() .catalogImpl(StubCatalog.class.getName()) .catalogName(catalogName) .catalogOptions(OPTIONS) .build(); Table mockTable = mock(Table.class); when(mockCatalog.tableExists(IDENTIFIER)).thenReturn(false); Schema schema = new Schema(); PartitionSpec partitionSpec = PartitionSpec.unpartitioned(); when(mockCatalog.createTable( IDENTIFIER, schema, partitionSpec, BASE_PATH, Collections.singletonMap( TableProperties.DEFAULT_NAME_MAPPING, NameMappingParser.toJson(MappingUtil.create(schema))))) .thenThrow(new AlreadyExistsException("Table already exists")); when(mockCatalog.loadTable(IDENTIFIER)).thenReturn(mockTable);  IcebergTableManager tableManager = IcebergTableManager.of(CONFIGURATION);  Table actual = tableManager.getOrCreateTable(catalogConfig, IDENTIFIER, BASE_PATH, schema, partitionSpec); "<AssertPlaceHolder>"; verify(mockCatalog).initialize(catalogName, OPTIONS); }
[*] target: assertEquals(mockTable, actual)
[-] pred: org. junit. Assert. assertEquals ( mockTable, actual )
************************************
[+] input: IOException { final String configJson = MoreResources.readResource("example_config.json"); final JsonNode config = Jsons.deserialize(configJson);  final String schemaJson = MoreResources.readResource("example_config_schema.json"); final JsonNode schema = Jsons.deserialize(schemaJson);  final Map<String, Object> expected = new ImmutableMap.Builder<String, Object>() .put("username", JobTracker.SET) .put("has_ssl", false) .put("password", JobTracker.SET) .put("one_of.type_key", "foo") .put("one_of.some_key", JobTracker.SET) .put("const_object.sub_key", "bar") .put("const_object.sub_array", "[1,2,3]") .put("const_object.sub_object.sub_sub_key", "baz") .put("enum_string", "foo") .put("additionalPropertiesUnset.foo", JobTracker.SET) .put("additionalPropertiesBoolean.foo", JobTracker.SET) .put("additionalPropertiesSchema.foo", JobTracker.SET) .put("additionalPropertiesConst.foo", 42) .put("additionalPropertiesEnumString", "foo") .build();  final Map<String, Object> actual = JobTracker.configToMetadata(config, schema);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: NoSuchAlgorithmException { AccessTokenValidator validator = new AccessTokenValidator(idpConfig, vertx, client); IdentityProvider provider = mock(IdentityProvider.class); when(provider.hasUserinfoUrl()).thenReturn(false); when(provider.extractClaimsFromJwt(any(DecodedJWT.class))).thenReturn(Future.succeededFuture(new ExtractedClaims("sub", Collections.emptyList(), "hash", Map.of()))); List<IdentityProvider> providerList = List.of(provider); validator.setProviders(providerList); KeyPair keyPair = generateRsa256Pair(); Algorithm algorithm = Algorithm.RSA256((RSAPublicKey) keyPair.getPublic(), (RSAPrivateKey) keyPair.getPrivate()); String token = JWT.create().withClaim("iss", "issuer").sign(algorithm); Future<ExtractedClaims> future = validator.extractClaims(getBearerHeaderValue(token)); "<AssertPlaceHolder>"; future.onComplete(res -> { assertTrue(res.succeeded()); ExtractedClaims claims = res.result(); assertNotNull(claims); assertEquals("sub", claims.sub()); assertEquals(Collections.emptyList(), claims.userRoles()); assertEquals("hash", claims.userHash()); verify(provider, never()).match(any(DecodedJWT.class)); }); }
[*] target: assertNotNull(future)
[-] pred: org. junit. Assert. assertNotNull ( future )
************************************
[+] input: testUpdateSchemaWithDiscoveryResetStream() { final AirbyteCatalog original = ConnectionHelpers.generateBasicApiCatalog(); original.getStreams().get(0).getStream() .name("random-stream") .defaultCursorField(List.of(FIELD1)) .jsonSchema(CatalogHelpers.fieldsToJsonSchema( Field.of(FIELD1, JsonSchemaType.NUMBER), Field.of(FIELD2, JsonSchemaType.NUMBER), Field.of(FIELD5, JsonSchemaType.STRING))) .supportedSyncModes(List.of(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL)); original.getStreams().get(0).getConfig() .syncMode(SyncMode.INCREMENTAL) .cursorField(List.of(FIELD1)) .destinationSyncMode(DestinationSyncMode.APPEND) .primaryKey(Collections.emptyList()) .aliasName("random_stream");  final AirbyteCatalog discovered = ConnectionHelpers.generateBasicApiCatalog(); discovered.getStreams().get(0).getStream() .name(STREAM1) .defaultCursorField(List.of(FIELD3)) .jsonSchema(CatalogHelpers.fieldsToJsonSchema(Field.of(FIELD2, JsonSchemaType.STRING))) .supportedSyncModes(List.of(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL)); discovered.getStreams().get(0).getConfig() .syncMode(SyncMode.FULL_REFRESH) .cursorField(Collections.emptyList()) .destinationSyncMode(DestinationSyncMode.OVERWRITE) .primaryKey(Collections.emptyList()) .aliasName(STREAM1);  final AirbyteCatalog expected = ConnectionHelpers.generateBasicApiCatalog(); expected.getStreams().get(0).getStream() .name(STREAM1) .defaultCursorField(List.of(FIELD3)) .jsonSchema(CatalogHelpers.fieldsToJsonSchema(Field.of(FIELD2, JsonSchemaType.STRING))) .supportedSyncModes(List.of(SyncMode.FULL_REFRESH, SyncMode.INCREMENTAL)); expected.getStreams().get(0).getConfig() .syncMode(SyncMode.FULL_REFRESH) .cursorField(Collections.emptyList()) .destinationSyncMode(DestinationSyncMode.OVERWRITE) .primaryKey(Collections.emptyList()) .aliasName(STREAM1) .selected(false) .suggested(false) .selectedFields(List.of());  final AirbyteCatalog actual = WebBackendConnectionsHandler.updateSchemaWithRefreshedDiscoveredCatalog(original, original, discovered);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testRequestHeaderV2() { short apiVersion = 2; RequestHeader header = new RequestHeader(ApiKeys.CREATE_DELEGATION_TOKEN, apiVersion, "", 10); assertEquals(2, header.headerVersion());  ByteBuffer buffer = RequestTestUtils.serializeRequestHeader(header); assertEquals(11, buffer.remaining()); RequestHeader deserialized = RequestHeader.parse(buffer); "<AssertPlaceHolder>"; }
[*] target: assertEquals(header, deserialized)
[-] pred: org. junit. Assert. assertEquals ( header, deserialized )
************************************
[+] input: testReplaceAtString() { assertOriginalObjectNotModified(JSON_NODE, () -> { final JsonNode expected = Jsons.clone(JSON_NODE); ((ArrayNode) expected.get(ONE)).set(1, REPLACEMENT_STRING);  final JsonNode actual = JsonPaths.replaceAtString(JSON_NODE, LIST_ONE_QUERY, REPLACEMENT_STRING); "<AssertPlaceHolder>"; }); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testLimit_ApiKeyLimitNegative() { Key key = new Key(); key.setRole("role"); key.setKey("key"); Config config = new Config(); Role role = new Role(); Limit limit = new Limit(); limit.setDay(-1); role.setLimits(Map.of("model", limit)); config.setRoles(Map.of("role", role)); ApiKeyData apiKeyData = new ApiKeyData(); apiKeyData.setOriginalKey(key); ProxyContext proxyContext = new ProxyContext(config, request, apiKeyData, null, "trace-id", "span-id"); Model model = new Model(); model.setName("model"); proxyContext.setDeployment(model);  Future<RateLimitResult> result = rateLimiter.limit(proxyContext);  "<AssertPlaceHolder>"; assertNotNull(result.result()); assertEquals(HttpStatus.FORBIDDEN, result.result().status());  }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: getArticles_AllValid_ReturnsArticles() { // given ArticleFacets facets = new ArticleFacets(1, 10); Article article = new Article(testUser1, "title", "bef", "content"); ArticleDetails articleDetails = ArticleDetails.unauthenticated(article, 0); List<ArticleDetails> expectedArticleDetailsList = List.of(articleDetails); when(articleRepository.findAll(facets)).thenReturn(List.of(article)); when(articleRepository.findArticleDetails(article)).thenReturn(articleDetails);  // when List<ArticleDetails> actualArticleDetailsList = sut.getArticles(facets);  // then "<AssertPlaceHolder>"; verify(articleRepository).findAll(facets); verify(articleRepository).findArticleDetails(article); }
[*] target: assertEquals(expectedArticleDetailsList, actualArticleDetailsList)
[-] pred: org. junit. Assert. assertEquals ( expectedArticleDetailsList, actualArticleDetailsList )
************************************
[+] input: should_equal() { IdTree idTree = new IdTree("111"); idTree.addNode("111", "222"); idTree.addNode("111", "333"); idTree.addNode("222", "444");  IdTree idTree2 = new IdTree("111"); idTree2.addNode("111", "222"); idTree2.addNode("111", "333"); idTree2.addNode("222", "444"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(idTree, idTree2)
[-] pred: org. junit. Assert. assertEquals ( idTree, idTree2 )
************************************
[+] input: testDeleteWithPermission() { userLoginIdentity(false, 10L); //        userLoginIdentity(true, 12L);  ActionResult actionResult = chartService.deleteWithPermission(3L); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(actionResult)
[-] pred: org. junit. Assert. assertNotNull ( actionResult )
************************************
[+] input: testStringPringWriterAppend() { StringBuilder sb = new StringBuilder(); try (var w = Internal.StringBuilderPrintWriter.of(sb)) { w.append("hello"); w.flush(); } String expected = "hello"; String actual = sb.toString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: existsById_givenNonExistingId_returnFalse() { boolean exists = userRepository.existsById(-1L); "<AssertPlaceHolder>"; }
[*] target: assertFalse(exists)
[-] pred: org. junit. Assert. assertFalse ( exists )
************************************
[+] input: FEEDBACK_SUMMARY_FIND_SERVICE_SUCCESS_TEST() {  Long surveyId = 1L; long expectedCount = 10L; when(surveyExistCheckPort.isExistSurveyBySurveyId(surveyId)).thenReturn(true); when(totalFeedbackCountPort.getTotalFeedbackCountBySurveyId(surveyId)).thenReturn(expectedCount);  long actualCount = feedbackSummaryFindService.getTotalFeedbackCount(surveyId);  "<AssertPlaceHolder>"; verify(totalFeedbackCountPort).getTotalFeedbackCountBySurveyId(surveyId); }
[*] target: assertEquals(expectedCount, actualCount)
[-] pred: org. junit. Assert. assertEquals ( expectedCount, actualCount )
************************************
[+] input: buildUndoSQL() { String sql = executor.buildUndoSQL().toLowerCase(); Assertions."<AssertPlaceHolder>"; Assertions.assertTrue(sql.contains("insert")); Assertions.assertTrue(sql.contains("id")); }
[*] target: assertNotNull(sql)
[-] pred: org. junit. Assert. assertNotNull ( sql )
************************************
[+] input: testInjectUnnestedNode() { final ObjectNode oauthParams = (ObjectNode) Jsons.jsonNode(generateOAuthParameters());  final ObjectNode actual = generateJsonConfig(); final ObjectNode expected = Jsons.clone(actual); expected.setAll(oauthParams);  MoreOAuthParameters.mergeJsons(actual, oauthParams);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: kill() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  final int jobId = 0;  // Act final ReturnT<String> retval = executorBiz.kill(new KillParam(jobId));  // Assert result Assertions."<AssertPlaceHolder>"; Assertions.assertNull(((ReturnT<String>) retval).getContent()); Assertions.assertEquals(200, retval.getCode()); Assertions.assertNull(retval.getMsg()); }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: testReadUnsignedInt() { ByteBuffer buffer = ByteBuffer.allocate(4); long writeValue = 133444; ByteUtils.writeUnsignedInt(buffer, writeValue); buffer.flip(); long readValue = ByteUtils.readUnsignedInt(buffer); "<AssertPlaceHolder>"; }
[*] target: assertEquals(writeValue, readValue)
[-] pred: org. junit. Assert. assertEquals ( writeValue, readValue )
************************************
[+] input: shouldParseSingleKeyValuePairString() { final Map<String, String> expectedSinglePairMap = new HashMap<>(); expectedSinglePairMap.put("foo", "bar"); final String singleValueString = "foo=bar"; final Map<String, String> parsedMap = SystemTestUtil.parseConfigs(singleValueString); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSinglePairMap, parsedMap)
[-] pred: org. junit. Assert. assertEquals ( expectedSinglePairMap, parsedMap )
************************************
[+] input: Exception { GroupMetadataManagerTestContext context = new GroupMetadataManagerTestContext.Builder() .build();  GroupMetadataValue.MemberMetadata memberMetadata = new GroupMetadataValue.MemberMetadata() .setMemberId("member-id") .setGroupInstanceId("group-instance-id") .setClientHost("client-host") .setClientId("client-id") .setAssignment(new byte[]{0}) .setSubscription(new byte[]{0, 1, 2}); GroupMetadataValue groupMetadataValue = new GroupMetadataValue() .setMembers(Collections.singletonList(memberMetadata)) .setProtocolType("consumer") .setProtocol("range") .setCurrentStateTimestamp(context.time.milliseconds());  context.replay(GroupMetadataManagerTestContext.newGroupMetadataRecord( "group-id", groupMetadataValue, MetadataVersion.latestTesting() )); ClassicGroup group = context.groupMetadataManager.getOrMaybeCreateClassicGroup("group-id", false); context.groupMetadataManager.prepareRebalance(group, "trigger rebalance");  context.verifyDescribeGroupsReturnsDeadGroup("group-id"); context.commit();  List<DescribeGroupsResponseData.DescribedGroup> expectedDescribedGroups = Collections.singletonList( new DescribeGroupsResponseData.DescribedGroup() .setGroupId("group-id") .setGroupState(PREPARING_REBALANCE.toString()) .setProtocolType(groupMetadataValue.protocolType()) .setProtocolData("") .setMembers(Collections.singletonList( new DescribeGroupsResponseData.DescribedGroupMember() .setMemberId(memberMetadata.memberId()) .setGroupInstanceId(memberMetadata.groupInstanceId()) .setClientId(memberMetadata.clientId()) .setClientHost(memberMetadata.clientHost()) .setMemberAssignment(memberMetadata.assignment()) )) );  List<DescribeGroupsResponseData.DescribedGroup> describedGroups = context.describeGroups(Collections.singletonList("group-id"));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDescribedGroups, describedGroups)
[-] pred: org. junit. Assert. assertEquals ( expectedDescribedGroups, describedGroups )
************************************
[+] input: testGetCurrentUser() { // set up a mock request context, details don't matter, just needed to make the // @RequestScope work on the SecurityAwareCurrentUserService ServerRequestContext.with(HttpRequest.GET("/"), () -> { try { final String authUserId = "testUser"; final User expectedUser = new User().withAuthUserId(authUserId);  when(securityService.username()).thenReturn(Optional.of(authUserId)); when(userPersistence.getUserByAuthId(authUserId)).thenReturn(Optional.of(expectedUser));  // First call - should fetch from userPersistence final User user1 = currentUserService.getCurrentUser(); Assertions.assertEquals(expectedUser, user1);  // Second call - should use cached user final User user2 = currentUserService.getCurrentUser(); Assertions."<AssertPlaceHolder>";  // Verify that getUserByAuthId is called only once verify(userPersistence, times(1)).getUserByAuthId(authUserId); } catch (final IOException e) { fail(e); } }); }
[*] target: assertEquals(expectedUser, user2)
[-] pred: org. junit. Assert. assertEquals ( expectedUser, user2 )
************************************
[+] input: signingFailed() { when(this.rpApi.startSignature(Mockito.any(StartSignatureRequest.class))).thenReturn(null); when(this.bankIDRelyingPartyConfig.getSigningRequirements()).thenReturn(new BankIDRequirements()); when(this.appConfig.getDomain()).thenReturn("localhost");  BankIDTransaction response = this.bankIDService.signing(CLIENT_IP, "Sign this data", null, null, null, "curl", "id-123");  "<AssertPlaceHolder>"; }
[*] target: assertNull(response)
[-] pred: org. junit. Assert. assertNull ( response )
************************************
[+] input: IOException { // Write a string to the file String content = "This is a test"; textHelper.writeStringToFile(content);  // Read the contents of the file and check if it matches the expected string BufferedReader reader = new BufferedReader(new FileReader(testFilePath)); String line = reader.readLine(); reader.close();  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(content, line)
[-] pred: org. junit. Assert. assertEquals ( content, line )
************************************
[+] input: remove() { assertEquals(3, m.size()); m.remove(66); assertEquals(3, m.size()); m.remove(3); "<AssertPlaceHolder>"; }
[*] target: assertEquals(2, m.size())
[-] pred: org. junit. Assert. assertEquals ( 2, m. size() )
************************************
[+] input: checkIfRoleNameExistsGlobalTest() { //        given BindingResult br = mock(BindingResult.class); GlobalRole role = new GlobalRole();  //        when Mockito.when(globalRoleRepository.findByName(anyString())) .thenReturn(role); Mockito.when(organizationRoleRepository.findByName(anyString())) .thenReturn(null);  boolean result = roleService.checkIfRoleNameAlreadyExists(ROLE_NAME, RoleService.ROLE_TYPE_GLOBAL, br);  //        then "<AssertPlaceHolder>"; verify(br, times(1)).rejectValue(anyString(), anyString()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: IOException { // Until https://github.com/airbytehq/airbyte/issues/7624 is solved, we need to handle nested oauth // parameters final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final Map<String, Object> oauthParameters = generateNestedOAuthParameters(); setupOAuthParamMocks(oauthParameters); final JsonNode actualConfig = oAuthConfigSupplier.maskSourceOAuthParameters(sourceDefinitionId, workspaceId, Jsons.clone(config), testConnectorSpecification); final JsonNode expectedConfig = getExpectedNode(MoreOAuthParameters.SECRET_MASK); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: IOException { final JSerialCommPort port = new JSerialCommPort("", 9600, 8, 1, SerialPort.NO_PARITY, new byte[] { (byte) 0xA5 }, FrameDefinition.create("SACLOODVV")); port.serialEvent(new SerialPortEvent(getPort(), SerialPort.LISTENING_EVENT_DATA_RECEIVED, new byte[] { 0x01, 0x02, 0x03, Integer.valueOf(0xA5).byteValue(), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x01, 0x02, 0x03, Integer.valueOf(0xA5).byteValue(), 0x0C, 0x0D, 0x02, 0x00, 0x00, (byte) 0xAA, (byte) 0xFF, 0x00, 0x00 }));  ByteBuffer frame = port.getNextFrame(); "<AssertPlaceHolder>"; assertArrayEquals(new byte[] { Integer.valueOf(0xA5).byteValue(), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A }, frame.array()); frame = port.getNextFrame(); assertNotNull(frame); assertArrayEquals(new byte[] { Integer.valueOf(0xA5).byteValue(), 0x0C, 0x0D, 0x02, 0x00, 0x00, (byte) 0xAA, (byte) 0xFF, 0x00, 0x00 }, frame.array()); }
[*] target: assertNotNull(frame)
[-] pred: org. junit. Assert. assertNotNull ( frame )
************************************
[+] input: validateWithData() { // Arrange SignRequest request = new SignRequest(); request.setUserVisibleData(TestUtils.generateString(200)); request.setUserNonVisibleData(TestUtils.generateString(200));  // Act boolean valid = request.validate();  // Assert "<AssertPlaceHolder>"; }
[*] target: assertTrue(valid)
[-] pred: org. junit. Assert. assertTrue ( valid )
************************************
[+] input: testRemoteLogSegmentMetadataTransform() { RemoteLogSegmentMetadataTransform metadataTransform = new RemoteLogSegmentMetadataTransform();  RemoteLogSegmentMetadata metadata = createRemoteLogSegmentMetadata(); ApiMessageAndVersion apiMessageAndVersion = metadataTransform.toApiMessageAndVersion(metadata); RemoteLogSegmentMetadata remoteLogSegmentMetadataFromRecord = metadataTransform .fromApiMessageAndVersion(apiMessageAndVersion);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(metadata, remoteLogSegmentMetadataFromRecord)
[-] pred: org. junit. Assert. assertEquals ( metadata, remoteLogSegmentMetadataFromRecord )
************************************
[+] input: IOException { // Until https://github.com/airbytehq/airbyte/issues/7624 is solved, we need to handle nested oauth // parameters final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final UUID sourceId = UUID.randomUUID(); final Map<String, Object> oauthParameters = generateNestedOAuthParameters(); setupOAuthParamMocks(oauthParameters); final JsonNode actualConfig = oAuthConfigSupplier.injectSourceOAuthParameters(sourceDefinitionId, sourceId, workspaceId, Jsons.clone(config)); final JsonNode expectedConfig = Jsons.jsonNode(Map.of( EXISTING_FIELD_NAME, EXISTING_FIELD_VALUE, CREDENTIALS, Map.of( API_SECRET, SECRET_TWO, AUTH_TYPE, OAUTH, API_CLIENT, ((Map<String, String>) oauthParameters.get(CREDENTIALS)).get(API_CLIENT)))); "<AssertPlaceHolder>"; assertTracking(workspaceId); }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: loadPrivateKey() { Ed25519PrivateKey ed25519PrivateKey = Ed25519Utils.loadPrivateKey(PRIVATE_KEY_BYTE); PeerId peerId = PeerId.fromPubKey(ed25519PrivateKey.publicKey());  "<AssertPlaceHolder>"; assertNotNull(ed25519PrivateKey.publicKey()); assertNotNull(peerId); assertEquals(PEER_ID, peerId.toBase58()); }
[*] target: assertNotNull(ed25519PrivateKey)
[-] pred: org. junit. Assert. assertNotNull ( ed25519PrivateKey )
************************************
[+] input: givenValidPhoneNumber_whenUserNotExistsByPhoneNumber_thenReturnFalse() {  // Given AysPhoneNumber mockPhoneNumber = new AysPhoneNumberBuilder() .withValidValues() .build();  // When Mockito.when(userRepository.existsByCountryCodeAndLineNumber(mockPhoneNumber.getCountryCode(), mockPhoneNumber.getLineNumber())) .thenReturn(false);  // Then boolean isUserExists = userAdapter.existsByPhoneNumber(mockPhoneNumber);  Assertions."<AssertPlaceHolder>";  // Verify Mockito.verify(userRepository, Mockito.times(1)) .existsByCountryCodeAndLineNumber(mockPhoneNumber.getCountryCode(), mockPhoneNumber.getLineNumber()); }
[*] target: assertFalse(isUserExists)
[-] pred: org. junit. Assert. assertFalse ( isUserExists )
************************************
[+] input: expectUnchangedNodeWhenAttackingOtherPlayerNodeBeforeCooldownIsOver() { //given Node node = new Node("abc", "456", "Home", 1, 100, new Coordinates(0, 0, 0), 0, Instant.now().getEpochSecond()); //when when(authentication.getName()).thenReturn(playerName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(nodeRepo.findById("abc")).thenReturn(Optional.of(node)); when(playerService.getPlayer(playerName)).thenReturn(playerunknown); when(nodeRepo.save(node)).thenReturn(node); Node actual = nodeService.edit("abc", ActionType.HACK); //then verify(nodeRepo).findById("abc"); verify(playerService).getPlayer(playerName); verify(nodeRepo).save(node); "<AssertPlaceHolder>"; }
[*] target: assertEquals(node, actual)
[-] pred: org. junit. Assert. assertEquals ( node, actual )
************************************
[+] input: IOException { final List<UserPermission> userPermissions = permissionPersistence.listUsersInOrganization(MockData.ORGANIZATION_ID_1); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(1, userPermissions.size())
[-] pred: org. junit. Assert. assertEquals ( 1, userPermissions. size ( ) )
************************************
[+] input: expectUnchangedNodeWhenNodeIsAbandonedAndHasNoOwner() { //given Node node = new Node("abc", null, "Home", 1, 100, new Coordinates(0, 0, 0), 0, 0); //when when(authentication.getName()).thenReturn(playerName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(nodeRepo.findById("abc")).thenReturn(Optional.of(node)); when(nodeRepo.save(node)).thenReturn(node); when(playerService.getPlayer(playerName)).thenReturn(playerunknown); Node actual = nodeService.edit("abc", ActionType.ABANDON); //then "<AssertPlaceHolder>"; verify(nodeRepo).findById("abc"); verify(playerService).getPlayer(playerName);  }
[*] target: assertEquals(node, actual)
[-] pred: org. junit. Assert. assertEquals ( node, actual )
************************************
[+] input: IOException { final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final JsonNode actualConfig = oAuthConfigSupplier.maskSourceOAuthParameters(sourceDefinitionId, workspaceId, Jsons.clone(config), testConnectorSpecification); "<AssertPlaceHolder>"; }
[*] target: assertEquals(config, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( config, actualConfig )
************************************
[+] input: testLimit_User_LimitFound() { Config config = new Config();  Role role1 = new Role(); Limit limit = new Limit(); limit.setDay(10000); limit.setMinute(100); role1.setLimits(Map.of("model", limit));  Role role2 = new Role(); limit = new Limit(); limit.setDay(20000); limit.setMinute(200); role2.setLimits(Map.of("model", limit));  config.getRoles().put("role1", role1); config.getRoles().put("role2", role2);  ApiKeyData apiKeyData = new ApiKeyData(); apiKeyData.setPerRequestKey("per-request-key"); apiKeyData.setExtractedClaims(new ExtractedClaims("sub", List.of("role1", "role2"), "user-hash", Map.of())); ProxyContext proxyContext = new ProxyContext(config, request, apiKeyData, null, "trace-id", "span-id"); Model model = new Model(); model.setName("model"); proxyContext.setDeployment(model);  when(vertx.executeBlocking(any(Callable.class), eq(false))).thenAnswer(invocation -> { Callable<?> callable = invocation.getArgument(0); return Future.succeededFuture(callable.call()); });  TokenUsage tokenUsage = new TokenUsage(); tokenUsage.setTotalTokens(150); proxyContext.setTokenUsage(tokenUsage);  Future<Void> increaseLimitFuture = rateLimiter.increase(proxyContext); assertNotNull(increaseLimitFuture); assertNull(increaseLimitFuture.cause());  Future<RateLimitResult> checkLimitFuture = rateLimiter.limit(proxyContext);  assertNotNull(checkLimitFuture); assertNotNull(checkLimitFuture.result()); assertEquals(HttpStatus.OK, checkLimitFuture.result().status());  increaseLimitFuture = rateLimiter.increase(proxyContext); assertNotNull(increaseLimitFuture); assertNull(increaseLimitFuture.cause());  checkLimitFuture = rateLimiter.limit(proxyContext);  "<AssertPlaceHolder>"; assertNotNull(checkLimitFuture.result()); assertEquals(HttpStatus.TOO_MANY_REQUESTS, checkLimitFuture.result().status());  }
[*] target: assertNotNull(checkLimitFuture)
[-] pred: org. junit. Assert. assertNotNull ( checkLimitFuture )
************************************
[+] input: testRequestToMap() { MockHttpServletRequest request = new MockHttpServletRequest(); request.setParameter("trade_status", "TRADE_SUCCESS"); request.setParameter("type", "ALIPAY"); Map<String, String> requestToMap = HttpUtil.requestToMap(request); Map<String, String> map = new HashMap<>(); map.put("trade_status", "TRADE_SUCCESS"); map.put("type", "ALIPAY"); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(map, requestToMap)
[-] pred: org. junit. Assert. assertEquals ( map, requestToMap )
************************************
[+] input: NoSuchAlgorithmException { AccessTokenValidator validator = new AccessTokenValidator(idpConfig, vertx, client); IdentityProvider provider1 = mock(IdentityProvider.class); when(provider1.match(any(DecodedJWT.class))).thenReturn(false); IdentityProvider provider2 = mock(IdentityProvider.class); when(provider2.match(any(DecodedJWT.class))).thenReturn(true); when(provider2.extractClaimsFromJwt(any(DecodedJWT.class))).thenReturn(Future.succeededFuture(new ExtractedClaims("sub", Collections.emptyList(), "hash", Map.of()))); List<IdentityProvider> providerList = List.of(provider1, provider2); validator.setProviders(providerList); KeyPair keyPair = generateRsa256Pair(); Algorithm algorithm = Algorithm.RSA256((RSAPublicKey) keyPair.getPublic(), (RSAPrivateKey) keyPair.getPrivate()); String token = JWT.create().withClaim("iss", "issuer2").sign(algorithm); Future<ExtractedClaims> future = validator.extractClaims(getBearerHeaderValue(token)); "<AssertPlaceHolder>"; future.onComplete(res -> { assertTrue(res.succeeded()); ExtractedClaims claims = res.result(); assertNotNull(claims); assertEquals("sub", claims.sub()); assertEquals(Collections.emptyList(), claims.userRoles()); assertEquals("hash", claims.userHash()); }); }
[*] target: assertNotNull(future)
[-] pred: org. junit. Assert. assertNotNull ( future )
************************************
[+] input: generateSignVerify() { Schnorrkel.KeyPair keyPair = Sr25519Utils.generateKeyPair();  byte[] signed = Sr25519Utils.signMessage(keyPair.getPublicKey(), keyPair.getSecretKey(), hashedMessage);  VerifySignature signature = new VerifySignature(signed, hashedMessage, keyPair.getPublicKey(), Key.ED25519); boolean verified = Sr25519Utils.verifySignature(signature);  "<AssertPlaceHolder>"; }
[*] target: assertTrue(verified)
[-] pred: org. junit. Assert. assertTrue ( verified )
************************************
[+] input: testFormatTemplateWithValidTemplate() { String template = "Hello, {name}! Today is {day}."; Map<String, Object> kwargs = Map.of( "name", "John", "day", "Monday");  String expected = "Hello, John! Today is Monday."; String actual = formatTemplate(template, kwargs);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testButtonOrderConsistent() { boolean okBeforeCancel1 = SystemInfo.putOKBeforeCancel(); boolean okBeforeCancel2 = SystemInfo.putOKBeforeCancel(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(okBeforeCancel1, okBeforeCancel2)
[-] pred: org. junit. Assert. assertEquals ( okBeforeCancel1, okBeforeCancel2 )
************************************
[+] input: shouldGenerateOrderedJsonSchemaWhenClassHasJsonPropertyOrderAnnotation() { var actualJsonSchema = schemaConverter.convert(OrderedTestClass.class).toString(); var expectedJsonSchema = "{"type":"object","properties":{"first":{"type":"string","myCustomProperty":true},"second":{"type":"integer","myCustomProperty":true},"third":{"type":"string","myCustomProperty":true}},"required":["first"],"myCustomProperty":true}"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonSchema, actualJsonSchema)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonSchema, actualJsonSchema )
************************************
[+] input: givenValidBookCreateRequest_whenBookCreated_returnBook() {  // Given BookCreateRequest mockCreateRequest = BookCreateRequest.builder() .name("Name") .authorFullName("Author Full Name") .isbn("1234567890") .stock(123) .price(BigDecimal.TEN) .build();  Book mockBook = new BookBuilder().withValidFields().build();  BookDTO mockBookDTO = BookMapper.toDTO(mockBook);  // When when(bookRepository.save(any(Book.class))).thenReturn(mockBook);  // Then BookDTO response = bookService.createBook(mockCreateRequest);  "<AssertPlaceHolder>";  verify(bookRepository, times(1)).save(any(Book.class)); }
[*] target: assertEquals(mockBookDTO, response)
[-] pred: org. junit. Assert. assertEquals ( mockBookDTO, response )
************************************
[+] input: testGetLoadPathExc() { boolean exceptionThrown = false; try { persistency.getLoadPath(FileType.PROFILE_TEXT); } catch (IllegalArgumentException e) { exceptionThrown = true; } "<AssertPlaceHolder>"; }
[*] target: assertTrue(exceptionThrown)
[-] pred: org. junit. Assert. assertTrue ( exceptionThrown )
************************************
[+] input: JsonProcessingException { String expected = "{"endUserIp":"1.2.3.4"," + ""returnRisk":true," + ""web":{" + ""referringDomain":"localhost"," + ""userAgent":"agent"," + ""deviceIdentifier":"did"" + "}}";  StartAuthenticationRequest request = new StartAuthenticationRequest("1.2.3.4"); AdditionalWebData webData = new AdditionalWebData("localhost", "agent", "did"); request.setWeb(webData);  ObjectMapper mapper = new ObjectMapper(); String json = mapper.writeValueAsString(request);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, json)
[-] pred: org. junit. Assert. assertEquals ( expected, json )
************************************
[+] input: run() { ExecutorBiz executorBiz = new ExecutorBizClient(addressUrl, accessToken);  // trigger data final TriggerParam triggerParam = new TriggerParam(); triggerParam.setJobId(1); triggerParam.setExecutorHandler("demoJobHandler"); triggerParam.setExecutorParams(null); triggerParam.setExecutorBlockStrategy(ExecutorBlockStrategyEnum.COVER_EARLY.name()); triggerParam.setGlueType(GlueTypeEnum.BEAN.name()); triggerParam.setGlueSource(null); triggerParam.setGlueUpdatetime(System.currentTimeMillis()); triggerParam.setLogId(1); triggerParam.setLogDateTime(System.currentTimeMillis());  // Act final ReturnT<String> retval = executorBiz.run(triggerParam);  // Assert result Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(retval)
[-] pred: org. junit. Assert. assertNotNull ( retval )
************************************
[+] input: doFullBackup_badParam() { //        given ScheduledSchedulerDto consumerParam = new ScheduledSchedulerDto("", "badParamWhichIsNotEqualBackup", -1L,false, LocalDateTime.now());  //        when boolean result = backupService.doFullBackup(consumerParam);  //        then "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: testCourseCategoryWhenSuccess() { List<CourseCategoryTreeDto> childrenNodes = courseCategoryService.queryTreeNodes("1"); Assertions."<AssertPlaceHolder>"; }
[*] target: assertNotNull(childrenNodes)
[-] pred: org. junit. Assert. assertNotNull ( childrenNodes )
************************************
[+] input: testMultiplePartitions() { List<InternalPartitionField> partitionFieldList = Arrays.asList( InternalPartitionField.builder() .sourceField( InternalField.builder() .name("timestamp_hour") .schema(InternalSchema.builder().dataType(InternalType.TIMESTAMP).build()) .build()) .transformType(PartitionTransformType.HOUR) .build(), InternalPartitionField.builder() .sourceField( InternalField.builder() .name("string_field") .schema(InternalSchema.builder().dataType(InternalType.STRING).build()) .build()) .transformType(PartitionTransformType.VALUE) .build()); PartitionSpec actual = IcebergPartitionSpecExtractor.getInstance().toIceberg(partitionFieldList, TEST_SCHEMA); PartitionSpec expected = PartitionSpec.builderFor(TEST_SCHEMA) .hour("timestamp_hour") .identity("string_field") .build(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCreatePythonPathFromListOfPaths() { List<String> subdirectories = Lists.newArrayList("source-connector", "destination-connector"); String pythonpath = ApplicationBeanFactory.createPythonPathFromListOfPaths(ROOT_PATH, subdirectories);  String expectedPythonPath = "/path/to/root/source-connector:/path/to/root/destination-connector";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPythonPath, pythonpath)
[-] pred: org. junit. Assert. assertEquals ( expectedPythonPath, pythonpath )
************************************
[+] input: testCreateTransaction() { String outTradeNo = "TestTradeNo";  OrderDTO mockOrder = new OrderDTO(); mockOrder.setOrderId("TestTradeNo"); mockOrder.setCommodityName("Test Subject"); mockOrder.setTotalAmount(100L); mockOrder.setPaymentForm("");  when(orderOtsHelper.getOrder(outTradeNo, null)).thenReturn(mockOrder); String expectedTransaction = "ExpectedTransactionForm"; when(baseAlipayClient.createOutTrade(mockOrder)).thenReturn(expectedTransaction);  String result = alipayService.createTransaction(mockOrder);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedTransaction, result)
[-] pred: org. junit. Assert. assertEquals ( expectedTransaction, result )
************************************
[+] input: shouldFindUrlByShortUrl() { //given String shortUrl = "abc123"; //when Optional<Url> optionalActual = this.urlRepository.findByShortUrl("abc123"); String actual = optionalActual.get().getOriginalUrl(); //then String expected = "https://www.linkedin.com/in/cami-la/"; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: InterruptedException { Timer timer = getTimer("a.timer"); for (int i = 0; i < 100; i++) { Timer.Context context = timer.time(); try { // no ops } finally { context.stop(); } } long v = metricsSystem .getMetricRegistry() .timer(TEST_METRICS_SOURCE + ".a.timer") .getSnapshot() .size(); // it's hard to check timer values, we just check the num Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(100, v)
[-] pred: org. junit. Assert. assertEquals ( 100, v )
************************************
[+] input: Exception { var out = Objects.requireNonNull(System.out); int count = 20; CountDownLatch latch = new CountDownLatch(count); ListLogOutput output = new ListLogOutput(); output.setConsumer((event, body) -> { latch.countDown(); }); var gum = RainbowGum.builder().route(b -> { b.appender("console", a -> { a.output(LogOutput.ofStandardOut()); a.encoder(LogFormatter.builder().message().newline().encoder()); }); /* * This has to be the second one so that it happens after the console output. */ b.appender("list", a -> { a.output(output); a.encoder(LogFormatter.builder().message().newline().encoder()); }); b.publisher(PublisherFactory.ofAsync(100)); }).build(); try (var g = gum.start()) { for (int i = 0; i < count; i++) { TestEventBuilder.of().to(gum).event().message("" + i).log(); } latch.await(); out.println("done"); var responses = g.config().publisherRegistry().status(); String actual = """ [Response[type=interface io.jstach.rainbowgum.LogPublisher, name=default, status=QueueStatus[count=0, max=100, level=INFO]]] """ .trim(); String expected = responses.toString(); "<AssertPlaceHolder>"; } List<String> lines = output.events().stream().map(e -> e.getValue().trim()).toList(); int i = 0; for (var line : lines) { String actual = line; String expected = "" + i; assertEquals(expected, actual); i++; }  }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testReplaceAtJsonNodeLoud() { assertOriginalObjectNotModified(JSON_NODE, () -> { final JsonNode expected = Jsons.clone(JSON_NODE); ((ArrayNode) expected.get(ONE)).set(1, REPLACEMENT_JSON);  final JsonNode actual = JsonPaths.replaceAtJsonNodeLoud(JSON_NODE, LIST_ONE_QUERY, REPLACEMENT_JSON); "<AssertPlaceHolder>"; }); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testFindNearest_whenExistingPointIsProvided_returnsZeroDistance() { KDTreeNearestNeighbor<String, Object> nearestNeighbor = this.kdTree.findNearest( new Builder() .latitude(25.2012544) .longitude(55.2569389) .build(), 2);  Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(nearestNeighbor.getDistance()); Assertions.assertEquals(0.0, nearestNeighbor.getDistance()); Assertions.assertNotNull(nearestNeighbor.getKdTreeObject()); Assertions.assertEquals("7", nearestNeighbor.getKdTreeObject().getId()); }
[*] target: assertNotNull(nearestNeighbor)
[-] pred: org. junit. Assert. assertNotNull ( nearestNeighbor )
************************************
[+] input: expectListWithoutNodeWhenNodeIsDeleted() { //given Node node1 = new Node("def", "456", "Office", 2, 100, new Coordinates(0, 0, 0), 0, 0); List<Node> expected = List.of(node1); //when when(authentication.getName()).thenReturn(adminName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(mongoUserService.getUserByUsername(adminName)).thenReturn(admin); when(playerService.getPlayer(adminName)).thenReturn(adminPlayer); when(nodeRepo.findAll()).thenReturn(List.of(node1)); nodeService.delete("abc"); List<Node> actual = nodeService.list(); //then "<AssertPlaceHolder>"; verify(nodeRepo).deleteById("abc"); verify(nodeRepo).findAll(); verify(mongoUserService).getUserByUsername(adminName); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testPageQuery() { //        userLoginIdentity(true,5L); userLoginIdentity(false, 2L);   DataSourceAccessPageQueryParam queryParam = new DataSourceAccessPageQueryParam(); queryParam.setDataSourceId(TestUtils.nextLong()); //        queryParam.setAccessObjectType("TEAM"); queryParam.setAccessObjectType("USER"); queryParam.setAccessObjectId(TestUtils.nextLong()); queryParam.setPageNo(3); queryParam.setPageSize(5);  // Returns false by default queryParam.setEnableReturnCount(true);   DataSourceAccessSelector accessSelector = new DataSourceAccessSelector(); accessSelector.setAccessObject(true); accessSelector.setDataSource(true); accessSelector.setDataSourceSelector(new DataSourceSelector(true));  PageResult<DataSourceAccess> result = dataSourceAccessService.pageQuery(queryParam, accessSelector); "<AssertPlaceHolder>";  }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: testListGeographiesCloud() { final WebBackendGeographiesListResult expected = new WebBackendGeographiesListResult().geographies( List.of(Geography.AUTO, Geography.US, Geography.EU));  final WebBackendGeographiesListResult actual = webBackendGeographiesHandler.listGeographiesCloud();  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testCreate() { AbstractKusciaServingManager servingManager = new AbstractKusciaServingManager() { @Override public Serving.CreateServingResponse create(Serving.CreateServingRequest request) { return super.create(request); } }; servingManager.setKusciaGrpcClientAdapter(kusciaGrpcClientAdapter); servingManager.setApplicationEventPublisher(applicationEventPublisher); Serving.CreateServingRequest request = Serving.CreateServingRequest.newBuilder() .setServingId("serving1") .build(); Serving.CreateServingResponse response = Serving.CreateServingResponse.newBuilder() .setStatus(Common.Status.newBuilder().setCode(0)) .build(); when(kusciaGrpcClientAdapter.createServing(request)).thenReturn(response); Serving.CreateServingResponse result = servingManager.create(request); "<AssertPlaceHolder>"; verify(applicationEventPublisher).publishEvent(any(AbstractKusciaServingManager.KusciaServingEvent.class)); }
[*] target: assertEquals(response, result)
[-] pred: org. junit. Assert. assertEquals ( response, result )
************************************
[+] input: testPrepareSendFrameChecksum() {  // GIVEN // - the expected output frame bytes for command 0x85 final byte[] frameBytes = new byte[] { (byte) 0x4E, (byte) 0x57, (byte) 0x00, (byte) 0x13, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x68, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x29 };  // WHEN // - preparing a send frame for command 0x85 final ByteBuffer sendFrame = processor.prepareSendFrame();  // THEN // - the created send frame bytes should match Assertions."<AssertPlaceHolder>"; }
[*] target: assertArrayEquals(frameBytes, sendFrame.array())
[-] pred: org. junit. Assert. assertArrayEquals ( frameBytes, sendFrame. array ( ) )
************************************
[+] input: reflectedRowNumIsBiggerThanZeroThenReturnTrue() { // given given(userMapper.updateProfileImage(anyLong(), anyString())) .willReturn(1);  // when boolean isSuccess = userService.updateProfileImage(1L, "https://profileImgUrlToUpload.com");  // then "<AssertPlaceHolder>"; }
[*] target: assertTrue(isSuccess)
[-] pred: org. junit. Assert. assertTrue ( isSuccess )
************************************
[+] input: JsonProcessingException { doCallRealMethod().when(context).setStreamingRequest(anyBoolean()); when(context.isStreamingRequest()).thenCallRealMethod();  Throwable error = fn.apply((ObjectNode) ProxyUtil.MAPPER.readTree("{}"));  "<AssertPlaceHolder>"; assertFalse(context.isStreamingRequest()); }
[*] target: assertNull(error)
[-] pred: org. junit. Assert. assertNull ( error )
************************************
[+] input: parseJsonToChainSpec() { String pathToPolkadotTestJSON = "./src/test/resources/short_polkadot.json"; try { ChainSpec chainSpec = ChainSpec.newFromJSON(pathToPolkadotTestJSON); String actualName = chainSpec.getName(); String expectedName = "Polkadot"; "<AssertPlaceHolder>";  String actualId = chainSpec.getId(); String expectedId = "polkadot"; assertEquals(expectedId, actualId);  ChainType actualChainType = chainSpec.getChainType(); ChainType expectedChainType = ChainType.LIVE; assertEquals(expectedChainType, actualChainType);  String actualProtocolId = chainSpec.getProtocolId(); String expectedProtocolId = "dot"; assertEquals(expectedProtocolId, actualProtocolId);  String[] actualForkBlocks = chainSpec.getForkBlocks(); assertNull(actualForkBlocks);  String[] actualBadBlocks = chainSpec.getBadBlocks(); assertNull(actualBadBlocks);  String actualConsensusEngine = chainSpec.getConsensusEngine(); assertNull(actualConsensusEngine);  String[] actualBootNodes = chainSpec.getBootNodes(); String[] expectedBootNodes = new String[]{ "/dns/polkadot-connect-0.parity.io/tcp/443/wss/p2p/12D3KooWEPmjoRpDSUuiTjvyNDd8fejZ9eNWH5bE965nyBMDrB4o", "/dns/cc1-1.parity.tech/tcp/30333/p2p/12D3KooWFN2mhgpkJsDBuNuE5427AcDrsib8EoqGMZmkxWwx3Md4"}; assertArrayEquals(expectedBootNodes, actualBootNodes);  TelemetryEndpoint[] actualTelemetryEndpoints = chainSpec.getTelemetryEndpoints(); TelemetryEndpoint[] expectedTelemetryEndpoints = new TelemetryEndpoint[] { new TelemetryEndpoint("wss://telemetry.polkadot.io/submit/", 0) }; assertArrayEquals(expectedTelemetryEndpoints, actualTelemetryEndpoints);  Map<ByteString, ByteString> actualTopValue = chainSpec.getGenesis().getTop(); Map<String, String> expectedRawTopValue = new LinkedHashMap(); expectedRawTopValue.put("0x9c5d795d0297be56027a4b2464e3339763e6d3c1fb15805edfd024172ea4817d9e40ca7bd1fd588ca534ee6b96a65ca8a53ec232dda838cc3cd2bd1887904906", "0x11bc2c7ea454e083cea1186239abc83733200e78"); expectedRawTopValue.put("0x9c5d795d0297be56027a4b2464e333979c5d795d0297be56027a4b2464e33397eb0718ce75762eeba4570943d5b2de2afb9085b6", "0x000e760ff72301000000000000000000");  Function<String, ByteString> parser = hex -> ByteString.fromHex(StringUtils.remove0xPrefix(hex));  Map<ByteString, ByteString> expectedTopValue = expectedRawTopValue.entrySet().stream().collect(Collectors.toMap( e -> parser.apply(e.getKey()), e -> parser.apply(e.getValue()) ));  assertEquals(expectedTopValue, actualTopValue);  Map<String, PropertyValue> actualProperties = chainSpec.getProperties();  ObjectMapper mapper = new ObjectMapper(); Map<String, JsonNode> expectedProperties = new LinkedHashMap<>(); expectedProperties.put("ss58Format", mapper.valueToTree(0)); expectedProperties.put("tokenDecimals", mapper.valueToTree(10)); expectedProperties.put("tokenSymbol", mapper.valueToTree("DOT"));  assertEquals(expectedProperties, actualProperties); } catch (IOException e) { log.log(Level.SEVERE, "Error loading chain spec from json", e); fail(); } }
[*] target: assertEquals(expectedName, actualName)
[-] pred: org. junit. Assert. assertEquals ( expectedName, actualName )
************************************
[+] input: testNode1Child() { MetadataNode child = NODE.child("2"); "<AssertPlaceHolder>"; assertEquals("ControllerRegistration(id=2, " + "incarnationId=adGo6sTPS0uJshjvdTUmqQ, " + "zkMigrationReady=false, " + "listeners=[], " + "supportedFeatures={metadata.version: 1-4})", child.stringify()); }
[*] target: assertNotNull(child)
[-] pred: org. junit. Assert. assertNotNull ( child )
************************************
[+] input: testFromApiResponse() { // Arrange ApiResponse<?> response = mock(ApiResponse.class); Map<String, List<String>> headers = new HashMap<>(); headers.put("openfga-authorization-model-id", Collections.singletonList("model-id-value")); when(response.getHeaders()).thenReturn(headers); when(response.getStatusCode()).thenReturn(200);  Credentials credentials = mock(Credentials.class); ClientCredentials clientCredentials = mock(ClientCredentials.class); when(credentials.getCredentialsMethod()).thenReturn(CredentialsMethod.CLIENT_CREDENTIALS); when(credentials.getClientCredentials()).thenReturn(clientCredentials); when(clientCredentials.getClientId()).thenReturn("client-id-value");  // Act Map<Attribute, String> result = Attributes.fromApiResponse(response, credentials);  // Assert Map<Attribute, String> expected = new HashMap<>(); expected.put(Attributes.HTTP_RESPONSE_STATUS_CODE, "200"); expected.put(Attributes.FGA_CLIENT_RESPONSE_MODEL_ID, "model-id-value"); expected.put(Attributes.FGA_CLIENT_REQUEST_CLIENT_ID, "client-id-value");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: GetInstance_returns_sameReference() { PubSubService reference1 = PubSubService.getInstance(); PubSubService reference2 = PubSubService.getInstance();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(reference1, reference2)
[-] pred: org. junit. Assert. assertEquals ( reference1, reference2 )
************************************
[+] input: testExtractClaims_03() { AccessTokenValidator validator = new AccessTokenValidator(idpConfig, vertx, client); Future<ExtractedClaims> future = validator.extractClaims("bearer bad-token"); "<AssertPlaceHolder>"; future.onComplete(res -> { assertTrue(res.failed()); assertNotNull(res.cause()); }); }
[*] target: assertNotNull(future)
[-] pred: org. junit. Assert. assertNotNull ( future )
************************************
[+] input: toRst() { final ConfigDef def = new ConfigDef() .define("opt1", Type.STRING, "a", ValidString.in("a", "b", "c"), Importance.HIGH, "docs1") .define("opt2", Type.INT, Importance.MEDIUM, "docs2") .define("opt3", Type.LIST, Arrays.asList("a", "b"), Importance.LOW, "docs3") .define("opt4", Type.BOOLEAN, false, Importance.LOW, null);  final String expectedRst = "" + "``opt2``\n" + "  docs2\n" + "\n" + "  * Type: int\n" + "  * Importance: medium\n" + "\n" + "``opt1``\n" + "  docs1\n" + "\n" + "  * Type: string\n" + "  * Default: a\n" + "  * Valid Values: [a, b, c]\n" + "  * Importance: high\n" + "\n" + "``opt3``\n" + "  docs3\n" + "\n" + "  * Type: list\n" + "  * Default: a,b\n" + "  * Importance: low\n" + "\n" + "``opt4``\n" + "\n" + "  * Type: boolean\n" + "  * Default: false\n" + "  * Importance: low\n" + "\n";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRst, def.toRst())
[-] pred: org. junit. Assert. assertEquals ( expectedRst, def. toRst ( ) )
************************************
[+] input: getById_shouldReturnCustomerById() { // Given Customer customer = new Customer(); customer.setId(1L);  when(customerRepository.findById(anyLong())).thenReturn(java.util.Optional.of(customer));  // When Customer result = serviceTest.getById(1L);  // Then verify(customerRepository).findById(1L); "<AssertPlaceHolder>"; }
[*] target: assertEquals(customer, result)
[-] pred: org. junit. Assert. assertEquals ( customer, result )
************************************
[+] input: JsonProcessingException { doCallRealMethod().when(context).setStreamingRequest(anyBoolean()); when(context.isStreamingRequest()).thenCallRealMethod();  Throwable error = fn.apply((ObjectNode) ProxyUtil.MAPPER.readTree("{"stream": false}"));  "<AssertPlaceHolder>"; assertFalse(context.isStreamingRequest()); }
[*] target: assertNull(error)
[-] pred: org. junit. Assert. assertNull ( error )
************************************
[+] input: IllegalAccessException { final ActivityOptions activityOptions = ActivityOptions.newBuilder() .setHeartbeatTimeout(Duration.ofSeconds(30)) .setStartToCloseTimeout(Duration.ofSeconds(120)) .setRetryOptions(RetryOptions.newBuilder() .setMaximumAttempts(5) .setInitialInterval(Duration.ofSeconds(30)) .setMaximumInterval(Duration.ofSeconds(600)) .build()) .build();  final BeanIdentifier activityOptionsBeanIdentifier = mock(BeanIdentifier.class); final BeanRegistration activityOptionsBeanRegistration = mock(BeanRegistration.class); when(activityOptionsBeanIdentifier.getName()).thenReturn("activityOptions"); when(activityOptionsBeanRegistration.getIdentifier()).thenReturn(activityOptionsBeanIdentifier); when(activityOptionsBeanRegistration.getBean()).thenReturn(activityOptions);  final TemporalProxyHelper temporalProxyHelper = new TemporalProxyHelper(List.of(activityOptionsBeanRegistration)); temporalProxyHelper.setActivityStubGenerator((c, a) -> mock(c));  final Class<ValidTestWorkflowImpl> proxy = temporalProxyHelper.proxyWorkflowClass(ValidTestWorkflowImpl.class);  "<AssertPlaceHolder>";  final ValidTestWorkflowImpl proxyImplementation = proxy.getDeclaredConstructor().newInstance(); proxyImplementation.run(); Assertions.assertTrue(proxyImplementation.isHasRun()); }
[*] target: assertNotNull(proxy)
[-] pred: org. junit. Assert. assertNotNull ( proxy )
************************************
[+] input: testCloseClearsData() { // We don't use the try-with-resources approach because we want to have access to the FetchBuffer after // the try block so that we can run our asserts on the object. FetchBuffer fetchBuffer = null;  try { fetchBuffer = new FetchBuffer(logContext); assertNull(fetchBuffer.nextInLineFetch()); assertTrue(fetchBuffer.isEmpty());  fetchBuffer.add(completedFetch(topicAPartition0)); assertFalse(fetchBuffer.isEmpty());  fetchBuffer.setNextInLineFetch(completedFetch(topicAPartition0)); assertNotNull(fetchBuffer.nextInLineFetch()); } finally { if (fetchBuffer != null) fetchBuffer.close(); }  assertNull(fetchBuffer.nextInLineFetch()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(fetchBuffer.isEmpty())
[-] pred: org. junit. Assert. assertTrue ( fetchBuffer. isEmpty ( ) )
************************************
[+] input: givenValidUserClaims_whenTokensGenerated_thenReturnAysToken() { // Given AysUser mockUser = new AysUserBuilder() .withValidValues() .build(); Claims mockUserClaims = mockUser.getClaims();  // When Mockito.when(tokenConfiguration.getIssuer()).thenReturn(MOCK_ISSUER); Mockito.when(tokenConfiguration.getAccessTokenExpireMinute()).thenReturn(MOCK_ACCESS_TOKEN_EXPIRE_MINUTE); Mockito.when(tokenConfiguration.getRefreshTokenExpireDay()).thenReturn(MOCK_REFRESH_TOKEN_EXPIRE_DAY); Mockito.when(tokenConfiguration.getPrivateKey()).thenReturn(MOCK_PRIVATE_KEY);  // Then AysToken aysToken = tokenService.generate(mockUserClaims);  Assertions."<AssertPlaceHolder>"; Assertions.assertNotNull(aysToken.getAccessToken()); Assertions.assertNotNull(aysToken.getAccessTokenExpiresAt()); Assertions.assertNotNull(aysToken.getRefreshToken());  // Verify Mockito.verify(tokenConfiguration, Mockito.times(1)).getIssuer(); Mockito.verify(tokenConfiguration, Mockito.times(1)).getAccessTokenExpireMinute(); Mockito.verify(tokenConfiguration, Mockito.times(1)).getRefreshTokenExpireDay(); Mockito.verify(tokenConfiguration, Mockito.times(1)).getPrivateKey(); Mockito.verify(tokenConfiguration, Mockito.times(0)).getPublicKey(); Mockito.verifyNoMoreInteractions(tokenConfiguration); }
[*] target: assertNotNull(aysToken)
[-] pred: org. junit. Assert. assertNotNull ( aysToken )
************************************
[+] input: testGetAuthToken() { GetAuthTokenParam getAuthTokenParam = createGetAuthTokenParam(); BaseResult<AuthTokenModel> expectedResult = new BaseResult<>("200","OK", new AuthTokenModel("idToken", "refreshToken", "expiresIn"),"aaa"); BaseResult<AuthTokenModel> result1 = new BaseResult<>(new AuthTokenModel("idToken", "refreshToken", "expiresIn")); GetAuthTokenParam getAuthTokenParam1 = createGetAuthTokenParam(); when(mockLoginService.getAuthToken(getAuthTokenParam1)).thenReturn(result1); BaseResult<AuthTokenModel> result = userControllerUnderTest.getAuthToken(getAuthTokenParam); result.setRequestId("aaa"); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, result )
************************************
[+] input: testCreateDatabase() { for (DialectProperties dialectProperties : dialectPropertiesList) { Long dataSourceId = TestUtils.nextLong(); Long consoleId = TestUtils.nextLong(); TestUtils.buildContext(dialectProperties, dataSourceId, consoleId);  Database database = new Database(); DataResult<Sql> database1 = databaseService.createDatabase(database); "<AssertPlaceHolder>"; } }
[*] target: assertNotNull(database1)
[-] pred: org. junit. Assert. assertNotNull ( database1 )
************************************
[+] input: testBlockTreeAddBlock() { Pair<BlockTree, List<Hash256>> result = createFlatTree(1); BlockTree bt = result.getValue0(); List<Hash256> hashes = result.getValue1();  BlockHeader header = createHeader(hashes.get(1), 2); Hash256 hash = header.getHash(); bt.addBlock(header, Instant.ofEpochSecond(0));  BlockNode blockNode = bt.getNode(hash); BlockNode leafBlockNode = bt.getLeaves().load(blockNode.getHash());  "<AssertPlaceHolder>";  Hash256 oldHash = getHash("01"); leafBlockNode = bt.getLeaves().load(oldHash); assertNull(leafBlockNode); }
[*] target: assertNotNull(leafBlockNode)
[-] pred: org. junit. Assert. assertNotNull ( leafBlockNode )
************************************
[+] input: testGetCompileTransitiveDependenciesJettyFullArtifactExclusion() { var resolver = new DependencyResolver(VersionResolution.dummy(), ArtifactRetriever.instance(), List.of(MAVEN_CENTRAL, SONATYPE_SNAPSHOTS), new Dependency("org.eclipse.jetty", "jetty-server", new VersionNumber(11, 0, 14)) .exclude("*", "jetty-http") .exclude("*", "slf4j-api")); var dependencies = resolver.getAllDependencies(compile); "<AssertPlaceHolder>"; assertEquals(4, dependencies.size()); assertEquals(""" org.eclipse.jetty:jetty-server:11.0.14 org.eclipse.jetty.toolchain:jetty-jakarta-servlet-api:5.0.2 org.eclipse.jetty:jetty-io:11.0.14 org.eclipse.jetty:jetty-util:11.0.14""", StringUtils.join(dependencies, "\n")); }
[*] target: assertNotNull(dependencies)
[-] pred: org. junit. Assert. assertNotNull ( dependencies )
************************************
[+] input: Exception { String responseJson = getAmsterdamWeatherJson(); WeatherResponse response = objectMapper.readValue(responseJson, WeatherResponse.class); WeatherEntity oldEntity = new WeatherEntity("id", requestedCity, "Amsterdam", "Netherlands", 2, LocalDateTime.parse("2023-03-05 12:35",formatter), LocalDateTime.parse(response.location().localtime(), formatter));  WeatherEntity toSaveEntity = getToSavdWeatherEntity(response.location().localtime()); WeatherEntity savedEntity = getSavedWeatherEntity(response.location().localtime());  WeatherDto expected = new WeatherDto(savedEntity.getCityName(), savedEntity.getCountry(), savedEntity.getTemperature(), savedEntity.getUpdatedTime());  when(weatherRepository.findFirstByRequestedCityNameOrderByUpdatedTimeDesc(requestedCity)).thenReturn(Optional.of(oldEntity)); when(restTemplate.getForEntity(WEATHER_STACK_API_URL+requestedCity, String.class)).thenReturn(ResponseEntity.ok(responseJson)); when(weatherRepository.save(toSaveEntity)).thenReturn(savedEntity);  WeatherDto result = weatherService.getWeather(requestedCity);  "<AssertPlaceHolder>";  verify(restTemplate).getForEntity(WEATHER_STACK_API_URL+requestedCity, String.class); verify(weatherRepository).save(toSaveEntity); }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testListAllSpecifications() { ListCommoditySpecificationParam param = new ListCommoditySpecificationParam(); ListResult<CommoditySpecificationDTO> expectedResponse = ListResult.genSuccessListResult(Arrays.asList(new CommoditySpecificationDTO()), 1);  when(commoditySpecificationService.listAllSpecifications(any(UserInfoModel.class), any(ListCommoditySpecificationParam.class))) .thenReturn(expectedResponse);  ListResult<CommoditySpecificationDTO> result = commoditySpecificationController.listAllSpecifications(userInfo, param);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResponse, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, result )
************************************
[+] input: testFormatTemplateWithQuadrupleCurlyBraces() { String template = "Hello, {{{{name}}}}!"; Map<String, Object> kwargs = Map.of("name", "John");  // python is 'Hello, {{name}}!' String expected = "Hello, {John}!"; String actual = formatTemplate(template, kwargs); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testMigrationBlankDatabase() { final DSLContext ctx = getDslContext();  // this test is specifically ensuring that lack of a workspace record does not cause an error // while creating the default user and organization. assertEquals(0, ctx.fetchCount(DSL.table("workspace")));  V0_50_19_001__CreateDefaultOrganizationAndUser.createDefaultUserAndOrganization(ctx);  // verify that a User record was written to the database final var userRecord = ctx.selectFrom(DSL.table(USER_TABLE)) .where(DSL.field("id").eq(EXPECTED_DEFAULT_USER_ID)) .fetchOne(); "<AssertPlaceHolder>"; assertEquals("", userRecord.get(DSL.field("email", String.class))); assertEquals("Default User", userRecord.get(DSL.field("name", String.class))); assertNull(userRecord.get(DSL.field("default_workspace_id", UUID.class)));  // verify that an Organization record was written to the database final var organizationRecord = ctx.selectFrom(DSL.table("organization")) .where(DSL.field("id").eq(EXPECTED_DEFAULT_ORGANIZATION_ID)) .fetchOne(); assertNotNull(organizationRecord); assertEquals("", organizationRecord.get(DSL.field("email", String.class))); assertEquals("Default Organization", organizationRecord.get(DSL.field("name", String.class))); assertEquals(EXPECTED_DEFAULT_USER_ID, organizationRecord.get(DSL.field("user_id", UUID.class)));  // verify that a permission record was written to add the User to the Organization final var userPermissionRecord = ctx.selectFrom(DSL.table("permission")) .where(DSL.field("user_id").eq(EXPECTED_DEFAULT_USER_ID)) .fetch() .get(0); assertNotNull(userPermissionRecord); assertEquals(EXPECTED_DEFAULT_ORGANIZATION_ID, userPermissionRecord.get(DSL.field("organization_id", SQLDataType.UUID))); }
[*] target: assertNotNull(userRecord)
[-] pred: org. junit. Assert. assertNotNull ( userRecord )
************************************
[+] input: testRenderResource() { Map<String, Object> model = createTestMap(); InputStream inputStream = new ByteArrayInputStream( "key1's value is {key1} and key2's value is {key2}".getBytes(Charset.defaultCharset())); Resource resource = new InputStreamResource(inputStream); PromptTemplate promptTemplate = new PromptTemplate(resource, model); String expected = "key1's value is value1 and key2's value is true"; String result = promptTemplate.render(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testBuild() { List<String> list = new ArrayList<>(Arrays.asList("value1", "value2", "value3")); ListBuilder builder = new ListBuilder("field", list); builder.setSeparator(" AND ");  String expected = "(field:"value1" AND field:"value2" AND field:"value3")"; String actual = builder.build();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: deserializeWithInvalidBytes() { // Given byte[] bytes = "invalid".getBytes(); Object expectedValue = "deserialized"; when(jsonSerializer.deserialize(bytes)).thenReturn(expectedValue);  // When Object result = serializer.deserialize(bytes);  // Then "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedValue, result)
[-] pred: org. junit. Assert. assertEquals ( expectedValue, result )
************************************
[+] input: checkIfRoleNameExistsOrgTest() { //        given BindingResult br = mock(BindingResult.class); OrganizationRole role = new OrganizationRole();  //        when Mockito.when(globalRoleRepository.findByName(anyString())) .thenReturn(null); Mockito.when(organizationRoleRepository.findByName(anyString())) .thenReturn(role);  boolean result = roleService.checkIfRoleNameAlreadyExists(ROLE_NAME, RoleService.ROLE_TYPE_ORG, br);  //        then "<AssertPlaceHolder>"; verify(br, times(1)).rejectValue(anyString(), anyString()); }
[*] target: assertTrue(result)
[-] pred: org. junit. Assert. assertTrue ( result )
************************************
[+] input: existsByEmail() { //given String email = "no-reply@test.com"; signUpMapper.addUser(email, "username1", "password", LoginType.NORMAL);  //when boolean exists = userMapper.existsByEmail(email);  //then "<AssertPlaceHolder>"; }
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
[+] input: IOException { // Until https://github.com/airbytehq/airbyte/issues/7624 is solved, we need to handle nested oauth // parameters final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final UUID sourceId = UUID.randomUUID(); final Map<String, Object> oauthParameters = generateNestedOAuthParameters(); setupOAuthParamMocks(oauthParameters); final JsonNode actualConfig = oAuthConfigSupplier.injectSourceOAuthParameters(sourceDefinitionId, sourceId, workspaceId, Jsons.clone(config)); final JsonNode expectedConfig = getExpectedNode((String) ((Map<String, Object>) oauthParameters.get(CREDENTIALS)).get(API_CLIENT)); "<AssertPlaceHolder>"; assertTracking(workspaceId); }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: testSetSeparator() { ListBuilder builder = new ListBuilder("field", new ArrayList<>()); builder.setSeparator(" OR ");  String expected = " OR "; String actual = builder.getSeparator();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testComprehensivePageQuery() {  userLoginIdentity(false, 2L); //        userLoginIdentity(true,5L);  DataSourceAccessComprehensivePageQueryParam param = new DataSourceAccessComprehensivePageQueryParam(); param.setPageNo(1); param.setPageSize(10); param.setEnableReturnCount(true); param.setDataSourceId(TestUtils.nextLong()); param.setAccessObjectType("USER"); //        param.setAccessObjectType("TEAM"); param.setAccessObjectId(TestUtils.nextLong()); param.setUserOrTeamSearchKey("test"); param.setDataSourceSearchKey("m");  DataSourceAccessSelector selector = new DataSourceAccessSelector(); selector.setAccessObject(true); selector.setDataSource(true); selector.setDataSourceSelector(new DataSourceSelector(true));  PageResult<DataSourceAccess> result = dataSourceAccessService.comprehensivePageQuery(param, selector); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(result)
[-] pred: org. junit. Assert. assertNotNull ( result )
************************************
[+] input: ConfigNotFoundException { workspace.withWebhookOperationConfigs(PERSISTED_WEBHOOK_CONFIGS); when(configRepository.getStandardWorkspaceNoSecrets(any(), eq(false))).thenReturn(workspace);  final UUID uuid = UUID.randomUUID(); when(uuidSupplier.get()).thenReturn(uuid);  configRepository.writeStandardWorkspaceNoSecrets(workspace);  final WorkspaceCreate workspaceCreate = new WorkspaceCreate() .name(NEW_WORKSPACE) .email(TEST_EMAIL) .news(false) .anonymousDataCollection(false) .securityUpdates(false) .notifications(List.of(generateApiNotification())) .notificationSettings(generateApiNotificationSettings()) .defaultGeography(GEOGRAPHY_US) .webhookConfigs(List.of(new WebhookConfigWrite().name(TEST_NAME).authToken(TEST_AUTH_TOKEN))) .organizationId(ORGANIZATION_ID);  when(secretPersistence.read(any())).thenReturn("");  final WorkspaceRead actualRead = workspacesHandler.createWorkspace(workspaceCreate); final WorkspaceRead expectedRead = new WorkspaceRead() .workspaceId(uuid) .customerId(uuid) .email(TEST_EMAIL) .name(NEW_WORKSPACE) .slug("new-workspace") .initialSetupComplete(false) .displaySetupWizard(false) .news(false) .anonymousDataCollection(false) .securityUpdates(false) .notifications(List.of(generateApiNotification())) .notificationSettings(generateApiNotificationSettingsWithDefaultValue()) .defaultGeography(GEOGRAPHY_US) .webhookConfigs(List.of(new WebhookConfigRead().id(uuid).name(TEST_NAME))) .organizationId(ORGANIZATION_ID) .tombstone(false);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRead, actualRead)
[-] pred: org. junit. Assert. assertEquals ( expectedRead, actualRead )
************************************
[+] input: testRender() { Map<String, Object> model = createTestMap(); model.put("key3", 100);  // Create a simple template with placeholders for keys in the generative String template = "This is a {key1}, it is {key2}, and it costs {key3}"; PromptTemplate promptTemplate = new PromptTemplate(template, model);  // The expected result after rendering the template with the generative String expected = "This is a value1, it is true, and it costs 100"; String result = promptTemplate.render();  // Check that the rendered string matches the expected result assertEquals(expected, result);  model.put("key3", 200); expected = "This is a value1, it is true, and it costs 200"; result = promptTemplate.render(model); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: Exception { final UUID workspaceId = UUID.randomUUID(); when(userPersistence.listWorkspaceUserAccessInfo(workspaceId)).thenReturn(List.of( new WorkspaceUserAccessInfo() .withUserId(DEFAULT_USER_ID), // expect the default user to be filtered out. new WorkspaceUserAccessInfo() .withUserId(USER_ID) .withUserName(USER_NAME) .withUserEmail(USER_EMAIL) .withWorkspaceId(workspaceId) .withWorkspacePermission(new Permission() .withPermissionId(PERMISSION1_ID) .withPermissionType(PermissionType.WORKSPACE_ADMIN) .withUserId(USER_ID) .withWorkspaceId(workspaceId))));  final var result = userHandler.listAccessInfoByWorkspaceId(new WorkspaceIdRequestBody().workspaceId(workspaceId));  final var expected = new WorkspaceUserAccessInfoReadList().usersWithAccess(List.of( new io.airbyte.api.model.generated.WorkspaceUserAccessInfoRead() .userId(USER_ID) .userName(USER_NAME) .userEmail(USER_EMAIL) .workspaceId(workspaceId) .workspacePermission(new PermissionRead() .permissionId(PERMISSION1_ID) .permissionType(io.airbyte.api.model.generated.PermissionType.WORKSPACE_ADMIN) .userId(USER_ID) .workspaceId(workspaceId))));  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testContainerOpenAndCloseListener() { // Open listener AtomicBoolean openFlag = new AtomicBoolean(false); container.addOnOpenListener(viewer -> { openFlag.set(true); }); container.onOpen(null); assertTrue(openFlag.get());  // Close listener AtomicBoolean closeFlag = new AtomicBoolean(false); container.addOnCloseListener(viewer -> { closeFlag.set(true); }); container.onClose(null); "<AssertPlaceHolder>"; }
[*] target: assertTrue(closeFlag.get())
[-] pred: org. junit. Assert. assertTrue ( closeFlag. get ( ) )
************************************
[+] input: testLock() { String keyName = "ditributedLockKey1"; DistributedLock lock = lockFactory.newLock(keyName); // 加锁 Boolean isLocked = lock.tryLock(); if (isLocked) { LOG.infov("acquire lock success, keyName:{0}", keyName); try { // 这里写需要处理业务的业务代码 LOG.info("do something."); } finally { // 释放锁 lock.unlock(); LOG.infov("release lock success, keyName:{0}", keyName); } } else { LOG.infov("acquire lock fail, keyName:{0}", keyName); } Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(isLocked)
[-] pred: org. junit. Assert. assertTrue ( isLocked )
************************************
[+] input: updateSchemaOfNull() { Object updatedValue = SetSchemaMetadata.updateSchemaIn(null, Schema.INT32_SCHEMA); "<AssertPlaceHolder>"; }
[*] target: assertNull(updatedValue)
[-] pred: org. junit. Assert. assertNull ( updatedValue )
************************************
[+] input: givenValidCreateOrderRequest_whenOrderCreated_thenReturnOrderDTO() {  // Given String bookId1 = RandomUtil.generateUUID(); String bookId2 = RandomUtil.generateUUID();  User user = new UserBuilder().customer().build(); CustomUserDetails userDetails = new CustomUserDetails(user);  OrderItemRequest mockOrderItemRequest1 = OrderItemRequest.builder() .bookId(bookId1) .amount(RandomUtil.generateRandomInteger(0, 5)) .build();  OrderItem orderItem1 = OrderItem.builder() .id(1L) .book(new BookBuilder().withValidFields().build()) .build(); OrderItemDTO orderItemDTO1 = OrderItemMapper.toDTO(orderItem1);  OrderItemRequest mockOrderItemRequest2 = OrderItemRequest.builder() .bookId(bookId2) .amount(RandomUtil.generateRandomInteger(0, 5)) .build();  OrderItem orderItem2 = OrderItem.builder() .id(2L) .book(new BookBuilder().withValidFields().build()) .build(); OrderItemDTO orderItemDTO2 = OrderItemMapper.toDTO(orderItem2);  CreateOrderRequest mockCreateOrderRequest = CreateOrderRequest.builder() .orderDetailSet(new LinkedHashSet<>(List.of(mockOrderItemRequest1, mockOrderItemRequest2))) .build();  Order order = Order.builder() .id(1L) .user(user) .orderItems(List.of(orderItem1, orderItem2)) .build();  OrderDTO expected = OrderMapper.toOrderDTO(order);  // When Mockito.when(identity.getCustomUserDetails()).thenReturn(userDetails); Mockito.when(userService.findByEmail(Mockito.anyString())).thenReturn(Optional.of(user)); Mockito.when(orderItemService.createOrderItem(mockOrderItemRequest1)).thenReturn(orderItemDTO1); Mockito.when(orderItemService.createOrderItem(mockOrderItemRequest2)).thenReturn(orderItemDTO2); Mockito.when(orderRepository.save(Mockito.any(Order.class))).thenReturn(order);  // Then OrderDTO response = orderSaveService.createOrder(mockCreateOrderRequest);  Assertions."<AssertPlaceHolder>"; Mockito.verify(identity, Mockito.times(1)).getCustomUserDetails(); Mockito.verify(orderItemService, Mockito.times(2)).createOrderItem(Mockito.any(OrderItemRequest.class)); Mockito.verify(orderRepository, Mockito.times(1)).save(Mockito.any(Order.class)); }
[*] target: assertEquals(expected, response)
[-] pred: org. junit. Assert. assertEquals ( expected, response )
************************************
[+] input: testCollectFilter() { metrics.addMetric(metricName, (config, now) -> 100.0);  testEmitter.reconfigurePredicate(k -> !k.key().name().endsWith(".count")); collector.collect(testEmitter); List<SinglePointMetric> result = testEmitter.emittedMetrics();  // Should get exactly 1 Kafka measurables because we excluded the count measurable "<AssertPlaceHolder>";  Metric counter = result.get(0).builder().build();  assertTrue(counter.hasGauge()); assertEquals(100L, counter.getGauge().getDataPoints(0).getAsDouble(), 0.0); }
[*] target: assertEquals(1, result.size())
[-] pred: org. junit. Assert. assertEquals ( 1, result. size ( ) )
************************************
[+] input: testValueCanBeNull() { ApiMessageAndVersion key = new ApiMessageAndVersion(new ConsumerGroupMetadataKey(), (short) 0); CoordinatorRecord record = new CoordinatorRecord(key, null); assertEquals(key, record.key()); "<AssertPlaceHolder>"; }
[*] target: assertNull(record.value())
[-] pred: org. junit. Assert. assertNull ( record. value() )
************************************
[+] input: testInsertRightSiblingAfterLevelOpenerErr() { boolean raisedException = false; try { buildCommand("any_method( ).", 0).insertRightSibling(Token.createForAbap(0, 1, "a", 0), false); } catch (IntegrityBrokenException e) { // expected case raisedException = true; } "<AssertPlaceHolder>"; }
[*] target: assertTrue(raisedException)
[-] pred: org. junit. Assert. assertTrue ( raisedException )
************************************
[+] input: testCreate() { userLoginIdentity(true, 1L); //        userLoginIdentity(false, 2L);  SystemConfigParam systemConfigParam = new SystemConfigParam(); Optional.ofNullable(systemConfigParam).ifPresent(param -> { param.setCode(RandomCodeGenerator.generateRandomCode(6)); param.setContent(RandomCodeGenerator.generateRandomCode(6)); param.setSummary(RandomCodeGenerator.generateRandomCode(6)); });  ActionResult actionResult = configService.create(systemConfigParam); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(actionResult)
[-] pred: org. junit. Assert. assertNotNull ( actionResult )
************************************
[+] input: ConfigNotFoundException { when(configRepository.getStandardWorkspaceNoSecrets(any(), eq(false))).thenReturn(workspace);  final UUID uuid = UUID.randomUUID(); when(uuidSupplier.get()).thenReturn(uuid);  configRepository.writeStandardWorkspaceNoSecrets(workspace);  final WorkspaceCreate workspaceCreate = new WorkspaceCreate() .name(NEW_WORKSPACE) .email(TEST_EMAIL) .organizationId(ORGANIZATION_ID);  final WorkspaceRead actualRead = workspacesHandler.createWorkspace(workspaceCreate); final WorkspaceRead expectedRead = new WorkspaceRead() .workspaceId(actualRead.getWorkspaceId()) .customerId(actualRead.getCustomerId()) .email(TEST_EMAIL) .name(NEW_WORKSPACE) .slug(actualRead.getSlug()) .initialSetupComplete(false) .displaySetupWizard(false) .news(false) .anonymousDataCollection(false) .securityUpdates(false) .notifications(List.of()) .notificationSettings(generateDefaultApiNotificationSettings()) .defaultGeography(GEOGRAPHY_AUTO) .webhookConfigs(Collections.emptyList()) .tombstone(false) .organizationId(ORGANIZATION_ID);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedRead, actualRead)
[-] pred: org. junit. Assert. assertEquals ( expectedRead, actualRead )
************************************
[+] input: testSort() { hand.addCard(kingOfHearts); hand.addCard(aceOfSpades);  hand.sort();  List<Card> expectedCards = new ArrayList<>(); expectedCards.add(aceOfSpades); expectedCards.add(kingOfHearts);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedCards, hand.getCards())
[-] pred: org. junit. Assert. assertEquals ( expectedCards, hand. getCards() )
************************************
[+] input: expectNodeWithIncreasedLevelWhenNodeIsHacked() { //given Node node = new Node("abc", "123", "Home", 1, 100, new Coordinates(0, 0, 0), 0, 0); Node expected = new Node("abc", "123", "Home", 2, 100, new Coordinates(0, 0, 0), Instant.now().getEpochSecond(), 0); //when when(authentication.getName()).thenReturn(playerName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(nodeRepo.findById("abc")).thenReturn(Optional.of(node)); when(nodeRepo.save(expected)).thenReturn(expected); when(playerService.getPlayer(playerName)).thenReturn(playerunknown); Node actual = nodeService.edit("abc", ActionType.HACK); //then "<AssertPlaceHolder>"; verify(nodeRepo).findById("abc"); verify(nodeRepo).save(expected); verify(playerService).getPlayer(playerName); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testGenerateIBAN() { // When String iban = AccountService.generateIBAN();  // Then "<AssertPlaceHolder>"; assertTrue(iban.matches("[A-Z]{2}\\d{2}-\\d{4}-\\d{4}-\\d{4}-\\d{4}")); }
[*] target: assertNotNull(iban)
[-] pred: org. junit. Assert. assertNotNull ( iban )
************************************
[+] input: testCreateCommoditySpecification() { CreateCommoditySpecificationParam param = new CreateCommoditySpecificationParam(); BaseResult<Void> expectedResponse = new BaseResult<>("code", "message", null, "requestId");  when(commoditySpecificationService.createCommoditySpecification(any(UserInfoModel.class), any(CreateCommoditySpecificationParam.class))) .thenReturn(expectedResponse);  BaseResult<Void> result = commoditySpecificationController.createCommoditySpecification(userInfo, param);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResponse, result)
[-] pred: org. junit. Assert. assertEquals ( expectedResponse, result )
************************************
[+] input: dateUtilMock) { Long lastBillingEndDateLong = null; Long payPeriod = 30L; PayPeriodUnit payPeriodUnit = PayPeriodUnit.Day; Long billingDays = 30L; String currentDate = "2022-01-01"; Long expectedBillingEndDateTimeLong = 1640995200000L;  new Expectations() {{ DateUtil.getCurrentIs08601Time(); result = currentDate;  DateUtil.getIsO8601FutureDateMillis(currentDate, billingDays); result = expectedBillingEndDateTimeLong; }};  WalletHelper walletHelper = new WalletHelper(); Long actualBillingEndDateTimeLong = walletHelper.getBillingEndDateTimeMillis(lastBillingEndDateLong, payPeriod, payPeriodUnit);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedBillingEndDateTimeLong, actualBillingEndDateTimeLong)
[-] pred: org. junit. Assert. assertEquals ( expectedBillingEndDateTimeLong, actualBillingEndDateTimeLong )
************************************
[+] input: testMavenCompilerTargetGetterWhenValueIsNull() { var publishProperties = new PublishProperties(); publishProperties.put("maven.compiler.target", null); var actualValue = publishProperties.mavenCompilerTarget(); "<AssertPlaceHolder>"; }
[*] target: assertNull(actualValue)
[-] pred: org. junit. Assert. assertNull ( actualValue )
************************************
[+] input: givenValidId_whenActiveInstitutionNotExist_thenReturnFalse() { // Given String mockId = AysRandomUtil.generateUUID();  // When InstitutionStatus mockStatus = InstitutionStatus.ACTIVE; Mockito.when(institutionRepository.existsByIdAndStatus(mockId, mockStatus)) .thenReturn(false);  // Then boolean isInstitutionExist = institutionAdapter.existsByIdAndIsStatusActive(mockId);  Assertions."<AssertPlaceHolder>";  Mockito.verify(institutionRepository, Mockito.times(1)) .existsByIdAndStatus(mockId, mockStatus); }
[*] target: assertFalse(isInstitutionExist)
[-] pred: org. junit. Assert. assertFalse ( isInstitutionExist )
************************************
[+] input: Exception { ModelRepository modelRepository = Mockito.mock(ModelRepository.class); ModelService modelService = mockModelService(modelRepository); ModelResp actualModelResp = modelService.createModel( mockModelReq(), User.getFakeUser()); ModelResp expectedModelResp = buildExpectedModelResp(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedModelResp, actualModelResp)
[-] pred: org. junit. Assert. assertEquals ( expectedModelResp, actualModelResp )
************************************
[+] input: shouldGenerateEmptyJsonSchemaWhenClassHasNoFields() { var actualJsonSchema = JsonSchemaUtil.classToJsonSchema(EmptyClass.class).toString(); var expectedJsonSchema = JSON_EMPTY_CLASS; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedJsonSchema, actualJsonSchema)
[-] pred: org. junit. Assert. assertEquals ( expectedJsonSchema, actualJsonSchema )
************************************
[+] input: IOException { final UUID sourceDefinitionId = UUID.randomUUID(); final UUID sourceId = UUID.randomUUID(); final UUID workspaceId = UUID.randomUUID(); when(configRepository.getStandardSourceDefinition(sourceDefinitionId)).thenReturn(SOURCE_DEFINITION); when(actorDefinitionVersionHelper.getSourceVersion(SOURCE_DEFINITION, workspaceId, sourceId)).thenReturn(SOURCE_DEFINITION_VERSION_OLD);  when(remoteDefinitionsProvider.getConnectorDocumentation(SOURCE_DOCKER_REPO, SOURCE_VERSION_OLD)) .thenReturn(Optional.of(DOC_CONTENTS_OLD));  final ConnectorDocumentationRequestBody request = new ConnectorDocumentationRequestBody().actorType(ActorType.SOURCE) .actorDefinitionId(sourceDefinitionId).workspaceId(workspaceId).actorId(sourceId);  final ConnectorDocumentationRead expectedResult = new ConnectorDocumentationRead().doc(DOC_CONTENTS_OLD); final ConnectorDocumentationRead actualResult = connectorDocumentationHandler.getConnectorDocumentation(request);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualResult )
************************************
[+] input: testUpdate() { userLoginIdentity(true, 4L); //        userLoginIdentity(false, 5L);  SystemConfigParam systemConfigParam = new SystemConfigParam(); systemConfigParam.setCode(RandomCodeGenerator.generateRandomCode(6)); systemConfigParam.setContent(RandomCodeGenerator.generateRandomCode(6)); systemConfigParam.setSummary(RandomCodeGenerator.generateRandomCode(6));  ActionResult update = configService.update(systemConfigParam); "<AssertPlaceHolder>";  }
[*] target: assertNotNull(update)
[-] pred: org. junit. Assert. assertNotNull ( update )
************************************
[+] input: testNullAllowedPathsTraversal() { allowedPaths = new AllowedPaths(""); Path traversedPath = Paths.get(dir, "..", "dir2"); Path actual = allowedPaths.parseUntrustedPath(traversedPath.toString()); // we expect non-normalised path if allowed.paths is not specified to avoid backward compatibility "<AssertPlaceHolder>"; }
[*] target: assertEquals(traversedPath, actual)
[-] pred: org. junit. Assert. assertEquals ( traversedPath, actual )
************************************
[+] input: IOException { when(statePersistence.getCurrentState(CONNECTION_ID)).thenReturn(Optional.of( new StateWrapper() .withStateType(StateType.LEGACY) .withLegacyState(JSON_BLOB)));  final ConnectionState expected = new ConnectionState() .connectionId(CONNECTION_ID) .stateType(ConnectionStateType.LEGACY) .streamState(null) .state(JSON_BLOB); final ConnectionState actual = stateHandler.getState(new ConnectionIdRequestBody().connectionId(CONNECTION_ID)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: expectAllNodesInList() { //given Node node1 = new Node("abc", "123", "Home", 1, 100, new Coordinates(0, 0, 0), 0, 0); Node node2 = new Node("def", "456", "Office", 2, 100, new Coordinates(0, 0, 0), 0, 0); List<Node> expected = List.of(node1, node2); //when when(authentication.getName()).thenReturn(playerName); when(securityContext.getAuthentication()).thenReturn(authentication); SecurityContextHolder.setContext(securityContext); when(playerService.getPlayer(playerName)).thenReturn(playerunknown); when(nodeRepo.findAll()).thenReturn(expected); List<Node> actual = nodeService.list(); //then "<AssertPlaceHolder>"; verify(nodeRepo).findAll(); }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: IOException { when(statePersistence.getCurrentState(CONNECTION_ID)).thenReturn(Optional.empty());  final ConnectionState expected = new ConnectionState().connectionId(CONNECTION_ID).stateType(ConnectionStateType.NOT_SET).streamState(null); final ConnectionState actual = stateHandler.getState(new ConnectionIdRequestBody().connectionId(CONNECTION_ID)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testDelete_WithInvalidRequest_ReturnsResponse() { AbstractKusciaServingManager servingManager = new AbstractKusciaServingManager() { @Override public Serving.CreateServingResponse create(Serving.CreateServingRequest request) { return super.create(request); } }; servingManager.setKusciaGrpcClientAdapter(kusciaGrpcClientAdapter); servingManager.setApplicationEventPublisher(applicationEventPublisher); Serving.DeleteServingRequest request = Serving.DeleteServingRequest.newBuilder() .setServingId("") .build(); Serving.DeleteServingResponse response = Serving.DeleteServingResponse.newBuilder() .setStatus(Common.Status.newBuilder().setCode(1)) .build(); when(kusciaGrpcClientAdapter.deleteServing(request)).thenReturn(response); Serving.DeleteServingResponse result = servingManager.delete(request); "<AssertPlaceHolder>"; verify(kusciaGrpcClientAdapter).deleteServing(request); }
[*] target: assertEquals(response, result)
[-] pred: org. junit. Assert. assertEquals ( response, result )
************************************
[+] input: IOException { final StandardWorkspace expectedWorkspace = createBaseStandardWorkspace() .withWorkspaceId(UUID.randomUUID()) .withOrganizationId(MockData.ORGANIZATION_ID_1) .withName("workspaceInOrganization1");  configRepository.writeStandardWorkspaceNoSecrets(expectedWorkspace);  final StandardWorkspace tombstonedWorkspace = createBaseStandardWorkspace() .withWorkspaceId(UUID.randomUUID()) .withOrganizationId(MockData.ORGANIZATION_ID_1) .withName("tombstonedWorkspace") .withTombstone(true);  configRepository.writeStandardWorkspaceNoSecrets(tombstonedWorkspace);  final StandardWorkspace laterWorkspace = createBaseStandardWorkspace() .withWorkspaceId(UUID.randomUUID()) .withOrganizationId(MockData.ORGANIZATION_ID_1) .withName("laterWorkspace");  configRepository.writeStandardWorkspaceNoSecrets(laterWorkspace);  final StandardWorkspace actualWorkspace = workspacePersistence.getDefaultWorkspaceForOrganization(MockData.ORGANIZATION_ID_1);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedWorkspace, actualWorkspace)
[-] pred: org. junit. Assert. assertEquals ( expectedWorkspace, actualWorkspace )
************************************
[+] input: testExecuteWithException() { final Supplier<String> supplier = mock(Supplier.class); when(supplier.get()).thenThrow(IllegalStateException.class);  final TemporalResponse<String> response = temporalClient.execute(JOB_RUN_CONFIG, supplier);  "<AssertPlaceHolder>"; assertFalse(response.getOutput().isPresent()); assertFalse(response.getMetadata().isSucceeded()); assertEquals(logPath, response.getMetadata().getLogPath()); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: testCreateOrderSpiToken() { CreateOrderParam param = new CreateOrderParam(); param.setChargeType(ChargeType.PrePaid); param.setPayPeriod(1L); param.setPayPeriodUnit(PayPeriodUnit.Month); param.setOrderType("new"); param.setSpecificationName("basic"); param.setCommodityCode("saas-boost-176625a4"); param.setToken("ignoredToken"); param.setUserId("1563457855438522");  Map<String, String> map = new HashMap<>(); map.put("commodityCode", "saas-boost-176625a4"); map.put("chargeType", ChargeType.PrePaid.toString()); map.put("payPeriodUnit", PayPeriodUnit.Month.toString()); map.put("orderType", "new"); map.put("specificationName", "basic"); map.put("payPeriod", "1"); map.put("userId", "1563457855438522");  String data = TokenUtil.buildUrlParams(map); data += "&key=" + "isvKey"; String md5HexString = EncryptionUtil.getMd5HexString(data); String actualToken = TokenUtil.createSpiToken(param, "isvKey");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(md5HexString, actualToken)
[-] pred: org. junit. Assert. assertEquals ( md5HexString, actualToken )
************************************
[+] input: testProjectRemainingSourceConflicts() { final AirbyteProtocolVersionRange targetRange = new AirbyteProtocolVersionRange(V1_0_0, V2_0_0);  final UUID unrelatedSource = UUID.randomUUID(); final UUID upgradedSource = UUID.randomUUID(); final UUID notChangedSource = UUID.randomUUID(); final UUID missingSource = UUID.randomUUID(); final Set<UUID> initialConflicts = Set.of(upgradedSource, notChangedSource, missingSource);  setNewSourceDefinitions(List.of( Map.entry(unrelatedSource, V2_0_0), Map.entry(upgradedSource, V1_0_0), Map.entry(notChangedSource, V0_0_0)));  final ProtocolVersionChecker protocolVersionChecker = new ProtocolVersionChecker(jobPersistence, targetRange, configRepository, definitionsProvider); final Set<UUID> actualConflicts = protocolVersionChecker.projectRemainingConflictsAfterConnectorUpgrades(targetRange, initialConflicts, ActorType.SOURCE);  final Set<UUID> expectedConflicts = Set.of(notChangedSource, missingSource); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedConflicts, actualConflicts)
[-] pred: org. junit. Assert. assertEquals ( expectedConflicts, actualConflicts )
************************************
[+] input: testBadHead() { boolean a = false; try { TestSuite.IRIS_DATASET.head(0); } catch (IllegalArgumentException i) { a = true; } finally { "<AssertPlaceHolder>"; } }
[*] target: assertTrue(a)
[-] pred: org. junit. Assert. assertTrue ( a )
************************************
[+] input: testInstantiation() { var builder = new MetadataBuilder(); assertNull(builder.info()); "<AssertPlaceHolder>"; }
[*] target: assertNull(builder.updated())
[-] pred: org. junit. Assert. assertNull ( builder. updated() )
************************************
[+] input: existsById_givenExistingId_returnTrue() { boolean exists = userRepository.existsById(user1.getId()); "<AssertPlaceHolder>"; }
[*] target: assertTrue(exists)
[-] pred: org. junit. Assert. assertTrue ( exists )
************************************
[+] input: testParseSql() { String sql = "select * from t_$interval$ where id = $id$ and name = $name$"; List<SqlVariable> variables = Lists.newArrayList(mockNumSqlVariable(), mockExprSqlVariable(), mockStrSqlVariable()); List<Param> params = Lists.newArrayList(mockIdParam(), mockNameParam(), mockIntervalParam()); String actualSql = SqlVariableParseUtils.parse(sql, variables, params); String expectedSql = "select * from t_wk where id = 2 and name = 'alice'"; Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedSql, actualSql)
[-] pred: org. junit. Assert. assertEquals ( expectedSql, actualSql )
************************************
[+] input: IOException { String expected = "abc"; ObjectMapper mapper = new ObjectMapper(); ObjectNode node = mapper.createObjectNode(); node.put("access_token", expected);  String actual = HttpAccessTokenRetriever.parseAccessToken(mapper.writeValueAsString(node)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testNoRecordsInFetch() { FetchResponseData.PartitionData partitionData = new FetchResponseData.PartitionData() .setPartitionIndex(0) .setHighWatermark(10) .setLastStableOffset(20) .setLogStartOffset(0);  CompletedFetch completedFetch = newCompletedFetch(1, partitionData); try (final Deserializers<String, String> deserializers = newStringDeserializers()) { FetchConfig fetchConfig = newFetchConfig(IsolationLevel.READ_UNCOMMITTED, true); List<ConsumerRecord<String, String>> records = completedFetch.fetchRecords(fetchConfig, deserializers, 10); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(0, records.size())
[-] pred: org. junit. Assert. assertEquals ( 0, records. size ( ) )
************************************
[+] input: extStorageExistsVersion1() { when(sharedMemory.readData(childStorageKeyPointer)).thenReturn(childStorageKeyBytes); when(sharedMemory.readData(keyPointer)).thenReturn(keyBytes); when(repository.getChildTrie(childStorageKey)).thenReturn(childTrieAccessor); when(childTrieAccessor.findStorageValue(key)).thenReturn(Optional.of(valueBytes));  int result = childStorageHostFunctions.extDefaultChildStorageExistsVersion1( childStorageKeyPointer, keyPointer);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(1, result)
[-] pred: org. junit. Assert. assertEquals ( 1, result )
************************************
[+] input: IOException { final UUID destinationDefinitionId = UUID.randomUUID(); final UUID workspaceId = UUID.randomUUID(); when(configRepository.getStandardDestinationDefinition(destinationDefinitionId)).thenReturn(DESTINATION_DEFINITION); when(actorDefinitionVersionHelper.getDestinationVersion(DESTINATION_DEFINITION, workspaceId, null)) .thenReturn(DESTINATION_DEFINITION_VERSION_LATEST);  when(remoteDefinitionsProvider.getConnectorDocumentation(DESTINATION_DOCKER_REPO, DESTINATION_VERSION_LATEST)) .thenReturn(Optional.of(DOC_CONTENTS_LATEST));  final ConnectorDocumentationRequestBody request = new ConnectorDocumentationRequestBody().actorType(ActorType.DESTINATION).actorDefinitionId(destinationDefinitionId).workspaceId(workspaceId);  final ConnectorDocumentationRead expectedResult = new ConnectorDocumentationRead().doc(DOC_CONTENTS_LATEST); final ConnectorDocumentationRead actualResult = connectorDocumentationHandler.getConnectorDocumentation(request);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualResult )
************************************
[+] input: testHourPartitioning() { List<InternalPartitionField> partitionFieldList = Collections.singletonList( InternalPartitionField.builder() .sourceField( InternalField.builder() .name("timestamp_hour") .schema( InternalSchema.builder().dataType(InternalType.TIMESTAMP_NTZ).build()) .build()) .transformType(PartitionTransformType.HOUR) .build()); PartitionSpec actual = IcebergPartitionSpecExtractor.getInstance().toIceberg(partitionFieldList, TEST_SCHEMA); PartitionSpec expected = PartitionSpec.builderFor(TEST_SCHEMA).hour("timestamp_hour").build(); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testKeepsDirectoriesAfterReassignment() { PartitionRegistration registration = new PartitionRegistration.Builder(). setReplicas(new int[]{2, 1, 3}). setDirectories(new Uuid[]{ Uuid.fromString("v1PVrX6uS5m8CByXlLfmWg"), Uuid.fromString("iU2znv45Q9yQkOpkTSy3jA"), Uuid.fromString("fM5NKyWTQHqEihjIkUl99Q") }). setIsr(new int[]{2, 1, 3}). setLeader(1). setLeaderRecoveryState(LeaderRecoveryState.RECOVERED). setLeaderEpoch(100). setPartitionEpoch(200). build(); Optional<ApiMessageAndVersion> built = new PartitionChangeBuilder(registration, FOO_ID, 0, r -> true, MetadataVersion.IBP_3_7_IV2, 2). setTargetReplicas(Arrays.asList(3, 1, 5, 4)). setDirectory(5, Uuid.fromString("RNJ5oFjjSSWMMFRwqdCfJg")). setDefaultDirProvider(DEFAULT_DIR_PROVIDER). build(); Optional<ApiMessageAndVersion> expected = Optional.of(new ApiMessageAndVersion( new PartitionChangeRecord(). setTopicId(FOO_ID). setPartitionId(0). setLeader(1). setReplicas(Arrays.asList(3, 1, 5, 4)). setDirectories(Arrays.asList( Uuid.fromString("fM5NKyWTQHqEihjIkUl99Q"), Uuid.fromString("iU2znv45Q9yQkOpkTSy3jA"), Uuid.fromString("RNJ5oFjjSSWMMFRwqdCfJg"), DirectoryId.UNASSIGNED )), (short) 1 )); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, built)
[-] pred: org. junit. Assert. assertEquals ( expected, built )
************************************
[+] input: IOException { final JSerialCommPort port = new JSerialCommPort("", 9600, 8, 1, SerialPort.NO_PARITY, new byte[] { (byte) 0xA5 }, FrameDefinition.create("SACLL(-2)D")); port.serialEvent(new SerialPortEvent(getPort(), SerialPort.LISTENING_EVENT_DATA_RECEIVED, new byte[] { 0x01, 0x02, 0x03, Integer.valueOf(0xA5).byteValue(), 0x01, 0x02, 0x00, 0x13, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x11, 0x00, 0x01, 0x02 }));  final ByteBuffer frame = port.getNextFrame(); "<AssertPlaceHolder>"; assertArrayEquals(new byte[] { Integer.valueOf(0xA5).byteValue(), 0x01, 0x02, 0x00, 0x13, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x11, 0x00 }, frame.array()); }
[*] target: assertNotNull(frame)
[-] pred: org. junit. Assert. assertNotNull ( frame )
************************************
[+] input: testGetArticleDetails_LoggedInUser_successful() { // given User requester = new User("requesterEmail", "requesterUsername", "requesterPassword"); Article article = new Article(testUser1, "title", "desc", "content"); ArticleDetails expectedDetails = ArticleDetails.unauthenticated(article, 0); when(articleRepository.findArticleDetails(requester, article)).thenReturn(expectedDetails);  // when ArticleDetails actualArticleDetails = sut.getArticleDetails(requester, article);  // then "<AssertPlaceHolder>"; verify(articleRepository).findArticleDetails(requester, article); }
[*] target: assertEquals(expectedDetails, actualArticleDetails)
[-] pred: org. junit. Assert. assertEquals ( expectedDetails, actualArticleDetails )
************************************
[+] input: doFullBackup_nullParam() { //        given   //        when boolean result = backupService.doFullBackup(null);  //        then "<AssertPlaceHolder>"; }
[*] target: assertFalse(result)
[-] pred: org. junit. Assert. assertFalse ( result )
************************************
[+] input: login() { LoginRequest request = new LoginRequest(); request.setUsername("admin"); request.setPassword("123456"); request.setIsQuick(true); LoginTokenDto tokenDto = userService.login(request); "<AssertPlaceHolder>"; assertNotNull(tokenDto.getAccessToken()); }
[*] target: assertNotNull(tokenDto)
[-] pred: org. junit. Assert. assertNotNull ( tokenDto )
************************************
[+] input: getUiSchemaForAdapter_whenNoneIsPresent_thenBackoffTpDefault() { ProtocolAdapterInformation protocolAdapterInformation = mock(); final JsonNode uiSchemaForAdapter = ProtocolAdapterApiUtils.getUiSchemaForAdapter(new ObjectMapper(), protocolAdapterInformation); "<AssertPlaceHolder>"; }
[*] target: assertNotNull(uiSchemaForAdapter)
[-] pred: org. junit. Assert. assertNotNull ( uiSchemaForAdapter )
************************************
[+] input: testCreatePythonPathFromListOfPathsNoSubdirectories() { // This test case verifies the scenario where no local files are mounted List<String> subdirectories = Lists.newArrayList(); String pythonpath = ApplicationBeanFactory.createPythonPathFromListOfPaths(ROOT_PATH, subdirectories);  String expectedPythonPath = "";  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedPythonPath, pythonpath)
[-] pred: org. junit. Assert. assertEquals ( expectedPythonPath, pythonpath )
************************************
[+] input: IOException {  ElasticLogSegment seg = createOrLoadSegment(40, 10, Time.SYSTEM);  MemoryRecords ms = records(40, "hello", "there"); seg.append(41, RecordBatch.NO_TIMESTAMP, -1L, ms); MemoryRecords ms2 = records(42, "alpha", "beta"); seg.append(43, RecordBatch.NO_TIMESTAMP, -1L, ms2); FetchDataInfo read = seg.read(42, 200); checkEquals(ms2.records().iterator(), read.records.records().iterator()); int oldSize = seg.size(); seg.close();  ElasticLogSegment segReopen = createOrLoadSegment(40, 10, Time.SYSTEM);  FetchDataInfo readAgain = segReopen.read(42, 200); checkEquals(ms2.records().iterator(), readAgain.records.records().iterator()); int size = segReopen.size();  "<AssertPlaceHolder>"; }
[*] target: assertEquals(oldSize, size)
[-] pred: org. junit. Assert. assertEquals ( oldSize, size )
************************************
[+] input: givenBookDtoAndAmount_whenBookDtoStockGreaterThanAmount_thenReturnTrue() {  // Given int amount = 50; BookDTO mockBookDTO = BookDTO.builder().stock(amount + 1).build();  // Then boolean response = bookService.isStockAvailable(mockBookDTO, amount);  Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(response)
[-] pred: org. junit. Assert. assertTrue ( response )
************************************
[+] input: extStorageExistsVersion1WhenNonExistent() { when(sharedMemory.readData(childStorageKeyPointer)).thenReturn(childStorageKeyBytes); when(sharedMemory.readData(keyPointer)).thenReturn(keyBytes); when(repository.getChildTrie(childStorageKey)).thenReturn(childTrieAccessor); when(childTrieAccessor.findStorageValue(key)).thenReturn(Optional.empty());  int result = childStorageHostFunctions .extDefaultChildStorageExistsVersion1(childStorageKeyPointer, keyPointer);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(0, result)
[-] pred: org. junit. Assert. assertEquals ( 0, result )
************************************
[+] input: testInsertLeftSiblingError() { boolean throwsException = false; try { buildCommand("any_method( a = 1 ).", ")").insertLeftSibling(Token.createForAbap(0, 1, " " comment", 1)); } catch(IntegrityBrokenException e) { throwsException = true; } "<AssertPlaceHolder>"; }
[*] target: assertTrue(throwsException)
[-] pred: org. junit. Assert. assertTrue ( throwsException )
************************************
[+] input: shouldGetHostsForStore() { when(streamsMetadata.stateStoreNames()) .thenReturn(Set.of("store"));  when(streamsMetadata.hostInfo()) .thenReturn(new HostInfo("host1", 1234));  when(streamsMetadata.topicPartitions()) .thenReturn(Set.of(new TopicPartition("topic", 0)));  when(interactiveQueriesService.getStreamsMetadataForStore("store")) .thenReturn(List.of(streamsMetadata));  List<com.michelin.kstreamplify.store.StreamsMetadata> response = interactiveQueriesController.getStreamsMetadataForStore("store").getBody();  "<AssertPlaceHolder>"; assertEquals(streamsMetadata.stateStoreNames(), response.get(0).getStateStoreNames()); assertEquals(streamsMetadata.hostInfo().host(), response.get(0).getHostInfo().host()); assertEquals(streamsMetadata.hostInfo().port(), response.get(0).getHostInfo().port()); assertTrue(response.get(0).getTopicPartitions().contains("topic-0")); }
[*] target: assertNotNull(response)
[-] pred: org. junit. Assert. assertNotNull ( response )
************************************
[+] input: Exception { AgentSource agentSource = buildAgentSource("timer://test", Map.of("period", 1, "repeatCount", 1)); Awaitility.await() .untilAsserted( () -> { List<Record> read = agentSource.read(); "<AssertPlaceHolder>"; }); }
[*] target: assertEquals(1, read.size())
[-] pred: org. junit. Assert. assertEquals ( 1, read. size ( ) )
************************************
[+] input: testValidateIssuedAt() { Long expected = 1L; Long actual = ClaimValidationUtils.validateIssuedAt("iat", expected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testIsKey() { IndexPathNode indexPathNode = new IndexPathNode(token, charSource); "<AssertPlaceHolder>"; }
[*] target: assertFalse(indexPathNode.isKey())
[-] pred: org. junit. Assert. assertFalse ( indexPathNode. isKey() )
************************************
[+] input: getUserNamesListWithLengthGreaterThan_givenLength_returnUsernames() { int length = 8; List<UsernameLengthProjection> expectedList = Arrays.asList( getUsernameLengthProjection( user1.getId(), user1.getUsername(), user1.getEmail(), user1.getUsername().length()), getUsernameLengthProjection( user2.getId(), user2.getUsername(), user2.getEmail(), user2.getUsername().length()));  when(userRepository.getUserNamesListWithLengthGreaterThan(length)).thenReturn(expectedList);  List<UsernameLengthProjection> result = userService.getUserNamesListWithLengthGreaterThan(length);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedList, result)
[-] pred: org. junit. Assert. assertEquals ( expectedList, result )
************************************
[+] input: IOException { final UUID destinationDefinitionId = UUID.randomUUID(); final UUID workspaceId = UUID.randomUUID(); when(configRepository.getStandardDestinationDefinition(destinationDefinitionId)).thenReturn(DESTINATION_DEFINITION); when(actorDefinitionVersionHelper.getDestinationVersion(DESTINATION_DEFINITION, workspaceId, null)) .thenReturn(DESTINATION_DEFINITION_VERSION_LATEST);  when(remoteDefinitionsProvider.getConnectorDocumentation(DESTINATION_DOCKER_REPO, DESTINATION_VERSION_LATEST)) .thenReturn(Optional.empty()); when(remoteDefinitionsProvider.getConnectorDocumentation(DESTINATION_DOCKER_REPO, LATEST)) .thenReturn(Optional.of(DOC_CONTENTS_LATEST));  final ConnectorDocumentationRequestBody request = new ConnectorDocumentationRequestBody().actorType(ActorType.DESTINATION).actorDefinitionId(destinationDefinitionId).workspaceId(workspaceId);  final ConnectorDocumentationRead expectedResult = new ConnectorDocumentationRead().doc(DOC_CONTENTS_LATEST); final ConnectorDocumentationRead actualResult = connectorDocumentationHandler.getConnectorDocumentation(request);  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedResult, actualResult)
[-] pred: org. junit. Assert. assertEquals ( expectedResult, actualResult )
************************************
[+] input: IOException { final JsonNode config = generateJsonConfig(); final UUID workspaceId = UUID.randomUUID(); final UUID sourceId = UUID.randomUUID(); final Map<String, Object> oauthParameters = generateOAuthParameters(); setupOAuthParamMocks(oauthParameters); final JsonNode actualConfig = oAuthConfigSupplier.injectSourceOAuthParameters(sourceDefinitionId, sourceId, workspaceId, Jsons.clone(config)); final JsonNode expectedConfig = getExpectedNode((String) oauthParameters.get(API_CLIENT)); "<AssertPlaceHolder>"; assertTracking(workspaceId); }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: testLongToByte() { long v = 259; byte[] b = ByteUtils.longToByte(v); Assertions.assertArrayEquals(new byte[] {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03}, b); long v2 = ByteUtils.byteToLong(b); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(v, v2)
[-] pred: org. junit. Assert. assertEquals ( v, v2 )
************************************
[+] input: testGetWorkspaceUrl() { final WebUrlHelper webUrlHelper = new WebUrlHelper(LOCALHOST_8000); final String workspaceUrl = webUrlHelper.getWorkspaceUrl(WORKSPACE_ID); final String expectedUrl = String.format("http://localhost:8000/workspaces/%s", WORKSPACE_ID); Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedUrl, workspaceUrl)
[-] pred: org. junit. Assert. assertEquals ( expectedUrl, workspaceUrl )
************************************
[+] input: testBlockingDescribeWorkflowExecution() { final DescribeWorkflowExecutionResponse expected = mock(DescribeWorkflowExecutionResponse.class); when(temporalWorkflowServiceBlockingStub.describeWorkflowExecution(any())) .thenThrow(unavailable()) .thenReturn(expected);  final DescribeWorkflowExecutionResponse actual = workflowClient.blockingDescribeWorkflowExecution(mock(DescribeWorkflowExecutionRequest.class)); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testConnectionResourceRequirementsOverrideDefault() { final ResourceRequirements workerDefaultReqs = new ResourceRequirements().withCpuRequest("1"); final ResourceRequirements definitionDefaultReqs = new ResourceRequirements().withCpuLimit("2").withCpuRequest("2"); final JobTypeResourceLimit jobTypeResourceLimit = new JobTypeResourceLimit().withJobType(JobType.SYNC).withResourceRequirements( new ResourceRequirements().withCpuLimit("3").withMemoryRequest("200Mi")); final ActorDefinitionResourceRequirements definitionReqs = new ActorDefinitionResourceRequirements() .withDefault(definitionDefaultReqs) .withJobSpecific(List.of(jobTypeResourceLimit)); final ResourceRequirements connectionResourceRequirements = new ResourceRequirements().withMemoryRequest("400Mi").withMemoryLimit(FIVE_HUNDRED_MEM);  final ResourceRequirements result = ResourceRequirementsUtils.getResourceRequirements( connectionResourceRequirements, definitionReqs, workerDefaultReqs, JobType.SYNC);  final ResourceRequirements expectedReqs = new ResourceRequirements() .withCpuRequest("2") .withCpuLimit("3") .withMemoryRequest("400Mi") .withMemoryLimit(FIVE_HUNDRED_MEM); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedReqs, result)
[-] pred: org. junit. Assert. assertEquals ( expectedReqs, result )
************************************
[+] input: validateInvalidVisibleLength() { // Arrange AuthenticationRequest request = new AuthenticationRequest(); request.setUserVisibleData(TestUtils.generateString(1501));  // Act boolean valid = request.validate();  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(valid)
[-] pred: org. junit. Assert. assertFalse ( valid )
************************************
[+] input: catalogGetTable() { String catalogName = "catalog1"; StubCatalog.registerMock(catalogName, mockCatalog); IcebergCatalogConfig catalogConfig = IcebergCatalogConfig.builder() .catalogImpl(StubCatalog.class.getName()) .catalogName(catalogName) .catalogOptions(OPTIONS) .build(); Table mockTable = mock(Table.class); when(mockCatalog.loadTable(IDENTIFIER)).thenReturn(mockTable);  IcebergTableManager tableManager = IcebergTableManager.of(CONFIGURATION); Table actual = tableManager.getTable(catalogConfig, IDENTIFIER, BASE_PATH); "<AssertPlaceHolder>"; verify(mockCatalog).initialize(catalogName, OPTIONS); }
[*] target: assertEquals(mockTable, actual)
[-] pred: org. junit. Assert. assertEquals ( mockTable, actual )
************************************
[+] input: testOllama() { var llm = Ollama.builder() .baseUrl("http://localhost:11434") .model("llama2") .temperature(0f) .build() .init();  var actual = llm.predict("Say foo:");  var expected = " Foo!"; "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testFlattenConfig() { final JsonNode nestedConfig = Jsons.jsonNode(Map.of( FIELD, "value1", "top-level", Map.of( "nested_field", "value2"))); final JsonNode expectedConfig = Jsons.jsonNode(Map.of( FIELD, "value1", "nested_field", "value2")); final JsonNode actualConfig = MoreOAuthParameters.flattenOAuthConfig(nestedConfig); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedConfig, actualConfig)
[-] pred: org. junit. Assert. assertEquals ( expectedConfig, actualConfig )
************************************
[+] input: testDelete_WithValidRequest_ReturnsResponse() { AbstractKusciaServingManager servingManager = new AbstractKusciaServingManager() { @Override public Serving.CreateServingResponse create(Serving.CreateServingRequest request) { return super.create(request); } }; servingManager.setKusciaGrpcClientAdapter(kusciaGrpcClientAdapter); servingManager.setApplicationEventPublisher(applicationEventPublisher); Serving.DeleteServingRequest request = Serving.DeleteServingRequest.newBuilder() .setServingId("serving123") .build(); Serving.DeleteServingResponse response = Serving.DeleteServingResponse.newBuilder() .setStatus(Common.Status.newBuilder().setCode(0)) .build(); when(kusciaGrpcClientAdapter.deleteServing(request)).thenReturn(response); Serving.DeleteServingResponse result = servingManager.delete(request); "<AssertPlaceHolder>"; verify(kusciaGrpcClientAdapter).deleteServing(request); }
[*] target: assertEquals(response, result)
[-] pred: org. junit. Assert. assertEquals ( response, result )
************************************
[+] input: testValidateIssuedAtAllowsZero() { Long expected = 0L; Long actual = ClaimValidationUtils.validateIssuedAt("iat", expected); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testMavenCompilerTargetSetterWhenValueIsNotNull() { var publishProperties = new PublishProperties(); Integer testValue = 15; publishProperties.mavenCompilerTarget(testValue); Integer actualValue = Integer.parseInt(publishProperties.get("maven.compiler.target")); "<AssertPlaceHolder>"; }
[*] target: assertEquals(testValue, actualValue)
[-] pred: org. junit. Assert. assertEquals ( testValue, actualValue )
************************************
[+] input: JsonProcessingException { var serialized = jsonProvider.getMapper().writerWithDefaultPrettyPrinter().writeValueAsString(subject); for (int i = 0; i < 1000; i++) { HubContent other = new HubContent(); other.setDemo(subject.getDemo()); var entities = subject.getAll(); other.setErrors(subject.getErrors()); List<Object> entityList = new ArrayList<>(entities); Collections.shuffle(entityList); other.putAll(entityList); var otherSerialized = jsonProvider.getMapper().writerWithDefaultPrettyPrinter().writeValueAsString(other); "<AssertPlaceHolder>"; } }
[*] target: assertEquals(serialized, otherSerialized)
[-] pred: org. junit. Assert. assertEquals ( serialized, otherSerialized )
************************************
[+] input: IOException { // Append a string to the file String content = "This is a test"; textHelper.appendStringToFile(content);  // Read the contents of the file and check if it matches the expected string BufferedReader reader = new BufferedReader(new FileReader(testFilePath)); String line = reader.readLine(); reader.close();  Assertions."<AssertPlaceHolder>"; }
[*] target: assertEquals(content, line)
[-] pred: org. junit. Assert. assertEquals ( content, line )
************************************
[+] input: testDescribeIndex() { IndexDescription indexDescription = client.describeIndex(INDEX_NAME); "<AssertPlaceHolder>"; assertNotNull(indexDescription.getDatabase()); assertNotNull(indexDescription.getStatus());  // Assert database information Database database = indexDescription.getDatabase(); assertAll( () -> assertEquals(INDEX_NAME, database.getName()), () -> assertEquals(COSINE, database.getMetric()), () -> assertEquals(3, database.getDimension()), () -> assertEquals(1, database.getReplicas()), () -> assertEquals(1, database.getShards()), () -> assertEquals(1, database.getPods()), () -> assertEquals("p1.x1", database.getPodType()));  // Assert status information Status status = indexDescription.getStatus(); assertAll( () -> assertNotNull(status), () -> assertTrue(status.getWaiting().isEmpty()), () -> assertTrue(status.getCrashed().isEmpty()), () -> { String host = String.format("%s-%s.svc.%s.pinecone.io", INDEX_NAME, "b43e233", System.getenv("PINECONE_ENV")); assertEquals(host, status.getHost()); }, () -> assertEquals(433, status.getPort()), () -> assertEquals("Ready", status.getState()), () -> assertTrue(status.isReady())); }
[*] target: assertNotNull(indexDescription)
[-] pred: org. junit. Assert. assertNotNull ( indexDescription )
************************************
[+] input: testConsumerGroupDescribeWithErrors() { String groupId = "groupId";  MockPartitionAssignor assignor = new MockPartitionAssignor("range"); GroupMetadataManagerTestContext context = new GroupMetadataManagerTestContext.Builder() .withConsumerGroupAssignors(Collections.singletonList(assignor)) .build();  List<ConsumerGroupDescribeResponseData.DescribedGroup> actual = context.sendConsumerGroupDescribe(Collections.singletonList(groupId)); ConsumerGroupDescribeResponseData.DescribedGroup describedGroup = new ConsumerGroupDescribeResponseData.DescribedGroup() .setGroupId(groupId) .setErrorCode(Errors.GROUP_ID_NOT_FOUND.code()); List<ConsumerGroupDescribeResponseData.DescribedGroup> expected = Collections.singletonList( describedGroup );  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testDescribe() { JoinGroupRequestProtocolCollection protocols = new JoinGroupRequestProtocolCollection(Collections.singletonList( new JoinGroupRequestProtocol() .setName("range") .setMetadata(new byte[]{0}) ).iterator());  ClassicGroupMember member = new ClassicGroupMember( "member", Optional.of("group-instance-id"), "client-id", "client-host", 10, 4500, "generic", protocols, new byte[0] );  DescribeGroupsResponseData.DescribedGroupMember expectedDescribedGroupMember = new DescribeGroupsResponseData.DescribedGroupMember() .setMemberId("member") .setGroupInstanceId("group-instance-id") .setClientId("client-id") .setClientHost("client-host") .setMemberAssignment(new byte[0]) .setMemberMetadata(member.metadata("range"));  DescribeGroupsResponseData.DescribedGroupMember describedGroupMember = member.describe("range");  "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedDescribedGroupMember, describedGroupMember)
[-] pred: org. junit. Assert. assertEquals ( expectedDescribedGroupMember, describedGroupMember )
************************************
[+] input: shouldCalculateAverageColumn() { int rows = 3; int cols = 4; Matrix m = new Matrix(rows, cols, i -> 2 * i - 3); double averageIndex = (cols - 1) / 2.0;  Matrix expected = new Matrix(rows, 1); expected.modify((row, col, value) -> 2 * (row * cols + averageIndex) - 3);  Matrix result = m.averageColumn(); "<AssertPlaceHolder>";  }
[*] target: assertEquals(expected, result)
[-] pred: org. junit. Assert. assertEquals ( expected, result )
************************************
[+] input: testInsertRightSiblingAfterFinalCommentErr() { boolean raisedException = false; try { buildCommand("a = 1. " comment", 4).insertRightSibling(Token.createForAbap(0, 1, ".", 0), false); } catch (IntegrityBrokenException e) { // expected case raisedException = true; } "<AssertPlaceHolder>"; }
[*] target: assertTrue(raisedException)
[-] pred: org. junit. Assert. assertTrue ( raisedException )
************************************
[+] input: JsonProcessingException { Model model = new Model(); Map<String, Object> defaults = Map.of("key1", true, "key2", 123, "key3", 0.45, "key4", "str"); model.setDefaults(defaults); when(context.getDeployment()).thenReturn(model); Mockito.doCallRealMethod().when(context).setRequestBody(any(Buffer.class)); when(context.getRequestBody()).thenCallRealMethod(); Throwable error = fn.apply((ObjectNode) ProxyUtil.MAPPER.readTree("{}")); "<AssertPlaceHolder>"; String json = context.getRequestBody().toString(StandardCharsets.UTF_8); ObjectNode result = (ObjectNode) ProxyUtil.MAPPER.readTree(json); assertNotNull(result); assertEquals(123, result.get("key2").asInt()); assertEquals(0.45, result.get("key3").asDouble()); assertEquals("str", result.get("key4").asText()); assertTrue(result.get("key1").asBoolean()); }
[*] target: assertNull(error)
[-] pred: org. junit. Assert. assertNull ( error )
************************************
[+] input: testStringPringWriter() { StringBuilder sb = new StringBuilder(); try (var w = Internal.StringBuilderPrintWriter.of(sb)) { w.write("hello", 0, 4); w.flush(); } String expected = "hell"; String actual = sb.toString(); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expected, actual)
[-] pred: org. junit. Assert. assertEquals ( expected, actual )
************************************
[+] input: testConnectionResourceRequirementsOverrideWorker() { final ResourceRequirements workerDefaultReqs = new ResourceRequirements().withCpuRequest("1").withCpuLimit("1"); final ResourceRequirements connectionResourceRequirements = new ResourceRequirements().withCpuLimit("2").withMemoryLimit(FIVE_HUNDRED_MEM);  final ResourceRequirements result = ResourceRequirementsUtils.getResourceRequirements(connectionResourceRequirements, workerDefaultReqs);  final ResourceRequirements expectedReqs = new ResourceRequirements() .withCpuRequest("1") .withCpuLimit("2") .withMemoryLimit(FIVE_HUNDRED_MEM); "<AssertPlaceHolder>"; }
[*] target: assertEquals(expectedReqs, result)
[-] pred: org. junit. Assert. assertEquals ( expectedReqs, result )
************************************
[+] input: testGetCurrentUser() { // set up a mock request context, details don't matter, just needed to make the // @RequestScope work on the CommunityCurrentUserService ServerRequestContext.with(HttpRequest.GET("/"), () -> { try { final User expectedUser = new User().withUserId(UserPersistence.DEFAULT_USER_ID); when(userPersistence.getDefaultUser()).thenReturn(Optional.ofNullable(expectedUser));  // First call - should fetch default user from userPersistence final User user1 = currentUserService.getCurrentUser(); Assertions.assertEquals(expectedUser, user1);  // Second call - should use cached user final User user2 = currentUserService.getCurrentUser(); Assertions."<AssertPlaceHolder>";  // Verify that getDefaultUser is called only once verify(userPersistence, times(1)).getDefaultUser(); } catch (final IOException e) { fail(e); } }); }
[*] target: assertEquals(expectedUser, user2)
[-] pred: org. junit. Assert. assertEquals ( expectedUser, user2 )
************************************
[+] input: makeOneAuthCycle() { StartTransactionResponse response = this.rpApi.startAuthentication(CLIENT_IP);  Assertions.assertNotNull(response); Assertions.assertNotNull(response.getOrderRef()); Assertions.assertNotNull(response.getAutoStartToken()); Assertions.assertNotNull(response.getQrStartToken()); Assertions.assertNotNull(response.getQrStartSecret());  // Collect CollectResponse collectResponse = this.rpApi.collect(response.getOrderRef()); Assertions.assertNotNull(collectResponse);  Assertions.assertNotNull(collectResponse.getOrderRef()); Assertions.assertEquals(response.getOrderRef(), collectResponse.getOrderRef());  Assertions.assertNotNull(collectResponse.getStatus()); Assertions.assertEquals("pending", collectResponse.getStatus()); Assertions.assertNotNull(collectResponse.getHintCode()); Assertions.assertEquals("outstandingTransaction", collectResponse.getHintCode());  // Cancel boolean cancelResponse = this.rpApi.cancel(response.getOrderRef()); Assertions."<AssertPlaceHolder>"; }
[*] target: assertTrue(cancelResponse)
[-] pred: org. junit. Assert. assertTrue ( cancelResponse )
************************************
[+] input: testJoinPrepareAndCommitCompleted() { try (ConsumerCoordinator coordinator = prepareCoordinatorForCloseTest(true, true, Optional.of("group-id"), true)) { coordinator.ensureActiveGroup();  prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.NONE); int generationId = 42; String memberId = "consumer-42";  boolean res = coordinator.onJoinPrepare(time.timer(0L), generationId, memberId); coordinator.invokeCompletedOffsetCommitCallbacks();  "<AssertPlaceHolder>"; assertFalse(client.hasPendingResponses()); assertFalse(client.hasInFlightRequests()); assertFalse(coordinator.coordinatorUnknown()); } }
[*] target: assertTrue(res)
[-] pred: org. junit. Assert. assertTrue ( res )
************************************
[+] input: signRequestEmpty() { // Arrange SignRequest request = new SignRequest();  // Act boolean valid = request.validate();  // Assert "<AssertPlaceHolder>"; }
[*] target: assertFalse(valid)
[-] pred: org. junit. Assert. assertFalse ( valid )
************************************
[+] input: testCreateConfigsDatabaseAvailabilityCheck() { final var dslContext = mock(DSLContext.class); final var timeoutMs = 500L; final var check = DatabaseCheckFactory.createConfigsDatabaseAvailabilityCheck(dslContext, timeoutMs);  Assertions."<AssertPlaceHolder>"; Assertions.assertEquals(ConfigsDatabaseAvailabilityCheck.class, check.getClass()); Assertions.assertEquals(timeoutMs, check.getTimeoutMs()); Assertions.assertTrue(check.getDslContext().isPresent()); Assertions.assertEquals(dslContext, check.getDslContext().get()); }
[*] target: assertNotNull(check)
[-] pred: org. junit. Assert. assertNotNull ( check )
************************************
[+] input: testMavenCompilerTargetDefaultValue() { var publishProperties = new PublishProperties(); var actualValue = publishProperties.mavenCompilerTarget(); "<AssertPlaceHolder>"; }
[*] target: assertNull(actualValue)
[-] pred: org. junit. Assert. assertNull ( actualValue )
************************************
[+] input: testIteratorOverElements() { Slab<String> slab = new Slab<>(); List<String> addedElements = new ArrayList<>();  addedElements.add("test1"); slab.add("test1"); addedElements.add("test2"); slab.add("test2");  slab.remove(0); addedElements.remove(0);  List<String> iteratedElements = new ArrayList<>(); for (Pair<Integer, String> pair : slab) { iteratedElements.add(pair.getValue1()); }  "<AssertPlaceHolder>"; }
[*] target: assertEquals(addedElements, iteratedElements)
[-] pred: org. junit. Assert. assertEquals ( addedElements, iteratedElements )
************************************
